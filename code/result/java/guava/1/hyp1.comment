1 Sets the comparator for row ordering. @param rowComparator comparator to define row order @return this Builder instance for method chaining
2 Sets the comparator for column ordering. @param columnComparator comparator to define column order @return this Builder instance for method chaining
3 Merges multiple sorted iterables into a single sorted iterable. @param iterables collection of sorted iterables to merge @param comparator comparator for ordering elements @return unmodifiable merged iterable
4 Finds the index of the first element matching a predicate. @param iterator source iterator to search through @param predicate condition to apply to each element @return index of the first matching element or -1 if none found
5 Configures a builder to create SortedSetMultimap with custom comparator. @param comparator the comparator for sorting values @return SortedSetMultimapBuilder configured with the given comparator
6 Creates a SetMultimapBuilder with enum set values. @param valueClass the Enum class for value types @return a SetMultimapBuilder configured for enum sets
7 Returns a union of two sets. @param set1 first input set @param set2 second input set @return SetView containing elements from both sets without duplicates
8 Computes the intersection of two sets. @param set1 first set @param set2 second set @return SetView containing elements common to both sets
9 Computes the difference between two sets. @param set1 the first set @param set2 the second set @return a SetView containing elements in set1 but not in set2
10 Computes the symmetric difference of two sets. @param set1 first set @param set2 second set @return SetView containing elements in either set but not both
11 Finds the index of a target boolean array within a source array. @param array the source boolean array to search in @param target the boolean array to find @return the starting index of the target array within the source, or -1 if not found
12 Finds the index of a target byte array within another byte array. @param array the byte array to search within @param target the byte array to find @return the starting index of target in array, or -1 if not found
13 Finds the index of a target character array within another array. @param array the source character array to search within @param target the character array to find @return starting index of target in array, or -1 if not found
14 Finds the starting index of a target double array within a source array. @param array the source array to search within @param target the sub-array to find in the source array @return the starting index of the target array, or -1 if not found
15 Finds the starting index of a target float array within a source array. @param array the source array to search within @param target the target array to find @return the starting index of the target in the array, or -1 if not found
16 Finds the index of the first occurrence of a target array within an array. @param array the array to search within @param target the array to search for @return the starting index of the target array, or -1 if not found
17 Finds the index of the first occurrence of a target long array within another array. @param array the array to search within @param target the array to find @return the starting index of the target array, or -1 if not found
18 Finds the starting index of a target short array within another array. @param array the array to search within @param target the array to search for @return the starting index of the target if found, otherwise -1
19 Creates a new guard for condition satisfaction. @param isSatisfied supplier to check if the condition is met @return Guard object representing the condition
20 Returns the default value for a given primitive type. @param type Class object representing the primitive type @return Default value of the specified type or null if not applicable
21 Specifies text to use for null elements. @param nullText replacement string for null values @return new Joiner instance with updated behavior
22 Initializes a new instance of ToStringHelper. @param className name of the class being represented
23 Filters and returns present instances from an iterable of Optionals. @param optionals iterable containing Optional objects @return Iterable of non-null values present in the Optionals
24 Splits a character sequence into parts. @param sequence the input character sequence to split @return an Iterable of split strings
25 Pads the start of a string with a specified character to reach a minimum length. @param string the original string @param minLength the desired minimum length of the resulting string @param padChar the character used for padding @return the padded string
26 Pads the end of a string with a specified character to reach a minimum length. @param string the original string @param minLength the desired minimum length of the string @param padChar the character used for padding @return the padded string or the original if already long enough
27 Throws the given throwable if it is an instance of the specified type. @param throwable the throwable to check and possibly rethrow @param declaredType the type to check against @throws X if throwable is an instance of declaredType
28 Throws the given throwable if it is an unchecked exception or error. @param throwable the throwable to check and possibly rethrow
29 Retrieves the causal chain of a throwable. @param throwable the initial throwable to start from @return an unmodifiable list of Throwable objects in the causal chain @throws IllegalArgumentException if a loop is detected in the causal chain
30 Wraps a CacheLoader to enable asynchronous reloading. @param loader the original CacheLoader @param executor the Executor for asynchronous operations @return a new CacheLoader with async reload capability
31 Creates an asynchronous removal listener. @param listener the original removal listener @param executor the executor to handle asynchronous execution @return a RemovalListener that executes asynchronously
32 Retrieves a map of values for a specified column. @param columnKey unique identifier for the column @return Map from row keys to values in the column, or empty map if column not found
33 Retrieves a map representing the specified row. @param rowKey unique key for the row @return Map of column keys to values or an empty map if row not found
34 Maps elements of a `Spliterator` using a function. @param fromSpliterator the source `Spliterator` @param function the mapping function to apply @return a new `Spliterator` with mapped elements
35 Filters elements of a `Spliterator` based on a predicate. @param fromSpliterator the source spliterator to filter @param predicate the condition to apply to each element @return a `Spliterator` containing only elements that match the predicate
36 Checks if a collection contains an object safely. @param collection the collection to search in @param object the object to look for, can be null @return true if the collection contains the object, false otherwise
37 Safely removes an object from a collection. @param collection the collection to modify @param object the object to remove @return true if the object was removed, false otherwise
38 Checks if elements in the iterable are sorted according to the comparator. @param iterable collection of objects to check @param comparator logic to compare elements @return true if elements are in order, false otherwise
39 Checks if elements in the iterable are in strict order based on comparator. @param iterable collection of elements to check @param comparator logic for comparing elements @return true if elements are strictly ordered, false otherwise
40 Creates a comparator that orders Optionals, placing empty ones first. @param valueComparator comparator for the values within Optional @return comparator for Optionals
41 Creates a comparator for Optionals that orders empty values last. @param valueComparator comparator for the wrapped values @return Comparator ordering Optionals with empties at the end
42 Returns a view of the elements less than (or equal to, if inclusive) `toElement`. @param toElement upper bound element for the returned set @param inclusive true if the `toElement` is included in the returned set @return ContiguousSet containing elements up to `toElement`
43 Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) `fromElement`. @param fromElement lower bound element @param inclusive true if the lower bound is inclusive @return ContiguousSet containing elements greater than or equal to `fromElement`
44 Adds an element to the queue, evicting the oldest one if necessary. @param e the element to add @return always true
45 Wraps an iterable, ensuring it is not null. @param iterable the iterable to wrap @return a non-null FluentIterable instance
46 Adds an element to the builder. @param element the element to add @return the Builder instance for method chaining
47 Sets a comparator to order keys in the multimap. @param keyComparator comparator for ordering keys @return Builder instance with specified key comparator
48 Sets the comparator for ordering values. @param valueComparator comparator to define value order @return this Builder instance for method chaining
49 Adds an element to the multiset. @param element the element to add, cannot be null @return this builder instance for chaining
50 Adds multiple copies of an element to the multiset. @param element the element to add @param occurrences number of times to add the element @return this Builder instance for method chaining
51 Sets the count of a specific element in the multiset. @param element the element to set the count for @param count the new count of the element @return this Builder instance
52 Collects elements into an immutable sorted multiset. @param comparator for element ordering @param elementFunction extracts elements from input @param countFunction determines the count of each element @return Collector to create ImmutableSortedMultiset
53 Returns a view of the set whose elements are strictly less than (or equal to, if inclusive) toElement. @param toElement upper bound element for the returned set @param inclusive true if the upper bound is inclusive @return ImmutableSortedSet containing elements up to toElement
54 Returns a view of the set whose elements are greater than (or equal to, if inclusive) the specified element. @param fromElement the lower bound element @param inclusive true if the lower bound is inclusive @return ImmutableSortedSet containing elements greater than or equal to fromElement
55 Returns an unmodifiable view of the specified iterable. @param iterable the iterable to wrap @return an unmodifiable Iterable object
56 Ensures an iterable is not null. @param iterable the collection to check @return the non-null iterable @deprecated Use checkNotNull directly instead
57 Removes and returns the first element matching a predicate. @param removeFrom iterable to remove from @param predicate condition to match elements @return matched element or null if none found
58 Creates a cycled iterable from the given iterable. @param iterable the source iterable to cycle @return a new iterable that infinitely repeats the elements of the source
59 Filters elements of an iterable based on a predicate. @param unfiltered the original iterable to filter @param retainIfTrue predicate defining which elements to retain @return a new iterable containing only elements that satisfy the predicate
60 Transforms elements of an iterable using a function. @param fromIterable the source iterable to transform @param function the transformation function @return a new iterable with transformed elements
61 Creates a consuming iterable from the given iterable. Ensures the original iterable is not null. @param iterable the source iterable @return an iterable that consumes elements on iteration
62 Returns an unmodifiable view of the specified iterator. @param iterator the iterator to wrap @return UnmodifiableIterator that prevents modification
63 Wraps an iterator to ensure it is not null. @param iterator the iterator to wrap @return the wrapped iterator @deprecated Use checkNotNull directly
64 Removes all elements from the iterator that are contained in the specified collection. @param removeFrom iterator to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
65 Removes elements from iterator that match the predicate. @param removeFrom iterator to modify @param predicate condition for removal @return true if any element was removed, false otherwise
66 Retains only the elements in the specified iterator that are contained in the given collection. @param removeFrom iterator to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
67 Adds all elements from an iterator to a collection. @param addTo collection to add elements to @param iterator source of elements to add @return true if the collection was modified, false otherwise
68 Creates an infinite cycling iterator from a given iterable. @param iterable the source iterable to cycle through @return an Iterator that cycles indefinitely over the elements of the iterable
69 Filters elements of an iterator based on a predicate. @param unfiltered the original iterator to filter @param retainIfTrue predicate to determine if element should be retained @return UnmodifiableIterator with filtered elements
70 Checks if all elements in the iterator satisfy the given predicate. @param iterator the iterator to check @param predicate the condition to apply to each element @return true if all elements match the predicate, false otherwise
71 Finds the first element in an iterator that matches a given predicate. @param iterator the iterator to search through @param predicate the condition to apply to each element @return the matching element or throws NoSuchElementException if not found
72 Transforms elements of an iterator using a specified function. @param fromIterator source iterator to transform @param function transformation function applied to each element @return new Iterator with transformed elements
73 Creates a consuming iterator that removes elements after iteration. @param iterator the original iterator to wrap @return an unmodifiable iterator that consumes elements
74 Clears all elements from an iterator. @param iterator the iterator to clear
75 Wraps an Enumeration as an UnmodifiableIterator. @param enumeration the Enumeration to wrap @return an UnmodifiableIterator over the Enumeration elements
76 Wraps a PeekingIterator to ensure it's not null. @param iterator the iterator to wrap @return the same iterator if non-null, throws NPE otherwise
77 Creates a new EnumMap with the specified enum type. @param type the enum class to create the map for @return an empty EnumMap of the given enum type
78 Creates an unmodifiable view of a map entry. @param entry the original map entry to wrap @return an unmodifiable Entry object
79 Transforms an entry using a given transformer. @param transformer the function to apply to the entry's key and value @param entry the original map entry @return a new entry with transformed value
80 Converts an EntryTransformer to a Function for map entries. @param transformer the transformer to apply to each entry @return a Function that transforms an Entry<K, V1> to Entry<K, V2>
81 Safely retrieves a value from the map using a key. @param map the source map @param key the key to look up @return the value associated with the key or null if not found or an exception occurs
82 Safely checks if a map contains a specified key. @param map the map to check @param key the key to look for @return true if the key is contained, false otherwise or on error
83 Safely removes a value from the map by key. @param map the map to remove from @param key the key of the value to remove @return the removed value or null if not found or an exception occurs
84 Applies an action to each key-value pair in the multimap. @param action the action to apply; must not be null
85 Configures multimaps to use tree keys with a specified comparator. @param comparator the comparator for key ordering @return MultimapBuilderWithKeys configured with tree keys
86 Creates a MultimapBuilder configured with enum keys. @param keyClass the Class object of the enum type for keys @return a MultimapBuilderWithKeys instance supporting enum keys
87 Returns an unmodifiable view of the specified immutable multimap. @param delegate the immutable multimap to wrap @return an unmodifiable Multimap instance
88 Returns an unmodifiable view of the specified set multimap. @param delegate the immutable set multimap to wrap @return an unmodifiable SetMultimap instance
89 Returns an unmodifiable view of the specified list multimap. @param delegate the original immutable list multimap @return unmodifiable ListMultimap object
90 Iterates over each entry in the multiset, applying the specified action. @param action the consumer to apply to each entry (element and count)
91 Iterates over each element in the multiset, applying an action. @param action the consumer to apply to each element
92 Returns an unmodifiable view of the specified immutable multiset. @param multiset the immutable multiset to be wrapped @return the unmodifiable multiset
93 Computes the union of two multisets. @param multiset1 first input multiset @param multiset2 second input multiset @return a new Multiset representing the union of both inputs
94 Computes the intersection of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new Multiset containing elements common to both, with minimum counts
95 Computes the sum of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return Multiset representing the union of both, with counts added
96 Computes the difference between two multisets. @param multiset1 the first multiset (minuend) @param multiset2 the second multiset (subtrahend) @return a new Multiset representing the elements in multiset1 not in multiset2
97 Checks if a multiset contains at least as many occurrences of each element as another multiset. @param superMultiset the multiset to check within @param subMultiset the multiset specifying required occurrences @return true if superMultiset contains all elements with equal or greater counts, false otherwise
98 Retains only the specified occurrences of each element in a multiset. @param multisetToModify the multiset to modify @param occurrencesToRetain the multiset specifying occurrences to retain @return true if the multiset was modified, false otherwise
99 Removes occurrences of elements from one multiset based on another. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset containing elements to remove @return true if any modifications were made, false otherwise
100 Retains only the elements in this multiset that are contained in the specified collection. @param elementsToRetain collection of elements to retain @return true if this multiset was modified as a result of the call
101 Ensures the provided Ordering is not null. @param ordering the Ordering to check @return the non-null Ordering @deprecated Use checkNotNull directly instead
102 Drains elements from a blocking queue into a collection. @param q the source blocking queue @param buffer the destination collection @param numElements max number of elements to drain @param timeout max wait time for an element @param unit time unit for the timeout @return number of elements drained @throws InterruptedException if interrupted while waiting
103 Drains elements from a blocking queue into a collection uninterruptibly. @param q the source blocking queue @param buffer the destination collection to add elements to @param numElements maximum number of elements to drain @param timeout maximum time to wait for elements @param unit time unit for the timeout @return number of elements successfully drained
104 Checks if the range contains a specific value. @param value the value to check @return true if value is within the range, false otherwise
105 Creates a new TreeSet with the specified comparator. @param comparator the comparator to order elements @return a new TreeSet instance
106 Zips two streams together using a BiFunction. @param streamA the first input stream @param streamB the second input stream @param function the function to apply to elements from both streams @return a new stream with results of applying the function to pairs of elements
107 Maps elements of a stream to another type using an index. @param stream the input stream @param function the mapping function with index @return a new stream with mapped elements
108 Maps elements of an IntStream to objects using a function with index. @param stream the input IntStream @param function the mapping function that takes an integer and its index @return a Stream of mapped objects
109 Maps elements of a LongStream to objects using an index. @param stream the input LongStream @param function mapping function with index @return Stream of mapped objects
110 Maps a DoubleStream to a Stream with index. @param stream the input DoubleStream @param function the mapping function with index @return a Stream of mapped elements
111 Merges a range with a specified value, applying a remapping function to existing values. @param range the range to merge @param value the value associated with the range @param remappingFunction function to apply for merging values
112 Creates a TreeTraverser with custom child retrieval. @param nodeToChildrenFunction function to get children of a node @return TreeTraverser instance configured with the given function
113 Performs a pre-order traversal on the tree. @param root the starting node of the traversal @return FluentIterable with nodes in pre-order
114 Returns a FluentIterable for post-order traversal of the tree. @param root the root node of the tree @return FluentIterable containing nodes in post-order
115 Performs breadth-first traversal starting from the given root node. @param root the root of the tree to traverse @return FluentIterable containing nodes in breadth-first order
116 Adds an escape mapping for a character. @param c the character to be escaped @param r the replacement string for the character @return this CharEscaperBuilder instance
117 Adds a character escape mapping. @param c the character to be escaped @param replacement the string replacement for the character @return this Builder instance for method chaining
118 Retrieves the Unicode code point at a specified index. @param seq the character sequence to process @param index the starting index of the code point @param end the end index for validation @return the Unicode code point or its inverse if incomplete surrogate pair @throws IllegalArgumentException for invalid surrogate pairs
119 Constructs a DeadEvent with a source and an event. Ensures neither the source nor the event is null. @param source origin of the undeliverable event @param event the undeliverable event object
120 Handles exceptions thrown by event subscribers. @param e the original exception @param context provides details about the subscriber and event
121 Invokes the subscriber method with the given event. @param event the event object to pass to the method @throws InvocationTargetException if the method throws an exception
122 Constructs a SubscriberExceptionContext with event bus, event, subscriber, and method. @param eventBus the EventBus instance @param event the event being processed @param subscriber the object subscribing to events @param subscriberMethod the method handling the event
123 Creates an immutable copy of the given graph. @param graph the original ImmutableGraph to copy @return a non-null ImmutableGraph instance
124 Copies an immutable network, ensuring it is not null. @param network the network to copy @return the original network object @deprecated Use checkNotNull directly instead
125 Creates an immutable copy of the given graph. @param graph the graph to copy @return a new ImmutableValueGraph instance @deprecated Use `checkNotNull(graph)` instead
126 Visits the next node in the graph traversal. @param horizon stack of iterators representing the current traversal path @return the next node visited or null if no more nodes to visit
127 Initializes a new HashingInputStream. @param hashFunction the hashing function to use @param in the input stream to read from
128 Constructs an AppendableWriter with a specified target. @param target the Appendable destination to write to
129 Creates a ByteSink that encodes bytes to the given CharSink. @param encodedSink destination for encoded characters @return ByteSink for writing encoded bytes
130 Creates a ByteSource for decoding from a character source. @param encodedSource the CharSource containing encoded data @return a ByteSource that decodes the input stream
131 Constructs a new CharSequenceReader. @param seq the CharSequence to read from, must not be null
132 Copies characters from a Reader to a StringBuilder. @param from source Reader @param to destination StringBuilder @return number of characters copied @throws IOException if an I/O error occurs
133 Copies data from a Reader to a Writer. @param from source Reader @param to destination Writer @return number of characters copied @throws IOException if an I/O error occurs
134 Skips exactly 'n' characters in the given Reader. @param reader source to skip characters from @param n number of characters to skip @throws IOException if an I/O error occurs or end of stream reached prematurely
135 Constructs a CountingInputStream wrapping the given InputStream. @param in the InputStream to be wrapped
136 Constructs a CountingOutputStream that wraps an existing OutputStream. @param out the OutputStream to be wrapped and monitored
137 Creates a BufferedReader for reading from a file with a specified charset. @param file the File to read from @param charset the Charset to use for decoding bytes to characters @return a BufferedReader instance @throws FileNotFoundException if the file does not exist or cannot be opened
138 Creates a BufferedWriter for writing to a file with specified charset. @param file the File object to write to @param charset the Charset to use for encoding @return BufferedWriter instance @throws FileNotFoundException if the file cannot be opened for writing
139 Updates the last modified timestamp of a file. @param file the file to touch @throws IOException if unable to update the file's timestamp
140 Creates all necessary parent directories for a given file. @param file the file whose parents need creation @throws IOException if unable to create parent directories
141 Extracts the file extension from a full file name. @param fullName complete file path or name @return file extension or empty string if no dot is present
142 Retrieves the file name without its extension. @param file full path of the file @return file name without extension or original name if no extension exists
143 Constructs a LittleEndianDataInputStream from an InputStream. @param in the input stream to read data from
144 Constructs a LittleEndianDataOutputStream wrapping the given OutputStream. @param out the OutputStream to wrap, must not be null
145 Updates or creates a file with the current system time. @param path the file path to touch @throws IOException if an I/O error occurs
146 Constructs a filter with a specified pattern. @param pattern regular expression pattern to match file names
147 Checks if a BigInteger is a power of two. @param x the BigInteger to check @return true if x is a power of two, false otherwise
148 Applies a given consumer to each element in the array range. @param consumer action to be performed on each double value
149 Applies a given action to each element in the array. @param consumer action to be performed on each element
150 Applies a given action to each element within the specified range. @param consumer the action to be performed on each element
151 Checks if a class is a wrapper type. @param type the Class object to check @return true if the class is a wrapper type, false otherwise
152 Wraps a primitive type to its corresponding wrapper class. @param type the primitive type to wrap @return the wrapper class or the original type if not a primitive
153 Unwraps a wrapper class to its corresponding primitive type. @param type the wrapper class to unwrap @return the primitive type if available, otherwise the original type
154 Parses a string as an unsigned byte value. @param string the string to parse @param radix the radix used in the string representation @return the parsed unsigned byte value @throws NumberFormatException if the string is out of range for an unsigned byte
155 Parses a string as an unsigned integer. @param string the string to parse @param radix the base of the number @return the parsed unsigned integer @throws NumberFormatException if the input is out of range
156 Initializes a new schedule with a specified delay and time unit. @param delay initial delay before task execution @param unit time unit for the delay @throws NullPointerException if the TimeUnit is null
157 Updates the value for a given key using an atomic operation. @param key the key to update @param updaterFunction function to compute new value from current value @return updated value after applying the function
158 Updates the value for a key using a provided function and returns the old value. @param key the key to update @param updaterFunction the function to compute the new value @return the old value associated with the key
159 Converts a Callable to an AsyncCallable using a ListeningExecutorService. @param callable the original Callable task @param listeningExecutorService executor service for asynchronous execution @return AsyncCallable that submits the task to the executor service
160 Wraps a Callable to rename the thread during execution. @param callable the task to execute @param nameSupplier supplies the new thread name @return a Callable with thread renaming
161 Wraps a Runnable to rename the thread during execution. @param task the original Runnable task @param nameSupplier supplier for the new thread name @return a Runnable that renames the thread before and after execution
162 Wraps an asynchronous function to create a closing future without a closer. @param function the original async function to wrap @return a new AsyncClosingFunction with no resource closure logic
163 Converts a FluentFuture to another, ensuring it's not null. @param future the FluentFuture to convert @return the non-null FluentFuture @deprecated use checkNotNull(future) directly
164 Transforms the result of a future using a given function. @param input the original Future @param function the transformation function @return a new Future with transformed results
165 Decorates an executor to rename threads executing tasks. @param executor the original executor service @param nameSupplier provides new thread names @return decorated executor with renamed threads
166 Decorates an executor service to rename threads. @param service the original ExecutorService @param nameSupplier provides new thread names @return a decorated ExecutorService with renamed threads
167 Decorates a scheduled executor service to rename threads. @param service the original ScheduledExecutorService @param nameSupplier supplies new thread names @return a decorated ScheduledExecutorService with renamed threads
168 Constructs a SequentialExecutor with a specified Executor. @param executor the Executor to manage tasks
169 Executes a task sequentially. @param task the Runnable task to execute
170 Sets the uncaught exception handler for threads. @param uncaughtExceptionHandler handler to manage uncaught exceptions @return this ThreadFactoryBuilder instance
171 Sets a backing thread factory. @param backingThreadFactory the underlying thread factory to use @return this builder instance for method chaining
172 Joins a thread with an uninterruptible timeout. @param toJoin the thread to join @param timeout the maximum time to wait @param unit the time unit of the timeout
173 Sets the ticker for cache expiration. @param ticker the Ticker to use for timekeeping @return this CacheBuilder instance
174 Sets a removal listener for cache entries. @param listener the listener to notify on entry removals @return CacheBuilder instance with the listener set
175 Calculates and returns the mean of the dataset. @return mean value as a double
176 Returns the minimum value from the dataset. @return minimum value or throws exception if no data points are present
177 Returns the maximum value from the dataset. @return maximum value or throws exception if no data present
178 Calculates the mean of accumulated data. @return mean value as a double
179 Returns the minimum value from the accumulated data. @return minimum value or throws IllegalStateException if no data points added
180 Returns the maximum value in the dataset. @return maximum value or throws IllegalStateException if no data points added
181 Returns a CountDownLatch that counts down when all resources are closed. If already closed, returns an already counted-down latch. Ensures thread-safe initialization of the latch.
182 Converts a string to lowercase. @param string the input string to convert @return the converted lowercase string
183 Converts an ASCII character to lowercase. @param c the character to convert @return lowercase version of c, or c if already lowercase
184 Converts a string to uppercase ASCII. @param string the input string @return the converted uppercase string or original if no change needed
185 Converts a character to uppercase ASCII. @param c the character to convert @return uppercase version of the character if it's lowercase, otherwise the original character
186 Truncates a character sequence to a specified maximum length with an indicator. @param seq the original character sequence @param maxLength the maximum allowed length of the truncated string @param truncationIndicator the indicator appended if truncation occurs @return the truncated string with the indicator, or the original if no truncation is needed
187 Writes statistical data to a ByteBuffer. @param buffer destination buffer for writing stats
188 Constrains a short value within a specified range. @param value the value to constrain @param min the minimum allowable value @param max the maximum allowable value @return the constrained value within [min, max]
189 Sets the thread priority. @param priority the priority to set @return this builder instance
190 Compares two character sequences for equality, ignoring case. @param s1 first sequence to compare @param s2 second sequence to compare @return true if sequences are equal ignoring case, false otherwise
191 Constructs a CacheStats object with specified metrics. Validates that all counts are non-negative. @param hitCount number of cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of load exceptions @param totalLoadTime total time spent on loading operations @param evictionCount number of evictions
192 Constructs an AbstractMapBasedMultimap with an empty backing map. @param map the initial map to use; must be empty
193 Sets the internal map and validates non-empty collections. @param map the new map to set
194 Constructs an `AbstractMapBasedMultiset` with a given backing map. @param backingMap the initial empty map to use for storing elements and their counts
195 Returns a view of the subset of elements within the specified range. @param fromElement lower bound of the range (inclusive) @param fromInclusive true if the lower bound is inclusive @param toElement upper bound of the range (inclusive) @param toInclusive true if the upper bound is inclusive @return ContiguousSet containing elements within the specified range
196 Constructs an EnumMultiset for the specified enum type. @param type enum class to manage
197 Returns a subset of elements within the specified range. @param fromElement lower bound element (inclusive) @param fromInclusive true if fromElement is inclusive @param toElement upper bound element (inclusive) @param toInclusive true if toElement is inclusive @return ImmutableSortedSet containing elements in the specified range
198 Partitions an iterable into sublists of a specified size. @param iterable the iterable to partition @param size the maximum size of each sublist @return Iterable of Lists containing elements from the original iterable
199 Partitions an iterable into fixed-size lists, padding the last partition if necessary. @param iterable the source iterable to partition @param size the desired size of each partition @return Iterable<List<T>> where each list is a partition of the original iterable
200 Sets the expected size of the queue. Validates that the provided size is non-negative. @param expectedSize the expected number of elements in the queue @return the Builder instance for method chaining
201 Sets the maximum size for the priority queue. Validates that the provided size is positive. @param maximumSize the maximum capacity of the queue @return the Builder instance for method chaining
202 Initializes the AbstractStreamingHasher with specified chunk and buffer sizes. Validates that bufferSize is a multiple of chunkSize. Allocates a ByteBuffer for data processing. @param chunkSize size of each processing chunk @param bufferSize total buffer size for data collection
203 Ensures a double value is non-negative. @param value input double value @return the original value if positive, otherwise 0.0
204 Creates a character matcher that matches a specific character. @param match the character to be matched against @return CharMatcher instance that matches the specified character
205 Creates a matcher to check if characters do not match a specified character. @param match the character to exclude from matching @return CharMatcher instance that matches characters not equal to 'match'
206 Collapses matching characters in a sequence to a single replacement character. @param sequence input character sequence to process @param replacement character to replace matches with @return processed string with collapsed matches
207 Default constructor initializes Converter with automatic null handling enabled.
208 Checks equality based on encapsulated object and equivalence. @param obj object to compare @return true if objects are equivalent, false otherwise
209 Tests equivalence of two objects. @param t first object to compare @param u second object to compare @return true if objects are equivalent, false otherwise
210 Removes a value reference from the segment. @param key key associated with the value to be removed @param hash hash code of the key @param valueReference reference to the weak value to remove @return true if removal was successful, false otherwise
211 Clears a value for testing purposes. @param key the key associated with the entry to clear @param hash the hash code of the key @param valueReference the reference to the value to be cleared @return true if the value was successfully cleared, false otherwise
212 Compares two iterators for element-wise equality. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators have the same elements in the same order; false otherwise
213 Checks if two multiset entries are equal. @param object the object to compare with @return true if both entries have the same element and count; false otherwise
214 Checks if traversal can proceed without reusing an edge. @param graph the graph to traverse @param nextNode the node to move to next @param previousNode the current node, nullable @return true if traversal is valid; false if undirected and would reuse edge
215 Returns hash code based on equivalence. @return computed hash code using equivalence relation
216 Constructs a new FinalizablePhantomReference. @param referent object the reference refers to @param queue finalization queue for managing references
217 Initializes a new soft reference with a cleanup. @param referent the object to be weakly referenced @param queue the finalization queue for managing cleanup
218 Constructs a finalizable weak reference. @param referent the object to be weakly referenced, can be null @param queue the reference queue managing cleanup
219 Creates a constant function that always returns the specified value. @param value the constant value to be returned by this function @return Function object that always returns the given value
220 Extracts host and port from a bracketed host-port string. @param hostPortString input string in the format "[host]:port" @return array containing host and port, or empty port if not present
221 Ensures IPv6 literals are enclosed in brackets. Throws IllegalArgumentException if not. @return HostAndPort instance with validated format
222 Decrements the given IP address. @param address current InetAddress to decrement @return decremented InetAddress or throws if it wraps around
223 Increments the given IP address. @param address current InetAddress object @return incremented InetAddress object
224 Creates a proxy instance for the specified interface type. @param <T> generic type of the interface @param interfaceType class representing the interface @param handler invocation handler to process method calls @return proxy object implementing the specified interface
225 Captures and returns the first type argument of the superclass. @return Type representing the first generic type argument
226 Appends elements from an iterator to a given Appendable. @param appendable the destination for appending @param parts iterator of objects to join @return the original Appendable with appended elements @throws IOException if an I/O error occurs
227 Appends map entries to a StringBuilder. @param builder the StringBuilder to append to @param entries iterable of map entries @return the updated StringBuilder
228 Joins map entries into a string. @param entries iterator of map entries @return string representation of joined entries
229 Sets a custom key-value separator for map-like structures. @param keyValueSeparator separator character for keys and values @return new MapJoiner instance with the specified separator
230 Generates a string representation of the object with name-value pairs. Omit null or empty values if configured. Uses a snapshot for consistency. @return formatted string representation
231 Retrieves the immutable set of values associated with a key. @param key the key whose associated values are to be returned @return an ImmutableSet of values or an empty set if no values are found
232 Retrieves a resource by name. @param resourceName name of the resource to find @return URL of the resource or throws IllegalArgumentException if not found
233 Returns an empty Optional instance. @return Optional representing no value present
234 Converts a Google Optional to a Java Optional. @param googleOptional the Google Optional to convert @return Java Optional or null if input is null
235 Converts an empty string to null. @param string input string @return original string or null if it's empty
236 Checks if a string is null or empty. @param string the string to check @return true if the string is null or empty, false otherwise
237 Skips the specified number of elements from an iterable. @param iterable the source iterable @param numberToSkip the number of elements to skip @return a new iterable with skipped elements removed
238 Limits the size of an iterable. @param iterable the source iterable @param limitSize the maximum number of elements to include @return a new iterable with limited size
239 Advances an iterator by a specified number of elements. @param iterator the iterator to advance @param numberToAdvance the number of elements to skip @return the actual number of elements advanced (up to numberToAdvance)
240 Limits the number of elements returned by an iterator. @param iterator the source iterator @param limitSize maximum number of elements to return @return a new iterator with limited elements
241 Creates a traverser for a tree structure. Validates that the input graph is directed if it's a BaseGraph or Network. @param tree successors function representing the tree @return Traverser object configured for tree traversal
242 Ensures the input is a positive integer and rounds it up to the nearest multiple of 32. @param bits the number of bits to check and adjust @return the adjusted number of bits as a multiple of 32
243 Converts a BigInteger to an InetAddress. @param address BigInteger representation of the IP address @param isIpv6 true if the address is IPv6, false for IPv4 @return InetAddress object created from the BigInteger @throws IllegalArgumentException if BigInteger exceeds address size or is negative
244 Repeats a string multiple times. @param string the string to repeat @param count number of times to repeat @return repeated string or empty if count is zero
245 Constructs a BloomFilter with specified parameters. @param bits underlying bit array for storage @param numHashFunctions number of hash functions to use @param funnel function to convert elements into bytes @param strategy strategy for determining bit indices
246 Creates a concatenated hash function from an iterable of hash functions. @param hashFunctions iterable collection of hash functions to concatenate @return ConcatenatedHashFunction instance
247 Initializes the SipHash function with specified parameters. @param c number of iterations during Compression; must be positive @param d number of iterations during Finalization; must be positive @param k0 first key component @param k1 second key component
248 Initializes a FileBackedOutputStream with specified file threshold and reset behavior. @param fileThreshold memory limit before switching to file storage @param resetOnFinalize whether to reset the stream during finalization
249 Converts byte array to Inet4Address. @param bytes 4-byte array representing IPv4 address @return Inet4Address object or throws IllegalArgumentException if invalid length
250 Ensures the boolean array has at least the specified minimum length. @param array original boolean array @param minLength desired minimum length of the array @param padding extra capacity to add if resizing @return resized array with at least minLength + padding or original array if sufficient
251 Ensures byte array has minimum length with optional padding. @param array original byte array @param minLength required minimum length @param padding additional space to allocate if needed @return new byte array with sufficient capacity or the original array
252 Ensures the character array has at least the specified minimum length. @param array original character array @param minLength desired minimum length of the array @param padding additional space to allocate if resizing @return resized array with sufficient capacity or original if already large enough
253 Ensures the double array has at least the specified minimum length with optional padding. @param array original array to check and expand if necessary @param minLength minimum required length of the array @param padding additional capacity to add beyond the minimum length @return expanded array or the original array if it already meets the requirements
254 Ensures the array has at least the specified minimum length with optional padding. @param array original float array @param minLength desired minimum length of the array @param padding additional capacity to add if needed @return new array with ensured capacity or the original if sufficient
255 Ensures the given integer array has at least the specified minimum length. @param array input integer array @param minLength desired minimum length of the array @param padding additional capacity to add if resizing is needed @return resized array with at least minLength + padding, or original array if sufficient
256 Ensures the array has at least the specified minimum length with optional padding. @param array original long array @param minLength minimum required length of the array @param padding additional space to allocate beyond minLength if needed @return new array with ensured capacity or the original array if sufficient
257 Ensures the array has at least the specified minimum length with optional padding. @param array original short array @param minLength desired minimum length of the array @param padding additional capacity to add if resizing is needed @return resized array or original if sufficient capacity exists
258 Converts a long to a character, ensuring it's within valid range. @param value the long value to convert @return char representation of the long value
259 Safely casts a long to an int. @param value the long value to cast @return the casted int value Throws IllegalArgumentException if out of int range
260 Safely casts a long to a short. @param value the long value to cast @return the casted short value Throws IllegalArgumentException if out of short range
261 Safely casts a long to a byte. @param value the long value to cast @return the casted byte value @throws IllegalArgumentException if out of byte range
262 Safely casts a long to a byte. @param value the long value to cast @return the byte representation of the input value
263 Casts a long to an int, checking for overflow. @param value the long value to cast @return the casted int value
264 Creates a fixed-delay schedule for tasks. @param initialDelay initial delay before first execution in the specified time unit @param delay delay between task executions in the specified time unit @param unit time unit for delays @return Scheduler object configured with fixed delay
265 Creates a fixed-rate schedule. @param initialDelay delay before first execution @param period time between task executions @param unit time unit for delay and period @return Scheduler instance with fixed-rate configuration
266 Constrains a character within a specified range. @param value the character to constrain @param min minimum allowable value @param max maximum allowable value @return constrained character value
267 Constrains a value within specified range. @param value the value to constrain @param min minimum allowable value @param max maximum allowable value @return constrained value within [min, max]
268 Retrieves a resource as a URL. @param contextClass class used to resolve the resource @param resourceName name of the resource @return URL of the resource or throws IllegalArgumentException if not found
269 Starts the stopwatch. Ensures the stopwatch is not already running. @return this Stopwatch instance for method chaining
270 Stops the stopwatch and records the elapsed time. @return the current Stopwatch instance
271 Validates removal operation in collection iterators. @param canRemove flag indicating if removal is allowed
272 Sets a comparator to order entries by their values. @param valueComparator the comparator for ordering values @return this builder instance
273 Sets the initial capacity of the cache. @param initialCapacity the initial number of entries the cache can hold @return this CacheBuilder instance for method chaining
274 Sets the expected number of concurrently accessing threads. Validates and updates the concurrency level. @param concurrencyLevel the concurrency level to set @return this CacheBuilder instance for method chaining
275 Sets the initial capacity of the map. @param initialCapacity desired initial capacity @return this MapMaker instance for method chaining
276 Sets the concurrency level for map operations. @param concurrencyLevel expected number of concurrent threads accessing the map @return current MapMaker instance for method chaining
277 Sets the maximum number of entries in the cache. @param maximumSize max number of entries; must be non-negative @return this CacheBuilder instance for method chaining
278 Sets the maximum allowable weight for cache entries. @param maximumWeight the maximum total weight of entries; must be non-negative @return this CacheBuilder instance
279 Sets a weigher for the cache. @param weigher function to determine the weight of entries @return CacheBuilder instance with weigher set
280 Sets the cache expiration time after a write operation. @param duration the time duration for expiration @param unit the time unit of the duration @return this CacheBuilder instance
281 Sets the maximum time after an entry is last accessed before it can be removed. @param duration the length of time after which an entry should expire @param unit the time unit for the duration @return this CacheBuilder instance
282 Sets the cache to automatically refresh entries after a fixed duration. @param duration time length for refresh @param unit time unit for the duration @return this CacheBuilder instance
283 Sets the key equivalence strategy. @param equivalence Equivalence object defining key comparison @return CacheBuilder instance with configured key equivalence
284 Sets the value equivalence strategy. @param equivalence the equivalence strategy for values @return this CacheBuilder instance
285 Sets the key equivalence strategy. @param equivalence custom key equivalence logic @return MapMaker instance for chaining
286 Constructs a TypeToken and captures its runtime type. Validates that the captured type is not a type variable. Throws IllegalStateException if it is a type variable.
287 Retrieves the failure cause of the service. @return Throwable object representing the failure cause Throws IllegalStateException if the service has not failed
288 Validates element index within bounds. @param index the index to validate @param size the size of the container @param desc description of the index for error message @return validated index or throws IndexOutOfBoundsException if invalid
289 Validates that an index is within valid bounds. @param index the index to validate @param size the size of the container @param desc description of the index for error messages @return the validated index @throws IndexOutOfBoundsException if index is out of bounds
290 Returns a predicate that always evaluates to true. @param <T> the type of objects this predicate tests @return Predicate that always returns true
291 Returns a predicate that always evaluates to false. Utilizes withNarrowedType() for specific object type handling.
292 Creates a predicate that checks if an object is null. @return Predicate evaluating to true if the object is null
293 Creates a predicate that checks if an object is not null. @return Predicate that evaluates to true for non-null objects
294 Combines two predicates with a logical AND. @param first the first predicate @param second the second predicate @return a Predicate that evaluates to true if both input predicates are true
295 Combines two predicates with a logical OR operation. @param first the first predicate @param second the second predicate @return a Predicate that evaluates to true if either first or second is true
296 Configures the splitter to omit empty strings from results. @return a new Splitter instance with updated configuration
297 Sets the maximum number of splits. @param maxItems limit for the number of splits (-1 for no limit) @return a new Splitter instance with the updated limit
298 Splits a character sequence into a list of strings. @param sequence the input character sequence to split @return an unmodifiable list containing split parts
299 Generates a formatted string of the system property. @return "key=value" representation of the property
300 Converts total elapsed time to specified unit. @param desiredUnit target time unit for conversion @return Elapsed time in the desired unit
301 Returns the elapsed time as a Duration. @return Elapsed time in Duration format
302 Returns the elapsed time in a human-readable format. @return String representing elapsed time with appropriate unit
303 Converts null string to empty string. @param string input string that may be null @return non-null string, either the original or an empty string if null
304 Finds the common prefix between two CharSequences. @param a first CharSequence @param b second CharSequence @return the longest common prefix as String
305 Finds the common suffix between two CharSequences. @param a first CharSequence @param b second CharSequence @return the longest common suffix as String
306 Creates a memoizing supplier for the given instance. @param instance the object to supply @return a Supplier that always returns the same instance
307 Protected constructor preventing external instantiation.
308 Verifies that a boolean expression is true. Throws VerifyException if the expression is false. @param expression the boolean condition to check
309 Verifies a boolean condition. @param expression the condition to check @param errorMessageTemplate error message template with one placeholder @param p1 value for the placeholder in the error message Throws VerifyException if the condition is false
310 Verifies a boolean condition; throws an exception with formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message @param p1 parameter for message formatting
311 Throws a VerifyException with a formatted error message if the expression is false. @param expression boolean condition to verify @param errorMessageTemplate template for the error message, may include placeholders @param p1 parameter for message formatting
312 Verifies a boolean expression; throws an exception with a formatted error message if false. @param expression condition to check @param errorMessageTemplate template for the error message @param errorMessageArgs arguments for formatting the error message
313 Verifies that a boolean expression is true. @param expression condition to check @param errorMessageTemplate template for error message with placeholders @param p1 first character parameter for the error message @param p2 second character parameter for the error message
314 Verifies a boolean condition; throws exception with formatted message if false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
315 Verifies a boolean expression and throws an exception with a formatted error message if false. @param expression the condition to verify @param errorMessageTemplate template for the error message @param p1 first parameter for formatting the error message @param p2 second parameter for formatting the error message
316 Verifies a boolean condition and throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message, supporting placeholders @param p1 first parameter for message formatting (can be null) @param p2 second parameter for message formatting
317 Verifies a boolean condition, throwing an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message (can include placeholders) @param p1 first placeholder value @param p2 second placeholder value
318 Verifies a boolean condition; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message
319 Verifies a boolean condition; throws exception with formatted message if false. @param expression the condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
320 Verifies that a boolean expression is true. Throws an exception with a formatted error message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message
321 Verifies that a boolean expression is true; throws an exception with a formatted message otherwise. @param expression the condition to check @param errorMessageTemplate template for the error message if expression is false @param p1 first placeholder value for the error message @param p2 second placeholder value for the error message
322 Verifies that a boolean expression is true. Throws an exception with a formatted error message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for formatting the error message @param p2 second parameter for formatting the error message
323 Verifies that a boolean expression is true. Throws VerifyException with formatted error message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
324 Verifies a boolean condition and throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting (can be null) @param p2 second parameter for message formatting
325 Verifies a boolean condition; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first placeholder in the error message @param p2 second placeholder in the error message (nullable)
326 Verifies a boolean condition; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message (can include placeholders) @param p1 first parameter for the error message template @param p2 second parameter for the error message template, can be null
327 Verifies a boolean expression; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for formatting the error message @param p2 second parameter for formatting the error message (can be null)
328 Verifies a boolean condition and throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for message formatting (can be null) @param p2 second parameter for message formatting (can be null)
329 Verifies a boolean expression; throws an exception with a formatted message if false. @param expression the condition to check @param errorMessageTemplate template for the error message @param p1 parameter for message formatting @param p2 parameter for message formatting @param p3 parameter for message formatting
330 Verifies that a boolean expression is true. Throws VerifyException with formatted error message if false. @param expression condition to check @param errorMessageTemplate template for the error message @param p1 to p4 parameters for message formatting (can be null)
331 Cleans up resources by finalizing references. @param firstReference initial reference to process @return true if cleanup is successful, false otherwise
332 Default constructor for SimpleStatsCounter.
333 Aggregates statistics from another StatsCounter instance. @param other the StatsCounter to aggregate data from
334 Protected constructor for AbstractLoadingCache. Initializes a new instance of the abstract cache class.
335 Creates a map that preserves insertion order. @return a new instance of LinkedHashMap
336 Attempts to add all entries from the specified map. @param m map containing entries to be added
337 Invalidates multiple cache entries by key. @param keys iterable of keys to invalidate
338 Creates a new instance of CacheBuilder. @return A new CacheBuilder object configured with default settings
339 Throws an exception indicating bulk loading is unsupported. @param keys iterable of keys to load @throws UnsupportedLoadingOperationException always
340 Calculates total cache requests. @return Sum of hit and miss counts, saturated at Long.MAX_VALUE if overflow occurs
341 Returns the total number of cache loads. @return sum of successful and failed load counts, saturated if necessary
342 Calculates the rate of load exceptions. @return percentage of load operations that resulted in exceptions
343 Calculates the average penalty time per load operation. @return average load time in milliseconds, or 0 if no loads occurred
344 Protected constructor to prevent instantiation.
345 Protected constructor to prevent instantiation.
346 Protected constructor to prevent instantiation.
347 Protected constructor to prevent instantiation.
348 Protected constructor to prevent instantiation.
349 Protected constructor to prevent instantiation.
350 Protected constructor to prevent instantiation.
351 Protected constructor to prevent instantiation.
352 Protected constructor to prevent instantiation.
353 Drains and processes entries in the recency queue. Ensures entries are moved to the access queue if still present.
354 Copies a cache entry with a new next reference. @param original the original entry to copy @param newNext the new next entry in the chain @return the copied ReferenceEntry or null if key or value is collected
355 Removes entries from the column based on a predicate. @param predicate condition to test each entry @return true if any entries were removed, false otherwise
356 Initializes the AggregateFuture by setting up listeners for each future. Handles cases where all futures must succeed or when any future can complete.
357 Creates an executor that propagates RejectedExecutionException to a given future. @param delegate the underlying executor @param future the future to set exception on rejection @return Executor instance with rejection propagation
358 Retrieves result from Future if already completed. Throws IllegalStateException if Future is not done. @param future task to check and retrieve result from @return result of the Future @throws ExecutionException if computation threw an exception
359 Retrieves result from Future without interruption and wraps exceptions. @param future task to wait for completion @return result of the Future @throws UncheckedExecutionException if computation threw an Exception @throws ExecutionError if computation threw an Error
360 Clears reference queues for keys and values based on their usage.
361 Provides the default equivalence strategy for object comparison. @return An Equivalence instance using Object.equals()
362 Provides a default equivalence strategy for object comparison. @return An Equivalence instance using Object.equals()
363 Provides the default equivalence strategy for object comparison. @return Equivalence instance using reference equality by default
364 Provides the default equivalence strategy for object comparison. @return Equivalence instance using reference equality by default
365 Provides a default equivalence strategy using object identity. @return Equivalence instance that checks equality by reference
366 Determines if a cache entry has expired. @param entry the cache entry to check @param now current time in nanoseconds @return true if the entry is expired, false otherwise
367 Returns the total number of elements in the multiset. @return the size as an int, saturated if necessary
368 Returns the size of an iterator. @param iterator the iterator to measure @return the number of elements in the iterator, clamped to int range
369 Calculates the total number of elements in a multiset. @param multiset the multiset to calculate the size of @return the size as an int, clamped if necessary
370 Safely adds two integers with overflow protection. @param a first integer operand @param b second integer operand @return sum of a and b, clamped to int range if overflow occurs
371 Safely subtracts two integers with overflow protection. @param a minuend @param b subtrahend @return result of subtraction or clamped value if overflow occurs
372 Multiplies two integers safely, preventing overflow. @param a first integer @param b second integer @return product of a and b, clamped to int range if overflow occurs
373 Creates a set that preserves insertion order. @return a new set with insertion order preserved
374 Protected constructor for AbstractIterator. Initializes an iterator instance without specific parameters.
375 Initializes iterator with the first element. @param firstOrNull initial element or null if none
376 Constructs an instance of UnmodifiableListIterator.
377 Creates an unmodifiable empty collection of values. @return Unmodifiable empty collection
378 Retrieves and removes the first entry from the map. @return the first entry or null if the map is empty
379 Polls and removes the first element from the set. @return The first element or null if the set is empty
380 Refreshes the delegate collection if it's empty. Synchronizes with ancestor or updates from the map.
381 Retrieves or creates a wrapped collection of values for the given key. @param key the key to retrieve values for @return a WrappedCollection instance containing the values associated with the key
382 Returns a collection of all values in the multimap. Utilizes the superclass implementation to provide the values. @return Collection of values associated with keys in the multimap
383 Returns a list of all values in the multimap. Utilizes the superclass implementation to gather values. @return List of values associated with keys
384 Returns a collection of all key-value entries. Initializes entries if not already created.
385 Returns a list of all key-value entries. Overrides to cast entries as a List for type safety.
386 Creates a new StringBuilder for collection operations. @param size the initial capacity of the StringBuilder @return a new StringBuilder with optimized capacity
387 Creates a new ArrayList with the specified initial capacity. @param initialArraySize the initial capacity of the list @return an ArrayList instance with the given capacity
388 Calculates the capacity for a map based on expected size. @param expectedSize the expected number of elements in the map @return the calculated capacity, ensuring efficient resizing
389 Creates a builder for a list-based multimap with expected values per key. @param expectedValuesPerKey the expected number of values per key @return ListMultimapBuilder instance configured for array lists
390 Creates a builder for a SetMultimap with hash sets as value collections. @param expectedValuesPerKey expected number of values per key @return SetMultimapBuilder configured with HashSetSupplier
391 Creates a builder for SetMultimap with linked hash set values. @param expectedValuesPerKey expected number of values per key @return SetMultimapBuilder configured with linked hash sets
392 Creates a builder for multimaps with hash-based keys. @param expectedKeys estimated number of unique keys @return MultimapBuilderWithKeys instance configured for hash keys
393 Creates a MultimapBuilder with linked hash keys. @param expectedKeys the expected number of key entries @return a new MultimapBuilderWithKeys instance
394 Sets the count of an element in a multiset. @param self the target multiset @param element the element to set the count for @param count the new count of the element @return the previous count of the element
395 Updates element count in multiset. @param self the target multiset @param element the element to update @param oldCount expected current count of the element @param newCount new count to set for the element @return true if update successful, false otherwise
396 Computes the hash code for this set. @return the computed hash code
397 Checks equality with another set using standard implementation. @param object the object to compare with this set @return true if the sets are equal, false otherwise
398 Generates hash code based on map view. @return hash code of the multimap's map representation
399 Returns a string representation of the multimap. @return a string in the format of the underlying map's string representation
400 Removes all occurrences of elements in the specified collection from this multiset. @param elementsToRemove the collection of elements to remove @return true if any elements were removed, false otherwise
401 Checks equality of this multiset with another object. @param object the object to compare @return true if both multisets have equal elements and counts, false otherwise
402 Checks equality with another multiset. @param object the object to compare @return true if multisets are equal, false otherwise
403 Retrieves the first element from an iterable or returns a default value. @param iterable the source iterable collection @param defaultValue value to return if the iterable is empty @return the first element or the default value if empty
404 Returns an unmodifiable view of this multimap as a map. @return Map view of keys to collections of values
405 Returns a sorted set view of the keys. @return NavigableSet containing all keys in ascending order
406 Returns the provided comparator or natural ordering if none is given. @param comparator the comparator to use, may be null @return the given comparator or a natural ordering comparator
407 Returns string representation of the table's rows. @return String representation of the row map
408 Returns string representation of the table's rows. @return String representation of the row map
409 Serializes the ArrayListMultimap to an ObjectOutputStream. Writes default fields and then delegates to writeMultimap for key-value pairs. @param stream the ObjectOutputStream to write to @throws IOException if I/O error occurs during writing
410 Writes the HashMultimap to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if I/O error occurs during writing
411 Custom serialization logic for ImmutableListMultimap. Writes the object's default fields and its multimap content to a stream. @param stream ObjectOutputStream to write data to @throws IOException if I/O error occurs during writing
412 Populates a Multimap from an ObjectInputStream. @param multimap the Multimap to populate @param stream the ObjectInputStream to read from @throws IOException if an I/O error occurs @throws ClassNotFoundException if a class in the stream cannot be found
413 Returns an immutable set of all column keys. Utilizes keySet() to lazily initialize and retrieve column keys.
414 Returns an immutable set of all row keys. Utilizes the keySet method of the underlying map. @return ImmutableSet containing all row keys
415 Returns an immutable set of keys. Delegates to the underlying map's keySet method. @return ImmutableSet containing all keys in the multimap
416 Checks if a column exists by key. @param columnKey unique column identifier @return true if column exists, false otherwise
417 Checks if the specified row key is present in the ArrayTable. @param rowKey the row key to check for presence @return true if the row key exists, false otherwise
418 Retrieves the immutable list of values associated with a key. @param key the key whose associated values are to be returned @return an ImmutableList containing the values, or an empty list if no mappings exist for this key
419 Returns a view of the values in the specified column. @param columnKey the key identifying the column to retrieve @return an ImmutableMap containing the row keys and corresponding values, or an empty map if the column does not exist
420 Adds a key-value pair to the builder. @param key the key to add @param value the value associated with the key @return this Builder instance for method chaining
421 Computes the offset from a given origin by a specified distance. @param origin starting point in the discrete domain @param distance number of steps to move from the origin @return new position after moving the specified distance @throws IllegalArgumentException if distance is negative or overflow occurs
422 Flattens a spliterator of elements into a spliterator of double values. @param fromSpliterator source spliterator of input elements @param function mapping function to apply to each element @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return Spliterator.OfDouble with mapped and flattened double values
423 Flattens elements of a Spliterator into an OfInt Spliterator. @param fromSpliterator source spliterator of input elements @param function mapping function converting input to integer spliterators @param topCharacteristics spliterator characteristics @param topSize estimated size of the spliterator @return OfInt Spliterator after flattening
424 Creates a long spliterator by mapping elements of another spliterator. @param fromSpliterator source spliterator of input elements @param function mapping function to transform input elements into long spliterators @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return Spliterator.OfLong with mapped elements
425 Applies a flat map transformation to an input spliterator. @param fromSpliterator source spliterator of InElementT @param function mapping function from InElementT to Spliterator<OutElementT> @param topCharacteristics spliterator characteristics @param topSize estimated size of the spliterator @return new Spliterator with transformed elements
426 Checks if this collection contains all elements of another collection. @param collection the collection with elements to verify presence in this collection @return true if all elements of collection are contained in this collection, false otherwise
427 Sets the hash table mask for compact hashing. @param mask new mask value for the hash table
428 Sets the hash table mask for the compact hash set. @param mask new mask value to apply
429 Resizes the internal storage arrays to a new capacity. @param newCapacity the new size for the storage arrays
430 Resizes internal arrays to accommodate new capacity. @param newCapacity the desired new capacity for entries and elements
431 Calculates optimal hash table size for given expected entries. @param expectedSize estimated number of entries @return nearest power of two that accommodates entries within load factor
432 Initiates a chained comparison between two integers. @param left first integer to compare @param right second integer to compare @return ComparisonChain object for further comparisons
433 Initiates comparison chain with two long values. @param left first long value @param right second long value @return ComparisonChain instance for further comparisons
434 Compares two booleans with true values prioritized. @param left first boolean value @param right second boolean value @return ComparisonChain object for further comparisons
435 Compares two booleans with false values prioritized. @param left first boolean value @param right second boolean value @return this ComparisonChain instance for chaining
436 Checks if the range has a defined lower bound. @return true if lower bound is not below all values, false otherwise
437 Checks if the range has an upper bound. @return true if the range is bounded above, false otherwise
438 Default constructor for DiscreteDomain. Initializes with fast offset calculations not supported.
439 Custom serialization method for EnumBiMap. Writes key type, value type, and map to ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if I/O error occurs
440 Writes the object's state to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if I/O error occurs
441 Custom serialization for HashBiMap. Writes the map and its inverse to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if I/O error occurs
442 Verifies that the element is a valid enum constant. @param element the object to check @throws NullPointerException if element is null @throws ClassCastException if element is not an valid enum constant
443 Serializes the HashMultiset to an ObjectOutputStream. Handles default serialization and writes element counts. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs
444 Serializes the LinkedHashMultiset to an ObjectOutputStream. Writes default fields and then delegates to Serialization.writeMultiset. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs
445 Serializes the TreeMultiset to an ObjectOutputStream. Writes default fields, comparator, and elements. @param stream the ObjectOutputStream to write to @throws IOException if serialization fails
446 Constructs a new Builder instance.
447 Converts an array to a FluentIterable. @param elements array of elements to convert @return FluentIterable instance wrapping the array elements
448 Creates an empty FluentIterable. @return a FluentIterable instance wrapping an empty list
449 Checks if the iterable is empty. @return true if no elements are present, false otherwise
450 Appends another iterable to this FluentIterable. @param other iterable to append @return new FluentIterable with elements of both iterables
451 Concatenates two iterables into one. @param a first iterable @param b second iterable @return Combined Iterable containing elements of both
452 Concatenates three iterables into a single iterable. @param a first iterable @param b second iterable @param c third iterable @return Iterable containing elements from all three inputs
453 Concatenates four iterables into a single iterable. @param a first iterable to concatenate @param b second iterable to concatenate @param c third iterable to concatenate @param d fourth iterable to concatenate @return Iterable containing all elements from the input iterables
454 Converts the delegate iterable to a Stream. @return a Stream representation of the delegate iterable
455 Counts occurrences of an element in an iterator. @param iterator the iterator to search within @param element the element to count @return number of times the element appears in the iterator
456 Checks if a map contains a specific key. @param map the map to search within @param key the key to look for @return true if key is found, false otherwise
457 Checks if the map contains a specific value. @param map the map to search within @param value the value to look for @return true if value is found, false otherwise
458 Adds all elements from an iterable to this list at a specified index. @param index the position in the list where elements will be inserted @param elements the iterable containing elements to add @return true if any elements were added, false otherwise
459 Creates a sublist from the specified range. @param fromIndex start index (inclusive) @param toIndex end index (exclusive) @return sublist of the current list
460 Computes hash code using the underlying list's implementation. @return computed hash code
461 Adds all entries from the specified map to this map. @param map source map containing entries to add
462 Checks equality of this map with another object. @param object the object to compare with @return true if maps are equal, false otherwise
463 Creates a new custom table with an empty backing map and a supplier for columns. @param backingMap initial data storage for rows of columns (must be empty) @param factory supplier for creating new column maps when adding rows @return a new StandardTable instance
464 Returns the set of all column keys. Initializes a new ColumnKeySet if it's not already created. @return Set of column keys
465 Retrieves a map representing a column. @param columnKey unique identifier for the column @return Map of row keys to values in the specified column
466 Populates a map from an ObjectInputStream. @param map the target map to populate @param stream the input stream containing serialized key-value pairs @throws IOException if an I/O error occurs @throws ClassNotFoundException if a class in the stream cannot be found
467 Populates a Multiset from an ObjectInputStream. @param multiset the target Multiset to populate @param stream the ObjectInputStream containing serialized data @throws IOException if an I/O error occurs @throws ClassNotFoundException if class of serialized object cannot be found
468 Rebuilds the hash table with a new size. @param newTableSize desired capacity of the new hash table @param elements array containing existing elements @param n number of valid elements in the elements array @return Object[] representing the rebuilt hash table
469 Constructs a Builder with default initial capacity.
470 Creates a new Builder instance with a specified initial capacity. @param size initial capacity for the builder @return Builder object initialized with the given size
471 Creates a Builder with an initial capacity. @param expectedSize the expected number of entries @return a Builder instance
472 Ensures the internal array has sufficient capacity. @param minCapacity minimum required capacity
473 Adds all elements from an iterable to the builder. @param elements collection of elements to add @return current Builder instance for chaining
474 Adds all elements from an iterator to the builder. @param elements iterator providing elements to add @return this Builder instance for method chaining
475 Adds all elements from an iterator to the multiset. @param elements iterator providing elements to add @return this Builder instance for method chaining
476 Adds all elements from an iterable to the builder. @param elements collection of elements to add @return current Builder instance for chaining
477 Returns a collector that accumulates elements into an unmodifiable ImmutableList.
478 Creates an empty immutable multimap. @return An empty ImmutableMultimap instance
479 Returns a collector for creating an ImmutableRangeSet from a stream of Ranges.
480 Creates an immutable set collector. @return Collector that accumulates elements into an unmodifiable ImmutableSet
481 Returns the comparator used to order keys. @return Comparator object or null if natural ordering is used
482 Adds an element to the builder. @param element the element to add @return the Builder instance for method chaining
483 Converts an interner to a function. @param interner the interner to convert @return a Function that interns its input
484 Converts an iterable to its string representation. @param iterable the collection to convert @return a string with elements separated by commas, enclosed in square brackets
485 Retrieves the only element from an iterable. Throws an exception if there are multiple elements. @param iterable source of elements @return the single element or throws if more than one exists
486 Returns the only element from an iterator or a default value if empty. @param iterator source of elements @param defaultValue value to return if iterator is empty @return single element or default value
487 Concatenates two object arrays into a new array. @param first the first array @param second the second array @param type Class object representing the array component type @return new array containing elements of both input arrays
488 Retrieves the last element from an iterable. @param iterable the iterable to process @return the last element or throws NoSuchElementException if empty
489 Retrieves the last element from an iterator or returns a default value if empty. @param iterator the iterator to process @param defaultValue value to return if the iterator is empty @return the last element or the default value
490 Returns an empty unmodifiable iterator. @return An instance of UnmodifiableIterator with no elements
491 Writes the object to an output stream. Serializes keys and key-value pairs while maintaining order.
492 Adds a new node with the specified key and value to the multimap. @param key the key associated with the node @param value the value of the node @param nextSibling the node after which the new node should be inserted, or null if appending to tail @return the newly added node
493 Converts a CharSequence to a list of Characters. @param sequence the character sequence to convert @return a List containing individual characters from the sequence
494 Returns index of element in list. @param list the list to search @param element the element to find @return index of element or -1 if not found
495 Finds the last index of an element in a list. @param list the list to search @param element the element to find, may be null @return the last index of the element or -1 if not found
496 Advances to the next entry in the table. @return true if a valid entry is found, false otherwise
497 Expands the segment's capacity by creating a new array and rehashing entries. Handles power-of-two expansion, ensuring thread safety and efficient memory management.
498 Attempts to drain reference queues for cleanup. Locks the segment before draining and ensures unlocking afterward.
499 Checks if an entry's value is live for testing. @param entry the internal entry to check @return true if the entry has a non-null live value, false otherwise
500 Creates a new IdentityHashSet instance. Uses reference equality for element comparison. @return a new IdentityHashSet with identity-based equality
501 Returns a synchronized view of the specified BiMap. @param bimap the BiMap to be wrapped @return synchronized BiMap or original if already synchronized/immutable
502 Bubbles up an element to maintain heap property. @param index current position of the element @param x element to be inserted @return new position of the element after bubbling
503 Swaps an element with the conceptually last element in the heap. @param actualLastElement the element to be swapped @return index of the swapped element or the original size if no swap occurs
504 Updates the cursor to skip elements in the queue. @param c starting index for checking elements
505 Creates an iterator for a given multiset. @param multiset the Multiset to iterate over @return Iterator for the elements of the multiset
506 Creates a new array of the same type as the reference. @param reference existing array to determine the component type @param length desired length of the new array @return new array instance with specified length
507 Converts a collection to an array. @param c the collection to convert @return an array containing all elements from the collection
508 Finds the minimum element in an iterator. @param iterator Iterator of elements to compare @return Minimum element or throws NoSuchElementException if empty
509 Finds the maximum element in an iterator using natural ordering. @param iterator source of elements to compare @return maximum element found or throws NoSuchElementException if empty
510 Encloses all values in the given iterable within a range. @param values iterable of comparable elements to enclose @return Range object containing all values
511 Creates a new concurrent hash set. @return ConcurrentHashSet with insertion order preserved
512 Converts range bounds to string. @return formatted string representation of the range
513 Returns the lower endpoint of the range. @return the lower endpoint value
514 Returns the upper endpoint value of the range. @return the upper endpoint value
515 Checks for conflicts in the value bucket and throws an exception if overflow occurs. @param value the value to check against existing entries @param entry the current entry being processed @param valueBucketHead the head of the value bucket chain @throws BucketOverflowException if the bucket size exceeds maximum allowed length
516 Removes duplicate entries from an array. @param entries input array of map entries @param n number of valid entries in the input array @param newN expected size after removing duplicates @param duplicates map tracking entry duplication status @return array with duplicate entries removed
517 Checks for conflicts in the key bucket. @param key key to check @param newValue value associated with the key @param keyBucketHead head of the key bucket @param throwIfDuplicateKeys flag to determine if conflict should be thrown @return existing entry if found, otherwise null @throws BucketOverflowException if bucket size exceeds limit
518 Creates a collector that accumulates enum elements into an immutable set. @return Collector for accumulating enums into an ImmutableSet
519 Returns the complement of an enum set. @param collection elements to exclude from the complement @return EnumSet containing all elements not in the collection
520 Computes the complement of an enum set. @param collection elements to exclude from the complement @param type enum class to create the complement for @return EnumSet containing all elements not in the collection
521 Finds the last integer in an IntStream. @param stream input stream of integers @return OptionalInt containing the last element or empty if stream is empty
522 Finds the last element in a LongStream. @param stream input LongStream of elements @return OptionalLong containing the last element or empty if stream is empty
523 Finds the last element in a DoubleStream. @param stream input stream of double elements @return OptionalDouble containing the last element or empty if stream is empty
524 Partitions the buffer around a pivot element. @param left starting index of partition range @param right ending index of partition range @param pivotIndex index of the pivot element @return new index of the pivot element after partitioning
525 Serializes the TreeMultimap to an ObjectOutputStream. Writes default fields, key and value comparators, and the multimap itself. @param stream the ObjectOutputStream to serialize to @throws IOException if I/O error occurs during writing
526 Protected constructor to prevent instantiation of the Escaper class.
527 Protected constructor to prevent instantiation.
528 Escapes characters in a string starting from a given index. @param s input string to be escaped @param index starting index for escaping @return escaped string
529 Computes replacement for a character using an escaper. @param escaper CharEscaper instance to use for escaping @param c character to escape @return escaped character as String or null if input is null
530 Computes the escaped replacement for a Unicode code point. @param escaper the Unicode escaper to use @param cp the Unicode code point to escape @return the escaped String or null if input is null
531 Validates graph endpoints. @param endpoints pair of connected nodes to be validated
532 Advances to the next endpoint pair in the graph. @return true if successful, false if no more pairs exist
533 Creates a directed or undirected EndpointPair based on graph type. @param graph the Graph object determining pair directionality @param nodeU first node in the pair @param nodeV second node in the pair @return an EndpointPair representing the relationship between nodeU and nodeV
534 Creates an EndpointPair from a network and two nodes. @param network the graph or network containing the nodes @param nodeU first node in the pair @param nodeV second node in the pair @return ordered or unordered EndpointPair based on network directionality
535 Returns a set of all edges in the graph. @return Set containing EndpointPair objects representing edges
536 Returns a set of all edges in the graph. @return Set containing EndpointPair objects representing edges
537 Validates network endpoints. @param endpoints pair of nodes to be validated
538 Returns an unmodifiable iterator over the two nodes. @return Iterator containing nodeU and nodeV in order
539 Sets the node order for the graph. @param nodeOrder specifies the order of nodes @return a new GraphBuilder instance with the specified node order
540 Sets the order of incident edges. @param incidentEdgeOrder ordering configuration for incident edges @return GraphBuilder instance with updated edge order
541 Returns the transpose of a directed graph. @param graph the original directed graph @return transposed Graph object or identical if undirected
542 Returns the transpose of a directed network. @param network original directed network to be transposed @return Network object representing the transposed graph
543 Returns the transpose of a directed graph. @param graph original directed ValueGraph @return transposed ValueGraph or identical graph if undirected
544 Sets the order of nodes in the network. @param nodeOrder specifies the order of nodes @return a new NetworkBuilder with the specified node order
545 Sets the edge order for the network. @param edgeOrder the desired edge order @return a new NetworkBuilder with specified edge order
546 Sets the node ordering for the graph. @param nodeOrder the desired order of nodes in the graph @return a new ValueGraphBuilder with the specified node order
547 Sets the ordering of incident edges for nodes. @param incidentEdgeOrder the desired edge order type @return a new builder with the specified incident edge order
548 Updates hash state with a byte array. @param b byte array containing the data to be hashed
549 Updates hash state with ByteBuffer content. @param b ByteBuffer containing data to hash
550 Updates hash state with specified number of bytes from scratch buffer. @param bytes number of bytes to process @return current Hasher instance
551 Processes remaining bytes in the buffer for hashing. @param bb ByteBuffer containing data to be processed
552 Checks if an element might be in the set. @param input the element to check @return true if the element is possibly in the set, false otherwise (with possible false positives)
553 Creates a Bloom filter collector from a stream of elements. @param funnel defines how to extract bytes from objects @param expectedInsertions estimated number of insertions @param fpp false positive probability (0 < fpp < 1) @return Collector for creating BloomFilter instances
554 Returns the total number of bits in the BloomFilter's bit array. @return Total bit count as a long value
555 Casts a long to a byte, saturating at the max/min byte values. @param value long value to cast @return saturated byte equivalent of the input value
556 Compares two bytes as unsigned integers. @param a first byte to compare @param b second byte to compare @return negative if a < b, zero if a == b, positive if a > b
557 Converts a byte to its string representation in the specified radix. @param x the byte value to convert @param radix the base to use for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the unsigned byte in the given radix
558 Copies all bits from another LockFreeBitArray into this instance. @param other the source bit array to copy from @throws IllegalArgumentException if arrays have different lengths
559 Sets a specific bit to 1. @param bitIndex index of the bit to set @return true if the bit was successfully set, false if already set
560 Returns the hash code as an integer. Uses first 4 bytes if available, otherwise combines all bytes. @return int representing the hash code
561 Converts hash code to a hexadecimal string representation. @return Hexadecimal string of the hash code
562 Converts a byte array to a long value. @param bytes input byte array (must be at least 8 bytes) @return long value from the first 8 bytes of the array
563 Computes a weak hash for a 32-byte segment with given seeds. @param bytes input byte array @param offset starting index of the segment @param seedA initial seed value A @param seedB initial seed value B @param output array to store resulting hashes
564 Computes a weak hash for a 32-byte segment with given seeds. @param bytes input byte array @param offset starting index of the 32-byte segment @param seedA first seed value @param seedB second seed value @param output array to store resulting hash values
565 Returns the unsigned integer value as a long. @return long representation of the unsigned int
566 Divides two unsigned integers. @param dividend the number to be divided @param divisor the number by which to divide @return the result of unsigned division
567 Computes the unsigned remainder of division. @param dividend the number to be divided @param divisor the number by which to divide @return the unsigned remainder
568 Creates a Murmur3-32 hash function. @param seed initial seed value for the hash function @return HashFunction instance configured with Murmur3-32 algorithm
569 Creates a fixed-length Murmur3-32 hash function. @param seed initial seed value for hashing @return HashFunction instance with supplementary plane fix enabled
570 Creates a Murmur3 128-bit hash function with the specified seed. @param seed initial seed value influencing hash output @return HashFunction instance for generating 128-bit hashes
571 Generates a consistent hash for an input within a specified number of buckets. @param input the key to hash @param buckets the number of buckets to distribute the input into @return the bucket index for the input
572 Converts a byte array to an integer. @param bytes input byte array (must be at least 4 bytes long) @return integer value constructed from the first four bytes of the array
573 Copies data from an InputStream to an OutputStream. @param from source InputStream @param to destination OutputStream @return number of bytes copied @throws IOException if an I/O error occurs
574 Reads and discards all bytes from the input stream. @param in InputStream to be exhausted @return Total number of bytes read and discarded
575 Reads bytes from an InputStream and processes them using a ByteProcessor. @param input the InputStream to read from @param processor the ByteProcessor to process the bytes @return the result from the ByteProcessor @throws IOException if an I/O error occurs
576 Creates a ByteArrayDataInput from ByteArrayInputStream. @param byteArrayInputStream input stream containing byte data @return ByteArrayDataInput object
577 Creates a new ByteArrayDataOutput instance. @param byteArrayOutputStream underlying ByteArrayOutputStream to write data to @return ByteArrayDataOutput object
578 Constructs a ReaderInputStream with specified reader, encoder, and buffer size. @param reader character reader to read from @param encoder charset encoder for converting characters to bytes @param bufferSize size of the internal buffers
579 Starts draining the buffer. Doubles capacity if overflow and buffer is empty. @param overflow indicates if a buffer overflow has occurred
580 Copies data from a ReadableByteChannel to a WritableByteChannel. Handles FileChannels efficiently using transferTo, otherwise uses ByteBuffer. @param from source channel @param to destination channel @return number of bytes copied
581 Reads the next line from the input source. @return The next line as a String or null if end of stream is reached @throws IOException if an I/O error occurs
582 Skips up to 'n' bytes from the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @return actual number of bytes skipped
583 Returns a stream of lines from the character source. @return Stream of strings representing lines of text @throws IOException if an I/O error occurs while reading
584 Reads all characters from a Readable source. @param readable the source to read from @return total number of characters read @throws IOException if an I/O error occurs
585 Initializes a new LineReader with a specified readable source. @param readable the source to read from, must not be null
586 Closes an InputStream quietly. @param inputStream the stream to close, may be null
587 Closes a Reader quietly without throwing exceptions. @param reader the Reader to close, may be null
588 Updates the output stream based on data length. Transfers data to a temporary file if in-memory limit is exceeded.
589 Resets the stream, clearing memory and deleting files. Closes the current output stream and prepares for new data writes.
590 Converts a File to a CharSource using specified charset. @param file the source file to be converted @param charset character encoding to use @return CharSource representation of file content
591 Flushes a Flushable object quietly. @param flushable the object to be flushed
592 Checks if insecure recursive delete is allowed. @param path the file or directory to be deleted @param options array of RecursiveDeleteOption @throws InsecureRecursiveDeleteException if insecure option not specified
593 Doubles the capacity of a CharBuffer. @param buf original character buffer @return new CharBuffer with doubled capacity and same position/limit
594 Adds characters to the buffer and processes lines. Handles newline detection and finalization. @param cbuf character array containing input data @param off starting offset in the character array @param len number of characters to read from the array @throws IOException if an I/O error occurs during processing
595 Finalizes any remaining text in the buffer. @throws IOException if an I/O error occurs during finalization
596 Reads an unsigned short from the input stream. @return the unsigned short value as an int @throws IOException if an I/O error occurs
597 Reads an integer from the input stream in little-endian format. @return the read integer value @throws IOException if an I/O error occurs
598 Reads a long value from the input stream in little-endian byte order. @return the read long value @throws IOException if an I/O error occurs
599 Writes a char value in little-endian format. @param v the char value to be written
600 Writes a float in little-endian format to the output stream. @param v float value to write
601 Writes a long value to the output stream in little-endian byte order. Converts the long value to big-endian and delegates writing to the underlying DataOutputStream. @param v the long value to write @throws IOException if an I/O error occurs
602 Recursively deletes a directory and its contents without secure deletion. @param path the directory or file to delete @return collection of IOExceptions if any occurred during deletion or null if successful
603 Securely deletes contents of a directory. @param dir secure directory stream to operate on @return collection of IOExceptions or null if none occurred
604 Advances to the next input stream. Closes current stream and opens the next one from iterator.
605 Advances to the next CharSource. Closes the current source and opens the next one if available.
606 Converts a URL to a CharSource using specified charset. @param url the URL to convert @param charset character encoding to use @return CharSource representation of URL content
607 Divides two long numbers with specified rounding mode. @param p dividend @param q divisor @param mode rounding mode to apply @return result of division according to the rounding mode @throws ArithmeticException if division by zero or invalid rounding mode
608 Computes the factorial of a non-negative integer. @param n the integer value to compute the factorial for @return factorial of n or Double.POSITIVE_INFINITY if n exceeds MAX_FACTORIAL
609 Computes the power of an integer base raised to a non-negative exponent. @param b the base integer @param k the non-negative exponent @return the result of b^k
610 Computes the greatest common divisor of two non-negative integers. @param a first non-negative integer @param b second non-negative integer @return greatest common divisor of a and b
611 Computes factorial of a non-negative integer. @param n the integer to compute the factorial for @return factorial value or Integer.MAX_VALUE if overflow occurs
612 Computes binomial coefficient C(n, k). @param n total items @param k items to choose @return binomial coefficient or Integer.MAX_VALUE if overflow
613 Computes the power of a long integer with overflow checks. @param b base number @param k exponent, must be non-negative @return b raised to the power of k
614 Computes the factorial of a non-negative integer. @param n the non-negative integer to compute the factorial for @return the factorial of n, or Long.MAX_VALUE if overflow occurs
615 Creates a builder for a linear transformation from the origin to (x1, y1). Validates that x1 and y1 are finite numbers. @param x1 x-coordinate of the target point @param y1 y-coordinate of the target point @return LinearTransformationBuilder instance
616 Checks if two doubles are approximately equal within a tolerance. @param a first double value @param b second double value @param tolerance maximum allowed difference @return true if values are approximately equal, false otherwise
617 Rounds a value to double using specified rounding mode. @param x value to round @param mode rounding strategy to apply @return rounded double value
618 Computes the smallest power of two greater than or equal to a given positive integer. @param x the integer to find the ceiling power of two for @return the smallest power of two >= x @throws IllegalArgumentException if x is not positive @throws ArithmeticException if result exceeds int capacity
619 Finds the largest power of two less than or equal to x. @param x positive integer to evaluate @return highest power of two <= x
620 Computes the base-2 logarithm of a positive integer with specified rounding. @param x the positive integer to compute the logarithm for @param mode the rounding mode to apply @return the computed logarithm value @throws IllegalArgumentException if x is not positive @throws ArithmeticException if rounding is necessary but should be unnecessary
621 Computes the integer square root of x rounded according to specified mode. @param x non-negative integer to compute the square root for @param mode rounding mode to apply @return integer square root of x, rounded as per mode @throws IllegalArgumentException if x is negative @throws ArithmeticException if rounding is required but unnecessary
622 Adds two integers with overflow checking. @param a first integer @param b second integer @return sum of a and b @throws ArithmeticException if overflow occurs
623 Performs checked subtraction of two integers. @param a first operand @param b second operand @return result of subtracting b from a @throws ArithmeticException if overflow occurs
624 Multiplies two integers safely. @param a first operand @param b second operand @return product of a and b @throws ArithmeticException if overflow occurs
625 Tests if a base is a witness to the primality of n using Miller-Rabin algorithm. @param base potential witness number @param n number being tested for primality @return true if base is not a witness (n is likely prime), false otherwise
626 Calculates the smallest power of two greater than or equal to a given positive number. @param x the number for which to find the ceiling power of two @return the smallest power of two greater than or equal to x @throws IllegalArgumentException if x is not positive @throws ArithmeticException if the result exceeds the range of long
627 Calculates the largest power of two less than or equal to a given positive long. @param x the number to evaluate @return the largest power of two <= x
628 Computes the base-2 logarithm of a long integer with specified rounding mode. @param x the number to compute the logarithm for (must be positive) @param mode the rounding mode to apply @return the computed logarithm value @throws IllegalArgumentException if x is not positive @throws ArithmeticException if rounding is required but should be unnecessary
629 Computes the greatest common divisor of two non-negative long integers. @param a first non-negative integer @param b second non-negative integer @return the greatest common divisor of a and b
630 Computes the modulus of a long integer with an integer divisor. @param x dividend @param m divisor, must be positive @return remainder of x divided by m @throws ArithmeticException if m is non-positive
631 Adds two long integers with overflow check. @param a first operand @param b second operand @return sum of a and b if no overflow occurs Throws ArithmeticException if overflow is detected
632 Subtracts two long integers with overflow check. @param a first operand @param b second operand @return result of subtraction @throws ArithmeticException if overflow occurs
633 Multiplies two long integers with overflow check. @param a first operand @param b second operand @return product of a and b Throws ArithmeticException if multiplication overflows
634 Returns the total count of data points in the paired dataset. @return The number of data points processed
635 Compares this PairedStats object with another for equality. @param obj the object to compare with @return true if both objects have equal statistical properties, false otherwise
636 Constructs a new instance of PairedStatsAccumulator.
637 Calculates new mean considering non-finite values. @param previousMean the current mean before adding a new value @param value the new data point to be added @return updated mean, handling non-finite cases as specified
638 Returns the total number of data points accumulated. @return Count of data points added to the accumulator
639 Calculates the median scale and index. @return ScaleAndIndex object representing median position
640 Returns a Scale object configured for quartile calculations. @return a Scale object with a scale value of 4
641 Creates a Scale object for calculating percentiles. @return a Scale object configured for percentile calculations
642 Moves pivot element to start of slice for partitioning. @param array the array to manipulate @param from starting index of the slice @param to ending index of the slice
643 Reads statistical data from a ByteBuffer. @param buffer source of the data @return Stats object with deserialized values
644 Creates a snapshot of current statistics. @return Stats object representing the current state
645 Returns the port number if available. Throws an IllegalStateException if no port is set. @return the port number
646 Returns the port number if valid; otherwise, returns a default value. @param defaultPort value to return if no valid port is set @return the port number or the default value
647 Generates a string representation of the host and port. @return formatted string with host and optional port
648 Returns a new HostAndPort with the specified default port if no port is set. @param defaultPort the default port to use if none is currently set @return a HostAndPort instance with the default port applied if necessary
649 Converts an InetAddress to its string representation. @param ip the IP address to convert @return formatted IP address string
650 Determines if the given IPv6 address is an ISATAP address. @param ip the Inet6Address to check @return true if the IP is an ISATAP address, false otherwise
651 Checks if an IPv6 address contains an embedded IPv4 client address. @param ip the Inet6Address to check @return true if the address embeds an IPv4 client address, false otherwise
652 Converts a collection of Boolean objects to a primitive boolean array. @param collection the collection to convert @return a boolean array containing the values from the collection
653 Searches for the index of a target boolean value within an entire array. @param array the boolean array to search @param target the boolean value to find @return the index of the target if found, otherwise -1
654 Finds the last index of a target boolean value in an array. @param array the boolean array to search @param target the boolean value to find @return the last index of the target or -1 if not found
655 Converts a collection of numbers to a byte array. @param collection the input collection of numbers @return byte array representation of the collection
656 Searches for the index of a target byte in a byte array. @param array the byte array to search within @param target the byte value to find @return the index of the first occurrence or -1 if not found
657 Finds the last occurrence of a byte in the entire array. @param array the byte array to search @param target the byte value to find @return the index of the last occurrence or -1 if not found
658 Converts a collection of characters to a character array. Handles CharArrayAsList directly; otherwise, converts via Object array. @param collection the collection of Character objects @return char array representation of the collection
659 Finds the index of a target character in a character array. @param array the character array to search @param target the character to find @return the index of the target character or -1 if not found
660 Finds the last index of a character in an array. @param array character array to search @param target character to find @return last index of target or -1 if not found
661 Converts a byte array to a character. @param bytes input byte array @return character derived from the first two bytes
662 Generates a hash code for the immutable double array. Uses a combination of prime multiplication and double-specific hashing. @return computed hash code
663 Converts a collection of numbers to a double array. @param collection the source collection of numbers @return an array containing the double values from the collection
664 Searches for the index of a target value within an entire array. @param array the array to search through @param target the double value to find @return the index of the target if found, otherwise -1
665 Finds the last index of a target double in the entire array. @param array the array to search within @param target the double value to find @return the last index of the target or -1 if not found
666 Converts a collection of numbers to a float array. @param collection the input collection of Number objects @return a float array containing the values from the collection
667 Searches for the index of a target value in a float array. @param array the float array to search through @param target the value to find @return the index of the target if found, otherwise -1
668 Finds the last index of a target float in the entire array. @param array the array to search within @param target the float value to find @return the last index of the target or -1 if not found
669 Creates a Builder with specified initial capacity. @param initialCapacity the starting size of the internal array @return Builder instance for constructing an ImmutableDoubleArray
670 Creates a new Builder with an initial capacity of 10. @return Builder instance initialized to hold up to 10 elements
671 Finds the index of a target double value in the immutable array. @param target the double value to search for @return zero-based index of the target if found, otherwise -1
672 Finds the last occurrence of a target double value. @param target the double value to search for @return index of the last occurrence or -1 if not found
673 Returns a string representation of the array. @return A string in the format "[element1, element2, ...]" or "[]" if empty
674 Checks if the array contains a specific integer. @param target the integer to search for @return true if the target is found, false otherwise
675 Creates a new ImmutableIntArray.Builder with the specified initial capacity. @param initialCapacity starting size of the internal integer array @return Builder instance initialized with the given capacity
676 Creates a new Builder instance with an initial capacity of 10. @return Builder object ready to construct ImmutableIntArray
677 Generates a hash code for the immutable integer array. @return computed hash code value
678 Converts the immutable array to a string representation. @return A string in the format "[element1, element2, ...]" or "[]" if empty
679 Checks if the array contains the specified long value. @param target the long value to search for @return true if the target is found, false otherwise
680 Creates a Builder with specified initial capacity. @param initialCapacity the starting size of the internal array @return a Builder instance for constructing ImmutableLongArray
681 Creates a new Builder instance with an initial capacity of 10. @return Builder object ready to build ImmutableLongArray
682 Generates hash code based on array elements. Uses a combination of prime multiplication and element hashes. @return computed hash code
683 Converts the array to a string representation. @return String in the format "[element1, element2, ...]" or "[]" if empty
684 Converts a collection of numbers to an integer array. @param collection the collection of Number objects @return int[] containing converted integers
685 Finds the index of a target value in an integer array. @param array the array to search through @param target the value to find @return the index of the target if found, otherwise -1
686 Finds the last index of a target value in an integer array. @param array the integer array to search @param target the value to find @return the last index of the target or -1 if not found
687 Converts a collection of numbers to a long array. @param collection the input collection of numbers @return a new long array containing the values from the collection
688 Searches for the index of a target value within an entire long array. @param array the long array to search @param target the value to find @return the index of the target if found, otherwise -1
689 Finds the last index of a target value in an array. @param array the long array to search @param target the value to find @return the last index of the target or -1 if not found
690 Parses a string to a long value with specified radix. @param string the string to parse @param radix the base of the number @return parsed Long or null if parsing fails
691 Converts a collection of numbers to a short array. @param collection the collection of numbers to convert @return a short array containing the values from the collection
692 Searches for the index of a target value in a short array. @param array the short array to search @param target the short value to find @return the index of the target if found, otherwise -1
693 Finds the last index of a target value in a short array. @param array the short array to search through @param target the short value to find @return the last index of the target if found, otherwise -1
694 Converts a byte array to a short value. @param bytes input byte array (must be at least 2 bytes long) @return short value derived from the first two bytes of the array
695 Retrieves the best byte array comparator. Prioritizes performance with fallbacks for safety. @return Comparator<byte[]> for optimized comparisons
696 Creates an UnsignedInteger from raw int bits. @param bits raw integer bits to be interpreted as unsigned @return UnsignedInteger object representing the unsigned value
697 Converts the unsigned integer to a string representation in a specified radix. @param radix the base for conversion (e.g., 2 for binary) @return string representation of the unsigned integer in the given radix
698 Converts an integer to its decimal string representation. @param x the integer to convert @return string representation of the integer in base 10
699 Compares two unsigned integers. @param a first unsigned integer @param b second unsigned integer @return negative if a < b, zero if a == b, positive if a > b
700 Creates an UnsignedLong instance from long bits. @param bits the long bits to initialize the UnsignedLong @return UnsignedLong object representing the unsigned value
701 Compares two unsigned long values. @param a first unsigned long value @param b second unsigned long value @return negative if a < b, zero if a == b, positive if a > b
702 Parses a string to an unsigned long. @param string the string to parse @param radix the base of the number system @return parsed unsigned long value @throws NumberFormatException if parsing fails
703 Handles method invocation on proxy instances. @param proxy the proxy instance @param method the method to invoke @param args arguments for the method call @return result of the method invocation or null if not handled @throws Throwable if an error occurs during invocation
704 Retrieves the package name of the class. @return package name or empty string if no package
705 Retrieves package name from class. @param clazz Class object @return Package name or empty string if no package
706 Converts the resource to a ByteSource. @return ByteSource representation of the resource
707 Checks if the member is public. @return true if the member is public, false otherwise
708 Checks if the member is protected. @return true if the member has protected access, false otherwise
709 Checks if the member is private. @return true if the member is private, false otherwise
710 Checks if the member is static. @return true if the member is static, false otherwise
711 Checks if the member is marked as final. @return true if the member is final, false otherwise
712 Checks if the member is abstract. @return true if the member is abstract, false otherwise
713 Checks if the method is native. @return true if the method is native, false otherwise
714 Checks if the method is synchronized. @return true if the method is synchronized, false otherwise
715 Checks if the member is volatile. @return true if the member is volatile, false otherwise
716 Checks if the member is transient. @return true if the member is marked as transient, false otherwise
717 Checks equality of this type variable with another type. @param type the other type to compare @return true if type is a TypeVariable and equals, false otherwise
718 Creates a TypeToken from a Class. @param type the Class to encapsulate @return TypeToken representing the specified class
719 Creates a TypeToken for the specified type. @param type the Java type to encapsulate @return a new TypeToken instance representing the given type
720 Retrieves the result of a completed task or throws an exception. @param obj object representing the task's outcome @return result of the task if successful, null if explicitly set to null @throws ExecutionException if the task failed with an exception
721 Adds a listener to be executed upon completion. @param listener task to be executed when future completes @param executor where the task is executed
722 Propagates cancellation to a related future. @param related the future to potentially cancel
723 Submits a callable task for asynchronous execution. @param task the callable to execute @return ListenableFuture representing the pending result of the task
724 Schedules a task for execution within a specified service. @param service the service in which the task will run @param executor the executor used to schedule the task @param runnable the task to be executed @return Cancellable object to manage task cancellation
725 Schedules a task for execution. @param service the service managing the task @param executor the executor to run the task @param runnable the task to be executed @return Cancellable object allowing task cancellation
726 Submits a collection of callable tasks with a specified timeout. @param tasks the collection of callable tasks to execute @param timeout maximum time to wait for task completion @return list of Future objects representing pending results @throws InterruptedException if interrupted while waiting
727 Invokes any of the given tasks with a specified timeout. @param tasks collection of Callable tasks to execute @param timeout maximum time to wait for task completion @return result of one of the completed tasks @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within timeout
728 Waits for all tasks to complete execution within the specified timeout. @param timeout maximum time to wait @return true if all tasks completed, false if timeout occurred @throws InterruptedException if interrupted while waiting
729 Schedules a task for execution after a specified delay. @param callable the task to execute @param delay duration until task execution @return ListenableScheduledFuture representing scheduled task
730 Schedules a task to run at fixed intervals. @param command the task to execute @param initialDelay time before first execution @param period interval between successive executions @return ListenableScheduledFuture representing scheduled task
731 Schedules a task with fixed delay. @param command the task to execute @param initialDelay time before first execution @param delay time between subsequent executions @return ListenableScheduledFuture representing scheduled task
732 Waits for the service to reach a running state within a specified timeout. @param timeout maximum time to wait before throwing a TimeoutException @throws TimeoutException if the service does not start within the timeout period
733 Awaits service termination with a specified timeout. @param timeout maximum time to wait for termination @throws TimeoutException if the service does not terminate within the timeout
734 Creates a proxy for the given target with a specified timeout. @param target the object to be proxied @param interfaceType the interface type of the proxy @param timeout maximum execution time allowed @return proxy instance with enforced timeout
735 Executes a Callable task with a specified timeout. Converts the timeout duration to nanoseconds and delegates execution. @param callable the task to execute @param timeout the maximum time to wait for the task completion @return result of the callable if completed within the timeout @throws TimeoutException if the task times out @throws InterruptedException if the thread is interrupted during execution @throws ExecutionException if an exception occurs while executing the task
736 Executes a Callable task with a specified timeout. @param callable the task to execute @param timeout maximum time allowed for execution @return result of the callable or null if timed out @throws TimeoutException if task exceeds timeout @throws ExecutionException if task fails during execution
737 Executes a Runnable task with a specified timeout. @param runnable the task to execute @param timeout maximum time allowed for execution @throws TimeoutException if the task exceeds the timeout @throws InterruptedException if interrupted while waiting
738 Executes a Runnable task with a specified timeout without interruption. @param runnable the task to execute @param timeout maximum time allowed for execution @throws TimeoutException if the task exceeds the timeout
739 Creates and configures a ScheduledExecutorService for the service. Adds a listener to shut down the executor when the service terminates or fails. @return ScheduledExecutorService instance configured with a custom thread factory
740 Handles exceptions from futures, logging and managing causal chains. @param throwable the exception to handle
741 Returns string representation of the atomic double value. @return string form of the current double value
742 Returns the current value as an integer. @return the integer representation of the atomic double's value
743 Converts the atomic double to its long value. @return the long representation of the current double value
744 Returns the current value of the atomic double as a float. @return the float representation of the stored double value
745 Returns the current value of the atomic double. @return the double value stored in the atomic variable
746 Serializes the atomic double value. @param s ObjectOutputStream to serialize data
747 Reads object state from an input stream. @param s the input stream to read from
748 Atomically accumulates the given value using a specified function. @param x the value to accumulate @param accumulatorFunction a binary operator that defines how to accumulate values @return the old value before accumulation
749 Atomically accumulates the given value using a specified function. @param x the value to accumulate with the current value @param accumulatorFunction the function to apply for accumulation @return the updated double value after accumulation
750 Returns a string representation of the double array. @return String in the format "[d1, d2, ..., dn]" where di are the array elements
751 Writes the state of this AtomicDoubleArray to a stream. @param s the stream to write to @throws IOException if an I/O error occurs
752 Atomically accumulates the value at index `i` using a specified function. @param i index of the element to update @param x value to accumulate with @param accumulatorFunction function to compute the new value @return original value before accumulation
753 Accumulates the given value into element at index i atomically. @param i index of the element to accumulate @param x value to accumulate @param accumulatorFunction function that accumulates the old and new values @return updated double value after accumulation
754 Removes the mapping for a key if its value is zero. @param key the key whose mapping is to be removed @return true if the mapping was removed, false otherwise
755 Returns an unmodifiable view of the map. Uses cached view if available; otherwise, creates a new one. @return Unmodifiable Map with keys and their associated long values
756 Atomically replaces the value for a key if it matches the expected old value. @param key the key to update @param expectedOldValue the value expected to be associated with the key @param newValue the new value to associate with the key @return true if successful, false otherwise
757 Transitions the closing process and returns the associated future. Updates state to WILL_CLOSE, adds a listener to handle closure, and throws exceptions for invalid states. @return FluentFuture instance associated with the task
758 Finishes the asynchronous task and provides value and closer. @param consumer handles the value and closer @param executor runs the completion listener
759 Adds a runnable task to the execution list. @param runnable task to be executed @param executor to run the task
760 Executes all tasks in the list using their respective executors. Ensures tasks are executed in reverse order of addition.
761 Handles exceptions asynchronously for the future. @param exceptionType type of exceptions to catch @param fallback function to compute recovery value @param executor for executing fallback @return new FluentFuture with error handling
762 Transforms the result of this future asynchronously. @param function transformation function to apply @param executor executor for asynchronous processing @return a new FluentFuture with transformed result
763 Creates an immediate future with a given value. @param value the result to be returned immediately @return ListenableFuture containing the provided value or NULL if value is null
764 Creates a failed future with the specified exception. @param throwable the exception indicating the failure reason @return ListenableFuture that is immediately failed
765 Returns an immediately cancelled ListenableFuture. @return ListenableFuture that is already cancelled
766 Retrieves the best available type validator. Tries to load a specific class; falls back to weak set validator on failure. @return GetCheckedTypeValidator instance or null if not found
767 Calls dispatch on each listener in the list.
768 Constructs a non-fair Monitor instance.
769 Attempts to acquire lock interruptibly within specified duration. @param time duration to wait for the lock @return true if lock acquired, false otherwise @throws InterruptedException if interrupted while waiting
770 Attempts to enter the monitor interruptibly within a specified duration. @param guard condition to check before entering @param time maximum wait time as Duration @return true if entered and condition is satisfied, false otherwise @throws InterruptedException if interrupted while waiting
771 Checks if any threads are waiting on the specified condition. @param guard Guard object associated with the condition @return true if there are waiting threads, false otherwise
772 Checks if the given guard condition is satisfied. Handles exceptions by signaling all waiters and rethrowing the exception. @param guard the condition to check @return true if the condition is met, false otherwise
773 Shuts down an executor service and waits for termination with a specified duration. @param service the ExecutorService to shut down @param timeout maximum time to wait for termination as Duration @return true if all tasks terminated, false otherwise
774 Sleeps for a specified duration without being interrupted. @param sleepFor the time duration to sleep
775 Sets the rate of permits per second. @param permitsPerSecond new rate, must be positive
776 Returns the current rate of permit issuance. @return the rate as a double value
777 Creates a new instance of SettableFuture. @return SettableFuture object ready to set values or exceptions
778 Retrieves the result of a Future without interruption using a specified timeout. @param future the Future to get the result from @param timeout maximum time to wait for the result as a Duration @return the result of the Future @throws ExecutionException if computation threw an exception @throws TimeoutException if waiting timed out
779 Creates a striped read-write lock using weak references. @param stripes number of stripes for distribution @return Striped<ReadWriteLock> instance
780 Creates a striped lock with specified number of stripes. @param stripes number of stripes to create @return Striped instance using PaddedLock supplier
781 Creates a striped semaphore with specified number of stripes and permits. @param stripes number of stripes to create @param permits number of permits for each semaphore @return Striped instance using padded semaphores
782 Creates a striped read-write lock. @param stripes number of stripes to create @return Striped instance using ReentrantReadWriteLock supplier
783 Constructs and returns a configured ThreadFactory. @return ThreadFactory instance with specified settings
784 Creates a TrustedListenableFutureTask from a Runnable and result. @param runnable the task to be executed asynchronously @param result the result of the task @return a new TrustedListenableFutureTask instance
785 Awaits countdown latch uninterruptibly with a specified timeout. @param latch the CountDownLatch to wait on @param timeout time to wait before giving up as a Duration @return true if count reaches zero, false if timed out
786 Awaits a condition without being interrupted for a specified duration. @param condition the condition to await @param timeout the maximum time to wait as a Duration @return true if the condition was met, false if the timeout expired
787 Attempts to acquire one semaphore permit uninterruptibly. @param semaphore the semaphore to acquire from @param timeout maximum time to wait for acquisition @param unit time unit for the timeout @return true if acquired, false if timed out
788 Attempts to acquire semaphore permits uninterruptibly with a specified duration. @param semaphore the semaphore to acquire from @param permits number of permits to acquire @param timeout maximum time to wait for acquisition as Duration @return true if acquired, false if timed out
789 Attempts to acquire a lock uninterruptibly within a specified timeout. @param lock the Lock object to acquire @param timeout time duration to wait for the lock @return true if the lock was acquired, false otherwise
790 Awaits executor termination without interruption. @param executor the ExecutorService to await @param timeout maximum time to wait as Duration @return true if executor terminated, false if timeout occurred
791 Retrieves PublicSuffixType by its code. @param code character representing the public suffix type @return PublicSuffixType object or throws IllegalArgumentException if not found
792 Creates an Optional containing a non-null value. @param reference value to be wrapped, must not be null @return Optional with the provided value
793 Creates an unstarted Stopwatch with a specified Ticker. @param ticker the Ticker to use for time measurement @return a new, unstarted Stopwatch instance
794 Finds the index of the first element in an iterable matching a predicate. @param iterable source iterable to search through @param predicate condition to apply to each element @return index of the first matching element or -1 if none found
795 Checks if any element in the iterator matches the given predicate. @param iterator source iterator to check @param predicate condition to evaluate each element against @return true if at least one element matches the predicate, false otherwise
796 Configures builder to create SortedSetMultimap with natural ordering. @return SortedSetMultimapBuilder configured with natural element comparison
797 Collects elements into an ImmutableTable. @param rowFunction extracts the row key from each element @param columnFunction extracts the column key from each element @param valueFunction extracts the value from each element @param mergeFunction merges values for duplicate keys @return Collector that builds an ImmutableTable
798 Creates a predicate to check equivalence to a given target. @param target the object to compare against @return a Predicate that checks if an object is equivalent to the target
799 Creates a function that retrieves values from a map with a default. @param map the underlying map to query @param defaultValue value returned for missing keys @return Function that maps keys to values or default if key is not present
800 Composes two functions into a single function. @param g second function to apply @param f first function to apply @return composed Function from A to C
801 Creates a function that retrieves values from the given map. @param map the source map, must not be null @return a function that maps keys to values in the map
802 Creates a Splitter using a regex pattern. @param separatorPattern the regex pattern to split by @return a new Splitter instance configured with the given pattern
803 Creates a new Joiner instance with the specified separator. @param separator the delimiter to use between elements @return a new Joiner object configured with the given separator
804 Creates a new Joiner with the specified character separator. @param separator the delimiter to use between elements @return a new Joiner instance configured with the given separator
805 Sets replacement text for null values in map entries. @param nullText replacement string for null values @return new MapJoiner instance with updated behavior
806 Creates a splitter using a regex pattern. @param separatorPattern the regex pattern for splitting @return Splitter instance configured with the pattern
807 Creates a predicate to check if a CharSequence contains the specified regex pattern. @param pattern the regex pattern to search for @return Predicate that evaluates to true if the input contains the pattern
808 Returns a predicate that negates the given predicate. @param predicate original predicate to negate @return Predicate that evaluates to true if the original predicate is false
809 Combines multiple predicates with a logical AND operation. @param components iterable of predicates to combine @return a predicate that evaluates to true if all components are true
810 Combines multiple predicates with logical OR. @param components iterable of predicates to combine @return a Predicate that evaluates true if any component predicate is true
811 Splits a character sequence into a map of key-value pairs. @param sequence the input character sequence to split @return an unmodifiable Map of parsed key-value pairs
812 Converts a character sequence into a stream of strings. @param sequence the input character sequence to split @return a Stream of split strings
813 Memoizes a Supplier to cache its output. @param delegate the original supplier whose output will be cached @return memoized Supplier instance
814 Composes a Supplier by applying a transformation function to another Supplier's output. @param function the transformation function to apply @param supplier the supplier providing the input value @return a Supplier that applies the function to the supplier's output
815 Returns a thread-safe Supplier by wrapping the given delegate. @param delegate the original Supplier to be wrapped @return a ThreadSafeSupplier that ensures thread-safe access
816 Propagates the given throwable if it is an instance of the specified type. @param throwable the throwable to check and possibly rethrow @param declaredType the type to check against @throws X if throwable is an instance of declaredType
817 Propagates the given throwable if it is an unchecked exception or error. @param throwable the throwable to check and possibly rethrow
818 Propagates a throwable as a RuntimeException. @param throwable the throwable to propagate
819 Retrieves stack trace elements lazily if possible. @param throwable the throwable to inspect @return a list of StackTraceElement objects
820 Creates a new cache entry for the specified key and hash. @param key the entry's key @param hash the entry's hash code @param next reference to the next entry in the chain @return newly created ReferenceEntry object
821 Creates a RemovalNotification instance. @param key the cache entry key (can be null) @param value the cache entry value (can be null) @param cause the reason for removal, must not be null @return new RemovalNotification object
822 Collects elements into a multiset using specified functions. @param elementFunction extracts the element from each input object @param countFunction determines the count for each element @param multisetSupplier supplies the mutable multiset to accumulate elements @return Collector that accumulates elements into a multiset
823 Converts elements into a Multimap using key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @param multimapSupplier provides the Multimap instance @return Collector that accumulates elements into a Multimap
824 Creates a collector to flatten elements into a Multimap. @param keyFunction extracts the key from each element @param valueFunction generates values for each key as a stream @param multimapSupplier provides the Multimap instance @return Collector that accumulates elements into a Multimap
825 Transforms elements of a collection using a specified function. @param fromCollection the original collection to transform @param function the transformation function to apply to each element @return a new Collection with transformed elements
826 Checks if an iterable contains a specific element. @param iterable the iterable to search within @param element the element to look for, can be null @return true if element is found, false otherwise
827 Returns a view of the elements less than (or equal to, if inclusive) `toElement`. @param toElement upper bound element for the returned set @param inclusive true if the `toElement` is included in the returned set @return ContiguousSet containing elements up to `toElement`
828 Returns a view of the portion of this set with elements greater than or equal to `fromElement`. @param fromElement lower bound element @param inclusive true if the lower bound is inclusive @return ContiguousSet containing elements greater than or equal to `fromElement`
829 Adds an element to the queue, evicting the oldest one if necessary. @param e the element to add @return always true
830 Sets a comparator to order keys in the multimap. @param keyComparator comparator for ordering keys @return Builder instance with specified key comparator
831 Sets a comparator to order keys in the multimap. @param keyComparator comparator for ordering keys @return Builder instance with specified key comparator
832 Sets the comparator for ordering values. @param valueComparator comparator to define value order @return this Builder instance for method chaining
833 Adds an element to the multiset. @param element the element to add, cannot be null @return this builder instance for chaining
834 Adds multiple copies of an element to the multiset. @param element the element to add @param occurrences number of times to add the element @return this Builder instance for method chaining
835 Sets the count of a specific element in the multiset. @param element the element to set the count for @param count the new count of the element @return this Builder instance
836 Creates a collector for an immutable sorted multiset with custom ordering. @param comparator defines the order of elements @return Collector that gathers elements into ImmutableSortedMultiset
837 Returns a view of the set with elements strictly less than toElement. @param toElement upper bound element for the returned set @return ImmutableSortedSet containing elements up to but not including toElement
838 Returns a view of the set with elements greater than or equal to the specified element. @param fromElement the lower bound element @return ImmutableSortedSet containing elements >= fromElement
839 Creates an infinitely repeating iterable of the current collection's elements. @return FluentIterable that cycles through the original elements indefinitely
840 Filters elements of this iterable based on a predicate. @param predicate condition to determine which elements to retain @return new FluentIterable containing only elements that satisfy the predicate
841 Filters elements of an iterable by type. @param unfiltered the original iterable to filter @param desiredType the class type to retain @return a new iterable containing only elements of the specified type
842 Transforms elements of the iterable using a specified function. @param function transformation function to apply to each element @return new FluentIterable with transformed elements
843 Wraps an iterator to provide a peeking capability. @param iterator the original iterator @return a PeekingIterator with peek functionality
844 Removes all occurrences of elements in the specified collection from the iterable. @param removeFrom iterable to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
845 Removes elements from the iterable that match the given predicate. @param removeFrom iterable to modify @param predicate condition for removal @return true if any element was removed, false otherwise
846 Retains only the elements in the specified iterable that are contained in the given collection. @param removeFrom iterable to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
847 Adds all elements from the specified collection to this collection. @param collection source of elements to add @return true if this collection was modified as a result of the call
848 Adds all elements from an iterable to a collection. @param addTo collection to add elements to @param elementsToAdd source of elements to add @return true if the collection was modified, false otherwise
849 Creates a new ArrayList from an iterator. @param elements source of elements to add to the list @return populated ArrayList instance
850 Creates a HashSet from an iterator. @param elements iterator providing the elements for the set @return a new HashSet containing the elements from the iterator
851 Filters elements of an iterator by type. @param unfiltered the original iterator to filter @param desiredType the class type to retain @return UnmodifiableIterator with filtered elements of the specified type
852 Checks if all elements in the iterable satisfy the given predicate. @param iterable the iterable to check @param predicate the condition to apply to each element @return true if all elements match the predicate, false otherwise
853 Finds the first element in an iterable that matches a given predicate. @param iterable the iterable to search through @param predicate the condition to apply to each element @return the matching element or throws NoSuchElementException if not found
854 Removes all nodes associated with a given key. @param key the key whose nodes are to be removed
855 Creates a list iterator for the specified list starting at the given index. @param list the source list to iterate over @param index the starting index of the iteration @return ListIterator for the specified list and index
856 Creates a list from a single element and an array of additional elements. @param first the initial element (cannot be null) @param rest the array of additional elements (must not be null, can contain nulls) @return OnePlusArrayList containing the combined elements
857 Transforms elements of a list using a specified function. @param fromList source list to transform @param function transformation function to apply @return new list with transformed elements
858 Creates a list from the given elements. @param first first element of the list @param second second element of the list @param rest array of additional elements @return List containing all provided elements
859 Creates a map view from a set of keys and a value mapping function. @param set the underlying set of keys @param function maps keys to values @return Map<K, V> view based on the provided set and function
860 Creates a navigable map view from a navigable set using a value mapping function. @param set the navigable set of keys @param function the function to compute values from keys @return NavigableMap object with keys from the set and values computed by the function
861 Transforms entries of a map using a provided transformer. @param fromMap the source map to transform @param transformer the transformation function for entries @return a new map with transformed values
862 Checks if a collection contains an entry. @param c collection of entries to check @param o object to check for being an entry @return true if the collection contains the entry, false otherwise
863 Removes an entry from a collection if it exists. @param c the collection of entries to modify @param o the object to remove (must be an Entry) @return true if the entry was removed, false otherwise
864 Returns the count of a specific element in the multiset. @param element the element to count @return the count of the element or 0 if not found
865 Removes a specified number of occurrences of an element. @param element the element to remove @param occurrences the number of times to remove the element @return true if successful, false if not enough occurrences are present
866 Sets the count of an element in the multiset. @param element the element to set the count for @param count the new count value @return the old count of the element
867 Sets the count of an element if the current count matches the expected value. @param element the element to update @param expectedOldCount the expected current count @param newCount the new count to set @return true if the count was successfully updated, false otherwise
868 Removes all values associated with a given key. @param key the key whose values are to be removed
869 Configures multimaps to use natural ordering for comparable keys. @return MultimapBuilderWithKeys configured with natural key ordering
870 Converts a map to a SetMultimap. @param map the underlying map to be converted @return a SetMultimap representation of the input map
871 Transforms entries of a multimap using a specified transformer. @param fromMap original multimap to transform @param transformer function to apply to each entry @return new Multimap with transformed values
872 Adds all elements from an iterable to the builder. Handles Multiset specifically by iterating entries. @param elements collection of elements to add @return current Builder instance for chaining
873 Adds all elements from another multiset to this one. @param self the target multiset @param elements the source multiset with elements to add @return true if any element was added, false if the multiset was already complete
874 Retains only the specified occurrences of each element in a multiset. @param multisetToModify the multiset to modify @param multisetToRetain the multiset specifying occurrences to retain @return true if the multiset was modified, false otherwise
875 Removes occurrences of elements from one multiset based on another. @param multisetToModify the multiset to modify @param occurrencesToRemove the iterable containing elements to remove @return true if any modifications were made, false otherwise
876 Retains only elements specified in the given collection. @param elementsToRetain collection of elements to retain @return true if this multiset was modified
877 Drains elements from a blocking queue into a collection with a specified timeout. @param q the source blocking queue @param buffer the destination collection @param numElements max number of elements to drain @param timeout max wait time for an element @return number of elements drained @throws InterruptedException if interrupted while waiting
878 Drains elements from a blocking queue into a collection uninterruptibly. @param q the source blocking queue @param buffer the destination collection to add elements to @param numElements maximum number of elements to drain @param timeout maximum time to wait for elements as Duration @return number of elements successfully drained
879 Checks if the range contains a specific value. @param input the value to check @return true if input is within the range, false otherwise
880 Checks if all elements in an iterable are within the range. @param values iterable of values to check @return true if all values are within the range, false otherwise
881 Applies a consumer to each pair of elements from two streams. @param streamA the first input stream @param streamB the second input stream @param consumer the consumer function to apply to pairs of elements
882 Collects elements into a table using specified functions. @param rowFunction extracts the row key from an element @param columnFunction extracts the column key from an element @param valueFunction extracts the value from an element @param mergeFunction merges values for duplicate entries @param tableSupplier provides a new instance of the table @return Collector that gathers elements into a table
883 Transforms table values using a specified function. @param fromTable original table with values to transform @param function transformation function for values @return new Table with transformed values
884 Transposes the given table. @param table original table to be transposed @return a new table with rows and columns swapped
885 Creates an escaper map from character to string replacements. @param replacements mapping of characters to their replacement strings @return ArrayBasedEscaperMap instance initialized with the given replacements
886 Adds escape mappings for multiple characters. @param cs array of characters to be escaped @param r replacement string for each character @return this CharEscaperBuilder instance
887 Finds the next index requiring Unicode escape. @param csq character sequence to process @param start starting index for search @param end ending index for validation @return index of next character needing escape or end if none found
888 Creates a SubscriberExceptionContext for handling exceptions. @param event the event being processed @return SubscriberExceptionContext instance with event details
889 Creates a funnel for processing iterables sequentially. @param elementFunnel the funnel to process individual elements @return a SequentialFunnel instance for handling iterables
890 Converts a PrimitiveSink to an OutputStream. @param sink the PrimitiveSink to wrap @return OutputStream that writes to the given PrimitiveSink
891 Creates a funnel for processing strings with a specified charset. @param charset character set to use for encoding @return Funnel object for hashing CharSequence
892 Converts an Appendable to a Writer. @param target the Appendable destination to write to @return a Writer instance, either directly or wrapped in an AppendableWriter
893 Decodes a character sequence into a byte array. @param chars input character sequence to decode @return decoded byte array @throws DecodingException if decoding fails
894 Creates a new Closer instance with suppressing exception handling. @return Closer object configured to suppress exceptions during resource closing
895 Constructs a filter with a specified pattern string. @param patternStr regular expression as a string to match file names
896 Computes the base-2 logarithm of a BigInteger with specified rounding. @param x the BigInteger to compute the logarithm for @param mode the RoundingMode to use for rounding the result @return the computed logarithm as an integer @throws IllegalArgumentException if x is not positive or rounding conditions are violated
897 Parses a string as an unsigned byte value using base 10. @param string the string to parse @return the parsed unsigned byte value
898 Parses a string as an unsigned integer in base 10. @param s the string to parse @return the parsed unsigned integer @throws NumberFormatException if the input is out of range
899 Creates a TypeVariableKey for lookup. @param t the type to be checked and converted @return TypeVariableKey if t is a TypeVariable, otherwise null
900 Retrieves the value of a ListenableFuture. Handles Trusted and InternalFutureFailureAccess instances separately. Converts exceptions to Failure objects. @param future the ListenableFuture to retrieve the value from @return the result or a wrapped exception if failed
901 Initializes a schedule with a specified duration delay. @param delay time duration before task execution
902 Creates an instance of AtomicLongMap with a default ConcurrentHashMap. @return a new AtomicLongMap object initialized with a ConcurrentHashMap
903 Atomically accumulates the given value into the specified key's current value. @param key the key to accumulate the value for @param x the value to accumulate @param accumulatorFunction function to compute new value from old and given values @return updated value after accumulation
904 Atomically accumulates the given value for a key using a specified function. @param key the key to update @param x the value to accumulate @param accumulatorFunction the function to compute the new value @return the old value associated with the key
905 Sets a new value for a key atomically. @param key the key to update @param newValue the new value to set @return the old value associated with the key
906 Adds a closeable resource to be closed asynchronously. @param closeable the resource to add (can be null) @param closingExecutor executor for asynchronous processing @return the original closeable resource
907 Creates a new instance of CycleDetectingLockFactory. @param policy locking policy to be used; must not be null @return a new CycleDetectingLockFactory with the specified policy
908 Creates a sequential executor. @param delegate the underlying executor to manage tasks @return a SequentialExecutor instance ensuring tasks are executed sequentially
909 Creates an instance of SimpleTimeLimiter. @param executor ExecutorService to manage task execution @return A new SimpleTimeLimiter with the given executor
910 Joins a thread with an uninterruptible timeout. @param toJoin the thread to join @param timeout the maximum time to wait as Duration
911 Creates an unordered ElementOrder. @return ElementOrder with Type.UNORDERED and no comparator
912 Creates a stable element order. @return ElementOrder with stable type and no comparator
913 Creates an ElementOrder with natural insertion order. @return ElementOrder configured for insertion order without custom comparator
914 Returns a natural ordering for comparable elements. @param <S> type of elements to be ordered @return an ElementOrder instance with sorted type and natural comparator
915 Creates an ordered collection with a custom comparator. @param comparator the sorting criteria for elements @return ElementOrder configured as sorted with the given comparator
916 Returns a CountDownLatch that counts down when all resources are closed. @return CountDownLatch instance indicating closure of resources
917 Converts a CharSequence to lowercase. @param chars the input character sequence @return a new String with all characters converted to lowercase
918 Converts a CharSequence to uppercase ASCII. @param chars the input character sequence @return uppercase version of the input as a String
919 Converts statistical data to a byte array. @return byte array containing serialized stats
920 Converts statistical data to a byte array. @return byte array containing serialized stats
921 Initializes the hash map with an expected size. @param expectedSize estimated number of entries to store
922 Initializes the set with an expected size. @param expectedSize estimated number of elements to store
923 Combines this matcher with another using logical AND. @param other the second CharMatcher to combine @return a new CharMatcher that matches only if both matchers do
924 Creates a CharMatcher from a character predicate. @param predicate the character matching condition to apply @return CharMatcher instance based on the given predicate
925 Combines this matcher with another using logical OR. @param other second character matcher to combine @return a new CharMatcher that matches if either this or the other matcher does
926 Creates a matcher for characters within a specified inclusive range. @param startInclusive the starting character of the range @param endInclusive the ending character of the range @return CharMatcher that matches characters in the given range
927 Subtracts another CacheStats from this instance. @param other the CacheStats to subtract @return new CacheStats with non-negative metric differences
928 Combines two CacheStats instances. @param other CacheStats to add @return new CacheStats with aggregated metrics
929 Initializes an AbstractListMultimap with a specified backing map. @param map initial map to use; must be empty
930 Initializes an AbstractSetMultimap with a backing map. @param map the initial map to use; must be empty
931 Returns a view of the subset within the specified range. @param fromElement lower bound of the range (inclusive) @param fromInclusive true if the lower bound is inclusive @param toElement upper bound of the range (inclusive) @param toInclusive true if the upper bound is inclusive @return ContiguousSet containing elements within the specified range
932 Creates an EnumMultiset for managing enum constants. @param type enum class to manage @return EnumMultiset instance
933 Returns a subset of elements within the specified range. @param fromElement lower bound element (inclusive) @param toElement upper bound element (exclusive) @return ImmutableSortedSet containing elements in the specified range
934 Partitions an iterator into fixed-size lists. @param iterator the source iterator to partition @param size the desired size of each partition @return UnmodifiableIterator<List<T>> containing partitions
935 Partitions an iterator into lists of a specified size, padding the last list with nulls if necessary. @param iterator the source iterator to partition @param size the desired size of each partition @return UnmodifiableIterator<List<@Nullable T>> containing partitions
936 Creates a MinMaxPriorityQueue builder with natural ordering. @param expectedSize the expected number of elements in the queue @return a Builder instance configured for Comparable elements
937 Creates a MinMaxPriorityQueue builder with natural ordering and specified maximum size. @param maximumSize the maximum capacity of the queue @return a Builder instance configured with natural ordering
938 Constructs an AbstractStreamingHasher with equal chunk and buffer sizes. @param chunkSize size of each processing chunk and buffer
939 Calculates population variance of the dataset. @return The population variance as a double, or NaN if sumOfSquaresOfDeltas is NaN
940 Calculates sample variance of the dataset. @return sample variance as a double, or NaN if not computable
941 Calculates the population variance of the dataset. @return population variance or NaN if sum of squares is NaN
942 Calculates sample variance of the dataset. @return sample variance or NaN if insufficient data
943 Matches any character in the given sequence. @param sequence characters to match against @return CharMatcher instance matching any character in the sequence
944 Trims and collapses matching characters from a sequence. @param sequence input character sequence to process @param replacement character to replace matches with @return processed string with trimmed and collapsed matches
945 Creates an equivalence strategy based on a transformation function. @param function the transformation function to apply to objects @return a new Equivalence instance using the transformed results
946 Creates an equivalence strategy for iterables. @return Equivalence object for comparing iterables based on pairwise element equivalence
947 Compares two iterables for element-wise equality. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables have the same elements in the same order; false otherwise
948 Compares two lists for equality. @param thisList first list to compare @param other object to compare with the first list @return true if both lists are equal; false otherwise
949 Creates a new ConcurrentHashMultiset with default concurrency. @return ConcurrentHashMultiset instance initialized with ConcurrentHashMap
950 Creates a ConcurrentHashMultiset with a specified concurrent map for element counts. @param countMap the initial concurrent map for element counts @return a new ConcurrentHashMultiset instance
951 Appends elements from an iterable to a given Appendable. @param appendable the destination for appending @param parts iterable of objects to join @return the original Appendable with appended elements @throws IOException if an I/O error occurs
952 Appends elements from an iterator to a StringBuilder. @param builder destination for appending @param parts iterator of objects to join @return the original StringBuilder with appended elements
953 Appends key-value pairs from a map to a StringBuilder. @param builder the StringBuilder to append to @param map the map containing entries to append @return the updated StringBuilder
954 Joins map entries into a string. @param entries iterable of map entries @return string representation of joined entries
955 Adds a new holder with the specified value. @param value the value to be added, can be null @return current ToStringHelper instance for method chaining
956 Adds a name-value pair to the string representation. @param name the key for the value @param value the value associated with the key, can be null @return the current ToStringHelper instance
957 Adds a boolean value holder to the string representation. @param value the boolean value to be added @return the current ToStringHelper instance
958 Adds a character value to the string representation. @param value the character to be added @return the current ToStringHelper instance
959 Adds a double value to the string representation. @param value the double value to be added @return the current ToStringHelper instance
960 Adds a float value to the string representation. @param value the float value to be added @return the current ToStringHelper instance
961 Adds an integer value as an unconditional holder. @param value the integer value to be added @return the current ToStringHelper instance
962 Adds a long value as an unconditional holder. @param value the long value to be added @return the current ToStringHelper instance
963 Adds a boolean value as an unconditional holder. @param name key for the value @param value boolean to be added @return this ToStringHelper instance
964 Adds an unconditional holder with a name and character value. Converts the character to a string before adding. @param name the key for the value @param value the associated character value @return this ToStringHelper instance
965 Adds an unconditional holder with a name and double value. @param name the key for the value @param value the associated double value @return this ToStringHelper instance
966 Adds an unconditional holder with a name and float value. @param name the key for the value @param value the associated float value @return this ToStringHelper instance
967 Adds an unconditional holder with a name and integer value. @param name the key for the value @param value the associated integer value @return this ToStringHelper instance
968 Adds an unconditional holder with a name and long value. @param name the key for the value @param value the associated long value @return this ToStringHelper instance
969 Converts a nullable reference to an Optional. @param nullableReference the value that may be null @return Optional containing the value if not null, otherwise an empty Optional
970 Initializes an empty FluentIterable. Sets iterableDelegate to an absent Optional instance.
971 Returns the size if known. @return Optional containing the size or empty if not known
972 Returns an empty Optional indicating unknown character count. @return Optional<Long> with no value present if length is unknown
973 Converts an empty string to null. @param string input string @return original string or null if it's empty
974 Parses a host and port from a string. @param hostPortString input string in the format "host[:port]" @return HostAndPort object representing the parsed host and port
975 Skips elements in the iterable. @param numberToSkip number of elements to skip @return new FluentIterable with skipped elements removed
976 Limits the size of the iterable to the specified maximum. @param maxSize the maximum number of elements to include @return a new FluentIterable with limited size
977 Retrieves an element from an iterable at a specified position. @param iterable source collection @param position index of the element to retrieve @param defaultValue value to return if position is out of bounds @return element at position or default value
978 Retrieves an element from an iterator at a specified position. @param iterator the iterator to access @param position the index of the element to retrieve @return the element at the given position @throws IndexOutOfBoundsException if position is out of bounds
979 Retrieves an element from the iterator at a specified position. @param iterator source iterator @param position index of the element to retrieve @param defaultValue value to return if position is out of bounds @return element at the given position or default value
980 Creates a traverser for the file tree structure. @return Traverser object configured for file traversal
981 Creates a limited input stream with a specified byte limit. @param in underlying InputStream to wrap @param limit maximum number of bytes that can be read from this stream @return LimitedInputStream object
982 Converts a BigInteger to an Inet4Address. @param address BigInteger representation of the IPv4 address @return Inet4Address object created from the BigInteger
983 Converts a BigInteger to an IPv6 address. @param address BigInteger representation of the IPv6 address @return Inet6Address object created from the BigInteger
984 Creates a SipHash-2-4 hash function. @param k0 first key component @param k1 second key component @return SipHashFunction configured for 2 compression and 4 finalization rounds
985 Constructs a FileBackedOutputStream with specified file threshold. @param fileThreshold memory limit before switching to file storage
986 Converts an integer to an Inet4Address. @param address integer representation of IPv4 address @return Inet4Address object representing the IP address
987 Reserves a specified number of permits. @param permits number of permits to reserve @return wait time in microseconds or 0 if no wait needed
988 Attempts to acquire permits within a specified timeout. @param permits number of permits to request @param timeout maximum wait time for acquiring permits @param unit time unit for the timeout @return true if permits are acquired, false otherwise
989 Writes BloomFilter state to an OutputStream. @param out the OutputStream to write to @throws IOException if writing fails
990 Creates a fixed-delay schedule from Duration objects. @param initialDelay initial delay before first execution @param delay delay between task executions @return Scheduler object configured with fixed delay
991 Creates a fixed-rate schedule from durations. @param initialDelay time before first execution @param period time between task executions @return Scheduler instance with fixed-rate configuration
992 Converts and constrains a time value to safe nanoseconds. @param time the time value @param unit the time unit of the input time @return constrained timeout in nanoseconds
993 Creates and starts a new Stopwatch. @param ticker the Ticker to use for time measurement @return a started Stopwatch instance
994 Sets a comparator to order entries by their values. @param valueComparator the comparator for ordering values @return this builder instance
995 Sets the concurrency level for map operations. @param concurrencyLevel expected number of concurrent threads accessing the map @return current InternerBuilder instance for method chaining
996 Sets cache expiration time after a write operation using a Duration. @param duration the time duration for expiration @return this CacheBuilder instance
997 Sets the maximum time after an entry is last accessed before it can be removed. @param duration the duration of time after which an entry should expire @return this CacheBuilder instance
998 Sets the cache to automatically refresh entries after a fixed duration. @param duration the time length for refresh @return this CacheBuilder instance
999 Configures cache to use weak references for keys. @return this CacheBuilder instance with weak key strength
1000 Sets cache values to be weakly referenced. @return the CacheBuilder instance for method chaining
1001 Configures cache to use soft reference values. @return the CacheBuilder instance for method chaining
1002 Configures map to use weak keys. @return this MapMaker instance with weak key strength
1003 Configures map to use weak values. @return this MapMaker instance for method chaining
1004 Retrieves the failure cause of the service. @return Throwable object representing the failure cause or null if not failed
1005 Validates element index within bounds. @param index the index to validate @param size the size of the container @return validated index or throws IndexOutOfBoundsException if invalid
1006 Validates that an index is within valid bounds. @param index the index to validate @param size the size of the container @return the validated index @throws IndexOutOfBoundsException if index is out of bounds
1007 Validates that start and end indexes are within valid bounds for a given size. @param start the starting index to validate @param end the ending index to validate @param size the size of the container Throws IndexOutOfBoundsException if any index is out of bounds or start > end
1008 Creates a predicate that checks if an object equals the target. @param target object to compare against @return Predicate evaluating to true if objects are equal
1009 Filters a filtered multimap with an additional entry predicate. @param multimap the original filtered multimap to filter further @param entryPredicate the additional condition for entries @return a new FilteredEntryMultimap with combined predicates
1010 Filters a multiset based on a given predicate. @param unfiltered the original multiset to filter @param predicate the condition elements must satisfy to be included @return a new Multiset containing only elements that match the predicate
1011 Creates a Splitter using the specified character matcher as a separator. @param separatorMatcher defines characters to split on @return a new Splitter instance configured with the given matcher
1012 Creates a Splitter that splits strings into fixed-length segments. @param length the length of each segment, must be greater than 0 @return a new Splitter instance with the specified fixed length strategy
1013 Configures trimming of whitespace from split results. @return a new Splitter instance with whitespace trimming enabled
1014 Creates and returns an unstarted Stopwatch instance.
1015 Creates and starts a new Stopwatch. @return A started Stopwatch instance
1016 Calculates the total UTF-8 byte length of a CharSequence. @param sequence input character sequence @return total UTF-8 byte length or throws exception on overflow
1017 Awaits ExecutorService termination without interruption. @param executor the ExecutorService to await
1018 Continuously processes and cleans up references from the queue. @param queue reference queue to process
1019 Constructs a new Builder instance.
1020 Creates a CacheLoader using a given function. @param function the computing function to use for value loading @return a new CacheLoader instance
1021 Creates a CacheLoader from a supplier. @param supplier function to generate cache values @return CacheLoader instance using the provided supplier
1022 Throws an exception indicating bulk loading is unsupported. @param keys iterable of keys to load @return nothing, as it always throws an exception @throws Exception if bulk loading is attempted
1023 Calculates cache hit rate. @return Ratio of hits to total requests, or 1.0 if no requests
1024 Calculates cache miss rate. @return Ratio of misses to total requests, or 0 if no requests
1025 Protected constructor to prevent instantiation.
1026 Protected constructor to prevent instantiation.
1027 Protected constructor to prevent instantiation.
1028 Protected constructor to prevent instantiation.
1029 Protected constructor to prevent instantiation.
1030 Protected constructor to prevent instantiation.
1031 Initializes a new bi-directional map with specified forward and backward mappings. @param backward the map for reverse key-value pairs @param forward the existing AbstractBiMap for forward associations
1032 Protected constructor to prevent instantiation.
1033 Protected constructor to prevent instantiation.
1034 Constructs a new empty MutableTypeToInstanceMap instance.
1035 Protected constructor to prevent instantiation.
1036 Default constructor for ForwardingSetMultimap. Initializes with a null delegate; intended to be subclassed.
1037 Protected constructor to prevent instantiation.
1038 Protected constructor to prevent instantiation.
1039 Creates a new entry in the cache segment. @param segment the cache segment to add the entry to @param key the key for the new entry @param hash the hash code of the key @param next reference to the next entry in the linked structure @return a new ReferenceEntry instance
1040 Creates a new reference entry for the cache. @param segment the cache segment to manage the entry @param key the key associated with the value @param hash the hash code of the key @param next reference to the next entry in the chain @return ReferenceEntry object representing the new cache entry
1041 Retrieves result from the asynchronous operation. @return result of the Future @throws ExecutionException if computation threw an exception
1042 Performs cleanup after writing to the cache. Calls runUnlockedCleanup to process pending removals without holding a lock.
1043 Creates a value reference for caching. @param segment cache segment to manage the reference @param entry associated cache entry @param value object to be cached @param weight importance weight of the cached entry @return ValueReference object managing the cached value
1044 Creates a value reference for a cache entry. @param segment the cache segment @param entry the reference entry @param value the value to be referenced @param weight the importance weight of the reference @return ValueReference object
1045 Creates a weighted weak value reference. @param segment cache segment for organization @param entry associated reference entry @param value object to be referenced @param weight priority weight for the reference @return ValueReference instance managing the caching of the value
1046 Records a read access for a cache entry. @param entry the cache entry being accessed @param now current timestamp
1047 Records a read operation on a cache entry. @param entry the cache entry being accessed @param now current timestamp
1048 Records a write operation on a cache entry. @param entry the cache entry being written to @param weight the weight of the entry @param now the current timestamp
1049 Retrieves the live value of a cache entry. @param entry the cache entry to check @param now current time in nanoseconds @return the value if it's valid and not expired, otherwise null
1050 Returns the size of an iterable. @param iterable the iterable to measure @return the number of elements in the iterable
1051 Returns the size of the multiset using linear time calculation. @return the number of elements in the multiset
1052 Converts an InputStream to a byte array. @param in input stream to read from @param bufs queue of byte arrays to store intermediate data @param totalLen current total length of the combined byte array @return byte array containing the entire input stream content @throws IOException if reading fails
1053 Sets the forward and inverse maps for the bi-directional map. @param forward map from keys to values @param backward map from values to keys
1054 Creates a range with no bounds using the specified comparator. @param comparator custom comparator for range elements @return GeneralRange object representing an unbounded range
1055 Creates a range with a lower bound and no upper bound. @param comparator custom comparator for range elements @param endpoint lower bound value @param boundType type of lower bound (inclusive or exclusive) @return GeneralRange object representing the specified range
1056 Creates a range with an upper bound and no lower bound. @param comparator custom comparator for range elements @param endpoint upper bound value @param boundType type of upper bound (inclusive or exclusive) @return GeneralRange object representing the defined range
1057 Creates a range with specified bounds and comparator. @param comparator custom comparator for range elements @param lower lower bound value @param lowerType type of lower bound (inclusive or exclusive) @param upper upper bound value @param upperType type of upper bound (inclusive or exclusive) @return GeneralRange object representing the defined range
1058 Computes the intersection of two ranges. @param other the range to intersect with @return a new GeneralRange representing the intersection or an empty range if no overlap
1059 Returns the next element in the iteration without advancing the iterator. Throws NoSuchElementException if no more elements are available. @return the next element in the iteration
1060 Removes all values associated with a specified key and returns them. @param key the key whose values are to be removed @return an unmodifiable view of the removed values or an empty collection if none exist
1061 Validates iterator state. Refreshes collection if empty and checks for concurrent modifications.
1062 Adds a value to the collection associated with a key. @param key the key to associate with the value @param value the value to add @return true if the value was added, false otherwise
1063 Adds a value to the collection associated with a key. @param key the key to associate with the value @param value the value to add @return true if the value was added, false otherwise
1064 Retrieves or creates a list of values for the given key. @param key the key to retrieve values for @return a List containing the values associated with the key
1065 Retrieves or creates a set of values for the given key. @param key unique key to retrieve values for @return a Set containing the values associated with the key
1066 Returns a collection of all key-value entries. Utilizes the superclass's entries method to ensure proper functionality.
1067 Writes the object's state to a stream. @param stream ObjectOutputStream to write to @throws IOException if an I/O error occurs
1068 Converts a collection to a string representation. @param collection the collection to convert @return a string representation of the collection
1069 Converts a map to a string representation. @param map the map to convert @return a string in the format "{key1=value1, key2=value2, ...}"
1070 Creates an ArrayList with an initial capacity based on the expected size. @param estimatedSize expected number of elements in the list @return ArrayList instance with precomputed capacity
1071 Creates a new HashMap with an optimized initial capacity. @param expectedSize the expected number of entries in the map @return a new HashMap instance with calculated capacity
1072 Creates a new LinkedHashMap with an initial capacity calculated for the expected size. @param expectedSize the expected number of elements in the map @return a new LinkedHashMap instance
1073 Creates a new HashSet with an initial capacity calculated for the expected size. @param expectedSize the expected number of elements in the set @return a new HashSet with optimal capacity
1074 Creates a LinkedHashSet with an initial capacity optimized for the given size. @param expectedSize the expected number of elements in the set @return a LinkedHashSet with the calculated initial capacity
1075 Creates a builder for a list-based multimap with default expected values per key. @return ListMultimapBuilder instance configured for array lists
1076 Creates a builder for a SetMultimap with hash sets as value collections. Uses default expected values per key. @return SetMultimapBuilder configured with HashSetSupplier
1077 Creates a builder for SetMultimap with linked hash set values. Uses default expected number of values per key. @return SetMultimapBuilder configured with linked hash sets
1078 Creates a builder for multimaps with hash-based keys using default expected key count. @return MultimapBuilderWithKeys instance configured for hash keys
1079 Creates a MultimapBuilder with linked hash keys using default expected keys. @return a new MultimapBuilderWithKeys instance configured for linked hash keys
1080 Creates an immutable multiset entry. @param e the element @param n the count of the element (non-negative) @return an ImmutableEntry with specified element and count
1081 Sets the count of an element in the multiset. @param element the element to set the count for @param count the new count of the element @return the previous count of the element
1082 Sets the count of an element in the multiset. @param element the element to update @param oldCount expected current count of the element @param newCount new count to set for the element @return true if update successful, false otherwise
1083 Generates hash code based on map view. @return hash code of the multimap's map representation
1084 Returns a string representation of the multimap. Utilizes the underlying map's toString method for conversion.
1085 Returns a set view of the entries in this multiset. @return a Set containing all unique elements with their counts
1086 Generates hash code based on the set of entries. @return hash code of the entry set representing unique elements and their counts
1087 Returns string representation of the multiset. Uses entry set to display unique elements and their counts.
1088 Retrieves the first entry in the map. @return the first entry or null if the map is empty
1089 Finds the least element greater than or equal to the specified element. @param e the element to find the ceiling for @return the least element greater than or equal to e, or null if none exists
1090 Finds the least element greater than the given element. @param e the element to compare against @return the next higher element or null if no such element exists
1091 Creates an empty TreeRangeSet. @return a new TreeRangeSet instance
1092 Checks if a specific value is within the defined range. @param value the value to check @return true if the value is within the range, false otherwise
1093 Checks if the provided comparator matches the one used by the iterable. @param comparator the comparator to check against @param elements the iterable to check @return true if comparators match, false otherwise
1094 Copies all entries from the specified table into this ArrayTable. @param table source table to copy entries from
1095 Returns the set of all cells in the table. Initializes a new CellSet if not already created. @return Set of all cells
1096 Returns the set of all cells in the table. Initializes a new CellSet if not already created. @return Set of all cells
1097 Returns all values in the table. Initializes if not already created. @return Collection of all values
1098 Returns all values in the table. Initializes if not already created. @return Collection of all values
1099 Creates an ordering based on a transformation function. @param function the transformation function to apply to elements @return a new Ordering instance that uses the transformed values for comparison
1100 Creates an Ordering from a Comparator. @param comparator the comparator to use for ordering @return an Ordering based on the given comparator
1101 Creates a compound ordering with an additional comparator. @param secondaryComparator secondary comparator for tie-breaking @return CompoundOrdering object
1102 Creates an immutable cell with specified row key, column key, and value. @param rowKey the row identifier for the cell @param columnKey the column identifier for the cell @param value the data stored in the cell @return ImmutableCell object containing the provided data
1103 Checks if specified key pair exists in ArrayTable. @param rowKey unique row identifier @param columnKey unique column identifier @return true if both keys exist, false otherwise
1104 Creates an immutable map entry with specified key and value. @param key the entry's key @param value the entry's value @return an ImmutableMapEntry object
1105 Creates an immutable map entry. @param entry existing map entry to check for reusability @param key the entry's key @param value the entry's value @return ImmutableMapEntry instance, either reused or newly created
1106 Adds a key-value pair from an entry to the builder. @param entry the entry containing the key and value @return this Builder instance for method chaining
1107 Adds a key-value pair to the builder. @param key the key to add @param value the value associated with the key @return this Builder instance for method chaining
1108 Resizes the hash map if needed. @param newSize desired new size for the map
1109 Inserts a new entry into the map. @param entryIndex index where the entry will be inserted @param key key of the entry to insert @param value value of the entry to insert @param hash hash code of the key @param mask bit mask for combining hash codes
1110 Resizes internal arrays if newSize exceeds current capacity. @param newSize desired new size for the set
1111 Inserts an entry into the set. @param entryIndex index where the entry is to be inserted @param object the element to insert @param hash hash code of the element @param mask bit mask for combining operations
1112 Allocates internal arrays for hash map. @return expected size of the hash map
1113 Allocates internal arrays for the hash set. @return expected size of entries
1114 Checks if this range fully contains another range. @param other the Range to check for containment @return true if this range encloses 'other', false otherwise
1115 Checks if this range is connected to another range. @param other the other Range to check connection with @return true if ranges overlap or touch, false otherwise
1116 Writes the `ImmutableSetMultimap` to an ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if I/O error occurs during writing
1117 Returns a new Builder instance for constructing an ImmutableRangeMap. @return Builder object initialized with no entries
1118 Creates a new immutable range set builder. @return Builder instance initialized with an empty list of ranges
1119 Returns a new Builder instance for creating ImmutableTable. @return Builder object to construct an ImmutableTable
1120 Provides an unmodifiable iterator over the elements. Ensures safe iteration without modifying the underlying data structure. @return UnmodifiableIterator for read-only access to elements
1121 Counts occurrences of an element in an iterable. @param iterable the iterable to search within @param element the element to count @return number of times the element appears in the iterable
1122 Checks if this map contains the specified key. @param key the key to search for @return true if the key is present, false otherwise
1123 Checks if this map contains a specific value. @param value the value to look for @return true if value is found, false otherwise
1124 Retrieves the greatest key less than the specified key. @param key reference key to find the lower bound for @return the greatest key less than the specified key, or null if no such key exists
1125 Finds the greatest key less than or equal to the specified key. @param key the key for which to find the floor key @return the floor key or null if no such key exists
1126 Finds the smallest key greater than or equal to the specified key. @param key the key to search for @return the smallest key greater than or equal to the specified key, or null if no such key exists
1127 Finds the next higher key in the map. @param key current key to compare against @return the next higher key or null if none exists
1128 Retrieves the smallest key in the map. @return the smallest key @throws NoSuchElementException if the map is empty
1129 Retrieves the last key in the map. @return the last key or throws NoSuchElementException if the map is empty
1130 Retrieves the last entry from the map in descending order. @return the last entry or null if the map is empty
1131 Retrieves and removes the last entry from the map in descending order. @return the last entry or null if the map is empty
1132 Returns a navigable set of keys in descending order. @return NavigableSet containing keys from the underlying map in reverse order
1133 Returns a submap containing entries within the specified key range. @param fromKey low endpoint of the keys in the returned map (inclusive) @param toKey high endpoint of the keys in the returned map (exclusive) @return SortedMap with specified range of keys
1134 Retrieves the greatest entry less than the specified key. @param key the key to compare against @return Entry with the greatest key less than provided key or null if none exists
1135 Finds the greatest entry less than or equal to the specified key. @param key the key to search for @return Entry with the greatest key less than or equal to the specified key or null if no such entry exists
1136 Returns a view of the portion of this map whose keys are less than toKey. @param toKey upper bound key @return SortedMap containing entries with keys less than toKey
1137 Finds the smallest entry greater than or equal to the specified key. @param key the key to search for @return Entry with the smallest key greater than or equal to the given key, or null if no such entry exists
1138 Finds the entry with the smallest key greater than the specified key. @param key key to search for the next higher entry @return Entry with the next higher key or null if no such entry exists
1139 Returns a view of the portion of this map with keys greater than or equal to fromKey. @param fromKey low endpoint of the returned map @return SortedMap containing entries with keys >= fromKey
1140 Returns a view of the elements within the specified bounds. @param lowerBound the lower bound (inclusive or exclusive) @param lowerBoundType specifies if the lower bound is inclusive or exclusive @param upperBound the upper bound (inclusive or exclusive) @param upperBoundType specifies if the upper bound is inclusive or exclusive @return SortedMultiset containing elements within the specified range
1141 Creates a new empty HashBasedTable. @return an instance of HashBasedTable with LinkedHashMap for rows and default column factory
1142 Reads object state from an ObjectInputStream. @param stream the ObjectInputStream to read from @throws IOException if an I/O error occurs @throws ClassNotFoundException if class of serialized object cannot be found
1143 Moves the last entry to a specified index and updates references. @param dstIndex destination index for the moved entry @param mask bit mask used for calculating table indices
1144 Moves the last entry to a specified index and updates references. @param dstIndex destination index for the moved entry @param mask bit mask for indexing operations
1145 Checks if the map contains a specified value. @param value the value to search for @return true if the value is present, false otherwise
1146 Creates a new Builder with the specified initial capacity. @param expectedSize the starting size of the internal entry array @return a new Builder instance
1147 Constructs a Builder with default initial capacity.
1148 Returns a new instance of Builder with default initial capacity. @return Builder object to construct ImmutableMap instances
1149 Constructs a Builder with a specified comparator. @param comparator the comparator to define the order of keys
1150 Creates an immutable bi-map from a single key-value pair. @param k1 the unique key for the map @param v1 the value associated with the key @return ImmutableBiMap containing the specified key-value pair
1151 Adds a unique element to the set. @param e element to add
1152 Constructs a new Builder instance with default initial capacity.
1153 Creates a Builder with an initial capacity. @param expectedSize the expected number of elements @return a Builder instance
1154 Adds all elements from an iterable to the builder. @param elements collection of elements to add @return current Builder instance for chaining
1155 Adds all elements from an iterator to the multiset. @param elements iterator providing elements to add @return this Builder instance for method chaining
1156 Adds all elements from an iterator to the builder. @param elements iterator providing elements to add @return this Builder instance for method chaining
1157 Provides custom serialization support. @return SerializedForm instance representing this ImmutableMap
1158 Creates a new ImmutableTable with a single entry. @param rowKey the key for the row @param columnKey the key for the column @param value the value associated with the keys @return an ImmutableTable containing one entry
1159 Returns string representation of delegate iterable. @return comma-separated string of elements in brackets
1160 Adds all values for a given key. @param key the key to add values under @param values iterable of values to add @return this Builder instance
1161 Retrieves the only element from an iterable or returns a default value if empty. @param iterable source of elements @param defaultValue value to return if iterable is empty @return single element or default value
1162 Retrieves the last element from an iterable or returns a default value if empty. @param iterable the iterable to process @param defaultValue value to return if the iterable is empty @return the last element or the default value
1163 Adds a key-value pair to the multimap. @param key the key associated with the value @param value the value to be added @return always true, indicating successful addition
1164 Partitions a list into sublists of a specified size. @param list the original list to partition @param size the desired size of each sublist @return a list of sublists
1165 Finds the index of the specified element in this list. @param element the element to search for @return index of the element or -1 if not found
1166 Returns the last index of the specified element in this list. @param element the element to find, may be null @return the last index of the element or -1 if not found
1167 Performs pre-write cleanup operations. Ensures segment is ready for write by executing necessary cleanups under lock.
1168 Creates a new empty TreeRangeMap. @return An initialized TreeRangeMap instance
1169 Finds the index of the minimum element in a specified range. @param index starting index for search @param len length of the range to search @return index of the minimum element or -1 if out of bounds
1170 Retrieves the index of the maximum element in the queue. @return Index of the maximum element
1171 Retrieves the minimum element in the queue without removing it. @return the minimum element or null if the queue is empty
1172 Bubbles up an element by alternating levels in a binary heap. @param index starting index of the element to bubble up @param x element to be inserted and bubbled up @return final index of the element after bubbling up
1173 Provides an iterator over the elements of this multiset. @return Iterator for the elements
1174 Concatenates an element to the beginning of an array. @param element the element to prepend @param array the original array @return new array with the element added at the start
1175 Converts a collection to an array. @param c the source collection @param array the target array to populate; may be resized @return array containing elements from the collection
1176 Finds the minimum element in an iterable. @param iterable Iterable of elements to compare @return Minimum element or throws NoSuchElementException if empty
1177 Finds the maximum element in an iterable using natural ordering. @param iterable source of elements to compare @return maximum element found or throws NoSuchElementException if empty
1178 Returns string representation of the contiguous set's range. @return formatted string describing the range bounds
1179 Converts a Range to a GeneralRange. @param range input Range object @return GeneralRange with same bounds and natural ordering
1180 Returns a submap of the given NavigableMap within the specified range. @param map the source NavigableMap @param range the range defining the keys to include in the submap @return a NavigableMap containing entries within the range
1181 Returns a subset of the given NavigableSet within the specified Range. @param set the original NavigableSet @param range the Range defining the subset bounds @return a NavigableSet representing the subset or the original set if no bounds are specified
1182 Returns the sorted map of rows to columns with values. Utilizes the superclass method to initialize if not already created. @return A two-level sorted map representing the table's data
1183 Returns a synchronized version of the provided queue. @param queue the underlying queue implementation @return synchronized Queue instance
1184 Initializes the escaper with a map and range of safe characters. @param escaperMap mapping of characters to their escaped representations @param safeMin minimum character in the safe range @param safeMax maximum character in the safe range
1185 Initializes an ArrayBasedUnicodeEscaper with specified parameters. @param escaperMap map defining character replacements @param safeMin minimum Unicode code point considered safe @param safeMax maximum Unicode code point considered safe @param unsafeReplacement string used for unsafe characters or null
1186 Constructs a PercentEscaper with specified safe characters and space encoding option. @param safeChars string of characters considered safe @param plusForSpace if true, spaces are encoded as '+'
1187 Escapes special characters in a given string. @param string input string to be escaped @return escaped string or original if no escaping needed
1188 Creates a Subscriber instance based on thread safety. @param bus the EventBus to which the subscriber is attached @param listener the object containing the event handler method @param method the event handler method to be invoked @return a new Subscriber or SynchronizedSubscriber instance
1189 Returns a string representation of the graph. @return String containing graph properties and edge set
1190 Returns a set of all edges in the graph. @return Set containing EndpointPair objects representing edges
1191 Returns a set of all edges in the graph. @return Set containing EndpointPair objects representing edges
1192 Inserts a double value into the hash. Converts double to long bits and delegates to putLong. @param d the double value to insert @return this Hasher instance for chaining
1193 Creates a Bloom filter collector with default false positive probability. @param funnel defines how to extract bytes from objects @param expectedInsertions estimated number of insertions @return Collector for creating BloomFilter instances with 3% FPP
1194 Calculates the expected false positive probability. @return Probability of false positives as a double
1195 Checks if two BloomFilters are compatible for merging. @param that another BloomFilter to compare with @return true if compatible, false otherwise
1196 Converts a byte to its string representation in base 10. @param x the byte value to convert @return string representation of the unsigned byte in base 10
1197 Merges another BloomFilter into this one. @param that the BloomFilter to merge from @throws IllegalArgumentException if conditions for merging are not met
1198 Creates a HashCode instance from a byte array without copying. @param bytes the byte array to use as hash code @return HashCode object using the provided byte array
1199 Creates a HashCode instance from an integer. @param hash the integer value to be used as the hash code @return a new HashCode object representing the given integer
1200 Creates a HashCode instance from a long value. @param hash the long value representing the hash code @return a new LongHashCode object initialized with the given hash value
1201 Returns the unsigned integer value as a float. @return float representation of the unsigned int
1202 Returns the unsigned integer value as a double. @return double representation of the unsigned int
1203 Converts unsigned integer to BigInteger. @return BigInteger representation of the unsigned int
1204 Generates a good fast hash function with at least the specified number of bits. @param minimumBits minimum number of bits for the hash function @return HashFunction instance capable of generating the required bit length
1205 Generates a consistent hash for a given HashCode within specified buckets. @param hashCode the input HashCode to hash @param buckets the number of buckets to distribute the input into @return the bucket index for the input HashCode
1206 Creates an HMAC-MD5 hash function. @param key cryptographic key for hashing @return HashFunction instance using MD5 with the provided key
1207 Creates an HMAC-SHA1 hash function using the provided key. @param key cryptographic key for hashing @return HashFunction instance configured with HMAC-SHA1 algorithm
1208 Creates an HMAC-SHA256 hash function. @param key cryptographic key for hashing @return HashFunction object using HMAC-SHA256 algorithm
1209 Creates a HMAC-SHA512 hash function. @param key secret key for HMAC initialization @return MacHashFunction configured for HMAC-SHA512
1210 Concatenates multiple byte sources into a single source. @param sources iterable of ByteSource instances to concatenate @return ByteSource representing the concatenated content
1211 Concatenates multiple character sources. @param sources iterable of CharSource instances to concatenate @return a single CharSource representing the concatenated input
1212 Creates a ByteArrayDataInput from byte array. @param bytes input byte data @return ByteArrayDataInput object
1213 Creates a new ByteArrayDataOutput instance. @return ByteArrayDataOutput object initialized with a new ByteArrayOutputStream
1214 Creates a ByteArrayDataOutput instance with specified initial size. @param size initial capacity of the underlying ByteArrayOutputStream @return ByteArrayDataOutput object initialized with given size
1215 Constructs a ReaderInputStream with specified reader, charset, and buffer size. @param reader character reader to read from @param charset character set for encoding characters to bytes @param bufferSize size of the internal buffers
1216 Counts bytes in the input stream by skipping through it. @param in InputStream to count bytes from @return total number of bytes counted
1217 Skips exactly 'n' bytes in the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @throws IOException if an I/O error occurs or end of stream is reached prematurely
1218 Writes multiple lines to the output stream. @param lines iterable of CharSequence objects representing lines to write @param lineSeparator string used as the line separator @throws IOException if an I/O error occurs during writing
1219 Writes multiple lines to the output stream. @param lines stream of CharSequence objects representing lines to write @param lineSeparator string used as the line separator @throws IOException if an I/O error occurs during writing
1220 Processes each line from the character source. @param action consumer function to apply to each line @throws IOException if an I/O error occurs while reading
1221 Reads all lines from a Readable source. @param r the source to read from, must not be null @return List of strings representing each line or an empty list if no lines are found
1222 Reads lines from a readable source and processes them. @param readable the source to read from, must not be null @param processor the line processor to handle each line, must not be null @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs
1223 Reads more characters from the input reader into the buffer. Handles buffer resizing and shifting existing data as needed.
1224 Reads a signed short from the input stream. @return the signed short value @throws IOException if an I/O error occurs
1225 Reads a character from the input stream. @return the character value as a char @throws IOException if an I/O error occurs
1226 Reads a float from the input stream in little-endian format. @return the read float value @throws IOException if an I/O error occurs
1227 Reads a double value from the input stream in little-endian byte order. @return the read double value @throws IOException if an I/O error occurs
1228 Writes each character of the string in little-endian format. @param s the string to be written
1229 Writes a double value to the output stream in little-endian byte order. Converts the double to long bits and delegates writing to writeLong. @param v the double value to write @throws IOException if an I/O error occurs
1230 Deletes contents of a directory insecurely. @param dir stream of directory entries to delete @return collection of IOExceptions if any occurred or null if successful
1231 Recursively deletes a directory or file securely. @param dir secure directory stream to operate on @param path file or directory path to delete @return collection of IOExceptions or null if none occurred
1232 Initializes with an iterator of byte sources. @param it iterator over byte sources @throws IOException if initialization fails
1233 Converts the resource to a CharSource using the specified charset. @param charset character encoding to use @return CharSource representation of the resource content
1234 Calculates the size of permutations for a sorted list. @param sortedInputList list of elements in sorted order @param comparator comparator to compare elements @return number of permutations or Integer.MAX_VALUE if overflow occurs
1235 Calculates the mean of a sequence of numbers. @param values iterator over Number objects @return mean value as double @throws IllegalArgumentException if no values are provided or any value is infinite/NaN
1236 Checks if a double value is a power of two. @param x the double value to check @return true if x is a positive finite power of two, false otherwise
1237 Checks if a double value is a mathematical integer. @param x the double value to check @return true if x is a mathematical integer, false otherwise
1238 Rounds a long value to a double using specified rounding mode. @param x the long value to round @param mode the rounding mode to apply @return the rounded double value
1239 Compares two doubles with a tolerance. @param a first double value @param b second double value @param tolerance maximum allowed difference @return 0 if values are approximately equal, -1 if a < b, 1 if a > b, or NaN comparison result if both are NaN
1240 Calculates the maximum run length before falling back to a different strategy. @param tableSize size of the hash table @return maximum run length based on table size and multiplier
1241 Trims the buffer to maintain top K elements. Uses partitioning and sorting to efficiently manage the collection.
1242 Computes the base-10 logarithm of an integer with specified rounding mode. @param x input integer @param mode rounding mode for log calculation @return logarithm value according to rounding mode @throws IllegalArgumentException if x is not positive
1243 Computes the integer square root of a non-negative long value. @param x non-negative long value to compute the square root for @param mode rounding mode to apply @return integer square root of x, rounded according to specified mode @throws IllegalArgumentException if x is negative @throws ArithmeticException if rounding is required but unnecessary
1244 Calculates new capacity for the queue. @return adjusted new capacity ensuring it does not exceed maximum size
1245 Creates a horizontal linear transformation. @param y y-intercept of the line @return LinearTransformation object representing a horizontal line
1246 Sets the slope for a linear transformation. @param slope the slope of the line @return LinearTransformation object with specified slope
1247 Creates a vertical linear transformation. @param x scaling factor for vertical transformation @return VerticalLinearTransformation object
1248 Computes the factorial of a non-negative integer. @param n the non-negative integer to compute the factorial for @return BigInteger representing the factorial of n @throws IllegalArgumentException if n is negative
1249 Computes the base-10 logarithm of a long integer with rounding. @param x the number to compute the logarithm for @param mode rounding mode to apply @return the rounded logarithmic value @throws IllegalArgumentException if x is not positive
1250 Multiplies a fraction by an integer. @param x the multiplier @param numerator the numerator of the fraction @param denominator the denominator of the fraction @return the result of x * (numerator / denominator)
1251 Computes b raised to the power of k with overflow checks. @param b base value @param k exponent value (non-negative) @return result of b^k or throws ArithmeticException if overflow occurs
1252 Calculates population covariance of paired variables. @return Population covariance value
1253 Calculates sample covariance of paired data. @return Sample covariance value
1254 Calculates Pearson's correlation coefficient for paired data. @return Correlation coefficient or NaN if calculation is not possible
1255 Computes the mean of a sequence of numbers. @param values iterator over numeric data points @return calculated mean as a double
1256 Adds a new data point to the statistics. @param value the new data point to be added
1257 Calculates population covariance. Validates non-zero data points, then computes covariance. @return Population covariance value
1258 Calculates the sample covariance of accumulated data. @return Sample covariance value or throws IllegalStateException if count <= 1
1259 Calculates Pearson's correlation coefficient for paired data. @return Correlation coefficient or NaN if calculation is not possible
1260 Partitions an array around a pivot. @param array the array to partition @param from starting index of the slice @param to ending index of the slice @return index of the pivot after partitioning
1261 Deserializes a PairedStats object from a byte array. @param byteArray serialized data of the PairedStats object @return PairedStats instance reconstructed from the byte array
1262 Deserializes a Stats object from a byte array. @param byteArray serialized stats data @return deserialized Stats object @throws NullPointerException if byteArray is null @throws IllegalArgumentException if byteArray length doesn't match expected size
1263 Creates a snapshot of current paired statistics. @return PairedStats object representing the current state
1264 Returns snapshot of X statistics. @return Stats object containing current state of X statistics
1265 Returns a snapshot of Y statistics. @return Stats object representing current Y statistics
1266 Collects numbers into a Stats object. @return Collector for aggregating numbers into statistical metrics
1267 Converts InetAddress to URI string format. @param ip the IP address to convert @return formatted URI string for the given IP
1268 Converts an IPv4-compatible IPv6 address to its corresponding Inet4Address. @param ip the Inet6Address to convert @return Inet4Address object or throws IllegalArgumentException if not compatible
1269 Extracts IPv4 from 6to4 IPv6 address. @param ip the Inet6Address to process @return Inet4Address object or throws IllegalArgumentException if not a valid 6to4 address
1270 Retrieves the IPv4 address embedded in an ISATAP IPv6 address. @param ip the Inet6Address to check and extract from @return Inet4Address object or throws IllegalArgumentException if not ISATAP
1271 Computes scaled result from dataset. Converts collection to array and processes it. @param dataset numerical data collection @return computed scaled value
1272 Computes quantiles from a dataset. @param dataset collection of numerical data @return map of calculated quantile values
1273 Adds a double value to the builder. Ensures sufficient space and updates the count. @param value the double value to add @return this Builder instance for method chaining
1274 Adds multiple double values to the builder. @param values array of double values to be added @return this Builder instance for method chaining
1275 Adds all double values from a collection to the builder. @param values collection of Double elements to add @return this Builder instance for method chaining
1276 Adds all elements from another ImmutableDoubleArray. @param values source array to add from @return current Builder instance for chaining
1277 Creates an ImmutableDoubleArray with a single element. @param e0 the first and only element of the array @return ImmutableDoubleArray containing the specified element
1278 Creates an ImmutableDoubleArray from two doubles. @param e0 first double element @param e1 second double element @return ImmutableDoubleArray containing the two elements
1279 Creates an ImmutableDoubleArray from three double values. @param e0 first element @param e1 second element @param e2 third element @return ImmutableDoubleArray containing the specified elements
1280 Creates an ImmutableDoubleArray with four elements. @param e0 first element value @param e1 second element value @param e2 third element value @param e3 fourth element value @return ImmutableDoubleArray containing the specified elements
1281 Creates an ImmutableDoubleArray from five double values. @param e0 to e4 elements of the array @return ImmutableDoubleArray containing the specified elements
1282 Creates an ImmutableDoubleArray from six double values. @param e0 to e5 the six double elements of the array @return new ImmutableDoubleArray instance containing the specified elements
1283 Creates an immutable copy of a double array. @param values source double array to copy @return ImmutableDoubleArray instance or EMPTY if input is empty
1284 Creates an ImmutableDoubleArray from a collection of Double values. @param values the source collection of Double numbers @return an ImmutableDoubleArray instance containing the double values
1285 Creates an ImmutableDoubleArray from a DoubleStream. @param stream source double stream @return ImmutableDoubleArray containing elements from the stream
1286 Returns a trimmed version of the array. @return A new ImmutableDoubleArray with only the relevant elements, or the current instance if not partial.
1287 Checks if the array contains a specific double value. @param target the double value to search for @return true if the target is found, false otherwise
1288 Adds an integer to the builder. Ensures capacity and appends the value. @param value integer to add @return the Builder instance for chaining
1289 Adds all integers from an array to the builder. Ensures capacity and copies elements efficiently. @param values array of integers to add @return this Builder instance for method chaining
1290 Adds all integers from a collection to the builder. @param values collection of integers to add @return this Builder instance for method chaining
1291 Adds all integers from the given ImmutableIntArray. Ensures capacity and copies elements into the internal array. @param values ImmutableIntArray to add @return This Builder instance for method chaining
1292 Creates an immutable array with a single element. @param e0 the only element in the array @return ImmutableIntArray containing the specified element
1293 Creates an immutable array from two integers. @param e0 first integer element @param e1 second integer element @return ImmutableIntArray containing the provided elements
1294 Creates an immutable array from three integers. @param e0 first integer element @param e1 second integer element @param e2 third integer element @return ImmutableIntArray containing the specified elements
1295 Creates an immutable array with four elements. @param e0 first element of the array @param e1 second element of the array @param e2 third element of the array @param e3 fourth element of the array @return ImmutableIntArray containing the specified elements
1296 Creates an immutable array from five integer elements. @param e0 to e4 the five integers to be included in the array @return ImmutableIntArray containing the specified elements
1297 Creates an immutable array from six integer elements. @param e0 to e5 the six integers to be included in the array @return ImmutableIntArray containing the specified elements
1298 Creates an immutable array from the given integer array. @param values input integer array @return ImmutableIntArray instance containing a copy of the input array or EMPTY if empty
1299 Creates an immutable integer array from a given IntStream. @param stream source of integers to be encapsulated @return ImmutableIntArray containing elements from the stream or an empty array if no elements
1300 Returns a trimmed view of the array. @return A new ImmutableIntArray with no leading or trailing zeros, or the original if not applicable
1301 Adds a single long value to the builder. Ensures sufficient capacity and updates the count. @param value long integer to add @return this Builder instance for method chaining
1302 Adds all elements from a long array to the builder. @param values array of long values to add @return this Builder instance for method chaining
1303 Adds all long values from a collection to the builder. @param values collection of Long objects to add @return this Builder instance for method chaining
1304 Adds all elements from another ImmutableLongArray. @param values source ImmutableLongArray to add @return the Builder instance for chaining
1305 Creates an ImmutableLongArray with a single element. @param e0 the only element in the array @return an ImmutableLongArray containing the specified element
1306 Creates an ImmutableLongArray with two elements. @param e0 the first element @param e1 the second element @return an ImmutableLongArray containing e0 and e1
1307 Creates an ImmutableLongArray from three long values. @param e0 first long element @param e1 second long element @param e2 third long element @return ImmutableLongArray containing the provided elements
1308 Creates an ImmutableLongArray from four long elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @return ImmutableLongArray containing the specified elements
1309 Creates an ImmutableLongArray from five long elements. @param e0 to e4 the elements of the array @return an ImmutableLongArray containing the specified elements
1310 Creates an ImmutableLongArray from six long elements. @param e0 to e5 the six long elements to initialize the array @return an ImmutableLongArray containing the specified elements
1311 Creates an immutable copy of a long array. @param values the source long array to copy @return an ImmutableLongArray instance containing the copied values
1312 Creates an ImmutableLongArray from a LongStream. @param stream source of long values @return ImmutableLongArray containing the stream's elements
1313 Returns a trimmed version of the array. If it's a partial view, creates a new array; otherwise, returns the current instance. @return ImmutableLongArray representing the trimmed array
1314 Converts collection of indexes to array and returns with scale. @param indexes collection of integer indexes @return ScaleAndIndexes object containing scale and index array
1315 Creates an immutable array from a collection of integers. @param values collection of Integer objects to convert @return ImmutableIntArray instance or EMPTY if the collection is empty
1316 Creates an ImmutableLongArray from a collection of Longs. @param values the input collection of Long objects @return an ImmutableLongArray instance containing the values, or an empty array if the collection is empty
1317 Parses a string to an integer value with specified radix. @param string the string to parse @param radix the base of the number @return parsed Integer or null if parsing fails or exceeds int range
1318 Parses a string to a long value using base 10. @param string the string to parse @return parsed Long or null if parsing fails
1319 Decodes a string to an unsigned integer. @param stringValue the input numerical string @return the parsed unsigned integer @throws NumberFormatException if parsing fails
1320 Creates an UnsignedInteger from a long value. @param value long value to be converted @return UnsignedInteger object representing the unsigned value
1321 Converts a BigInteger to an UnsignedInteger. @param value BigInteger to convert @return UnsignedInteger representation of the input @throws NullPointerException if value is null @throws IllegalArgumentException if value is negative or too large for unsigned int
1322 Parses a string as an unsigned integer and converts it to UnsignedInteger. @param string the string to parse @param radix the base of the number @return UnsignedInteger object representing the parsed value
1323 Adds another unsigned integer to this one. @param val the UnsignedInteger to add @return new UnsignedInteger representing the sum
1324 Subtracts another unsigned integer from this one. @param val the UnsignedInteger to subtract @return result of subtraction as a new UnsignedInteger
1325 Multiplies this unsigned integer by another. @param val the other UnsignedInteger to multiply @return the product as a new UnsignedInteger
1326 Divides this unsigned integer by another. @param val the divisor as an UnsignedInteger @return result of unsigned division
1327 Computes the unsigned remainder of division with another unsigned integer. @param val divisor as UnsignedInteger @return UnsignedInteger representing the remainder
1328 Returns the string representation of this unsigned integer in base 10. @return decimal string representation of the unsigned integer
1329 Compares this unsigned integer with another. @param other the UnsignedInteger to compare with @return negative if less, zero if equal, positive if greater
1330 Creates an UnsignedLong instance from a long value. Validates that the value is non-negative. @param value the long value to convert @return UnsignedLong object representing the unsigned value
1331 Converts a BigInteger to an UnsignedLong. @param value the BigInteger to convert, must be non-negative and within Long.SIZE bits @return UnsignedLong representation of the given BigInteger @throws NullPointerException if value is null @throws IllegalArgumentException if value is negative or exceeds Long.SIZE bits
1332 Adds two unsigned long values. @param val UnsignedLong to add @return sum as UnsignedLong
1333 Subtracts another UnsignedLong from this instance. @param val the UnsignedLong to subtract @return new UnsignedLong representing the result of subtraction
1334 Multiplies this unsigned long by another. @param val the UnsignedLong to multiply with @return new UnsignedLong representing the product
1335 Divides two unsigned long values. @param dividend first unsigned long value @param divisor second unsigned long value @return result of unsigned division or throws ArithmeticException if divisor is zero
1336 Computes the remainder of unsigned division. @param dividend the number to be divided @param divisor the number by which to divide @return the remainder as an unsigned value
1337 Parses a string to an unsigned long and creates an UnsignedLong instance. @param string the string to parse @param radix the base of the number system @return UnsignedLong object representing the parsed value
1338 Parses a string to an unsigned long using base 10. @param string the string to parse @return parsed unsigned long value
1339 Decodes a string to an unsigned long. @param stringValue the input numerical string @return parsed unsigned long value @throws NumberFormatException if parsing fails
1340 Determines if the member has package-private access. @return true if the member is package-private, false otherwise
1341 Wraps the current type in its corresponding wrapper class if it's a primitive. @return TypeToken representing the wrapped type or the original type if not primitive
1342 Unwraps the current TypeToken if it represents a wrapper class. @return unwrapped TypeToken or original if not a wrapper
1343 Retrieves the component type token. @return TypeToken representing the component type or null if not applicable
1344 Retrieves the result of the computation represented by this future. @return the computed result @throws InterruptedException if the current thread is interrupted while waiting @throws ExecutionException if the computation threw an exception
1345 Submits a callable task to an executor service and adds a listener to queue the future. @param executorService service to execute the task @param task callable to be executed @param queue blocking queue to store the future @return ListenableFuture representing the pending result of the task
1346 Waits for the service to reach a running state within a specified timeout. Delegates to the superclass implementation. @param timeout maximum time to wait before throwing a TimeoutException @throws TimeoutException if the service does not start within the timeout period
1347 Waits for the service to reach a running state within a specified timeout. @param timeout maximum time to wait before throwing a TimeoutException @throws TimeoutException if the service does not start within the timeout period
1348 Waits for the scheduled service to start running within a specified timeout. @param timeout maximum time to wait before throwing a TimeoutException @throws TimeoutException if the service does not start within the timeout period
1349 Waits for the service to reach a running state within a specified timeout. @param timeout maximum time to wait before throwing a TimeoutException @throws TimeoutException if the service does not start within the timeout period
1350 Awaits service termination with a specified timeout. @param timeout maximum time to wait for termination @throws TimeoutException if the service does not terminate within the timeout
1351 Waits for service termination with a specified timeout. @param timeout maximum time to wait for termination @throws TimeoutException if the service does not terminate within the timeout
1352 Awaits service termination with a specified timeout. Delegates to the superclass implementation. @param timeout maximum time to wait for termination @throws TimeoutException if the service does not terminate within the timeout
1353 Waits for service termination with a specified timeout. @param timeout maximum time to wait for termination @throws TimeoutException if the service does not terminate within the timeout
1354 Collects result from a non-cancelled future. Handles exceptions by logging and managing causal chains. @param index position of the future in the collection @param future task to collect result from
1355 Atomically adds a specified value to the current value. @param delta the value to add @return the old value before addition
1356 Atomically adds a specified value to the current double. @param delta the value to add @return the updated double value after addition
1357 Atomically adds a value to an element in the array. @param i index of the element to update @param delta value to add @return original value before addition
1358 Atomically adds a value to an element in the array. @param i index of the element to update @param delta value to add @return updated double value after addition
1359 Cancels the task and closes associated resources. @param mayInterruptIfRunning true to interrupt the running task @return true if the task was successfully cancelled
1360 Finds a path to the specified lock node in the graph. @param node target lock node to find a path to @param seen set of nodes already traversed to prevent cycles @return ExampleStackTrace representing the path or null if not found
1361 Creates a ListenableFutureTask with a Callable. @param callable the task to execute @return a new ListenableFutureTask instance
1362 Creates a ListenableFutureTask with a Runnable and initial result. @param runnable task to be executed asynchronously @param result initial result of the task @return ListenableFutureTask instance
1363 Notifies and executes all tasks upon completion. Calls execute() to run tasks in reverse order of addition.
1364 Creates an instance of ExecutionSequencer. @return new ExecutionSequencer object
1365 Converts a ListenableFuture to a FluentFuture. @param future the ListenableFuture to convert @return a FluentFuture wrapping the given future
1366 Wraps a future to prevent cancellation propagation. @param future the original ListenableFuture @return a new NonCancellationPropagatingFuture that does not propagate cancellation
1367 Reloads a value for a given key asynchronously. @param key the key to reload @param oldValue the current value associated with the key @return ListenableFuture containing the newly loaded value @throws Exception if an error occurs during loading
1368 Enqueues an event for all registered listeners. @param event the event to be enqueued
1369 Enqueues an event with a label for processing. @param event the event to be enqueued @param label associated with the event
1370 Dispatches events to listeners if current thread holds the monitor lock.
1371 Dispatches listener events. Ensures monitor is not held by current thread before dispatching.
1372 Signals the next waiter whose condition is satisfied. Iterates through active guards and signals the first one that meets its condition.
1373 Submits an asynchronous callable to the specified executor. @param callable the task to be executed asynchronously @param executor the executor to run the task @return ListenableFuture representing the pending result of the callable
1374 Schedules an asynchronous callable to run after a delay. @param callable the task to be executed asynchronously @param delay time to wait before executing the task @param timeUnit unit of time for the delay @param executorService service used to schedule the task @return ListenableFuture representing the scheduled task
1375 Creates a new task for the given Callable. @param callable the task to be executed asynchronously @return a new TrustedListenableFutureTask instance
1376 Submits a callable task for asynchronous execution. @param callable the task to be executed @param executor the executor to use for running the task @return ListenableFuture representing the pending result of the task
1377 Creates a new task for executing a runnable with a specified result. @param runnable the task to be executed asynchronously @param value the result of the task @return a new TrustedListenableFutureTask instance
1378 Submits a Runnable task for asynchronous execution. @param runnable the task to be executed asynchronously @param executor the executor to run the task @return ListenableFuture representing the pending completion of the task
1379 Attempts to acquire a semaphore permit uninterruptibly with a specified timeout. @param semaphore the semaphore to acquire from @param timeout duration to wait for acquisition @return true if acquired, false if timed out
1380 Retrieves the first element of the iterable. @return Optional containing the first element or absent if empty
1381 Returns the last element of the iterable as an Optional. @return Optional containing the last element or absent if empty
1382 Searches for an element in the given iterator that matches the predicate. @param iterator the iterator to search through @param predicate the condition to match elements against @return Optional containing the first matching element or absent if none found
1383 Sets the expected node count for the graph. Validates that the provided count is non-negative. @param expectedNodeCount number of nodes expected in the graph @return GraphBuilder instance with updated configuration
1384 Sets the expected node count for the network. @param expectedNodeCount non-negative integer representing the expected node count @return NetworkBuilder instance with updated expected node count
1385 Sets the expected edge count for the network. @param expectedEdgeCount non-negative integer representing expected edges @return NetworkBuilder instance with updated settings
1386 Sets the expected node count for the graph. Validates that the count is non-negative. @param expectedNodeCount estimated number of nodes @return this builder instance
1387 Checks if any element in the iterable matches the given predicate. @param iterable source iterable to check @param predicate condition to evaluate each element against @return true if at least one element matches the predicate, false otherwise
1388 Creates a predicate to check if strings contain a specific regex pattern. @param pattern the regex pattern to match against @return Predicate that evaluates to true if input CharSequence matches the pattern
1389 Propagates the given throwable if it's an instance of the specified type or an unchecked exception. @param throwable the throwable to check and possibly rethrow @param declaredType the type to check against @throws X if throwable is an instance of declaredType
1390 Retrieves a flattened set of classes in the hierarchy of a given class. Uses caching to optimize repeated calls for the same class. @param concreteClass the starting class in the hierarchy @return an ImmutableSet containing all classes in the hierarchy
1391 Provides a platform-specific thread factory. Returns the default thread factory unless running in Google App Engine, then uses App Engine's thread manager. @return ThreadFactory instance suitable for the current environment
1392 Checks if the iterable contains the specified target element. @param target the element to search for, can be null @return true if target is found, false otherwise
1393 Filters a filtered multimap with an additional entry predicate. @param multimap the original filtered multimap to filter further @param entryPredicate the additional condition for entries @return a new FilteredEntrySetMultimap with combined predicates
1394 Filters keys in a ListMultimap based on a given predicate. @param unfiltered the original ListMultimap to filter @param keyPredicate the predicate for filtering keys @return a new FilteredKeyListMultimap with filtered keys
1395 Filters elements of this iterable by the specified class type. @param type the class type to retain @return a new FluentIterable containing only elements of the specified type
1396 Removes all elements in the specified collection from this set. @param collection collection of elements to remove @return true if any elements were removed, false otherwise
1397 Creates an EnumMultiset from an iterable of enum elements. @param elements iterable containing enum elements to be added @return EnumMultiset with counts of each enum element
1398 Creates a new LinkedList from an iterable of elements. @param elements source of elements to add to the list @return a new LinkedList containing the specified elements
1399 Creates a new ArrayDeque initialized with elements from the given iterable. @param elements source of elements to add to the deque @return ArrayDeque containing specified elements
1400 Creates a new ConcurrentLinkedQueue initialized with elements from the given iterable. @param elements source of elements to initialize the queue with @return a new ConcurrentLinkedQueue containing the specified elements
1401 Creates a new LinkedBlockingDeque initialized with elements from the given iterable. @param elements source of elements to initialize the deque @return LinkedBlockingDeque containing the specified elements
1402 Creates a new LinkedBlockingQueue initialized with elements from an iterable. @param elements source of initial elements for the queue @return LinkedBlockingQueue containing the specified elements
1403 Creates a new PriorityBlockingQueue initialized with the specified elements. @param elements iterable source of elements to add to the queue @return PriorityBlockingQueue containing the provided elements
1404 Creates a priority queue from an iterable of comparable elements. @param elements source of elements to add to the queue @return PriorityQueue containing all elements
1405 Creates an EnumSet from an iterable of enum elements. @param iterable source of enum elements @param elementType class type of the enum elements @return EnumSet containing elements from iterable
1406 Creates a concurrent hash set from an iterable. @param elements source of elements to add @return ConcurrentHashSet containing the specified elements
1407 Creates a new LinkedHashSet from an iterable. @param elements source of elements to add @return LinkedHashSet containing the specified elements
1408 Creates a TreeSet from an iterable of comparable elements. @param elements source of elements to add to the TreeSet @return a new TreeSet containing all elements from the iterable
1409 Casts or copies an iterable to a collection. @param iterable source iterable @return Collection instance, either casted or copied
1410 Creates a new ArrayList from an Iterable. @param elements source of elements to add to the list @return populated ArrayList instance
1411 Creates a HashSet from an iterable. @param elements iterable providing the elements for the set @return a new HashSet containing the elements from the iterable
1412 Checks if all elements in the iterable satisfy the given predicate. @param predicate condition to apply to each element @return true if all elements match the predicate, false otherwise
1413 Creates a list iterator starting from the specified index. @param start the starting index of iteration @return ListIterator for this list at the given start index
1414 Converts a sorted set into a sorted map using a mapping function. @param set the underlying sorted set of keys @param function maps keys to values @return SortedMap view of the set with transformed values
1415 Transforms entries of a sorted map. @param fromMap source sorted map to transform @param transformer function to apply to each entry @return new SortedMap with transformed values
1416 Transforms values of a map using a provided function. @param fromMap the source map to transform @param function the transformation function for values @return a new map with transformed values
1417 Adds a specified number of occurrences of an element to the multiset. @param element the element to add @param occurrences the number of times to add the element @return the count of the element before adding
1418 Adds occurrences of an element to the multiset. @param element the element to add @param occurrences number of times to add the element @return previous count of the element or 0 if not present
1419 Transforms entries of a ListMultimap using a specified transformer. @param fromMap original multimap to transform @param transformer function to apply to each entry @return new ListMultimap with transformed values
1420 Transforms values of a multimap using a specified function. @param fromMultimap original multimap to transform @param function transformation function for values @return new Multimap with transformed values
1421 Adds all elements from an iterable to the builder. Handles Multiset specifically by iterating entries. @param elements collection of elements to add @return current Builder instance for chaining
1422 Adds all elements from a collection to a multiset. @param self the target multiset @param elements the source collection with elements to add @return true if any element was added, false otherwise
1423 Checks if the range contains a specific value. @param input the value to check @return true if input is within the range, false otherwise
1424 Collects elements into a table using specified functions. @param rowFunction extracts the row key from an element @param columnFunction extracts the column key from an element @param valueFunction extracts the value from an element @param tableSupplier provides a new instance of the table @return Collector that gathers elements into a table
1425 Escapes a string by converting special characters to Unicode sequences. @param s the input string to escape @param index starting index for processing @return escaped string with Unicode sequences
1426 Constructs a StandardNetwork from a builder and connection maps. @param builder configuration for network properties @param nodeConnections map of nodes to their connections @param edgeToReferenceNode map of edges to reference nodes
1427 Constructs a StandardValueGraph with specified builder settings and node connections. @param builder configuration for graph properties @param nodeConnections map of nodes to their connections @param edgeCount total number of edges in the graph
1428 Copies characters from a Readable source to an Appendable destination. @param from the source Readable @param to the destination Appendable @return number of characters copied @throws IOException if an I/O error occurs
1429 Decodes a character sequence into a byte array. @param chars input character sequence to decode @return decoded byte array @throws IllegalArgumentException if decoding fails
1430 Computes the smallest power of two greater than or equal to a given BigInteger. @param x the BigInteger to find the ceiling power of two for @return the smallest power of two as a BigInteger
1431 Finds the largest power of two less than or equal to a given BigInteger. @param x the input BigInteger @return the largest power of two <= x
1432 Creates an Invokable instance from a Constructor. @param constructor the Constructor to encapsulate @return Invokable object representing the constructor
1433 Creates an Invokable instance for a given method. @param method the Method to encapsulate and make invokable @return Invokable object wrapping the provided method
1434 Completes an AbstractFuture by notifying listeners and handling task completion. @param param the future to complete @param callInterruptTask whether to interrupt the task
1435 Atomically adds a specified value to the current value associated with a key. @param key the key to update @param delta the value to add @return updated value after addition
1436 Atomically adds a specified value to the current value associated with a key. @param key the key whose associated value is to be incremented @param delta the value to add @return the old value before addition
1437 Adds all entries from the specified map to this AtomicLongMap. @param m the map whose entries are to be added
1438 Initializes the graph builder with directionality. @param directed true if the graph is directed, false otherwise
1439 Adds a listener with an associated executor to the queue. @param listener the listener to add @param executor the executor for processing events
1440 Converts an object from type A to B. @param a nullable object of type A @return converted object of type B or null if handleNullAutomatically is true and input is null
1441 Constructs a new CompactHashMap with default size.
1442 Constructs a CompactHashMap with an initial capacity. @param expectedSize estimated number of entries to store
1443 Constructs a new CompactHashSet with default size.
1444 Constructs a CompactHashSet with an initial capacity. @param expectedSize estimated number of elements to store
1445 Retrieves the simple name of the class. Handles inner, local, and anonymous classes. @return simple name of the class
1446 Constructs an AbstractSortedSetMultimap with a specified backing map. @param map initial map to use; must be empty
1447 Creates a new CustomMultimap from a given map and collection factory. @param map the initial map to use; must be empty @param factory supplier for creating collections of values @return a new CustomMultimap instance
1448 Creates an empty HashMultiset. @return A new instance of HashMultiset with default HashMap backing
1449 Creates an empty `LinkedHashMultiset`. Initializes with a linked hash map to maintain insertion order.
1450 Creates an EnumMultiset from an iterable of enum elements. @param elements iterable containing enum constants to add @param type enum class to manage @return EnumMultiset instance with added elements
1451 Computes population standard deviation of the dataset. @return The population standard deviation as a double
1452 Calculates sample standard deviation of the dataset. @return sample standard deviation as a double, or NaN if not computable
1453 Calculates the population standard deviation of the dataset. @return population standard deviation or NaN if variance is NaN
1454 Calculates sample standard deviation of the dataset. @return sample standard deviation or NaN if insufficient data
1455 Matches characters not in the given sequence. @param sequence characters to exclude from matching @return CharMatcher instance excluding specified characters
1456 Creates a converter to the specified case format. @param targetFormat the desired case format for conversion @return Converter object for transforming strings
1457 Composes this converter with another to form a chain. @param secondConverter converter from type B to C @return composed Converter from A to C
1458 Returns the reverse converter. @return a Converter that performs the inverse transformation
1459 Creates a string converter for the specified enum class. @param enumClass the enum class to convert between strings and enums @return Converter object for string-to-enum conversion
1460 Converts a BiMap to a Converter. @param bimap the bidirectional map to convert @return a Converter instance based on the given BiMap
1461 Compares this list to another object for equality. @param object the object to compare with @return true if the lists are equal; false otherwise
1462 Creates a new ConcurrentHashMultiset from an iterable of elements. @param elements source of elements to add to the multiset @return initialized ConcurrentHashMultiset with added elements
1463 Appends elements from an array to a given Appendable. @param appendable the destination for appending @param parts array of objects to join @return the original Appendable with appended elements @throws IOException if an I/O error occurs
1464 Appends elements from an iterable to a StringBuilder. @param builder destination for appending @param parts iterable of objects to join @return the original StringBuilder with appended elements
1465 Joins elements from an iterator into a single string. @param parts iterator of objects to join @return concatenated string of elements
1466 Joins key-value pairs from a map into a string. @param map input map with entries to be joined @return string representation of the map's entries
1467 Generates string representation of cache specifications. Uses ToStringHelper to format and include parsable string. @return formatted string of cache settings
1468 Generates a string representation of the MapMaker configuration. Includes non-default settings like initial capacity, concurrency level, key and value strengths, and key equivalence. Converts strength names to lowercase for consistency. @return formatted string representation of the MapMaker instance
1469 Generates a string representation of the CacheBuilder configuration. Includes set parameters like initial capacity, concurrency level, and expiration times. Converts strength values to lowercase for consistency. @return formatted string with cache configuration details
1470 Initializes a MapMakerInternalMap with specified builder and entry helper. Configures concurrency level, key equivalence, initial capacity, and segments.
1471 Converts a Java Util Optional to an Optional. @param javaUtilOptional the Java Util Optional to convert @return Optional containing the value if present, otherwise null
1472 Constructs HostAndPort from host and port. @param host network host (IPv4 or IPv6) @param port associated port number @return HostAndPort object with specified host and port
1473 Parses and validates a host without a port. @param host input host string @return HostAndPort object with no port
1474 Retrieves an element from an iterable at a specified position. @param iterable the iterable to access @param position the index of the element to retrieve @return the element at the given position @throws IndexOutOfBoundsException if position is out of bounds
1475 Creates a copy of the current BloomFilter. @return a new BloomFilter instance with the same parameters and data
1476 Acquires a specified number of permits with rate limiting. @param permits number of permits to acquire @return wait time in seconds
1477 Attempts to acquire a single permit with a specified timeout. @param timeout maximum wait time for acquiring the permit @return true if the permit is acquired, false otherwise
1478 Attempts to acquire a single permit within a specified timeout. @param timeout maximum wait time for acquiring the permit @param unit time unit for the timeout @return true if the permit is acquired, false otherwise
1479 Attempts to acquire specified number of permits without waiting. @param permits number of permits to request @return true if permits are acquired immediately, false otherwise
1480 Attempts to acquire a single permit immediately. @return true if permit is acquired, false otherwise
1481 Attempts to acquire specified number of permits within a given timeout. @param permits number of permits to request @param timeout maximum wait time for acquiring permits as Duration @return true if permits are acquired, false otherwise
1482 Attempts to acquire a lock with a specified timeout. @param time the maximum time to wait for the lock @param unit the time unit of the timeout @return true if the lock was acquired, false otherwise
1483 Protected constructor for AbstractService class.
1484 Checks if the priority queue is intact. @return true if all elements are in valid heaps, false otherwise
1485 Converts cache specifications to a CacheBuilder instance. @return Configured CacheBuilder object
1486 Configures a map to use weak keys. @param mapMaker instance of MapMaker to configure @return the configured MapMaker instance with weak key strength
1487 Checks if the current service state matches the expected state. Throws an exception with detailed failure information if states do not match. @param expected the expected state of the service
1488 Retrieves value at specified row and column indices. @param rowIndex index of the row @param columnIndex index of the column @return value at the given indices or null if out of bounds
1489 Sets the value at specified row and column indices. @param rowIndex index of the row @param columnIndex index of the column @param value new value to set @return old value at the specified position or null if not present
1490 Retrieves the element at the specified index. @param index position of the element to retrieve @return double value at the given index
1491 Retrieves an element at the specified index. @param index the index of the element to retrieve @return the integer at the given index
1492 Retrieves the element at the specified index. @param index position of the element to retrieve @return the long value at the given index
1493 Finds the index of the first matching character in a sequence. @param sequence the CharSequence to search within @param start the starting index for the search @return the index of the first match or -1 if no match is found
1494 Initializes an iterator with a specified size and position. Validates the position within the bounds of the size. @param size total number of elements in the collection @param position initial index for iteration
1495 Creates a ByteArrayDataInput from a byte array starting at a given index. @param bytes the source byte array @param start the starting index in the byte array @return ByteArrayDataInput object
1496 Checks if a byte array is well-formed UTF-8. @param bytes the byte array to check @param off starting offset in the array @param len length of the byte sequence to validate @return true if the byte array is valid UTF-8, false otherwise
1497 Copies elements from source array to destination array. @param src source array containing elements to copy @param offset starting position in the source array @param len number of elements to copy @param dst destination array where elements will be copied @return destination array with copied elements
1498 Copies a subarray of objects into a new array. @param elements source array containing the objects @param offset starting index in the source array @param length number of elements to copy @return new Object array containing the copied elements or an empty array if length is 0
1499 Writes bytes to a destination array. @param dest the destination byte array @param offset the starting index in the destination array @param maxLength the maximum number of bytes to write @return the number of bytes written
1500 Encodes a byte array segment into a string. @param bytes the source byte array @param off the starting offset in the byte array @param len the number of bytes to encode @return the encoded string representation
1501 Reads bytes from an InputStream into a byte array. @param in the input stream to read from @param b the destination byte array @param off the offset in the byte array to start writing @param len the maximum number of bytes to read @return the total number of bytes read, or -1 if no bytes were read and end of stream was reached @throws IOException if an I/O error occurs
1502 Reverses a segment of a boolean array. @param array the boolean array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1503 Reverses a portion of the given byte array. @param array the byte array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1504 Reverses a portion of the character array. @param array the character array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1505 Reverses elements in a double array between specified indices. @param array the array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1506 Reverses elements in a float array between specified indices. @param array the array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1507 Returns a subarray from the current array. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive) @return ImmutableDoubleArray representing the subarray
1508 Returns a subarray from the specified range. @param startIndex inclusive starting index of the subarray @param endIndex exclusive ending index of the subarray @return ImmutableIntArray representing the subarray or EMPTY if startIndex == endIndex
1509 Returns a subarray from startIndex (inclusive) to endIndex (exclusive). @param startIndex the starting index of the subarray @param endIndex the ending index of the subarray (exclusive) @return a new ImmutableLongArray representing the subarray
1510 Reverses elements in an integer array between specified indices. @param array the array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1511 Reverses elements in a specified range of a long array. @param array the array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1512 Reverses elements in a short array between specified indexes. @param array the array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1513 Sorts a portion of a byte array as unsigned integers. @param array the byte array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1514 Sorts a portion of a byte array in descending order using unsigned interpretation. @param array the byte array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1515 Sorts a portion of an integer array in ascending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1516 Sorts a portion of an integer array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1517 Sorts a portion of an unsigned long array. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1518 Sorts a subarray of unsigned long values in descending order. @param array the array to be sorted @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1519 Filters elements of a collection based on a predicate. @param unfiltered original collection to filter @param predicate condition for elements to be included @return filtered collection
1520 Creates a Splitter using a specific character as a delimiter. @param separator character to split on @return a new Splitter instance configured with the given separator
1521 Protected constructor for SleepingStopwatch.
1522 Initializes a Finalizer instance. @param finalizableReferenceClass class for finalizable references @param queue reference queue for processing @param frqReference phantom reference that started the finalization process
1523 Constructs a new Builder instance.
1524 Returns a new Builder instance for creating ImmutableMultimap. @return Builder object to build ImmutableMultimap instances
1525 Constructs a new Builder instance.
1526 Protected constructor to prevent instantiation.
1527 Protected constructor to prevent instantiation.
1528 Protected constructor to prevent instantiation.
1529 Protected constructor to prevent instantiation.
1530 Protected constructor to prevent instantiation.
1531 Creates an unmodifiable view of the specified bidirectional map. @param bimap the original bidirectional map to wrap @return a read-only BiMap instance
1532 Creates a new MutableClassToInstanceMap with an empty backing map. @return MutableClassToInstanceMap instance initialized with a HashMap
1533 Creates a MutableClassToInstanceMap with a specified backing map. Ensures the backing map is not null. @param backingMap storage for class-instance mappings @return new MutableClassToInstanceMap instance
1534 Creates an empty ImmutableTypeToInstanceMap. @param <B> the base type for the map's values @return An empty ImmutableTypeToInstanceMap instance
1535 Default constructor for ForwardingSortedSetMultimap. Initializes with a null delegate; intended to be subclassed.
1536 Returns an unmodifiable view of the specified multimap. @param delegate the underlying multimap to wrap @return unmodifiable Multimap instance
1537 Creates an immutable view of the specified table. @param table original table to wrap @return UnmodifiableTable object
1538 Adapts a standard Future to a ListenableFuture using a specified Executor. @param future the original Future instance to adapt @param executor the Executor for running listeners @return a ListenableFuture representing the same computation as the input Future
1539 Retrieves value from cache if present. @param key unique identifier of the cached item @return value associated with the key or null if not found
1540 Retrieves or computes a cache entry. @param key key whose associated value is to be returned @param valueLoader function for computing the value if not present @return the cached value @throws ExecutionException if an error occurs during computation
1541 Retrieves all present cache entries for given keys. @param keys iterable of keys to check presence in the cache @return an immutable map of present keys and their corresponding values
1542 Stores a value in the cache with the specified key. Delegates the operation to the underlying cache instance. @param key unique identifier for the cached value @param value data to be stored in the cache
1543 Stores multiple entries in the cache. Delegates the operation to the underlying cache instance. @param m map of key-value pairs to be stored
1544 Invalidates multiple cache entries by key. @param keys iterable collection of keys to invalidate
1545 Creates a new reference entry. @param segment the cache segment @param key the entry key @param hash the key's hash code @param next reference to the next entry @return the newly created ReferenceEntry object
1546 Creates a new reference entry for the cache. @param segment the cache segment where the entry will be stored @param key the key for the new entry @param hash the hash code of the key @param next reference to the next entry in the linked structure @return the newly created ReferenceEntry object
1547 Creates a new cache entry. @param segment the cache segment where the entry is stored @param key the key for the entry @param hash the hash code of the key @param next reference to the next entry in the linked structure @return the newly created ReferenceEntry object
1548 Creates a new reference entry. @param segment cache segment managing the entry @param key entry's key @param hash key's hash code @param next reference to the next entry in the chain @return newly created ReferenceEntry object
1549 Creates a new reference entry for the cache. @param segment cache segment for the entry @param key entry's key @param hash key's hash code @param next next entry in the chain @return newly created ReferenceEntry object
1550 Creates a new reference entry for the cache. @param segment the cache segment where the entry will be placed @param key the entry's key @param hash the hash code of the key @param next reference to the next entry in the chain @return a new ReferenceEntry object
1551 Sets the value for a cache entry. @param entry the cache entry to update @param key the key associated with the entry @param value the new value to set @param now current timestamp
1552 Returns the size of the delegate iterable. @return number of elements in the delegate iterable
1553 Calculates the total number of edges in the graph. @return the count of edges
1554 Converts an InputStream to a byte array. @param in input stream to read from @return byte array containing the entire input stream content @throws IOException if reading fails
1555 Converts an InputStream to a byte array with expected size validation. @param in input stream to read from @param expectedSize expected size of the resulting byte array @return byte array containing the entire input stream content @throws IOException if reading fails or expectedSize is invalid
1556 Constructs an AbstractBiMap with specified forward and inverse maps. @param forward map from keys to values @param backward map from values to keys
1557 Removes all values associated with a specified key. @param key the key whose values are to be removed @return an unmodifiable view of the removed values or an empty collection if none exist
1558 Replaces values associated with a key. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
1559 Removes all values associated with a specified key. @param key the key whose values are to be removed @return an unmodifiable view of the removed values or an empty collection if none exist
1560 Retrieves or creates a sorted set of values for the given key. @param key unique key to retrieve values for @return SortedSet containing the values associated with the key
1561 Generates string representation of the collection. @return string representation of the underlying collection
1562 Generates a string representation of the map. @return formatted string of key-value pairs from the underlying map
1563 Creates a HashMap with an optimized initial capacity. @param expectedSize the expected number of entries in the map @return a new HashMap instance with calculated capacity
1564 Checks if the given graph contains a cycle. @param graph the graph to check for cycles @return true if the graph has at least one cycle, false otherwise
1565 Creates a HashBasedTable with the specified expected number of rows and cells per row. @param expectedRows estimated number of rows in the table @param expectedCellsPerRow estimated number of cells per row @return a new HashBasedTable instance
1566 Creates a LinkedHashMap with an initial capacity for the expected size. @param expectedSize the anticipated number of entries in the map @return a new LinkedHashMap instance
1567 Creates a map based on the specified ordering type. @param expectedSize the expected number of entries in the map @return Map instance with appropriate ordering
1568 Creates a new HashSet with an optimal initial capacity. @param expectedSize the expected number of elements in the set @return a new HashSet configured for the given size
1569 Creates a LinkedHashSet with an initial capacity optimized for the given size. @param expectedSize the expected number of elements in the set @return a LinkedHashSet with the calculated initial capacity
1570 Initializes service manager state with given services. @param services collection of initial services to manage
1571 Retrieves the first entry from the sorted multiset. @return the first Entry or null if the set is empty
1572 Retrieves the last entry in the sorted multiset. @return an immutable Entry representing the last element or null if empty
1573 Retrieves and removes the first entry from the multiset. @return the removed Entry or null if the multiset is empty
1574 Removes and returns the last entry from the sorted multiset. @return the last Entry or null if the set is empty
1575 Returns a set view of the entries in this multiset. @return a Set containing all unique elements with their counts
1576 Returns a set view of the entries in this multiset. @return a Set containing all unique elements with their counts
1577 Creates a new TreeRangeSet with ranges from the specified RangeSet. @param rangeSet the RangeSet whose ranges are to be added @return a new TreeRangeSet instance containing the ranges from rangeSet
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges collection of Range objects @return populated TreeRangeSet instance
1579 Returns an unmodifiable sorted map view of this multimap. @return NavigableMap where keys and values are sorted
1580 Returns the set of all cells in the table. Utilizes the superclass implementation to provide efficient access. @return Set of all cells
1581 Returns all values in the table. @return Collection of all values
1582 Returns a new GeneralRange with reversed bounds and comparator. @return reversed GeneralRange object
1583 Creates an immutable cell with specified row key, column key, and value. Ensures all parameters are non-null. @param rowKey the row identifier for the cell @param columnKey the column identifier for the cell @param value the data stored in the cell @return ImmutableCell object containing the provided data
1584 Returns an immutable set of unique elements from the multiset.
1585 Adds a key-value pair to the map builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
1586 Creates an immutable map with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMap containing the specified entries
1587 Creates an immutable map with three entries. @param k1 key for the first entry @param v1 value for the first entry @param k2 key for the second entry @param v2 value for the second entry @param k3 key for the third entry @param v3 value for the third entry @return ImmutableMap containing three entries
1588 Creates an immutable map with four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableMap containing specified entries
1589 Creates an ImmutableMap with five key-value pairs. @param k1,k2,k3,k4,k5 keys for the map entries @param v1,v2,v3,v4,v5 values for the map entries @return an ImmutableMap containing specified entries
1590 Creates an immutable map from six key-value pairs. @param k1,k2,k3,k4,k5,k6 keys for the map entries @param v1,v2,v3,v4,v5,v6 values corresponding to each key @return ImmutableMap containing specified entries
1591 Creates an immutable map with seven key-value pairs. @param k1 to k7 keys for the map entries @param v1 to v7 values corresponding to each key @return ImmutableMap containing specified entries
1592 Creates an immutable map with eight key-value pairs. @param k1,k2,...,k8 keys for the map entries @param v1,v2,...,v8 values corresponding to the keys @return ImmutableMap containing specified entries
1593 Creates an immutable map with nine key-value pairs. @param k1,k2,...,k9 keys for the map entries @param v1,v2,...,v9 values corresponding to each key @return ImmutableMap object containing specified entries
1594 Creates an immutable map with up to 10 key-value pairs. @param k1-k10 keys for the map entries @param v1-v10 values corresponding to each key @return ImmutableMap containing specified entries
1595 Creates an immutable map entry from a given entry. @param entry existing map entry to process @return ImmutableMapEntry instance, either reused or newly created
1596 Adds a key-value pair from an entry to the builder. @param entry the entry containing the key and value @return this Builder instance for method chaining
1597 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for method chaining
1598 Adds a key-value pair from an entry to the builder. @param entry the entry containing the key and value @return this Builder instance for method chaining
1599 Filters a sorted set based on a predicate. @param unfiltered original sorted set of elements @param predicate condition for element inclusion @return a new SortedSet containing only elements that match the predicate
1600 Trims the internal storage to optimize memory usage. Adjusts capacity based on current size and hash flooding resistance.
1601 Trims internal structures to optimal size. Ensures efficient memory usage without compromising performance.
1602 Checks if the range is empty by comparing bounds. @return true if lower and upper bounds are equal, false otherwise
1603 Checks equality with another Range based on bounds. @param object the object to compare @return true if both ranges have equal lower and upper bounds, false otherwise
1604 Adds an element to the end of the list. @param element the element to add @return always true, indicating successful addition
1605 Provides a standard iterator over the list. Delegates to the underlying list implementation.
1606 Returns a list iterator over all elements. Delegates to the underlying list's implementation starting from index 0. @return a ListIterator of the elements in this list
1607 Retrieves the first node within the range. @return AvlNode<E> or null if no such node exists
1608 Creates a new HashBasedTable initialized with the contents of another table. @param table source table to copy from @return a new HashBasedTable containing all entries from the source table
1609 Creates a TreeBasedTable with natural ordering for rows and columns. @return a TreeBasedTable instance using natural element comparison
1610 Creates a TreeBasedTable with specified row and column comparators. @param rowComparator comparator for sorting rows @param columnComparator comparator for sorting columns @return a new TreeBasedTable instance
1611 Creates a new HashBiMap with the specified initial capacity. @param expectedSize estimated number of entries to store @return a new HashBiMap instance
1612 Returns a new Builder instance with default initial capacity.
1613 Constructs a new instance of Builder with default initial capacity.
1614 Creates a Builder with natural ordering. @return Builder instance using natural key comparison
1615 Creates a new Builder with the specified comparator. @param comparator defines the order of keys in the map @return Builder instance for constructing an ImmutableSortedMap
1616 Creates a Builder with reversed natural ordering. @return Builder configured for descending key order
1617 Creates an immutable map from a single key-value pair. @param k1 the unique key for the map @param v1 the value associated with the key @return ImmutableMap containing the specified key-value pair
1618 Returns the inverse of this bi-map. @return ImmutableBiMap with keys and values swapped
1619 Returns a new Builder instance to create an ImmutableList. @return Builder object initialized with default capacity
1620 Creates a new Builder with a specified comparator. @param comparator the comparator to define element order @return Builder object configured with the given comparator
1621 Returns a Builder configured for descending order. @return Builder object with reverse comparator
1622 Returns a Builder with natural ordering for comparable elements. @return Builder instance configured to use natural element comparison
1623 Returns a reversed view of the immutable list. @return Reversed ImmutableList or self if size is <= 1
1624 Converts a string to an immutable list of characters. @param string the input string @return ImmutableList containing individual characters of the string
1625 Creates an immutable list containing one element. @param e1 the single element to include in the list @return an ImmutableList with the specified element
1626 Returns an immutable set of all key-value pairs in the multimap. @return ImmutableSet of Map.Entry objects representing key-value pairs
1627 Creates an immutable set containing one element. @param e1 the single element in the set @return an ImmutableSet with the specified element
1628 Retrieves the character set from media type parameters. @return Optional containing the Charset if defined, or absent if not
1629 Stops all managed services asynchronously. @return This ServiceManager instance for method chaining
1630 Checks if all managed services are running. @return true if all services are healthy and running, false otherwise
1631 Creates a Builder with an expected size. Ensures the expected size is non-negative. @param expectedSize initial capacity for the set @return a Builder instance
1632 Adds all entries from another Multimap to the builder. @param multimap source of entries to add @return this Builder instance for chaining
1633 Throws a FileSystemException if file deletion fails. @param path file path to check @param exceptions collection of IOExceptions from delete operations @throws FileSystemException with details and suppressed exceptions
1634 Concatenates multiple iterators into a single iterator. @param inputs variable number of iterators to concatenate @return Iterator containing all elements from input iterators in order
1635 Retrieves an entry by key. Handles null keys by returning null. Computes hash and delegates to the appropriate segment. @param key the key of the entry to retrieve @return the entry if found, otherwise null
1636 Increments read count and triggers cleanup if threshold is met. @param None @return None
1637 Checks if the map contains a specified key. Uses tailMap and comparator to determine presence. @param key the key to search for @return true if key is present, false otherwise
1638 Returns a submap of the specified key range. @param fromKey lower bound key (inclusive) @param toKey upper bound key (exclusive) @return SortedMap with keys in [fromKey, toKey)
1639 Computes the difference between two maps. @param left first map to compare @param right second map to compare @param valueEquivalence equivalence relation for values @return MapDifference object detailing differences
1640 Computes the difference between two sorted maps. @param left first sorted map to compare @param right second map to compare @return SortedMapDifference containing differences and common entries
1641 Constructs an AsyncEventBus instance. @param identifier unique event bus identifier @param executor task execution handler
1642 Constructs an AsyncEventBus with default settings. @param executor task execution handler @param subscriberExceptionHandler error handling strategy for subscribers
1643 Constructs an AsyncEventBus with default settings. @param executor task execution handler
1644 Constructs an EventBus instance with default configurations. @param identifier unique event bus identifier
1645 Constructs an EventBus with default settings. @param exceptionHandler strategy for handling subscriber exceptions
1646 Finds the minimum child of a node. @param index parent node index @return index of the minimum child or -1 if out of bounds
1647 Finds the minimum grandchild index. @param index parent node index @return index of minimum grandchild or -1 if none exists
1648 Retrieves the maximum element in the queue without removing it. @return Maximum element or null if the queue is empty
1649 Bubbles up an element to maintain heap property. @param index current position of the element @param x element to be inserted
1650 Checks if the multiset contains the specified element. @param object the element to check for @return true if the element is present, false otherwise
1651 Adds a single instance of an element to the multiset. Delegates the operation to the underlying multiset. @param element the element to be added @return always returns true
1652 Removes one occurrence of an element from the multiset. @param element the element to remove @return true if the element was removed, false otherwise
1653 Clears all elements from the multiset. Delegates to the underlying multiset's entry set iterator.
1654 Counts occurrences of an object in the multiset. @param object the object to count @return number of times the object appears in the multiset
1655 Computes hash code based on the entry set. Delegates to the underlying multiset's entry set for hashing. @return hash code of the entry set
1656 Generates a string representation of the multiset. Delegates to the underlying multiset's toString method via entrySet(). @return string representation of the multiset entries
1657 Converts this collection to an array. @param array target array to populate; may be resized @return array containing elements from the collection
1658 Retrieves and removes the last element from the set. Delegates to descendingIterator and pollNext. @return the last element or null if empty
1659 Returns a view of the portion of this set between two elements. @param fromElement lower bound (inclusive) @param toElement upper bound (exclusive) @return SortedSet representing the subset
1660 Finds the greatest element less than the specified element. @param e the reference element @return the greatest element less than e or null if no such element exists
1661 Finds the greatest element less than or equal to a given value. @param e target element for comparison @return greatest element <= e or null if no such element exists
1662 Returns a view of the portion of this set whose elements are less than toElement. @param toElement upper bound element for the returned set @return SortedSet containing elements up to but not including toElement
1663 Finds the smallest element greater than or equal to the given element. @param e target element @return smallest element >= e or null if no such element exists
1664 Finds the next element higher than the given element. @param e the reference element @return the next higher element or null if none exists
1665 Returns a view of the portion of this set whose elements are greater than or equal to `fromElement` and less than (or equal to, if inclusive) `toElement`. @param fromElement low endpoint of the returned set @param fromInclusive true if the low endpoint is to be included in the returned set @param toElement high endpoint of the returned set @param toInclusive true if the high endpoint is to be included in the returned set @return NavigableSet containing elements within the specified range
1666 Returns a view of the portion of this set whose elements are greater than or equal to `fromElement`. @param fromElement low endpoint of the returned set @return SortedSet containing elements greater than or equal to `fromElement`
1667 Returns a sorted set of row keys. Utilizes the rowMap's key set for efficient access. @return SortedSet containing all row keys
1668 Returns the sorted map of rows to columns with values. Utilizes the superclass method to initialize if not already created. @return A two-level sorted map representing the table's data
1669 Creates a synchronized deque from the given deque. @param deque underlying deque implementation @return SynchronizedDeque instance with default synchronization lock
1670 Initializes the escaper with a map of replacements and range of safe characters. @param replacementMap mapping of characters to their escaped strings @param safeMin minimum character in the safe range @param safeMax maximum character in the safe range
1671 Converts escape mappings into an Escaper instance. @return Escaper object based on current mappings
1672 Constructs an ArrayBasedUnicodeEscaper. @param replacementMap map of characters to their replacements @param safeMin minimum Unicode code point considered safe @param safeMax maximum Unicode code point considered safe @param unsafeReplacement string for unsafe characters or null
1673 Creates a HashCode instance from a byte array. @param bytes the byte array to use as hash code @return HashCode object using a copy of the provided byte array
1674 Converts a hexadecimal string to a HashCode. @param string the input hex string @return HashCode object created from the hex string
1675 Combines multiple hash codes in order. @param hashCodes iterable of HashCode objects to combine @return a single combined HashCode
1676 Combines multiple hash codes into one. @param hashCodes iterable of HashCode objects to combine @return combined HashCode object
1677 Creates an HMAC-MD5 hash function using a byte array key. @param key cryptographic key for hashing @return HashFunction instance using MD5 with the provided key
1678 Creates an HMAC-SHA1 hash function using the provided byte array key. @param key byte array representation of the cryptographic key @return HashFunction instance configured with HMAC-SHA1 algorithm
1679 Creates an HMAC-SHA256 hash function using a byte array key. @param key byte array representing the cryptographic key for hashing @return HashFunction object configured with HMAC-SHA256 algorithm
1680 Creates an HMAC-SHA512 hash function using a byte array key. @param key secret key for HMAC initialization @return MacHashFunction configured for HMAC-SHA512
1681 Wraps byte array in a ByteSource. @param b source byte array @return ByteSource instance representing the byte array
1682 Wraps a character sequence into a CharSource. @param charSequence the character sequence to wrap @return a CharSource instance based on the input type
1683 Writes multiple lines to the output stream using the system's line separator. @param lines iterable of CharSequence objects representing lines to write @throws IOException if an I/O error occurs during writing
1684 Writes multiple lines to the output stream using the default line separator. @param lines stream of CharSequence objects representing lines to write @throws IOException if an I/O error occurs during writing
1685 Reads a BloomFilter from an InputStream. @param in input stream containing serialized BloomFilter data @param funnel function to convert elements into bytes @return deserialized BloomFilter object @throws IOException if reading fails
1686 Calculates the mean of a sequence of numbers. This method is deprecated. Use DoubleMath.mean(Iterator) instead. @param values iterable over Number objects @return mean value as double @throws IllegalArgumentException if no values are provided or any value is infinite/NaN
1687 Computes the base-2 logarithm of a positive finite double. @param x the input value, must be positive and finite @param mode rounding mode to apply @return integer part of log2(x) with specified rounding
1688 Detects hash flooding by checking for runs of non-null elements. @param hashTable array representing the hash table @return true if hash flooding is detected, false otherwise
1689 Adds an element to the buffer, maintaining top K elements. @param elem element to add
1690 Returns a case-insensitive version of the alphabet. @return new Alphabet instance with ignoreCase set to true
1691 Creates a TopKSelector to find the least K elements. @param k number of least elements to track @param comparator comparator to determine element order @return TopKSelector configured for least elements
1692 Creates a TopKSelector to find the top K greatest elements. @param k number of top elements to track @param comparator comparator for element comparison @return TopKSelector configured to select greatest elements
1693 Constructs a linear transformation using two points. @param x2 x-coordinate of the second point @param y2 y-coordinate of the second point @return LinearTransformation object representing the line through (x1, y1) and (x2, y2)
1694 Computes the least squares fit for the paired dataset. @return LinearTransformation representing the best fit line or NaN transformation if invalid
1695 Computes the least squares linear fit for accumulated data. Throws an IllegalStateException if there are fewer than two data points. Returns a NaN transformation if sum of products of deltas is NaN. @return LinearTransformation representing the least squares fit
1696 Checks if a number is prime. @param n the number to check @return true if n is prime, false otherwise
1697 Computes the base-10 logarithm of a BigInteger with specified rounding. @param x the BigInteger to compute the logarithm for @param mode the RoundingMode to use for rounding the result @return the computed logarithm as an integer @throws IllegalArgumentException if x is not positive or rounding conditions are violated
1698 Computes the binomial coefficient "n choose k". @param n total number of items @param k number of items to choose @return binomial coefficient or Long.MAX_VALUE if overflow occurs
1699 Computes the mean of a sequence of numbers. @param values iterable over numeric data points @return calculated mean as a double
1700 Adds a new pair of data points to the accumulator. @param x first data point @param y second data point
1701 Adds multiple data points to the statistics. @param values iterable collection of numbers to be added
1702 Adds all values from an iterator to the statistics. @param values iterator of numbers to be added
1703 Adds all statistics from another StatsAccumulator instance. @param values the StatsAccumulator to add
1704 Adds all statistics from another accumulator. @param values StatsAccumulator to add data from
1705 Selects the k-th smallest element in a subarray using quickselect. @param required index of the desired element (0-based) @param array the array to search within @param from starting index of the subarray @param to ending index of the subarray
1706 Adds all elements from a double stream to the builder. Ensures sufficient space and updates the count. @param stream the double stream to add @return this Builder instance for method chaining
1707 Adds all double values from a collection to the builder. @param values iterable of Double elements to add @return this Builder instance for method chaining
1708 Adds all integers from a stream to the builder. @param stream source of integers @return the Builder instance for chaining
1709 Adds all integers from an iterable to the builder. @param values iterable of integers to add @return this Builder instance for method chaining
1710 Adds all elements from a LongStream to the builder. Ensures sufficient capacity and adds each value individually. @param stream source of long values to add @return this Builder instance for method chaining
1711 Reads object from input stream. Deserializes AtomicDoubleArray by reading length and double values, converting them to long bits.
1712 Adds all long values from an Iterable to the builder. @param values collection of Long objects to add @return this Builder instance for method chaining
1713 Parses a string to an integer using base 10. @param string the string to parse @return parsed Integer or null if parsing fails or exceeds int range
1714 Parses a string as an unsigned integer using base 10 and converts it to UnsignedInteger. @param string the string to parse @return UnsignedInteger object representing the parsed value
1715 Divides this unsigned long by another. @param val divisor as UnsignedLong @return result of division as UnsignedLong
1716 Converts an unsigned long to a string representation in the specified radix. @param x unsigned long value to convert @param radix base for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the unsigned long in the given radix
1717 Multiplies two numbers under a modulus. @param a first number @param b second number @param m modulus @return result of (a * b) % m
1718 Computes the square of a number modulo m. @param a the number to be squared @param m the modulus @return (a^2) % m
1719 Computes the remainder of this unsigned long divided by another. @param val divisor as an UnsignedLong object @return UnsignedLong representing the remainder
1720 Parses a decimal string to an unsigned long. @param string the string to parse @return UnsignedLong object representing the parsed value
1721 Compares this entry with another for equality. @param object the object to compare with @return true if both entries have equal keys and values; false otherwise
1722 Computes standard hash code for the entry. Uses key and value's hash codes; handles nulls.
1723 Generates a string representation of the map entry. @return "key=value" format using delegate methods
1724 Checks if the type token represents an array. @return true if the type is an array, false otherwise
1725 Wraps an ExecutorService to provide listening capabilities. @param delegate the ExecutorService to be wrapped @return a ListeningExecutorService instance
1726 Decorates a ScheduledExecutorService to make it a ListeningScheduledExecutorService. @param delegate the original ScheduledExecutorService to be decorated @return a ListeningScheduledExecutorService, either directly or wrapped
1727 Executes tasks concurrently and returns the result of one that completes first. @param executorService service to execute tasks @param tasks collection of callable tasks @param timed true if timeout is applicable @param timeout maximum time to wait for a task to complete @param unit time unit for timeout @return result of the completed task @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within the timeout period
1728 Executes an async callable combining multiple futures. @param combiner async callable to execute upon completion @param executor executor for running the callable @return ListenableFuture representing the combined result
1729 Creates a combined future with specified callable and executor. @param combiner task to execute upon future completion @param executor executor for task callbacks @return ListenableFuture representing the combined result
1730 Checks if acquiring a lock is valid based on the lock graph and policy. Throws IllegalStateException if attempting to acquire a lock already held. Handles potential deadlocks by caching exceptions. @param policy the lock acquisition policy @param acquiredLock the lock node being acquired
1731 Reloads a value for a given key. @param key the key to reload @param oldValue the current value associated with the key @return ListenableFuture containing the reloaded value
1732 Returns a future that does not propagate cancellation. @return ListenableFuture that wraps the transformed original future
1733 Submits an asynchronous task for execution. @param callable the task to be executed asynchronously @param executor the executor to run the task @return a non-cancellable ListenableFuture representing the task's result
1734 Retrieves value from Future, handling exceptions. @param validator type validator for exception class @param future source of the result @param exceptionClass class of exception to throw on failure @return result from Future or throws specified exception
1735 Retrieves a value from a Future with a timeout, throwing a specified checked exception on failure. @param future the Future to retrieve the value from @param exceptionClass the class of the exception to throw if an error occurs @param timeout the maximum time to wait for the Future to complete @param unit the time unit of the timeout parameter @return the result of the Future, or throws the specified checked exception if an error occurs @throws X the specified checked exception if retrieval fails
1736 Releases the lock and signals the next waiting thread. @throws IllegalMonitorStateException if lock is not held by current thread
1737 Awaits a condition for a specified time. @param guard the condition to wait for @param nanos maximum time to wait in nanoseconds @param signalBeforeWaiting whether to signal before waiting @return true if condition is satisfied, false otherwise @throws InterruptedException if interrupted while waiting
1738 Wraps a ListenableFuture with a timeout. @param delegate original ListenableFuture to wrap @param time timeout duration @param unit TimeUnit for the timeout @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return TimeoutFuture instance with timeout management
1739 Schedules an asynchronous task with a specified delay. @param callable the task to be executed asynchronously @param delay time duration before execution @param executorService service used to schedule the task @return ListenableFuture representing the scheduled task
1740 Retrieves an enum constant by name if present. @param enumClass the enum class to search within @param value the name of the enum constant @return Optional containing the enum constant or absent if not found
1741 Searches for an element in the given iterable that matches the predicate. @param iterable the iterable to search through @param predicate the condition to match elements against @return Optional containing the first matching element or absent if none found
1742 Checks if any element matches the given predicate. @param predicate condition to evaluate each element against @return true if at least one element matches, false otherwise
1743 Creates a precomputed positive CharMatcher based on character count and BitSet. @param totalCharacters number of characters to match @param table BitSet representing the set of characters to match @param description descriptive string for the matcher @return CharMatcher instance configured with specified parameters
1744 Propagates the given throwable if it's an instance of either specified type. @param throwable the throwable to check and possibly rethrow @param declaredType1 first type to check against @param declaredType2 second type to check against @throws X1 if throwable is an instance of declaredType1 @throws X2 if throwable is an instance of declaredType2
1745 Rethrows the given throwable as a RuntimeException. @param e the throwable to rethrow @throws IOException if the original throwable is an instance of IOException
1746 Rethrows the given throwable as a specific exception type. @param e the throwable to rethrow @param declaredType the specific exception type to check against @throws IOException if the throwable is an instance of IOException @throws X if the throwable is an instance of the specified declared type
1747 Closes all registered Closeable resources in LIFO order. Handles exceptions during closing and suppresses them if necessary.
1748 Creates a new thread with a specified name and runnable task. @param name the name to assign to the thread @param runnable the task for the thread to execute @return the newly created Thread object
1749 Filters a SetMultimap by keys using a given predicate. @param unfiltered the original multimap to filter @param keyPredicate condition for keys to be included @return a new FilteredKeySetMultimap with filtered keys
1750 Filters entries in a SetMultimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate the condition each entry must satisfy @return a new SetMultimap with filtered entries
1751 Retrieves a declared annotation of the specified type. @param annotationType the annotation class to look for @return the annotation if found, or null if not present
1752 Merges multiple sorted iterators into a single unmodifiable iterator. @param iterators collection of sorted iterators to merge @param comparator comparator for sorting elements @return UnmodifiableIterator containing merged elements
1753 Converts an iterable to an array. @param iterable source iterable @return Object array containing elements from the iterable
1754 Replaces all values associated with a key. @param key the key to replace values for @param values new values to be set @return list of old values or empty if key not found
1755 Removes all values associated with a given key. @param key the key whose values are to be removed @return list of removed values or empty if key not found
1756 Creates a new CopyOnWriteArrayList from an Iterable. @param elements source of elements to add to the list @return populated CopyOnWriteArrayList instance
1757 Creates a new CopyOnWriteArraySet from an Iterable. @param elements source of elements to add to the set @return populated CopyOnWriteArraySet instance
1758 Performs a binary search on a sorted list. @param list the sorted list to search @param key the element to find @param comparator the comparator for element comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index of the key or result from absentBehavior
1759 Retrieves multiple striped resources by keys. @param keys iterable of keys to fetch resources for @return immutable list of resources or empty if none found
1760 Generates a string representation of the network. @return A formatted string detailing network properties and structure
1761 Generates string representation of the graph. @return String summarizing graph's properties and structure
1762 Transforms entries of a navigable map using a specified transformer. @param fromMap the source navigable map to transform @param transformer the transformation function for entries @return a new NavigableMap with transformed values
1763 Transforms values of a sorted map using a provided function. @param fromMap source sorted map to transform @param function function to apply to each value @return new SortedMap with transformed values
1764 Adds a specified number of occurrences of an element to the multiset. @param element the element to add @param occurrences the number of times to add the element @return the count of the element before adding
1765 Adds specified number of occurrences of an element. @param element the element to add @param occurrences the number of times to add the element @return count of the element before adding
1766 Transforms values of a ListMultimap using a specified function. @param fromMultimap original multimap to transform @param function function to apply to each value @return new ListMultimap with transformed values
1767 Adds all elements from the specified collection to this multiset. @param elementsToAdd the collection of elements to add @return true if any element was added, false otherwise
1768 Adds all elements from the specified collection to this multiset. Delegates the operation to `Multisets.addAllImpl`. @param elementsToAdd collection of elements to add @return true if any element was added, false otherwise
1769 Wraps a Multimap in a synchronized version. @param multimap the underlying Multimap to be wrapped @return synchronized Multimap instance
1770 Returns a synchronized view of the specified table. @param table the original table to be wrapped @return a synchronized Table instance
1771 Escapes a string by converting special characters to Unicode sequences. @param string the input string to escape @return escaped string with Unicode sequences if needed
1772 Converts a Readable source to a StringBuilder. @param r the source Readable @return StringBuilder containing the contents of the Readable @throws IOException if an I/O error occurs
1773 Catches exceptions from a future and provides a fallback value. @param input future to monitor for exceptions @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor for executing the fallback @return ListenableFuture with error handling
1774 Cancels the task associated with this Future. @param mayInterruptIfRunning true if the thread executing this task should be interrupted; otherwise, leave it running @return true if the task was successfully cancelled, false if already completed or cancelled
1775 Sets the result of the computation. @param value the computed value to set @return true if successful, false if already set
1776 Sets an exception for the future. @param throwable the Throwable to set @return true if exception was successfully set, false otherwise
1777 Sets the future for this AbstractFuture. @param future the ListenableFuture to set @return true if the future was successfully set, false otherwise
1778 Transforms a future's result using a specified function. @param input the original future to transform @param function the transformation function to apply @param executor the executor for asynchronous execution @return ListenableFuture representing the transformed outcome
1779 Atomically increments the value associated with a key by one. @param key the key to update @return updated value after increment
1780 Decrements the value associated with a key by 1 atomically. @param key the key to update @return updated value after decrement
1781 Atomically increments the value associated with a key by one. @param key the key whose associated value is to be incremented @return the old value before increment
1782 Atomically decrements the value associated with a key. @param key the key whose value is to be decremented @return the old value before decrementing
1783 Creates an AtomicLongMap initialized with entries from the specified map. @param m the map whose entries are to be added @return a new AtomicLongMap object containing the entries of the specified map
1784 Initializes a new graph builder with specified directionality. @param directed true if the graph is directed, false otherwise
1785 Initializes a new NetworkBuilder instance. @param directed true if the network is directed, false otherwise
1786 Initializes the graph builder with specified directionality. @param directed true if the graph is directed, false otherwise
1787 Adds a listener with an associated executor to the service. @param listener the listener to add @param executor the executor for processing events
1788 Converts an object from type A to B using the convert method. @param a non-nullable object of type A @return converted object of type B
1789 Creates and returns a new instance of CompactHashMap. @return A new CompactHashMap with default size
1790 Creates a CompactHashMap with the specified expected size. @param expectedSize estimated number of entries to store @return a new CompactHashMap instance
1791 Creates a new instance of CompactHashSet with default size. @return an empty CompactHashSet ready for use
1792 Creates a CompactHashSet with an initial capacity. @param expectedSize estimated number of elements to store @return CompactHashSet instance
1793 Creates a new ListMultimap from a given map and list factory. @param map initial map to use; must be empty @param factory supplier for creating new lists to store values @return ListMultimap instance wrapping the provided map and factory
1794 Creates a SetMultimap from a backing map and value set supplier. @param map initial backing map (must be empty) @param factory supplier for creating sets of values @return SetMultimap instance
1795 Constructs a new Builder instance with an empty LinkedHashMultiset. Initializes to maintain insertion order of elements.
1796 Composes this converter with another to form a chain. @param secondConverter converter from type B to C @return composed Converter from A to C
1797 Appends elements from an array to a StringBuilder. @param builder destination for appending @param parts array of objects to join @return the original StringBuilder with appended elements
1798 Joins elements from an iterable into a single string. Uses optimized array handling for lists; otherwise, delegates to iterator method. @param parts iterable of objects to join @return concatenated string of elements
1799 Creates a MapMakerInternalMap with specified key and value strengths. @param builder configuration for map strength settings @return MapMakerInternalMap instance based on strength configurations
1800 Creates a MapMakerInternalMap with dummy values. @param builder configuration for map settings @return MapMakerInternalMap instance based on key and value strength
1801 Concatenates multiple iterables into a single FluentIterable. @param inputs varargs of iterables to concatenate @return FluentIterable containing all elements from the input iterables
1802 Retrieves an element from the delegate iterable at the specified position. @param position index of the element to retrieve @return element at the given position @throws IndexOutOfBoundsException if position is out of bounds
1803 Acquires a single permit with rate limiting. @return wait time in seconds
1804 Attempts to acquire a lock with a specified timeout. @param time the maximum time to wait for the lock @return true if the lock was acquired, false otherwise
1805 Attempts to acquire a lock and check condition satisfaction. @param guard the condition guard to evaluate @param time the maximum time to wait for the lock @param unit the time unit of the timeout @return true if lock is acquired and condition is satisfied, false otherwise
1806 Converts cache specification to a CacheBuilder instance with lenient parsing. @param spec cache configuration specification @return configured CacheBuilder object
1807 Creates a strong interner instance. @return Interner configured to use strong references
1808 Creates a weak interner. Uses WeakReferences to manage interned objects. @return Interner that uses weak references for garbage collection
1809 Sets a value at the specified row and column keys. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value new value to set (can be null) @return old value at the specified position or null if not present
1810 Removes the value at the specified row and column keys. @param rowKey key of the row to remove @param columnKey key of the column to remove @return old value at the specified position or null if not found
1811 Checks equality with another ImmutableDoubleArray. @param object the object to compare with @return true if equal, false otherwise
1812 Compares this array with another object for equality. @param object the object to compare with @return true if the arrays are equal, false otherwise
1813 Checks equality with another ImmutableLongArray. @param object the object to compare with @return true if equal, false otherwise
1814 Converts a string to the specified case format. @param format target case format @param s input string to convert @return converted string in the desired format
1815 Finds the first matching character in a sequence. @param sequence the CharSequence to search within @return the index of the first match or -1 if no match is found
1816 Constructs an iterator with a specified size starting at index 0. @param size total number of elements in the collection
1817 Extracts Teredo tunneling information from an IPv6 address. @param ip the IPv6 address to analyze @return TeredoInfo object containing server, client IP, port, and flags
1818 Checks if a byte array is well-formed UTF-8. @param bytes the byte array to check @return true if the byte array is valid UTF-8, false otherwise
1819 Encodes a byte array into a string using the default encoding scheme. @param bytes the source byte array to encode @return the encoded string representation of the byte array
1820 Reads exactly the specified number of bytes from an InputStream. @param in the input stream to read from @param b the destination byte array @param off the offset in the byte array to start writing @param len the number of bytes to read @throws IOException if an I/O error occurs or end of stream is reached prematurely
1821 Reverses the entire boolean array. @param array the boolean array to reverse
1822 Rotates a segment of a boolean array. @param array the boolean array to rotate @param distance number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1823 Reverses the entire byte array. @param array the byte array to reverse
1824 Rotates a portion of the byte array by a specified distance. @param array the byte array to rotate @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1825 Sorts a portion of the byte array in descending order. @param array the byte array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1826 Sorts a portion of the character array in descending order. @param array the character array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1827 Reverses the entire character array. @param array the character array to reverse
1828 Rotates a portion of the character array. @param array the character array to rotate @param distance number of positions to rotate @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1829 Sorts a portion of a double array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1830 Reverses all elements in a double array. @param array the array to reverse
1831 Rotates elements in a double array between specified indices. @param array the array to rotate @param distance number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1832 Sorts a portion of a float array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1833 Reverses all elements in a float array. @param array the array to reverse
1834 Rotates elements in a float array between specified indices by a given distance. @param array the array to rotate @param distance the number of positions each element is shifted @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1835 Sorts a portion of an integer array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1836 Reverses elements in the given integer array. @param array the array to reverse
1837 Rotates elements in an integer array between specified indices. @param array the array to rotate @param distance the number of positions to rotate by @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1838 Sorts a portion of a long array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1839 Reverses the elements of a long array. @param array the array to reverse
1840 Rotates a specified range of a long array by a given distance. @param array the array to rotate @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1841 Sorts a portion of a short array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1842 Reverses elements in a short array. @param array the array to reverse
1843 Rotates elements in a short array between specified indexes. @param array the array to rotate @param distance the number of positions each element is shifted @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1844 Sorts an entire byte array as unsigned integers. @param array the byte array to sort
1845 Sorts an entire byte array in descending order using unsigned interpretation. @param array the byte array to sort
1846 Sorts an integer array in ascending order. @param array the array to sort
1847 Sorts an integer array in descending order. @param array the array to sort
1848 Sorts an unsigned long array. @param array the array to sort
1849 Sorts an unsigned long array in descending order. @param array the array to be sorted
1850 Creates a Splitter using a specific string as a delimiter. Throws IllegalArgumentException if the separator is empty. @param separator string to split on @return a new Splitter instance configured with the given separator
1851 Sets key-value separator using a character. @param separator character to split on @return new MapSplitter configured with the specified separator
1852 Starts the Finalizer thread for managing resource cleanup. @param finalizableReferenceClass class for finalizable references @param queue reference queue for processing @param frqReference phantom reference that started the finalization process
1853 Returns a new Builder instance for constructing an ImmutableListMultimap. @return Builder object to build an immutable multimap
1854 Returns a new Builder instance for constructing an ImmutableSetMultimap. @return Builder object to build an ImmutableSetMultimap
1855 Returns an unmodifiable view of the specified multiset. @param multiset the multiset to wrap @return an unmodifiable Multiset instance
1856 Creates an EvictingQueue with a specified maximum size. @param maxSize the maximum number of elements the queue can hold; must be non-negative @return a new EvictingQueue instance
1857 Protected constructor to prevent instantiation.
1858 Protected constructor to prevent instantiation.
1859 Protected constructor to prevent instantiation.
1860 Creates an unmodifiable view of the provided entry set. @param entrySet original collection of key-value entries @return UnmodifiableEntrySet object wrapping the original set
1861 Returns an unmodifiable view of the specified navigable map. @param map the navigable map to wrap @return an unmodifiable NavigableMap object
1862 Returns an unmodifiable view of the specified ListMultimap. @param delegate the underlying multimap to wrap @return an unmodifiable ListMultimap
1863 Returns an unmodifiable view of the specified set multimap. @param delegate the underlying set multimap to wrap @return an unmodifiable SetMultimap instance
1864 Creates an unmodifiable view of the specified `RowSortedTable`. @param table the original table to wrap @return a RowSortedTable that cannot be modified
1865 Converts a standard Java Future to a ListenableFuture in a pool thread. @param future the standard Future instance to adapt @return ListenableFuture object for enhanced asynchronous handling
1866 Adds a callback to a listenable future. @param future the ListenableFuture to attach the callback to @param callback the FutureCallback to execute upon completion @param executor the Executor to run the callback on
1867 Initializes a LocalCache with specified configuration. @param builder CacheBuilder instance with cache settings @param loader optional CacheLoader for value loading
1868 Creates a TreeMultiset with natural ordering for comparable elements. @return TreeMultiset instance using natural element comparison
1869 Creates a TreeMultiset with an optional comparator. @param comparator custom comparator for element ordering; uses natural order if null @return TreeMultiset instance
1870 Replaces all values associated with a key. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
1871 Replaces values associated with a key. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
1872 Removes all values associated with a specified key. @param key the key whose values are to be removed @return an unmodifiable view of the removed values or an empty collection if none exist
1873 Creates a new HashMultiset with an estimated capacity. @param distinctElements expected number of unique elements @return HashMultiset instance initialized with the given capacity
1874 Checks if the given network contains a cycle. @param network the network to check for cycles @return true if the network has at least one cycle, false otherwise
1875 Creates a `LinkedHashMultiset` with specified initial capacity. @param distinctElements expected number of distinct elements @return new `LinkedHashMultiset` instance
1876 Constructs a StandardNetwork using the provided builder. Initializes node and edge maps based on builder configurations. @param builder configuration for network properties
1877 Constructs a StandardValueGraph with specified builder settings. @param builder configuration for graph properties
1878 Creates a new HashSet with an optimal initial capacity. @return a new HashSet configured for the expected number of values per key
1879 Creates a LinkedHashSet with an initial capacity optimized for value set size. @return a LinkedHashSet instance for storing values
1880 Adds a cell to the table with specified row key, column key, and value. @param rowKey the row identifier for the cell @param columnKey the column identifier for the cell @param value the data stored in the cell @return this Builder instance for method chaining
1881 Adds a key-value pair to the map builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
1882 Adds a class type and its instance to the builder. @param key the Class type as the key @param value the instance of the class type @return the Builder instance for method chaining
1883 Adds all entries from a map to the builder. @param map source map with class types as keys and corresponding instances as values @return the Builder instance for method chaining
1884 Adds a key-value pair from an entry to the map builder. @param entry the entry containing the key and value @return the Builder instance for method chaining
1885 Adds a key-value pair to the map builder. @param key the entry's key @param value the entry's value @return the Builder instance for method chaining
1886 Adds a type-safe key-value pair to the builder. @param key the Class representing the entry's key @param value the instance of type T to be stored @return the Builder instance for method chaining
1887 Adds a type-safe entry to the builder. @param key TypeToken representing the entry's key @param value instance corresponding to the key @return Builder instance for method chaining
1888 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for method chaining
1889 Adds multiple key-value pairs from an iterable of entries. @param entries iterable containing entries to add @return this Builder instance for method chaining
1890 Filters a navigable set based on a predicate. @param unfiltered the original navigable set to filter @param predicate condition for element inclusion @return a new NavigableSet containing only elements that satisfy the predicate
1891 Builds an immutable sorted map. @return ImmutableSortedMap instance based on current entries and comparator
1892 Adds a key-value entry to the builder. @param range the range of keys for the entry @param value the associated value @return this Builder instance
1893 Adds a non-empty range to the builder. @param range the range to add @return the Builder instance for method chaining
1894 Computes the intersection of two ranges. @param connectedRange the other range to intersect with @return Range representing the overlap or null if no intersection
1895 Finds the gap between two non-overlapping ranges. @param otherRange the range to compare against @return Range object representing the gap or throws exception if ranges overlap
1896 Returns the smallest range that encloses both this and another range. @param other the range to span with @return a new Range object representing the union of this and the other range
1897 Returns the canonical form of the range within the specified domain. @param domain the discrete domain in which to find the canonical range @return Range object representing the canonical interval
1898 Creates a new empty HashBiMap with default initial capacity. @return a new HashBiMap instance
1899 Creates a new HashBiMap from an existing map. @param map the source map to populate the bi-map with initial entries @return a new HashBiMap instance containing all entries from the provided map
1900 Returns a new instance of Builder with default initial capacity. @return Builder object for constructing ImmutableClassToInstanceMap
1901 Creates an immutable class-to-instance map from a single type-value pair. @param type the class type of the instance @param value the instance to be mapped @return an ImmutableClassToInstanceMap containing the specified type-value pair
1902 Returns the set of all values in the bi-map. Utilizes the inverse map to extract keys as values. @return ImmutableSet containing all values
1903 Returns a reversed view of the given list. Handles ImmutableLists, ReverseLists, and other lists. @param list the original list to reverse @return a List representing the reversed view
1904 Creates an immutable list from the specified array. @param elements the source array to copy elements from @return an ImmutableList containing the elements of the array
1905 Creates an immutable list from the given array elements. @param elements source array of elements @param length number of elements to include in the list @return ImmutableList containing specified elements
1906 Returns an immutable sublist from the specified range. @param fromIndex inclusive start index @param toIndex exclusive end index @return ImmutableList containing elements from fromIndex to toIndex-1
1907 Creates an ImmutableRangeMap with a single range and corresponding value. @param range the range to map @param value the value associated with the range @return an ImmutableRangeMap containing the specified range-value pair
1908 Creates an ImmutableRangeSet from a single range. @param range the Range object to include in the set @return ImmutableRangeSet containing the specified range or special cases
1909 Creates an ImmutableSortedMap with a single key-value pair. @param comparator comparator for sorting keys @param k1 the key @param v1 the value associated with the key @return an ImmutableSortedMap containing the specified key-value pair
1910 Creates an immutable set from an array. @param elements the array of elements to include in the set @return an ImmutableSet containing the specified elements
1911 Returns a new Builder instance for creating ImmutableSet. @return Builder object initialized with zero capacity
1912 Concatenates two iterators into one. @param a first iterator to concatenate @param b second iterator to concatenate @return combined Iterator containing elements from both input iterators in order
1913 Concatenates three iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator @return Iterator containing all elements from input iterators in order
1914 Concatenates four iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator @param d fourth iterator @return Iterator containing all elements from input iterators in order
1915 Retrieves all subscribers for a given event type. @param event the event object to find subscribers for @return Iterator of Subscribers associated with the event's class hierarchy
1916 Retrieves result from a ClosingFuture if completed. Ensures the future is being called and part of managed futures. @param closingFuture the future to retrieve the result from @return result of the ClosingFuture @throws ExecutionException if computation threw an exception
1917 Checks if the segment contains a value equivalent to the given object. @param value the value to search for @return true if a matching value is found, false otherwise
1918 Removes and returns the value associated with the specified key. Iterates through entries, delegates equality check to `Objects.equals`. @param key key of the entry to remove @return value of the removed entry or null if not found
1919 Clears all entries in the map. Delegates to the underlying map's entry set iterator.
1920 Checks if the map is empty. @return true if no entries are present, false otherwise
1921 Computes the hash code based on the entries of the underlying map. @return computed hash code using the entries
1922 Computes the difference between two maps using default object equality. @param left first map to compare @param right second map to compare @return MapDifference object detailing differences
1923 Constructs an EventBus instance with default configuration.
1924 Compares and swaps elements to maintain heap property. @param index current position of the element @param x element to be inserted @return new position of the element after comparison and swap
1925 Fills a hole in the heap by moving elements down. @param index starting index of the hole @return final position of the filled hole
1926 Checks if the set contains a specified element. @param object element to check for presence in the set @return true if the set contains the element, false otherwise
1927 Removes the specified element from the set if present. @param object element to be removed @return true if the element was successfully removed, false otherwise
1928 Returns a subset of elements within the specified range. Delegates to underlying unmodifiable sorted set. @param fromElement lower bound for the returned subset (inclusive) @param toElement upper bound for the returned subset (exclusive) @return SortedSet containing elements in the range [fromElement, toElement)
1929 Returns a sorted set of row keys. Utilizes the rowMap's key set for efficient access. @return SortedSet containing all row keys
1930 Removes all values associated with a given key. @param key the key whose values are to be removed @return a set of removed values or an empty set if no values were present
1931 Creates a Bloom filter with specified parameters. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @param fpp desired false positive probability @return BloomFilter object configured with the given parameters
1932 Rounds a double value to an integer using specified rounding mode. @param x the double value to round @param mode the RoundingMode to apply @return the rounded integer value @throws ArithmeticException if rounding is out of range or unnecessary
1933 Rounds a double value to the nearest long using specified rounding mode. @param x the double value to round @param mode the RoundingMode to apply @return the rounded long value
1934 Adds all elements from the iterator to the buffer, maintaining top K elements. @param elements iterator of elements to add
1935 Creates a TopKSelector to find the least K elements using natural ordering. @param k number of least elements to track @return TopKSelector configured for least elements with natural ordering
1936 Creates a TopKSelector to find the top K greatest elements using natural ordering. @param k number of top elements to track @return TopKSelector configured to select greatest elements naturally
1937 Checks if an integer is prime. @param n the integer to check @return true if n is prime, false otherwise
1938 Computes the binomial coefficient "n choose k". @param n total number of items @param k number of items to choose @return BigInteger representing the binomial coefficient
1939 Computes statistics from an iterable of numbers. @param values collection of numeric data points @return Stats object containing computed metrics
1940 Computes statistics from an iterator of numbers. @param values iterator of numbers to analyze @return Stats object containing computed metrics
1941 Adds statistics from another PairedStatsAccumulator instance. @param values the PairedStatsAccumulator to add
1942 Computes statistics from a DoubleStream. @param values stream of double values to analyze @return Stats object containing statistical metrics
1943 Computes statistics for a stream of integers. @param values IntStream containing data points @return Stats object with computed metrics
1944 Computes statistics from a stream of long values. @param values LongStream containing the data points @return Stats object with computed metrics
1945 Adds all data points from a DoubleStream to the accumulator. @param values stream of double values to be added
1946 Adds all integer values from a stream to the accumulator. @param values IntStream containing data points to be added
1947 Adds all data points from a LongStream to the accumulator. @param values stream of long values to be added
1948 Recursively selects elements from an array based on specified indices. @param allRequired array of required indices @param requiredFrom starting index in allRequired @param requiredTo ending index in allRequired @param array the array to select elements from @param from lower bound of search range @param to upper bound of search range
1949 Creates an ImmutableDoubleArray from an iterable of Double values. @param values the source iterable of Double numbers @return an ImmutableDoubleArray containing the double values
1950 Creates an immutable array from an iterable of integers. @param values iterable of Integer objects to convert @return ImmutableIntArray instance or EMPTY if the collection is empty
1951 Creates an ImmutableLongArray from an Iterable of Longs. @param values the input iterable of Long objects @return ImmutableLongArray instance containing the values
1952 Converts the unsigned long value to a string in the specified radix. @param radix base for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the unsigned long in the given radix
1953 Converts an unsigned long to its string representation in base 10. @param x unsigned long value to convert @return string representation of the unsigned long in decimal format
1954 Invokes any of the given tasks concurrently. @param executorService service to execute tasks @param tasks collection of callable tasks @param timed true if timeout is applicable @param timeout maximum time to wait for a task to complete @return result of the completed task @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within the timeout period
1955 Executes a runnable task asynchronously. @param combiner task to execute @param executor executor for the task @return ListenableFuture representing the async execution result
1956 Creates a ClosingFuture from a ListenableFuture. @param future the ListenableFuture to manage @return a new ClosingFuture instance
1957 Attempts to retrieve and remove the head of the queue. Returns null if no elements are present.
1958 Retrieves and returns the head of the queue without removing it. Handles empty queue by returning null. @return the head of the queue or null if it's empty
1959 Submits a synchronous task for execution. @param callable the task to be executed synchronously @param executor the executor to run the task @return a non-cancellable ListenableFuture representing the task's result
1960 Retrieves a value from a Future with a specified timeout. @param future the Future to retrieve the value from @param exceptionClass the class of the exception to throw if an error occurs @param timeout the maximum time to wait for the Future to complete @param unit the time unit of the timeout parameter @return the result of the Future, or throws the specified checked exception if retrieval fails @throws X the specified checked exception if an error occurs
1961 Notifies service has stopped. Updates state and enqueues termination event. @throws IllegalStateException if service is not running, starting, or stopping
1962 Notifies listeners of a service failure. @param cause the exception that caused the failure
1963 Starts timing for service startup. @param service the service to start timing for
1964 Transitions a service from one state to another, updating internal state and metrics. @param service the service being transitioned @param from the current state of the service @param to the target state for the service
1965 Enters monitor when condition is met. @param guard the condition to wait for @throws InterruptedException if interrupted while waiting
1966 Waits for a condition to be satisfied. @param guard the condition to wait for @throws InterruptedException if interrupted while waiting
1967 Enters a guarded section uninterruptibly. @param guard condition to wait for @throws IllegalMonitorStateException if guard's monitor is not this instance
1968 Waits uninterruptibly for a condition to be satisfied. @param guard the condition to wait for @throws IllegalMonitorStateException if not holding lock or wrong monitor
1969 Attempts to enter the monitor when a given condition is satisfied. @param guard condition to wait for @param time maximum time to wait @param unit time unit of the timeout @return true if condition is met, false on timeout @throws InterruptedException if interrupted while waiting
1970 Enters the monitor uninterruptibly, waiting for a condition. @param guard the condition to wait for @param time maximum time to wait @param unit time unit of the input time @return true if condition is satisfied, false otherwise
1971 Waits for a condition to be satisfied with a specified time limit. @param guard the condition to wait for @param time maximum time to wait @param unit time unit of the input time @return true if condition is satisfied, false otherwise @throws InterruptedException if interrupted while waiting
1972 Waits uninterruptibly for a condition to be satisfied with a specified timeout. @param guard the condition to wait for @param time maximum time to wait @param unit time unit of the input time @return true if condition is satisfied, false otherwise
1973 Applies a timeout to the current future. @param timeout duration of the timeout @param unit TimeUnit for the timeout @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return FluentFuture with timeout management
1974 Wraps a ListenableFuture with a specified timeout. @param delegate original ListenableFuture to wrap @param time timeout duration as Duration @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return TimeoutFuture instance with timeout management
1975 Finds the first element in the iterable that matches the given predicate. @param predicate condition to match elements against @return Optional containing the first matching element or absent if none found
1976 Creates an optimized CharMatcher based on character set. Uses BitSet for efficient character matching and returns either a positive or negated matcher. @return CharMatcher instance configured with optimal parameters
1977 Rethrows the given throwable as a specific exception type or RuntimeException. @param e the throwable to rethrow @param declaredType1 first exception type to check against @param declaredType2 second exception type to check against @throws IOException if the throwable is an instance of IOException @throws X1 if the throwable is an instance of declaredType1 @throws X2 if the throwable is an instance of declaredType2
1978 Writes byte array to an output stream. @param bytes the byte array to write @throws IOException if writing fails
1979 Writes data from an InputStream to the output stream. @param input source InputStream @return number of bytes written @throws IOException if I/O error occurs
1980 Checks if the byte source is empty. @return true if the source is empty, false otherwise @throws IOException if an I/O error occurs
1981 Returns the size of the byte source. If size is known, returns it directly; otherwise, counts bytes by skipping or reading. @return Size of the byte source in bytes @throws IOException if an I/O error occurs
1982 Copies byte data to an OutputStream. @param output destination OutputStream @return number of bytes copied @throws IOException if I/O error occurs during copying or resource management
1983 Copies byte data to a sink. @param sink destination for the byte data @return number of bytes copied @throws IOException if an I/O error occurs
1984 Reads byte data from the source. @return byte array containing the data read @throws IOException if an I/O error occurs
1985 Reads bytes from the source using a specified ByteProcessor. @param processor the ByteProcessor to process the bytes @return result from the ByteProcessor or null if not applicable @throws IOException if an I/O error occurs
1986 Compares byte contents of current source with another ByteSource. @param other the ByteSource to compare against @return true if contents are equal, false otherwise @throws IOException if an I/O error occurs during comparison
1987 Writes a character sequence to the output stream. @param charSequence the character sequence to write @throws IOException if an I/O error occurs
1988 Writes character data from a Readable source to the output stream. @param readable the source of characters to write @return number of characters written @throws IOException if an I/O error occurs
1989 Returns the length of the character source. Uses cached value if available, otherwise counts characters by reading. @return total number of characters @throws IOException if an I/O error occurs
1990 Copies character data to an Appendable destination. @param appendable the destination for copied characters @return number of characters copied @throws IOException if an I/O error occurs
1991 Copies character data to a sink. @param sink destination for the copied characters @return number of characters copied @throws IOException if an I/O error occurs
1992 Reads the first line from a character source. @return The first line of text or null if the source is empty @throws IOException if an I/O error occurs while reading
1993 Reads lines from the source and processes them using the given LineProcessor. @param processor the line processor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs during reading or processing
1994 Checks if the character source is empty. Uses lengthIfKnown or reads first character to determine emptiness. @return true if empty, false otherwise @throws IOException if an I/O error occurs
1995 Expands the cache table size. Handles rehashing and node relocation for efficient storage.
1996 Filters keys in a Multimap based on a given predicate. @param unfiltered the original Multimap to filter @param keyPredicate the predicate for filtering keys @return a new Multimap with filtered keys
1997 Filters entries in a SetMultimap by their values. @param unfiltered the original multimap to filter @param valuePredicate condition each value must satisfy @return a new SetMultimap with filtered entries
1998 Filters entries in a multimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate the condition each entry must satisfy @return a new Multimap with filtered entries
1999 Creates an iterator for column keys in sorted order. @return Iterator over unique column keys, sorted by the comparator
2000 Creates an immutable bi-map from an iterable of entries. @param entries iterable containing key-value pairs @return ImmutableBiMap with the specified entries
2001 Creates an immutable map from iterable entries. @param entries iterable of key-value pairs @return ImmutableMap containing the specified entries
2002 Converts an iterable to a typed array. @param iterable source iterable @param type Class object representing the array component type @return array containing elements of the iterable
2003 Creates an ImmutableSortedSet from given comparator and iterable. @param comparator sorting order for elements @param elements source iterable @return new ImmutableSortedSet instance
2004 Searches for a key in a list using binary search. @param list the sorted list to search @param keyFunction function to extract keys from list elements @param key the key to find @param keyComparator comparator for key comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index of the key or result from absentBehavior
2005 Removes all values associated with the specified key. This operation is not supported and will throw UnsupportedOperationException. @param key key whose associated values are to be removed @return list of values that were removed (always empty)
2006 Transforms values of a navigable map using a specified function. @param fromMap the source navigable map to transform @param function the transformation function for values @return a new NavigableMap with transformed values
2007 Removes a mapping from the table if it exists. @param rowKey key identifying the row @param columnKey key identifying the column @param value value to remove @return true if the mapping was removed, false otherwise
2008 Returns a synchronized (thread-safe) view of the specified list multimap. @param multimap the ListMultimap to be wrapped @return synchronized ListMultimap instance
2009 Returns a synchronized SetMultimap wrapper. @param multimap the underlying SetMultimap to be wrapped @return synchronized SetMultimap instance
2010 Converts Readable source to string. @param r the source Readable @return string representation of the Readable @throws IOException if an I/O error occurs
2011 Catches exceptions of a specified type and provides a fallback value. @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor for executing the fallback @return FluentFuture with error handling
2012 Transforms the result of this future using a specified function. @param function the transformation function to apply @param executor the executor for asynchronous execution @return FluentFuture representing the transformed outcome
2013 Creates a new directed graph builder. @return GraphBuilder configured for directed graphs
2014 Creates an undirected graph builder. @return GraphBuilder instance configured for undirected graphs
2015 Creates a GraphBuilder from an existing graph. @param graph source graph to copy properties from @return new GraphBuilder with same configuration as the input graph
2016 Creates a directed NetworkBuilder instance. @return NetworkBuilder configured for directed networks
2017 Creates an undirected network builder. @return NetworkBuilder instance configured for undirected networks
2018 Creates a NetworkBuilder from an existing network. @param network the source network to copy settings from @return a new NetworkBuilder with copied properties
2019 Creates a directed value graph builder. @return ValueGraphBuilder configured for directed graphs
2020 Creates an undirected value graph builder. @return ValueGraphBuilder configured for undirected graphs
2021 Creates a ValueGraphBuilder from an existing graph. Copies properties like directionality, self-loops, node order, and edge order. @param graph the source ValueGraph to copy properties from @return a new ValueGraphBuilder configured with the same properties as the input graph
2022 Adds a listener with an associated executor to monitor service state changes. @param listener the listener to add @param executor the executor for processing events
2023 Creates an empty CompactLinkedHashSet. @return A new instance of CompactLinkedHashSet with default settings
2024 Creates a CompactHashSet from a collection. @param collection elements to initialize the set with @return CompactHashSet containing all elements from the input collection
2025 Creates a CompactLinkedHashSet with an initial capacity. @param expectedSize estimated number of elements to store @return CompactLinkedHashSet instance
2026 Creates a sorted set multimap from a map and a value set supplier. @param map initial map to use; must be empty @param factory supplier for creating sorted sets of values @return SortedSetMultimap with specified backing map and value set factory
2027 Creates a collector that accumulates elements into an immutable multiset. @return Collector for ImmutableMultiset with each element having a count of 1
2028 Converts a stream of elements into an immutable multiset. @param elementFunction extracts the element from each input @param countFunction determines the count for each element @return Collector that accumulates elements into an ImmutableMultiset
2029 Provides a builder instance for creating ImmutableMultiset. @return Builder object initialized with an empty LinkedHashMultiset
2030 Joins elements from an array into a single string. @param parts array of objects to join @return concatenated string of elements
2031 Joins elements of this iterable using the specified Joiner. @param joiner Joiner object to define joining behavior @return Concatenated string of iterable elements
2032 Simplifies a file path by resolving relative components. @param pathname the input file path to simplify @return simplified and normalized file path
2033 Parses encoded trie data into an immutable map. @param stack deque for managing parsed sequences @param encoded input character sequence representing the trie @param start starting index in the encoded sequence @param builder map builder to store parsed suffixes and types @return number of characters processed
2034 Creates a ConcurrentMap with specified parameters. @return Configured ConcurrentMap instance
2035 Transforms elements and concatenates iterables. @param function transformation function to apply to each element @return FluentIterable containing all transformed elements
2036 Concatenates multiple iterables into a single iterable. @param inputs varargs of iterables to concatenate @return Iterable containing all elements from the input iterables
2037 Retrieves the result of a completed task or throws an exception. Waits up to the specified timeout if necessary. @param timeout time to wait before giving up @param unit TimeUnit for the timeout parameter @return result of the task if successful, null if explicitly set to null @throws InterruptedException if the current thread is interrupted while waiting @throws TimeoutException if the wait times out @throws ExecutionException if the computation threw an exception
2038 Adds a new node to the graph. @param node the node to be added @return GraphConnections object for the new node
2039 Attempts to acquire a lock and check condition satisfaction within a specified duration. @param guard the condition guard to evaluate @param time the maximum time to wait for the lock as a Duration @return true if lock is acquired and condition is satisfied, false otherwise
2040 Converts a string to the specified case format. Handles camel conversion and appends separators accordingly. @param format target case format @param s input string to convert @return converted string in the desired format
2041 Converts a string to the specified case format, handling camel case conversion. @param format target case format @param s input string to convert @return converted string in the desired format
2042 Converts a string to the specified case format. Handles camel conversion and appends separators. @param format target case format @param s input string to convert @return converted string in the desired format
2043 Converts a string to a specified case format. @param format target case format @param str input string to convert @return converted string in the desired format
2044 Checks if none of the characters in the sequence match. @param sequence the CharSequence to check @return true if no characters match, false otherwise
2045 Removes all matching characters from the input sequence. @param sequence the CharSequence to process @return a new String with matching characters removed
2046 Replaces all matching characters in the sequence with a specified character. @param sequence the CharSequence to process @param replacement the character to replace matches with @return a new String with matched characters replaced
2047 Retrieves the embedded IPv4 client address from an IPv6 address. @param ip the Inet6Address to process @return Inet4Address representing the embedded IPv4 client IP @throws IllegalArgumentException if no embedded IPv4 address is found
2048 Reads bytes from the input stream and updates the hash. @param bytes destination buffer for read bytes @param off starting offset in the buffer @param len maximum number of bytes to read @return number of bytes read or -1 if end of stream
2049 Reads all bytes from an InputStream into a byte array. @param in the input stream to read from @param b the destination byte array @throws IOException if an I/O error occurs or end of stream is reached prematurely
2050 Rotates a boolean array by a specified distance. @param array the boolean array to rotate @param distance number of positions to rotate
2051 Rotates the entire byte array by a specified distance. @param array the byte array to rotate @param distance the number of positions to rotate
2052 Sorts byte array in descending order. @param array the byte array to sort
2053 Sorts the entire character array in descending order. @param array the character array to sort
2054 Rotates a character array by a specified distance. @param array the character array to rotate @param distance number of positions to rotate
2055 Sorts an entire double array in descending order. @param array the array to sort
2056 Rotates elements in a double array by a specified distance. @param array the array to rotate @param distance number of positions to rotate
2057 Sorts an entire float array in descending order. @param array the array to sort
2058 Rotates elements in a float array by a specified distance. @param array the array to rotate @param distance the number of positions each element is shifted
2059 Sorts an integer array in descending order. @param array the array to sort
2060 Rotates elements in an integer array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate by
2061 Sorts an entire long array in descending order. @param array the array to sort
2062 Rotates an entire long array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate
2063 Sorts an entire short array in descending order. @param array the array to sort
2064 Rotates elements in a short array by a specified distance. @param array the array to rotate @param distance the number of positions each element is shifted
2065 Sets key-value separator for map creation. @param separator string to split on @return New MapSplitter configured with the specified key-value separator
2066 Creates a rate limiter with specified parameters. @param permitsPerSecond rate of permit issuance @param warmupPeriod duration for rate to stabilize @param unit time unit for warmup period @return configured RateLimiter instance
2067 Returns an unmodifiable view of the specified sorted multiset. @param sortedMultiset the sorted multiset to wrap @return an unmodifiable SortedMultiset object
2068 Returns an unmodifiable view of the specified navigable set. @param set the navigable set to wrap @return an unmodifiable navigable set or the original if already immutable/unmodifiable
2069 Returns an unmodifiable view of the specified collection of map entries. @param entries original collection of key-value entries @return UnmodifiableEntrySet if entries is a Set, otherwise UnmodifiableEntries
2070 Returns an unmodifiable view of the specified sorted set multimap. @param delegate the underlying sorted set multimap to wrap @return unmodifiable SortedSetMultimap instance
2071 Creates a ClosingFuture that ensures resources are closed upon task completion. @param future the ListenableFuture to manage @param closingExecutor Executor for resource cleanup tasks @return ClosingFuture object with added callbacks for resource management
2072 Adds a callback to handle completion of this future. @param callback FutureCallback to execute upon completion @param executor Executor to run the callback on
2073 Creates a new EnumBiMap with specified enum types for keys and values. @param keyType class of the enum type for keys @param valueType class of the enum type for values @return newly created EnumBiMap instance
2074 Creates a new EnumHashBiMap with specified enum type. @param keyType class representing the enum type for keys @return EnumHashBiMap instance initialized with the given key type
2075 Creates a TreeMultiset from an iterable of comparable elements. @param elements source of elements to add @return TreeMultiset instance containing the added elements
2076 Constructs a new Builder instance with a specified comparator. @param comparator custom comparator for element ordering
2077 Replaces values associated with a key in the multimap. @param key the key to replace values for @param values new values to associate with the key @return an unmodifiable view of the old values or an empty collection if none exist
2078 Replaces all values associated with a key atomically. @param key the key to replace values for @param values the new set of values to associate with the key @return the previous set of values associated with the key, or empty if none
2079 Creates a new HashMultiset from an iterable of elements. @param elements source of elements to add to the multiset @return HashMultiset instance containing all elements from the iterable
2080 Creates a new ArrayListMultimap with specified capacities. @param expectedKeys the expected number of unique keys @param expectedValuesPerKey the expected number of values per key @return initialized ArrayListMultimap instance
2081 Creates a new HashMultimap with specified sizes. @param expectedKeys estimated number of distinct keys @param expectedValuesPerKey average number of values per key @return initialized HashMultimap instance
2082 Creates a new HashMultimap from an existing Multimap. @param multimap the source Multimap to copy entries from @return a new HashMultimap containing the same key-value pairs as the input
2083 Creates a new LinkedListMultimap with an estimated number of keys. @param expectedKeys the anticipated number of unique keys @return a new LinkedListMultimap instance
2084 Creates a `LinkedHashMultiset` from an iterable. @param elements the iterable containing elements to add @return new `LinkedHashMultiset` instance with elements added
2085 Creates a LinkedHashMultimap with default capacities. @return a new LinkedHashMultimap instance
2086 Creates a LinkedHashMultimap with specified capacities. @param expectedKeys the expected number of keys @param expectedValuesPerKey the maximum number of values per key @return a new LinkedHashMultimap instance
2087 Constructs a mutable network using the provided builder. Initializes node and edge maps based on builder configurations. @param builder configuration for network properties
2088 Initializes a StandardMutableValueGraph with specified builder settings. @param builder configuration for graph properties
2089 Adds a cell to the table. @param cell the cell to add, must not be null @return this Builder instance for method chaining
2090 Adds a key-value pair from an entry to the map builder. @param entry the entry containing the key and value @return the Builder instance for method chaining
2091 Adds all key-value pairs from the specified iterable to the map builder. @param entries iterable of entries containing keys and values @return the Builder instance for method chaining
2092 Adds a key-value pair from an entry to the map builder. @param entry the entry containing the key and value @return the Builder instance for method chaining
2093 Converts the map to an immutable set multimap. @return An ImmutableSetMultimap representation of the map, or an empty one if the map is empty
2094 Builds an immutable sorted map. @return ImmutableSortedMap instance based on current entries and comparator
2095 Adds all entries from another RangeMap to the builder. @param rangeMap source RangeMap to copy entries from @return this Builder instance for method chaining
2096 Adds multiple non-overlapping ranges to the builder. @param ranges iterable collection of ranges to add @return Builder instance for method chaining
2097 Intersects the given range with the ranges in this set. @param range the range to intersect with @return an immutable list of intersecting ranges
2098 Creates a ContiguousSet from a range and discrete domain. @param range the range of elements in the set @param domain the discrete domain defining element boundaries @return ContiguousSet object representing the specified range
2099 Coalesces a range with an existing entry if they are connected and have the same value. @param range the range to coalesce @param value the value associated with the range @param entry the existing map entry to check against @return the coalesced range or the original range if not applicable
2100 Converts the range set to an immutable sorted set. @param domain discrete domain for value comparison @return ImmutableSortedSet containing all values in the ranges @throws IllegalArgumentException if domain or range is unbounded
2101 Converts a map to an immutable EnumMap. Handles empty and non-empty maps, ensuring entries are not null. @param map the input map to convert @return ImmutableEnumMap representation of the input map
2102 Returns an immutable map representation of the table's rows. Each key in the map is a row key, and each value is a map representing the column-value pairs for that row.
2103 Returns an iterator over elements in reverse order. @return UnmodifiableIterator of elements in descending order
2104 Constructs and returns an immutable list from added elements. Marks the builder as copy-on-write to prevent further modifications. @return ImmutableList containing all added elements
2105 Creates an immutable list from the given array. @param elements source array of elements @return ImmutableList containing all elements from the array
2106 Builds an immutable sorted set from the added elements. Sorts and removes duplicates before creating the set. @return ImmutableSortedSet containing unique, sorted elements
2107 Creates an immutable map from a given array of entries. @param n number of entries in the array @param entryArray array of key-value pairs @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap instance backed by the provided entries
2108 Finds the index of the domain part matching the desired public suffix type. @param desiredType optional public suffix type to match @return index of the matching suffix or NO_SUFFIX_FOUND if not found
2109 Creates an immutable set from enum elements. @param elements iterable of enum elements @return ImmutableSet containing the enum elements
2110 Provides an unmodifiable iterator over graph elements. Ensures safe iteration without modifying the graph structure. @return UnmodifiableIterator for traversing graph elements
2111 Posts an event to all registered subscribers. @param event the event object to be posted
2112 Attempts to cross over and bubble up an element in a binary heap. @param removeIndex index of the removed element @param vacated index of the vacated position @param toTrickle element to be moved and bubbled up @return MoveDesc object if successful, null otherwise
2113 Returns the comparator for row keys. @return Comparator used for sorting row keys
2114 Wraps a navigable set in a synchronized version. @param navigableSet the underlying navigable set to be wrapped @return a synchronized NavigableSet instance using the set itself as the lock
2115 Creates a Bloom filter with specified parameters. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @param fpp desired false positive probability @return BloomFilter object configured with the given parameters
2116 Creates a Bloom filter with default false positive probability. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @return BloomFilter object configured with the given parameters and default FPP of 3%
2117 Estimates the number of elements added to the BloomFilter. Uses bit statistics and hash function count for approximation. @return Approximate element count as a long value
2118 Collects the least k elements using a custom comparator. @param k number of least elements to collect @param comparator comparator for element ordering @return collector that gathers and returns the least k elements
2119 Finds the least k elements from an iterator. @param iterator source of elements to compare @param k number of least elements to retrieve @return List containing the top k least elements sorted by comparator
2120 Adds all elements from the iterable to the buffer. @param elements iterable of elements to add
2121 Converts the unsigned long value to its string representation. @return string representation of the unsigned long in decimal format
2122 Prepares to acquire a lock, validating the current thread's lock order. @param lock the lock about to be acquired
2123 Transforms the result of this ClosingFuture using a given function. @param function the transformation function to apply @param executor the executor to use for applying the function @return a new ClosingFuture with the transformed result
2124 Transforms this future's result asynchronously using a given function. @param function the transformation function to apply @param executor the executor to use for asynchronous execution @return a new ClosingFuture with the transformed result
2125 Retrieves value from Future, handling checked exceptions. @param future source of the result @param exceptionClass class of exception to throw on failure @return result from Future or throws specified exception
2126 Retrieves a value from a Future with a specified timeout. @param future the Future to retrieve the value from @param exceptionClass the class of the exception to throw if an error occurs @param timeout the maximum time to wait for the Future to complete @return the result of the Future, or throws the specified checked exception if retrieval fails @throws X the specified checked exception if an error occurs
2127 Reschedules a task with the next schedule. @return Cancellable instance managing the rescheduled task lifecycle
2128 Notifies the service has started. Updates state and notifies listeners accordingly. @throws IllegalStateException if service is not in STARTING state
2129 Starts all services asynchronously. Throws IllegalStateException if any service is not in NEW state. @return this ServiceManager instance
2130 Attempts to enter monitor when condition is met within a specified duration. @param guard condition to wait for @param time maximum wait time @return true if condition is satisfied, false on timeout @throws InterruptedException if interrupted while waiting
2131 Enters the monitor uninterruptibly for a specified duration. @param guard the condition to wait for @param time maximum waiting time as a Duration @return true if condition is satisfied, false otherwise
2132 Waits for a condition to be satisfied within a specified duration. @param guard the condition to wait for @param time maximum waiting time as a Duration @return true if condition is met, false otherwise @throws InterruptedException if interrupted while waiting
2133 Waits uninterruptibly for a condition with a specified timeout. @param guard the condition to wait for @param time maximum time to wait as Duration @return true if condition is satisfied, false otherwise
2134 Applies a timeout to the future. @param timeout duration of the timeout @param scheduledExecutor ScheduledExecutorService for scheduling timeouts @return FluentFuture with timeout management
2135 Writes a byte array to a specified file. @param from byte array containing data to write @param to destination file for writing @throws IOException if an I/O error occurs during the write operation
2136 Computes the hash of byte data using a specified hash function. @param hashFunction the hashing algorithm to apply @return HashCode representing the computed hash @throws IOException if an I/O error occurs during processing
2137 Copies file content to an OutputStream. @param from source File to be copied @param to destination OutputStream @throws IOException if I/O error occurs during copying
2138 Copies content from a URL to an OutputStream. @param from source URL @param to destination OutputStream @throws IOException if I/O error occurs during copying
2139 Copies a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs or files are identical
2140 Converts a File to a byte array. @param file the source file to be converted @return byte array containing the file's content @throws IOException if an I/O error occurs
2141 Converts a URL to a byte array. @param url the URL to convert @return byte array containing the URL content @throws IOException if an I/O error occurs
2142 Reads bytes from a file using a specified ByteProcessor. @param file the source file to be processed @param processor the ByteProcessor to handle the byte data @return result from the ByteProcessor or null if not applicable @throws IOException if an I/O error occurs
2143 Compares two files for equality by content. @param file1 first file to compare @param file2 second file to compare @return true if files are equal, false otherwise @throws IOException if an I/O error occurs during comparison
2144 Checks if two paths represent the same file content. @param path1 first file path to compare @param path2 second file path to compare @return true if both paths are equal, false otherwise @throws IOException if an I/O error occurs during comparison
2145 Writes a character sequence to a file using specified charset. @param from the CharSequence to write @param to the target File @param charset the Charset to use for writing @throws IOException if an I/O error occurs
2146 Appends a character sequence to a file using the specified charset. @param from the character sequence to append @param to the target file @param charset the charset to use for writing @throws IOException if an I/O error occurs
2147 Copies file content to an Appendable destination using specified charset. @param from source File to read @param charset character encoding for reading the file @param to destination Appendable to write to @throws IOException if an I/O error occurs
2148 Reads the first line of a file using specified charset. @param file the source file to be read @param charset character encoding to use @return The first line of text or null if empty @throws IOException if an I/O error occurs while reading
2149 Reads lines from a file using specified charset. @param file the source file to be read @param charset character encoding to use @return mutable list of lines from the file @throws IOException if an I/O error occurs during reading
2150 Reads lines from a file and processes them using a callback. @param file the source file to read @param charset character encoding for reading the file @param callback processor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs during reading or processing
2151 Reads lines from a URL and processes them using a LineProcessor. @param url the URL to read from @param charset character encoding for reading the URL @param callback the LineProcessor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs during reading or processing
2152 Maps a file to a memory-mapped buffer. @param file the target file @param mode mapping mode (READ_ONLY or READ_WRITE) @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
2153 Maps a file to a memory-mapped buffer. Validates that the size is non-negative. @param file target file @param mode mapping mode (READ_ONLY or READ_WRITE) @param size size of the region to map, -1 for full file @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
2154 Adds a delayed shutdown hook for an executor service. @param service the executor service to manage @param terminationTimeout timeout for service termination @param timeUnit unit of time for termination timeout
2155 Filters entries in a multimap based on a value predicate. @param unfiltered the original multimap to filter @param valuePredicate condition to evaluate on entry values @return a new Multimap with filtered entries
2156 Creates a compound ordering from multiple comparators. @param comparators iterable of comparators for complex sorting @return CompoundOrdering object combining the specified comparators
2157 Creates an immutable bi-map from a given map. @param map source map containing key-value pairs @return ImmutableBiMap with entries from the provided map
2158 Converts iterable to a typed array. @param type Class object representing the array component type @return array containing elements of the delegate iterable
2159 Converts an iterator to a typed array. @param iterator source iterator @param type Class object representing the array component type @return array containing elements of the iterator
2160 Converts the iterable to an ImmutableSortedSet based on a comparator. @param comparator sorting order for elements @return new ImmutableSortedSet instance
2161 Creates an ImmutableSortedSet from given elements using natural ordering. @param elements source iterable of elements @return new ImmutableSortedSet instance with sorted and immutable elements
2162 Creates an ImmutableSortedSet from a comparator and collection. @param comparator sorting order for elements @param elements source collection @return new ImmutableSortedSet instance
2163 Returns an unmodifiable view of the row map. @return SortedMap with rows as keys and unmodifiable column maps as values
2164 Returns the string representation of the media type. Uses lazy initialization for efficiency. @return formatted media type as a String
2165 Returns a synchronized SortedSetMultimap. @param multimap the underlying SortedSetMultimap to be wrapped @return synchronized SortedSetMultimap instance
2166 Reads content from a character source as a string. @return the content of the source as a string @throws IOException if an I/O error occurs during reading
2167 Creates a CompactLinkedHashMap with insertion-order. @param expectedSize estimated number of entries to store @return a new CompactLinkedHashMap instance
2168 Creates a CompactLinkedHashSet from a given collection. @param collection elements to initialize the set with @return CompactLinkedHashSet instance containing all elements from the collection
2169 Creates a TreeMultimap with natural ordering for keys and values. @return TreeMultimap instance with sorted keys and values
2170 Creates a TreeMultimap with custom comparators. @param keyComparator comparator for sorting keys @param valueComparator comparator for sorting values @return initialized TreeMultimap instance
2171 Checks if any character in the sequence matches. @param sequence the CharSequence to check @return true if at least one character matches, false otherwise
2172 Retains characters in the input sequence that match this matcher. @param sequence the CharSequence to process @return a new String with only matching characters retained
2173 Replaces all occurrences of matching characters in the sequence with a replacement string. @param sequence the CharSequence to process @param replacement the CharSequence used as replacement for matches @return a new String with matched characters replaced by the replacement string
2174 Coerces an InetAddress to an Inet4Address. @param ip the input InetAddress (IPv4 or IPv6) @return coerced Inet4Address for IPv6, original if IPv4
2175 Creates a rate limiter with specified permits per second and warmup period. @param permitsPerSecond rate of permit issuance @param warmupPeriod duration for rate stabilization @return configured RateLimiter instance
2176 Returns a synchronized view of all entries in the multimap. @return a Set containing all key-value pairs managed by this multimap
2177 Schedules a task with a specified delay. @param command the task to execute @param delay time from now to start execution @param unit time unit of the delay parameter @return ListenableScheduledFuture representing the scheduled task
2178 Builds a LoadingCache with specified loader. Validates weight configuration before initialization. @param loader CacheLoader for value loading @return LoadingCache instance configured with builder settings
2179 Builds and returns a cache instance with configured parameters. Validates weight configuration and ensures proper settings for non-loading caches. @return Cache object with specified properties
2180 Creates a new Builder with specified comparator. @param comparator custom comparator for element ordering @return Builder instance configured with the given comparator
2181 Creates a Builder with elements in reverse natural order. @return Builder configured for descending order
2182 Creates a Builder with natural ordering. @return Builder instance using natural element comparison
2183 Creates an EnumBiMap from a given map with enum keys and values. @param map input map with enum entries @return newly created EnumBiMap instance initialized with the map's contents
2184 Creates an EnumHashBiMap from a given map. @param map input map with enum keys and values @return EnumHashBiMap instance initialized with the entries from the input map
2185 Replaces all values associated with a given key. @param key the key whose values are to be replaced @param values the new values to associate with the key @return a set containing all the old values associated with the key
2186 Checks if two lists are permutations of each other. @param first first list to compare @param second second list to compare @return true if both lists have the same elements with the same frequency, false otherwise
2187 Creates a new empty ArrayListMultimap. @return An initialized ArrayListMultimap instance with default capacities.
2188 Creates a new ArrayListMultimap from an existing Multimap. @param multimap the source Multimap to copy entries from @return a new ArrayListMultimap containing the same key-value pairs as the input
2189 Creates and returns a new instance of HashMultimap. Initializes with default settings for key-value storage.
2190 Creates and returns a new empty LinkedListMultimap. @return LinkedListMultimap instance with default capacity
2191 Creates a new LinkedListMultimap from an existing Multimap. @param multimap source of entries to add @return LinkedListMultimap instance initialized with the provided entries
2192 Creates a LinkedHashMultimap from an existing Multimap. @param multimap the source multimap to copy entries from @return a new LinkedHashMultimap instance with copied entries
2193 Constructs and returns a mutable network based on current builder settings. @return MutableNetwork instance with configured properties
2194 Constructs a StandardMutableGraph using specified builder settings. @param builder configuration for graph properties
2195 Constructs and returns a mutable value graph. @param <N1> node type extending the builder's node type @param <V1> value type extending the builder's value type @return MutableValueGraph instance configured with builder settings
2196 Adds all cells from another table to this builder. @param table the source table containing cells to add @return this Builder instance for method chaining
2197 Adds all key-value pairs from the specified iterable to the map builder. @param entries iterable of entries containing keys and values @return the Builder instance for method chaining
2198 Adds all key-value pairs from the specified map to the builder. @param map source map containing entries to add @return the Builder instance for method chaining
2199 Adds all key-value pairs from the specified iterable to the map builder. @param entries iterable of entries containing keys and values @return the Builder instance for method chaining
2200 Filters entries of a filtered map based on an additional predicate. @param map the original AbstractFilteredMap to filter further @param entryPredicate the additional condition for entries to satisfy @return a new FilteredEntryMap with combined predicates
2201 Adds all non-overlapping ranges from another RangeSet. @param ranges RangeSet containing ranges to add @return Builder instance for method chaining
2202 Returns a subset of the range set within the specified range. @param range the range to intersect with @return an ImmutableRangeSet containing ranges that intersect with the given range
2203 Creates a ContiguousSet of integers from lower to upper bounds. @param lower the inclusive lower bound @param upper the inclusive upper bound @return ContiguousSet object representing the range [lower, upper]
2204 Creates a ContiguousSet of Longs within a closed range. @param lower the inclusive lower bound of the range @param upper the inclusive upper bound of the range @return ContiguousSet containing all Long values from lower to upper
2205 Creates a ContiguousSet with elements from lower to upper (exclusive). @param lower the inclusive lower bound of the set @param upper the exclusive upper bound of the set @return ContiguousSet object representing the range [lower, upper)
2206 Creates a ContiguousSet with elements from lower (inclusive) to upper (exclusive). @param lower the inclusive lower bound of the set @param upper the exclusive upper bound of the set @return ContiguousSet object representing the specified range
2207 Coalesces a range with adjacent ranges if they have the same value. @param range the range to be coalesced @param value the value associated with the range @return the coalesced range
2208 Adds a new node to the network. @param node the node to be added @return NetworkConnections object for the new node
2209 Creates an immutable map from a given map. @param map the source map to copy entries from @return ImmutableMap containing the same key-value pairs as the input map
2210 Retrieves an immutable map of column keys to values for a given row key. @param rowKey the row key to fetch data for @return an ImmutableMap containing column-value pairs or an empty map if the row key is not found
2211 Finds the greatest element less than the given element. @param e the reference element @return the greatest element less than e, or null if no such element exists
2212 Finds the greatest element less than or equal to the given element. @param e target element for comparison @return greatest element <= e or null if no such element exists
2213 Creates an immutable list from an iterator. @param elements iterator providing elements to include @return ImmutableList containing all elements from the iterator
2214 Builds and returns an ImmutableRangeMap from entries. Sorts entries, checks for overlaps, and constructs the map. @return ImmutableRangeMap containing sorted ranges and associated values
2215 Builds an ImmutableRangeSet from added ranges. Merges overlapping or contiguous ranges, ensuring immutability. @return ImmutableRangeSet containing merged ranges
2216 Parses the Java class path into a list of URLs. @return ImmutableList of URLs representing classpath entries
2217 Retrieves method parameters with metadata. @return ImmutableList of Parameter objects representing each parameter
2218 Retrieves a list of exception types associated with the method. @return ImmutableList containing TypeToken representations of exceptions
2219 Wraps a collection of Callable tasks. @param tasks original Callable tasks to wrap @return ImmutableList of wrapped Callable tasks
2220 Creates an immutable sorted list from the given iterable. @param elements source iterable of comparable elements @return ImmutableList containing sorted elements
2221 Creates a sorted immutable list from an iterable. @param comparator comparator for element ordering @param elements source iterable of elements @return ImmutableList containing sorted elements
2222 Creates an immutable sorted set from an iterator. @param comparator the comparator defining element order @param elements iterator providing elements to add @return ImmutableSortedSet containing unique, sorted elements
2223 Creates an immutable map from a given array of entries. @param n number of entries in the array @param entryArray array of key-value pairs @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap instance backed by the provided entries
2224 Retrieves the index of the public suffix. @return index of the public suffix or SUFFIX_NOT_INITIALIZED if not found
2225 Retrieves the index of the registry suffix. Caches the result for future calls. @return index of the registry suffix or SUFFIX_NOT_INITIALIZED if not found
2226 Constructs an ImmutableSortedMap from entries. @param comparator key comparator @param sameComparator true if using the same comparator as existing map @param entries iterable of entries to include @return ImmutableSortedMap with sorted and unique keys
2227 Creates a new TreeBasedTable with the same comparators and contents as the given table. @param table source table to copy from @return a new TreeBasedTable with copied data and comparators
2228 Creates a Bloom filter with default false positive probability. @param funnel function to convert elements into bytes @param expectedInsertions expected number of insertions @return BloomFilter object configured with the given parameters and default FPP of 3%
2229 Collects the greatest k elements using a custom comparator. @param k number of greatest elements to collect @param comparator comparator for element ordering @return collector that gathers and returns the greatest k elements
2230 Finds the least k elements from an iterable. @param iterable source of elements to compare @param k number of least elements to retrieve @return List containing the top k least elements sorted by comparator
2231 Finds the greatest k elements from an iterator. @param iterator source of elements to compare @param k number of greatest elements to retrieve @return List containing the top k greatest elements sorted by comparator
2232 Catches exceptions of a specified type and applies a fallback function. @param exceptionType type of exception to catch @param fallback function to apply on caught exception @param executor to execute the fallback function @return new ClosingFuture with applied fallback
2233 Waits until the service has stopped.
2234 Waits for all services to stop within a specified timeout. @param timeout maximum time to wait @param unit time unit of the input time @throws TimeoutException if not all services stop in time
2235 Returns an optimized version of this CharMatcher. @return optimized CharMatcher instance
2236 Computes the hash of a file using a specified hash function. @param file the source file to be hashed @param hashFunction the hashing algorithm to apply @return HashCode representing the computed hash @throws IOException if an I/O error occurs during processing
2237 Moves a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
2238 Reads lines from a URL and returns them as a mutable list. @param url the URL to read from @param charset character encoding for reading the URL @return List of strings representing the lines read from the URL @throws IOException if an I/O error occurs during reading
2239 Maps a file to a read-only memory-mapped buffer. @param file the target file @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs or file is null
2240 Wraps an executor service with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to enhance @param terminationTimeout timeout for service termination @param timeUnit unit of time for termination timeout @return ExecutorService configured for delayed shutdown
2241 Wraps a scheduled thread pool executor with an exiting service. @param executor the ScheduledThreadPoolExecutor to manage @param terminationTimeout timeout for service termination @param timeUnit unit of time for termination timeout @return ScheduledExecutorService configured with daemon threads and shutdown hooks
2242 Adds a delayed shutdown hook for an executor service with specified timeout. @param service the executor service to manage @param terminationTimeout duration for service termination
2243 Attempts to reclaim a cache entry by key. @param entry the cache entry to reclaim @param hash the hash code of the key @return true if the entry was successfully reclaimed, false otherwise
2244 Attempts to reclaim a cache entry by key and value reference. @param key the cache entry key @param hash the hash code of the key @param valueReference reference to the cache entry value @return true if the entry is successfully reclaimed, false otherwise
2245 Waits uninterruptibly for all managed services to reach a healthy state.
2246 Waits for all services to become healthy within a specified timeout. @param timeout maximum time to wait @param unit time unit of the input time @throws TimeoutException if not all services are healthy within the timeout
2247 Returns a map of services to their startup times. @return ImmutableMap with Service as key and Long (startup time in ms) as value
2248 Retrieves annotations of a specific type for this parameter. @param annotationType the class of the annotation to retrieve @return an array of annotations of the specified type, or empty if none found
2249 Creates an ImmutableSortedSet from a collection using natural ordering. @param elements source collection of comparable elements @return new ImmutableSortedSet instance in natural order
2250 Wraps a navigable map in a synchronized version. @param navigableMap the underlying navigable map to be wrapped @return synchronized NavigableMap instance using 'this' as mutex
2251 Converts a File to a string using the specified charset. @param file the source file to be converted @param charset character encoding to use @return the content of the file as a string @throws IOException if an I/O error occurs during reading
2252 Converts a URL to a string using the specified character set. @param url the URL to convert @param charset character encoding to use @return content of the URL as a string @throws IOException if an I/O error occurs during reading
2253 Creates a new CompactLinkedHashMap with default insertion order. @return an empty CompactLinkedHashMap instance
2254 Creates a TreeMultimap with natural ordering for keys and values. @param multimap source multimap to copy entries from @return TreeMultimap instance initialized with sorted data
2255 Creates a reentrant lock with cycle detection if enabled. @param lockName unique identifier for the lock @param fair true for fair locking, false otherwise @return ReentrantLock instance
2256 Creates a new reentrant read-write lock with cycle detection. @param lockName unique identifier for the lock @param fair indicates if the lock should use fair ordering policy @return ReentrantReadWriteLock instance based on current policy
2257 Creates and initializes lock graph nodes for an enum. @param clazz the enum class to create nodes for @return unmodifiable map of enum values to LockGraphNode instances
2258 Validates a domain part. @param part the domain part to validate @param isFinalPart indicates if it's the last part of the domain @return true if valid, false otherwise
2259 Converts an InetAddress to its integer representation. @param ip the input InetAddress (IPv4 or IPv6) @return integer value of the IP address
2260 Checks if the wrapped collection contains a specific element. @param object the element to look for @return true if element is found, false otherwise
2261 Removes an element from the wrapped collection. @param object element to be removed @return true if the element was found and removed; false otherwise
2262 Removes all elements from the wrapped collection that are contained in the specified collection. @param collection elements to remove @return true if any elements were removed, false otherwise
2263 Retains only elements in this collection that are contained in the specified collection. @param collection elements to retain @return true if any elements were removed, false otherwise
2264 Clears all elements from the wrapped collection.
2265 Checks if the wrapped collection is empty. @return true if the collection has no elements, false otherwise
2266 Converts collection to array using standard size and toArray logic. @return Object array containing all elements of the collection
2267 Schedules a task with a specified delay. @param command the task to execute @param delay time duration for delay @return ListenableScheduledFuture representing the scheduled task
2268 Finds all subscribers for a given listener. @param listener the object containing event handler methods @return a Multimap of event types to Subscribers
2269 Creates an induced subgraph from the specified network using given nodes. @param network source graph to extract subgraph from @param nodes iterable of nodes to include in the subgraph @return MutableNetwork containing only the specified nodes and their edges
2270 Creates a deep copy of the given network. @param network the source network to copy @return a new MutableNetwork instance with copied nodes and edges
2271 Builds and returns a mutable graph instance. @return MutableGraph object configured with current builder settings
2272 Creates an induced subgraph from the given graph. @param graph original ValueGraph to extract subgraph from @param nodes iterable of nodes to include in the subgraph @return MutableValueGraph containing only specified nodes and their edges
2273 Creates a deep copy of the given ValueGraph. @param graph the original ValueGraph to copy @return a new MutableValueGraph with identical nodes and edges
2274 Adds all key-value pairs from the specified map to the builder. @param map source map containing entries to add @return the Builder instance for method chaining
2275 Adds all key-value pairs from the specified map to the builder. @param map source map containing entries to add @return the Builder instance for method chaining
2276 Filters a navigable map with an additional predicate. @param map the original filtered navigable map @param entryPredicate the extra condition for entries to be included @return a new filtered navigable map with combined predicates
2277 Filters a filtered map with an additional predicate. @param map the original filtered map @param entryPredicate the additional condition for entries @return a new FilteredEntrySortedMap with combined predicates
2278 Filters map keys based on a predicate. @param unfiltered the original map to filter @param keyPredicate condition for keys to be included @return new map with filtered keys
2279 Filters entries of a map based on a predicate. @param unfiltered the original map to filter entries from @param entryPredicate the condition that entries must satisfy to be included @return a new Map with filtered entries
2280 Creates a collector for ImmutableSortedMap. @param comparator key comparator for sorting @param keyFunction function to extract keys @param valueFunction function to extract values @return Collector that collects elements into an immutable sorted map
2281 Creates a collector for immutable enum maps. @param keyFunction extracts enum keys from input elements @param valueFunction extracts values from input elements @return collector to build ImmutableMap from stream
2282 Creates a collector to accumulate elements into an immutable enum map. @param keyFunction function mapping elements to enum keys @param valueFunction function mapping elements to values @param mergeFunction function merging values for duplicate keys @return Collector that accumulates elements into an ImmutableMap
2283 Retrieves immutable type mappings for a given context type. @param contextType the Java type to analyze @return ImmutableMap of TypeVariableKey to Type mappings
2284 Concatenates multiple byte sources from an iterator into a single source. @param sources iterator of ByteSource instances to concatenate @return ByteSource representing the concatenated content
2285 Concatenates multiple character sources from an iterator. @param sources iterator providing CharSource instances to concatenate @return a single CharSource representing the concatenated input
2286 Creates an immutable range set from the given iterable of ranges. @param ranges iterable collection of Range objects to include @return ImmutableRangeSet containing the provided ranges, merged and made immutable
2287 Creates an ImmutableSortedMultiset from a collection of elements. @param comparator the comparator defining element order @param elements source of elements to add to the multiset @return ImmutableSortedMultiset instance or empty if input is empty
2288 Creates an immutable sorted multiset from a sorted multiset. @param sortedMultiset the source sorted multiset @return ImmutableSortedMultiset instance with elements from sortedMultiset
2289 Converts the collection to an immutable list. Handles different sizes by using appropriate constructors. @return ImmutableList containing all elements of the collection
2290 Creates a collector for an immutable sorted set. @param comparator defines the order of elements @return Collector for ImmutableSortedSet with sorted, unique elements
2291 Creates an immutable sorted set from an iterator using natural ordering. @param elements iterator providing elements to add @return ImmutableSortedSet containing unique, sorted elements
2292 Builds an ImmutableBiMap from the accumulated entries. Handles different sizes of entry arrays and sorts based on value comparator if present. @return ImmutableBiMap instance with specified entries
2293 Returns a submap from the start to the specified key. @param toKey upper bound of the keys in the returned map @param inclusive whether the upper bound is included @return ImmutableSortedMap with keys less than (or equal to if inclusive) toKey
2294 Returns a submap containing entries with keys greater than or equal to fromKey. @param fromKey the key to start retrieval from @param inclusive true if including fromKey in the result @return ImmutableSortedMap with specified range
2295 Checks if the domain has a public suffix. @return true if the domain has a public suffix at index 0, false otherwise
2296 Checks if the domain has a public suffix. @return true if a public suffix exists, false otherwise
2297 Checks if the domain is under a public suffix. @return true if the domain has a public suffix, false otherwise
2298 Checks if the domain is at the top level of its private registry. @return true if the domain is a top-level private domain, false otherwise
2299 Checks if the domain has a registry suffix. @return true if registry suffix index is 0, false otherwise
2300 Checks if the domain name has a registry suffix. @return true if registry suffix exists, false otherwise
2301 Checks if the domain has a registry suffix. @return true if the domain has a valid registry suffix, false otherwise
2302 Checks if the domain has no subdomains under its registry suffix. @return true if top-level, false otherwise
2303 Creates an ImmutableSortedMap from entries with a specified comparator. @param entries iterable of key-value pairs to include @param comparator key comparator for sorting @return ImmutableSortedMap with sorted and unique keys
2304 Creates an immutable sorted map from a given SortedMap. Uses the map's comparator or natural ordering if none is provided. @param map original SortedMap to copy @return ImmutableSortedMap with the same entries as the input map
2305 Creates an immutable copy of the set. @return ImmutableSet containing all elements from the current set
2306 Retrieves raw types associated with the generic type. @return ImmutableSet of raw types in descending order by hierarchy level
2307 Removes and returns the element at the specified index. Adjusts heap structure to maintain order. @param index position of the element to remove @return MoveDesc object describing changes or null if no swap occurs
2308 Computes the integer square root of a BigInteger with specified rounding mode. @param x non-negative BigInteger value to compute the square root for @param mode rounding mode to apply @return integer square root of x, rounded according to specified mode @throws IllegalArgumentException if x is negative @throws ArithmeticException if rounding is required but unnecessary
2309 Creates an immutable set from an iterator. Handles empty, single-element, and multi-element cases efficiently. @param elements the iterator providing elements for the set @return ImmutableSet containing all elements from the iterator
2310 Recursively scans a directory for resources. @param directory the directory to scan @param packagePrefix prefix for resource names @param currentPath set of visited directories to avoid cycles @param builder collects ResourceInfo objects @throws IOException if an I/O error occurs
2311 Extracts classpath files from a JAR's manifest. @param jarFile the JAR file to process @param manifest the manifest of the JAR, may be null @return ImmutableSet of File objects representing classpath entries
2312 Retrieves the raw supertype of the generic type. Uses getRawTypes() to determine the runtime type. @return Class representing the raw supertype
2313 Finds the greatest k elements from an iterable using a reversed comparator. @param iterable source of elements to compare @param k number of greatest elements to retrieve @return List containing the top k greatest elements sorted by comparator
2314 Waits for all services to stop within a specified timeout. Converts Duration to nanoseconds and handles overflow. @param timeout maximum time to wait as Duration @throws TimeoutException if not all services stop in time
2315 Returns an executor service with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to configure @return configured ExecutorService with delayed shutdown hook
2316 Wraps a ThreadPoolExecutor with graceful shutdown capabilities. @param executor the ThreadPoolExecutor to enhance @param terminationTimeout timeout for service termination @return ExecutorService configured for delayed shutdown
2317 Wraps a scheduled thread pool executor with exiting capabilities. @param executor the ScheduledThreadPoolExecutor to enhance @return ScheduledExecutorService configured for graceful shutdowns
2318 Wraps a scheduled thread pool executor with an exiting service using a specified duration. @param executor the ScheduledThreadPoolExecutor to manage @param terminationTimeout timeout for service termination as a Duration @return ScheduledExecutorService configured with daemon threads and shutdown hooks
2319 Evicts entries to maintain segment weight limits. @param newest the most recently added entry
2320 Waits for all services to become healthy within a specified duration. Converts Duration to nanoseconds and handles overflow. @param timeout maximum time to wait @throws TimeoutException if not all services are healthy within the timeout
2321 Converts service startup times to durations. @return ImmutableMap of Service to Duration representing startup times
2322 Retrieves annotations of a specific type for this parameter. @param annotationType the class of the annotation to retrieve @return an array of annotations of the specified type, or empty if none found
2323 Creates a non-fair reentrant lock with cycle detection. @param lockName unique identifier for the lock @return ReentrantLock instance
2324 Creates a non-fair reentrant read-write lock with cycle detection. @param lockName unique identifier for the lock @return ReentrantReadWriteLock instance with non-fair policy
2325 Validates the syntax of domain name parts. @param parts list of domain parts to validate @return true if all parts are valid, false otherwise
2326 Registers an object as a listener for specific events. @param listener the object containing event handler methods
2327 Unregisters event subscribers associated with a listener. @param listener object containing event handler methods to unregister
2328 Creates an ImmutableNetwork builder from the current configuration. @return ImmutableNetwork.Builder with specified node and edge types
2329 Creates an induced subgraph from a given graph and set of nodes. @param graph source graph to extract subgraph from @param nodes iterable collection of nodes for the subgraph @return MutableGraph containing specified nodes and their edges
2330 Creates a mutable copy of the given graph. @param graph source graph to be copied @return MutableGraph object with same nodes and edges as input graph
2331 Creates an immutable value graph builder. @return ImmutableValueGraph.Builder configured with current settings
2332 Filters a filtered map with an additional predicate. @param map the original filtered bi-map @param entryPredicate the extra condition for entries to satisfy @return a new FilteredEntryBiMap with combined filtering
2333 Filters a navigable map based on an entry predicate. @param unfiltered the original map to filter entries from @param entryPredicate the condition for entries to be included @return a new filtered navigable map
2334 Filters entries of a sorted map based on a predicate. @param unfiltered the original sorted map to filter @param entryPredicate the condition for entries to be included @return a new SortedMap with filtered entries
2335 Filters map entries by their values. @param unfiltered the original map to filter @param valuePredicate condition for filtering entry values @return a new Map with entries having values that satisfy the predicate
2336 Creates a Collector that gathers elements into an ImmutableMap. @param keyFunction extracts keys from each element @param valueFunction extracts values from each element @param mergeFunction merges values for duplicate keys @return Collector producing an ImmutableMap
2337 Creates a collector for ImmutableRangeMap. @param keyFunction extracts range key from element @param valueFunction extracts value from element @return Collector to build ImmutableRangeMap
2338 Creates an ImmutableSortedMultiset from a collection of elements using natural ordering. @param elements source of elements to add to the multiset @return ImmutableSortedMultiset instance or empty if input is empty
2339 Builds and returns an immutable sorted multiset. Utilizes the provided comparator to order elements. @return ImmutableSortedMultiset instance with sorted elements
2340 Creates a wildcard type with an upper bound. @param upperBound the upper bound type @return WildcardType object representing "? extends upperBound"
2341 Creates a wildcard type with the specified lower bound. @param lowerBound the lower bound of the wildcard type @return a WildcardType instance representing the supertype
2342 Generates ordered permutations of a collection. @param elements iterable of elements to permute @param comparator comparator for element ordering @return Collection of ordered permutations
2343 Converts the iterable to a sorted immutable list. @param comparator comparator for sorting elements @return ImmutableList of sorted elements
2344 Creates an immutable list from the given collection. @param elements source collection of elements @return ImmutableList containing all elements from the collection
2345 Builds an immutable bi-directional map from accumulated entries. @return ImmutableBiMap instance or throws if invalid state
2346 Constructs an immutable map and throws on duplicate keys. @return ImmutableMap instance based on builder's state
2347 Constructs an immutable map without throwing on duplicate keys. @return ImmutableMap instance based on builder's state
2348 Returns an immutable submap with keys less than the specified key. @param toKey upper bound of the keys in the returned map @return ImmutableSortedMap with keys less than toKey
2349 Returns a submap with keys in the specified range. @param fromKey lower bound of the keys @param fromInclusive true if including fromKey @param toKey upper bound of the keys @param toInclusive true if including toKey @return ImmutableSortedMap with keys between fromKey and toKey
2350 Retrieves a submap with keys greater than or equal to fromKey. @param fromKey the key to start retrieval from @return ImmutableSortedMap containing entries with keys >= fromKey
2351 Creates an ImmutableSortedMap from entries using natural ordering. @param entries iterable of key-value pairs to include @return ImmutableSortedMap with sorted and unique keys based on natural order
2352 Creates an ImmutableSortedMap from the given map using natural ordering. @param map input map to convert @return ImmutableSortedMap with entries sorted by natural key order
2353 Creates an immutable sorted map from a given map and comparator. @param map input map to convert @param comparator key comparator for sorting @return ImmutableSortedMap with sorted entries
2354 Computes the Cartesian product of multiple sets. @param sets list of input sets @return a set of lists representing the Cartesian product
2355 Removes the exact element from the queue. @param target object to be removed @return true if element is found and removed, false otherwise
2356 Removes and returns the element at the specified index. @param index position of the element to remove @return removed element
2357 Creates an immutable set from the given iterable. @param elements the source of elements for the set @return ImmutableSet containing all elements from the iterable
2358 Creates an Invokable for a constructor. @param constructor the Constructor object to wrap @return Invokable representing the constructor
2359 Checks if the current type is a subtype of the specified supertype. @param supertype the type to check against @return true if this type is a subtype, false otherwise
2360 Retrieves an Invokable for a specified method. Validates that the method is declared by the current raw type. @param method the Method to wrap @return Invokable object representing the method
2361 Attempts to expire and remove outdated cache entries. @param now current time in nanoseconds
2362 Creates a new WithExplicitOrdering instance for an enum class. @param enumClass the enum class to process @param policy concurrency policy to enforce @return WithExplicitOrdering instance configured with lock graph nodes
2363 Registers an object as an event listener. @param object the object with event handler methods
2364 Unregisters event listeners associated with an object. @param object listener to be unregistered
2365 Creates an ImmutableGraph builder from the current configuration. @return ImmutableGraph.Builder instance with generic type N1
2366 Filters entries of a BiMap based on a predicate. @param unfiltered the original bi-map to filter @param entryPredicate the condition for entries to satisfy @return a new FilteredEntryBiMap with filtered entries
2367 Filters navigable map entries by key predicate. @param unfiltered the original map to filter keys from @param keyPredicate condition for keys to be included @return a new filtered navigable map
2368 Filters a navigable map by values using a predicate. @param unfiltered the original map to filter entries from @param valuePredicate condition to evaluate on entry values @return a new filtered navigable map
2369 Filters entries in a sorted map by key. @param unfiltered the original sorted map to filter @param keyPredicate condition for keys to be included @return a new SortedMap with filtered entries based on key predicate
2370 Filters entries of a sorted map by their values. @param unfiltered the original sorted map to filter @param valuePredicate condition to evaluate on entry values @return a new SortedMap with filtered entries based on value predicate
2371 Creates an immutable sorted multiset from an iterator. @param comparator custom comparator for element ordering @param elements iterator providing elements to add @return ImmutableSortedMultiset instance with sorted elements
2372 Constructs a set of LocationInfo objects from the given class loader. @param classloader the ClassLoader to inspect for resources @return ImmutableSet of LocationInfo containing file and class loader pairs
2373 Determines the subtype of a component type from an array of bounds. @param bounds array of type bounds @return Type representing the subtype or null if not found
2374 Creates a new array type from the given component type. Handles wildcard types by processing their bounds. @param componentType the type of components in the array @return Type representing the new array
2375 Generates ordered permutations of an iterable using natural ordering. @param elements iterable of comparable elements to permute @return collection of ordered permutations
2376 Creates an immutable multiset from the specified iterable. @param elements the iterable containing elements to add @return ImmutableMultiset containing the specified elements or empty if none provided
2377 Creates an immutable multiset from an iterator of elements. @param elements source iterator providing the elements @return ImmutableMultiset containing all elements from the iterator
2378 Creates an immutable multiset with entries sorted by descending count. @param multiset the input multiset to process @return ImmutableMultiset with elements ordered by highest count first
2379 Generates all permutations of a collection. @param elements source collection of elements to permute @return Collection containing all permutations as lists
2380 Creates an immutable list from the given iterable. @param elements iterable providing elements to include @return ImmutableList containing all elements from the iterable
2381 Creates an immutable copy of the given RangeSet. @param rangeSet the RangeSet to copy @return ImmutableRangeSet containing all ranges from the input set
2382 Creates an ImmutableSortedSet from a SortedSet. @param sortedSet the input SortedSet to copy @return an ImmutableSortedSet with elements and order preserved
2383 Reads all lines from the character source. @return ImmutableList containing all read lines @throws IOException if an I/O error occurs during reading
2384 Constructs an immutable map from the builder's entries. @return ImmutableClassToInstanceMap instance based on builder's state
2385 Constructs an ImmutableListMultimap from map entries. @param mapEntries collection of key-value pairs @param valueComparator optional comparator for values @return Immutable list multimap with sorted or unsorted values
2386 Builds an immutable map instance. @return ImmutableMap based on builder's state or throws if duplicate keys exist
2387 Creates an ImmutableSetMultimap from a collection of map entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator comparator for sorting values, or null for unordered sets @return ImmutableSetMultimap instance containing the entries
2388 Converts a Properties object to an ImmutableMap. @param properties source Properties object @return ImmutableMap containing key-value pairs from the Properties
2389 Creates an immutable map from a collection, mapping each element to its index. @param list the collection of elements to be indexed @return ImmutableMap with elements as keys and their indices as values
2390 Builds an immutable map from the current builder state. @return ImmutableTypeToInstanceMap instance based on builder's entries
2391 Constructs a new TypeTable with additional mappings. @param mappings map of TypeVariableKey to Type representing new bindings @return new TypeTable instance including updated mappings
2392 Converts an iterator of keys and a value function into an ImmutableMap. @param keys Iterator providing the map keys @param valueFunction Function to compute values from keys @return ImmutableMap with keys mapped to their computed values
2393 Returns a submap with keys in the specified range. @param fromKey lower bound of the keys @param toKey upper bound of the keys @return ImmutableSortedMap with keys between fromKey (inclusive) and toKey (exclusive)
2394 Collects elements into an immutable sorted map. @param comparator key comparator for the sorted map @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @param mergeFunction function to resolve conflicts between values @return Collector that accumulates elements into an ImmutableSortedMap
2395 Removes and returns the maximum element from the queue. Returns null if the queue is empty.
2396 Removes and returns the maximum element from the queue. Throws NoSuchElementException if the queue is empty. @return The removed maximum element
2397 Converts the iterable to an immutable set. @return ImmutableSet containing all elements from the delegate iterable
2398 Checks if this type is a supertype of the given type. @param type the TypeToken to compare against @return true if this type is a supertype, false otherwise
2399 Checks if this type token represents a supertype of the specified type. @param type the type to check against @return true if this type is a supertype, false otherwise
2400 Checks if this type token is a subtype of another type. @param type the TypeToken to check against @return true if this type is a subtype, false otherwise
2401 Drains reference queues for keys and values. Checks and processes weak references to reclaim entries safely.
2402 Filters a BiMap by keys using a predicate. @param unfiltered the original bi-map to filter @param keyPredicate condition for keys to satisfy @return a new FilteredEntryBiMap with filtered entries
2403 Filters entries of a BiMap based on a value predicate. @param unfiltered the original bi-map to filter @param valuePredicate condition to evaluate on entry values @return a new FilteredEntryBiMap with filtered entries
2404 Creates an immutable sorted multiset from an iterator using natural ordering. @param elements iterator providing elements to add @return ImmutableSortedMultiset instance with sorted elements
2405 Converts a class to its generic type token. Handles array and parameterized types. @param cls the class to convert @return TypeToken representing the generic type
2406 Converts the iterable to an immutable multiset. @return ImmutableMultiset containing elements from the delegate iterable or empty if none
2407 Builds an immutable multiset from the current contents. @return ImmutableMultiset containing elements added to this builder
2408 Computes the Cartesian product of multiple lists. @param lists input lists representing dimensions @return List of Lists containing all combinations
2409 Parses a cache specification string into a CacheBuilderSpec. @param cacheBuilderSpecification string representation of cache settings @return CacheBuilderSpec object configured from the input string
2410 Converts the iterable to an immutable list. @return ImmutableList containing all elements from the delegate iterable
2411 Lists files in a directory. @param dir directory path to list files from @return ImmutableList of file paths or empty if none found @throws IOException if an I/O error occurs
2412 Constructs an InternetDomainName object by normalizing and validating the given domain name. @param name raw domain name string to be processed
2413 Aggregates multiple ListenableFutures into a single future. @param futures iterable of ListenableFutures to aggregate @return ListenableFuture containing results from all input futures
2414 Combines multiple listenable futures into a single combiner. @param futures iterable of listenable futures to combine @return FutureCombiner that aggregates all input futures
2415 Combines multiple listenable futures to wait for all successful completions. @param futures iterable of futures to combine @return FutureCombiner that aggregates results from all futures
2416 Aggregates results from a collection of ListenableFutures. @param futures iterable of ListenableFutures to aggregate @return ListenableFuture containing list of results, ignoring failures
2417 Converts an iterable of ListenableFutures to a GWT-compatible array. @param futures iterable of ListenableFutures @return array of ListenableFutures
2418 Creates an immutable range set from a collection of ranges. @param ranges iterable of Range objects to be combined @return ImmutableRangeSet containing the union of all input ranges
2419 Computes the intersection of this range set with another. @param other the RangeSet to intersect with @return ImmutableRangeSet representing the intersection
2420 Computes the difference between this set and another RangeSet. @param other the RangeSet to subtract from this set @return a new ImmutableRangeSet representing the difference
2421 Creates a collector for an immutable bi-directional map from input elements. @param keyFunction extracts keys from input elements @param valueFunction extracts values from input elements @return Collector for ImmutableBiMap
2422 Creates an immutable map from the given class-instance mapping. @param map source map with class types as keys and corresponding instances as values @return ImmutableClassToInstanceMap instance based on input map
2423 Creates an immutable copy of the given multimap. @param multimap the multimap to copy @return a new ImmutableListMultimap instance with the same key-value pairs
2424 Builds an ImmutableMultimap from added entries. @return the constructed ImmutableMultimap
2425 Merges a range with a value using a remapping function. @param range the range to merge @param value the value associated with the range @param remappingFunction function to resolve conflicts between existing and new values
2426 Builds an immutable sorted set multimap. @return ImmutableSetMultimap instance with entries sorted by key and values
2427 Creates an immutable map from iterator values with unique keys. @param values iterator of values to be indexed @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or throws on duplicates
2428 Generates all possible combinations of a given set with a specified size. @param set the input set from which to generate combinations @param size the size of each combination @return a set containing all combinations of the specified size
2429 Creates an immutable copy of a given graph. @param graph the source graph to copy @return ImmutableGraph instance representing the copied graph
2430 Creates a new TypeResolver with additional type mappings. @param mappings map of TypeVariableKey to Type representing new bindings @return new TypeResolver instance including updated mappings
2431 Converts an iterable of keys and a value function into an ImmutableMap. @param keys Iterable providing the map keys @param valueFunction Function to compute values from keys @return ImmutableMap with keys mapped to their computed values
2432 Retrieves and removes the minimum element from the queue. @return the smallest element or null if the queue is empty
2433 Adds an element to the priority queue. @param element the element to add @return true if addition is successful, false if it exceeds max size and element is removed
2434 Retrieves all ClassInfo objects from resources. @return Immutable set of ClassInfo instances
2435 Retrieves top-level class information from resources. @return ImmutableSet of ClassInfo objects representing top-level classes
2436 Performs a breadth-first traversal starting from specified nodes. @param startNodes initial set of nodes to traverse from @return Iterable representing the traversal order
2437 Performs a pre-order depth-first traversal starting from given nodes. @param startNodes initial set of nodes to traverse @return Iterable of nodes in pre-order sequence
2438 Performs depth-first post-order traversal on validated nodes. @param startNodes initial set of nodes to traverse @return Iterable of traversed nodes in post-order
2439 Scans specified files for resources. @param scannedFiles set of already scanned files @return ImmutableSet of ResourceInfo objects found @throws IOException if an I/O error occurs during scanning
2440 Specializes the invokable to a more specific return type. @param returnType the expected return type @return specialized Invokable with the specified return type @throws IllegalArgumentException if returnType is not a supertype of the current return type
2441 Attempts to safely drain reference queues for cache entries. Acquires a lock before draining and ensures it's released afterward.
2442 Resolves a given Java Type to its actual representation. @param type the Type to resolve @return resolved Type or original if not applicable
2443 Checks if the runtime type matches a formal type, handling wildcard types. @param formalType the formal type to compare against @param declaration type variable with declared bounds @return true if the runtime type is compatible with the formal type
2444 Canonicalizes a type argument. Handles wildcard types by removing redundant bounds; otherwise, recursively canonicalizes wildcards. @param declaration type variable with declared bounds @param typeArg the type argument to canonicalize @return canonicalized Type
2445 Creates a CacheBuilder instance from a specification string. @param spec cache configuration specification @return configured CacheBuilder object
2446 Disables caching by setting maximum size to zero. @return CacheBuilderSpec object with disabled caching
2447 Creates an InternetDomainName object from a string. @param domain raw domain name string to be processed @return InternetDomainName object
2448 Converts futures to complete in order. @param futures iterable of ListenableFutures @return immutable list of ListenableFutures that complete in order
2449 Computes the union of this range set with another. @param other RangeSet to be combined with this one @return ImmutableRangeSet containing all ranges from both sets
2450 Creates an immutable copy of the given multimap. @param multimap the multimap to copy @return a new ImmutableMultimap instance with the same key-value pairs
2451 Constructs an ImmutableMultimap from added entries. @return the constructed ImmutableMultimap instance
2452 Creates a collector that builds an ImmutableMap from elements. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @return Collector building an ImmutableMap with extracted keys and values
2453 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 the key to add @param v1 the value associated with the key @return ImmutableSetMultimap containing the specified key-value pair
2454 Creates an ImmutableSetMultimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableSetMultimap containing the specified key-value pairs
2455 Creates an ImmutableSetMultimap from six key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @return ImmutableSetMultimap containing the specified key-value pairs
2456 Creates an ImmutableSetMultimap from four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableSetMultimap containing the specified entries
2457 Creates an ImmutableSetMultimap from five key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @param k5 fifth key @param v5 value associated with the fifth key @return ImmutableSetMultimap containing the specified entries
2458 Creates an immutable set multimap from iterable of entries. @param entries iterable containing key-value pairs to add @return ImmutableSetMultimap instance with provided entries
2459 Creates an immutable set multimap from a given multimap with unordered values. @param multimap source multimap to copy entries from @return ImmutableSetMultimap instance containing the copied entries
2460 Creates an immutable map from iterable values with unique keys. @param values iterable of values to be indexed @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or throws on duplicates
2461 Creates a new ArrayTable with specified row and column keys. @param rowKeys iterable providing row identifiers @param columnKeys iterable providing column identifiers @return initialized ArrayTable instance
2462 Generates the power set of the given set. @param set input set to generate subsets from @return a set containing all possible subsets of the input set
2463 Creates a RegularImmutableTable based on ordered components. @param cellList list of cells with row, column, and value @param rowSpace set of all possible rows @param columnSpace set of all possible columns @return DenseImmutableTable or SparseImmutableTable depending on density
2464 Constructs an immutable graph from the current mutable configuration. @return ImmutableGraph instance representing the finalized graph structure
2465 Creates an immutable copy of a given network. @param network the source network to copy @return an ImmutableNetwork instance; if input is already immutable, returns it directly
2466 Creates an immutable copy of a given ValueGraph. @param graph the source graph to copy from @return ImmutableValueGraph instance
2467 Creates a covariant TypeResolver for a given context type. @param contextType the Java type to analyze @return TypeResolver instance with mappings from the context type
2468 Creates a TypeResolver for the given type, capturing wildcards. @param contextType the Java type to resolve @return TypeResolver with captured wildcard types
2469 Creates a TypeResolver with type mappings between formal and actual types. @param formal source type @param actual target type @return new TypeResolver instance with populated mappings
2470 Converts the iterable to an ImmutableMap using a value function. @param valueFunction Function to compute values from elements @return ImmutableMap with elements as keys and computed values
2471 Creates a MinMaxPriorityQueue initialized with specified elements. @param initialContents initial elements to add to the queue @return configured MinMaxPriorityQueue instance
2472 Adds an element to the priority queue. @param element the element to add @return always true, as elements are always added with overflow handling
2473 Retrieves top-level classes by package name. @param packageName the package to filter classes by @return ImmutableSet of ClassInfo objects in the specified package
2474 Retrieves top-level classes within a specified package recursively. @param packageName the base package name to search under @return ImmutableSet of ClassInfo objects matching the package
2475 Performs a breadth-first traversal starting from a single node. @param startNode initial node to traverse from @return Iterable representing the traversal order
2476 Initiates pre-order depth-first traversal from a single node. @param startNode the starting node for traversal @return Iterable of nodes in pre-order sequence
2477 Initiates depth-first post-order traversal from a single node. @param startNode the starting node for traversal @return Iterable of traversed nodes in post-order
2478 Scans all resources without prior exclusions. @return ImmutableSet of ResourceInfo objects found @throws IOException if an I/O error occurs during scanning
2479 Constructs a ClassPath instance from the specified class loader. @param classloader the ClassLoader to inspect for resources @return ClassPath object containing all discovered resources @throws IOException if an I/O error occurs during resource scanning
2480 Specializes the invokable to a more specific return type. @param returnType the expected return type class @return specialized Invokable with the specified return type
2481 Retrieves a live value from a cache entry. @param entry the cache entry to retrieve from @param now current time in nanoseconds @return the live value or null if expired or invalid
2482 Performs pre-write cleanup operations. @param now current time in nanoseconds
2483 Resolves a type variable to its actual type. @param var the type variable to resolve @param forDependants table for resolving dependent types @return resolved Type or original if unresolved
2484 Retrieves the generic return type of the method or constructor. @return ParameterizedType if generic, otherwise raw Class
2485 Provides a serializable representation of the runtime type. @return Serializable TypeToken instance representing the resolved type
2486 Creates a traverser for navigating file trees. @return Traverser object configured to traverse file paths
2487 Constructs a valid HostSpecifier from a string. @param specifier host specification string @return HostSpecifier object or throws IllegalArgumentException if invalid
2488 Finds an ancestor domain by removing specified levels. @param levels number of hierarchical levels to ascend @return InternetDomainName object representing the ancestor domain
2489 Creates a child domain by appending a subdomain to the current domain. @param leftParts subdomain parts to be added @return InternetDomainName object representing the child domain
2490 Validates if a given string is a valid internet domain name. @param name the domain name to validate @return true if valid, false otherwise
2491 Creates a collector to flatten elements into an immutable list-based multimap. @param keyFunction extracts the key from each element @param valuesFunction generates a stream of values for each key @return Collector that accumulates elements into ImmutableListMultimap
2492 Creates an immutable multimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableListMultimap containing the key-value pair
2493 Creates an ImmutableListMultimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableMultimap containing the specified key-value pairs
2494 Creates an ImmutableListMultimap with three key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @return an ImmutableMultimap containing the specified key-value pairs
2495 Creates an ImmutableListMultimap with four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableMultimap containing the specified entries
2496 Creates an ImmutableListMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap entries @param v1,v2,v3,v4,v5 values associated with each key @return ImmutableMultimap containing the specified key-value pairs
2497 Creates an immutable list multimap from the given iterable of entries. @param entries iterable containing key-value pairs to add @return a new ImmutableListMultimap instance with the provided entries
2498 Indexes values by applying a key function. @param values iterator of values to index @param keyFunction function to extract keys from values @return ImmutableMultimap with indexed values
2499 Creates a new MediaType with additional parameters. @param attribute parameter name to add @param values iterable of parameter values @return new MediaType instance with updated parameters
2500 Converts a stream of elements into an immutable set multimap. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return Collector for building ImmutableSetMultimap
2501 Returns the inverted multimap with keys and values swapped. Uses cached result if available to optimize performance.
2502 Marks the service manager as ready. Checks for race conditions where services transition before initialization. Throws an exception if services are in unexpected states.
2503 Retrieves services grouped by their current state. @return ImmutableSetMultimap with State as key and Service as value
2504 Creates an immutable map from iterable values with unique keys. @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or throws on duplicates
2505 Creates an ArrayTable from another Table. @param table source table to initialize from @return ArrayTable instance initialized with the provided table's data
2506 Builds an immutable network from the mutable one. @return ImmutableNetwork instance created from mutableNetwork
2507 Builds an immutable value graph from the mutable one. @return ImmutableValueGraph instance
2508 Constructs a TypeToken for the given declaring class. @param declaringClass the class declaring the generic type
2509 Creates an empty MinMaxPriorityQueue. @return configured MinMaxPriorityQueue instance
2510 Creates a MinMaxPriorityQueue with natural ordering. @param initialContents elements to initialize the queue @return configured MinMaxPriorityQueue instance
2511 Finds all nodes reachable from a given node in a graph. @param graph the graph to traverse @param node the starting node for traversal @return an immutable set of reachable nodes
2512 Retrieves an entry by key. Handles null keys by returning null. @param key the search key @return the matching ReferenceEntry or null if not found
2513 Checks if a cache entry is live. @param entry the cache entry to check @param now current time in nanoseconds @return true if the entry is live and valid, false otherwise
2514 Inserts a new LoadingValueReference for a key. @param key the key to insert @param hash the hash of the key @param checkTime whether to check refresh time @return LoadingValueReference or null if entry is already loading or recent
2515 Performs cleanup after a read operation. Triggers cleanup periodically based on read count threshold.
2516 Resolves a type variable to its actual type. @param var the type variable to resolve @param forDependants table for resolving dependent types @return resolved Type or original if unresolved
2517 Executes a combining callable with specified executor and manages resources. @param combiningCallable task to execute for combining results @param executor executor for task execution @return ClosingFuture representing the combined result with resource management
2518 Executes an asynchronous callable combining multiple futures. @param combiningCallable the callable to execute upon completion @param executor the executor for running the callable @return ClosingFuture representing the combined result
2519 Constructs a HostSpecifier from a string. @param specifier host specification string @return HostSpecifier object @throws ParseException if the specifier is invalid
2520 Validates a host specification string. @param specifier host specification string @return true if valid, false otherwise
2521 Retrieves the public suffix of the domain. @return InternetDomainName object representing the public suffix or null if none exists
2522 Returns the top private domain. @return InternetDomainName object representing the top private domain
2523 Retrieves the registry suffix of the domain. Uses cached index if available, returns null if no suffix exists. @return InternetDomainName object representing the registry suffix or null
2524 Returns the top-level domain under the registry suffix. @return InternetDomainName object representing the top-level domain
2525 Retrieves the parent domain of the current domain. Throws IllegalStateException if the domain has no parent. @return InternetDomainName object representing the parent domain
2526 Creates a Collector for grouping elements into an ImmutableListMultimap. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @return Collector that accumulates elements into an ImmutableListMultimap
2527 Creates an immutable multimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableMultimap containing the key-value pair
2528 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @return ImmutableMultimap containing specified key-value pairs
2529 Creates an ImmutableMultimap with three key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @return an ImmutableMultimap containing the specified key-value pairs
2530 Creates an immutable multimap with four key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key @param k3 third key @param v3 value associated with the third key @param k4 fourth key @param v4 value associated with the fourth key @return ImmutableMultimap containing the specified entries
2531 Creates an ImmutableMultimap from five key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap entries @param v1,v2,v3,v4,v5 values associated with each key @return ImmutableMultimap containing the specified key-value pairs
2532 Creates an immutable multimap from the given iterable of entries. @param entries iterable containing key-value pairs to add @return a new ImmutableMultimap instance with the provided entries
2533 Returns an inverted version of the multimap. Uses cached result if available to improve performance. @return a new ImmutableListMultimap with keys and values swapped
2534 Indexes iterable values by applying a key function. @param values iterable of values to index @param keyFunction function to extract keys from values @return ImmutableListMultimap with indexed values
2535 Adds a single parameter to the media type. @param attribute parameter name @param value parameter value @return new MediaType instance with added parameter
2536 Creates a new MediaType with additional parameters. @param parameters key-value pairs to add or update @return new MediaType instance with updated parameters
2537 Creates a MediaType instance without character set information. @param type primary MIME type (e.g., "application") @param subtype MIME subtype (e.g., "json") @return MediaType object with no parsed charset
2538 Parses a string into a MediaType. @param input the media type string to parse @return MediaType object representing the parsed type @throws IllegalArgumentException if parsing fails
2539 Initializes the ServiceManager with a collection of services. @param services iterable of services to manage Logs a warning if no services are provided and substitutes a placeholder service.
2540 Creates a collector to flatten elements into an ImmutableSetMultimap. @param keyFunction extracts the key from each element @param valuesFunction generates a stream of values for each key @return Collector that accumulates elements into an ImmutableSetMultimap
2541 Resolves a given Java Type to its actual representation. @param type the Type to resolve @return resolved TypeToken or original if not applicable
2542 Creates a MinMaxPriorityQueue with natural ordering. @param <E> type of elements, must extend Comparable @return configured MinMaxPriorityQueue instance
2543 Refreshes the value for a given key using the provided loader. @param key the cache key @param hash hash code of the key @param loader CacheLoader to load the new value @param checkTime whether to check refresh time @return refreshed value or null if loading fails or is not done
2544 Retrieves and records statistics for a cache value. Handles successful load, null checks, and exception recording. @param key the entry's key @param hash the entry's hash code @param loadingValueReference reference to the loading value @param newValue future representing the new value @return the loaded value @throws ExecutionException if computation threw an exception
2545 Advances to the next valid cache entry. @param entry the cache entry to check @return true if a valid entry is found, false otherwise
2546 Checks if the segment contains a specific value. @param value the value to search for @return true if the value is found, false otherwise
2547 Indexes elements by applying a key function. @param keyFunction function to extract keys from elements @return ImmutableListMultimap with indexed elements
2548 Sets the character set for this media type. @param charset the character set to use @return new MediaType instance with the specified character set
2549 Returns a new MediaType instance without parameters. @return MediaType object with no parsed charset if parameters are empty; otherwise, creates a new one
2550 Creates an application media type. @param subtype MIME subtype (e.g., "json") @return MediaType object representing the application type with no charset
2551 Creates a MediaType instance for audio types. @param subtype MIME subtype of the audio (e.g., "mpeg") @return MediaType object representing the audio type
2552 Creates a font media type with specified subtype. @param subtype MIME subtype (e.g., "woff", "ttf") @return Font MediaType object
2553 Creates an image MediaType instance. @param subtype MIME subtype (e.g., "png", "jpeg") @return MediaType object representing the image type
2554 Creates a text-based MediaType. @param subtype MIME subtype (e.g., "plain", "html") @return MediaType object with type "text"
2555 Creates a video media type. @param subtype MIME subtype (e.g., "mp4", "avi") @return MediaType object representing the video type
2556 Builds an immutable table from added cells. @return ImmutableTable instance based on the number of cells
2557 Retrieves the generic superclass of a type. Handles TypeVariable and WildcardType cases. @return TypeToken representing the generic superclass or null if none exists
2558 Retrieves generic interfaces for the runtime type. @return ImmutableList of TypeTokens representing generic interfaces
2559 Retrieves the closest supertype of a given class. @param superclass the superclass to check against @return TypeToken representing the closest supertype or throws IllegalArgumentException if not applicable
2560 Loads multiple cache entries using the provided loader. @param keys set of keys to load @param loader CacheLoader instance for loading values @return map of loaded key-value pairs or null if any key is invalid @throws ExecutionException on failure during loading
2561 Advances to the next valid entry in the cache chain. @return true if a valid entry is found, false otherwise
2562 Constructs an immutable table from added cells. @return ImmutableTable instance or throws exception if invalid
2563 Advances to the next valid cache entry in the table. @return true if a valid entry is found, false otherwise
2564 Retrieves a TypeToken for the specified subclass. @param subclass the subclass to create a TypeToken for @return TypeToken representing the subclass @throws IllegalArgumentException if subclass isn't valid or not a subtype
2565 Creates an immutable table from another table. @param table the source table to copy @return ImmutableTable instance or throws exception if invalid
2566 Collects elements into an ImmutableTable. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @return Collector for building ImmutableTable
