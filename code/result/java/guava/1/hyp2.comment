1 Sets the row comparator for table ordering. @param rowComparator Comparator for rows, cannot be null. @return this Builder for chaining.
2 Orders columns using the provided comparator. @param columnComparator Comparator for column ordering. @return Returns the builder instance for chaining.
3 Merges multiple sorted iterables into a single sorted iterable. @param iterables Iterables to merge, each sorted. @param comparator Comparator for sorting elements. @return A new sorted Iterable.
4 Returns the index of the first element matching the predicate. @param iterator Iterator to search. @param predicate Predicate to apply to each element.
5 Creates a SortedSetMultimapBuilder with a custom comparator for values. @param comparator Comparator for the values in the sorted set.
6 Creates a SetMultimapBuilder with Enum sets as values. @param valueClass Enum class for the values in the multimap.
7 Returns a view of the union of two sets. @param set1 The first set. @param set2 The second set.
8 Returns the intersection of two sets. @param set1 The first set. @param set2 The second set. @return A SetView containing elements present in both sets.
9 Returns a SetView containing elements of set1 that are not in set2. @param set1 The first set. @param set2 The second set.
10 Computes the symmetric difference of two sets. @param set1 The first set. @param set2 The second set. @return A SetView containing elements in either set, but not both.
11 Finds the first occurrence of target boolean array in array. @param array The array to search within. @param target The boolean array to find. @return Index of first match, or -1 if not found.
12 Finds the first index of target array within the given array. @param array Byte array to search within. @param target Byte array to search for. @return Index of first match, or -1 if not found.
13 Finds the first occurrence of target within array. @param array char array to search within @param target char array to search for @return Index of first occurrence, or -1 if not found.
14 Finds the index of the target array within the array. @param array Array to search within. @param target Array to search for. Returns -1 if not found.
15 Finds the index of the target array within the given array. @param array Array to search within. @param target Array to search for. @return Index of target or -1 if not found.
16 Finds the index of the target array within the given array. @param array The array to search within. @param target The array to search for. @return Index of target if found, -1 otherwise.
17 Finds the index of the first occurrence of target in array. @param array The array to search within. @param target The array to search for. @return Index of the first match, or -1 if not found.
18 Finds the first occurrence of target in array. @param array The array to search. @param target The array to search for. @return Index of first occurrence or -1 if not found.
19 Creates a new Guard with the given condition. @param isSatisfied Supplier that provides the satisfaction condition.
20 Returns the default value for a given type. @param type The class of the default value to retrieve. @return Default value or null if not a primitive.
21 Configures how null values are represented during joining. @param nullText String to use for null values; cannot be null. @return A Joiner instance with custom null representation.
22 Constructs a ToStringHelper with the given class name. @param className The class name to use for the helper.
23 Extracts present values from an Iterable of Optionals. @param optionals Iterable of Optionals to process. @return An Iterable containing the present values.
24 Splits a CharSequence into an Iterable of Strings. @param sequence The sequence to split. @return An Iterable containing the split strings.
25 Pads a string with a char to reach a minimum length. @param string The string to pad. @param minLength The minimum length. @param padChar The padding character.
26 Pads a string with `padChar` to reach `minLength`. @param string String to pad. @param minLength Minimum length. @param padChar Padding character.
27 Throws an exception if it is an instance of the specified type. @param throwable The throwable to check. @param declaredType The class of the expected exception type.
28 Throws the throwable if it's a RuntimeException or Error. @param throwable The throwable to check and potentially re-throw.
29 Returns a list of throwables in the causal chain. @param throwable The throwable to analyze. @return Unmodifiable list of throwables in the chain.
30 Creates an AsyncCacheLoader that reloads values asynchronously. @param loader The CacheLoader to use for loading. @param executor Executor for asynchronous reloading. @return AsyncCacheLoader with delegated load/reload/loadAll.
31 Wraps a listener to execute removal notifications asynchronously. @param listener Listener to be wrapped. @param executor Executor to run the notification. @return Asynchronous RemovalListener.
32 Returns a map representing the specified column. @param columnKey The key of the column to retrieve. @return Map for the column or an empty map if not found.
33 Returns a map representing the row with the given row key. @param rowKey The key for the row to retrieve. @return A map of column keys to values for the row.
34 Maps elements from a Spliterator using a Function. @param fromSpliterator Source Spliterator. @param function Function to apply to each element. @return New Spliterator with mapped elements.
35 Filters elements from a Spliterator based on a predicate. @param fromSpliterator Source Spliterator. @param predicate Predicate to test elements. @return A new Spliterator containing filtered elements.
36 Checks if a collection contains an object, safely handling exceptions. @param collection Collection to check. @param object Object to search for. @return True if the collection contains the object, false otherwise.
37 Safely removes an object from a collection. @param collection Collection to remove from; cannot be null. @param object Object to remove. @return True if removed, false otherwise.
38 Checks if an iterable is in ascending order based on the comparator. @param iterable Iterable to check. @param comparator Comparator to define order. @return True if in order, false otherwise.
39 Checks if an iterable is in strict ascending order based on comparator. @param iterable Iterable to check. @param comparator Comparator for ordering elements.
40 Returns a comparator that orders Optionals by emptiness, then by value. @param valueComparator Comparator for the values within the Optionals.
41 Creates a comparator that orders Optionals based on value, nulls last. @param valueComparator Comparator for the underlying values.
42 Returns a view of the set containing elements less than `toElement`. @param toElement Element to which the head set is bounded. @param inclusive Whether `toElement` is included in the head set.
43 Returns a view of the set whose elements are >= fromElement. @param fromElement The lower bound of the tail set. @param inclusive Whether fromElement is inclusive.
44 Adds an element to the queue. Removes the oldest if full. @param e The element to add. @return True.
45 Returns the input FluentIterable. @param iterable The iterable to return.
46 Adds an element to the list. @param element The element to add. @return A reference to this builder.
47 Orders keys using the provided comparator. @param keyComparator Comparator for ordering keys. @return This builder for method chaining.
48 Orders the values by the given comparator. @param valueComparator Comparator for ordering values. @return This builder for method chaining.
49 Adds an element to the multiset. @param element The element to add; cannot be null. @return The Builder instance for chaining.
50 Adds specified number of copies of an element. @param element The element to add. @param occurrences The number of copies to add.
51 Sets the count of an element in the multiset. @param element Element whose count is to be set. @param count The new count for the element.
52 Creates a Collector to build an ImmutableSortedMultiset. @param comparator Comparator for the multiset elements. @param elementFunction Function to extract element from input. @param countFunction Function to get count for each element.
53 Returns a view of the set containing elements up to `toElement`. @param toElement Element to end the view; may be inclusive. @param inclusive Whether `toElement` is included in the view.
54 Returns a sorted set containing elements from {@code fromElement} upwards. @param fromElement The lowest element to be included in the returned set. @param inclusive Whether the {@code fromElement} is included.
55 Returns an unmodifiable iterable from the given iterable. @param iterable The iterable to make unmodifiable. @return An unmodifiable view of the input iterable.
56 Returns an {@code Iterable} that throws {@code UnsupportedOperationException} if modified. @param iterable Immutable collection to wrap. @return An unmodifiable {@code Iterable}.
57 Removes and returns the first element matching the predicate. @param removeFrom Iterable to remove from. @param predicate Predicate to match elements. @return Matched element or null if none found.
58 Returns an Iterable that repeatedly cycles through the input. @param iterable The iterable to cycle. @return A cycled iterable.
59 Filters an iterable based on a predicate. @param unfiltered Iterable to filter. @param retainIfTrue Predicate to test each element. @return Filtered iterable.
60 Transforms an iterable by applying a function to each element. @param fromIterable Iterable to transform. @param function Function to apply to each element. @return Transformed Iterable.
61 Returns an Iterable that consumes elements as they are iterated. @param iterable The iterable to consume. @return A consuming iterable.
62 Creates an unmodifiable iterator from the given iterator. @param iterator The iterator to wrap in an unmodifiable view.
63 Returns an unmodifiable iterator. @param iterator The iterator to unmodifiable. @return The iterator.
64 Removes all elements from iterator that are present in collection. @param removeFrom Iterator to remove elements from. @param elementsToRemove Collection of elements to remove. @return True if any elements were removed.
65 Removes elements from an iterator if the predicate is true. @param removeFrom Iterator to remove from. @param predicate Predicate to test elements. @return True if any elements were removed.
66 Retains elements from iterator if they are present in collection. @param removeFrom Iterator to modify. @param elementsToRetain Collection to check for presence. @return True if any elements were removed.
67 Adds all elements from an iterator to a collection. @param addTo Collection to add elements to. @param iterator Iterator providing elements to add. @return True if the collection was modified.
68 Creates a cyclic iterator from the given iterable. @param iterable The iterable to cycle through. @return A cyclic iterator.
69 Filters an iterator, retaining elements that satisfy the predicate. @param unfiltered Iterator to filter. @param retainIfTrue Predicate to apply to each element. @return Filtered UnmodifiableIterator.
70 Checks if all elements in the iterator satisfy the predicate. @param iterator Iterator of elements to check. @param predicate Predicate to apply to each element.
71 Finds the first element in the iterator that satisfies the predicate. @param iterator Iterator to search. @param predicate Predicate to apply to each element. @return Element matching the predicate, or throws NoSuchElementException.
72 Transforms an iterator by applying a function to each element. @param fromIterator Iterator to transform. @param function Function to apply to each element. @return New iterator with transformed elements.
73 Returns an iterator that removes elements from the original. @param iterator Iterator to consume; must not be null. @return An iterator that removes elements.
74 Clears an iterator by removing all elements. @param iterator The iterator to be cleared.
75 Creates an unmodifiable iterator from an enumeration. @param enumeration The enumeration to wrap. @return An UnmodifiableIterator.
76 Returns the provided PeekingIterator, ensuring it's not null. @param iterator The PeekingIterator to return.
77 Creates a new EnumMap instance for the given enum type. @param type The enum type for the new EnumMap. @return A new EnumMap of the specified type.
78 Creates an unmodifiable Entry from the given Entry. @param entry The Entry to wrap in an unmodifiable view. @return An unmodifiable Entry.
79 Transforms a map entry using the given transformer. @param transformer Transforms key-value pairs. @param entry The entry to transform. @return A new Entry with the transformed value.
80 Creates a Function that transforms a Map.Entry using the given transformer. @param transformer EntryTransformer to apply to each entry. @return A Function that transforms Entry<K, V1> to Entry<K, V2>.
81 Safely retrieves a value from a map by key; returns null if error. @param map The map to retrieve from. @param key The key to look up.
82 Checks if a map contains a key, safely handling exceptions. @param map The map to check. @param key The key to check for. @return True if the map contains the key, false otherwise.
83 Safely removes a key-value pair from a map. @param map The map to remove from. @param key The key to remove. Returns value or null if error.
84 Applies the provided action to each key-value pair in the multimap. @param action BiConsumer to execute for each entry.
85 Creates a MultimapBuilderWithKeys using a provided comparator. @param comparator Comparator for ordering the keys. @return A MultimapBuilderWithKeys configured with the comparator.
86 Creates a MultimapBuilder with Enum keys. @param keyClass Enum class for keys. @return MultimapBuilder with Enum keys.
87 Returns an unmodifiable view of the given immutable multimap. @param delegate The immutable multimap to view. @return An unmodifiable Multimap.
88 Returns an unmodifiable SetMultimap. @param delegate The ImmutableSetMultimap to wrap. @return An unmodifiable SetMultimap.
89 Returns an unmodifiable ListMultimap. @param delegate The immutable ListMultimap to wrap. @return An unmodifiable ListMultimap.
90 Applies the consumer to each entry (element, count) in the multiset. @param action The consumer to apply to each entry.
91 Applies the consumer to each element in the multiset, repeated by its count. @param action The consumer to apply to each element.
92 Returns an unmodifiable Multiset from an ImmutableMultiset. @param multiset The ImmutableMultiset to wrap. @return An unmodifiable Multiset.
93 Returns the union of two multisets, taking the maximum count. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A new Multiset representing the union.
94 Returns the intersection of two multisets. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A new Multiset containing common elements.
95 Returns a multiset containing the sum of two multisets. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A new multiset representing the sum.
96 Returns a multiset containing elements in multiset1 but not in multiset2. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A new multiset representing the difference.
97 Checks if the superMultiset contains occurrences of all elements in subMultiset. @param superMultiset The multiset to check against. @param subMultiset The multiset to check for containment. @return True if superMultiset contains all occurrences of subMultiset.
98 Retains occurrences of elements based on another multiset. @param multisetToModify Multiset to modify. @param occurrencesToRetain Multiset defining occurrences to retain. @return True if the multiset was modified.
99 Removes occurrences of elements from a multiset. @param multisetToModify Multiset to modify. @param occurrencesToRemove Elements to remove. @return True if any elements were removed.
100 Retains elements present in the specified collection. @param elementsToRetain Collection of elements to keep. @return True if the multiset was modified.
101 Returns the input ordering, ensuring it's not null. @param ordering The Ordering to return, must not be null. @return The same Ordering instance.
102 Drains elements from a BlockingQueue into a Collection. @param q queue to drain from, @param buffer destination collection @param numElements number of elements to drain, @param timeout timeout @return number of elements added to the buffer
103 Drains elements from a BlockingQueue into a Collection. @param q queue to drain from, @param buffer destination, @param numElements number of elements to drain, @param timeout timeout, @param unit time unit @return number of elements added to the buffer
104 Checks if a value is within the range. @param value The value to check. @return True if the value is within the range.
105 Creates a new TreeSet with the specified comparator. @param comparator Comparator used to order the elements. @return New TreeSet instance.
106 Zips two streams into a stream of results using a BiFunction. @param streamA First stream. @param streamB Second stream. @param function Function to apply to elements from both streams. @return Stream of results.
107 Maps a stream, applying a function with index. @param stream The input stream. @param function The function to apply with index. @return A new stream with mapped elements.
108 Maps an IntStream to a Stream of type R with index. @param stream The input IntStream. @param function The mapping function.
109 Maps a LongStream to a Stream of R, applying a function with index. @param stream The LongStream to map. @param function The function to apply, receiving long & index.
110 Maps a DoubleStream to a Stream of type R with index. @param stream The DoubleStream to map. @param function The function to apply with index.
111 Merges a range with a value, applying a remapping function. @param range The range to merge. @param value The value to merge. @param remappingFunction Function to remap existing values.
112 Creates a TreeTraverser with a custom node-to-children function. @param nodeToChildrenFunction Function to get children of a node. @return A TreeTraverser using the provided function.
113 Performs a pre-order traversal of the tree, starting from root. @param root The root node of the tree to traverse. @return A FluentIterable containing the nodes in pre-order.
114 Performs a post-order traversal of the tree, starting from root. @param root The root node of the tree to traverse. @return A FluentIterable containing the nodes in post-order.
115 Performs a breadth-first traversal starting from the root. @param root The root node of the tree to traverse. @return A FluentIterable containing nodes in breadth-first order.
116 Adds a character escape mapping. @param c The character to escape. @param r The replacement string. @return A reference to this builder.
117 Adds an escape mapping for a character. @param c The character to escape. @param replacement The replacement string. @return this
118 Gets a code point at the specified index in a CharSequence. @param seq CharSequence to read from. @param index Index of the code point. @param end End index (exclusive).
119 Constructs a DeadEvent with a source and event. @param source The event source. @param event The event that could not be delivered.
120 Handles an exception thrown by a subscriber. @param e The thrown exception. @param context SubscriberExceptionContext for context.
121 Invokes the subscriber method with the given event. @param event The event object to pass to the method. @throws InvocationTargetException if method invocation fails.
122 Constructs a SubscriberExceptionContext with provided event details. @param eventBus EventBus instance. @param event Event object. @param subscriber Subscriber object. @param subscriberMethod Method invoked.
123 Returns a copy of the given immutable graph. @param graph The graph to copy; cannot be null. @return A copy of the input graph.
124 Returns a copy of the input network. @param network The network to copy; must not be null. @return A new ImmutableNetwork instance.
125 Returns a copy of the graph. @param graph The graph to copy. Must not be null. @return A copy of the input graph.
126 Visits the next node in the graph traversal. @param horizon Deque of iterators for node successors. @return Next node visited, or null if no more nodes.
127 Constructs a HashingInputStream with a hasher and input stream. @param hashFunction Hash function to use. @param in Input stream to hash.
128 Constructs an AppendableWriter with the given target. @param target The Appendable object to write to.
129 Creates a ByteSink that encodes data to a CharSink. @param encodedSink CharSink to encode to; cannot be null. @return ByteSink that writes to the provided CharSink.
130 Creates a ByteSource for decoding from a CharSource. @param encodedSource Source containing the encoded data. @return ByteSource that decodes from the CharSource.
131 Creates a CharSequenceReader with the given CharSequence. @param seq The CharSequence to read from; must not be null.
132 Copies characters from a Reader to a StringBuilder. @param from The Reader to copy from. @param to The StringBuilder to append to. @return The number of characters copied.
133 Copies characters from a Reader to a Writer. @param from The Reader to read from. @param to The Writer to write to. @return Total number of characters copied.
134 Skips characters from a Reader. @param reader The Reader to skip from. @param n The number of characters to skip.
135 Constructs a CountingInputStream wrapping the given input stream. @param in The InputStream to be wrapped. Must not be null.
136 Constructs a CountingOutputStream wrapping the given OutputStream. @param out The OutputStream to wrap; must not be null.
137 Creates a BufferedReader for reading a file with specified charset. @param file The file to read. @param charset The character encoding to use. @return BufferedReader for reading the file.
138 Creates a BufferedWriter for the given file and charset. @param file The file to write to. @param charset The character encoding to use.
139 Updates a file's timestamp. Creates if it doesn't exist. @param file The file to touch. @throws IOException If unable to update the file.
140 Creates parent directories for a file. @param file The file for which to create parent directories. @throws IOException If unable to create parent directories.
141 Extracts the file extension from a full file name. @param fullName The full path to the file. @return The file extension, or "" if no extension exists.
142 Extracts file name without extension. @param file The full file path. @return File name without extension.
143 Constructs a LittleEndianDataInputStream with the given input stream. @param in The input stream to read from; must not be null.
144 Constructs a LittleEndianDataOutputStream with the given OutputStream. @param out The OutputStream to wrap; must not be null.
145 Updates the last modified time of a file or creates it if absent. @param path The path to the file.
146 Constructs a PatternFilenameFilter with the given regex pattern. @param pattern The regex pattern to use for filtering.
147 Checks if a BigInteger is a power of two. @param x The BigInteger to check. @return True if x is a power of two, false otherwise.
148 Applies the consumer to each element of the array. @param consumer The consumer to apply to each element.
149 Applies the consumer to each element of the array. @param consumer The IntConsumer to apply to each element.
150 Applies the consumer to each element of the array. @param consumer The consumer to apply to each element.
151 Checks if a class is a wrapper type (e.g., Integer, Double). @param type Class to check. @return True if the class is a wrapper type, false otherwise.
152 Wraps a primitive type to its wrapper type, or returns the type itself. @param type The class to wrap. @return The wrapper class, or the original if not a primitive.
153 Unwraps a wrapper type to its primitive type, or returns the type itself. @param type The wrapper class to unwrap. @return The primitive type or the original type if not a wrapper.
154 Parses a string as an unsigned byte, throwing NumberFormatException if out of range. @param string The string to parse. @param radix The radix to use when parsing.
155 Parses a string as an unsigned integer with specified radix. @param string The string to parse. @param radix The radix of the number. @return The unsigned integer value.
156 Creates a new schedule with the given delay and time unit. @param delay The delay before the schedule starts. @param unit The time unit of the delay.
157 Atomically updates the value associated with the key. @param key The key of the entry to update. @param updaterFunction Function to apply to the current value. @return The updated value.
158 Atomically updates the value associated with the given key. @param key The key whose value is to be updated. @param updaterFunction Function to apply to the old value. @return The updated value.
159 Wraps a Callable to run asynchronously on a ListeningExecutorService. @param callable Callable task to execute. @param listeningExecutorService Executor for async execution.
160 Wraps a Callable to rename the thread before execution. @param callable The Callable to execute. @param nameSupplier Supplier for the thread name.
161 Wraps a Runnable to rename the thread before execution. @param task Runnable to execute. @param nameSupplier Supplier of the thread name.
162 Creates an AsyncClosingFunction from a given AsyncFunction. @param function The function to wrap. @return An AsyncClosingFunction that applies the function.
163 Returns the given FluentFuture. @param future The FluentFuture to return. @return The same FluentFuture.
164 Creates a Future that applies a function to the input Future's result. @param input The input Future. @param function Transformation function. @return A new Future with the transformed result.
165 Creates an Executor that renames threads using the given supplier. @param executor The underlying Executor. @param nameSupplier Supplier for the thread name.
166 Decorates an ExecutorService to rename threads using a supplier. @param service The ExecutorService to decorate. @param nameSupplier Supplier for the thread name. @return Decorated ExecutorService.
167 Decorates a ScheduledExecutorService to rename threads. @param service ExecutorService to decorate. @param nameSupplier Supplier for the thread name. @return Decorated ScheduledExecutorService.
168 Constructs a SequentialExecutor with the given Executor. @param executor The Executor to use for task execution.
169 Executes the given task, ensuring sequential execution. @param task The Runnable task to execute.
170 Sets the uncaught exception handler for created threads. @param uncaughtExceptionHandler Handler for uncaught exceptions @return A reference to this builder for chaining.
171 Sets the backing ThreadFactory. @param backingThreadFactory The ThreadFactory to use. @return this builder
172 Joins the given thread until it terminates or the timeout elapses. @param toJoin Thread to join. @param timeout Join timeout. @param unit Timeout unit.
173 Sets the ticker to expire cached values after a certain duration. @param ticker The ticker object to use for expiration. @return This CacheBuilder for chaining.
174 Sets the removal listener for the cache. @param listener RemovalListener to be invoked on removal. @return A reference to this CacheBuilder.
175 Calculates the mean of the dataset. @return The arithmetic mean, or 0.0 if the dataset is empty.
176 Returns the minimum value in the dataset. Throws IllegalStateException if the dataset is empty.
177 Returns the maximum value. Throws IllegalStateException if empty.
178 Calculates the mean of accumulated data. @return The calculated mean value.
179 Returns the minimum value observed. Throws exception if empty.
180 Returns the maximum value seen so far. @throws IllegalStateException if no data has been added.
181 Returns a CountDownLatch that completes when the list is closed.
182 Converts a string to lowercase if it contains uppercase chars. @param string The string to convert. @return The lowercase string if uppercase chars are present.
183 Converts a character to lowercase if uppercase. @param c the character to convert @return the lowercase character, or the original if not uppercase
184 Converts the input string to uppercase if it contains lowercase. @param string The string to convert. @return The uppercased string or the original if no lowercase.
185 Converts a lowercase ASCII char to uppercase, otherwise returns it. @param c the character to convert @return the uppercase equivalent or the original character
186 Truncates a CharSequence to maxLength, appending truncationIndicator. @param seq CharSequence to truncate @param maxLength max length, including indicator @param truncationIndicator string appended if truncated
187 Writes the stats to a ByteBuffer. @param buffer ByteBuffer to write to; must have enough capacity.
188 Constrains a short value within a specified range [min, max]. @param value short value to constrain @param min minimum value @param max maximum value
189 Sets the priority for threads created by this factory. @param priority The thread priority (MIN_PRIORITY to MAX_PRIORITY) @return this builder
190 Compares two CharSequences for equality, ignoring case. @param s1 the first CharSequence @param s2 the second CharSequence @return true if equal, false otherwise
191 Constructs a CacheStats object with the provided metrics. @param hitCount Cache hit count (must be >= 0)
192 Constructs a multimap from the given map. @param map The map to initialize from; must be empty.
193 Sets the internal map for the multimap. @param map The map to set; collections must be non-empty.
194 Constructs a multiset with the given backing map. @param backingMap The map to use as the backing map. Must be empty.
195 Returns a sub-set of elements within the specified range. @param fromElement Start element (inclusive). @param toElement End element (inclusive).
196 Creates an EnumMultiset for the given enum type. @param type The enum class for which to create the multiset.
197 Returns a subset of this set between {@code fromElement} and {@code toElement}. @param fromElement start element (inclusive) @param toElement end element (inclusive)
198 Partitions an iterable into lists of the specified size. @param iterable Iterable to partition. @param size The size of each sub-list. @return Iterable of Lists containing partitioned elements.
199 Partitions an iterable into lists of the specified size. @param iterable Iterable to partition. @param size The size of each partition list.
200 Sets the expected size of the queue. @param expectedSize The expected number of elements. @return This builder instance for chaining.
201 Sets the maximum size of the queue. @param maximumSize The maximum number of elements allowed. @return This builder for fluent configuration.
202 Creates a new AbstractStreamingHasher with specified chunk and buffer sizes. @param chunkSize Size of each data chunk. @param bufferSize Size of the internal buffer.
203 Ensures the value is not NaN and returns the larger of value and 0.0.
204 Creates an Is matcher that matches the specified character. @param match The character to match. @return An Is matcher instance.
205 Creates a matcher that rejects the specified character. @param match The character to exclude from matching.
206 Collapses matching characters in a sequence, replacing them. @param sequence CharSequence to process @param replacement char to replace matches with @return String with collapsed matching characters
207 Constructs a Converter with automatic null handling enabled.
208 Checks if two Wrapper objects are equal based on equivalence. @param obj The object to compare to. @return True if equal, false otherwise.
209 Checks if two objects are equivalent using the equivalent method. @param t The first object. @param u The second object. @return True if objects are equivalent, false otherwise.
210 Removes a WeakValueReference from the chain. @param key The key of the entry. @param hash Hash code of the key. @param valueReference The WeakValueReference to remove. @return True if removed, false otherwise.
211 Removes a value reference from the chain for testing. @param key The key to match. @param hash Hash code of the key. @param valueReference The WeakValueReference to remove. @return True if removed, false otherwise.
212 Checks if two iterators have the same elements in order. @param iterator1 First iterator @param iterator2 Second iterator @return True if iterators contain same elements, false otherwise.
213 Checks if this entry is equal to another multiset entry. @param object The object to compare to. @return True if equal, false otherwise.
214 Checks if traversal is possible without reusing edges. @param graph The graph to traverse. @param nextNode The next node in the traversal. @param previousNode The previous node in the traversal.
215 Computes hash code based on the equivalence relationship. @return Hash code value.
216 Constructs a FinalizablePhantomReference with a referent and queue. Cleans up the queue after construction.
217 Constructs a FinalizableSoftReference with referent and queue. Cleans up the queue after construction.
218 Creates a FinalizableWeakReference with a referent and queue. Cleans up the reference queue after creation.
219 Creates a ConstantFunction that always returns the given value. @param value The constant value to return. @return A ConstantFunction returning the provided value.
220 Extracts host and port from a bracketed host-port string. @param hostPortString bracketed host-port string (e.g., [host:port]) @return String array containing host and port.
221 Ensures IPv6 address has brackets. Throws exception if absent.
222 Decrements an InetAddress. Wraps if decrementing past 0. @param address InetAddress to decrement @return Decremented InetAddress object
223 Increments an InetAddress. Wraps if incrementing past max value. @param address InetAddress to increment @return Increment InetAddress object
224 Creates a dynamic proxy for the given interface type. @param interfaceType Interface type to proxy. @param handler InvocationHandler to handle method calls. @param <T> Type of the interface.
225 Captures the first type argument of the superclass. Throws IllegalArgumentException if superclass isn't parameterized.
226 Appends elements from an iterator to an appendable, separated by a separator. @param appendable Destination for the appended string. @param parts Iterator of elements to append. @return The appendable object.
227 Appends map entries to a StringBuilder. @param builder StringBuilder to append to @param entries Iterable of map entries @return The provided StringBuilder
228 Joins map entries from an iterator into a string. @param entries Iterator of map entries @return String representation of joined entries
229 Sets the key-value separator for joining map entries. @param keyValueSeparator Key-value separator character. @return A new MapJoiner instance with the specified separator.
230 Generates a string representation of the object's fields. Uses configured omit flags and handles array values.
231 Retrieves the immutable set of values associated with the key. @param key the key to look up @return ImmutableSet of values or an empty set if not found.
232 Retrieves a resource from the classpath. @param resourceName Name of the resource to retrieve. @return URL object representing the resource.
233 Returns an empty Optional, representing the absence of a value.
234 Converts a Google Optional to a Java Optional. Returns null if the input is null.
235 Converts an empty/null string to null. @param string The string to convert. Null if empty.
236 Checks if a string is null or empty. @param string The string to check. @return True if null or empty, false otherwise.
237 Returns a new iterable that skips a specified number of elements. @param iterable Iterable to skip elements from. @param numberToSkip Number of elements to skip.
238 Returns a limited view of the iterable. @param iterable Iterable to limit. @param limitSize Maximum number of elements to return.
239 Advances the iterator by a specified number of elements. @param iterator Iterator to advance. @param numberToAdvance Number of elements to advance. @return Actual number of elements advanced.
240 Returns a limited iterator that advances at most limitSize elements. @param iterator Iterator to limit. @param limitSize Maximum number of elements to return.
241 Creates a Traverser for a graph or network, ensuring it's directed. @param tree SuccessorsFunction representing the graph/network @return Traverser object for traversing the graph/network
242 Checks bits are positive, rounds up to nearest multiple of 32. @param bits Number of bits; must be positive. @return Adjusted bit count.
243 Converts a BigInteger to an InetAddress (IPv4 or IPv6). @param address BigInteger representing the IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object
244 Repeats the given string the specified number of times. @param string The string to repeat. @param count The number of times to repeat the string.
245 Constructs a BloomFilter with specified parameters. @param bits Bit array for storage @param numHashFunctions Number of hash functions @param funnel Funnel for hashing @param strategy Strategy for bit array management
246 Creates a concatenated hash function from an iterable. @param hashFunctions Iterable of hash functions to concatenate. @return ConcatenatedHashFunction instance.
247 Constructs a SipHashFunction with specified parameters. @param c SipRound iterations during compression. @param d SipRound iterations during finalization. @param k0 Initial key block 0. @param k1 Initial key block 1.
248 Constructs a FileBackedOutputStream with given threshold and finalize behavior. @param fileThreshold Threshold for switching to file storage. @param resetOnFinalize Whether to reset stream on finalize.
249 Converts a byte array to an Inet4Address. @param bytes 4-byte array representing an IPv4 address @return Inet4Address object
250 Ensures the array has at least the specified length, padding if needed. @param array input array @param minLength minimum length @param padding padding length @return The original or a resized array.
251 Ensures the byte array has at least the specified minimum length. @param array input byte array @param minLength minimum required length @param padding extra padding if array is too short
252 Returns a copy of the array if it's shorter than minLength. @param array char array to check @param minLength minimum length @param padding padding to add if needed
253 Ensures array has at least minLength, padding if needed. @param array input array @param minLength minimum length @param padding padding to add if needed @return The input array or a copy with increased length.
254 Ensures array has at least minLength + padding. @param array input array @param minLength minimum length @param padding padding to add if needed @return The original or a resized array.
255 Ensures array has at least minLength + padding. @param array input array @param minLength minimum length @param padding padding length @return The original or a resized array.
256 Ensures the array has at least minLength + padding. @param array input array @param minLength minimum length @param padding padding length @return The original array or a copy with increased capacity.
257 Ensures array has at least minLength, padding if needed. @param array input array @param minLength minimum length @param padding padding to add if needed @return array with ensured capacity
258 Casts a long to a char, validating it's within the valid range. @param value long value to cast @return char value after casting
259 Casts a long to int, validating it's within the int range. @param value long value to cast @return int cast from the long value
260 Casts a long to a short, validating it remains within range. @param value long value to cast @return short value after casting
261 Casts a long to a byte, ensuring it's within the valid range. @param value long value to cast @return byte value, throws exception if out of range.
262 Casts a `long` to a `byte`, ensuring it's within the valid range. @param value long value to cast, must be within byte range. @return byte value.
263 Casts a long to an int, ensuring it's within the int range. @param value long value to cast @throws IllegalArgumentException if value is out of int range
264 Creates a scheduler that executes tasks with a fixed delay. @param initialDelay Initial delay before the first execution. @param delay Period between executions. @param unit Time unit for both delays.
265 Creates a scheduler that executes a task at a fixed rate. @param initialDelay Initial delay before the first execution. @param period Period between executions. @param unit Time unit for the delay and period.
266 Constrains a char value within a specified range [min, max]. @param value char to constrain, min inclusive, max inclusive.
267 Constrains a long value within a specified range [min, max]. @param value value to constrain @param min minimum value @param max maximum value
268 Gets a resource URL. @param contextClass Class to search relative to. @param resourceName Resource name to find. @return URL of the resource.
269 Starts the stopwatch. Throws IllegalStateException if running. Returns the stopwatch instance for chaining.
270 Stops the stopwatch. @return The stopwatch instance. @throws IllegalStateException if already stopped.
271 Checks if removal is allowed; throws IllegalStateException if not. @param canRemove boolean indicating if removal is permitted
272 Sets the value comparator for ordering map entries. @param valueComparator Comparator for map values; cannot be null. @return this Builder instance
273 Sets the initial capacity of the cache. @param initialCapacity The initial capacity (must be >= 0) @return this CacheBuilder for chaining
274 Sets the cache's concurrency level. @param concurrencyLevel The desired concurrency level (must be > 0) @return this CacheBuilder instance
275 Sets the initial capacity of the map. @param initialCapacity The initial capacity (must be >= 0). @return A reference to this MapMaker instance.
276 Sets the concurrency level for the map. @param concurrencyLevel The desired concurrency level (must be > 0) @return A reference to this MapMaker for chaining.
277 Sets the maximum size of the cache. @param maximumSize The maximum number of entries.
278 Sets the maximum weight of the cache. @param maximumWeight The maximum weight; must be non-negative.
279 Sets the weigher function for the cache. @param weigher Function to calculate the weight of a key/value pair. @return A reference to this CacheBuilder for chaining.
280 Sets the duration after which a written entry expires. @param duration Expiration time. @param unit Time unit of the duration.
281 Sets the duration after which a value expires after access. @param duration Expiration duration. @param unit Time unit of the duration.
282 Sets the duration after which a cache entry is refreshed. @param duration Refresh duration. @param unit Time unit of the duration.
283 Sets the key equivalence function. @param equivalence The equivalence function for keys. @return This CacheBuilder for chaining.
284 Sets the value equivalence function. @param equivalence Equivalence function for values. @return A reference to this CacheBuilder.
285 Sets the key equivalence function. @param equivalence The equivalence function for keys. @return A reference to this MapMaker.
286 Creates a TypeToken, ensuring it's not a type variable. Throws IllegalStateException if it is a type variable.
287 Returns the cause of failure if the service is in a failed state. @return Throwable cause or null if not in failed state.
288 Validates index against size, throws exception on failure. @param index index to check @param size size of the collection @param desc description of the index
289 Validates index bounds, throwing exception if out of range. @param index index to validate @param size size to compare against @param desc description of the index
290 Returns a predicate that always returns true, narrowed to type T.
291 Returns a predicate that always returns false, narrowed to type T.
292 Returns a predicate that checks if an object is null.
293 Returns a predicate that checks for non-null values. Uses ObjectPredicate.NOT_NULL and narrows the type.
294 Combines two predicates using logical AND. @param first The first predicate. @param second The second predicate. @return A new Predicate representing the AND of the inputs.
295 Combines two predicates with a logical OR operation. @param first The first predicate. @param second The second predicate. @return A new Predicate that is the logical OR of the inputs.
296 Creates a new Splitter that omits empty strings. Returns a new Splitter instance.
297 Limits the number of splits performed by the splitter. @param maxItems The maximum number of resulting items.
298 Splits a CharSequence into a list of strings. @param sequence CharSequence to split. @return Unmodifiable list of string elements.
299 Returns a string representation of the property: key=value.
300 Converts elapsed time to desired unit. @param desiredUnit TimeUnit to convert to (e.g., SECONDS) @return Elapsed time in the specified unit.
301 Returns the elapsed time as a Duration object. Uses elapsedNanos() to get the time in nanoseconds.
302 Returns a string representation of the stopwatch's elapsed time. Includes formatted value and abbreviated time unit.
303 Replaces a null string with an empty string. @param string The string to check; null is replaced.
304 Finds the common prefix of two CharSequences. @param a First CharSequence @param b Second CharSequence @return Common prefix as String
305 Finds the longest common suffix of two CharSequences. @param a First CharSequence. @param b Second CharSequence. @return The common suffix string.
306 Creates a Supplier that provides the given instance. @param <T> Type of the instance. @param instance The instance to be supplied. @return Supplier providing the instance.
307 Private constructor to prevent external Ticker instantiation.
308 Throws VerifyException if the expression is false.
309 Throws VerifyException if expression is false. @param expression boolean to verify @param errorMessageTemplate Error message template @param p1 Parameter for the error message
310 Throws VerifyException if expression is false. @param expression boolean to verify @param errorMessageTemplate Error message template @param p1 Parameter for error message formatting
311 Verifies a boolean expression; throws VerifyException if false. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1 Parameter for formatting the error message.
312 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessageArgs Arguments for error message.
313 Throws VerifyException if expression is false, with formatted error. @param expression Boolean to check. @param errorMessageTemplate Template for error message. @param p1, p2 Parameters for message formatting.
314 Verifies a boolean expression; throws VerifyException if false. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1 First parameter for error message. @param p2 Second parameter for error message.
315 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessageTemplate Error message template.
316 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessage Template for error message.
317 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1 Parameter 1 for message formatting. @param p2 Parameter 2 for message formatting.
318 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1, p2 Parameters for error message formatting.
319 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1, p2 Parameters for the error message.
320 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessage Template for exception message.
321 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessageTemplate Error message template. @param p1 Parameter 1 for error message. @param p2 Parameter 2 for error message.
322 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessageTemplate Error message template. @param p1 First parameter for the error message. @param p2 Second parameter for the error message.
323 Throws VerifyException if expression is false, with formatted error message. @param expression Boolean expression to verify. @param errorMessageTemplate Error message template. @param p1, p2 Parameters for formatting the error message.
324 Throws VerifyException if expression is false. @param expression Boolean to verify. @param errorMessage Template for exception message.
325 Throws VerifyException if expression is false. @param expression boolean to verify @param errorMessageTemplate Error message template @param p1 First parameter for formatting @param p2 Second parameter for formatting
326 Throws VerifyException if expression is false. @param expression boolean to verify @param errorMessageTemplate Error message template @param p1 First parameter for message formatting @param p2 Second parameter for message formatting
327 Verifies a boolean expression; throws VerifyException if false. @param expression Expression to verify. @param errorMessage Template for error message. @param p1 First parameter for the error message. @param p2 Second parameter for the error message.
328 Throws VerifyException if expression is false. @param expression Boolean expression to verify. @param errorMessage Template for error message.
329 Throws VerifyException if expression is false, with formatted error. @param expression Boolean to verify. @param errorMessageTemplate Error message template.
330 Throws VerifyException if expression is false, with formatted error. @param expression Boolean to verify. @param errorMessageTemplate Error message template.
331 Cleans up references in the queue, using finalizeReferentMethod. Returns true if successful, false otherwise.
332 Default constructor for the SimpleStatsCounter class.
333 Adds statistics from another StatsCounter instance. @param other The StatsCounter to add statistics from.
334 Protected constructor for AbstractLoadingCache, prevents direct instantiation.
335 Creates an empty LinkedHashMap to preserve insertion order.
336 Adds all entries from the provided map to the cache. Throws UnsupportedOperationException as put operations are not supported.
337 Invalidates all cache entries associated with the given keys. @param keys Iterable of keys to invalidate.
338 Creates a new CacheBuilder instance for configuring a cache.
339 Throws an UnsupportedLoadingOperationException when attempting to load all keys.
340 Returns the total request count (hits + misses). @return Total number of cache requests.
341 Returns the total load count (successes + exceptions). @return total load count
342 Calculates the load exception rate. Returns 0.0 if total load count is zero.
343 Calculates the average load penalty. @return Average load penalty as a double, 0.0 if no loads.
344 Protected constructor for subclass extension, calls super().
345 Protected constructor for subclass extension, calls super().
346 Protected constructor for subclass extension, calls super().
347 Protected constructor for subclass extension, calls super().
348 Protected constructor for subclass extension, calls super().
349 Protected constructor to enable subclassing; calls super().
350 Protected constructor. Allows subclass extension, calls super().
351 Protected constructor, allows subclass extension.
352 Protected constructor for subclass extension, calls super().
353 Drains the recency queue, re-adding entries if still in access queue.
354 Creates a copy of the given entry. @param original Entry to copy. @param newNext Next entry in the linked list. @return New ReferenceEntry or null if entry is invalid.
355 Removes entries from column if predicate matches. @param predicate Predicate to apply to each entry. @return True if entries were removed.
356 Initializes the AggregateFuture, handling empty lists and setting up listeners.
357 Wraps an executor to propagate rejected executions to a future. @param delegate Executor to wrap. @param future Future to set exception on rejection. @return Wrapped executor.
358 Gets the result of a Future, throwing if not done. @param future Future to retrieve the result from. @return Result of the Future.
359 Gets the result from a Future, re-throwing as unchecked exceptions. @param future Future to retrieve the result from. @return Result of the Future.
360 Clears key and value reference queues if used by the map.
361 Provides a default object equivalence strategy for cache entries.
362 Provides a default equivalence instance for object comparison.
363 Returns a default object equivalence strategy.
364 Returns a default object equivalence implementation.
365 Returns a default object equivalence instance.
366 Checks if a cache entry is expired based on access/write times. @param entry The cache entry to check. @param now Current timestamp. @return True if the entry is expired, false otherwise.
367 Returns the total number of elements in the multiset. Uses `saturatedCast` to prevent integer overflow.
368 Calculates the size of an iterator, casting to int. @param iterator Iterator to determine size from. @return The number of elements in the iterator.
369 Calculates the size of a multiset in linear time. @param multiset The multiset to calculate the size of. @return The size of the multiset, cast to an int.
370 Adds two integers, saturating at Integer.MAX_VALUE/MIN_VALUE. @param a first integer @param b second integer @return sum of a and b, saturated if overflow occurs
371 Subtracts two integers, saturating at Integer.MAX_VALUE/MIN_VALUE.
372 Multiplies two integers, saturating at Integer.MAX_VALUE/MIN_VALUE.
373 Creates a new, empty CompactHashSet to preserve insertion order.
374 Protected constructor for AbstractIterator. Prevents external instantiation.
375 Constructs a new AbstractSequentialIterator. @param firstOrNull The first element or null.
376 Protected constructor for UnmodifiableListIterator. Prevents external instantiation of the class.
377 Creates and wraps an empty collection in an unmodifiable view.
378 Polls and removes the first entry from the navigable map. Returns the entry or null if empty.
379 Polls and removes the first element from the set's iterator. @return First element or null if empty.
380 Refreshes the delegate collection if empty, or propagates to ancestor.
381 Retrieves collection of values for a given key. Creates a new collection if one doesn't exist. @param key The key to retrieve values for. @return A collection of values associated with the key.
382 Returns a collection of all values in the multimap.
383 Returns a list of all values in the multimap.
384 Returns a collection of multimap entries. Delegates to superclass.
385 Returns a list of multimap entries. Delegates to superclass.
386 Creates a StringBuilder with a size suitable for the collection. @param size The expected size of the collection. @return A StringBuilder instance.
387 Creates an ArrayList with a specified initial capacity. @param initialArraySize The initial capacity of the ArrayList. @return A new ArrayList with the given capacity.
388 Calculates initial map capacity. @param expectedSize Expected number of elements. @return Calculated capacity, or Integer.MAX_VALUE if too large.
389 Creates a ListMultimapBuilder with ArrayList values. @param expectedValuesPerKey Expected values per key (non-negative).
390 Creates a {@link SetMultimapBuilder} with HashSet values. @param expectedValuesPerKey Expected values per key (non-negative).
391 Creates a SetMultimapBuilder with LinkedHashSet values. @param expectedValuesPerKey Expected values per key (non-negative).
392 Creates a MultimapBuilder for hash keys, pre-sizing the map. @param expectedKeys Expected number of keys in the map.
393 Creates a MultimapBuilder with LinkedHashMap keys and expected size. @param expectedKeys Expected number of keys in the LinkedHashMap.
394 Sets the count of an element in a multiset. @param self The multiset to modify. @param element The element whose count is being set. @param count The new count for the element. @return The element's old count.
395 Sets the count of an element in a multiset if the old count matches. @param self The multiset to modify. @param element The element whose count is to be set. @param oldCount The expected old count of the element. @param newCount The new count to set for the element. @return True if the old count matches, false otherwise.
396 Calculates the hashCode for this set, delegating to Sets.hashCodeImpl.
397 Checks if this set is equal to the given object. @param object the object to compare with @return true if equal, false otherwise
398 Returns the hash code, based on the map of keys to values.
399 Returns a string representation of the multimap, using asMap().
400 Removes all elements from the multiset that are contained in the collection. @param elementsToRemove elements to remove @return true if the multiset was modified
401 Checks if this multiset is equal to the given object. @param object The object to compare with this multiset. @return True if equal, false otherwise.
402 Checks if this multiset is equal to another object. @param object The object to compare with. @return True if equal, false otherwise.
403 Returns the first element of an iterable or defaultValue. @param iterable Iterable to get the first element from. @param defaultValue Value to return if iterable is empty.
404 Returns a map of keys to sorted collections of values. Delegates to the superclass implementation.
405 Returns a navigable set view of the multimap's keys.
406 Returns the provided comparator or natural order if null. @param comparator Comparator to use, or null for natural order. @return Comparator object.
407 Returns a string representation of the table.
408 Returns a string representation of the table.
409 Serializes the ArrayListMultimap to an ObjectOutputStream. Writes default fields then serializes the multimap data.
410 Serializes the multimap to the provided ObjectOutputStream. Writes default fields then serializes the multimap content.
411 Writes the multimap to the provided ObjectOutputStream. Serializes the object using default mechanism and writes multimap.
412 Populates a Multimap from an ObjectInputStream. @param multimap Multimap to populate @param stream Input stream containing serialized data
413 Returns a set of column keys. Uses the columnKeyToIndex map.
414 Returns a set of row keys. Uses rowKeyToIndex map's keyset.
415 Returns a read-only set view of the map's keys.
416 Checks if a column with the given key exists in the table. @param columnKey The key of the column to check. @return True if the column exists, false otherwise.
417 Checks if a row with the given key exists in the table. @param rowKey The row key to check. @return True if the row exists, false otherwise.
418 Retrieves values associated with the given key. @param key The key to look up. @return ImmutableList of values for the key, or empty list.
419 Returns the column map for the given column key. @param columnKey Key for the column. Returns empty map if null.
420 Adds a key-value pair to the multimap. @param key The key for the new entry. @param value The value associated with the key. @return The Builder object for method chaining.
421 Calculates the offset from an origin by a given distance. @param origin Starting point for offset calculation. @param distance Number of steps to take. @return Offset value after specified distance.
422 Creates a {@link Spliterator.OfDouble} from a {@link Spliterator} using a function. @param fromSpliterator Input spliterator @param function Function to map elements to {@link Spliterator.OfDouble} @param topCharacteristics Characteristics of the resulting spliterator @param topSize Estimated size of the resulting spliterator @return A {@link Spliterator.OfDouble}
423 Creates a FlatMapSpliteratorOfInt from a Spliterator and Function. @param fromSpliterator Source Spliterator @param function Maps elements to OfInt Spliterator @param topCharacteristics Characteristics of the resulting Spliterator @param topSize Estimated size of the resulting Spliterator
424 Creates a FlatMapSpliteratorOfLong from a Spliterator and function. @param fromSpliterator Source Spliterator. @param function Maps elements to Long Spliterators. @param topCharacteristics Characteristics of the resulting Spliterator. @param topSize Estimated size of the resulting Spliterator.
425 Creates a FlatMapSpliterator from a Spliterator and Function. @param fromSpliterator Source Spliterator. @param function Mapping function for elements. @param topCharacteristics Characteristics of the result. @param topSize Estimated size of the result.
426 Checks if this collection contains all elements of the given collection. @param collection the collection to check for containment @return true if this collection contains all elements of the given collection
427 Updates the hash table metadata with a new mask. @param mask The new mask to apply to the hash table.
428 Updates the hash table metadata using a given mask. @param mask The mask to apply for updating metadata.
429 Resizes the entries, keys, and values arrays to the new capacity.
430 Resizes the entries and elements arrays to the new capacity.
431 Calculates the table size based on expected size. Uses closedTableSize to determine an appropriate size.
432 Compares two integers and returns a comparison chain. @param left the first integer @param right the second integer
433 Compares two long values and adds to the comparison chain. @param left the first long value @param right the second long value @return ComparisonChain object for chaining
434 Compares two booleans, returning true if left is true. @param left the first boolean value @param right the second boolean value
435 Compares two booleans, prioritizing false. @param left the first boolean @param right the second boolean @return -1, 0, or 1 based on comparison.
436 Checks if the range has a lower bound different from the minimum.
437 Checks if the range has an upper bound (not infinity).
438 Constructs a DiscreteDomain with fast offset support disabled.
439 Serializes the EnumBiMap to an ObjectOutputStream. Writes the key/value types and the internal map.
440 Serializes the EnumHashBiMap to an ObjectOutputStream. Writes default state, key type, and the internal map.
441 Serializes the HashBiMap to an ObjectOutputStream. Writes the map to the stream using the writeMap method.
442 Verifies that the element is an enum constant of the multiset's type. @param element The element to check.
443 Writes the multiset to the provided ObjectOutputStream. Serializes the multiset using the writeMultiset utility.
444 Writes the multiset to the provided output stream. Serializes the multiset using the provided stream.
445 Writes the object to an ObjectOutputStream. Serializes the comparator and multiset.
446 Constructs a new Builder instance.
447 Creates a FluentIterable from an array of elements. @param elements array of elements to wrap @return FluentIterable containing the array elements
448 Creates a FluentIterable from an empty list.
449 Checks if the iterable is empty. Uses delegate's iterator.
450 Appends another iterable to the end of this FluentIterable. @param other Iterable to append; elements must be of type E.
451 Concatenates two iterables into a single Iterable. @param a First iterable @param b Second iterable @return A new Iterable containing elements from both.
452 Concatenates three iterables into a single Iterable. @param a, b, c Iterables to concatenate.
453 Concatenates four iterables into a single Iterable. @param a, b, c, d Iterables to concatenate.
454 Returns a stream from the delegate iterable.
455 Counts occurrences of an element within an iterator. @param iterator Iterator to search. @param element Element to count. @return Number of times the element appears in the iterator.
456 Checks if a map contains a specific key. @param map The map to check. @param key The key to search for.
457 Checks if a map contains a specific value. @param map Map to check. @param value Value to search for (null allowed). @return True if value is found, false otherwise.
458 Adds all elements from Iterable into the list at specified index. @param index index to insert at @param elements elements to add @return true if the list was modified
459 Returns a sublist of the forwarding list. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
460 Computes the hash code for this list using Lists.hashCodeImpl.
461 Copies all entries from the given map into this map. @param map source map to copy entries from
462 Checks if this map is equal to the given object. @param object The object to compare with. @return True if the maps are equal.
463 Creates a custom table with a backing map and factory. @param backingMap Initial map for data. @param factory Supplier for creating new maps.
464 Returns the set of keys for all columns in the table. Uses lazy initialization.
465 Returns a map representing the specified column. @param columnKey Key of the column to retrieve.
466 Populates a map from an ObjectInputStream. @param map Map to populate @param stream Input stream for reading map entries
467 Populates a Multiset from an ObjectInputStream. @param multiset The Multiset to populate. @param stream Input stream containing serialized data.
468 Rebuilds the hash table with new size and elements. @param newTableSize The new size of the hash table. @param elements The elements to be added to the hash table. @param n The number of elements to add. @return The new hash table.
469 Constructs a Builder with the default initial capacity.
470 Creates a Builder with the specified initial size. @param size initial capacity of the builder
471 Creates a Builder with the specified initial capacity. @param expectedSize Initial size of the builder's internal array.
472 Ensures the internal array has enough capacity to hold minCapacity elements.
473 Adds all elements from the given iterable to the builder. @param elements Iterable containing elements to add.
474 Adds all elements from the iterator to the builder. @param elements Iterator of elements to add. @return The builder instance for chaining.
475 Adds all elements from the iterator to the builder. @param elements Iterator of elements to add. @return The builder instance for chaining.
476 Adds all elements from the given iterable to the builder. @param elements Iterable containing elements to add. @return The builder with added elements.
477 Creates a collector for ImmutableList. Returns a pre-defined collector for efficiency.
478 Returns an empty ImmutableMultimap.
479 Creates a collector for immutable RangeSet from a stream of Ranges.
480 Returns a collector that accumulates elements into an ImmutableSet.
481 Returns the comparator used for ordering keys. Uses the comparator from the key set.
482 Adds an element to the builder. @param element The element to add. Returns the builder instance.
483 Creates a Function that uses the given Interner to intern objects. @param interner The interner to use for object interning. @return A Function that interns objects using the interner.
484 Converts an iterable to a string representation. @param iterable Iterable to be converted. @return String representation of the iterable.
485 Returns the single element from the iterable. Throws exception if the iterable is empty or has >1 element.
486 Returns the first element or defaultValue if iterator is empty. @param iterator Iterator to get element from @param defaultValue Value if iterator is empty
487 Concatenates two arrays of type T into a new array. @param first First array to concatenate. @param second Second array to concatenate. @param type The type of elements in the arrays.
488 Returns the last element of the iterable. @param iterable Iterable to retrieve the last element from. @return Last element or throws NoSuchElementException if empty.
489 Returns the last element of the iterator, or defaultValue if empty. @param iterator Iterator to retrieve the last element from. @param defaultValue Value if the iterator is empty.
490 Returns an empty unmodifiable iterator.
491 Writes the multimap to an ObjectOutputStream for serialization.
492 Adds a key-value pair to the multimap. @param key The key of the entry. @param value The value of the entry. @param nextSibling Node to insert before, or null. @return The newly created node.
493 Creates a List<Character> from a CharSequence. @param sequence The CharSequence to convert. @return A List<Character> containing the sequence's chars.
494 Finds the index of an element in a list. @param list List to search. @param element Element to find. Returns -1 if not found.
495 Finds the last index of an element in a list. @param list List to search. @param element Element to find. Returns -1 if not found.
496 Advances to the next entry in the table. Returns true if found.
497 Expands the segment's table to increase capacity. Reclassifies entries to new table based on hash.
498 Attempts to drain reference queues within a lock.
499 Checks if an entry is live. @param entry InternalEntry to check. @return True if the entry is live, false otherwise.
500 Creates a new IdentityHashSet backed by an IdentityHashMap.
501 Returns a synchronized BiMap. @param bimap The BiMap to synchronize. @return A synchronized BiMap.
502 Bubbles element 'x' up the heap, swapping with parent if needed. @param index Index of the element to bubble up. @param x Element to be bubbled up. @return Index of the element after bubbling.
503 Swaps last element with a conceptually last element. Returns the index of the swapped element.
504 Advances the iterator to the next element not in skipMe. @param c The target cursor to advance to.
505 Creates an iterator for the given multiset. @param multiset the multiset to iterate over @return an Iterator for the multiset entries
506 Creates a new array of type T with the specified length. @param reference array to copy from (can be empty) @param length desired length of the new array
507 Converts a collection to an array. @param c Collection to convert. @return Object array containing collection elements.
508 Finds the minimum element from an iterator. @param iterator iterator of elements to find the minimum from @return the minimum element found in the iterator
509 Finds the maximum element from an iterator. @param iterator iterator of elements to find the maximum from @return the maximum element found in the iterator
510 Creates a Range enclosing all values in the Iterable. @param values Iterable of comparable values to enclose. @return Range containing all values, or null if empty.
511 Creates a new concurrent hash set using Platform.newConcurrentHashSet().
512 Returns a string representation of this range.
513 Returns the lower endpoint of this range. @return The lower endpoint value.
514 Returns the upper endpoint of this range. @return The upper bound endpoint value.
515 Checks for value conflicts in a bucket and throws if overflow.
516 Removes duplicate entries from an array, preserving order. @param entries Array of entries to filter. @param n Initial size of entries array. @param newN Size of the new array. @param duplicates Map to track duplicate entries. @return New array with duplicates removed.
517 Checks for key conflicts in a bucket; throws if duplicate keys are present and throwIfDuplicateKeys is true. Returns existing entry if found, otherwise null.
518 Creates a collector for immutable EnumSets. Returns a predefined collector instance.
519 Returns complement of a collection of enum values. @param collection Collection of enum values
520 Returns the complement of a collection of enum values. @param collection Collection of enum values @param type Enum type @return EnumSet containing complement of the collection
521 Finds the last element in an IntStream as an OptionalInt.
522 Finds the last element in a LongStream. Returns an OptionalLong containing the last element.
523 Finds the last element in a DoubleStream as an OptionalDouble.
524 Partitions the buffer around a pivot element using a comparator. @param left Left index of the partition. @param right Right index of the partition. @param pivotIndex Index of the pivot element.
525 Serializes the TreeMultimap instance to the provided stream. Writes key/value comparators and multimap contents.
526 Protected constructor. Prevents direct instantiation of Escaper.
527 Private constructor to prevent direct instantiation.
528 Escapes characters in a string, growing buffer as needed. @param s The string to escape. @param index Start index for escaping.
529 Computes the escaped replacement string for a char. @param escaper CharEscaper instance @param c char to escape @return Escaped string or null if escaper returns null
530 Computes the escaped replacement string for a code point. @param escaper UnicodeEscaper instance @param cp code point to escape @return escaped string or null if escape returns null
531 Validates endpoint pair. @param endpoints EndpointPair to validate. @throws NullPointerException if endpoints is null.
532 Advances to the next endpoint pair. Returns false if no more pairs.
533 Creates an EndpointPair based on graph direction. @param graph The graph to use. @param nodeU The first node. @param nodeV The second node.
534 Creates an EndpointPair based on network direction. @param network The network to determine direction. @param nodeU The first node. @param nodeV The second node.
535 Returns a set of all edges in the graph.
536 Returns a set of all edges in the graph.
537 Validates endpoint order. @param endpoints EndpointPair to validate. @throws IllegalArgumentException if endpoints are incompatible.
538 Returns an iterator over the nodes in the pair.
539 Sets the order of nodes in the graph. @param nodeOrder The desired element order. @return A new GraphBuilder with the specified node order.
540 Sets incident edge order. Supports UNORDERED and STABLE types. @param incidentEdgeOrder ElementOrder for incident edges @return GraphBuilder with the configured incident edge order
541 Transposes a directed graph. Returns the graph itself if undirected. @param graph The graph to transpose. @return A transposed graph or the original graph if undirected.
542 Creates a transposed version of a directed graph. @param network The network to transpose. @return Transposed network or identical network if undirected.
543 Transposes a directed graph. Returns the graph itself if undirected. @param graph The ValueGraph to transpose. @return The transposed ValueGraph.
544 Sets the node order for the network. @param nodeOrder The order of nodes in the network. @return A new NetworkBuilder with the specified node order.
545 Sets the edge order for the network. @param edgeOrder The desired edge order. @return A new NetworkBuilder instance with the edge order set.
546 Sets the node order for the graph builder. @param nodeOrder The desired order of nodes. @return A new ValueGraphBuilder with the specified node order.
547 Sets the incident edge order. Supports UNORDERED & STABLE. @param incidentEdgeOrder The desired element order. @return A new ValueGraphBuilder with the specified order.
548 Updates hash state using all bytes from the input array. @param b the byte array to process
549 Updates hash state using bytes from a ByteBuffer. Handles array-backed and non-array-backed buffers.
550 Updates the hasher's state with the specified number of bytes. @param bytes Number of bytes to process from the scratch buffer. @return The updated hasher instance.
551 Processes remaining bytes, pads with zeros, and calculates hash. Uses ByteBuffer for efficient processing.
552 Checks if an element might be in the filter. @param input The element to check. @return True if the element might be present.
553 Creates a BloomFilter Collector. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability.
554 Returns the size of the bit array in bits.
555 Casts a long to a byte, saturating at MAX_VALUE and 0.
556 Compares two bytes as unsigned integers. @param a first byte @param b second byte @return difference between unsigned integer values
557 Converts a byte to an unsigned string representation in given radix. @param x byte to convert @param radix radix to use (2-36)
558 Copies all bits from another LockFreeBitArray to this one. @param other the LockFreeBitArray to copy from
559 Sets the bit at the specified index to true. @param bitIndex the index of the bit to set @return true if the bit was set, false otherwise
560 Computes the hash code as an integer. Uses first 4 bytes if available.
561 Converts the hash code to a hexadecimal string representation. Uses getBytesInternal() to get the byte array.
562 Converts a byte array to a long value. @param bytes byte array to convert @throws IllegalArgumentException if array is too small
563 Computes a weak hash with seeds from a byte array. @param bytes input byte array @param offset starting offset @param seedA initial seed A @param seedB initial seed B @param output output array for hash values
564 Computes a weak hash with seeds from byte array segments. @param bytes input byte array @param offset starting offset @param seedA initial seed A @param seedB initial seed B @param output output array for hash values
565 Returns the long value of this UnsignedInteger. Uses `toLong` to convert the internal `value` to a long.
566 Divides two integers, treating them as unsigned. @param dividend The numerator (unsigned). @param divisor The denominator (unsigned). @return The quotient of the unsigned division.
567 Calculates the remainder of unsigned integer division. @param dividend The number to be divided. @param divisor The divisor. @return The remainder of the division.
568 Creates a Murmur3_32HashFunction with the given seed. @param seed Initial seed value for hash calculation. @return A Murmur3_32HashFunction instance.
569 Creates a Murmur3_32HashFunction with a fixed seed value. @param seed Initial seed value for the hash function.
570 Creates a Murmur3_128HashFunction with the given seed. @param seed Initial seed value for hash generation.
571 Computes a consistent hash value for the input within the bucket range. @param input The input value to hash. @param buckets The number of buckets.
572 Converts a byte array to an integer. @param bytes Array of bytes to convert @return Integer representation of the first 4 bytes
573 Copies byte data from an InputStream to an OutputStream. @param from The source InputStream. @param to The destination OutputStream. @return Total number of bytes copied.
574 Reads and discards all bytes from an InputStream. @param in The input stream to exhaust. @return Total number of bytes read.
575 Reads bytes from an InputStream and processes them. @param input The input stream to read from. @param processor Processes the read bytes. @return The result from the processor.
576 Creates a ByteArrayDataInputStream from a ByteArrayInputStream. @param byteArrayInputStream Input stream for byte array.
577 Creates a ByteArrayDataOutputStream wrapping the given ByteArrayOutputStream. @param byteArrayOutputStream The ByteArrayOutputStream to wrap.
578 Creates a ReaderInputStream with a Reader, encoder, and buffer size. @param reader The Reader to read from. @param encoder The CharsetEncoder to use. @param bufferSize The initial buffer size.
579 Starts draining the buffer, potentially resizing if overflow.
580 Copies data from a ReadableByteChannel to a WritableByteChannel. @param from Source channel. @param to Destination channel. @return Number of bytes copied.
581 Reads a single line of text from the readable source. Returns null when no more lines are available.
582 Skips bytes from an InputStream until n bytes are skipped. @param in The input stream to skip from. @param n The number of bytes to skip. @return The actual number of bytes skipped.
583 Returns a stream of lines from this character source. Closes the reader after stream processing.
584 Reads and discards all characters from a Readable until EOF. @param readable The Readable to exhaust. @return The total number of characters read.
585 Constructs a LineReader with a given Readable source. @param readable The readable source to use for reading lines.
586 Closes an InputStream, swallowing any IOExceptions. @param inputStream The stream to close, or null.
587 Closes a Reader, swallowing any IOExceptions. @param reader The Reader to close, or null.
588 Transfers data to file storage when memory threshold is met. @param len Number of bytes to write.
589 Resets the stream to its initial state, potentially deleting the file.
590 Creates a CharSource from a File using the given charset. @param file The file to create a CharSource from. @param charset Charset to use for character encoding.
591 Flushes a Flushable object, logging IOExceptions quietly. @param flushable The Flushable object to flush.
592 Throws exception if insecure deletion isn't allowed. @param path The path being deleted. @param options RecursiveDeleteOption array.
593 Doubles the capacity of a CharBuffer and copies its content. @param buf The CharBuffer to grow. @return A new CharBuffer with doubled capacity.
594 Adds a character buffer to the line buffer, handling line endings. @param cbuf Character buffer to add. @param off Start offset in the buffer. @param len Number of characters to add.
595 Finalizes the line buffer, handling it if necessary.
596 Reads an unsigned short (2 bytes) from the stream. Returns the integer representation of the bytes.
597 Reads four bytes from the stream and converts them to an int. Reads bytes in little-endian order.
598 Reads 8 bytes from the stream and converts them to a long. Reads bytes in little-endian order.
599 Writes a `char` (Unicode) to the stream as a short. Uses `writeShort` to write the character's integer value.
600 Writes a float to the output stream in little-endian order.
601 Writes a long value to the stream in little-endian byte order. Reverses the byte order of the long value before writing.
602 Deletes a directory and its contents insecurely. @param path Path to the directory to delete. @return Collection of IOExceptions, or null if successful.
603 Securely deletes directory contents, accumulating IOExceptions. @param dir Stream of paths to delete recursively. @return Collection of IOExceptions during deletion, or null.
604 Advances to the next input stream in the sequence. Closes current stream and opens the next if available.
605 Advances to the next CharSource, closing the current one.
606 Creates a CharSource from a URL using the given charset. @param url URL to create CharSource from. @param charset Charset for character encoding.
607 Divides two longs with specified rounding mode. @param p Dividend. @param q Divisor. @param mode Rounding mode to apply. @return Quotient after division.
608 Calculates the factorial of a non-negative integer. @param n The integer for which to calculate the factorial. @return The factorial of n, or Double.POSITIVE_INFINITY if too large.
609 Calculates b raised to the power of k. @param b Base integer. @param k Exponent, must be non-negative. @return b^k.
610 Calculates the greatest common divisor of two integers. @param a First integer. @param b Second integer. @return GCD of a and b.
611 Calculates factorial of n. @param n Non-negative integer for factorial calculation. @return Factorial of n or Integer.MAX_VALUE if out of range.
612 Calculates binomial coefficient (n choose k). @param n non-negative integer @param k non-negative integer <= n @return Binomial coefficient or Integer.MAX_VALUE if overflow
613 Calculates b raised to the power of k. @param b Base number. @param k Exponent (must be non-negative). @return b^k as a long.
614 Calculates factorial of n. @param n Non-negative integer for factorial calculation. @return Factorial of n or Long.MAX_VALUE if out of range.
615 Creates a LinearTransformationBuilder with given x and y values. @param x1 x coordinate @param y1 y coordinate
616 Checks if two doubles are approximately equal within a tolerance. @param a First double value. @param b Second double value. @param tolerance The tolerance for comparison. @return True if doubles are fuzzy equal, false otherwise.
617 Rounds a value to a double based on the specified rounding mode. @param x The value to round. @param mode The rounding mode to apply.
618 Calculates the smallest power of 2 >= x. @param x The integer value. @return The ceiling power of two.
619 Returns the highest one bit in x. @param x Integer to find the highest one bit. @return The highest one bit in x.
620 Calculates the base-2 logarithm of an integer. @param x The integer to calculate the logarithm of. @param mode The rounding mode to use.
621 Calculates the integer square root of x with specified rounding. @param x The integer to calculate the square root of. @param mode Rounding mode to apply.
622 Adds two integers, throwing an exception on overflow. @param a, b Integers to add. Returns the sum.
623 Subtracts two integers, throwing an exception on overflow. @param a, b Integers to subtract. @return The result of a - b.
624 Multiplies two integers, throwing ArithmeticException on overflow. @param a, b Integers to multiply. @return Product of a and b.
625 Tests if n is a witness for the compositeness of base. @param base base for the test @param n number to test for compositeness @return true if n is a witness, false otherwise
626 Calculates the smallest power of 2 >= x. @param x the value to find the ceiling power of two for @return the ceiling power of two as a long
627 Calculates the highest power of two less than or equal to x. @param x the input long value @return the floor power of two
628 Calculates the base-2 logarithm of a long value. @param x The long value. Must be positive. @param mode RoundingMode for the logarithm calculation.
629 Calculates the greatest common divisor of two longs. @param a first long value @param b second long value @return the GCD of a and b
630 Calculates the floor modulus of x with respect to m. @param x the dividend @param m the modulus (must be positive) @return the floor modulus of x with respect to m
631 Adds two long values safely, throwing ArithmeticException on overflow. @param a First long value. @param b Second long value. @return Sum of a and b.
632 Subtracts two long values, throwing ArithmeticException on overflow. @param a First operand. @param b Second operand.
633 Multiplies two long integers with overflow checking. @param a First operand. @param b Second operand. @return Product of a and b.
634 Returns the number of data points used for calculations.
635 Checks if two `PairedStats` objects are equal based on their stats.
636 Constructs a new PairedStatsAccumulator object.
637 Calculates the new mean, handling non-finite values. @param previousMean the previous mean value @param value the new value to incorporate @return the updated mean, NaN if non-finite values conflict
638 Returns the number of data points accumulated.
639 Calculates the median value. Returns a ScaleAndIndex object.
640 Returns a Scale object representing the quartiles (scale=4).
641 Returns a Scale object for percentile calculations (scale=100).
642 Moves the pivot element to the start of the slice. @param array The array to manipulate. @param from Start index of the slice. @param to End index of the slice.
643 Reads a Stats object from a ByteBuffer. @param buffer Input buffer containing Stats data. @return A Stats object reconstructed from the buffer.
644 Creates a snapshot of the current statistical properties. @return A new Stats object representing the current state.
645 Returns the port number. Throws IllegalStateException if no port.
646 Returns the port or a default if no port is specified. @param defaultPort The port to use if no port is set. @return The port number.
647 Returns a string representation of the host and port. Includes brackets for IPv6 hosts and appends port if valid.
648 Creates a HostAndPort with a default port if none is present. @param defaultPort The port to use if no port is already set.
649 Converts an InetAddress to its string representation. @param ip The InetAddress to convert. @return String representation of the IP address.
650 Checks if the given IPv6 address is an ISATAP address. @param ip Inet6Address to check @return True if the address is an ISATAP address, false otherwise.
651 Checks if an Inet6Address has an embedded IPv4 client address. Uses isCompatIPv4Address, is6to4Address, and isTeredoAddress.
652 Converts a collection of Booleans to a boolean array. Handles BooleanArrayAsList for optimized conversion.
653 Finds the index of the first occurrence of target in array. @param array The boolean array to search. @param target The boolean value to search for.
654 Finds the last index of a target boolean in the array. @param array The boolean array to search. @param target The boolean value to find.
655 Converts a collection of Numbers to a byte array. Handles ByteArrayAsList for optimized conversion.
656 Finds the first index of target in array, from start to end. @param array The byte array to search. @param target The byte value to search for.
657 Finds the last index of a byte in a byte array. @param array The byte array to search. @param target The byte to search for.
658 Converts a Collection<Character> to a char array. Handles CharArrayAsList for efficiency; unwraps chars.
659 Finds the index of a character within a char array. @param array char array to search @param target char to find @return Index of target, or -1 if not found.
660 Finds the last index of target char in the array. Returns -1 if not found.
661 Converts a byte array to a char. @param bytes byte array containing two bytes @return char represented by the bytes
662 Calculates the hash code for the ImmutableDoubleArray. Uses Double.hashCode() for each element.
663 Converts a collection of Numbers to a double array. @param collection Collection of Number objects @return A double array containing the values from the collection
664 Finds the first occurrence of target in array. @param array The array to search. @param target Value to search for.
665 Finds the last index of target within the array. @param array array of doubles @param target value to search for @return Last index or -1 if not found.
666 Converts a collection of Numbers to a float array. @param collection Collection of Number objects @return Float array representation of the collection
667 Finds the first index of target in array, from start to end. @param array array to search @param target value to search for
668 Finds the last index of target within array. Uses lastIndexOf(array, target, 0, array.length).
669 Creates a Builder with the specified initial capacity. @param initialCapacity the initial size of the double array
670 Returns a new Builder instance with an initial capacity of 10.
671 Returns the index of the first occurrence of target. Returns -1 if target is not found.
672 Returns the last index of target in the array, or -1 if not found.
673 Returns a string representation of the immutable double array.
674 Checks if the array contains the target value. @param target integer value to search for @return true if found, false otherwise
675 Creates a new builder for an ImmutableIntArray with initial capacity. @param initialCapacity Initial size of the array.
676 Returns a new builder with an initial capacity of 10.
677 Calculates the hash code for the immutable integer array.
678 Returns a string representation of the immutable integer array.
679 Checks if the array contains the target value. @param target The long value to search for. @return True if found, false otherwise.
680 Creates a Builder with the specified initial capacity. @param initialCapacity the initial size of the array
681 Returns a new Builder instance with an initial capacity of 10.
682 Computes the hash code for the immutable long array.
683 Returns a string representation of the immutable long array.
684 Converts a collection of Numbers to an int array. Handles IntArrayAsList directly; otherwise boxes and converts.
685 Finds the index of target in array. Uses default start/end. @param array array to search @param target value to find @return index of target or -1 if not found
686 Finds the last index of target within the entire array. @param array array to search @param target value to find
687 Converts a collection of Numbers to a long array. @param collection Collection of Number objects. @return Long array containing the long values.
688 Finds the index of target value in array. @param array The array to search. @param target The value to search for.
689 Finds the last index of target in array. @param array array to search @param target value to search for
690 Parses a string as a long in the given radix. @param string String to parse, @param radix The radix to use.
691 Converts a collection of Numbers to a short array. Handles ShortArrayAsList for efficiency.
692 Finds the index of target short in array. @param array The array to search. @param target The short value to find.
693 Finds the last index of target in array. Uses lastIndexOf(array, target, 0, array.length).
694 Converts a byte array to a short. @param bytes Byte array containing two bytes. @return short value constructed from the bytes.
695 Returns the best comparator for byte array lexicographical comparison. Falls back to Java implementation if unsafe comparator is unavailable.
696 Creates an UnsignedInteger from the given integer bits. @param bits integer value to represent as unsigned @return UnsignedInteger object representing the bits
697 Converts the unsigned integer to a string representation. @param radix The base to use for conversion (e.g., 10 for decimal).
698 Converts an integer to a string representation (base 10). @param x the integer to convert @return String representation of the integer.
699 Compares two integers as unsigned. @param a the first integer @param b the second integer @return comparison result
700 Creates an UnsignedLong from the given long bits. @param bits the long value to represent as an unsigned long
701 Compares two unsigned longs by flipping sign bits first. @param a the first unsigned long value @param b the second unsigned long value @return negative, zero, or positive int based on comparison
702 Parses a string as an unsigned long, given a radix. @param string String to parse. @param radix Radix of the number. @return The unsigned long value.
703 Invokes a method on the proxy. Handles hashCode, equals, toString. @param proxy The proxy object. @param method The invoked method. @param args Method arguments. @return Result of method invocation.
704 Extracts the package name of the class. Uses Reflection to get the package.
705 Gets the package name of a class. @param clazz The class to get the package name from. @return The package name of the class.
706 Returns a ByteSource representing the resource. Uses the URL to create the ByteSource.
707 Checks if the member is public. Uses getModifiers().
708 Checks if the member is protected. Uses getModifiers() to determine protection status.
709 Checks if the member is private. Uses getModifiers() to determine privacy.
710 Checks if the member is static. Uses the modifiers to determine static status.
711 Checks if the member is final. Uses modifiers to determine.
712 Checks if the member is abstract, using modifiers.
713 Checks if the member is a native method. Uses modifiers to determine native status.
714 Checks if the method/constructor is synchronized. Uses modifiers to determine synchronization status.
715 Checks if the member is volatile. Uses getModifiers() to determine volatility.
716 Checks if the member is transient. Uses getModifiers() to determine transient status.
717 Checks if a type equals this TypeVariable. @param type the type to compare with @return true if the type is a TypeVariable and equals, false otherwise
718 Creates a TypeToken from a Class. @param <T> The type to create a TypeToken for. @param type The Class representing the type. @return A TypeToken representing the given class.
719 Creates a TypeToken from a given Java Type. @param type The Java Type to create a TypeToken for.
720 Retrieves the done value from a future object. @param <V> The type of the value. @param obj The future object to retrieve the value from. @return The done value or throws an exception if cancelled/failed.
721 Adds a listener to be executed when the future is complete. @param listener The Runnable to execute. @param executor Executor for running the listener.
722 Cancels a related future if this future is cancelled. @param related The future to potentially cancel.
723 Submits a Callable task and returns a ListenableFuture. @param task The Callable task to execute. @return ListenableFuture representing the task's execution.
724 Schedules a task for execution within a service. @param service The service to execute the task for. @param executor Executor for scheduling the task. @param runnable The task to be executed. @return Cancellable object to manage task cancellation.
725 Schedules a service for execution with a given executor. @param service The service to schedule. @param executor Executor to run the task. @param runnable Runnable task to be executed.
726 Executes all given tasks concurrently with a timeout. @param tasks Collection of Callable tasks to execute. @param timeout Timeout duration for task execution. @return List of Futures representing task execution results.
727 Executes any Callable from a collection within a timeout. @param tasks Collection of Callable tasks. @param timeout Timeout duration. @return Result of the first completed Callable.
728 Awaits termination of tasks, with a timeout. @param timeout Duration to wait; returns true if done. @throws InterruptedException if interrupted while waiting
729 Schedules a Callable for execution after a delay. @param callable The Callable to execute. @param delay The delay before execution. @return ListenableScheduledFuture representing the scheduled task.
730 Schedules a task for repeated execution with a fixed period. @param command Runnable to execute @param initialDelay Initial delay before first execution @param period Period between executions @return ListenableScheduledFuture for the task
731 Schedules a task to run with a fixed delay between executions. @param command Runnable to execute @param initialDelay Initial delay before first execution @param delay Delay between subsequent executions @return ListenableScheduledFuture for task management
732 Waits for the service to reach the running state, with a timeout. @param timeout The maximum time to wait, using the Duration. @throws TimeoutException if the timeout is exceeded.
733 Waits for the service to terminate, with a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
734 Creates a proxy for a target object, enforcing a timeout. @param target The object to proxy. @param interfaceType The interface type of the target. @param timeout The maximum execution time.
735 Executes a Callable with a timeout. @param callable Callable to execute. @param timeout Timeout duration. @return Result of the Callable, or null if interrupted. @throws TimeoutException, InterruptedException, ExecutionException
736 Executes a Callable with a timeout, returning the result. @param callable Callable to execute. @param timeout Timeout duration. @return Result of the Callable. @throws TimeoutException, ExecutionException
737 Runs a Runnable with a timeout. @param runnable The Runnable to execute. @param timeout Timeout duration. @throws TimeoutException, InterruptedException
738 Runs a Runnable until completion or timeout. @param runnable Runnable to execute @param timeout Timeout duration @throws TimeoutException if the Runnable exceeds the timeout
739 Creates a ScheduledExecutorService for the service, shutting it down on termination/failure.
740 Handles an exception, potentially setting it as the aggregate result. @param throwable The exception to handle.
741 Returns a string representation of the atomic double value.
742 Returns the value as an int. Casts the double value to an integer.
743 Returns the current double value as a long. Uses the get() method to retrieve the value.
744 Returns the value as a float. Uses the current double value.
745 Returns the current double value. Uses the internal get() method.
746 Writes the double value to the ObjectOutputStream. Uses `get()` to retrieve the current double value.
747 Restores the AtomicDouble from an ObjectInputStream. Reads a double from the stream and sets the value.
748 Atomically updates value by applying accumulator function. @param x The value to accumulate. @param accumulatorFunction Applies to current value and x. @return The current value before the update.
749 Atomically accumulates value `x` using `accumulatorFunction`. @param x Value to accumulate. @param accumulatorFunction Function to apply for accumulation. @return The accumulated double value.
750 Returns a string representation of this AtomicDoubleArray.
751 Writes the AtomicDoubleArray to an ObjectOutputStream. Serializes the array's length and all elements.
752 Atomically updates element at index i, accumulating x. @param i index of the double to update @param x value to accumulate @param accumulatorFunction function to apply to old/new value @return the original value at index i
753 Accumulates value x to the double at index i atomically. @param i index of the double to accumulate @param x value to accumulate @return the accumulated double value
754 Removes key-value pair if the value is zero. @param key The key to check and potentially remove. @return True if the key-value pair was removed.
755 Returns an unmodifiable map view of the internal data.
756 Atomically replaces value if oldValue matches, otherwise returns false. @param key the key whose value may be replaced. @param expectedOldValue the expected value. @param newValue the new value to set if oldValue matches.
757 Completes the future and ensures resource closure. Throws exception if called after certain state transitions.
758 Sets the value and closer, executing it on the given executor. @param consumer Consumes the value and closes the resource. @param executor Executor to run the consumer on.
759 Adds a runnable task with executor. Executes immediately if already started. @param runnable The task to add. @param executor The executor to use.
760 Executes the registered runnables in order, using their executors. Marks as executed and reverses the list before execution.
761 Catches exceptions of a specific type and applies a fallback. @param exceptionType Exception type to catch. @param fallback Fallback function to execute on exception. @param executor Executor for fallback execution.
762 Transforms the future asynchronously using a function. @param function Async function to apply. @param executor Executor for async execution.
763 Creates an ImmediateFuture with the given value or null future. @param value The value for the future, or null to create a null future.
764 Creates a ListenableFuture that fails immediately with the given exception. @param throwable The exception to signal failure.
765 Creates a cancelled {@link ListenableFuture}. Returns an existing instance if available.
766 Gets the best type validator, falling back to a weak validator if unavailable.
767 Dispatches events to all registered listeners. Iterates through listeners to avoid modification issues.
768 Constructs a Monitor with unfair locking.
769 Attempts to acquire the lock for the given duration. @param time the duration to wait for the lock @return True if the lock was acquired, false otherwise.
770 Attempts to enter the monitor if the guard condition is met within a Duration. @param guard The guard to check. @param time The maximum time to wait.
771 Checks if a guard has waiting threads. @param guard the guard to check @return true if waiters exist, false otherwise
772 Checks if a guard is satisfied. Re-signals waiters on error.
773 Shuts down executor and waits for termination, cancels if needed. @param service ExecutorService to shutdown. @param timeout Duration for termination. @return True if executor terminated, false otherwise.
774 Sleeps for the specified Duration without interruption. @param sleepFor Duration to sleep for.
775 Sets the rate at which permits are issued per second. @param permitsPerSecond The rate in permits per second.
776 Returns the rate, synchronizing access with the mutex.
777 Creates a new SettableFuture instance.
778 Gets the Future's result uninterruptibly, with a timeout. @param future Future to get the result from. @param timeout Timeout duration. @return The Future's result.
779 Creates a lazy-initialized striped read-write lock with given stripes.
780 Creates a new Striped lock with specified stripes. @param stripes number of stripes for the lock @return new Striped lock instance
781 Creates a Striped semaphore with specified stripes and permits. @param stripes number of stripes @param permits initial permits for each stripe @return Striped semaphore instance
782 Creates a Striped read-write lock with specified stripes. @param stripes number of stripes for the lock @return Striped<ReadWriteLock> instance
783 Builds a ThreadFactory using the configured properties.
784 Creates a TrustedListenableFutureTask from a runnable and result. @param runnable The runnable to execute. @param result The result of the runnable. @return A TrustedListenableFutureTask.
785 Awaits latch until zero or timeout expires. @param latch CountDownLatch to await. @param timeout Duration timeout. @return True if countdown reached zero, false if timeout.
786 Awaits condition until timeout, uninterruptibly. @param condition Condition to await @param timeout Duration to wait @return True if condition is satisfied, false otherwise
787 Attempts to acquire a permit from a semaphore without interruption. @param semaphore Semaphore to acquire from. @param timeout Timeout duration. @param unit Time unit of the timeout. @return True if permit acquired, false otherwise.
788 Attempts to acquire permits from a semaphore without interruption. @param semaphore Semaphore to acquire permits from. @param permits Number of permits to acquire. @param timeout Duration to wait for permits. @return True if permits were acquired, false otherwise.
789 Attempts to acquire a lock uninterruptibly within a duration. @param lock The lock to acquire. @param timeout The duration to wait for the lock. @return True if lock acquired, false otherwise.
790 Awaits executor termination, uninterruptibly, with a timeout. @param executor ExecutorService to await termination of @param timeout Duration timeout @return True if terminated, false if timeout expired
791 Returns the PublicSuffixType matching the given code. @param code The code to match. @throws IllegalArgumentException if no matching enum found.
792 Creates an Optional containing the given non-null value. @param <T> The type of the value. @param reference The non-null value to wrap.
793 Creates a new, unstarted Stopwatch using the provided Ticker. @param ticker The Ticker to use for time measurement.
794 Finds the index of the first element matching the predicate. @param iterable Iterable to search. @param predicate Predicate to apply to each element.
795 Checks if any element in the iterator matches the predicate. @param iterator Iterator to check. @param predicate Predicate to apply to each element.
796 Creates a SortedSetMultimapBuilder with natural ordering for values.
797 Creates a Collector for building an ImmutableTable. @param rowFunction Extracts row key from input. @param columnFunction Extracts column key. @param valueFunction Extracts value. @param mergeFunction Merges duplicate values.
798 Creates a predicate checking if an object is equivalent to target. @param target The target value to check equivalence against.
799 Creates a Function that returns defaultValue if key is absent. @param map The map to use. @param defaultValue Default value if key is not found.
800 Composes two functions, g and f, where f maps A to B and g maps B to C. @param g Function from B to C @param f Function from A to B @return Function from A to C
801 Creates a Function forMap using the provided map. @param map The map to use for function creation. @return A Function forMap.
802 Creates a Splitter using the provided regex Pattern. @param separatorPattern The regex Pattern to split on.
803 Creates a Joiner instance with the given separator. @param separator The separator string. @return A new Joiner instance.
804 Creates a Joiner instance with the specified character separator. @param separator The character to use as a separator. @return A Joiner instance.
805 Configures how null values are represented during joining. @param nullText String to use for null values @return A MapJoiner instance with custom null representation.
806 Creates a Splitter that splits on a pattern. @param separatorPattern Regex pattern to split on. @return Splitter instance using the provided pattern.
807 Creates a predicate that checks if a CharSequence contains the pattern. @param pattern The regex pattern to search for. @return Predicate that evaluates the pattern match.
808 Returns a predicate that negates the given predicate. @param predicate The predicate to be negated.
809 Creates an AND predicate from multiple predicates. @param components Predicates to combine; must not be null. @return An AndPredicate combining the input predicates.
810 Creates an "or" predicate from an iterable of predicates. @param components Iterable of predicates to combine. @return An OrPredicate combining the input predicates.
811 Splits a CharSequence into a Map using outer/entry splitters. @param sequence The sequence to split into key-value pairs. @return An unmodifiable Map of String key-value pairs.
812 Splits a CharSequence into a Stream of strings. @param sequence The sequence to split. @return A Stream of strings resulting from the split.
813 Memoizes the given supplier. Returns the delegate if already memoized. @param delegate The supplier to memoize. @return A memoized supplier.
814 Creates a SupplierComposition from a function and supplier. @param function Transforms the supplier's value to type T. @param supplier Provides the initial value for transformation.
815 Wraps a Supplier in a thread-safe wrapper. @param delegate The Supplier to wrap. @return A ThreadSafeSupplier instance.
816 Propagates an exception if it's an instance of the declared type. @param throwable The throwable to check, or null. @param declaredType The expected exception type.
817 Propagates the throwable if it's an unchecked exception. @param throwable The throwable to potentially propagate.
818 Propagates a throwable as a RuntimeException. @param throwable The throwable to propagate. @return A new RuntimeException wrapping the input.
819 Returns a lazy stack trace for the given throwable. Uses jlaStackTrace if lazyStackTraceIsLazy is true.
820 Creates a new cache entry. @param key The key for the new entry. @param hash The hash code for the key. @param next The next entry in the chain.
821 Creates a RemovalNotification with a key, value, and cause. @param key The key of the removed entry. @param value The value of the removed entry. @param cause The reason for the removal.
822 Creates a Collector that accumulates elements into a multiset. @param elementFunction Maps element to multiset element. @param countFunction Provides the count for each element. @param multisetSupplier Supplies the initial multiset.
823 Creates a collector that accumulates elements into a Multimap. @param keyFunction Extracts the key from an input element. @param valueFunction Extracts the value from an input element. @param multimapSupplier Supplies the initial Multimap instance.
824 Creates a collector that accumulates elements into a multimap. @param keyFunction Extracts the key from an input element. @param valueFunction Transforms input to a stream of values. @param multimapSupplier Supplies the initial multimap.
825 Transforms a collection by applying a function to each element. @param fromCollection Collection to transform. @param function Transformation function. @return New Collection with transformed elements.
826 Checks if an iterable contains an element. @param iterable Iterable to check. @param element Element to search for (null allowed). @return True if element is found, false otherwise.
827 Returns a view of the set with elements up to `toElement`. @param toElement Element to which the head set is bounded. @param inclusive Whether `toElement` is included.
828 Returns elements >= fromElement. @param fromElement Lower bound for tail set. @param inclusive Whether fromElement is inclusive.
829 Adds an element to the queue. Removes the oldest if full. @param e The element to add. @return True.
830 Orders keys using the provided comparator. @param keyComparator Comparator for ordering keys. @return This builder for method chaining.
831 Orders keys using the provided comparator. @param keyComparator Comparator for ordering keys. @return This builder for method chaining.
832 Orders the values by the given comparator. @param valueComparator Comparator for ordering values. @return This builder for method chaining.
833 Adds an element to the multiset and returns the Builder. @param element The element to add. @return The Builder instance for chaining.
834 Adds specified number of copies of an element. @param element Element to add. @param occurrences Number of copies to add.
835 Sets the count of an element and returns the Builder. @param element Element to set the count for. @param count The new count for the element.
836 Creates a Collector to build an ImmutableSortedMultiset. @param comparator Comparator for the multiset elements.
837 Returns a view of the set containing elements up to `toElement`. @param toElement Element to end the view; exclusive.
838 Returns a sorted set containing elements from {@code fromElement} upwards. @param fromElement The lowest element to be included.
839 Cycles the iterable indefinitely. Uses Iterables.cycle to create a cycled iterable.
840 Filters the iterable based on the given predicate. @param predicate Predicate to test each element. @return Filtered FluentIterable.
841 Filters an iterable to contain only elements of the desired type. @param unfiltered Iterable to filter. @param desiredType Class of elements to retain. @return Filtered iterable containing only elements of desiredType.
842 Transforms elements using a function. @param function Function to apply to each element. @return Transformed FluentIterable.
843 Returns a PeekingIterator from the given iterator. @param iterator Iterator to wrap; creates a new one if needed. @return A PeekingIterator.
844 Removes all elements from iterable that are contained in collection. @param removeFrom Iterable to remove elements from. @param elementsToRemove Collection of elements to remove. @return True if any elements were removed.
845 Removes elements from an iterable if the predicate is true. @param removeFrom Iterable to remove from. @return True if any elements were removed.
846 Retains elements from iterable if they are in collection. @param removeFrom Iterable to modify. @param elementsToRetain Collection to check for presence. @return True if any elements were removed.
847 Adds all elements from a collection to this forwarding collection. @param collection Collection whose elements to add. @return True if the collection was modified.
848 Adds all elements from an iterable to a collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable providing elements to add. @return True if the collection was modified.
849 Creates an ArrayList from an iterator of elements. @param elements Iterator providing elements for the list. @return A new ArrayList containing elements from the iterator.
850 Creates a HashSet from elements in an iterator. @param elements Iterator providing elements for the set. @return A new HashSet containing the elements.
851 Filters an iterator, retaining elements of the desired type. @param unfiltered Iterator to filter. @param desiredType Class of elements to retain. @return Filtered UnmodifiableIterator.
852 Checks if all elements in the iterable satisfy the predicate. @param iterable Iterable to check. @param predicate Predicate to apply to each element.
853 Finds the first element in the iterable that satisfies the predicate. @param iterable Iterable to search. @param predicate Predicate to apply to each element.
854 Removes all values associated with the given key. @param key The key whose values are to be removed.
855 Creates a list iterator for the given list, starting at index. @param list The list to create the iterator for. @param index The starting index for the iterator.
856 Creates a List backed by the given first element and array. @param first The first element of the list. @param rest The array of additional elements.
857 Transforms a list using a function, returns a new List. @param fromList List to transform. @param function Function to apply to each element.
858 Creates a List from the given first element, second element, and array.
859 Creates an AsMapView from a set and a function. @param set The set of keys. @param function Maps keys to values. @return An AsMapView instance.
860 Creates a NavigableMap from a NavigableSet and a function. @param set The navigable set of keys. @param function Maps keys to values. @return A NavigableMap.
861 Transforms a map's entries using the provided transformer. @param fromMap The input map. @param transformer Transforms entries; K->V1 -> K->V2. @return A new map with transformed entries.
862 Checks if a collection contains a specific map entry. @param c Collection to search in, @param o Entry to check. @return True if the collection contains the entry.
863 Removes an Entry from a Collection. @param c Collection to remove from. @param o Entry to remove; must be an Entry instance. @return True if the Entry was removed, false otherwise.
864 Returns the count of a specified element. @param element The element to count occurrences of.
865 Removes a specified number of occurrences of an element. @param element element to remove, can be null @param occurrences number of occurrences to remove @return true if removal was successful
866 Sets the count for an element. @param element The element to set the count for. @param count The new count for the element. @return The previous count.
867 Atomically sets the count for an element. @param element Element to update. @param expectedOldCount Expected old count. @param newCount New count value. @return True if update occurred.
868 Removes all values associated with a key from the multimap. @param key The key whose values should be removed.
869 Creates a MultimapBuilderWithKeys using natural ordering. @return MultimapBuilderWithKeys configured with natural order.
870 Creates a MapMultimap backed by the given map. @param map The map to back the new MapMultimap. @return A new MapMultimap instance.
871 Transforms a multimap's entries using a transformer. @param fromMap The input multimap. @param transformer Transforms entries (K, V1) -> V2. @return A new multimap with transformed entries.
872 Adds all elements from the given iterable to the builder. @param elements Iterable of elements to add to the builder.
873 Adds all elements from another multiset to the target multiset. @param self The multiset to add elements to. @param elements The multiset containing elements to add.
874 Retains occurrences of elements present in another multiset. @param multisetToModify Multiset to modify. @param multisetToRetain Multiset defining occurrences to retain.
875 Removes occurrences of elements from a multiset. @param multisetToModify Multiset to modify. @param occurrencesToRemove Elements to remove. @return True if any elements were removed.
876 Retains elements present in the given collection. @param elementsToRetain Collection of elements to keep. @return True if the multiset was modified.
877 Drains elements from a BlockingQueue into a Collection. @param q queue to drain from, @param buffer destination collection @param numElements number of elements to drain @param timeout timeout duration @return number of elements added to the buffer
878 Drains elements from a BlockingQueue into a Collection. @param q queue, @param buffer destination, @param numElements number to drain, @param timeout duration
879 Checks if the input value is within the range. @param input The value to check. @return True if the value is within the range.
880 Checks if the range contains all values in the iterable. @param values Iterable of values to check for containment.
881 Applies a consumer to each pair of elements from two streams. @param streamA First stream. @param streamB Second stream. @param consumer Function to apply to each pair.
882 Creates a Collector to build an ImmutableTable. @param rowFunction Maps input to row keys. @param columnFunction Maps input to column keys. @param valueFunction Maps input to values.
883 Transforms the values of a table using a provided function. @param fromTable The table to transform. @param function Transformation function from V1 to V2. @return A new table with transformed values.
884 Transposes a Table. Returns original if already transposed. @param table The Table to transpose. @return Transposed Table.
885 Creates an ArrayBasedEscaperMap from a map of character replacements. @param replacements Map of characters to their replacement strings.
886 Adds escapes for multiple characters. @param cs Array of characters to escape. @param r The replacement string for all characters. @return A reference to this builder.
887 Finds the index of the next character needing escaping. @param csq CharSequence to check. @param start Start index. @param end End index (exclusive).
888 Creates a SubscriberExceptionContext for the given event. @param event The event object. @return SubscriberExceptionContext instance.
889 Creates a SequentialFunnel for iterables of type E. @param elementFunnel Funnel for processing individual elements.
890 Wraps a PrimitiveSink as an OutputStream. @param sink The sink to wrap. @return OutputStream backed by the given sink.
891 Creates a Funnel for CharSequence, using the provided charset. @param charset The character set to use for encoding.
892 Returns a Writer from an Appendable, or wraps if needed. @param target The Appendable to convert to a Writer. @return A Writer object.
893 Decodes a CharSequence into a byte array, throwing exceptions on errors. @param chars The CharSequence to decode. @return The decoded byte array.
894 Creates a new Closer instance using the default suppressor. @return A new Closer object.
895 Constructs a PatternFilenameFilter with a regex pattern. @param patternStr The regex pattern string to use.
896 Calculates the floor of the logarithm base 2 of a BigInteger. @param x BigInteger value. Must be positive. @param mode RoundingMode to apply.
897 Parses a string as an unsigned byte using radix 10. @param string The string to parse. @return The unsigned byte value.
898 Parses a string as an unsigned integer (base 10). @param s The string to parse. @return The unsigned integer value.
899 Creates a TypeVariableKey from a Type, or null if not a TypeVariable. @param t The type to check; must be a TypeVariable.
900 Gets the value from a {@code Future}, handling exceptions & cancellation. @param future Future to retrieve the value from @return Result of the Future, or a Failure/Cancellation object.
901 Creates a schedule with the given duration delay. @param delay The duration before the schedule starts.
902 Creates a new AtomicLongMap with an empty ConcurrentHashMap.
903 Atomically accumulates 'x' to the value associated with 'key'. @param key The key of the entry to update. @param x The value to add to the entry's value. @param accumulatorFunction Function to apply to the value. @return The accumulated value.
904 Atomically accumulates 'x' to the value associated with 'key'. @param key The key whose value is to be accumulated. @param x Value to accumulate. @param accumulatorFunction Accumulation function. @return The updated value.
905 Associates the specified key with a new value, atomically. @param key The key to associate with the new value. @param newValue The new value to associate with the key.
906 Adds a closeable resource for later closure on executor. @param closeable Resource to close; null is ignored. @param closingExecutor Executor for asynchronous closure. @return The provided closeable object.
907 Creates a new CycleDetectingLockFactory instance. @param policy The locking policy to use; cannot be null.
908 Creates a sequential executor using the given delegate executor. @param delegate Executor to execute tasks sequentially.
909 Creates a `SimpleTimeLimiter` instance with the given executor. @param executor ExecutorService to use for time-limited execution
910 Joins a thread until it terminates or the timeout elapses. @param toJoin Thread to join. @param timeout Join timeout as a Duration.
911 Creates an ElementOrder instance with unordered type and no comparator.
912 Creates a stable ElementOrder instance. Uses natural order; comparator is null.
913 Creates an ElementOrder with insertion type and no comparator.
914 Returns the natural ordering. Creates an ElementOrder with SORTED type.
915 Creates a sorted ElementOrder instance using the given comparator. @param comparator Comparator for sorting elements. @return ElementOrder with SORTED type.
916 Returns a CountDownLatch that completes when the list is closed.
917 Converts a CharSequence to lowercase. @param chars the character sequence to convert @return lowercase string representation of the input
918 Converts a CharSequence to its uppercase equivalent. @param chars the CharSequence to convert @return the uppercase CharSequence
919 Converts the paired stats to a byte array. Uses a ByteBuffer for efficient data serialization.
920 Converts stats to a byte array using a ByteBuffer. Uses writeTo to populate the buffer.
921 Initializes the CompactHashMap with an expected size. @param expectedSize The expected number of entries.
922 Initializes the CompactHashSet with an expected size. @param expectedSize The expected number of elements (1-MAX_SIZE)
923 Creates an And matcher with this and the given CharMatcher. @param other The other CharMatcher to combine with this.
924 Creates a CharMatcher from a predicate. @param predicate Predicate to evaluate characters against. @return A CharMatcher that uses the provided predicate.
925 Returns a new matcher that matches if either matcher does. @param other The other matcher to combine with this one.
926 Creates an InRange CharMatcher for characters within a range. @param startInclusive Start of the range (inclusive) @param endInclusive End of the range (inclusive)
927 Subtracts another CacheStats object from this one. @param other The CacheStats object to subtract. @return A new CacheStats representing the difference.
928 Adds another CacheStats object to this one, saturating on overflow. @param other the CacheStats object to add @return a new CacheStats object representing the sum.
929 Constructs an AbstractListMultimap from the given map. @param map The map to initialize from; must be empty.
930 Constructs a multimap from the given map. @param map The map to initialize from; must be empty.
931 Returns a sub-set of elements within the specified range. @param fromElement Start element (inclusive). @param toElement End element (inclusive).
932 Creates an EnumMultiset for the given enum type. @param type The enum class for which to create the multiset.
933 Returns a sorted subset of the set from {@code fromElement} to {@code toElement}. @param fromElement start element (inclusive) @param toElement end element (inclusive)
934 Partitions an iterator into lists of a specified size. @param iterator Iterator to partition. @param size List size.
935 Partitions an iterator into lists of a specified size, padding the last list. @param iterator Iterator to partition. @param size List size.
936 Creates a builder with the specified expected size. @param expectedSize The expected number of elements. @return A builder instance for chaining.
937 Creates a builder with the specified maximum size. @param maximumSize The maximum number of elements allowed. @return A builder configured with the maximum size.
938 Creates a new AbstractStreamingHasher with chunk size. @param chunkSize Size of each data chunk.
939 Calculates the population variance. @return The population variance, NaN if NaN, 0.0 if count==1.
940 Calculates the sample variance. Requires count > 1. Returns NaN if sumOfSquaresOfDeltas is NaN.
941 Calculates the population variance. @return Population variance or NaN if invalid.
942 Calculates the sample variance. Requires count > 1. Returns NaN if sumOfSquaresOfDeltas is NaN.
943 Returns a CharMatcher that matches any character in the sequence. @param sequence Sequence of characters to match. @return CharMatcher that matches characters in the sequence.
944 Trims and collapses matching characters from a sequence. @param sequence CharSequence to process @param replacement char to replace matches with @return String with trimmed and collapsed characters
945 Creates a FunctionalEquivalence based on a function and the current equivalence. @param function Function to apply to objects.
946 Returns a PairwiseEquivalence based on this equivalence.
947 Checks if two iterables have the same elements in order. @param iterable1 First iterable @param iterable2 Second iterable @return True if iterables contain same elements, false otherwise.
948 Checks if two lists are equal. @param other The list to compare to. @return True if lists contain same elements in order.
949 Creates a new ConcurrentHashMultiset with a ConcurrentHashMap. Returns a new instance of ConcurrentHashMultiset.
950 Creates a ConcurrentHashMultiset using the provided count map. @param countMap the backing map for element counts @param <E> the type of elements in the multiset @return a new ConcurrentHashMultiset
951 Appends elements from an iterable to an appendable, separated by a separator. @param appendable Destination for the appended string. @param parts Iterable of elements to append. @return The appendable object.
952 Appends elements from an iterator to a StringBuilder. @param builder StringBuilder to append to. @param parts Iterator of elements to append.
953 Appends map entries to a StringBuilder. @param builder StringBuilder to append to @param map Map to append entries from @return The provided StringBuilder
954 Joins map entries from an iterable into a string. @param entries Iterable of map entries @return String representation of joined entries
955 Adds a value to the helper. @param value The value to add. @return The ToStringHelper instance.
956 Adds a name-value pair to the ToStringHelper. @param name Holder name. @param value Holder value. @return The ToStringHelper instance.
957 Adds a boolean value as an unconditional holder. @param value The boolean value to add. @return The ToStringHelper instance.
958 Adds a char value as an unconditional holder. @param value The char value to add. @return The ToStringHelper instance.
959 Adds a double value as a string holder. @param value The double value to add. @return The ToStringHelper instance.
960 Adds a float value as a string holder. @param value The float value to add. @return The ToStringHelper instance.
961 Adds an int value as a string holder to the helper. @param value The integer value to add. @return The ToStringHelper instance.
962 Adds a long value as a string holder. @param value The long value to add. @return The ToStringHelper instance.
963 Adds a boolean value holder to the string representation. @param name Holder name. @return The ToStringHelper instance.
964 Adds a char value holder to the string representation. @param name Holder name. @return The ToStringHelper instance.
965 Adds a double value holder to the string representation. @param name Holder name. @return The ToStringHelper instance.
966 Adds a float value holder to the string representation. @param name Holder name. @return The ToStringHelper instance.
967 Adds an unconditional holder for an integer value. @param name Holder name. @param value Integer value to be converted to string. @return The ToStringHelper instance.
968 Adds a value holder to the string representation. @param name Holder name. @param value Value to be converted to string. @return The ToStringHelper instance.
969 Creates an Optional from a nullable reference. @param <T> the type of the reference @param nullableReference the reference to wrap @return Optional containing the value or empty if null
970 Default constructor. Initializes with an empty iterable delegate.
971 Returns an empty Optional, indicating size is unknown.
972 Returns an empty Optional, indicating unknown length.
973 Converts an empty/null string to null. @param string The string to convert. Null if empty.
974 Parses a host-port string into a HostAndPort object. @param hostPortString Host-port string to parse.
975 Skips a specified number of elements from the iterable. @param numberToSkip Number of elements to skip. @return A new FluentIterable with skipped elements.
976 Limits the iterable to the specified maximum size. @param maxSize The maximum number of elements to return.
977 Gets the element at the given position in the iterable. @param iterable Iterable to get element from. @param position Index of element to get. @param defaultValue Value if position is out of bounds.
978 Retrieves the element at the specified position in the iterator. @param iterator Iterator to retrieve from. @param position Element position (0-based). @return Element at the given position.
979 Gets the element at the specified position in the iterator. @param iterator Iterator to get element from. @param position Element position. @param defaultValue Value if iterator is empty.
980 Creates a Traverser for the file tree. @return Traverser object for traversing the file tree.
981 Creates a LimitedInputStream, limiting bytes read from input. @param in Input stream to limit. @param limit Maximum bytes allowed.
982 Converts a BigInteger to an Inet4Address (IPv4). @param address BigInteger representing the IPv4 address @return Inet4Address object
983 Converts a BigInteger to an Inet6Address. @param address BigInteger representing the IPv6 address @return Inet6Address object
984 Creates a SipHash24 hash function with given keys. @param k0 Initial key block 0. @param k1 Initial key block 1. @return SipHashFunction instance.
985 Constructs a FileBackedOutputStream with given file threshold. @param fileThreshold Threshold for switching to file storage.
986 Creates an Inet4Address from an integer representation. @param address Integer representing an IPv4 address. @return Inet4Address object.
987 Reserves permits. @param permits Number of permits to reserve. @return Wait length in microseconds.
988 Attempts to acquire permits within a timeout. @param permits Permits to acquire; must be positive. @param timeout Timeout duration. @param unit Time unit of the timeout. @return True if permits acquired, false otherwise.
989 Writes the Bloom filter to an output stream in a specific format. @param out output stream to write to @throws IOException if an I/O error occurs
990 Creates a scheduler with a fixed delay between task executions. @param initialDelay Initial delay before the first execution. @param delay Period between executions.
991 Creates a scheduler that executes a task at a fixed rate. @param initialDelay Initial delay before the first execution. @param period Period between executions.
992 Converts time to nanos, constrains it to a safe range. @param time Time value to convert. @param unit Time unit for the input time. @return Safe nanos value.
993 Creates a Stopwatch instance and immediately starts it. @param ticker The Ticker to use for time measurement. @return A started Stopwatch instance.
994 Sets the value comparator for ordering map entries. @param valueComparator Comparator for map values; cannot be null. @return this Builder instance
995 Sets the concurrency level for the map. @param concurrencyLevel Desired concurrency level (> 0) @return A reference to this builder for chaining.
996 Sets the expire-after-write duration. @param duration The duration after which written entries expire.
997 Sets the expiration duration after access. @param duration Expiration duration.
998 Sets the refresh duration after a write operation. @param duration Duration after which cache entry is refreshed.
999 Sets the key strength to Weak. Uses WeakReferences for keys.
1000 Sets the value strength to Weak. Uses WeakReferences for values. @return A reference to this CacheBuilder instance.
1001 Sets the value strength to SOFT. Uses Strength.SOFT. @return A reference to this CacheBuilder instance.
1002 Configures the MapMaker to use weak keys. @return this
1003 Configures the map to use weak values. @return A reference to this MapMaker instance.
1004 Returns the failure cause, if the service is failed. @return Throwable cause or null if not failed.
1005 Validates index against size, throws exception if invalid. @param index index to check @param size size of the collection
1006 Validates index bounds, throwing exception if out of range. @param index index to validate @param size size to compare against
1007 Validates position indexes, throwing IndexOutOfBoundsException if invalid. @param start start index @param end end index @param size size limit
1008 Creates a predicate that checks if an object equals the target. @param target The object to check equality against.
1009 Filters a {@link FilteredMultimap} using combined predicates. @param multimap Multimap to filter. @param entryPredicate Predicate for filtering entries. @return Filtered Multimap.
1010 Filters a multiset based on a predicate. @param unfiltered The multiset to filter. @param predicate Predicate to determine element inclusion. @return A new filtered Multiset.
1011 Creates a Splitter that splits on characters matched by the matcher. @param separatorMatcher CharMatcher used to find split delimiters. @return A Splitter instance.
1012 Creates a Splitter that splits strings into fixed-length chunks. @param length the length of each chunk
1013 Returns a splitter that trims results with whitespace. @return New Splitter instance with trimmed results
1014 Creates a new, unstarted Stopwatch instance.
1015 Creates a Stopwatch instance and immediately starts it.
1016 Calculates the UTF-8 encoded length of a CharSequence. @param sequence CharSequence to encode @return encoded length in bytes
1017 Awaits executor termination, uninterruptibly. @param executor ExecutorService to await termination of
1018 Continuously cleans up references from the queue until unsuccessful.
1019 Constructs a new Builder instance.
1020 Creates a CacheLoader that uses the given function to compute values. @param function Function to compute cache values. @return A CacheLoader using the provided function.
1021 Creates a CacheLoader that uses the given supplier to load values. @param supplier Supplier providing the value to be cached.
1022 Throws UnsupportedLoadingOperationException; disallows loading all keys at once.
1023 Calculates the hit rate as the ratio of hits to total requests.
1024 Calculates the miss rate as missCount / requestCount. Returns 0.0 if requestCount is 0.
1025 Protected constructor to enable subclassing.
1026 Protected constructor for subclass extension, calls super().
1027 Protected constructor. Allows subclass extension, calls super().
1028 Protected constructor for subclass extension, calls super().
1029 Protected constructor for subclass extension, calls super().
1030 Protected constructor for subclass extension, calls super().
1031 Constructs a new AbstractBiMap with provided backward and inverse maps.
1032 Protected constructor, allows subclass extension by calling super().
1033 Protected constructor to enable subclassing, calls super().
1034 Default constructor for the MutableTypeToInstanceMap class.
1035 Protected constructor for subclassing; delegates to super().
1036 Protected constructor to enable subclassing; calls super().
1037 Protected constructor for extending the class.
1038 Protected constructor for subclass extension, calls super().
1039 Creates a new cache entry (ReferenceEntry) for the segment. @param segment The cache segment. @param key The key for the entry.
1040 Creates a new ReferenceEntry for the segment. @param segment The segment to create in. @param key The key for the entry.
1041 Retrieves the result from the Future, throwing on failure. @return Result of the Future. @throws ExecutionException if the Future has an exception
1042 Performs cleanup operations after a write, using runUnlockedCleanup.
1043 Creates a ValueReference for a cache entry. @param segment Cache segment. @param entry Reference entry. @param value Cached value. @param weight Weight of the entry.
1044 Creates a value reference for a cache entry. @param segment Cache segment. @param entry Reference entry. @param value Value to reference. @param weight Reference weight.
1045 Creates a ValueReference for a given segment, entry, value, and weight.
1046 Records a read operation on a cache entry. Updates access time if recordsAccess is enabled.
1047 Records a read operation on a cache entry. Sets access time if enabled & adds entry to access queue.
1048 Records a write operation for a cache entry, updating timestamps. @param entry The ReferenceEntry for the updated entry.
1049 Retrieves the live value from a cache entry, or null if expired. @param entry The cache entry to retrieve the value from. @param now Current timestamp. @return The live value or null if expired/null.
1050 Returns the size of the iterable. Uses Collection.size() if available.
1051 Returns the size of this multiset using linear time.
1052 Reads bytes from an InputStream into a byte array. @param in InputStream to read from. @param bufs Queue of byte arrays. @param totalLen Total bytes read so far. @return Byte array containing read bytes.
1053 Sets the forward and inverse delegates. @param forward Forward map. @param backward Inverse map.
1054 Creates a GeneralRange representing all possible values. @param comparator Comparator for range values.
1055 Creates a GeneralRange extending downwards from an endpoint. @param comparator Comparator for range values. @param endpoint The endpoint of the range. @param boundType Bound type for the endpoint.
1056 Creates a GeneralRange extending up to the specified endpoint. @param comparator Comparator for range values. @param endpoint Exclusive endpoint value. @param boundType Bound type of the endpoint (inclusive/exclusive).
1057 Creates a GeneralRange with specified lower and upper bounds. @param comparator Comparator for range values @param lower Lower bound value @param upper Upper bound value
1058 Computes the intersection of this range with another. @param other The other range to intersect with. @return A new GeneralRange representing the intersection.
1059 Returns the next element without advancing the iterator. Throws NoSuchElementException if no element is available.
1060 Removes all values for a key. @param key The key to remove values for. @return An unmodifiable collection of removed values.
1061 Validates the iterator's state, throwing exception on concurrent modification.
1062 Adds a value for the given key, delegating to the superclass. @param key The key to associate with the value. @param value The value to add.
1063 Delegates the put operation to the superclass implementation. @param key The key to associate with the value. @param value The value to add.
1064 Retrieves values for a given key, delegating to superclass. @param key The key to retrieve values for. @return List of values associated with the key.
1065 Retrieves the set of values for a given key. @param key The key to retrieve values for. @return The set of values associated with the key.
1066 Returns a set of multimap entries. Delegates to superclass.
1067 Writes the multimap to an ObjectOutputStream. Serializes the size and all entries to the stream.
1068 Converts a collection to a string representation. @param collection The collection to convert. @return A string representation of the collection.
1069 Converts a map to a string representation. @param map The map to convert. @return String representation of the map.
1070 Creates an ArrayList with the specified expected size. @param estimatedSize The expected number of elements. @return A new ArrayList with the calculated capacity.
1071 Creates a HashMap with the specified expected size. @param expectedSize Expected number of elements in the map. @return A new HashMap with the given expected size.
1072 Creates a new LinkedHashMap with the specified expected size. @param expectedSize Expected number of elements in the map.
1073 Creates a new HashSet with the specified expected size. @param expectedSize The expected number of elements in the set.
1074 Creates a LinkedHashSet with the given expected size. @param expectedSize The expected number of elements.
1075 Creates a ListMultimapBuilder with ArrayList values.
1076 Creates a {@link SetMultimapBuilder} with HashSet values.
1077 Creates a SetMultimapBuilder with LinkedHashSet values.
1078 Creates a MultimapBuilder for hash keys, using default size. @return MultimapBuilderWithKeys instance
1079 Creates a MultimapBuilder with LinkedHashMap keys. Uses default expected keys size.
1080 Creates an immutable entry with the given element and count. @param e The element. @param n The count; must be non-negative.
1081 Sets the count of an element using the underlying multiset. @param element The element whose count is being set. @param count The new count for the element.
1082 Sets the count of an element if the old count matches. @param element Element whose count is to be set. @param oldCount Expected old count. @param newCount New count to set.
1083 Returns the hash code, delegating to the underlying map.
1084 Returns a string representation of the multimap, using asMap().
1085 Returns a Set view of the multiset's entries. Delegates to superclass.
1086 Calculates the hash code based on the entry set's hash code.
1087 Returns a string representation of the multiset, using entrySet().
1088 Gets the first entry from the entry set, or null if empty.
1089 Returns the smallest element that is greater than or equal to e. @param e The element to find the ceiling of. @return The ceiling element or null if none exists.
1090 Returns the next higher element than {@code e}, or null if none. @param e The element to find the next higher element for.
1091 Creates an empty TreeRangeSet. Returns a new, empty TreeRangeSet instance.
1092 Checks if a value is within the range, inclusive. @param value The value to check.
1093 Checks if an iterable's comparator matches the given comparator. @param comparator Comparator to check against. @param elements Iterable to check. Returns false if not sorted.
1094 Adds all entries from another table to this table. @param table Table to add entries from.
1095 Returns the set of cells. Delegates to the superclass implementation.
1096 Returns the set of cells in this table. Delegates to super.
1097 Returns the table's values. Delegates to superclass implementation.
1098 Returns the table's values. Delegates to superclass implementation.
1099 Creates an Ordering based on the result of applying a function. @param function Function to apply to objects before comparison.
1100 Creates an Ordering from a Comparator. @param comparator Comparator to use; may be an Ordering itself. @return An Ordering instance.
1101 Creates a compound ordering with a secondary comparator. @param secondaryComparator Comparator for tie-breaking. @return CompoundOrdering instance.
1102 Creates an ImmutableCell with given row, column keys, and value.
1103 Checks if both row and column keys exist in the table. @param rowKey The row key to check. @param columnKey The column key to check. @return True if both keys exist, false otherwise.
1104 Creates an ImmutableMapEntry with the given key and value. @param key The key of the entry. @param value The value of the entry.
1105 Creates an ImmutableMapEntry. Reuses entry if possible. @param <K> Key type. @param <V> Value type. @param entry The entry to potentially reuse. @param key The key for the entry. @param value The value for the entry.
1106 Adds a key-value pair from an Entry to the multimap. @param entry The Entry containing the key-value pair. @return The Builder object for method chaining.
1107 Adds a key-value pair to the multimap and returns this builder. @param key The key for the new entry. @param value The value associated with the key.
1108 Resizes the internal data structures if the new size exceeds the current size, optimizing memory usage. @param newSize the desired size of the internal data structures
1109 Inserts a key-value pair into the map at the given index. @param entryIndex Index for the new entry.
1110 Resizes the set's internal storage if the new size exceeds current capacity.
1111 Inserts an entry into the hash set. @param entryIndex Index for the entry. @param object The object to insert. @param hash The hash code of the object. @param mask The mask to apply.
1112 Allocates arrays for the hash table. @return Expected size of the hash table.
1113 Allocates arrays for the hash table. @return Expected size of the table.
1114 Checks if this Range encloses the given Range. @param other the Range to check for enclosure @return true if this Range encloses the other Range
1115 Checks if this Range is connected to another. @param other the other Range to check for connection
1116 Serializes the ImmutableSetMultimap to an ObjectOutputStream. Writes value comparator and multimap contents to the stream.
1117 Returns a new Builder instance for constructing a RangeMap.
1118 Creates a new Builder instance for constructing ImmutableRangeSet.
1119 Creates a new builder instance for constructing an ImmutableTable.
1120 Returns an unmodifiable iterator for this collection.
1121 Counts occurrences of an element in an iterable. @param iterable Iterable to search. @param element Element to count. @return Number of times the element appears.
1122 Checks if the map contains a specific key, delegating to the underlying map. @param key The key to check. @return True if the map contains the key, false otherwise.
1123 Checks if the map contains the specified value. @param value Value to check for (null allowed). @return True if value is present, false otherwise.
1124 Returns the key of the entry immediately before the given key. @param key The key to find the lower key for. @return Key of the lower entry, or null if no such entry exists.
1125 Returns the key of the greatest entry <= key, or null. @param key The key to compare against.
1126 Returns the ceiling key, or null if no such key exists. @param key the key to find the ceiling key for
1127 Returns the key immediately following the given key. @param key The key to find the higher key for. @return The higher key, or null if none exists.
1128 Returns the first key in the map. Throws NoSuchElementException if empty.
1129 Returns the key of the last entry, or throws NoSuchElementException.
1130 Returns the last entry of the map in reverse order. Uses Iterables.getFirst on descending entry set.
1131 Polls and removes the last entry from the map. Uses descendingMap() and Iterators.pollNext.
1132 Returns a descending view of the map's keys. Uses descendingMap() to obtain the reverse-ordered keys.
1133 Returns a sorted sub-map from key fromKey (inclusive) to toKey (exclusive).
1134 Returns the lower entry in the map, strictly less than the key. @param key The key to find the lower entry for.
1135 Returns the floor entry for a given key. @param key The key to search for the floor entry.
1136 Returns a view of the map with keys strictly less than toKey. @param toKey The exclusive endpoint for the head map.
1137 Finds the first entry with a key >= the given key. @param key The key to search for the ceiling entry.
1138 Returns the first entry with key strictly greater than the given key. @param key the key to search after @return the entry or null if none exists
1139 Returns a tail map with keys >= fromKey (inclusive). @param fromKey the key from which the tail map starts
1140 Returns a subMultiset between the specified bounds. @param lowerBound lower bound (inclusive) @param lowerBoundType bound type for lowerBound @param upperBound upper bound (inclusive) @param upperBoundType bound type for upperBound
1141 Creates a new, empty HashBasedTable instance.
1142 Reads the enum multiset from an ObjectInputStream. @param stream Input stream for deserialization.
1143 Moves the last entry to a destination index, handling updates. @param dstIndex Destination index to move the entry to. @param mask The mask value.
1144 Moves the last entry to a destination index, handling updates. @param dstIndex Destination index to move the last entry to. @param mask The mask value used for hashing.
1145 Checks if the map contains the specified value. @param value The value to search for. @return True if the value is present, false otherwise.
1146 Creates a Builder with the specified expected size. @param expectedSize Initial capacity of the builder.
1147 Constructs a Builder with the default initial capacity.
1148 Returns a new Builder for creating an ImmutableMap.
1149 Constructs a Builder with the given comparator. @param comparator Comparator used to sort the map entries.
1150 Creates a SingletonImmutableBiMap from a single key-value pair. @param k1 The key. @param v1 The value. @return A SingletonImmutableBiMap containing the pair.
1151 Adds an element to the set, ensuring uniqueness and capacity.
1152 Constructs a Builder with the default initial capacity.
1153 Creates a Builder with a specified expected size. @param expectedSize The initial capacity of the builder.
1154 Adds all elements from the given iterable to the builder. @param elements Iterable of elements to add @return this Builder instance for chaining
1155 Adds all elements from the iterator to the builder. @param elements Iterator of elements to add. @return The builder instance for chaining.
1156 Adds all elements from the iterator. @param elements Iterator of elements to add. @return The builder instance for chaining.
1157 Returns a SerializedForm instance for serialization.
1158 Creates a SingletonImmutableTable with provided rowKey, columnKey, and value.
1159 Returns a string representation of the iterable delegate.
1160 Adds all values from the given iterable to the multimap for the key. @param key Key to associate values with. @param values Iterable of values to add. @return This builder.
1161 Returns the first element of an iterable, or defaultValue if empty. @param iterable Iterable to get element from @param defaultValue Value if iterable is empty
1162 Returns the last element of an iterable, or defaultValue if empty. @param iterable Iterable to retrieve the last element from. @param defaultValue Value if the iterable is empty.
1163 Associates a value with a key in the multimap. @param key The key to associate with the value. @param value The value to associate with the key. @return true
1164 Partitions a list into sublists of the specified size. @param list The list to partition. @param size The size of each sublist.
1165 Returns the index of an element in this list. @param element Element to find. Returns -1 if not found.
1166 Returns the last index of an element in this list. @param element Element to find. Returns -1 if not found.
1167 Performs cleanup before a write operation. Calls runLockedCleanup() to drain queues and reset counts.
1168 Creates a new, empty TreeRangeMap instance.
1169 Finds the index of the minimum element within a range. @param index Start index of the range. @param len Range length. @return Index of the minimum element or -1 if invalid.
1170 Returns the index of the maximum element. Uses compareElements to determine the max index.
1171 Returns the first element without removing it, or null if empty.
1172 Bubbles element up alternating levels to maintain heap order. @param index Index of element to bubble up. @param x Element to be bubbled. @return Index of the element after bubbling.
1173 Returns an iterator for the multiset. @return Iterator for the multiset entries
1174 Concatenates an element to an array. @param element element to add @param array array to append to @return new array with element added
1175 Converts a collection to an array, resizing if necessary. @param c Collection to convert. @param array Array to populate, may be reused/resized.
1176 Finds the minimum element from an iterable. @param iterable iterable of elements to find the minimum from @return the minimum element found in the iterable
1177 Finds the maximum element from an iterable. @param iterable iterable of elements to find the maximum from @param <E> type of elements in the iterable @param <T> upper bound for the element type @return the maximum element found in the iterable
1178 Returns a string representation of this set's range.
1179 Creates a GeneralRange from a Range. @param range The Range to convert. @return A GeneralRange representing the input Range.
1180 Returns a submap based on the provided range. @param map NavigableMap to extract submap from. @param range Range defining the submap's boundaries.
1181 Returns a sub-set based on the provided range. @param set NavigableSet to extract from. @param range Range defining the subset's boundaries.
1182 Returns the row map. Delegates to the superclass implementation.
1183 Wraps a queue in a synchronized view, no mutex provided. @param queue The queue to synchronize. @return Synchronized queue.
1184 Constructs an ArrayBasedCharEscaper with a map, min, and max safe chars. @param escaperMap Replacement array for escaping chars. @param safeMin Minimum value of safe characters. @param safeMax Maximum value of safe characters.
1185 Constructs an `ArrayBasedUnicodeEscaper` with given parameters. @param escaperMap Replacement map; safeMin/Max define safe range.
1186 Creates a PercentEscaper with specified safe characters and space encoding. @param safeChars String of safe characters; alphanumeric chars disallowed. @param plusForSpace Whether to encode space as '+' instead of '%20'.
1187 Escapes characters in a string. Returns the original string if no escaping is needed.
1188 Creates a Subscriber or SynchronizedSubscriber based on thread safety. @param bus The event bus. @param listener The listener object. @param method The method to be invoked.
1189 Returns a string representation of the graph's properties.
1190 Returns a set of all edges in the graph.
1191 Returns a set of all edges in the graph.
1192 Adds a double value to the hasher, converting it to a long. @param d the double value to add @return this Hasher instance
1193 Creates a BloomFilter Collector. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions.
1194 Calculates the expected false positive probability. Returns a double representing the expected FPP.
1195 Checks if two BloomFilters are compatible based on configuration. @param that The BloomFilter to compare with. @return True if filters are compatible, false otherwise.
1196 Converts a byte to an unsigned string representation. Uses base 10.
1197 Combines elements from another BloomFilter into this one. @param that the BloomFilter to merge from
1198 Creates a HashCode from bytes without copying the array. @param bytes The byte array representing the hash code.
1199 Creates an IntHashCode from the given integer value. @param hash the integer value for the hash code @return An IntHashCode object representing the hash
1200 Creates a HashCode from a long value. @param hash The long value to create the HashCode from.
1201 Returns the float value of this UnsignedInteger. Uses `longValue()` to obtain the underlying long value.
1202 Returns the double value of this UnsignedInteger. Uses `longValue()` to get the underlying long value.
1203 Returns the BigInteger value of this UnsignedInteger. Uses `longValue()` to get the long value for conversion.
1204 Creates a fast hash function based on minimumBits. @param minimumBits Minimum bits for the hash function. @return HashFunction object.
1205 Computes a consistent hash value. @param hashCode HashCode object to hash. @param buckets Number of buckets for consistent hashing.
1206 Creates an HmacMD5 HashFunction using the provided key. @param key The secret key for the HmacMD5 algorithm. @return An HmacMD5 HashFunction instance.
1207 Creates a HmacSHA1 HashFunction using the given key. @param key Secret key for HMAC-SHA1 initialization. @return A HmacSHA1 HashFunction.
1208 Creates an HMAC-SHA256 hash function with the given key. @param key Secret key for HMAC-SHA256 initialization. @return An HMAC-SHA256 HashFunction object.
1209 Creates an HMAC-SHA512 hash function using the given key. @param key Secret key for HMAC-SHA512 initialization @return A MacHashFunction object
1210 Creates a concatenated ByteSource from an iterable. @param sources Iterable of ByteSources to concatenate.
1211 Creates a concatenated CharSource from an iterable of sources. @param sources Iterable of CharSource instances to concatenate.
1212 Creates a ByteArrayDataInput from a byte array. @param bytes byte array to create input from @return ByteArrayDataInput object
1213 Creates a ByteArrayDataOutput with a new, empty ByteArrayOutputStream.
1214 Creates a ByteArrayDataOutput with specified size. @param size Initial size of the underlying ByteArrayOutputStream @throws IllegalArgumentException if size is negative
1215 Creates ReaderInputStream with Reader, encoder, and buffer size. @param reader The Reader to read from. @param bufferSize The initial buffer size.
1216 Counts bytes by repeatedly skipping up to Integer.MAX_VALUE. @param in The input stream to count bytes from. @return Total number of bytes skipped.
1217 Skips specified bytes from an InputStream. @param in The input stream. @param n The number of bytes to skip. @throws IOException if EOF is reached before skipping n bytes.
1218 Writes lines from an iterable to a buffered writer. @param lines Iterable of CharSequence lines @param lineSeparator Separator between lines
1219 Writes lines from a stream to a buffered writer, using lineSeparator. @param lines Stream of CharSequence lines @param lineSeparator Separator between lines
1220 Applies the given action to each line of this character source. @param action Consumer to apply to each line. @throws IOException if an I/O error occurs.
1221 Reads all lines from a Readable source and returns them as a list. @param r The Readable source to read lines from. @return A list of strings, each representing a line.
1222 Reads lines from a Readable, processes them, and returns a result. @param readable Source of lines to read. @param processor Processes each line. @return Result from the processor.
1223 Reads more characters from the reader into the char buffer. Handles buffer resizing and compaction as needed.
1224 Reads a short (2 bytes) from the stream in little-endian order.
1225 Reads a char from the stream as an unsigned short.
1226 Reads a float from the stream in little-endian order. Uses `readInt()` to get the integer bits of the float.
1227 Reads an 8-byte double from the stream in little-endian order.
1228 Writes a string to the stream by writing each char individually. Writes each character as a short using the `writeChar` method.
1229 Writes a double value to the stream in little-endian order. Converts double to long bits then writes using writeLong.
1230 Deletes directory contents insecurely, aggregating IOExceptions. @param dir Directory stream to process. @return Collection of IOExceptions, or null if successful.
1231 Recursively deletes files/directories securely. @param dir SecureDirectoryStream for deletion. @param path Path to delete. Returns exceptions if any.
1232 Initializes MultiInputStream with an iterator of ByteSources. @param it Iterator of ByteSources to read from. @throws IOException If an I/O error occurs during initialization.
1233 Returns a CharSource for the resource, using the given charset. @param charset Charset for character encoding.
1234 Calculates the number of ordered permutations, handling overflow. @param sortedInputList List of elements to permute. @param comparator Comparator for ordering elements.
1235 Calculates the mean of a sequence of numbers. @param values Iterator of Number objects to average @return The mean of the numbers.
1236 Checks if a double is a power of two. @param x the double value to check @return true if x is a power of two, false otherwise
1237 Checks if a double is a mathematical integer. @param x the double value to check @return true if x is a mathematical integer, false otherwise
1238 Rounds a long value to a double, applying specified rounding mode. @param x the long value to round @param mode the rounding mode to apply
1239 Fuzzy compares two doubles with a given tolerance. @param a First double value. @param b Second double value. @param tolerance Tolerance for fuzzy equality. @return -1, 0, or 1 based on fuzzy comparison.
1240 Calculates max run size before fallback based on table size. @param tableSize The size of the hash table.
1241 Trims the buffer to maintain the top K elements. Adjusts bufferSize and threshold based on the comparator.
1242 Calculates the base-10 logarithm of an integer with rounding. @param x the integer to calculate the logarithm of @param mode the rounding mode to use
1243 Calculates the square root of a long value. @param x The long value to calculate the square root of. @param mode Rounding mode to apply.
1244 Calculates the new capacity of the queue, ensuring it's within limits. @return New capacity, limited by maximumSize.
1245 Creates a horizontal linear transformation with given y-intercept. @param y the y-intercept of the horizontal transformation
1246 Creates a linear transformation with given slope. @param slope The slope of the linear transformation.
1247 Creates a vertical linear transformation at the given x-coordinate. @param x The x-coordinate; must be a finite value. @return A VerticalLinearTransformation object.
1248 Calculates factorial of a non-negative integer. @param n The integer for which to calculate factorial.
1249 Calculates the floor of the base-10 logarithm of a long. @param x The long value to calculate the logarithm of. @param mode Rounding mode to apply. @return The floor of the base-10 logarithm.
1250 Multiplies a long by a fraction (numerator/denominator). @param x the long value @param numerator the numerator of the fraction @param denominator the denominator of the fraction @return the result of the multiplication
1251 Calculates b raised to the power of k with overflow checks. @param b Base. @param k Exponent.
1252 Calculates the population covariance. Throws IllegalStateException if no data points exist.
1253 Calculates the sample covariance. Requires at least two data points. Returns the covariance value.
1254 Calculates Pearson's correlation coefficient. Requires at least 2 data points; returns NaN if invalid.
1255 Calculates the mean of a sequence of numbers. @param values Iterator of Number objects to calculate mean from. @return The calculated mean as a double.
1256 Adds a data point to the accumulator, updating statistics. @param value the value to add; NaN handled appropriately.
1257 Calculates population covariance. @return Population covariance, throws exception if no data.
1258 Calculates the sample covariance. Requires at least two data points. Returns the covariance value.
1259 Calculates Pearson's correlation coefficient. Requires at least two data points; returns NaN if invalid.
1260 Partitions the array around a pivot element. @param array The array to partition. @param from Start index of the partition slice. @param to End index of the partition slice.
1261 Creates a PairedStats object from a byte array. @param byteArray Byte array containing PairedStats data. @return PairedStats object reconstructed from the array.
1262 Creates a Stats object from a byte array. @param byteArray Byte array containing Stats data. @return A Stats object reconstructed from the byte array.
1263 Creates a snapshot of the current statistical properties. @return A new PairedStats object representing the current state.
1264 Returns a snapshot of the x-axis statistical properties. @return A Stats object representing the current x-axis state.
1265 Returns a snapshot of the y-axis statistical properties.
1266 Creates a collector to compute stats from a stream of numbers. Returns a Stats object after processing the stream.
1267 Converts an InetAddress to a URI-style string. @param ip The InetAddress to convert. @return URI string representation of the IP address.
1268 Converts an Inet6Address to a compatible Inet4Address. @param ip The Inet6Address to convert. @return Inet4Address representation of the IPv4 portion.
1269 Converts a 6to4 Inet6Address to its embedded IPv4 address. @param ip The 6to4 Inet6Address to convert. @return The IPv4 address embedded in the 6to4 address.
1270 Gets the IPv4 address embedded in an ISATAP IPv6 address. @param ip Inet6Address representing the ISATAP address @return Inet4Address representing the embedded IPv4 address
1271 Computes a result from a collection of numbers. @param dataset Collection of Number objects @return The computed result (double)
1272 Computes quantiles from a dataset using scaling and indexes. @param dataset Collection of Number objects to process @return Map of quantile values (index -> value)
1273 Adds a double value to the array. @param value the double value to add @return this Builder instance
1274 Adds all elements from a double array to the builder. @param values double array to add; returns this builder.
1275 Adds all elements from a collection to the array. @param values collection of doubles to add @return this Builder instance
1276 Adds all elements from another ImmutableDoubleArray. @param values the array to add elements from @return this Builder instance
1277 Creates an ImmutableDoubleArray containing a single element. @param e0 The double value to be stored in the array.
1278 Creates an ImmutableDoubleArray from two doubles. @param e0 The first double value. @param e1 The second double value.
1279 Creates an ImmutableDoubleArray from the given double values. @param e0 The first double value. @param e1 The second double value. @param e2 The third double value.
1280 Creates an ImmutableDoubleArray from the given double values. @param e0 First double value. @param e1 Second double value. @param e2 Third double value. @param e3 Fourth double value.
1281 Creates an ImmutableDoubleArray from the given double values. @param e0 First double value. @param e1 Second double value. @param e2 Third double value. @param e3 Fourth double value. @param e4 Fifth double value.
1282 Creates an ImmutableDoubleArray from the given six double values.
1283 Creates an immutable copy of a double array. @param values The double array to copy. @return A new ImmutableDoubleArray containing the values.
1284 Creates an ImmutableDoubleArray from a collection of Doubles. @param values Collection of Double values to copy.
1285 Creates an ImmutableDoubleArray from a DoubleStream. @param stream The stream of doubles to create the array from.
1286 Returns a full ImmutableDoubleArray if partial, otherwise returns this.
1287 Checks if the array contains the target double value. Returns true if found, false otherwise.
1288 Adds an integer to the array. @param value The integer to add. @return The Builder instance for chaining.
1289 Adds all elements from an array to the builder. @param values array of integers to add @return this builder instance
1290 Adds all integers from a collection to the builder. @param values Collection of integers to add. @return This builder instance.
1291 Adds all elements from an ImmutableIntArray to the builder. @param values ImmutableIntArray to add elements from. @return The Builder instance.
1292 Creates an ImmutableIntArray containing a single element. @param e0 the element to be stored in the array
1293 Creates an ImmutableIntArray from two integers.
1294 Creates an ImmutableIntArray from the given integer elements.
1295 Creates an ImmutableIntArray from the given four integers.
1296 Creates an ImmutableIntArray from the provided integer elements.
1297 Creates an ImmutableIntArray from the provided integer elements.
1298 Creates a new ImmutableIntArray containing a copy of the input array.
1299 Creates an ImmutableIntArray from an IntStream. @param stream The IntStream to create the array from.
1300 Returns a trimmed view or the original if not partial.
1301 Adds a long value to the array. @param value the long value to add @return this Builder instance
1302 Adds all elements from a long array to the builder. @param values the long array to add @return this builder
1303 Adds all values from a collection to the array. @param values collection of Long values to add @return this Builder instance
1304 Adds all elements from another ImmutableLongArray. @param values the array to add elements from @return this builder
1305 Creates an ImmutableLongArray containing a single element. @param e0 the element to be included in the array
1306 Creates an ImmutableLongArray from two long elements.
1307 Creates an ImmutableLongArray from the given long values.
1308 Creates an ImmutableLongArray from the given long values.
1309 Creates an ImmutableLongArray from the given long values.
1310 Creates an ImmutableLongArray from the given six long elements.
1311 Creates an immutable copy of a long array. @param values The long array to copy. @return A new ImmutableLongArray containing the copied values.
1312 Creates an ImmutableLongArray from a LongStream. @param stream The LongStream to copy. @return An ImmutableLongArray containing the stream's elements.
1313 Returns a trimmed view or the original array if not partial.
1314 Creates a ScaleAndIndexes object with the scale and given indexes. @param indexes Collection of integer indexes. @return ScaleAndIndexes object.
1315 Creates an ImmutableIntArray from a Collection of Integers. Returns EMPTY if the collection is empty.
1316 Creates an ImmutableLongArray from a collection of Long objects. @param values Collection of Long values to copy.
1317 Parses a string as an Integer. @param string String to parse, @param radix The radix to use. @return Integer object or null if parsing fails.
1318 Parses a string as a long with radix 10. @param string String to parse. @return Long value or null if parsing fails.
1319 Decodes a string representation of an unsigned integer. @param stringValue String to decode; throws NumberFormatException on error. @return The decoded unsigned integer value.
1320 Creates an UnsignedInteger from a long value. @param value long value to convert; must fit in an int. @return UnsignedInteger representation of the value.
1321 Creates an UnsignedInteger from a BigInteger. @param value BigInteger value to convert, must be non-negative.
1322 Creates an UnsignedInteger from a string with specified radix. @param string String representation of the unsigned integer. @param radix The radix of the number.
1323 Adds an UnsignedInteger to this one. @param val the UnsignedInteger to add @return the sum of this and val
1324 Subtracts an UnsignedInteger from this one. @param val The value to subtract. @return The difference as an UnsignedInteger.
1325 Multiplies this UnsignedInteger by another. @param val The UnsignedInteger to multiply by. @return The product of the two UnsignedIntegers.
1326 Divides this UnsignedInteger by another. @param val The divisor (unsigned). Returns quotient.
1327 Calculates the remainder of unsigned integer division. @param val The divisor. @return The remainder of the division.
1328 Returns the string representation of this unsigned integer.
1329 Compares this unsigned integer with another. @param other The other unsigned integer to compare to. @return Positive, negative, or zero based on comparison.
1330 Creates an UnsignedLong from a long value. @param value the long value to convert (must be >= 0) @return UnsignedLong representation of the value
1331 Creates an UnsignedLong from a BigInteger. @param value The BigInteger to convert; must be non-negative.
1332 Adds an UnsignedLong value to this UnsignedLong. @param val the UnsignedLong to add @return the sum as an UnsignedLong
1333 Subtracts an UnsignedLong value from this UnsignedLong. @param val the UnsignedLong to subtract @return the result of the subtraction
1334 Multiplies this UnsignedLong by another. @param val the UnsignedLong to multiply by @return the product as an UnsignedLong
1335 Divides two unsigned longs, handling negative divisors and optimizing. @param dividend the dividend value @param divisor the divisor value @return the quotient of the unsigned division
1336 Calculates the remainder of unsigned division. @param dividend the dividend value @param divisor the divisor value
1337 Creates an UnsignedLong from a string representation. @param string String to parse. @param radix Radix of the number.
1338 Parses a string as an unsigned long using radix 10. @param string String to parse. @return The unsigned long value.
1339 Decodes a string value as an unsigned long. @param stringValue String to decode. Throws NumberFormatException on error. @return The unsigned long value.
1340 Checks if the member has package-private accessibility. Uses isPrivate(), isPublic(), and isProtected() to determine.
1341 Wraps a primitive type to its wrapper type. Returns this if not a primitive.
1342 Unwraps a wrapper type if it is a wrapper, otherwise returns this.
1343 Gets the component type of this TypeToken, or null if none.
1344 Retrieves the result of the computation. @return The computed value, or throws an exception if failed. @throws InterruptedException, ExecutionException If interrupted/failed.
1345 Submits a task and adds a queue listener to the executor. @param executorService Executor service to submit the task. @param task Callable task to execute. @param queue Queue to add the future to. @return ListenableFuture representing the task's execution.
1346 Waits for the service to be running, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException if timeout is exceeded.
1347 Waits for the service to reach running state, with timeout. @param timeout Maximum time to wait, using Duration. @throws TimeoutException if timeout is exceeded.
1348 Waits for the service to be running, with a timeout. @param timeout The maximum time to wait. @throws TimeoutException if the timeout is exceeded.
1349 Waits for the service to reach the running state, with timeout. @param timeout The maximum time to wait. @throws TimeoutException if the timeout is exceeded.
1350 Waits for service termination, with a timeout. @param timeout Duration to wait; throws TimeoutException.
1351 Waits for the service to terminate, with a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1352 Waits for service termination, with a timeout. @param timeout Duration to wait; throws TimeoutException.
1353 Waits for the service to terminate, with a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
1354 Collects value from a Future, handling exceptions. @param index Index of the Future in the list. @param future Future to collect the value from.
1355 Atomically adds delta to the current value. @param delta The value to add. @return The current value before the addition.
1356 Atomically adds `delta` to the current double value. @param delta Value to add to the current value. @return The updated double value.
1357 Atomically adds delta to element at index i. @param i index of the double to update @param delta value to add @return the original value at index i
1358 Atomically adds delta to the double at index i. @param i index of the double to add to @param delta value to add @return the added double value
1359 Attempts to cancel the future. Closes resources if successful. @param mayInterruptIfRunning whether to interrupt if running @return true if cancellation was successful
1360 Recursively searches for a path to a lock node. @param node Target lock node. @param seen Set of visited nodes to prevent cycles. @return ExampleStackTrace representing the path, or null.
1361 Creates a ListenableFutureTask for the given Callable. @param callable Callable to execute when the task runs.
1362 Creates a ListenableFutureTask for a Runnable with an initial result. @param runnable The task to execute. @param result The initial result of the task.
1363 Executes registered tasks upon completion, notifying listeners.
1364 Creates and returns a new ExecutionSequencer instance.
1365 Creates a FluentFuture from a ListenableFuture. If it's already a FluentFuture, returns it; otherwise wraps it.
1366 Wraps a future to propagate results without cancellation. @param future The future to wrap. @return A NonCancellationPropagatingFuture.
1367 Reloads a value for the given key. @param key The key to reload. @param oldValue The old value associated with the key. @return A ListenableFuture containing the reloaded value.
1368 Enqueues an event to each listener's queue with itself as label. @param event The event to enqueue.
1369 Enqueues an event and its label for processing by listeners. @param event The event to enqueue. @param label The label associated with the event.
1370 Dispatches listener events, ensuring thread safety.
1371 Dispatches listener events; ensures the monitor is not held.
1372 Signals the next waiting thread if a guard condition is met.
1373 Submits an AsyncCallable for asynchronous execution. @param callable Callable to execute. @param executor Executor to run the callable with. @return ListenableFuture representing the asynchronous operation.
1374 Schedules an AsyncCallable for execution after a delay. @param callable Callable to execute asynchronously @param delay Delay before execution @param timeUnit Time unit of the delay @param executorService Executor service to use @return ListenableFuture representing the asynchronous task
1375 Creates a TrustedListenableFutureTask for a Callable. @param callable The Callable to execute. @return A TrustedListenableFutureTask wrapping the Callable.
1376 Submits a Callable to an executor and wraps it in a ListenableFuture. @param callable The Callable to execute. @param executor Executor to run the task. @return ListenableFuture representing the asynchronous computation.
1377 Creates a TrustedListenableFutureTask for a runnable and value. @param runnable The runnable to execute. @param value The result of the runnable. @return A TrustedListenableFutureTask.
1378 Submits a runnable to an executor and returns a ListenableFuture. @param runnable The task to execute. @param executor Executor to run the task. @return ListenableFuture representing the task execution.
1379 Attempts to acquire a permit from a semaphore without interruption. @param semaphore Semaphore to acquire. @param timeout Duration to wait for a permit. @return True if acquired, false otherwise.
1380 Returns the first element as an Optional, or absent if empty.
1381 Returns the last element as an Optional. Returns absent if empty.
1382 Finds the first element matching the predicate in the iterator. @param iterator Iterator to search. @param predicate Predicate to apply to each element. @return Optional containing the first matching element, or absent.
1383 Sets the expected node count. @param expectedNodeCount The expected number of nodes (non-negative). @return this
1384 Sets the expected node count for the network. @param expectedNodeCount The expected number of nodes.
1385 Sets the expected edge count for the network. @param expectedEdgeCount The expected number of edges.
1386 Sets the expected node count for the graph. @param expectedNodeCount The expected number of nodes (non-negative). @return A reference to this builder for chaining.
1387 Checks if any element in the iterable matches the predicate. @param iterable Iterable to check. @param predicate Predicate to apply to each element.
1388 Creates a predicate that checks if a CharSequence contains a pattern. @param pattern The pattern string to use for matching.
1389 Propagates a throwable if it's an instance of declaredType or unchecked. @param throwable The throwable to propagate, or null. @param declaredType The expected exception type.
1390 Retrieves a flattened class hierarchy for a given class. @param concreteClass The class to flatten. @return An ImmutableSet of classes in the hierarchy.
1391 Returns a ThreadFactory suitable for App Engine or a default. Returns default if App Engine ThreadManager is unavailable.
1392 Checks if the iterable contains the target object. @param target Object to search for (null allowed). @return True if found, false otherwise.
1393 Filters a {@link FilteredSetMultimap} based on combined predicates. @param multimap Multimap to filter. @param entryPredicate Additional predicate for filtering. @return Filtered {@link SetMultimap}.
1394 Filters keys in a ListMultimap based on a predicate. @param unfiltered The input ListMultimap. @param keyPredicate Predicate for filtering keys.
1395 Filters the iterable to contain only elements of the specified type. @param type Class of elements to retain. @return Filtered FluentIterable.
1396 Removes all elements from the set that are present in the collection. @param collection Collection of elements to remove @return true if the set changed
1397 Creates an EnumMultiset from an iterable of enum elements. @param elements Iterable containing enum constants. @return EnumMultiset containing the elements.
1398 Creates a LinkedList from an iterable. @param elements Iterable whose elements are added to the list. @return A new LinkedList containing elements from the iterable.
1399 Creates an ArrayDeque from an iterable. @param elements Iterable to populate the deque from. @return An ArrayDeque containing the elements.
1400 Creates a ConcurrentLinkedQueue from an iterable. @param elements Iterable used to initialize the queue. @return A new ConcurrentLinkedQueue containing the elements.
1401 Creates a LinkedBlockingDeque initialized with elements from an iterable. @param elements Iterable of elements to initialize the deque. @param <E> The type of elements in the deque.
1402 Creates a LinkedBlockingQueue initialized with elements from an iterable. @param elements Iterable used to populate the queue. @param <E> Type of elements in the queue.
1403 Creates a PriorityBlockingQueue from an iterable. @param elements Iterable of elements to initialize the queue. @return A PriorityBlockingQueue containing the elements.
1404 Creates a priority queue from an iterable. @param elements Iterable of elements to add to the queue. @return PriorityQueue containing the elements.
1405 Creates an EnumSet from an iterable. @param iterable Elements to add to the EnumSet. @param elementType The enum class. @return EnumSet containing elements from the iterable.
1406 Creates a new concurrent hash set from an iterable. @param elements Iterable containing elements to add to the set. @return A new concurrent hash set containing the elements.
1407 Creates a LinkedHashSet containing elements from the iterable. @param <E> The type of elements in the set. @param elements Iterable containing elements to add. @return A new LinkedHashSet with the elements.
1408 Creates a new TreeSet containing the elements from the iterable. @param <E> The type of elements in the set. @param elements Iterable containing elements to add to the set. @return A new TreeSet containing the elements.
1409 Casts to Collection or copies from Iterable to ArrayList. If it's a Collection, returns it; otherwise, creates a new list.
1410 Creates an ArrayList from an iterable. @param elements Iterable providing elements for the list. @return A new ArrayList containing elements from the iterable.
1411 Creates a HashSet from an iterable. @param elements Iterable containing elements for the set. @return A new HashSet containing the elements.
1412 Checks if all elements satisfy the given predicate. @param predicate Predicate to apply to each element. @return True if all elements match the predicate.
1413 Creates a list iterator starting at the specified index. @param start The starting index for the list iterator.
1414 Creates a SortedMap view of a SortedSet, using the provided function. @param set The set of keys. @param function Maps keys to values. @return A SortedMap view.
1415 Transforms entries in a sorted map using a transformer. @param fromMap The sorted map to transform. @param transformer Transforms entries. @return A new SortedMap with transformed entries.
1416 Transforms map values using a function. @param fromMap Input map. @param function Function to apply to each value. @return New map with transformed values.
1417 Adds a specified number of occurrences for an element. @param element the element to add occurrences for @param occurrences the number of occurrences to add @return The previous count of the element.
1418 Adds a specified number of occurrences of an element. @param element Element to add. Must not be null. @param occurrences Number of occurrences to add; must be positive. @return Previous count of the element, or 0 if new.
1419 Transforms a ListMultimap using an EntryTransformer. @param fromMap The input multimap. @param transformer Transforms entries (key, value). @return A new ListMultimap with transformed values.
1420 Transforms multimap values using a function. @param fromMultimap Input multimap. @param function Transforms values V1 -> V2. @return A new multimap with transformed values.
1421 Adds all elements from the given iterable to the builder. @param elements Iterable of elements to add. @return this Builder instance for method chaining.
1422 Adds all elements from a collection to a multiset. @param self The multiset to add elements to. @param elements Collection of elements to add. @return True if the multiset was modified.
1423 Checks if the input value is within the range. @param input The value to check. @return True if within the range.
1424 Creates a TableCollector to build a Table from input. @param rowFunction Maps input to row keys. @param columnFunction Maps input to column keys. @param valueFunction Maps input to values. @param tableSupplier Supplier for the initial table.
1425 Escapes characters in a string, handling supplementary code points. @param s String to escape, @param index Start index.
1426 Constructs a StandardNetwork using the provided builder and connections. @param builder NetworkBuilder instance @param nodeConnections Node connections map @param edgeToReferenceNode Map of edges to reference nodes
1427 Constructs a StandardValueGraph with given parameters. @param builder Graph builder; configures graph properties. @param nodeConnections Node connections map. @param edgeCount Number of edges in the graph.
1428 Copies characters from a Readable to an Appendable. @param from The Readable source. @param to The Appendable destination. @return Total number of characters copied.
1429 Decodes a CharSequence into a byte array. @param chars The CharSequence to decode. @throws IllegalArgumentException if decoding fails.
1430 Returns the smallest power of two >= x. @param x BigInteger value. Must be positive.
1431 Returns the largest power of 2 less than or equal to x. @param x BigInteger value. Must be positive.
1432 Creates an Invokable instance for the given constructor. @param constructor The constructor to be invoked.
1433 Creates an Invokable instance for a given Method. @param method The method to be invoked. @return A MethodInvokable instance.
1434 Completes a future, executing listeners and handling interruption. @param param The AbstractFuture to complete. @param callInterruptTask Whether to interrupt the task.
1435 Atomically adds 'delta' to the value associated with 'key'. @param key The key of the entry to update. @param delta The value to add. @return The updated value.
1436 Atomically adds 'delta' to the value associated with 'key'. @param key The key. @param delta Value to add. @return The updated value.
1437 Adds all entries from the given map to this AtomicLongMap. @param m The map containing key-value pairs to add.
1438 Constructs an AbstractGraphBuilder with a directed flag. @param directed indicates whether the graph is directed.
1439 Adds a listener and executor to the queue for event processing. @param listener The listener to add. @param executor The executor for processing events.
1440 Converts an object of type A to type B. @param a Input object of type A, may be null. @return Converted object of type B, may be null.
1441 Constructs a CompactHashMap with the default initial size.
1442 Constructs a CompactHashMap with the given expected size. @param expectedSize The expected number of entries.
1443 Constructs a CompactHashSet with the default initial size.
1444 Constructs a CompactHashSet with an initial capacity. @param expectedSize Initial capacity (1-MAX_SIZE)
1445 Extracts the simple name of the class. Handles inner/anonymous classes and top-level classes.
1446 Constructs a multimap from the given map. @param map The map to initialize from; must be empty.
1447 Creates a Multimap from a map and a collection factory. @param map Initial map; must be empty. @param factory Supplier for collection creation.
1448 Creates a new, empty HashMultiset instance.
1449 Creates a new, empty LinkedHashMultiset.
1450 Creates an EnumMultiset from an iterable of enum elements. @param elements Iterable of enum elements to add. @param type The enum class for the multiset. @return An EnumMultiset containing the elements.
1451 Calculates the population standard deviation. Returns the square root of the population variance.
1452 Calculates the sample standard deviation. Returns the square root of the sample variance.
1453 Calculates the population standard deviation. Uses the result of populationVariance(). @return Population standard deviation.
1454 Calculates the sample standard deviation. Returns the square root of the sample variance.
1455 Returns a CharMatcher that matches chars *not* in the sequence. @param sequence Sequence of characters to exclude.
1456 Creates a StringConverter for converting to the specified target format. @param targetFormat Target CaseFormat for conversion. @return StringConverter instance.
1457 Chains another converter after this one. @param secondConverter The converter to apply after this one. @return A new ConverterComposition with both converters.
1458 Returns a reverse converter that converts A to B. Lazily initializes the reverse converter if needed.
1459 Creates a StringConverter for the specified enum class. @param enumClass The enum class to convert. @return A StringConverter instance.
1460 Creates a Converter from a BiMap. @param bimap The BiMap to use for conversion. @return A Converter using the provided BiMap.
1461 Checks if this list is equal to another list. @param object The list to compare to. @return True if lists contain same elements in order.
1462 Creates a ConcurrentHashMultiset from an iterable. @param elements Iterable of elements to add to the multiset. @return A new ConcurrentHashMultiset containing the elements.
1463 Appends elements from an array to an appendable, separated by a separator. @param appendable Destination for the appended string. @param parts Array of elements to append. @return The appendable object.
1464 Appends elements from an Iterable to a StringBuilder. @param builder StringBuilder to append to. @param parts Iterable of elements to append.
1465 Joins elements from an iterator into a string. @param parts Iterator of elements to join. @return String containing joined elements.
1466 Joins map entries into a string. @param map Map to be joined. @return String representation of the map entries.
1467 Returns a string representation of the cache specification.
1468 Generates a string representation of the MapMaker object. Includes initialCapacity, concurrencyLevel, strengths, equivalence.
1469 Generates a string representation of the CacheBuilder object. Includes configured parameters like capacity and expiration.
1470 Constructs a `MapMakerInternalMap` with provided settings. @param builder MapMaker instance defining map configuration. @param entryHelper Helper for internal entry management.
1471 Adapts a java.util.Optional to an Optional. Returns null if input is null. @param <T> the type of the value @param javaUtilOptional the java.util.Optional to adapt @return an Optional<T> or null if input is null
1472 Creates a HostAndPort from host and port. @param host The host string. @param port The port number.
1473 Parses a host string into a HostAndPort object without a port. @param host The host string to parse. @return HostAndPort object representing the host.
1474 Retrieves the element at the specified position in an iterable. @param iterable Iterable to retrieve from. @param position Element position (0-based).
1475 Creates a copy of this BloomFilter. Uses the underlying bit array to initialize the copy.
1476 Acquires permits. @param permits Number of permits to acquire. @return Time waited in seconds.
1477 Attempts to acquire a permit within a given timeout. @param timeout Duration to wait for a permit. @return True if a permit was acquired, false otherwise.
1478 Attempts to acquire a permit within a specified timeout. @param timeout Timeout duration in the given unit. @param unit Time unit for the timeout. @return True if a permit was acquired, false otherwise.
1479 Attempts to acquire a specified number of permits. @param permits Number of permits to acquire; must be positive.
1480 Attempts to acquire a single permit immediately. Returns true if successful, false otherwise.
1481 Attempts to acquire permits within a timeout. @param permits Permits to acquire; must be positive. @param timeout Timeout duration. @return True if permits acquired, false otherwise.
1482 Attempts to acquire the lock, potentially waiting for a timeout. @param time Timeout duration. @param unit Time unit of the timeout value. @return True if the lock was acquired, false otherwise.
1483 Protected constructor for AbstractService. Prevents direct instantiation.
1484 Checks if the priority queue's heap structure is valid. Uses heapForIndex to verify the integrity of each index.
1485 Creates a CacheBuilder from the current specification. Returns a CacheBuilder instance configured with settings.
1486 Configures MapMaker to use weak keys. @return MapMaker instance with weak keys enabled.
1487 Checks if the current service state matches the expected state. @param expected The expected service state.
1488 Retrieves value at specified row and column. @param rowIndex row index @param columnIndex column index @return value at the given indices, or null if absent
1489 Sets the value at the specified row and column. @param rowIndex row index @param columnIndex column index @param value new value, can be null @return the previous value at the specified position
1490 Returns the element at the specified index. @param index index of the element to retrieve
1491 Returns the element at the specified index. @param index index of the element to return
1492 Returns the element at the specified index. @param index index of the element to return @return The long value at the given index
1493 Finds the first index where the matcher returns true. @param sequence CharSequence to search within. @param start starting index (inclusive)
1494 Constructs an AbstractIndexedListIterator. @param size list size, @param position initial position
1495 Creates a ByteArrayDataInput from a byte array and start index. @param bytes byte array @param start start index within the byte array
1496 Checks if a byte sequence is well-formed UTF-8. @param bytes byte array to check @param off start index @param len length of sequence to check @return true if well-formed, false otherwise
1497 Copies elements from src to dst array, starting at offset. @param src source array @param offset start index in src @param len number of elements to copy @param dst destination array
1498 Copies a portion of an array to a new Object array. @param elements array to copy from @param offset start index @param length number of elements to copy @return new Object array containing copied elements
1499 Writes bytes to a destination array, handling bounds and length. @param dest Destination byte array. @param offset Start offset in the destination array. @param maxLength Maximum number of bytes to write. @return Number of bytes written.
1500 Encodes a byte array into a string using the default encoding. @param bytes byte array to encode @param off start offset in the byte array @param len number of bytes to encode @return encoded string representation
1501 Reads up to len bytes from the input stream into the byte array. @param in input stream @param b byte array to read into @param off offset into the byte array @param len number of bytes to read @return number of bytes read
1502 Reverses a portion of a boolean array between specified indices. @param array The boolean array to reverse. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1503 Reverses a portion of the array between fromIndex and toIndex. @param array byte array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1504 Reverses a portion of the character array between fromIndex and toIndex. @param array char array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1505 Reverses the portion of an array between specified indices. @param array The array to reverse. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1506 Reverses the portion of the array from fromIndex to toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1507 Returns a new ImmutableDoubleArray containing elements from startIndex to endIndex. @param startIndex start index (inclusive) @param endIndex end index (exclusive)
1508 Returns a new ImmutableIntArray containing elements from startIndex to endIndex. @param startIndex start index (inclusive) @param endIndex end index (exclusive)
1509 Returns a new ImmutableLongArray containing elements from startIndex to endIndex. @param startIndex start index (inclusive) @param endIndex end index (exclusive)
1510 Reverses a portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1511 Reverses the portion of the array between fromIndex and toIndex. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1512 Reverses the portion of an array between specified indices. @param array The array to reverse. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1513 Sorts a byte array in place within a specified range. @param array The byte array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1514 Sorts a byte array in descending order within a range. @param array byte array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1515 Sorts a portion of the array, flipping signs before and after. @param array array to sort @param fromIndex start index @param toIndex end index (exclusive)
1516 Sorts a portion of the array in descending order. @param array array to sort @param fromIndex start index @param toIndex end index (exclusive)
1517 Sorts a portion of the array of longs in ascending order. @param array The array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1518 Sorts a portion of the array in descending order. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1519 Filters a collection based on the given predicate. @param unfiltered Collection to filter. @param predicate Predicate to apply to each element. @return A new filtered collection.
1520 Creates a Splitter that splits on the specified character. @param separator The character to split on. @return A Splitter instance.
1521 Protected constructor for SleepingStopwatch, prevents external instantiation.
1522 Constructs a Finalizer with a reference class, queue, and FRQ. @param finalizableReferenceClass Class of the finalizable reference @param queue Reference queue for cleanup @param frqReference PhantomReference to track finalization
1523 Constructs a new Builder instance.
1524 Returns a new Builder instance for constructing ImmutableMultimap.
1525 Constructs a new Builder instance.
1526 Protected constructor for subclass extension.
1527 Protected constructor for subclass extension, calls super().
1528 Protected constructor for subclass extension, calls super().
1529 Protected constructor, allows subclass extension.
1530 Protected constructor for subclassing, calls super().
1531 Creates an unmodifiable BiMap from the given BiMap. @param bimap The BiMap to unmodifiable. @return An UnmodifiableBiMap.
1532 Creates a new, empty MutableClassToInstanceMap. Returns an instance with an empty delegate map.
1533 Creates a MutableClassToInstanceMap from a backing map. @param backingMap Map of class to instance. @return A new MutableClassToInstanceMap.
1534 Returns an empty immutable type-to-instance map.
1535 Protected constructor for subclassing; delegates to super().
1536 Returns an unmodifiable view of the given multimap. @param delegate The multimap to wrap; cannot be null.
1537 Returns an unmodifiable view of the given table. @param table The table to wrap in an unmodifiable view. @return An {@code UnmodifiableTable} wrapping the input table.
1538 Adapts a Future to a ListenableFuture, executing listeners in the pool. @param future The Future to adapt. @param executor Executor for listener execution.
1539 Retrieves a value if present, delegating to the underlying cache. @param key The key to retrieve. @return The value or null if not present.
1540 Retrieves value by key, loading if absent. @param key key to retrieve @param valueLoader loader for absent values @return value or null if not found
1541 Retrieves all values associated with the given keys. @param keys Iterable of keys to retrieve values for @return ImmutableMap containing key-value pairs.
1542 Puts a key-value pair into the cache, delegating to the underlying cache.
1543 Adds all entries from the given map to the cache. Delegates to the underlying cache's putAll method.
1544 Invalidates all entries for the given keys using the delegate. @param keys Iterable of keys to invalidate.
1545 Creates a new ReferenceEntry for the segment. @param segment Cache segment. @param key Key for the entry. @param hash Hash code for the key. @param next Next entry in the chain.
1546 Creates a new ReferenceEntry for the segment. @param segment owning segment @param key key for the entry @param hash hashcode of the key @param next next entry in the chain
1547 Creates a new ReferenceEntry for the segment. @param segment The segment to create entry for. @param key The key for the entry. @param hash The hash code for the key. @param next The next entry in the segment.
1548 Creates a new reference entry for the segment. @param segment owning segment @param key entry key @param hash hash code @param next next entry in chain @return new ReferenceEntry
1549 Creates a new reference entry for the given segment, key, hash, and next entry.
1550 Creates a new reference entry for the segment. @param segment the segment to create the entry for @param key the key @param hash the hash code @param next the next entry
1551 Sets the value for a cache entry. @param entry The ReferenceEntry to update. @param key The key associated with the value. @param value The new value to set. @param now Current timestamp for write recording.
1552 Returns the size of the iterable. Uses {@code Iterables.size()}.
1553 Calculates the number of edges in the graph. Sums node degrees, checks parity, and returns half the sum.
1554 Converts an InputStream to a byte array. @param in Input stream to convert. @return Byte array representation of the stream.
1555 Reads bytes from an InputStream into a byte array. @param in InputStream to read from @param expectedSize Expected size of the byte array @return Byte array containing read bytes
1556 Constructs a new AbstractBiMap with provided forward and inverse maps. @param forward The forward map. @param backward The inverse map.
1557 Removes all values associated with the given key. @param key The key whose values are to be removed. @return Unmodifiable list of removed values.
1558 Replaces values for a key with a new iterable. @param key The key to replace values for. @param values New values to associate with the key. @return An unmodifiable view of the old values.
1559 Removes all values associated with a key. @param key The key to remove values for. @return Unmodifiable set of removed values.
1560 Retrieves the sorted set of values for a given key. @param key The key to retrieve values for. @return SortedSet of values or null if key not present.
1561 Returns a string representation of the collection. Uses {@code Collections2.toStringImpl} for implementation.
1562 Returns a string representation of the map. Uses Maps.toStringImpl to format the map.
1563 Creates a HashMap with the specified expected size. @param expectedSize Expected number of elements in the map.
1564 Detects if a graph contains a cycle. @param graph The graph to check for cycles. @return True if a cycle exists, false otherwise.
1565 Creates a HashBasedTable with specified row/cell counts. @param expectedRows Expected number of rows. @param expectedCellsPerRow Expected cells per row.
1566 Creates a new LinkedHashMap with the specified expected size. @param expectedSize Expected number of elements in the map.
1567 Creates a map based on the ordering type. @param expectedSize Expected size of the map. @return A map of appropriate type.
1568 Creates a HashSet with the specified expected size. @param expectedSize The expected number of elements.
1569 Creates a LinkedHashSet with the given expected size. @param expectedSize The expected number of elements.
1570 Initializes ServiceManagerState with a collection of services. @param services Immutable collection of services to manage.
1571 Returns the first entry in the multiset, or null if empty. Uses iterator to find the first entry and returns it.
1572 Returns the last entry of the multiset (delegate). Returns null if the multiset is empty.
1573 Polls and removes the first entry from the multiset. Returns null if the multiset is empty.
1574 Polls and removes the last entry from the multiset. Returns null if the multiset is empty.
1575 Returns a Set view of the multiset's entries. Delegates to superclass.
1576 Returns a set view of the multiset's entries. Delegates to superclass.
1577 Creates a TreeRangeSet from a RangeSet. @param rangeSet The RangeSet to copy ranges from. @return A new TreeRangeSet containing the ranges.
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges Iterable of Range objects to add. @return A new TreeRangeSet containing the ranges.
1579 Returns a sorted map of keys to collections of values. Delegates to the superclass implementation.
1580 Returns the set of cells in this table. Delegates to super.
1581 Returns the table's values. Delegates to superclass implementation.
1582 Returns the reversed range. Lazily creates the reversed range.
1583 Creates an ImmutableCell with non-null rowKey, columnKey, value.
1584 Returns a set of the multiset's elements. Lazily initialized.
1585 Adds a key-value pair to the map. @param key The key of the entry. @param value The value of the entry.
1586 Creates an immutable map from two key-value pairs. @param k1, v1 First key-value pair. @param k2, v2 Second key-value pair.
1587 Creates an ImmutableMap from five key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to include. @return ImmutableMap containing the provided entries.
1588 Creates an ImmutableMap from the given key-value pairs. @param <K> Key type @param <V> Value type
1589 Creates an ImmutableMap from five key-value pairs. @param <K> Key type @param <V> Value type @param k1, v1, ..., k5, v5 Key-value pairs @return ImmutableMap containing the provided entries
1590 Creates an ImmutableMap from six key-value pairs. @param <K> Key type @param <V> Value type @param k1, v1, ..., k6, v6 Key-value pairs @return ImmutableMap containing the provided entries
1591 Creates an ImmutableMap from seven key-value pairs. @param <K> Key type @param <V> Value type @param k1-k7 Keys and values for the map @return ImmutableMap containing the provided entries
1592 Creates an ImmutableMap from eight key-value pairs. @param <K> Key type. @param <V> Value type.
1593 Creates an ImmutableMap from nine key-value pairs. @param <K> Key type. @param <V> Value type.
1594 Creates an immutable map from ten key-value pairs. @param <K> Key type @param <V> Value type @param k1-k10 Keys @param v1-v10 Values @return ImmutableMap containing the provided entries
1595 Creates an ImmutableMapEntry from an Entry. @param <K> Key type. @param <V> Value type. @param entry Entry to create ImmutableMapEntry from.
1596 Adds a key-value pair from an Entry to the multimap. @param entry The Entry containing the key-value pair. @return The Builder object for method chaining.
1597 Adds all entries from an iterable to the multimap. @param entries Iterable of entries to add. @return The Builder object for method chaining.
1598 Adds an entry to the multimap and returns the Builder. @param entry The Entry to add. @return The Builder object for chaining.
1599 Filters a SortedSet based on a predicate. @param unfiltered The set to filter. @param predicate The predicate to apply.
1600 Trims the map to the minimum required size for efficiency. Uses delegate or resizes entries/table based on size.
1601 Trims the set to its current size, optimizing memory usage.
1602 Checks if the range is empty (lowerBound equals upperBound).
1603 Checks if two Range objects are equal based on bounds. @param object the object to compare to @return true if equal, false otherwise
1604 Adds an element to the end of the list. @param element Element to add. Returns true.
1605 Returns an iterator for the list. Delegates to the underlying list's list iterator.
1606 Returns a list iterator over the list, starting from the beginning.
1607 Finds the first node within the range, or null if none exists.
1608 Creates a HashBasedTable from another table, copying its contents.
1609 Creates a TreeBasedTable with natural ordering for rows and columns.
1610 Creates a new TreeBasedTable with specified row and column comparators. @param rowComparator Comparator for row keys. @param columnComparator Comparator for column keys.
1611 Creates a new HashBiMap with the given expected size. @param expectedSize the expected number of entries @return a new HashBiMap instance
1612 Creates a new builder instance for constructing an ImmutableBiMap.
1613 Constructs a new Builder instance.
1614 Returns a Builder using the natural ordering of keys.
1615 Creates a Builder for an ImmutableSortedMap, using the given comparator. @param comparator Comparator to define the map's ordering.
1616 Returns a Builder for a reverse-ordered map. Uses natural ordering in reverse.
1617 Creates an ImmutableMap from a single key-value pair. @param k1 The key. @param v1 The value. @return An ImmutableMap containing the pair.
1618 Returns the inverse of this bi-map, swapping keys and values.
1619 Creates a new Builder instance for constructing an ImmutableList.
1620 Creates a Builder for an ImmutableSortedSet using the given comparator. @param comparator Comparator for ordering elements.
1621 Returns a Builder for a sorted set in reverse order. @return Builder configured for reverse order sorting.
1622 Returns a Builder using the natural ordering of elements.
1623 Returns a reverse view of the list. Returns 'this' if the list has 0 or 1 elements.
1624 Creates an ImmutableList of Characters from the given string. @param string The string to convert to a list of characters.
1625 Creates a singleton ImmutableList containing the given element. @param e1 The single element for the list.
1626 Returns an immutable set of entries. Lazily initializes if needed.
1627 Creates a singleton immutable set containing the given element. @param e1 The single element in the set.
1628 Returns the charset from parameters, or absent if none. Throws IllegalStateException if multiple charsets are defined.
1629 Stops all managed services asynchronously. Returns the ServiceManager instance for chaining.
1630 Checks if all services are running. Returns false if any are not.
1631 Creates a Builder with the specified expected size. @param expectedSize The initial capacity of the builder.
1632 Adds all entries from a multimap to this builder. @param multimap Multimap whose entries to add. @return This builder.
1633 Throws a FileSystemException if file deletion fails, including suppressed exceptions. @param path Path of the file/directory being deleted. @param exceptions Collection of IOExceptions during deletion.
1634 Concatenates multiple iterators into a single iterator. @param inputs Iterators to combine; can be empty. @return A new iterator containing elements from all inputs.
1635 Retrieves an entry by key. Returns null if key is null. @param key The key to search for.
1636 Initiates cleanup if readCount exceeds a threshold. Calls runCleanup() to perform cleanup tasks.
1637 Checks if the map contains the specified key. @param key the key to check, may be null @return true if the key is contained, false otherwise
1638 Returns a submap from fromKey up to, but not including, toKey. @param fromKey start key (inclusive) @param toKey end key (exclusive)
1639 Computes the difference between two maps. @param left, right Maps to compare. @param valueEquivalence Equivalence for values. @return A MapDifference object representing the differences.
1640 Calculates the difference between two sorted maps. @param left Left sorted map. @param right Right map. @return SortedMapDifference object representing the differences.
1641 Constructs an AsyncEventBus with an identifier and executor. @param identifier EventBus identifier @param executor Executor for event handling
1642 Constructs an AsyncEventBus with a default identifier and executor. @param executor Executor for event handling @param subscriberExceptionHandler Exception handler
1643 Constructs an AsyncEventBus with a provided executor. @param executor Executor for asynchronous event handling.
1644 Constructs an EventBus with a direct executor and default dispatcher. @param identifier EventBus identifier
1645 Constructs an EventBus with default executor and dispatcher. @param exceptionHandler Exception handler for event processing.
1646 Finds the index of the minimum child of a node. @param index Index of the parent node.
1647 Finds the minimum grandchild of a node at the given index. @param index Index of the parent node. @return Index of the minimum grandchild or -1 if none.
1648 Returns the last element in the queue, or null if empty. Uses getMaxElementIndex to find the last element.
1649 Bubbles element 'x' up the heap, maintaining heap order. @param index Index of element to bubble up. @param x Element to be bubbled.
1650 Checks if the multiset contains the given object. @param object The object to check for existence. @return True if the object is present, false otherwise.
1651 Adds one occurrence of the element to the delegate. @param element element to add @return true
1652 Removes one occurrence of the element. @param element element to remove @return true if an element was removed, false otherwise
1653 Clears the multiset by clearing its entry set iterator.
1654 Returns the count of the specified object in the delegate. @param object The object to count. @return The count of the object or 0 if not found.
1655 Calculates the hash code based on the delegate multiset's entries.
1656 Returns a string representation of the multiset using the delegate's entry set.
1657 Converts the collection to an array, reusing the provided array if possible. @param array Array to populate, may be reused/resized. @return Array containing elements of the collection.
1658 Retrieves and removes the last element using a descending iterator.
1659 Returns a sorted subset of elements between fromElement and toElement.
1660 Gets the element immediately before the given element. @param e Element to find the preceding element for.
1661 Returns the greatest element less than or equal to the given element. @param e Element to find the floor for.
1662 Returns a view of the set containing elements up to `toElement`. @param toElement Element to which the view is bounded.
1663 Returns the smallest element greater than or equal to `e`. @param e Element to find the ceiling for. @return Ceiling element or null if none exists.
1664 Returns the next higher element than {@code e} or null. @param e Element to find the next higher element for.
1665 Returns a sub-set between `fromElement` and `toElement`. @param fromElement start element (inclusive) @param toElement end element (exclusive)
1666 Returns a sorted set containing elements >= fromElement.
1667 Returns a sorted set of row keys from the row map.
1668 Returns the row map. Delegates to the superclass implementation.
1669 Wraps a Deque in a synchronized view. @param deque The Deque to be synchronized. @return A synchronized Deque.
1670 Constructs an ArrayBasedCharEscaper with a map, min, and max safe chars. @param replacementMap Character replacements. @param safeMin Minimum value of safe characters. @param safeMax Maximum value of safe characters.
1671 Creates an Escaper instance from the defined character mappings. @return Escaper object built from the character replacements.
1672 Constructs an ArrayBasedUnicodeEscaper with given parameters. @param replacementMap Character replacements @param safeMin Safe range minimum @param safeMax Safe range maximum
1673 Creates a HashCode from a byte array. @param bytes The byte array representing the hash code.
1674 Creates a HashCode from a hexadecimal string. @param string Hexadecimal string representation of the hash code.
1675 Combines multiple hash codes into a single HashCode. @param hashCodes Iterable of HashCode objects to combine. @return Combined HashCode.
1676 Combines multiple hash codes into a single hash code. @param hashCodes Iterable of hash codes to combine. @return Combined hash code.
1677 Creates an HmacMD5 HashFunction using the provided key. @param key The secret key for the HmacMD5 algorithm. @return An HmacMD5 HashFunction instance.
1678 Creates an HmacSHA1 HashFunction using the given key. @param key Secret key for HMAC-SHA1 initialization. @return An HmacSHA1 HashFunction.
1679 Creates an HMAC-SHA256 hash function using the given key. @param key Key for HMAC-SHA256 initialization. @return An HMAC-SHA256 HashFunction object.
1680 Creates an HMAC-SHA512 hash function using the given key. @param key Secret key for HMAC-SHA512 initialization @return A MacHashFunction object
1681 Wraps a byte array in a ByteSource. @param b The byte array to wrap. @return A ByteSource instance.
1682 Wraps a CharSequence in a CharSource, using StringCharSource if it's a String. @param charSequence The CharSequence to wrap. @return A CharSource wrapping the given CharSequence.
1683 Writes lines from an iterable to a buffered writer, using system line separator. @param lines Iterable of CharSequence lines
1684 Writes lines from a stream to a buffered writer, using default line separator. @param lines Stream of CharSequence lines
1685 Reads a BloomFilter from an InputStream. @param in Input stream to read from @param funnel Funnel for hashing elements @return BloomFilter object deserialized from the stream
1686 Calculates the mean of a sequence of numbers. @param values Iterable of Number objects to average @return The mean of the numbers.
1687 Calculates the base-2 logarithm of a double. @param x the double value @param mode the rounding mode to apply
1688 Detects potential hash flooding in a hash table. @param hashTable The hash table to check. @return True if flooding is detected, false otherwise.
1689 Adds an element to the buffer, maintaining the top K. @param elem Element to add; ignored if smaller than threshold.
1690 Creates a case-insensitive Alphabet. Converts lowercase mappings to uppercase if needed. @return New Alphabet instance with case ignored.
1691 Creates a TopKSelector for finding the least elements. @param k The initial capacity of the selector. @param comparator Comparator for ordering elements.
1692 Creates a TopKSelector for the greatest elements. @param k Initial capacity. @param comparator Comparator for ordering elements.
1693 Creates a linear transformation passing through (x1, y1) & (x2, y2). @param x2 The x-coordinate of the second point. @param y2 The y-coordinate of the second point.
1694 Calculates the least squares linear fit. Returns a LinearTransformation object.
1695 Calculates the least-squares linear fit. Returns NaN transformation if data is invalid.
1696 Checks if a long is prime. @param n the number to check @return true if prime, false otherwise
1697 Calculates the floor of the base-10 logarithm of a BigInteger. @param x BigInteger value, must be positive. @param mode RoundingMode to apply.
1698 Calculates the binomial coefficient (n choose k). @param n Non-negative integer. @param k Non-negative integer, k <= n. @return Binomial coefficient (n choose k).
1699 Calculates the mean of a sequence of numbers. @param values Iterable of Number objects to calculate mean from.
1700 Adds paired data points (x, y) to the accumulator. @param x the first data point @param y the second data point
1701 Adds all values from an iterable to the accumulator. @param values iterable of Number objects to add
1702 Adds all values from the iterator to the accumulator. @param values iterator of Number objects to add
1703 Adds all statistics from another Stats object. @param values Stats object containing data to add.
1704 Adds all statistics from another StatsAccumulator. @param values StatsAccumulator containing data to add.
1705 Selects element at required index within range [from, to] in-place. @param required Index of element to select. @param array Array to select from. @param from Start index. @param to End index.
1706 Adds all elements from a DoubleStream to the array. @param stream stream of doubles to add @return this Builder instance
1707 Adds all elements from an iterable to the array. @param values iterable of doubles to add @return this Builder instance
1708 Adds all integers from a stream to the builder. @param stream The stream of integers to add. @return The Builder instance for chaining.
1709 Adds all integers from an iterable to the builder. @param values Iterable of integers to add. @return This builder instance for chaining.
1710 Adds all elements from a LongStream to the builder. @param stream the LongStream to add elements from @return this Builder instance
1711 Reads the AtomicLongArray from an ObjectInputStream. Reads double values and constructs an AtomicLongArray.
1712 Adds all values from an iterable to the array. @param values iterable of Long values to add @return this Builder instance
1713 Parses a string as an Integer with radix 10. @param string String to parse @return Integer object or null if parsing fails.
1714 Creates an UnsignedInteger from a string using radix 10. @param string String representation of the unsigned integer.
1715 Divides this UnsignedLong by another. @param val the divisor value @return the quotient of the unsigned division
1716 Converts an unsigned long to a string representation in specified radix. @param x the unsigned long value @param radix the radix to use
1717 Multiplies a and b modulo m. @param a first operand @param b second operand @param m modulus @return (a * b) % m
1718 Squares 'a' modulo 'm'. Returns (a * a) % m.
1719 Calculates the remainder of unsigned division. @param val the divisor value @return the remainder of the unsigned division
1720 Creates an UnsignedLong from a string representation (base 10). @param string String to parse.
1721 Checks if this entry is equal to another entry. @param object The object to compare to. @return True if equal, false otherwise.
1722 Calculates the hash code by combining key and value hashes. Handles null key/value by treating them as 0.
1723 Returns a string representation of the entry: key=value.
1724 Checks if the type represents an array. Returns true if the component type exists.
1725 Creates a ListeningExecutorService, wrapping the delegate. @param delegate ExecutorService to wrap; returns if already wrapped.
1726 Returns a {@link ListeningScheduledExecutorService}, wrapping delegate if needed. @param delegate The ScheduledExecutorService to wrap.
1727 Executes any of the given Callable tasks, returning the result. @param executorService Executor to run tasks. @param tasks Collection of Callable tasks. @param timed Whether to timeout. @param timeout Timeout value. @param unit TimeUnit of the timeout. @return Result of the completed task. @throws Exception on failure.
1728 Creates a CombinedFuture to execute an async callable. @param combiner Async callable task to execute. @param executor Executor for the callable. @return ListenableFuture that represents the combined result.
1729 Creates a CombinedFuture to execute a callable with given executor. @param combiner Callable to execute. @param executor Executor to run the callable. @return ListenableFuture representing the combined result.
1730 Checks lock acquisition order, throwing exception if unsafe. @param policy Lock policy to handle potential deadlocks. @param acquiredLock Lock node that was acquired.
1731 Reloads a value associated with a key. @param key Key of the value to reload. @param oldValue The old value associated with the key. @return ListenableFuture representing the reload operation.
1732 Returns a future representing the status of the underlying future.
1733 Submits an async callable to a given executor. @param callable AsyncCallable to execute. @param executor Executor to run the callable on.
1734 Gets the result from a Future, throwing a checked exception if needed. @param validator Validator for exception class. @param future Future to retrieve the value from. @param exceptionClass Exception class to throw on failure.
1735 Retrieves the Future's value, throwing a checked exception if needed. @param future Future to retrieve value from @param exceptionClass Exception class to throw on failure @param timeout Timeout value @param unit Timeout unit @return The value from the Future
1736 Releases the monitor lock. Signals a waiting thread if lock count is 1.
1737 Awaits condition satisfaction, optionally signaling first. @param guard Guard object to wait on. @param nanos Timeout in nanoseconds. @param signalBeforeWaiting Whether to signal before waiting. @throws InterruptedException If interrupted while waiting.
1738 Creates a TimeoutFuture wrapping a future with a timeout. @param delegate Future to wrap @param time Timeout duration @param unit TimeUnit of timeout @param scheduledExecutor Executor for scheduling @return ListenableFuture wrapping the delegate future
1739 Schedules an AsyncCallable for asynchronous execution. @param callable Callable to execute asynchronously @param delay Duration delay before execution @param executorService Executor service to use @return ListenableFuture representing the task
1740 Retrieves an enum constant by value, or absent if not found. @param enumClass The enum class to retrieve from. @param value The value to search for.
1741 Finds the first element in the iterable matching the predicate. @param iterable Iterable to search. @param predicate Predicate to apply to each element.
1742 Checks if any element in the iterable matches the predicate. @param predicate Predicate to apply to each element. @return True if any element matches, otherwise false.
1743 Creates a CharMatcher based on total characters and a BitSet. @param totalCharacters Total characters. @param table BitSet of characters to match. @param description Description of the character set.
1744 Propagates a throwable if it's an instance of either declaredType. @param throwable The throwable to propagate, or null. @param declaredType1 First exception type. @param declaredType2 Second exception type.
1745 Rethrows a Throwable as a RuntimeException, handling IOException. @param e The throwable to rethrow. @throws IOException if the throwable is an IOException.
1746 Rethrows a Throwable as a RuntimeException, propagating specific exceptions. @param e The exception to rethrow. @param declaredType Expected exception type for propagation.
1747 Closes all registered resources in a LIFO order, handling exceptions.
1748 Creates a new thread with the given name and runnable. @param name Thread name. @param runnable Runnable to execute in the thread. @return The new thread instance.
1749 Filters a multimap's keys based on a predicate. @param unfiltered The input multimap. @param keyPredicate Predicate for filtering keys. @return Filtered SetMultimap.
1750 Filters entries in a multimap based on a predicate. @param unfiltered The input multimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered SetMultimap.
1751 Retrieves a declared annotation of the specified type. @param annotationType Class of the annotation to retrieve. @return The annotation or null if not found.
1752 Merges multiple sorted iterators into a single unmodifiable iterator. @param iterators Iterators to merge, sorted by comparator. @param comparator Comparator for sorting the merged elements.
1753 Converts an Iterable to an Object array. Uses castOrCopyToCollection to perform the conversion.
1754 Replaces values for a key with a new iterable, returning old values. @param key The key to replace values for. @param values Iterable of new values.
1755 Removes all values associated with the given key. @param key The key whose values are to be removed. @return List of values that were associated with the key.
1756 Creates a CopyOnWriteArrayList from an iterable. @param elements Iterable providing elements for the list. @return A new CopyOnWriteArrayList containing elements.
1757 Creates a CopyOnWriteArraySet from an iterable of elements. @param elements Iterable containing elements for the set. @return A new CopyOnWriteArraySet containing the elements.
1758 Performs a binary search in a sorted list. @param list Sorted list to search. @param key Key to search for. @param comparator Comparator for element comparison.
1759 Bulk gets locks for given keys. @param keys Keys to retrieve locks for. @return Unmodifiable list of locks.
1760 Returns a string representation of the network. Includes directed, parallel edges, self-loops, nodes, edges.
1761 Returns a string representation of the graph. Includes directedness, self-loops, nodes, and edges.
1762 Transforms entries in a navigable map using a transformer. @param fromMap The input navigable map. @param transformer Transforms map entries. @return A new navigable map with transformed entries.
1763 Transforms values in a sorted map using a function. @param fromMap The sorted map to transform. @param function Transforms values. @return A new SortedMap with transformed values.
1764 Adds a specified number of occurrences for an element. @param element the element to add @param occurrences number of occurrences to add @return The previous count of the element.
1765 Adds a specified number of occurrences for an element. @param element the element to add @param occurrences number of occurrences to add @return Previous count of the element.
1766 Transforms values in a ListMultimap using a Function. @param fromMultimap The input multimap. @param function Transforms values of type V1 to V2. @return A new ListMultimap with transformed values.
1767 Adds all elements from a collection to this multiset. @param elementsToAdd Collection of elements to add. @return True if the multiset was modified.
1768 Adds all elements from a collection to the multiset. @param elementsToAdd Collection of elements to add. @return True if the multiset was modified.
1769 Returns a synchronized view of the given multimap. @param multimap The Multimap to synchronize. @return A synchronized Multimap.
1770 Creates a synchronized table view of the given table. @param table The table to be synchronized. @return A synchronized view of the input table.
1771 Escapes characters in a string to their Unicode escape sequences. @param string The string to escape. @return The escaped string.
1772 Converts a Readable to a StringBuilder. @param r The Readable source. @return A StringBuilder containing the readable's contents.
1773 Creates a {@link CatchingFuture} to handle exceptions and fallback. @param input Future to monitor. @param exceptionType Exception type to catch. @param fallback Fallback function on exception. @param executor Executor for the listener.
1774 Attempts to cancel the future. @param mayInterruptIfRunning Whether to interrupt running task. @return True if cancellation succeeded.
1775 Sets the value for the future. @param value The value to set, can be null. @return True if the value was successfully set.
1776 Sets the exception for the future and completes it. @param throwable The exception to set; cannot be null. @return True if the exception was set successfully.
1777 Sets the future to manage asynchronous computation results. @param future The ListenableFuture to manage.
1778 Transforms a future by applying a function. @param input Input future. @param function Transformation function. @param executor Executor for the transformation.
1779 Atomically increments the value associated with the given key. @param key The key of the entry to increment. @return The updated value.
1780 Atomically decrements the value associated with the key. @param key The key of the entry to decrement. @return The updated value.
1781 Atomically increments the value associated with the given key. @param key The key whose value is incremented. @return The updated value.
1782 Atomically decrements the value associated with the given key. @param key The key whose value should be decremented. @return The updated value.
1783 Creates an AtomicLongMap from a given map. @param m The map used to initialize the AtomicLongMap. @return A new AtomicLongMap populated with the map's entries.
1784 Constructs a GraphBuilder with the specified directed flag. @param directed indicates whether the graph is directed.
1785 Constructs a NetworkBuilder with a specified direction. @param directed indicates whether the network is directed.
1786 Constructs a ValueGraphBuilder with the specified direction. @param directed indicates whether the graph is directed.
1787 Adds a listener and executor for event processing. @param listener The listener to add. @param executor The executor for processing events.
1788 Applies the converter to an object of type A and returns B. @param a Input object of type A @return Converted object of type B
1789 Creates a new, empty CompactHashMap instance.
1790 Creates a CompactHashMap with the specified expected size. @param expectedSize The expected number of entries.
1791 Creates a new, empty CompactHashSet instance.
1792 Creates a CompactHashSet with the specified initial capacity. @param expectedSize Initial capacity (1-MAX_SIZE)
1793 Creates a new ListMultimap from a map and list factory. @param map The map to initialize from. @param factory Factory for creating new list instances.
1794 Creates a new SetMultimap from a map and a set factory. @param map Initial map; must be empty. @param factory Supplier for creating sets of values.
1795 Creates a new, empty Builder using a LinkedHashMultiset.
1796 Chains another converter after this one. @param secondConverter The converter to apply after this one.
1797 Appends object array elements to a StringBuilder. @param builder StringBuilder to append to. @param parts Object array to append. @return StringBuilder with appended elements.
1798 Joins elements from an iterable into a string. @param parts Iterable of elements to join. @return String containing joined elements.
1799 Creates a `MapMakerInternalMap` based on the provided builder. @param builder MapMaker instance defining map configuration.
1800 Creates a MapMakerInternalMap with dummy values based on strength. @param builder MapMaker instance defining map configuration.
1801 Concatenates multiple iterables into a single FluentIterable. @param inputs Iterables to concatenate; can be empty. @return A FluentIterable containing all elements.
1802 Retrieves the element at the specified position. @param position Index of the element to retrieve.
1803 Acquires a single permit. Returns time waited in seconds.
1804 Attempts to acquire the lock, waiting up to the specified duration. @param time The maximum time to wait for the lock. @return True if the lock was acquired, false otherwise.
1805 Attempts to acquire lock and checks guard condition. @param guard Guard to check. @param time Timeout duration. @param unit Time unit of the timeout. @return True if guard is satisfied and lock acquired.
1806 Creates a CacheBuilder from a CacheBuilderSpec. @param spec CacheBuilder specification. @return CacheBuilder instance.
1807 Creates a new strong interner instance. Uses the builder pattern for configuration.
1808 Creates a weak interner using the builder pattern.
1809 Puts a value at the intersection of row and column keys. @param rowKey Row key. @param columnKey Column key. @param value Value to set, can be null. @return Previous value at the specified position.
1810 Removes a value at the specified row and column keys. @param rowKey row key @param columnKey column key @return the previous value or null if not found
1811 Checks if this array is equal to another ImmutableDoubleArray. @param object Object to compare with, must be ImmutableDoubleArray. @return True if arrays are equal, false otherwise.
1812 Checks if this array is equal to another ImmutableIntArray. @param object Object to compare with. @return True if arrays are equal, false otherwise.
1813 Checks if two ImmutableLongArray instances are equal. @param object Object to compare to, must be an ImmutableLongArray. @return True if arrays are equal, false otherwise.
1814 Converts a string to the specified case format. @param format Target CaseFormat to convert to. @param s The string to convert.
1815 Finds the first index where the matcher returns true. @param sequence CharSequence to search within.
1816 Constructs an AbstractIndexedListIterator with initial position 0. @param size list size
1817 Extracts Teredo information from an Inet6Address. @param ip Inet6Address representing the Teredo address.
1818 Checks if a byte sequence is well-formed UTF-8. @param bytes byte array to check @return true if well-formed, false otherwise
1819 Encodes a byte array into a string using the default encoding. @param bytes byte array to encode @return encoded string representation
1820 Reads all bytes from the input stream into the byte array. @param in input stream @param b byte array to read into @param off offset into the byte array @param len number of bytes to read @throws IOException if an I/O error occurs or EOF reached prematurely
1821 Reverses the entire boolean array in place. @param array The boolean array to reverse.
1822 Rotates a portion of a boolean array by a given distance. @param array The boolean array to rotate. @param distance Rotation distance. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1823 Reverses the entire byte array in place. @param array The byte array to reverse.
1824 Rotates a portion of the array by the given distance. @param array byte array to rotate @param distance rotation distance @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1825 Sorts a byte array in descending order within a range. @param array byte array to sort @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1826 Sorts a portion of the character array in descending order. @param array char array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1827 Reverses the entire character array in place. @param array The character array to reverse.
1828 Rotates a portion of the char array by a given distance. @param array char array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1829 Sorts a portion of an array in descending order. @param array The array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1830 Reverses the elements of a double array in place. @param array The double array to reverse.
1831 Rotates a portion of an array by a specified distance. @param array The array to rotate. @param distance Rotation distance. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1832 Sorts a portion of the array in descending order. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1833 Reverses the entire float array in place. @param array The float array to reverse.
1834 Rotates a portion of the array by a specified distance. @param array array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1835 Sorts a portion of the array in descending order. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1836 Reverses the elements of the input array in place. @param array The integer array to be reversed.
1837 Rotates a portion of the array by a given distance. @param array array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1838 Sorts a portion of the array in descending order. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1839 Reverses the order of elements in a long array. @param array The long array to reverse.
1840 Rotates a portion of the array by a specified distance. @param array array to rotate @param distance rotation distance @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1841 Sorts a portion of the array in descending order. @param array The array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1842 Reverses the entire short array in place. @param array The short array to reverse.
1843 Rotates a portion of a short array by a specified distance. @param array The array to rotate. @param distance Rotation distance. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1844 Sorts a byte array in ascending order. @param array The byte array to sort.
1845 Sorts a byte array in descending order. @param array The byte array to sort.
1846 Sorts the entire integer array in ascending order. @param array The array to be sorted.
1847 Sorts the array in descending order. @param array The array to sort.
1848 Sorts the entire array of longs in ascending order. @param array The array to sort.
1849 Sorts the entire array in descending order. @param array The array of longs to sort.
1850 Creates a Splitter that splits on the specified separator string. @param separator The separator string. @return A Splitter instance.
1851 Configures the key-value pair separator for map splitting. @param separator The character to split on. @return MapSplitter instance with configured separator.
1852 Starts the finalizer thread to clean up finalizable references. @param finalizableReferenceClass Class of the reference @param queue Reference queue for cleanup @param frqReference PhantomReference for tracking finalization
1853 Returns a new Builder instance for constructing ImmutableListMultimap.
1854 Creates a new Builder instance for constructing ImmutableSetMultimap.
1855 Returns an unmodifiable view of the given multiset. @param multiset the multiset to wrap; must not be null @return an unmodifiable Multiset
1856 Creates a new EvictingQueue with the specified maximum size. @param maxSize the maximum number of elements the queue can hold
1857 Protected constructor to allow subclassing, calls super().
1858 Protected constructor for subclass extension, calls super().
1859 Protected constructor, enables subclass extension.
1860 Creates an unmodifiable set view of the given entry set. @param entrySet The set of map entries to make unmodifiable. @return An unmodifiable set view of the input entry set.
1861 Returns an unmodifiable NavigableMap from the given map. @param map The NavigableMap to make unmodifiable. @return An unmodifiable NavigableMap.
1862 Returns an unmodifiable ListMultimap. @param delegate The ListMultimap to unmodify; cannot be null.
1863 Returns an unmodifiable SetMultimap. @param delegate The SetMultimap to unmodifiable.
1864 Returns an unmodifiable view of the given RowSortedTable. @param table The RowSortedTable to wrap; must not be null. @return An UnmodifiableRowSortedMap wrapping the table.
1865 Adapts a Future to a ListenableFuture, or returns it if already one. @param future The Future to adapt. @return A ListenableFuture.
1866 Adds a callback to the future to be executed on the given executor. @param future The future to monitor. @param callback The callback to execute. @param executor Executor to run the callback on.
1867 Constructs a LocalCache with configurations from a CacheBuilder. @param builder CacheBuilder for configuring cache settings. @param loader CacheLoader for loading values.
1868 Creates a new TreeMultiset with natural ordering of elements.
1869 Creates a new TreeMultiset. Uses natural order if comparator is null. @param comparator Comparator for ordering elements, or null. @return A new TreeMultiset instance.
1870 Replaces values for a key with a new iterable. @param key The key to replace values for. @param values New values to associate with the key.
1871 Replaces values for a key with a new iterable. @param key The key to replace values for. @param values New values for the key. @return An unmodifiable view of the old values.
1872 Removes all values for a key, delegating to superclass. @param key The key whose values are to be removed. @return Unmodifiable set of removed values.
1873 Creates a HashMultiset with space for the given number of distinct elements. @param distinctElements Estimated number of distinct elements.
1874 Checks if a network has a cycle. @param network The network to check. @return True if a cycle exists, false otherwise.
1875 Creates a new LinkedHashMultiset with space for distinctElements. @param distinctElements Expected number of distinct elements.
1876 Constructs a StandardNetwork using the provided NetworkBuilder. @param builder NetworkBuilder instance to initialize the network.
1877 Constructs a StandardValueGraph using the provided builder. @param builder Graph builder for configuring graph properties.
1878 Creates a new HashSet with expected size for values per key.
1879 Creates a LinkedHashSet for storing values. @return A LinkedHashSet with initial capacity.
1880 Adds a cell to the table. @param rowKey Row key for the cell. @param columnKey Column key for the cell. @param value Value for the cell. @return The builder instance for chaining.
1881 Adds a key-value pair and returns the builder for chaining. @param key The key of the entry. @param value The value of the entry.
1882 Adds a key-value pair to the map. @param <T> Type of the value. @param key Class representing the key. @param value The value to associate with the key. @return This builder instance for fluent chaining.
1883 Adds all entries from a map to the builder, casting values. @param map Map of class types to instances to add. @return This builder instance.
1884 Adds an entry to the builder, using its key and value. @param entry The entry to add. @return A reference to this builder.
1885 Adds a key-value pair to the builder and returns itself. @param key The key of the entry. @param value The value of the entry.
1886 Adds a key-value pair to the map. @param <T> The type of the key. @param key The key of the entry. @param value The value of the entry.
1887 Adds a key-value pair to the map builder. @param key The TypeToken representing the key. @param value The value associated with the key. @return this
1888 Adds all entries from an iterable to the multimap. @param entries Iterable of entries to add. @return The Builder object for method chaining.
1889 Adds all entries from an iterable to the multimap. @param entries Iterable of entries to add. @return The Builder object for method chaining.
1890 Filters a NavigableSet based on a predicate. @param unfiltered Set to filter. @param predicate Predicate to apply for filtering. @return Filtered NavigableSet.
1891 Builds the ImmutableSortedMap. Returns empty map if size is 0. Returns map with single entry if size is 1. Otherwise, builds from entries.
1892 Adds a range-value pair to the builder. @param range The range to associate with the value. @param value The value associated with the range.
1893 Adds a range to the builder. @param range The range to add. Must not be empty. @return this
1894 Returns the intersection of this range with another range. @param connectedRange the range to intersect with @return the intersection, or this/connectedRange if contained
1895 Calculates the range between two ranges. @param otherRange The other range to compare with. @return Range between the two ranges.
1896 Returns the span of this Range and another Range. @param other The other Range to determine the span with.
1897 Returns the canonical form of the range within the domain. @param domain Discrete domain for canonicalization.
1898 Creates a new HashBiMap with a default expected size of 16.
1899 Creates a HashBiMap from a Map. @param map the map to copy from @return a new HashBiMap populated with the map's entries
1900 Returns a new Builder instance for constructing the map.
1901 Creates an ImmutableClassToInstanceMap from a class and value. @param <B> Base type. @param <T> Subtype of B. @param type Class of the instance. @param value The instance. @return ImmutableClassToInstanceMap containing the pair.
1902 Returns a set of all values in the bi-map. Uses the inverse bi-map's key set.
1903 Returns a reverse view of the list, or a new reversed list. @param list The list to be reversed. @return A reverse view or a new reversed list.
1904 Creates an ImmutableList from an array. @param elements Array to copy. @return ImmutableList containing array elements.
1905 Creates an ImmutableList from an array, handling empty, single, and multiple elements. @param elements Array to create the list from. @param length The number of valid elements in the array.
1906 Returns a view of the list between fromIndex and toIndex. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1907 Creates an ImmutableRangeMap from a single range-value pair. @param range The range for the mapping. @param value The value associated with the range.
1908 Creates an ImmutableRangeSet from a single Range. @param range The Range to create the set from.
1909 Creates an ImmutableSortedMap from a key-value pair. @param comparator Comparator for keys. @param k1 The key. @param v1 The value.
1910 Creates an immutable set from an array of elements. @param elements Array of elements to create the set from.
1911 Creates a new Builder instance for constructing an ImmutableSet. @param <E> The type of elements in the set. @return A new Builder object.
1912 Concatenates two iterators into a single iterator. @param a First iterator. @param b Second iterator. @return A new iterator containing elements from both.
1913 Concatenates three iterators into a single iterator. @param a, b, c Iterators to combine; cannot be null. @return A new iterator containing elements from all inputs.
1914 Concatenates four iterators into a single iterator. @param a, b, c, d Iterators to combine; cannot be null. @return A new iterator containing elements from all inputs.
1915 Retrieves subscribers for a given event type. @param event The event object. @return An iterator over all subscribers for the event.
1916 Gets the result from a ClosingFuture, ensuring it's done. @param closingFuture Future to retrieve the result from. @return Result of the future.
1917 Checks if the segment contains an entry with the given value. @param value Value to search for. @return True if a matching value exists, false otherwise.
1918 Removes the entry for the given key from the map. @param key The key of the entry to remove. @return The value of the removed entry, or null if not found.
1919 Clears the map by clearing its entry set iterator.
1920 Checks if the map is empty by checking the entry set.
1921 Calculates the hashCode of the map based on its entry set.
1922 Computes the difference between two maps. @param left, right Maps to compare. Uses Equivalence.equals() @return A MapDifference object representing the differences.
1923 Constructs an EventBus with a default identifier.
1924 Swaps element with its child if ordering dictates. @param index Index of the element to potentially swap. @param x Element to be potentially swapped. @return Index of element after potential swap.
1925 Fills a hole in the heap by moving elements from grandchildren. @param index Starting index of the hole to fill. @return Final index after filling the hole.
1926 Checks if the set contains an object. Uses tailSet and unsafeCompare for comparison.
1927 Removes the first element greater than or equal to the object. @param object Object to compare against, may be null. @return True if an element was removed, false otherwise.
1928 Returns a sorted set between {@code fromElement} and {@code toElement}.
1929 Returns a sorted set of row keys.
1930 Removes all values associated with the given key. @param key The key to remove values for. @return A set of removed values.
1931 Creates a BloomFilter with specified funnel, expected insertions, and fpp. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability.
1932 Rounds a double to the nearest int according to the rounding mode. @param x the double value to round @param mode the rounding mode to use
1933 Rounds a double to a long, checking for overflow. @param x the double value to round @param mode the rounding mode to use
1934 Adds all elements from the iterator to the buffer. @param elements Iterator of elements to add.
1935 Creates a TopKSelector for finding the least elements. @param k The initial capacity of the selector.
1936 Creates a TopKSelector for the greatest elements, using natural ordering. @param k Initial capacity.
1937 Checks if an integer is prime by delegating to LongMath. @param n the integer to check @return true if prime, false otherwise
1938 Calculates binomial coefficient (n choose k). @param n Non-negative integer. @param k Non-negative integer, k <= n. @return Binomial coefficient (n choose k).
1939 Creates a Stats object from an iterable of numbers. @param values iterable of Number objects to analyze @return A Stats object representing the statistics.
1940 Creates a Stats object from an iterator of numbers. @param values iterator of Number objects to analyze @return A Stats object containing statistical properties.
1941 Adds paired statistics from another PairedStats object. @param values Stats object containing data to add.
1942 Creates a Stats object from a DoubleStream. @param values Stream of double values to calculate stats from. @return Stats object containing calculated statistics.
1943 Creates a Stats object from an IntStream. @param values IntStream to compute statistics from. @return Stats object containing computed statistics.
1944 Creates a Stats object from a LongStream. @param values LongStream to compute statistics from. @return Stats object containing computed statistics.
1945 Adds all statistics from a DoubleStream to this accumulator. @param values Stream of doubles to add to the accumulator.
1946 Adds all values from an IntStream to the accumulator. @param values IntStream containing values to add.
1947 Adds all statistics from a LongStream to this accumulator. @param values LongStream containing values to add.
1948 Selects elements in-place based on requirements, recursively. @param allRequired Indices to select. @param from Start index. @param to End index.
1949 Creates an ImmutableDoubleArray from an Iterable of Doubles. @param values Iterable of Double values to copy.
1950 Creates an ImmutableIntArray from an Iterable of Integers. Handles Collection and Iterable input types.
1951 Creates an ImmutableLongArray from an iterable of Long values. Handles Collection and Iterable types.
1952 Converts unsigned long to string in specified radix. @param radix the radix to use for conversion
1953 Converts an unsigned long to a string representation (base 10). @param x the unsigned long value
1954 Executes any of the given Callable tasks, returning the result. @param executorService Executor to run tasks. @param tasks Collection of Callable tasks. @param timed Whether to timeout. @param timeout Duration timeout value. @return Result of the completed task. @throws Exception on failure.
1955 Runs a Runnable with a given Executor and returns a Future. @param combiner Runnable to execute. @param executor Executor to run the Runnable.
1956 Creates a ClosingFuture from a ListenableFuture. @param future The ListenableFuture to wrap. @return A ClosingFuture wrapping the given future.
1957 Polls the queue, returning null if empty. Delegates to the underlying queue's remove() method.
1958 Peeks at the head of the queue. Returns null if empty.
1959 Submits a Callable to an executor and returns a ListenableFuture. @param callable Callable to execute. @param executor Executor to run the callable on.
1960 Retrieves the Future's value, throwing an exception if needed. @param future Future to retrieve value from @param exceptionClass Exception class to throw on failure @param timeout Timeout value @param unit Timeout unit @return The value from the Future
1961 Notifies listeners of service termination. Throws exception if service is NEW, TERMINATED, or FAILED.
1962 Notifies listeners of a failed state transition. @param cause The exception that caused the failure.
1963 Starts timing for a service, creating a stopwatch if needed. @param service The service to start timing for.
1964 Transitions a service from one state to another. @param service The service to transition. @param from The service's previous state. @param to The service's new state.
1965 Acquires the monitor lock when the guard condition is met. @param guard The guard condition to wait for. @throws InterruptedException If interrupted while waiting.
1966 Waits for a guard condition to be satisfied. @param guard The guard to wait on. @throws InterruptedException If interrupted while waiting.
1967 Waits until the guard condition is met, uninterruptibly. Releases lock if condition not met.
1968 Waits for a guard's condition, uninterruptibly. Throws exception if preconditions are not met.
1969 Acquires lock and waits for guard condition, or timeout. @param guard Guard object to wait on. @param time Timeout duration. @param unit Time unit for the timeout. @throws InterruptedException If interrupted while waiting.
1970 Attempts to acquire lock uninterruptibly until condition met. @param guard Guard object to wait on. @param time Timeout duration. @param unit Time unit for the timeout.
1971 Waits for a condition, with a timeout. @param guard Guard object to wait on. @param time Timeout value. @param unit Time unit for the timeout. @throws InterruptedException If interrupted while waiting.
1972 Waits for a condition to be met, uninterruptibly, with a timeout. @param guard Guard object to wait on. @param time Timeout duration. @param unit Time unit for the timeout. @return True if condition met, false if timeout expires.
1973 Adds a timeout to the future. @param timeout Timeout duration @param unit TimeUnit of the timeout @param scheduledExecutor Executor for scheduling @return FluentFuture with timeout applied
1974 Wraps a future with a timeout, using nanosecond duration. @param delegate Future to wrap @param time Duration for the timeout @param scheduledExecutor Executor for scheduling @return ListenableFuture wrapping the delegate future
1975 Finds the first element matching the predicate. @param predicate Predicate to apply to each element. @return Optional containing the first match, or empty.
1976 Creates a precomputed CharMatcher, optimizing for size or negation. Returns a NegatedFastMatcher if the set is too large.
1977 Rethrows a Throwable as a RuntimeException, propagating exceptions. @param e Throwable to rethrow. @param declaredType1 First exception type to propagate. @param declaredType2 Second exception type to propagate.
1978 Writes a byte array to the output stream. @param bytes The byte array to write. @throws IOException if an I/O error occurs.
1979 Writes data from an InputStream to the sink. @param input The input stream to read from. @return Number of bytes written. @throws IOException if an I/O error occurs.
1980 Checks if the byte source is empty. Returns true if size is 0, otherwise opens a stream and checks for -1 (end of stream).
1981 Returns the size of the byte source, using cached value if available. Otherwise, calculates size by counting bytes or exhausting stream.
1982 Copies byte data to an OutputStream. @param output The destination OutputStream @return Number of bytes copied @throws IOException if an I/O error occurs
1983 Copies byte data to a ByteSink. @param sink The ByteSink to copy data to. @return Number of bytes copied. @throws IOException if an I/O error occurs.
1984 Reads all bytes from the stream. @throws IOException if an I/O error occurs.
1985 Reads bytes from the stream using the given processor. @param processor Processes the read bytes. @return Result from the processor, or null. @throws IOException if an I/O error occurs.
1986 Compares content of this ByteSource with another. @param other The other ByteSource to compare with. @throws IOException if an I/O error occurs during comparison.
1987 Writes a CharSequence to the output stream, handling I/O. @param charSequence The sequence of characters to write. @throws IOException if an I/O error occurs.
1988 Writes data from a Readable to an output stream. @param readable The source of character data. @return Number of characters written. @throws IOException if an I/O error occurs.
1989 Returns the length of the CharSource. Uses openStream() and countBySkipping.
1990 Copies characters from the source to an Appendable. @param appendable The destination Appendable. @return Number of characters copied. @throws IOException if an I/O error occurs.
1991 Copies character data to a CharSink, handling exceptions. @param sink The CharSink to copy to. @return Number of characters copied. @throws IOException if an I/O error occurs.
1992 Reads the first line from the character source. @throws IOException if an I/O error occurs.
1993 Reads lines from the stream using the processor. @param processor Processes each line. @return Result from the processor, or null. @throws IOException if an I/O error occurs.
1994 Checks if the CharSource is empty. Returns true if empty.
1995 Expands the segment's table when it reaches a threshold. Reclassifies entries to new table with power-of-two offset.
1996 Filters keys in a Multimap based on a predicate. @param unfiltered The input Multimap. @param keyPredicate Predicate for filtering keys.
1997 Filters values in a multimap based on a predicate. @param unfiltered Input multimap. @param valuePredicate Predicate to apply to values. @return Filtered multimap.
1998 Filters entries in a multimap based on a predicate. @param unfiltered The input multimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered Multimap.
1999 Creates an iterator for column keys, removing duplicates. Uses column comparator to sort and remove duplicate keys.
2000 Creates an ImmutableBiMap from an iterable of entries. @param entries Iterable of map entries. @return An ImmutableBiMap containing the entries.
2001 Creates an ImmutableMap from an Iterable of entries. @param entries Iterable of map entries. @return An ImmutableMap containing the entries.
2002 Converts an Iterable to an array of the specified type. @param iterable Iterable to convert. @param type The type of elements in the array. @return Array containing elements from the Iterable.
2003 Creates an ImmutableSortedSet from an Iterable with a comparator. @param comparator Comparator for sorting elements. @param elements Iterable to copy elements from.
2004 Searches a list using a key function and comparator. @param list List to search @param keyFunction Extracts key from list elements @param key Key to search for
2005 Removes all values for the given key. Throws UnsupportedOperationException. @param key The key to remove values for. @return A list of removed values (empty).
2006 Transforms values in a navigable map using a function. @param fromMap Input navigable map. @param function Function to transform values. @return A new navigable map with transformed values.
2007 Removes a mapping if it exists. @param rowKey Row key. @param columnKey Column key. @param value Value to check. @return True if mapping was removed, false otherwise.
2008 Returns a synchronized ListMultimap. @param multimap The ListMultimap to synchronize.
2009 Returns a synchronized SetMultimap or the original if synchronized. @param multimap The Multimap to synchronize.
2010 Converts a Readable to a String. @param r The Readable source. @return String representation of the Readable.
2011 Handles exceptions and provides a fallback value. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for the listener.
2012 Transforms the future using the provided function and executor. @param function Transformation function. @param executor Executor for the transformation.
2013 Creates a GraphBuilder for a directed graph. Returns a new GraphBuilder instance with directed set to true.
2014 Creates an undirected GraphBuilder instance.
2015 Creates a GraphBuilder from an existing Graph. @param graph The graph to copy configuration from. @return A GraphBuilder initialized with the graph's properties.
2016 Creates a NetworkBuilder for a directed network. Returns a new NetworkBuilder instance with direction set to true.
2017 Creates an undirected NetworkBuilder instance.
2018 Creates a NetworkBuilder from an existing Network. @param network The network to copy configuration from. @return A NetworkBuilder initialized with the network's properties.
2019 Creates a directed ValueGraphBuilder. Returns a new ValueGraphBuilder instance with direction set to true.
2020 Creates an undirected ValueGraphBuilder instance.
2021 Creates a ValueGraphBuilder from an existing ValueGraph. @param graph The ValueGraph to copy properties from. @return A ValueGraphBuilder initialized with graph's properties.
2022 Adds a listener and executor for service state changes. @param listener Listener for state transitions. @param executor Executor for listener execution.
2023 Creates a new, empty CompactLinkedHashSet.
2024 Creates a CompactHashSet from a collection. @param collection Collection to initialize the set from. @return A CompactHashSet containing elements from the collection.
2025 Creates a CompactLinkedHashSet with the specified initial capacity. @param expectedSize Initial capacity for the set.
2026 Creates a new SortedSetMultimap from a map and a sorted set factory. @param map The map to initialize from. @param factory Factory for creating sorted sets.
2027 Creates an ImmutableMultiset collector using identity function and count of 1.
2028 Creates a collector for an ImmutableMultiset. @param elementFunction Maps input to multiset element. @param countFunction Provides count for each element.
2029 Creates a new Builder instance for constructing an ImmutableMultiset.
2030 Joins an array of objects into a single string. @param parts Array of objects to join; null elements are handled. @return String containing joined elements.
2031 Joins elements of the iterable using the provided Joiner. @param joiner Joiner object to use for joining. @return String containing joined elements.
2032 Simplifies a file path by resolving ".". ".." and "//". @param pathname The file path to simplify. @return Simplified file path string.
2033 Parses encoded trie data, populating a map with suffix types. @param stack Deque for intermediate results. @param encoded Encoded trie data. @param start Starting index in the encoded string. @param builder ImmutableMap.Builder to store results. @return Number of characters processed.
2034 Creates a ConcurrentMap instance, either ConcurrentHashMap or MapMakerInternalMap. @return ConcurrentMap instance based on useCustomMap setting.
2035 Transforms elements and concatenates the resulting iterables. @param function Transformation function; produces an Iterable. @return FluentIterable containing transformed and concatenated elements.
2036 Concatenates multiple iterables into a single Iterable. @param inputs Iterables to concatenate; can be empty.
2037 Retrieves the result within the specified timeout. @param timeout Timeout duration. @param unit Time unit of the timeout. @return Result of the computation. @throws InterruptedException, TimeoutException, ExecutionException
2038 Adds a node to the graph and returns its connections. @param node The node to add. @return GraphConnections object for the new node.
2039 Attempts to acquire lock and checks guard condition. @param guard Guard to check. @param time Timeout duration.
2040 Converts a string to the specified case format. @param format Target CaseFormat to convert to. @param s The string to convert.
2041 Converts a string to the specified case format. @param format Target CaseFormat to convert to. @param s The string to convert.
2042 Converts a string to the specified case format. @param format Target CaseFormat to convert to. @param s The string to convert.
2043 Converts a string to the specified case format. @param format Target CaseFormat to convert to. @param str The string to convert.
2044 Checks if the matcher returns false for all chars in sequence. @param sequence CharSequence to check against the matcher.
2045 Removes the first matching character from a sequence. @param sequence CharSequence to remove from. @return String with the first match removed, or original string.
2046 Replaces matching characters in a sequence with a given char. @param sequence CharSequence to modify. @param replacement The character to replace matches with.
2047 Gets the embedded IPv4 address from an Inet6Address. Returns the IPv4 address or throws IllegalArgumentException.
2048 Reads bytes from the input stream and updates the hash. @param bytes buffer to store read bytes @param off offset within the buffer @param len maximum number of bytes to read @return Number of bytes read, or -1 if EOF.
2049 Reads all bytes from the input stream into the byte array. @param in input stream @param b byte array to read into @throws IOException if an I/O error occurs
2050 Rotates a boolean array by a given distance. @param array The array to rotate. @param distance Rotation distance.
2051 Rotates the entire byte array by the given distance. @param array byte array to rotate @param distance rotation distance
2052 Sorts a byte array in descending order. @param array The byte array to sort.
2053 Sorts the character array in descending order. @param array The character array to sort.
2054 Rotates the char array by a given distance. @param array char array to rotate @param distance rotation distance
2055 Sorts the entire array in descending order. @param array The double array to sort.
2056 Rotates the entire array by a specified distance. @param array The array to rotate. @param distance Rotation distance.
2057 Sorts the entire float array in descending order. @param array The float array to be sorted.
2058 Rotates the entire array by a specified distance. @param array array to rotate @param distance rotation distance
2059 Sorts the entire array in descending order. @param array The array to sort.
2060 Rotates the entire array by a given distance. @param array array to rotate @param distance rotation distance
2061 Sorts the entire array in descending order. @param array long array to sort
2062 Rotates the entire array by a specified distance. @param array array to rotate @param distance rotation distance
2063 Sorts the entire array in descending order. @param array The short array to sort.
2064 Rotates a short array by a specified distance. @param array The array to rotate. @param distance Rotation distance.
2065 Creates a MapSplitter with the specified key-value separator. @param separator Separator string for key-value pairs. @return MapSplitter instance with configured separator.
2066 Creates a RateLimiter with specified permits/second and warmup. @param permitsPerSecond Permits issued per second @param warmupPeriod Warmup period in the given unit @param unit Time unit of the warmup period
2067 Creates an unmodifiable view of a sorted multiset. @param sortedMultiset the sorted multiset to wrap @return An UnmodifiableSortedMultiset
2068 Returns an unmodifiable NavigableSet. @param set The NavigableSet to wrap; must not be null.
2069 Returns an unmodifiable collection of map entries. @param entries Collection of entries to make unmodifiable. @return An unmodifiable collection of map entries.
2070 Returns an unmodifiable view of the given sorted set multimap. @param delegate The sorted set multimap to wrap.
2071 Creates a ClosingFuture that closes the AutoCloseable future. @param future Future to wrap and close. @param closingExecutor Executor for closing the resource.
2072 Adds a callback to be executed on the given executor. @param callback Callback to run when future completes. @param executor Executor to run the callback on.
2073 Creates an EnumBiMap with specified enum key and value types. @param keyType Key enum type. @param valueType Value enum type.
2074 Creates a new EnumHashBiMap with the given enum key type. @param keyType The class of the enum keys. @return A new EnumHashBiMap instance.
2075 Creates a TreeMultiset from an iterable of elements. @param elements Iterable of elements to add to the multiset. @return A new TreeMultiset containing the elements.
2076 Creates a Builder with a custom comparator. @param comparator Comparator for ordering elements.
2077 Replaces values for a key with a new iterable. @param key The key to replace values for. @param values New values for the key.
2078 Replaces values for a key with the provided iterable. @param key The key whose values are to be replaced. @param values Iterable of new values for the key.
2079 Creates a HashMultiset from an iterable of elements. @param elements Iterable of elements to populate the multiset.
2080 Creates a new ArrayListMultimap with specified key/value counts. @param expectedKeys Expected number of keys. @param expectedValuesPerKey Expected values per key.
2081 Creates a new HashMultimap with expected keys/values. @param expectedKeys Expected number of keys. @param expectedValuesPerKey Expected values per key.
2082 Creates a HashMultimap from another Multimap. @param multimap Source multimap to copy from.
2083 Creates a LinkedListMultimap with an initial key capacity. @param expectedKeys Initial capacity for keys in the multimap.
2084 Creates a LinkedHashMultiset from an iterable of elements. @param elements Iterable containing elements to add to multiset. @return A new LinkedHashMultiset containing the elements.
2085 Creates a new LinkedHashMultimap with default capacities.
2086 Creates a LinkedHashMultimap with specified key/value capacities. @param expectedKeys Expected number of keys. @param expectedValuesPerKey Expected values per key.
2087 Constructs a StandardMutableNetwork using the provided builder. @param builder NetworkBuilder to initialize the network.
2088 Constructs a StandardMutableValueGraph from a builder. @param builder Graph builder for configuring graph properties.
2089 Adds a cell to the table, handling ImmutableCell types. @param cell The cell to add. Returns builder for chaining.
2090 Adds an entry to the builder and returns a reference. @param entry The entry to add. @return A reference to this builder.
2091 Adds all entries from the given iterable to the builder. @param entries Iterable of entries to add. @return A reference to this builder.
2092 Adds an entry to the builder and returns a reference. @param entry The entry to add. @return A reference to this builder.
2093 Returns a multimap view of the immutable map. Returns an empty multimap if the map is empty.
2094 Builds the ImmutableSortedMap. Returns empty map if size is 0.
2095 Adds all entries from a RangeMap to the builder. @param rangeMap The RangeMap to add entries from. @return this
2096 Adds all ranges from the iterable to the builder. @param ranges Iterable of ranges to add. @return this
2097 Finds intersection of ranges within the set with a given range. @param range the range to intersect with @return ImmutableList of intersected ranges
2098 Creates a ContiguousSet from a range and discrete domain. @param range Range of elements in the set. @param domain Discrete domain for the set.
2099 Returns a spanned Range if entry connects and has same value. @param range The Range to check. @param value The value to compare. @param entry The Entry to check for connection and value.
2100 Returns a sorted set representation of the range set within the domain. @param domain Discrete domain for the set's bounds.
2101 Creates an immutable map from a map of enum keys and values. Returns immutable map or empty map if input is empty.
2102 Returns a map representing the single row in the table.
2103 Returns a descending iterator for the set.
2104 Finalizes list construction and returns an immutable list. @return ImmutableList containing the elements added during building.
2105 Creates an ImmutableList from an array of elements. @param elements Array to create the list from.
2106 Builds an ImmutableSortedSet. Returns an empty set if n==0.
2107 Creates an ImmutableMap from entries, handling duplicate keys. @param n Number of entries. @param entryArray Array of entries. @param throwIfDuplicateKeys If true, throws exception on duplicate keys. @return An ImmutableMap with the provided entries.
2108 Finds index of suffix matching desired type. @param desiredType The PublicSuffixType to match. @return Index or NO_SUFFIX_FOUND if not found.
2109 Creates an immutable EnumSet from an iterable. Returns existing ImmutableEnumSet or creates a new one.
2110 Returns an unmodifiable iterator for this graph's elements.
2111 Posts an event to registered subscribers. Recursively posts DeadEvents. @param event The event to post.
2112 Attempts to cross over and bubble up an element in the heap. @param removeIndex Index of removed element. @param vacated Vacated index. @param toTrickle Element to trickle. @return MoveDesc object, or null if crossover failed.
2113 Returns the comparator used to sort the row keys. Uses requireNonNull for safety.
2114 Wraps a NavigableSet in a synchronized view. @param navigableSet The NavigableSet to synchronize. @return A synchronized NavigableSet.
2115 Creates a BloomFilter with specified funnel, insertions, and fpp. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability.
2116 Creates a BloomFilter with specified funnel and expected insertions. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions.
2117 Estimates the number of elements added to the filter. Uses bitCount and bitSize to approximate element count.
2118 Creates a collector that finds the least k elements. @param k The number of least elements to collect. @param comparator Comparator for ordering elements.
2119 Finds the least k elements from an iterator. @param iterator Iterator of elements to consider. @param k Number of least elements to retrieve. @return List containing the least k elements.
2120 Adds all elements from the iterable to the buffer. @param elements Iterable of elements to add.
2121 Returns a string representation of the unsigned long value. Uses UnsignedLongs.toString() for conversion.
2122 Validates lock acquisition order before acquiring a lock. @param lock The lock about to be acquired.
2123 Transforms a future using a ClosingFunction, executes asynchronously. @param function The function to apply to the future's result. @param executor Executor for asynchronous execution. @return A ClosingFuture wrapping the transformed future.
2124 Transforms the future asynchronously with a function. @param function AsyncClosingFunction to apply @param executor Executor for asynchronous execution @return ClosingFuture that wraps the transformed future
2125 Gets the result from a Future, throwing a checked exception. @param future Future to retrieve the value from. @param exceptionClass Exception class to throw on failure.
2126 Gets the Future's value, throwing an exception if needed. @param future Future to retrieve value from @param exceptionClass Exception class to throw on failure @param timeout Timeout duration @return The value from the Future, or throws an exception.
2127 Reschedules the task execution, handling failures and cancellations. @return Cancellable object representing the cancellation delegate.
2128 Notifies listeners of service start. Transitions to RUNNING or STOPPING. @param snapshot The current state snapshot of the service.
2129 Starts all services asynchronously. Returns the ServiceManager instance for chaining.
2130 Acquires lock and waits for guard condition, or timeout. @param guard Guard object to wait on. @param time Timeout duration. @throws InterruptedException If interrupted while waiting.
2131 Acquires lock uninterruptibly until condition met, with timeout. @param guard Guard object to wait on. @param time Timeout duration.
2132 Waits for a condition, with a timeout. @param guard Guard object to wait on. @param time Duration to wait, or timeout. @throws InterruptedException If interrupted while waiting.
2133 Waits for a condition to be met, uninterruptibly, with timeout. @param guard Guard object to wait on. @param time Duration to wait. @return True if condition met, false if timeout expires.
2134 Applies a timeout to the future using a Duration. @param timeout Duration for the timeout @param scheduledExecutor Executor for scheduling @return FluentFuture with timeout applied
2135 Writes a byte array to a file. @param from The byte array to write. @param to The file to write to.
2136 Calculates the hash code using the provided hash function. @param hashFunction Hash function to use for calculation. @return HashCode object representing the calculated hash. @throws IOException if an I/O error occurs during copying.
2137 Copies a file's contents to an OutputStream. @param from The source file to copy. @param to The destination OutputStream.
2138 Copies data from a URL to an OutputStream. @param from The URL to copy from. @param to The OutputStream to copy to. @throws IOException if an I/O error occurs.
2139 Copies a file from the source to the destination. @param from The source file. @param to The destination file.
2140 Converts a File to a byte array. @param file the file to convert @return byte array representing the file content
2141 Converts a URL to a byte array. @param url The URL to convert. @return Byte array representing the URL content.
2142 Reads bytes from a file using a processor. @param file The file to read from. @param processor Processes the read bytes. @param <T> The type of the result from the processor. @return Result from the processor, or null. @throws IOException if an I/O error occurs
2143 Checks if two files are equal, comparing content if lengths differ. @param file1 The first file to compare. @param file2 The second file to compare. @throws IOException if an I/O error occurs during comparison.
2144 Checks if two paths are equal, comparing file content if needed. @param path1 The first path to compare. @param path2 The second path to compare. @throws IOException if an I/O error occurs during comparison.
2145 Writes a CharSequence to a file using a specified charset. @param from The CharSequence to write. @param to The file to write to. @param charset The character encoding to use. @throws IOException if an I/O error occurs.
2146 Appends a CharSequence to a file using the specified charset. @param from CharSequence to append. @param to File to append to. @param charset Charset to use for encoding. @throws IOException if an I/O error occurs.
2147 Copies a file's content to an Appendable using a charset. @param from File to copy. @param charset Charset for file encoding. @param to Appendable destination.
2148 Reads the first line from a file using the given charset. @param file The file to read from. @param charset Charset for file encoding. @return The first line as a String, or null if empty.
2149 Reads all lines from a file using the specified charset. @param file The file to read. @param charset Character encoding of the file. @return List of strings, each representing a line. @throws IOException if an I/O error occurs.
2150 Reads lines from a file using a LineProcessor. @param file File to read. @param charset Charset for encoding. @param callback Processes each line. @return Result from the processor. @throws IOException if an I/O error occurs.
2151 Reads lines from a URL using a processor. @param url URL to read from. @param charset Character encoding. @param callback Processes each line. @return Result from callback.
2152 Maps a file into memory. @param file The file to map. @param mode MapMode (READ_ONLY or READ_WRITE) @return MappedByteBuffer object
2153 Maps a file into memory. @param file File to map. @param mode MapMode (READ_ONLY or READ_WRITE). @param size Size of the mapped region, -1 for entire file. @throws IOException if an I/O error occurs.
2154 Adds a delayed shutdown hook to the JVM via Application. @param service ExecutorService to shutdown. @param terminationTimeout Termination timeout duration. @param timeUnit Time unit for the timeout.
2155 Filters a multimap's values based on a predicate. @param unfiltered Input multimap. @param valuePredicate Predicate to apply to values. @return Multimap with filtered values.
2156 Creates a CompoundOrdering from an iterable of comparators. @param comparators Iterable of comparators for ordering.
2157 Creates an ImmutableBiMap from a map. @param map The map to copy from. @return An ImmutableBiMap containing the map's entries.
2158 Converts the iterable to an array of the specified type. @param type The type of the array to create. @return Array containing elements from the iterable.
2159 Converts an iterator to an array of the specified type. @param iterator Iterator to convert. @param type The type of elements in the array. @return Array containing elements from the iterator.
2160 Returns a sorted set from the iterable, using the given comparator. @param comparator Comparator for sorting elements.
2161 Creates an ImmutableSortedSet from an Iterable using natural order. @param elements Iterable to copy elements from.
2162 Creates an ImmutableSortedSet from a Collection with a comparator. @param comparator Comparator for sorting elements. @param elements Collection to copy elements from.
2163 Returns an unmodifiable view of the row map.
2164 Returns the string representation of this media type. Lazily computes and caches the string representation.
2165 Returns a synchronized SortedSetMultimap. @param multimap The SortedSetMultimap to synchronize.
2166 Reads the entire character stream as a String. @throws IOException if an I/O error occurs.
2167 Creates a CompactLinkedHashMap with the specified expected size. @param expectedSize Expected number of entries.
2168 Creates a CompactLinkedHashSet from a collection. @param collection Collection to initialize the set with. @return A new CompactLinkedHashSet containing collection elements.
2169 Creates a TreeMultimap with natural ordering for both keys and values.
2170 Creates a TreeMultimap with specified key/value comparators. @param keyComparator Comparator for keys. @param valueComparator Comparator for values.
2171 Checks if the matcher returns true for any char in sequence. @param sequence CharSequence to check against the matcher.
2172 Retains characters that do not match the criteria. @param sequence CharSequence to retain from. @return String with non-matching characters retained.
2173 Replaces all matching characters in a sequence with a given string. @param sequence CharSequence to modify. @param replacement The string to replace matches with.
2174 Gets a coerced IPv4 address from an InetAddress. @param ip The InetAddress to coerce. @return An Inet4Address.
2175 Creates a RateLimiter with specified permits/second and warmup. @param permitsPerSecond Permits issued per second @param warmupPeriod Warmup duration
2176 Returns a synchronized view of the multimap's entries.
2177 Schedules a task for execution after a specified delay. @param command Runnable to execute @param delay Delay before execution @param unit TimeUnit for the delay @return ListenableScheduledFuture representing the task
2178 Builds a LoadingCache with the given loader and builder config. @param loader CacheLoader for loading values. @return A LoadingCache instance.
2179 Builds a LocalCache from the configured CacheBuilder. Returns a Cache instance based on the builder's settings.
2180 Creates a Builder with a custom comparator. @param comparator Comparator for ordering elements.
2181 Returns a Builder for a reverse-ordered multiset. Uses natural ordering in reverse.
2182 Returns a Builder using the natural ordering of elements.
2183 Creates an EnumBiMap from a Map. @param map The map to initialize the bi-map with. @return An EnumBiMap containing the map entries.
2184 Creates a new EnumHashBiMap from a given map. @param map The map to initialize the bi-map with. @return A new EnumHashBiMap instance.
2185 Replaces values for a key with the provided iterable. @param key key for which values are replaced @param values new values to replace the old ones @return Replaced values for the given key.
2186 Checks if two lists are permutations of each other. @param first First list to compare. @param second Second list to compare.
2187 Creates a new, empty ArrayListMultimap instance.
2188 Creates an ArrayListMultimap from another multimap. @param multimap The multimap to copy from.
2189 Creates a new, empty HashMultimap instance.
2190 Creates a new, empty LinkedListMultimap instance.
2191 Creates a LinkedListMultimap from another multimap. @param multimap Source multimap to copy entries from.
2192 Creates a LinkedHashMultimap from another multimap. @param multimap Source multimap to copy from. @return A new LinkedHashMultimap containing the data.
2193 Creates a MutableNetwork using the configured properties.
2194 Constructs a StandardMutableGraph from a builder. @param builder Graph builder for configuring graph properties.
2195 Builds a MutableValueGraph from the configured properties.
2196 Adds all entries from a table to the builder, chaining. @param table Source table to copy entries from. @return This builder for method chaining.
2197 Adds all entries from the given iterable to the builder. @param entries Iterable of entries to add. @return A reference to this builder.
2198 Adds all entries from the given map to the builder. @param map Map whose entries will be added. @return A reference to this builder.
2199 Adds all entries from the given iterable to the builder. @param entries Iterable of entries to add. @return A reference to this builder.
2200 Filters a map based on two predicates. @param map The unfiltered map to filter. @param entryPredicate Predicate for filtering entries.
2201 Adds all ranges from the given RangeSet to the builder. @param ranges RangeSet containing ranges to add. @return this
2202 Returns a sub-range set within the current range set. @param range the range to extract a sub-range from @return ImmutableRangeSet containing the sub-range or empty set
2203 Creates a ContiguousSet containing integers from lower to upper (inclusive). @param lower The lower bound of the set (inclusive). @param upper The upper bound of the set (inclusive).
2204 Creates a ContiguousSet containing values in the range [lower, upper]. @param lower Lower bound (inclusive) of the set. @param upper Upper bound (inclusive) of the set.
2205 Creates a ContiguousSet<Integer> from a closed-open range. @param lower The lower endpoint of the range (inclusive). @param upper The upper endpoint of the range (exclusive).
2206 Creates a ContiguousSet<Long> with the specified closed-open range. @param lower The lower endpoint of the range (inclusive). @param upper The upper endpoint of the range (exclusive).
2207 Coalesces a range with adjacent ranges of the same value. @param range The range to coalesce. @param value The value associated with the range.
2208 Adds a node to the network and returns its connections. @param node The node to add. @return NetworkConnections object for the added node.
2209 Creates an ImmutableMap from a Map. @param map The Map to copy. @return An ImmutableMap containing the entries.
2210 Returns the immutable map representing the row with the given key. @param rowKey The key identifying the row. @return ImmutableMap containing the row data or an empty map.
2211 Returns the greatest element less than the given element. @param e Element to find the lower element for. @return The lower element or null if none exists.
2212 Returns the greatest element in the set less than or equal to the given element. @param e the element to compare @return the floor element or null if none exists
2213 Creates an ImmutableList from an iterator. @param elements Iterator containing elements for the list.
2214 Constructs an ImmutableRangeMap from the builder's entries. Sorts ranges, validates for overlaps, and builds the map.
2215 Finalizes the range set construction. Merges overlapping ranges and returns an ImmutableRangeSet.
2216 Parses the Java classpath and returns a list of URLs. Handles SecurityException and MalformedURLException.
2217 Returns a list of Parameter objects for the method. @return ImmutableList of Parameter objects.
2218 Returns a list of exception types. Iterates through generic exception types and builds an ImmutableList.
2219 Wraps a collection of Callable tasks. @param tasks Collection of Callable tasks to wrap. @return ImmutableList of wrapped Callable tasks.
2220 Creates a sorted copy of an iterable. @param elements Iterable to sort and copy. @return ImmutableList containing sorted elements.
2221 Creates an immutable sorted copy of an iterable using a comparator. @param comparator Comparator to sort elements. @param elements Iterable to create sorted copy from.
2222 Creates an ImmutableSortedSet from an iterator, using the given comparator. @param comparator Comparator for ordering elements @param elements Iterator of elements to add
2223 Creates an ImmutableMap from entries, handling duplicates and overflow. @param n Number of entries. @param entryArray Array of entries. @param throwIfDuplicateKeys If true, throws exception on duplicate keys.
2224 Gets the index of the public suffix. Caches the result. Uses findSuffixOfType with an absent Optional.
2225 Gets the index of the registry suffix. Caches the result.
2226 Creates an ImmutableSortedMap from an Iterable of entries. @param comparator Comparator for keys. @param entries Iterable of map entries.
2227 Creates a new TreeBasedTable with the same row/column comparators and data. @param table The table to copy. @return A new TreeBasedTable.
2228 Creates a BloomFilter with specified funnel and expected insertions. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions.
2229 Returns a collector that finds the greatest k elements. @param k Number of greatest elements. @param comparator Comparator for ordering elements.
2230 Finds the least k elements from an iterable. @param iterable Iterable of elements to consider. @param k Number of least elements to retrieve.
2231 Finds the greatest k elements from an iterator in reverse order. @param iterator Iterator of elements to consider. @param k Number of greatest elements to retrieve.
2232 Catches exceptions of a specific type and applies a fallback. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for the fallback. @return A ClosingFuture wrapping the result.
2233 Waits for the service to stop. Releases the monitor lock.
2234 Waits for services to stop, throwing TimeoutException if it times out. @param timeout Timeout duration. @param unit Time unit for the timeout.
2235 Returns a precomputed CharMatcher for efficiency.
2236 Calculates a hash code for a file using a hash function. @param file File to hash. @param hashFunction Hash function to use. @return HashCode object. @throws IOException if an I/O error occurs.
2237 Moves a file from one location to another. @param from The source file. @param to The destination file.
2238 Reads lines from a URL using a processor. @param url URL to read from. @param charset Character encoding. @return List of strings read from the URL.
2239 Maps a file into memory in read-only mode. @param file The file to map. @return MappedByteBuffer object.
2240 Gets an exiting ExecutorService, configuring delayed shutdown. @param executor ThreadPoolExecutor to configure. @param terminationTimeout Termination timeout duration. @param timeUnit Time unit for the timeout.
2241 Returns a `ScheduledExecutorService` with a delayed shutdown hook. @param executor Executor to configure. @param terminationTimeout Termination timeout duration. @param timeUnit Time unit for the timeout.
2242 Adds a delayed shutdown hook for graceful executor shutdown. @param service ExecutorService to shutdown. @param terminationTimeout Duration until shutdown.
2243 Removes a key-value entry from the segment's chain. @param entry Entry to remove, returns true if found. @param hash Hash code of the key.
2244 Reclaims a value associated with a key. @param key Key to reclaim. @return True if reclaimed, false otherwise.
2245 Waits for all services to be healthy (RUNNING state).
2246 Waits for services to become healthy, throwing TimeoutException. @param timeout Timeout duration. @param unit Time unit for the timeout.
2247 Returns startup times for services, sorted by duration.
2248 Retrieves declared annotations of a specific type. @param annotationType The class of the annotation to retrieve. @return Array of annotations of the specified type.
2249 Creates an ImmutableSortedSet from a Collection using natural order. @param elements Collection to copy elements from.
2250 Returns a synchronized NavigableMap. @param navigableMap The NavigableMap to synchronize.
2251 Reads a file as a String using the specified charset. @param file The file to read. @param charset Charset for decoding the file content. @throws IOException if an I/O error occurs.
2252 Converts a URL to a String using the specified charset. @param url URL to convert. @param charset Charset for decoding. @throws IOException if an I/O error occurs.
2253 Creates a new, empty CompactLinkedHashMap instance.
2254 Creates a TreeMultimap from a Multimap using natural ordering. @param multimap Multimap to copy from. @return A new TreeMultimap.
2255 Creates a new ReentrantLock, using CycleDetection if enabled. @param lockName Lock name. @param fair Whether the lock is fair. @return A new ReentrantLock instance.
2256 Creates a new ReentrantReadWriteLock, potentially cycle-detecting. @param lockName Lock name. @param fair Whether the lock is fair. @return A ReentrantReadWriteLock instance.
2257 Creates a map of enum keys to LockGraphNodes, pre-validating locks. @param clazz Enum class for lock graph nodes. @return Unmodifiable map of enum keys to LockGraphNodes.
2258 Validates a domain part based on length, ASCII chars, and rules. @param part The domain part to validate. @param isFinalPart True if it's the final part.
2259 Converts an InetAddress to an integer representation. @param ip The InetAddress to convert. @return Integer value of the IPv4 address.
2260 Checks if the collection contains the given object. @param object The object to search for. @return True if the object is found, false otherwise.
2261 Removes the specified object from the delegate collection. @param object The object to remove. Returns true if removed.
2262 Removes all elements from the delegate that are contained in collection. @param collection Collection of elements to remove. @return True if any elements were removed.
2263 Retains elements present in the given collection. @param collection Collection to check for element presence. @return True if any elements were removed.
2264 Clears the delegate collection using its iterator.
2265 Checks if the collection is empty by checking the iterator.
2266 Creates an array containing all collection elements. @return An array containing the collection's elements.
2267 Schedules a task for execution after a specified duration. @param command Runnable to execute @param delay Duration before execution @return ListenableScheduledFuture representing the task
2268 Finds all subscribers for a listener object. @param listener Object whose subscribers are to be found. @return Multimap of event types to subscribers.
2269 Creates an induced subgraph from a network and a set of nodes. @param network The original network. @param nodes The nodes to include in the subgraph. @return The induced subgraph.
2270 Creates a mutable copy of a Network. @param network The network to copy. @return A MutableNetwork containing the same nodes and edges.
2271 Builds a MutableGraph from the configured properties.
2272 Creates an induced subgraph from a graph and a set of nodes. @param graph The original graph. @param nodes The nodes to include in the subgraph. @return A MutableValueGraph representing the induced subgraph.
2273 Creates a mutable copy of a ValueGraph. @param graph The ValueGraph to copy. @return A MutableValueGraph containing the copied data.
2274 Adds all entries from the given map to the builder. @param map Map whose entries will be added. @return A reference to this builder.
2275 Adds all entries from the given map to the builder. @param map Map whose entries will be added. @return A reference to this builder.
2276 Filters a {@link FilteredEntryNavigableMap} based on combined predicates. @param map The map to filter. @param entryPredicate Additional filter predicate. @return A new filtered {@link NavigableMap}.
2277 Filters a FilteredEntrySortedMap based on a combined predicate. @param map The map to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered SortedMap.
2278 Filters a map's entries based on a key predicate. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to map keys. @return A filtered map containing entries matching the key predicate.
2279 Filters map entries based on a predicate. @param unfiltered The map to filter. @param entryPredicate Predicate for filtering entries.
2280 Creates a collector for ImmutableSortedMap. @param comparator Comparator for keys. @param keyFunction Extracts key from input. @param valueFunction Extracts value from input.
2281 Creates a collector for immutable EnumMap. @param keyFunction Extracts key from input. @param valueFunction Extracts value from input.
2282 Creates a collector for immutable EnumMap. @param keyFunction Extracts the key from input. @param valueFunction Extracts the value from input. @param mergeFunction Merges values when keys collide.
2283 Retrieves type mappings for a given context type. @param contextType The type to analyze for mappings. @return ImmutableMap of TypeVariableKey to Type.
2284 Concatenates multiple ByteSources into a single ByteSource. @param sources Iterator of ByteSources to concatenate.
2285 Concatenates CharSources from an iterator. @param sources Iterator of CharSource instances to concatenate.
2286 Creates an immutable range set from an iterable of ranges. @param ranges Iterable of ranges to create the set from.
2287 Creates an immutable sorted multiset from an iterable. @param comparator Comparator for ordering elements. @param elements Iterable of elements to add.
2288 Creates an immutable sorted multiset from a sorted multiset. @param sortedMultiset The sorted multiset to copy.
2289 Returns a backed ImmutableList instance. Size dictates return.
2290 Creates a collector for ImmutableSortedSet, using provided comparator. @param comparator Comparator for sorting elements in the set.
2291 Creates an ImmutableSortedSet from an iterator using natural order. @param elements Iterator of elements to add
2292 Builds an ImmutableBiMap. Returns an empty map if size is 0. Uses sorted entries if a value comparator is provided.
2293 Returns a view of the map with keys strictly less than toKey. @param toKey Key to end the view (exclusive). @param inclusive Whether to include toKey.
2294 Returns a tail map, sorted from the given key. @param fromKey starting key (inclusive) @param inclusive whether to include the start key
2295 Checks if the domain is a public suffix. Uses publicSuffixIndex() to determine the result.
2296 Checks if the domain has a public suffix. Uses publicSuffixIndex() to determine suffix presence.
2297 Checks if the domain is under a public suffix. Uses publicSuffixIndex() to determine this.
2298 Checks if the domain is a top-level private domain. Uses publicSuffixIndex() to determine the domain type.
2299 Checks if the domain name ends with the registry suffix.
2300 Checks if the domain has a registry suffix. Uses cached index from registrySuffixIndex().
2301 Checks if the domain is under a registry suffix. Uses cached index from registrySuffixIndex().
2302 Checks if the domain is a top domain under the registry suffix.
2303 Creates an ImmutableSortedMap from an iterable of entries. @param entries Iterable of map entries. @param comparator Comparator for keys.
2304 Creates an immutable copy of a sorted map. @param map The sorted map to copy. @return An immutable sorted map.
2305 Creates an immutable copy of the set. Avoids redundant iteration for efficiency.
2306 Returns a set of raw class types associated with the type. @return Set of raw class types.
2307 Removes and returns the MoveDesc at the specified index. @param index Index of the element to remove. @return MoveDesc object representing element changes.
2308 Calculates the BigInteger square root with specified rounding. @param x BigInteger value; must be non-negative. @param mode Rounding mode to apply.
2309 Creates an immutable set from an iterator. @param elements Iterator of elements to include in the set.
2310 Recursively scans a directory, adding ResourceInfo to the builder. @param directory Directory to scan. @param packagePrefix Prefix for resource names.
2311 Extracts classpath files from a JAR's manifest. @param jarFile The JAR file. @param manifest The JAR's manifest. @return ImmutableSet of File objects representing classpath entries.
2312 Returns the raw type represented by this type token. Uses the first raw type found during retrieval.
2313 Finds the greatest k elements from an iterable in reverse order. @param iterable Iterable of elements to consider. @param k Number of greatest elements to retrieve.
2314 Waits for services to stop, throwing TimeoutException if it times out. @param timeout Duration to wait for services to stop.
2315 Returns an exiting executor service. @param executor ThreadPoolExecutor to configure.
2316 Gets an exiting ExecutorService with a termination timeout. @param executor ThreadPoolExecutor to configure. @param terminationTimeout Duration for termination.
2317 Returns a `ScheduledExecutorService` with delayed shutdown. @param executor The `ScheduledThreadPoolExecutor` to configure.
2318 Gets an exiting `ScheduledExecutorService`. @param executor Executor to configure. @param terminationTimeout Termination timeout duration.
2319 Evicts entries from the segment to maintain the maximum weight. @param newest The newest entry in the segment.
2320 Waits for services to become healthy within a timeout. @param timeout Duration to wait; throws TimeoutException if exceeded.
2321 Returns service startup durations. Transforms startup times to Duration objects.
2322 Retrieves declared annotations of a specific type. @param annotationType The class of the annotation to retrieve. @return Array of annotations of the specified type.
2323 Creates a new ReentrantLock with the given name. @param lockName Lock name. @return A new ReentrantLock instance.
2324 Creates a new ReentrantReadWriteLock with cycle detection. @param lockName Lock name. @return A ReentrantReadWriteLock instance.
2325 Validates the syntax of domain parts. @param parts List of domain name parts to validate. @return True if syntax is valid, false otherwise.
2326 Registers listener methods with the registry for event handling. @param listener Object containing methods to register.
2327 Unregisters a listener from all associated event types. @param listener The listener object to unregister.
2328 Creates an ImmutableNetwork.Builder from the current builder.
2329 Creates a subgraph containing only the specified nodes. @param graph The original graph. @param nodes The nodes to include in the subgraph.
2330 Creates a mutable copy of the given graph. @param graph The graph to copy. @return A MutableGraph containing a copy of the input graph.
2331 Creates an immutable graph builder from the current builder.
2332 Filters a FilteredEntryBiMap based on combined predicates. @param map FilteredEntryBiMap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered BiMap.
2333 Filters entries in a navigable map based on a predicate. @param unfiltered The input navigable map. @param entryPredicate Predicate for filtering entries.
2334 Filters entries in a SortedMap based on the given predicate. @param unfiltered The map to filter. @param entryPredicate Predicate for filtering entries.
2335 Filters a map's entries based on a predicate applied to values. @param unfiltered The map to filter. @param valuePredicate Predicate for filtering values. @return A new map with filtered entries.
2336 Creates an ImmutableMap collector. @param keyFunction Extracts key from input. @param valueFunction Extracts value from input. @param mergeFunction Resolves value conflicts.
2337 Creates a collector for immutable RangeMaps from a stream. @param keyFunction Extracts the range key from an element. @param valueFunction Extracts the range value from an element.
2338 Creates an immutable sorted multiset from an iterable. @param elements Iterable of elements to add, uses natural order.
2339 Builds an ImmutableSortedMultiset from the builder's contents. Returns a copy of the sorted multiset.
2340 Creates a WildcardType with the provided upper bound. @param upperBound The upper bound for the wildcard type.
2341 Creates a WildcardType with specified lower bound and upper bound (Object). @param lowerBound Lower bound for the wildcard type.
2342 Generates ordered permutations of elements using a comparator. @param elements Iterable elements to permute. @param comparator Comparator for ordering elements.
2343 Returns a sorted immutable list from the iterable. @param comparator Comparator to sort the elements by.
2344 Creates an immutable list from a collection or array. @param elements Collection to copy, or null. @return ImmutableList containing elements from the collection.
2345 Builds an ImmutableBiMap from the builder's entries. Returns an empty map if size is 0.
2346 Builds an ImmutableMap, throwing exception if duplicate keys exist.
2347 Builds an ImmutableMap, keeping the last value for duplicate keys. Calls build(false) to construct the map.
2348 Returns a view of the map with keys strictly less than toKey. @param toKey Key to end the view (exclusive).
2349 Returns a submap with keys between fromKey and toKey (inclusive). @param fromKey start key (inclusive) @param toKey end key (exclusive)
2350 Returns a tail map sorted from the given key, inclusive. @param fromKey starting key for the tail map
2351 Creates an ImmutableSortedMap from entries using natural order. @param entries Iterable of map entries.
2352 Creates an immutable sorted map from a given map, using natural ordering. @param map The map to copy. @return An ImmutableSortedMap.
2353 Creates an immutable sorted map from a map, using the given comparator. @param map The map to copy. @param comparator Comparator for keys.
2354 Computes the Cartesian product of a list of sets. @param sets List of sets to compute the Cartesian product. @return A Set of Lists representing the Cartesian product.
2355 Removes the first exact match of the target object from the queue. @param target Object to search and remove. @return True if a match was found and removed, false otherwise.
2356 Removes and returns the element at the specified index. @param index Index of the element to remove. @return The element that was removed.
2357 Creates an immutable set from an iterable. @param elements Iterable to copy into the set.
2358 Creates an Invokable for the given constructor. @param constructor Constructor to create Invokable for. @return Invokable instance.
2359 Checks if this type is a subtype of the given supertype. @param supertype The supertype to check against.
2360 Creates an Invokable for the given Method, ensuring declaring class is a subtype. @param method The Method to create an Invokable for.
2361 Expels expired entries from the segment. Acquires a lock. @param now Current timestamp.
2362 Creates a WithExplicitOrdering instance with given policy and enum class. @param enumClass Enum class for explicit lock ordering. @param policy Lock acquisition policy.
2363 Registers an object with the subscriber list for event handling. @param object Object containing methods to register.
2364 Unregisters a listener from the subscriber list. @param object The listener object to unregister.
2365 Creates an ImmutableGraph.Builder for the graph. @param <N1> Node type for the graph. @return ImmutableGraph.Builder instance.
2366 Filters entries in a BiMap based on a predicate. @param unfiltered The BiMap to filter. @param entryPredicate Predicate for filtering entries.
2367 Filters a navigable map based on a predicate applied to keys. @param unfiltered The input navigable map. @param keyPredicate Predicate to filter map entries by key.
2368 Filters a navigable map's entries based on a value predicate. @param unfiltered Input navigable map. @param valuePredicate Predicate to apply to entry values.
2369 Filters a SortedMap based on a key predicate. @param unfiltered The map to filter. @param keyPredicate Predicate for filtering map keys. @return A new SortedMap containing only matching entries.
2370 Filters a SortedMap's entries based on a predicate applied to values. @param unfiltered The map to filter. @param valuePredicate Predicate for filtering entry values.
2371 Creates an ImmutableSortedMultiset from an iterator. @param comparator Comparator for ordering elements @param elements Iterator of elements to add
2372 Creates a set of LocationInfo objects from classpath entries. @param classloader Classloader to search for classpath entries.
2373 Finds the component type of array bounds, handling generics. @param bounds Array of type bounds to inspect. @return Component type or null if not found.
2374 Creates an array type from a component type, handling Wildcards. @param componentType Type of the array elements. @return Array type.
2375 Generates ordered permutations of elements using natural ordering. @param elements Iterable elements to permute. @return Collection of ordered permutations.
2376 Creates an ImmutableMultiset from an iterable. @param elements Iterable to copy from; returns existing if immutable.
2377 Creates an immutable multiset from an iterator of elements. @param elements Iterator providing elements for the multiset.
2378 Creates an ImmutableMultiset with elements sorted by decreasing count. @param multiset The multiset to copy.
2379 Generates all permutations of the given collection. @param elements Collection of elements to permute. @return Collection of List<E> representing permutations.
2380 Creates an ImmutableList from an iterable. @param elements Iterable containing elements for the list.
2381 Creates an immutable copy of a RangeSet. @param rangeSet The RangeSet to copy. @return An ImmutableRangeSet containing the ranges.
2382 Creates an immutable sorted set from a sorted set. @param sortedSet The sorted set to copy.
2383 Reads all lines from the CharSource as Strings. @return Immutable list of lines, or throws IOException.
2384 Builds and returns an ImmutableClassToInstanceMap. Returns an empty map if the internal map is empty.
2385 Creates an ImmutableListMultimap from map entries. @param mapEntries Collection of map entries. @param valueComparator Comparator for values, or null.
2386 Builds an ImmutableMap. Calls buildOrThrow() to construct it.
2387 Creates an ImmutableSetMultimap from map entries. @param mapEntries Collection of key-value entries. @param valueComparator Comparator for values (null for unordered).
2388 Converts a Properties object to an ImmutableMap. @param properties The Properties to convert. @return An ImmutableMap containing key-value pairs from Properties.
2389 Creates an immutable map with elements as keys and their index as values. @param list Collection of elements to be indexed. @return ImmutableMap with element-index pairs.
2390 Builds an ImmutableTypeToInstanceMap from the internal map builder. Returns the built map.
2391 Creates a new TypeTable with mappings merged from existing and provided. @param mappings Additional type variable to type mappings.
2392 Converts an iterator of keys to an ImmutableMap using a function. @param keys Iterator of keys. @param valueFunction Function to generate values for each key.
2393 Returns a submap with keys between fromKey and toKey (inclusive). @param fromKey start key (inclusive) @param toKey end key (inclusive)
2394 Creates an immutable sorted map collector. @param comparator Comparator for keys. @param keyFunction Function to extract key. @param valueFunction Function to extract value. @param mergeFunction Merges values for duplicate keys.
2395 Retrieves and removes the last element. Returns null if the queue is empty.
2396 Removes and returns the last element. Throws NoSuchElementException if empty.
2397 Converts the iterable to an immutable set. Returns a set containing elements from the delegate.
2398 Checks if this type is a supertype of the given type. @param type The TypeToken to check. @return True if this type is a supertype of the given type.
2399 Checks if this type is a supertype of the given type. @param type The type to check against.
2400 Checks if this type is a subtype of the given type. @param type The TypeToken representing the supertype. @return True if this type is a subtype of the given type.
2401 Drains key and value reference queues to reclaim entries. Checks if key/value references are used before draining.
2402 Filters a BiMap based on a key predicate. @param unfiltered The BiMap to filter. @param keyPredicate Predicate to apply to map keys.
2403 Filters a BiMap based on a predicate applied to its values. @param unfiltered The BiMap to filter. @param valuePredicate Predicate for filtering values.
2404 Creates an ImmutableSortedMultiset from an iterator using natural order. @param elements Iterator of elements to add @return ImmutableSortedMultiset containing the elements
2405 Converts a Class to a TypeToken, handling arrays and generics. @param <T> The class type. @param cls The class to convert. @return A TypeToken representing the given class.
2406 Converts the iterable to an immutable multiset. Returns a multiset containing elements from the delegate.
2407 Builds an ImmutableMultiset from the contents. @return ImmutableMultiset containing the added elements.
2408 Computes the Cartesian product of a list of lists. @param lists List of lists to form the Cartesian product. @return List of lists representing the Cartesian product.
2409 Parses a cache builder specification string into a CacheBuilderSpec. @param cacheBuilderSpecification Specification string to parse. @return CacheBuilderSpec object representing the parsed specification.
2410 Converts the iterable to an immutable list. Returns a new ImmutableList containing elements from the delegate.
2411 Lists files in a directory. @param dir Path to the directory to list. @return ImmutableList of Path objects.
2412 Creates a new InternetDomainName from the given string. @param name The domain name string to normalize.
2413 Creates a ListenableFuture that yields a list of results from futures. @param futures Futures to aggregate into a list.
2414 Creates a FutureCombiner for when all futures complete. @param futures Iterable of ListenableFutures to combine.
2415 Creates a FutureCombiner for futures that must all succeed. @param futures Iterable of ListenableFuture objects.
2416 Creates a ListenableFuture that succeeds with a list of future results. @param futures Futures to aggregate into a list.
2417 Converts an iterable of futures to a ListenableFuture array. @param futures Iterable of ListenableFutures. @return An array of ListenableFutures.
2418 Creates an ImmutableRangeSet from an iterable of ranges. @param ranges Iterable of Range objects to union.
2419 Calculates the intersection of this range set with another. @param other The other RangeSet to intersect with. @return An ImmutableRangeSet representing the intersection.
2420 Calculates the difference of this RangeSet with another. @param other The RangeSet to subtract from this RangeSet. @return A new ImmutableRangeSet representing the difference.
2421 Creates a collector for ImmutableBiMap using key/value functions. @param keyFunction Extracts the key from an input element. @param valueFunction Extracts the value from an input element.
2422 Creates a copy of an ImmutableClassToInstanceMap or builds a new one. @param map The map to copy or use for building a new map.
2423 Creates an immutable copy of a Multimap. @param multimap The Multimap to copy. @return An ImmutableListMultimap containing the data.
2424 Builds an ImmutableMultimap from the internal builder map. @return ImmutableMultimap constructed from the builder's entries.
2425 Merges a range with a value, applying a remapping function. @param range Range to merge. @param value Value to merge, or null to remove. @param remappingFunction Function to remap existing values.
2426 Builds an immutable SetMultimap from the internal builder map. Returns an empty multimap if the builder map is null.
2427 Creates an ImmutableMap from values using a function for unique keys. @param values Iterator of values. @param keyFunction Function to extract the key from each value.
2428 Generates combinations of elements from a set of specified size. @param set The input set of elements. @param size The size of each combination. @return A set of sets, each representing a combination.
2429 Creates an immutable copy of the given graph. Returns the graph if already immutable, otherwise creates a copy.
2430 Returns a new TypeResolver with additional type variable mappings. @param mappings Additional type variable to type mappings
2431 Converts an iterable of keys to an ImmutableMap using a function. @param keys Iterable of keys to convert. @param valueFunction Function to generate values for each key.
2432 Retrieves and removes the first element, or null if empty.
2433 Adds an element to the queue, maintaining min/max order. @param element The element to add. Returns true if added.
2434 Returns a set of all ClassInfo objects from resources.
2435 Returns a set of top-level class info objects from resources.
2436 Performs breadth-first traversal starting from given nodes. @param startNodes Iterable of starting nodes for traversal. @return Iterable containing nodes visited in breadth-first order.
2437 Performs a depth-first pre-order traversal starting from given nodes. @param startNodes Iterable of starting nodes for traversal. @return Iterable representing the depth-first pre-order traversal.
2438 Performs a depth-first post-order traversal from start nodes. @param startNodes Iterable of starting nodes for traversal. @return Iterable containing nodes in post-order.
2439 Scans resources from a set of files. @param scannedFiles Files to scan, avoids re-scanning. @return Immutable set of ResourceInfo objects.
2440 Specifies the return type of the invoked method. @param returnType The TypeToken representing the return type. @return A specialized Invokable with the specified return type.
2441 Attempts to drain reference queues, reclaiming entries. Uses a lock to ensure thread-safe queue draining.
2442 Resolves a Java type, handling TypeVariable, ParameterizedType, etc. @param type The type to resolve. @return Resolved type.
2443 Checks if a type is assignable, handling wildcards. @param formalType The type to check. @param declaration The declaration of the type.
2444 Canonicalizes a type argument, handling WildcardTypes specifically. @param declaration TypeVariable declaration. @param typeArg The type argument to canonicalize. @return The canonicalized type.
2445 Creates a CacheBuilder from a specification string. @param spec Cache builder specification string. @return CacheBuilder instance.
2446 Creates a CacheBuilderSpec that disables caching. Uses a maximum size of 0 to prevent caching.
2447 Creates an InternetDomainName from a string. @param domain The domain name string. @return An InternetDomainName object.
2448 Returns futures in completion order, wrapping them in delegates. @param futures Iterable of ListenableFutures to order. @return ImmutableList of ListenableFuture delegates.
2449 Computes the union of this RangeSet and another. @param other The other RangeSet to union with. @return A new ImmutableRangeSet representing the union.
2450 Creates an ImmutableMultimap from a Multimap. @param multimap The Multimap to copy. @return An ImmutableMultimap containing the data.
2451 Builds an ImmutableListMultimap from the internal builder map.
2452 Creates an ImmutableMap collector from elements. @param keyFunction Extracts key from element. @param valueFunction Extracts value from element.
2453 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 The key for the multimap. @param v1 The value associated with the key.
2454 Creates an ImmutableSetMultimap from two key-value pairs. Uses a builder to construct the multimap.
2455 Creates an ImmutableSetMultimap from the given key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to add.
2456 Creates an ImmutableSetMultimap from the given key-value pairs.
2457 Creates an ImmutableSetMultimap from the given key-value pairs.
2458 Creates an ImmutableSetMultimap from an iterable of entries. @param entries Iterable of entries to populate the multimap.
2459 Creates an immutable copy of a multimap. @param multimap The multimap to copy.
2460 Creates an ImmutableMap from values using a function for unique keys. @param values Iterable of values. @param keyFunction Function to extract the key from each value.
2461 Creates an ArrayTable with the given row and column keys. @param rowKeys Iterable of row keys. @param columnKeys Iterable of column keys.
2462 Computes the power set of a given set. @param set The input set. @return A set containing all subsets of the input set.
2463 Creates a RegularImmutableTable, dense or sparse, from data. @param cellList List of cells. @param rowSpace Set of row keys. @param columnSpace Set of column keys.
2464 Finalizes graph construction, returns an immutable copy.
2465 Returns an immutable copy of the given network. @param network The network to be copied. @return An ImmutableNetwork.
2466 Returns an immutable copy of the given ValueGraph. @param graph The ValueGraph to copy. @return An ImmutableValueGraph.
2467 Creates a TypeResolver with mappings from the given context type. @param contextType The context type to initialize mappings from.
2468 Creates a TypeResolver with a captured, invariant context type. @param contextType The type to make invariant.
2469 Resolves types, creating mappings from formal to actual types. @param formal The formal type. @param actual The actual type.
2470 Converts iterable to an ImmutableMap using a function. @param valueFunction Function to generate values for each key. @return ImmutableMap of elements and their transformed values.
2471 Creates a MinMaxPriorityQueue with initial contents. @param initialContents Iterable of elements to add to queue. @return MinMaxPriorityQueue initialized with the contents.
2472 Adds an element to the queue. @param element The element to add. Returns true.
2473 Returns top-level classes matching the given package name. @param packageName Package name to filter by. @return ImmutableSet of ClassInfo objects.
2474 Gets top-level classes recursively within a package. @param packageName Package name to search; cannot be null. @return ImmutableSet of ClassInfo objects.
2475 Performs breadth-first traversal starting from a single node. @param startNode The starting node for the traversal.
2476 Performs a depth-first pre-order traversal starting from a node. @param startNode The starting node for the traversal.
2477 Performs a depth-first post-order traversal from a start node. @param startNode The starting node for traversal. @return Iterable containing nodes in post-order.
2478 Scans resources from the default location. @return Immutable set of ResourceInfo objects.
2479 Creates a ClassPath from a classloader. @param classloader Classloader to search classpath entries. @throws IOException if an I/O error occurs.
2480 Specifies the return type of the invoked method. @param returnType The return type class. @return A specialized Invokable with the specified return type.
2481 Retrieves a live value from a cache entry. Returns null if expired. @param entry The cache entry to retrieve. @param now Current timestamp.
2482 Performs cleanup before a write operation. Cleans up expired entries and drains queues. @param now Current timestamp.
2483 Resolves a TypeVariable, handling dependencies and bounds. @param var TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies. @return Resolved type.
2484 Returns the generic return type of the class. Returns the class if no type parameters are present.
2485 Resolves and returns a Serializable representation of the runtime type.
2486 Creates a Traverser for the file tree. @return Traverser object for traversing the file tree.
2487 Parses a host specifier string. @param specifier Host specifier string to parse. @throws IllegalArgumentException if domain lacks public suffix.
2488 Returns the ancestor domain name by specified levels. @param levels The number of leading domain levels to remove.
2489 Creates a child domain name by prepending leftParts. @param leftParts String representing the child domain parts. @return A new InternetDomainName object.
2490 Checks if a domain name is valid. @param name The domain name string to validate. @return True if valid, false otherwise.
2491 Creates a collector for immutable ListMultimap. @param keyFunction Extracts key from input. @param valuesFunction Transforms input to values stream.
2492 Creates an ImmutableListMultimap from a single key-value pair. @param k1 The key for the multimap. @param v1 The value associated with the key.
2493 Creates an ImmutableListMultimap from two key-value pairs.
2494 Creates an ImmutableListMultimap from the given key-value pairs.
2495 Creates an ImmutableListMultimap from the provided key-value pairs.
2496 Creates an ImmutableListMultimap from five key-value pairs. Uses a builder to construct the multimap.
2497 Creates an ImmutableListMultimap from an iterable of entries. @param entries Iterable of key-value pairs to copy.
2498 Creates an ImmutableListMultimap from an iterator and key function. @param values Iterator of values; @param keyFunction Extracts key from value.
2499 Adds parameters to the media type. @param attribute Parameter name. @param values Parameter values.
2500 Creates a collector for immutable SetMultimap. @param keyFunction Extracts key from input. @param valueFunction Extracts value from input.
2501 Returns the inverse of this multimap. Returns a new multimap with keys and values swapped.
2502 Marks the service as ready, throws exception if transitioning. @throws IllegalArgumentException if services are in bad states.
2503 Returns services grouped by state, excluding NoOpService instances.
2504 Creates an ImmutableMap with unique keys from the iterable. @param keyFunction Function to extract the key from each element. @return ImmutableMap with unique keys.
2505 Creates an ArrayTable from a Table, copying entries if needed. @param table Source Table; may be an ArrayTable already.
2506 Builds an immutable network from the mutable network. Returns an immutable copy of the internal mutable network.
2507 Builds an immutable ValueGraph from the mutable graph. @return ImmutableValueGraph created from the mutable graph.
2508 Creates a TypeToken from a declaring class. @param declaringClass The class to create the TypeToken from.
2509 Creates an empty MinMaxPriorityQueue. Uses the emptySet to initialize the queue.
2510 Creates a MinMaxPriorityQueue from an Iterable using natural ordering. @param initialContents Iterable of elements to initialize the queue. @return MinMaxPriorityQueue initialized with the contents.
2511 Finds reachable nodes from a starting node in a graph. @param graph The graph to traverse. @param node The starting node. @return Set of reachable nodes.
2512 Retrieves a ReferenceEntry by key. @param key The key to search for, null keys return null. @return ReferenceEntry or null if not found.
2513 Checks if a cache entry is live (not expired). @param entry The cache entry to check. @param now Current timestamp. @return True if the entry is live, false otherwise.
2514 Inserts a loading value reference, returns existing or new. @param key Key for the entry. @param hash Hash code for the key. @param checkTime Whether to check refresh time. @return LoadingValueReference or null if already loading.
2515 Performs post-read cleanup, triggering cleanup if threshold reached.
2516 Resolves a TypeVariable, handling bounds and dependencies. @param var TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies.
2517 Executes a callable with given executor and returns ClosingFuture. @param combiningCallable Callable to execute. @param executor Executor to run the callable.
2518 Executes a combining callable asynchronously. @param combiningCallable Callable to execute. @param executor Executor for asynchronous execution.
2519 Parses a host specifier string, throwing ParseException on error. @param specifier Host specifier string to parse. @throws ParseException if the specifier is invalid.
2520 Checks if a host specifier is valid. @param specifier Host specifier string to validate. @return True if valid, false otherwise.
2521 Gets the public suffix domain. Returns null if no public suffix.
2522 Gets the top-level private domain. Throws IllegalStateException if not under a public suffix.
2523 Gets the registry suffix domain. Returns null if no suffix exists.
2524 Returns the top domain under the registry suffix. Throws IllegalStateException if not under a registry suffix.
2525 Returns the parent domain name. @return Parent {@link InternetDomainName} object
2526 Creates a collector for ImmutableListMultimap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2527 Creates an ImmutableMultimap from a single key-value pair. @param k1 The key for the multimap. @param v1 The value associated with the key.
2528 Creates an ImmutableMultimap from two key-value pairs. @param <K> key type @param <V> value type @param k1 first key @param v1 first value @param k2 second key @param v2 second value @return ImmutableMultimap containing the two pairs
2529 Creates an ImmutableMultimap from the given key-value pairs.
2530 Creates an ImmutableMultimap from the provided key-value pairs.
2531 Creates an ImmutableMultimap from five key-value pairs.
2532 Creates an ImmutableMultimap from an iterable of entries. @param entries Iterable of key-value pairs to copy.
2533 Returns the inverse of this multimap. Returns a new multimap with keys and values swapped.
2534 Creates an ImmutableListMultimap from an iterable and key function. @param values Iterable of values; @param keyFunction Extracts key from value
2535 Adds a single parameter to the media type. @param attribute Parameter name. @param value Parameter value.
2536 Creates a MediaType with the specified parameters. @param parameters Media type parameters to include. @return A new MediaType instance with the parameters.
2537 Creates a MediaType with the given type and subtype. @param type The media type. @param subtype The media subtype.
2538 Parses a media type string into a MediaType object. @param input The media type string to parse. @return A MediaType object representing the parsed media type.
2539 Creates a ServiceManager, managing services from the iterable. @param services Iterable of services to manage.
2540 Creates a collector for immutable SetMultimap. @param keyFunction Extracts the key from an input element. @param valuesFunction Transforms input to a stream of values.
2541 Resolves a type, ensuring it's resolved in an invariant context. @param type The Java Type to resolve. @return Resolved TypeToken.
2542 Creates a new MinMaxPriorityQueue with natural ordering.
2543 Refreshes a value for the given key. @param key Key for the entry. @param loader CacheLoader to load the value. @return Refreshed value or null if not loaded.
2544 Gets value, records stats, stores if successful, removes if not. @param newValue Future to retrieve the value from. @return Value or null if load failed.
2545 Advances to the next valid entry. @param entry The ReferenceEntry to advance from. @return True if a valid entry was found, false otherwise.
2546 Checks if the segment contains a value equivalent to the given value. @param value The value to search for.
2547 Indexes the iterable by keys derived from elements using keyFunction. @param keyFunction Function to extract keys from elements. @return An ImmutableListMultimap indexed by the extracted keys.
2548 Sets the charset for this media type. @param charset The charset to set; cannot be null. @return A new MediaType with the specified charset.
2549 Returns a MediaType without any parameters. If no parameters exist, returns this instance.
2550 Creates an application media type with the given subtype. @param subtype The subtype of the application media type.
2551 Creates an audio media type with the given subtype. @param subtype The subtype of the audio media type.
2552 Creates a font type MediaType with the given subtype. @param subtype The font subtype (e.g., "ttf"). @return A MediaType representing the font type.
2553 Creates an image media type with the given subtype. @param subtype The subtype of the image media type.
2554 Creates a text media type with the given subtype. @param subtype The subtype of the text media type.
2555 Creates a video media type with the given subtype. @param subtype The video subtype (e.g., "mp4"). @return A MediaType representing the video type.
2556 Builds the table, returning an empty, singleton, or regular table.
2557 Gets the generic superclass type. Returns null if none exists.
2558 Gets generic interfaces for this type. Returns empty list if runtime type is not a variable/wildcard.
2559 Gets the supertype of a TypeToken, ensuring it's a superclass. @param superclass The superclass to resolve. @return TypeToken representing the resolved supertype.
2560 Loads all values for given keys using a CacheLoader. @param keys Set of keys to load. @param loader CacheLoader to load values. @return Map of loaded values or throws an exception.
2561 Iterates through the chain to find the next valid entry. Returns true if found, otherwise false.
2562 Builds the table, returning an empty, singleton, or regular table.
2563 Iterates through the table to find the next valid entry. Returns true if found, otherwise false.
2564 Gets subtype based on subclass. @param subclass Subclass to check against runtime type. @return Subtype token or throws exception if invalid.
2565 Creates an ImmutableTable from a Table. Returns the table if it's already an ImmutableTable, otherwise copies its cells. @param table The table to copy. @return An ImmutableTable containing the table's data.
2566 Creates a Collector for building an ImmutableTable. @param rowFunction Maps input to row key. @param columnFunction Maps input to column key. @param valueFunction Maps input to cell value.
