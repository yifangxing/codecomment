1 Retrieves an enum constant by name if present. @param enumClass Enum class to search @param value Name of the enum constant to find @return Optional enum constant or empty if not found
2 Attempts to find an element in an iterable that matches a given predicate. @param iterable collection of elements to search @param predicate condition to match @return Optional containing the matching element, or empty if not found
3 Checks if any element matches the given predicate. @param predicate condition to match @return true if at least one element satisfies the predicate, false otherwise
4 Creates a precomputed CharMatcher for a given number of characters. @param totalCharacters total count of characters @param table precomputed bitset data @param description human-readable description
5 Propagates a throwable to its declared type if possible. @param throwable the throwable to propagate @param declaredType1 first potential type @param declaredType2 second potential type
6 Rethrows a checked exception as an unchecked RuntimeException. @param e the Throwable to rethrow
7 Rethrows a Throwable as an unchecked RuntimeException, potentially with a more specific exception type. @param e the original Throwable to rethrow @param declaredType the class of the expected exception
8 Closes resources and handles exceptions in LIFO order. @throws IOException if an exception is thrown during closing
9 Creates a new thread with the specified name and runnable task. @param name unique identifier for the thread @param runnable executable task to run on the new thread @return newly created Thread object
10 Filters a multimap to include only entries where the key matches a predicate. @param unfiltered original multimap @param keyPredicate function to test keys @return filtered multimap or new instance if none of the above
11 Filters entries in the multimap based on a predicate. @param unfiltered input multimap @param entryPredicate predicate to filter entries by @return filtered multimap with matching entries
12 Retrieves a declared annotation of the specified type, or null if not found. @param annotationType Class object representing the annotation to search for @return Annotation object of type A, or null if not found.
13 Merges multiple sorted Iterables into a single sorted UnmodifiableIterator. @param iterators Iterable of Iterators to merge @param comparator Comparator for sorting and merging elements @return UnmodifiableIterator containing merged and sorted data
14 Converts an iterable to a regular array. @param iterable input collection
15 Replaces existing values for a given key with new ones and returns the old values. @param key unique identifier @param values new values to replace or add @return List of replaced old values
16 Removes all values associated with a given key. @param key the key to remove @return list of removed values or null if not found
17 Creates a CopyOnWriteArrayList from an iterable collection of elements. @param elements Iterable collection of elements to copy into the list
18 Creates a CopyOnWriteArraySet from an iterable of elements. @param elements iterable of elements to include in the set
19 Performs binary search on a sorted list using the provided comparator. @param list sorted list to search @param key value to search for @param comparator comparison function for values in the list @param presentBehavior behavior when the key is found (e.g. index, offset) @param absentBehavior behavior when the key is not found (e.g. index, offset)
20 Retrieves multiple instances of type L by batched IDs. @param keys Iterable of object keys to fetch @return Iterable of corresponding L objects or empty iterable if none found
21 Returns a string representation of the graph, including its properties and node/edge counts.
22 Returns a human-readable string representation of the graph. @return formatted string containing graph properties and node count
23 Transforms entries in a navigable map using the provided entry transformer. @param fromMap original navigable map @param transformer function to transform key-value pairs @return new navigable map with transformed entries
24 Transforms the values of a sorted map using a provided function. @param fromMap input sorted map @param function function to apply to each value @return new sorted map with transformed values
25 Adds specified occurrences of an element to the collection. @param element element to add @param occurrences number of times to add the element @return previous count of the element in the collection
26 Adds occurrences of an element to the collection. @param element element to add @param occurrences number of times to add the element @return previous count of the element or 0 if not found
27 Transforms values in a multimap using the provided function. @param fromMultimap input multimap @param function transformation function for each value @return new ListMultimap with transformed values
28 Adds all specified elements to this multiset. @param elementsToAdd collection of elements to add @return true if the operation was successful; false otherwise
29 Adds all elements from the given collection to this multiset. @param elementsToAdd collection of elements to add @return true if successful, false otherwise
30 Returns a thread-safe version of the given multimap. @param multimap original multimap to synchronize
31 Returns a synchronized version of the input table. @param table input table to synchronize
32 Escapes special characters in a given string. @param string input string to be escaped
33 Converts a Readable object to a StringBuilder. @param r the readable object to convert
34 Creates a future that catches exceptions of the specified type and returns a fallback value. @param input original future to be wrapped @param exceptionType throwable class to catch @param fallback function to return in case of an exception @param executor executor service for asynchronous processing
35 Cancels this Future if it is not already done. @param mayInterruptIfRunning whether to interrupt running tasks or not @return true if cancelled, false otherwise
36 Sets the given value while ensuring atomicity using CAS. @param value new value to be set
37 Sets an exception and updates the associated value. @param throwable the exception to set @return true if updated successfully, false otherwise
38 Sets a future value, possibly propagating an interrupt from the caller. @param future ListenableFuture to set @return true if successful, false otherwise
39 Transforms a ListenableFuture of one type into another using a provided Function. @param input original future to transform @param function maps input values to output values @param executor executes the transformation; may be null for default executor
40 Increments and returns the value associated with the given key. @param key unique identifier for the key to be incremented
41 Decrements and returns the value associated with the given key. @param key unique identifier for the value to be decremented
42 Atomically increments and returns value associated with given key. @param key unique identifier for data to be incremented
43 Decrements and returns value associated with given key. @param key unique identifier of the key to decrement
44 Creates an AtomicLongMap instance and populates it from the given map. @param m input map containing key-value pairs to initialize the map
45 Initializes a new graph builder with specified directionality. @param directed true to create an undirected graph, false otherwise
46 Initializes a new NetworkBuilder instance with the specified graph directionality. @param directed true to create a directed network, false otherwise
47 Initializes ValueGraphBuilder with graph directionality. @param directed true for directed graph, false otherwise
48 Registers an event listener with the specified executor. @param listener event listener to register @param executor executor service for listener execution
49 Applies conversion from A to B using the underlying converter. @param a input value of type A
50 Creates an empty CompactHashMap instance. @return newly created map with no entries
51 Creates a CompactHashMap with an expected size. @param expectedSize estimated map size
52 Creates an empty compact hash set.
53 Creates a compact hash set with an estimated size. @param expectedSize initial capacity estimate
54 Creates a new list multimap from a map and a collection factory. @param map input map with keys to values collections @param factory supplier of list for storing values
55 Creates a new set multimap from an existing map and a set factory. @param map initial map of key to value collections @param factory supplier for creating sets used in the multimap
56 Initializes the builder with an empty multiset.
57 Composes two converters into one by chaining their transformations. @param secondConverter second converter to be applied after the first
58 Appends a collection of objects to the StringBuilder. @param builder target StringBuilder instance @param parts array of objects to be appended @return the modified StringBuilder instance
59 Concatenates an iterable of parts into a single string using the provided separator. @param parts Iterable of objects to concatenate
60 Creates a custom internal map based on the provided MapMaker configuration. @param builder MapMaker instance with strength settings
61 Creates a MapMakerInternalMap with dummy value entries based on the given MapMaker configuration. @param builder MapMaker instance defining map properties
62 Concatenates multiple iterables into a single fluent iterable. @param inputs variable-length array of input iterables
63 Retrieves an element at the specified index from the underlying collection. @param position the index of the desired element (0-based)
64 Acquires one unit of resource with default quantity. @return Resource value or zero if failed
65 Converts duration to nanoseconds and enters it. @param time duration to convert and enter
66 Enters the guarded block and checks the condition. @param guard Guard object to monitor @param time timeout value in specified unit @param unit TimeUnit for the timeout value @return true if condition satisfied, false otherwise
67 Creates a CacheBuilder instance from a specification. @param spec CacheBuilder specification object @return CacheBuilder instance for building caches
68 Creates a strong interned instance of the Map. @return Interner object
69 Creates an interned object cache with weak references.
70 Sets a cell value by row and column keys. @param rowKey unique row identifier @param columnKey unique column identifier @param value new cell value (may be null) @return previous value in the cell or null if not set
71 Removes a data point from the table by row and column keys. @param rowKey unique row identifier or null for none @param columnKey unique column identifier or null for none @return V object or null if not found
72 Compares this ImmutableDoubleArray to another object for equality. @param object object to compare with @return true if equal, false otherwise
73 Compares this ImmutableIntArray with another object for equality. @param object the object to compare with @return true if both arrays have the same length and elements, false otherwise
74 Compares this ImmutableLongArray with another object. @param object the object to compare @return true if equal, false otherwise
75 Converts string to specified case format. @param format CaseFormat enum value @param s input string
76 Returns the starting index of this char sequence within a given CharSequence. @param sequence the CharSequence to search in
77 Constructs an iterator over an empty list of specified size. @param size initial size of the underlying list
78 Retrieves Teredo information from a given IPv6 address. @param ip the IPv6 address to extract info from @return TeredoInfo object containing server IP, client IP, port, and flags or null if invalid
79 Verifies whether the given byte array represents a well-formed binary data structure.
80 Encodes byte array into a string. @param bytes input byte array to be encoded
81 Reads fully from the specified InputStream into a byte array. @param in InputStream to read from @param b Byte array to store the data @param off Offset within the byte array to start writing @param len Number of bytes to read and write
82 Reverses the order of elements in the specified boolean array. @param array input boolean array to be reversed
83 Rotates a boolean array within the specified range by the given distance. @param array boolean array to rotate @param distance number of positions to shift @param fromIndex start index of rotation section (inclusive) @param toIndex end index of rotation section (exclusive)
84 Reverses the order of bytes in the specified array. @param array byte array to be reversed
85 Rotates a byte array by specified distance within the given range. @param array the byte array to rotate @param distance the number of positions to rotate @param fromIndex the start index of the section to rotate @param toIndex the end index of the section to rotate
86 Sorts the specified range of the byte array in descending order. @param array the byte array to sort @param fromIndex start index of the range (inclusive) @param toIndex end index of the range (exclusive)
87 Sorts the specified range of a character array in descending order. @param array the array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
88 Reverses the characters in the given array in-place. @param array the character array to be reversed
89 Rotates a substring within the given array by the specified distance. @param array input character array @param distance rotation distance @param fromIndex start index of the substring @param toIndex end index of the substring
90 Sorts the specified range of double array in descending order. @param array the array to sort @param fromIndex the starting index of the range (inclusive) @param toIndex the ending index of the range (exclusive)
91 Reverses the order of elements in a double array.
92 Rotates a subarray within the given array by the specified distance. @param array input double array @param distance number of positions to rotate @param fromIndex starting index of subarray to rotate @param toIndex ending index of subarray to rotate
93 Sorts the specified subarray of floats in descending order. @param array the array containing the elements to sort @param fromIndex start index of the subarray (inclusive) @param toIndex end index of the subarray (exclusive)
94 Reverses the order of elements in the given float array. @param array input array to be reversed
95 Rotates elements in a float array within specified range by given distance. @param array the input array @param distance the number of positions to rotate @param fromIndex start index of rotation range (inclusive) @param toIndex end index of rotation range (inclusive)
96 Sorts the specified range of an array in descending order. @param array the array to sort @param fromIndex start index (inclusive) of the range to sort @param toIndex end index (exclusive) of the range to sort
97 Reverses the order of elements in the given integer array. @param array input array to be reversed
98 Rotates a portion of an array by the specified distance. @param array input array @param distance number of positions to rotate @param fromIndex start index of rotation section (inclusive) @param toIndex end index of rotation section (exclusive)
99 Sorts the specified range of elements in the array in descending order. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
100 Reverses the order of elements in a long array. @param array input array to be reversed
101 Rotates a portion of the array by specified distance. @param array input array @param distance number of positions to rotate @param fromIndex start index of rotation section (inclusive) @param toIndex end index of rotation section (exclusive)
102 Sorts the specified portion of the short array in descending order. @param array input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
103 Reverses the order of elements in the specified short array. @param array input array to be reversed
104 Rotates a portion of the given array by the specified distance. @param array the input array @param distance rotation distance (positive for forward rotation) @param fromIndex start index of rotation section @param toIndex end index of rotation section
105 Sorts an array of bytes in-place. @param array byte array to be sorted
106 Sorts an array of bytes in descending order.
107 Sorts an integer array in ascending order using quicksort algorithm. @param array input array to be sorted
108 Sorts an integer array in descending order. @param array input array to be sorted
109 Sorts an array of long integers in ascending order. @param array input array to be sorted
110 Sorts an array of long integers in descending order.
111 Creates a Splitter with the specified non-empty separator. @param separator single character or multi-character separator string
112 Returns a MapSplitter instance using a custom key-value separator. @param separator character used to separate keys and values
113 Starts a Finalizer thread for the given class and queue. @param finalizableReferenceClass class of the FinalizableReference @param queue ReferenceQueue to use for cleanup @throws IllegalArgumentException if invalid class is provided
114 Creates an empty Builder instance. @return A new Builder object with default configuration
115 Creates an empty Builder instance. @return A new Builder with default configuration
116 Wraps a modifiable multiset in an unmodifiable view. @param multiset the original multiset to wrap @return an unmodifiable Multiset instance or an existing one if it's already unmodifiable
117 Creates an EvictingQueue instance with specified maximum size. @param maxSize maximum number of elements in queue
118 Creates an empty forwarding blocking deque. This constructor is intended to be used by subclasses.
119 Creates an empty unmodifiable BlockingDeque instance. This constructor is used to create a view of another collection. The returned deque is serializable if the backing collection is serializable.
120 Creates an empty forwarding navigable set.
121 Returns an unmodifiable view of the given entry set. @param entrySet original entry set
122 Returns an unmodifiable view of the specified navigable map. @param map navigable map to wrap
123 Wraps a ListMultimap in an unmodifiable view. @param delegate original multimap instance
124 Returns an unmodifiable view of the given set multimap. @param delegate original set multimap
125 Returns an unmodifiable view of the input row-sorted table. @param table input table to wrap
126 Adapts the given Future to be Listenable in a thread-safe pool. @param future original non-Listenable Future @return ListenableFuture that wraps the original or its adapter
127 Adds a callback to the given ListenableFuture. @param future future to add callback to @param callback callback to invoke on completion @param executor executor to run callback in
128 Initializes a LocalCache instance with given parameters. @param builder CacheBuilder instance @param loader optional CacheLoader instance
129 Creates a new instance of TreeMultiset with natural ordering.
130 Creates a TreeMultiset instance with optional custom comparator. @param comparator nullable comparator for tree ordering @return TreeMultiset object or default natural ordering if null
131 Replaces values in a map with the specified keys and values. @param key unique identifier for replacement @param values iterable of new values to replace with
132 Replaces values in a map with the given iterable. @param key unique map identifier @param values new values to replace with @return Set of replaced values or null if not found
133 Removes all elements equal to the given key from this set. @param key element to be removed, or null for no operation @return this set itself, for method chaining
134 Creates a new HashMultiset with specified number of distinct elements. @param distinctElements initial count of unique elements
135 Checks for cycles in a given network, handling both directed and undirected cases. @param network the graph to check @return true if a cycle exists, false otherwise
136 Creates a new LinkedHashMultiset with specified number of distinct elements. @param distinctElements the initial size of the multiset
137 Initializes a StandardNetwork instance from a NetworkBuilder. @param builder NetworkBuilder providing configuration parameters
138 Constructs a StandardValueGraph with the provided builder and initial node connections. @param builder graph builder instance
139 Creates a new hash set with expected size based on configuration.
140 Creates a new linked set with expected size based on value capacity. @return Linked set of type V or null if not initialized.
141 Adds a new cell with specified key-value pair to the data set. @param rowKey unique row identifier @param columnKey unique column identifier @param value cell value
142 Adds a new entry to the map with the specified key and value. @param key unique identifier for the entry @param value associated data for the entry @return mutable Builder instance for chaining further operations
143 Adds a value to the builder's underlying map. @param key class of the value being added @param value instance of type T to be stored in the map @return this Builder object for method chaining
144 Puts all entries from a Map into the builder. @param map map containing key-value pairs to add
145 Inserts a key-value pair into the map using an existing Entry object. @param entry pre-existing Entry containing key and value to be added
146 Adds a new entry to the map with the specified key and value. @param key unique key identifier @param value associated value for the key @return Builder instance for method chaining
147 Adds a value to the builder's map. @param key class type of the value being added @param value object to be associated with the given key @return this Builder instance for method chaining
148 Puts a value into the builder's map with the given TypeToken as key. @param key unique identifier for the value @param value object to be stored in the map
149 Adds all entries to the builder. @param entries iterable of key-value pairs to add @return this Builder instance for method chaining
150 Adds multiple key-value pairs from the given iterable to this builder. @param entries collection of entries to add @return this builder instance for method chaining
151 Filters a navigable set based on the provided predicate. @param unfiltered original navigable set @param predicate filtering condition @return filtered navigable set or null if unfiltered is null
152 Builds an ImmutableSortedMap instance based on the provided entries. @return ImmutableSortedMap object or throws exception if invalid
153 Adds a key-value entry with the specified range and value to the builder. @param range non-empty Range object @param value associated value
154 Adds a non-empty Range to the collection of ranges. @param range non-empty Range object
155 Computes the intersection of two ranges. @param connectedRange other range to intersect with @return intersected Range object or original range if no overlap
156 Calculates the gap between two ranges. @param otherRange the range to compare with @return a new range representing the gap between the input ranges
157 Merges two ranges into one. @param other Range to merge with @return merged Range object or original if identical
158 Returns a canonical Range instance for the given domain. @param domain DiscreteDomain object defining the range's bounds
159 Creates a new instance of HashBiMap with default capacity (16). @return an empty HashBiMap instance
160 Creates a HashBiMap instance from a given Map. @param map input Map to populate the BiMap
161 Creates a new instance of the Builder. @return A Builder object ready to build an instance of type B
162 Creates an instance of ImmutableClassToInstanceMap containing a single entry. @param type class type (extends B) @param value instance to map to the provided class @return ImmutableClassToInstanceMap<B> with the specified key-value pair
163 Returns an immutable set of values from the inverse mapping. @return Set of V values or empty set if no mappings exist
164 Reverses a list, handling various types and access patterns. @param list input list to reverse @return reversed list of the same type as input
165 Creates an immutable list from a given array. @param elements input array to copy
166 Converts an array to a immutable list. @param elements array of elements @param length number of elements to include @return ImmutableList object or empty list if length is 0
167 Returns a sublist containing elements from the specified range. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
168 Creates an immutable range map with a single entry for the given key-value pair. @param range unique key range @param value associated value
169 Creates an ImmutableRangeSet from a single Range. @param range the input Range
170 Creates an immutable sorted map with a single key-value pair. @param comparator the comparator to use for sorting @param k1 the key @param v1 the value
171 Creates an empty immutable set with specified initial capacity. @param elements array of elements to be copied into the set
172 Creates a new instance of Builder.
173 Concatenates two iterators into one. @param a first iterator @param b second iterator @return concatenated iterator or null if either input is null
174 Concatenates three iterators into one iterator. @param a first iterator @param b second iterator @param c third iterator @return concatenated iterator of type T
175 Concatenates four iterators into one iterator. @param a first iterator @param b second iterator @param c third iterator @param d fourth iterator @return concatenated iterator of type T or null if any input is null
176 Retrieves iterators for all subscribers of the given event. @param event Object representing an event @return Iterator over a flat collection of all subscribers
177 Retrieves the result of a completed future, or null if not. @param closingFuture the future to retrieve from @return D object or null if not found
178 Checks if the map contains a specified value. @param value Object to search for
179 Removes and returns the associated value for a given key. @param key object to be removed @return associated value or null if not found
180 Clears all entries in this map.
181 Checks if this standard has any entries. @return true if empty, false otherwise
182 Computes the standard hash code based on entry set. @return unique hash code value
183 Compares two maps for differences. @param left first map to compare @param right second map to compare @return MapDifference object describing the differences between the two maps
184 Constructs an EventBus instance with default configuration. @param name optional bus name (defaults to "default")
185 Swaps a node in the queue with its child if it's smaller than the given value. @param index index of the node to swap @param x value to compare with children @return new index of the swapped node or result of crossOverUp
186 Fills the hole at a given index by recursively finding and replacing with the smallest grandchild. @param index index of the hole to fill @return new index after filling the hole
187 Checks if the specified object is in this sorted set. @param object the object to search for @return true if found, false otherwise
188 Removes the first occurrence of the specified object from this sorted set. @param object the object to remove @return true if removed, false otherwise or on removal failure
189 Returns a subset of this set containing elements between (inclusive) 'fromElement' and 'toElement'. @param fromElement lower bound element @param toElement upper bound element
190 Returns a sorted set of row keys.
191 Removes all occurrences of specified element from this set. @param key element to remove (may be null)
192 Creates a new Bloom filter with the specified parameters. @param funnel function to transform input elements @param expectedInsertions estimated number of insertions @param fpp target false positive probability
193 Rounds a double to an integer using the specified rounding mode. @param x value to be rounded @param mode RoundingMode to apply @return rounded int value or throws if out of range
194 Rounds a double value to a long using the specified RoundingMode. @param x double value to round @param mode rounding strategy @return rounded long value or throws if invalid inputs
195 Offers all remaining elements from the iterator to this data structure. @param elements iterator yielding elements to be offered
196 Returns a TopKSelector instance to select top K elements based on natural ordering. @param k number of top elements to select
197 Constructs a TopKSelector to select the greatest K elements. @param k number of top elements to select
198 Checks if an integer is prime. @param n input number to check for primality
199 Calculates the binomial coefficient (n choose k) using dynamic long arithmetic. @param n input value @param k input value @return BigInteger representing the result or null if invalid input
200 Calculates statistics (mean, median, etc.) from an iterable of numbers. @param values collection of numeric values to process @return Stats object containing calculated statistics or null if empty
201 Calculates statistics from an iterator of numbers. @param values iterator of numeric values
202 Adds all paired statistics from the provided PairedStats object. @param values paired statistics to add
203 Computes statistics from a stream of numeric values. @param values DoubleStream containing numeric data @return calculated Stats object
204 Computes aggregate statistics from a stream of integer values. @param values IntStream containing integers to accumulate @return Stats object encapsulating calculated statistics
205 Accumulates statistics from a LongStream. @param values input stream of long values @return Stats object with aggregated metrics or null if empty
206 Accumulates statistics from provided DoubleStream. @param values stream of numerical values to process
207 Accumulates statistics from an IntStream into a StatsAccumulator.
208 Accumulates stream of Long values into internal statistics. @param values LongStream to process
209 Recursively selects all occurrences of a value in an array within specified ranges. @param allRequired array of values to search for @param requiredFrom start index of first range (inclusive) @param requiredTo end index of last range (exclusive) @param array target array to select from @param from start index of current selection range (inclusive) @param to end index of current selection range (inclusive)
210 Creates an immutable double array from a collection of doubles. @param values iterable of double values
211 Creates an immutable integer array from the given iterable. @param values input iterable of integers
212 Creates an immutable long array from a collection of longs. @param values iterable of long values
213 Converts to string representation in specified base. @param radix target number base (e.g. 2 for binary)
214 Converts a long integer to its string representation in base 10.
215 Executes any of the provided tasks with a specified timeout. @param executorService thread pool for task execution @param tasks collection of callable tasks @param timed whether to use a timeout @param timeout maximum time to wait in nanoseconds @return result of the first completed task or null if all failed
216 Executes a Runnable in the given Executor. @param combiner The Runnable to be executed @param executor The thread pool to execute the Runnable in @return A ListenableFuture representing the execution result
217 Wraps a ListenableFuture into a ClosingFuture. @param future underlying ListenableFuture to wrap
218 Attempts to poll an element from this queue; returns null if empty. @return polled element or null if queue is empty
219 Returns the current element without removing it from the queue. If the queue is empty, returns null.
220 Submits a Callable task to the specified Executor, returning a ListenableFuture result. @param callable task to execute @param executor execution context @return ListenableFuture containing the task's result or null if failed
221 Retrieves a result from a Future with checked exceptions. @param future the Future to retrieve the result from @param exceptionClass the Class of the expected exception @param timeout and unit for the maximum wait time @throws X the expected exception if thrown by the Future
222 Notifies the service as stopped, updating its state and dispatching events. @throws IllegalStateException if service is not in a stoppable state
223 Notifies that the task has failed. @param cause the underlying exception
224 Starts timing for the given service using a synchronized stopwatch. @param service service to start timing for
225 Transitions a service from one state to another. @param service Service object being transitioned @param from Current state of the service @param to Target state of the service
226 Waits on the specified guard until it's satisfied. @param guard monitor to wait on
227 Waits for the specified Guard to be satisfied or interrupted. @param guard Guard object being monitored
228 Waits uninterruptibly for the given guard to be satisfied. @param guard monitor and condition to wait on
229 Waits uninterruptibly for the guard to be satisfied. @param guard Guard object to monitor
230 Waits on a Guard until it's satisfied or the specified time elapses. @param guard condition to wait for @param time duration to wait @param unit TimeUnit for the specified duration @return true if the condition is met, false otherwise
231 Waits for the specified guard condition to be satisfied or times out. @param guard Guard object to monitor @param time Time duration to wait @param unit TimeUnit of the timeout duration @return true if the condition is met, false otherwise
232 Waits for a Guard to be satisfied within a specified time limit. @param guard the condition being monitored @param time maximum waiting duration in given TimeUnit @param unit TimeUnit of the waiting duration @return true if the Guard is satisfied, false otherwise
233 Waits uninterruptibly for the specified guard to be satisfied or times out. @param guard monitor object to wait on @param time maximum duration to wait in given unit @param unit TimeUnit for time parameter @return true if guard is satisfied, false otherwise
234 Executes the operation with a specified time-out. @param timeout duration to wait for completion @param unit time unit of the time-out @return FluentFuture containing result or exception
235 Wraps a listenable future with a timeout. @param delegate original listenable future @param time timeout duration @param scheduledExecutor executor service for timed out operations
236 Finds the first element matching a given predicate in an iterable sequence. @param predicate condition to match @return Optional containing the first matching element, or empty if none found
237 Creates a fast CharMatcher instance with precomputed matches. @return Fast matcher or NegatedFastMatcher if total characters exceed DISTINCT_CHARS limit
238 Re-throws a Throwable as a RuntimeException or its declared type. @param e the Throwable to rethrow @param declaredType1 first potential exception type @param declaredType2 second potential exception type
239 Writes byte array to output stream. @param bytes data to be written
240 Writes data from an InputStream to a newly opened OutputStream. @param input InputStream containing the data to be written @return the total number of bytes written or -1 on error
241 Checks if the underlying stream is empty. @return true if the stream has no content, false otherwise
242 Calculates the size of this resource. @return size in bytes, or -1 if unknown
243 Copies user data to the specified OutputStream. @param output target stream for copying
244 Copies data to the specified sink. @param sink target stream for copying
245 Reads data from an underlying stream into a byte array. @return byte[] containing the read data or null if not known
246 Reads data from the input stream using a specified byte processor. @param processor ByteProcessor to process the read bytes @return T object processed by the processor, or null if not found
247 Compares byte content of this source to another. @param other ByteSource to compare with
248 Writes CharSequence to underlying stream. @param charSequence sequence of characters to be written
249 Writes data from a Readable source to the underlying output stream. @param readable input data source
250 Calculates the length of a streamable entity. @return Length in bytes, or -1 if unknown
251 Copies user profile data to the specified writable destination. @param appendable writable output target @return number of bytes written or -1 on error
252 Copies user data to a specified sink. @param sink destination for the copy operation
253 Reads the first line from a stream, handling exceptions and resource closure.
254 Reads lines from the stream and processes them with the given processor. @param processor LineProcessor to apply to each line @return processed result or null if not applicable
255 Checks if the underlying stream is empty. @return true if the stream has no content, false otherwise
256 Expands the hash table to twice its current capacity. @GuardedBy("this")
257 Filters keys in a multimap using the given predicate. @param unfiltered Multimap to filter @param keyPredicate Predicate to apply to each key @return New filtered multimap or existing one if already filtered
258 Filters values in a multimap based on a predicate. @param unfiltered the original multimap @param valuePredicate predicate to apply to each value @return filtered SetMultimap with values matching the predicate
259 Filters entries in a multimap based on the provided predicate. @param unfiltered original multimap @param entryPredicate filter criteria for entries @return filtered Multimap object or new instance if not filtered
260 Creates an iterator for unique column keys, eliminating duplicates based on the configured comparator. @return Iterator over unique column keys or empty iterator if none found.
261 Creates an Immutable Bi-Map from an iterable of key-value entries. @param entries iterable of entries to copy
262 Creates an ImmutableMap from a collection of entries. @param entries Iterable of key-value pairs to copy into map
263 Converts an iterable to a typed array. @param iterable input collection @param type expected element class @return array containing all elements or null if empty
264 Creates a copy of the given sorted iterable with the specified comparator. If the original is an ImmutableSortedSet with the same comparator, returns it directly. Otherwise, constructs a new ImmutableSortedSet from the iterable's elements. @param comparator comparison function for the set @param elements iterable containing the set's elements
265 Performs binary search on a list using a custom key function and comparator. @param list input list to search @param keyFunction function to extract the search key from each element @param key target search key @param keyComparator comparator for searching key @param presentBehavior behavior when search key is present in list @param absentBehavior behavior when search key is not present in list
266 Removes all elements from this list that are contained in the given collection. @param key the collection of elements to remove
267 Transforms the values in a navigable map using a given function. @param fromMap source map with keys and original values @param function transformation function applied to each value @return new map with transformed values, same keys as input map
268 Removes mapping by key-value pair if present. @param rowKey unique row identifier @param columnKey unique column identifier @param value associated value to remove @return true if removed, false otherwise
269 Returns a thread-safe wrapper for the provided list multimap. @param multimap list multimap to synchronize @return synchronized list multimap or null if input is null
270 Returns a thread-safe version of the provided set multimap. @param multimap input multimap to synchronize
271 Converts a Readable object to its string representation. @param r Readable object to convert
272 Catches specific exceptions and returns a fallback value. @param exceptionType type of exception to catch @param fallback function to execute on caught exception @param executor executor service for fallback execution @return FluentFuture containing result or fallback value
273 Transforms a Future into a new Future of type T using the provided function. @param function transformation function @param executor execution context for the transformation
274 Creates a directed graph builder. @return GraphBuilder instance with directed graph capability
275 Creates an undirected graph builder. @return GraphBuilder instance with directed=false
276 Creates a new GraphBuilder instance from an existing graph. @param graph the original graph to copy settings from
277 Creates a network builder with a directed topology. @return NetworkBuilder instance with directed topology
278 Creates an undirected network builder. @return NetworkBuilder instance with directed=false property set
279 Creates a NetworkBuilder instance from an existing network. @param network the original network to copy properties from
280 Creates a directed ValueGraphBuilder instance.
281 Creates an undirected graph builder.
282 Creates a ValueGraphBuilder instance from an existing graph. @param graph the input graph
283 Adds a listener to the internal state. @param listener Listener object to be added @param executor Executor instance for concurrent execution
284 Creates an empty CompactLinkedHashSet instance. @return A new, empty CompactLinkedHashSet object.
285 Creates a compact hash set from the given collection. @param collection input collection to convert
286 Creates a compact linked hash set with expected size. @param expectedSize anticipated number of elements
287 Creates a sorted set multimap from a backing map and a sorted set factory. @param map backing map of key-value collections @param factory supplier for creating sorted sets of values
288 Converts a collection of elements into an immutable multiset.
289 Converts a collection of elements with optional counts into an immutable multiset. @param elementFunction maps each element to its type @param countFunction extracts the count from each element @return ImmutableMultiset containing all elements with their respective counts
290 Creates a new instance of the Builder class. @return A Builder object with default configuration.
291 Joins an array of objects into a string using the join method. @param parts Array of objects to be joined, may be null
292 Joins elements of this collection using the specified Joiner. @param joiner join strategy to apply
293 Simplifies a Unix-style file path by resolving ., .., and //. @param pathname the path to simplify @return simplified path as a string or "." for an empty input
294 Parses trie to builder, recursively processing encoded string and populating suffix map. @param stack Deque for building domain strings @param encoded encoded trie string @param start starting index in the encoded string @param builder map builder for public suffix entries @return number of characters processed
295 Creates a concurrent map instance using either the default ConcurrentHashMap or a custom implementation. @return ConcurrentMap instance
296 Concatenates iterables resulting from transforming input iterable using the given function. @param function transformation function for each element in the input iterable
297 Concatenates multiple iterables into a single iterable. @param inputs variable-length parameter list of iterables to concatenate
298 Retrieves a value with specified timeout and time unit. @param timeout maximum wait duration in specified time unit @param unit time unit for the timeout (e.g. TimeUnit.SECONDS) @throws InterruptedException if interrupted while waiting @throws TimeoutException if operation timed out @throws ExecutionException if underlying execution failed
299 Adds a new node to the graph and returns its associated connections. @param node unique node identifier
300 Enters a guarded region with specified duration. @param guard Guard object @param time duration in nanoseconds
301 Converts the given string to the specified case format. @param format CaseFormat enum value @param s input string to convert
302 Converts a string to the specified case format. @param format CaseFormat enum value @param s input string to convert
303 Converts a string to the specified case format. @param format CaseFormat enum value @param s input string
304 Converts string to specified case format. @param format target case format @param str input string @return converted string or original if format is default
305 Checks if given CharSequence does not match any pattern. @return true if no match found, false otherwise
306 Removes all occurrences of a specified character from the given sequence. @param sequence input CharSequence @return modified string with characters removed or original string if none found
307 Replaces occurrences of a character in a string with a specified replacement. @param sequence input string-like object @param replacement the character to replace @return modified string or original if not found
308 Resolves the embedded IPv4 client address for a given IPv6 address. @param ip IPv6 address to resolve @return Inet4Address object or throws exception if not found
309 Reads bytes from input and updates hash with the read data. @param bytes buffer to store read data @param off offset in the buffer where data should be written @param len number of bytes to read @return number of bytes read, or -1 if end-of-input reached
310 Copies data from InputStream to specified byte array. @param in input stream @param b target byte array
311 Rotates elements in the given boolean array by specified distance. @param array boolean array to be rotated @param distance number of positions to shift elements
312 Rotates elements in a byte array by specified distance. @param array byte array to be rotated @param distance number of positions to shift elements
313 Sorts an array of bytes in descending order.
314 Sorts an array of characters in descending order. @param array the input character array
315 Rotates characters in the given array by the specified distance. @param array input character array to be rotated @param distance number of positions to shift elements
316 Sorts an array of doubles in descending order. @param array input array to be sorted
317 Rotates elements in the given array by the specified distance. @param array input array to be rotated @param distance number of positions to shift elements
318 Sorts an array of floats in descending order. @param array input float array to be sorted
319 Rotates elements in the given array by the specified distance. @param array input array to be rotated @param distance number of positions to shift each element
320 Sorts an integer array in descending order. @param array input array to be sorted
321 Rotates elements in an integer array by given distance. @param array input array to be rotated @param distance number of positions to shift elements
322 Sorts an array of long integers in descending order.
323 Rotates elements in the given array by specified distance. @param array input array @param distance rotation distance
324 Sorts an array of shorts in descending order. @param array input array to be sorted
325 Rotates the given short array by the specified distance. @param array the input array to be rotated @param distance the number of positions to shift elements
326 Configures key-value splitter with a custom separator. @param separator string to use as separator in split operation
327 Creates a RateLimiter with specified permits per second and warm-up period. @param permitsPerSecond rate limit in units of {@code unit} @param warmupPeriod initial warm-up duration @param unit time unit for permit rate (e.g. SECONDS, MILLISECONDS)
328 Returns an unmodifiable view of the given sorted multiset. @param sortedMultiset original sorted multiset to wrap
329 Wraps a navigable set in an unmodifiable interface. @param set original navigable set
330 Returns an unmodifiable collection of map entries. @param entries input collection of entries
331 Returns an unmodifiable view of the specified sorted set multimap. @param delegate original mutable sorted set multimap
332 Wraps a ListenableFuture with eventual auto-closing functionality. @param future the original future to be wrapped @param closingExecutor executor for closing resources @return ClosingFuture object or null if not found
333 Adds a callback to be executed when this future completes. @param callback callback to execute @param executor executor to use for running the callback
334 Creates a bi-directional enum map between two types. @param keyType the type of enums to use as keys @param valueType the type of enums to use as values
335 Creates an EnumHashBiMap instance with the specified enum type as keys. @param keyType the enum class to use as keys
336 Creates a TreeMultiset from an iterable of comparable elements. @param elements Iterable of elements to populate the multiset with
337 Initializes a new Builder with a custom comparator. @param comparator comparator to order elements in the multiset
338 Replaces values associated with a given key in the map. @param key unique identifier for replacement @param values new values to associate with the key
339 Replaces values in the set associated with the given key. @param key unique identifier of the set to modify @param values new values to store in the set
340 Creates a HashMultiset from an iterable of elements. @param elements collection of elements to include in the multiset @return populated HashMultiset instance
341 Creates a new ArrayListMultimap with specified key and value counts. @param expectedKeys total number of keys @param expectedValuesPerKey average values per key
342 Creates a new HashMultimap with specified capacity. @param expectedKeys estimated number of unique keys @param expectedValuesPerKey estimated average values per key
343 Creates a HashMultimap from an existing Multimap instance. @param multimap the original Multimap to clone @return a new HashMultimap with same key-value pairs as input
344 Creates a LinkedListMultimap with the specified expected key count. @param expectedKeys desired number of keys in the multimap
345 Creates a linked hash multiset from an iterable of elements. @param elements input collection of elements @return LinkedHashMultiset instance populated with unique elements and added duplicates
346 Creates a new LinkedHashMultimap instance with default key and value set capacities.
347 Creates a LinkedHashMultimap with estimated key and value capacities. @param expectedKeys number of unique keys @param expectedValuesPerKey average values per key
348 Constructs a standard mutable network using the provided builder. @param builder NetworkBuilder instance to configure the network
349 Initializes a new graph with the specified builder settings. @param builder Graph builder instance
350 Adds a cell to the table, either as an immutable object or by individual key-value pairs. @param cell Cell object (may be immutable)
351 Adds an entry to the map and returns this builder instance. @param entry Map entry to add
352 Adds all entries from the given iterable to the map. @param entries collection of key-value pairs to add @return this Builder instance for method chaining
353 Adds an entry to the map and returns the builder instance.
354 Converts to a Set-based Multimap. @return ImmutableSetMultimap instance or creates one if not already built
355 Builds and returns an immutable sorted map.
356 Copies all entries from a RangeMap to this builder. @param rangeMap map of ranges and values to copy @return this Builder instance, allowing method chaining
357 Adds multiple ranges to the builder. @param ranges iterable of Range objects to be added @return this Builder instance for method chaining
358 Intersects the given range with a collection of ranges, returning an immutable list of intersecting sub-ranges. @param range Range to intersect with
359 Creates a contiguous set of comparable elements within the specified range and domain. @param range the desired range of values @param domain the discrete domain that defines the set's bounds @return ContiguousSet containing the requested elements or an empty set if none exist
360 Coalesces a range with a matching value from the given entry. @param range the initial range @param value the value to match @param entry optional RangeMapEntry containing the key and value @return updated range or original range if no match found
361 Converts to an immutable sorted set of discrete values within a given domain. @param domain DiscreteDomain to constrain the set
362 Converts a map to an immutable enum map. @param map input map @return ImmutableEnumMap object or empty map if input is empty
363 Returns an immutable map of rows to their corresponding column maps. @return map where keys are row identifiers and values are column maps
364 Returns an iterator over the elements in this set in reverse order. @return Descending iterator or null if empty
365 Builds an immutable list from the current contents. @return ImmutableList of type E or null if contents are empty
366 Converts an array of objects to an immutable list. @param elements the input array
367 Builds an ImmutableSortedSet instance from internal elements. @return ImmutableSortedSet containing deduplicated and sorted elements
368 Creates an immutable map from a sorted array of entries. @param n size of the input array @param entryArray array of key-value pairs to populate the map @param throwIfDuplicateKeys whether to throw an exception on duplicate keys @return ImmutableMap instance or null if duplicates are allowed and all values are deleted.
369 Finds the index of the first matching suffix type. @param desiredType Optional PublicSuffixType to match
370 Creates an immutable set of enums from the given iterable. @param elements iterable containing enum values
371 Returns an unmodifiable iterator over elements in this collection. @return Iterator instance allowing iteration over elements
372 Dispatches an event to subscribed listeners or posts a DeadEvent. @param event Event object to dispatch or post as DeadEvent if no listeners found
373 Tries crossing over and bubbling up in the heap, returning a MoveDesc if successful. @param removeIndex index to remove @param vacated index that will be vacated @param toTrickle element to trickle up @return MoveDesc with new parent or null on failure
374 Returns the comparator used for sorting rows in this collection. @return Comparator object or null if not set (not applicable)
375 Returns a synchronized version of the provided NavigableSet. @param navigableSet original set to synchronize
376 Creates a Bloom Filter with specified expected insertions and false positive probability. @param funnel serialization function for filter elements @param expectedInsertions estimated number of elements to be inserted @param fpp desired false positive probability
377 Creates a Bloom Filter with the given funnel and expected insertions. @param funnel Funnel to use for hashing elements @param expectedInsertions Estimated number of elements to add
378 Estimates the approximate number of elements stored. @return Element count based on hash function and bit statistics
379 Returns a collector that selects the top K elements based on a given comparator. @param k number of top elements to select @param comparator for sorting and selecting top elements
380 Retrieves the k smallest elements from an iterator. @param iterator input iterator @param k number of smallest elements to retrieve @return List of k smallest elements or empty list if not found
381 Offers all elements from the given iterable to the underlying queue. @param elements iterable containing elements to be offered
382 Returns a string representation of this unsigned long value. @return human-readable string representation of the value.
383 Validates and records the lock acquisition for a CycleDetectingLock. @param lock the lock being acquired
384 Transforms a ClosingFuture using the provided asynchronous function. @param function async transformation function @param executor Executor for executing the transformation @return transformed ClosingFuture or null if not found
385 Transforms a future using an asynchronous closing function. @param function asynchronous closing function to apply @param executor Executor instance for async computation @return ClosingFuture object representing transformed result
386 Retrieves a value from a future with checked exceptions. @param future the future containing the value @param exceptionClass class of expected exception @return the retrieved value or null if not available
387 Retrieves a checked result from a future, throwing the specified exception type if timed out or failed. @param future Future containing the result @param exceptionClass Exception class to throw on timeout/failure @param timeout Maximum wait time in nanoseconds
388 Reschedules this task with a new schedule, handling failures and locking. @return a Cancellable object or immediateCancelledFuture() on failure
389 Notifies the service as started, potentially transitioning to STOPPING or RUNNING state. @throws IllegalStateException if service is not in STARTING state
390 Starts all services asynchronously. Ensures all services are in NEW state before proceeding. @return This ServiceManager instance
391 Enters the specified Guard when its timeout is reached. @param guard Guard object @param time duration in nanoseconds
392 Enters the given Guard uninterruptibly for a specified duration. @param guard Guard object to enter @param time duration in nanoseconds
393 Waits for a specified duration while monitoring a Guard. @param guard the Guard to monitor @param time the duration to wait in nanoseconds @return true if the Guard was satisfied within the given time, false otherwise
394 Waits uninterruptibly for the Guard to be released within a specified duration. @param guard the Guard to wait on @param time the maximum waiting duration @return true if the Guard was released, false otherwise
395 Executes the operation with a specified time limit. @param timeout time duration for execution @param scheduledExecutor executor service to use
396 Writes byte array content to a specified file. @param from byte array data to be written @param to target file for writing
397 Computes the hash of the object using a specified hash function. @param hashFunction instance of HashFunction to use for hashing @return HashCode object or throws IOException on failure
398 Copies file contents from source to destination stream. @param from source file @param to destination output stream
399 Copies content from a URL to an output stream. @param from URL to read from @param to Output stream to write to
400 Copies the contents of one file to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
401 Converts a File object to its byte array representation. @param file input file @return byte array containing file data or null on error
402 Converts a URL to its byte representation. @param url URL object
403 Reads the contents of a file into bytes and processes them. @param file file to be processed @param processor callback function for processing each byte @return result of processing or null if process returns null
404 Compares two files for equality by comparing their lengths and contents. @param file1 first File object to compare @param file2 second File object to compare @return true if files are equal, false otherwise
405 Compares two file paths for equality. @param path1 first file path @param path2 second file path @return true if paths are the same, false otherwise
406 Writes a CharSequence to a file using the specified charset. @param from CharSequence to write @param to target file location @param charset character encoding scheme
407 Appends a CharSequence to a file using the specified charset and mode. @param from CharSequence to write @param to target file path @param charset character encoding for writing
408 Copies character data from a file to an appendable target. @param from source file @param charset encoding to use @param to destination for copied content
409 Reads the first line from a file using the specified character set. @param file the file to read from @param charset the character encoding for reading @return the first line of text or null if empty
410 Reads lines from a file into a list. @param file the file to read @param charset the character set of the file content @return list of strings representing the file's lines
411 Reads lines from a file into the provided callback. @param file file to read @param charset character encoding for reading @param callback callback to process each line @return result of processing (may be null)
412 Reads lines from a URL into a target object. @param url source URL @param charset character set to use for decoding @param callback processor to convert each line into the target object @return the resulting target object or null if not processed
413 Maps a file to a memory-mapped buffer. @param file file to be mapped @param mode mapping mode (e.g. read-only, read-write)
414 Maps a file to memory with specified parameters. @param file file to map @param mode access mode for mapped buffer @param size requested size of mapped buffer
415 Adds a shutdown hook with delayed execution. @param service ExecutorService instance @param terminationTimeout timeout duration in specified unit @param timeUnit time unit for timeout (e.g., SECONDS)
416 Filters values in a multimap based on the provided predicate. @param unfiltered input multimap @param valuePredicate predicate to evaluate each value @return filtered multimap with matching values removed
417 Creates an ordering based on multiple comparators. @param comparators iterable of comparators to combine @return Ordering instance for the given comparators
418 Creates an immutable bi-map by copying the provided map. @param map source map to copy, can be a partial view of a BiMap
419 Converts internal delegate to an array of specified type. @param type Class of elements in the returned array @return Array of type E or null if not found (but never empty)
420 Converts an iterator to a typed array. @param iterator iterator over elements of type T @param type class of the array elements @return array of type T or null if iteration failed
421 Converts this collection to an immutable sorted set using the specified comparator. @param comparator comparator for sorting elements @return ImmutableSortedSet instance or null if delegate is null
422 Creates an immutable sorted set from the given iterable of elements. @param elements input iterable
423 Creates an immutable sorted set from a collection of elements. @param comparator comparison function for sorting @param elements collection of elements to include in the set
424 Returns a sorted map of rows to columns with values.
425 Generates a string representation of this object. @return A human-readable string or null if not computed yet
426 Returns a synchronized version of the given sorted set multimap. @param multimap input multimap to synchronize
427 Reads input from a stream and returns as a string. @throws IOException if an I/O error occurs
428 Creates a compact linked hash map with an expected size. @param expectedSize anticipated number of entries
429 Creates a compact linked hash set from the given collection. @param collection input collection of elements
430 Creates a new empty TreeMultimap with natural ordering for keys and values.
431 Creates a TreeMultimap instance with custom comparators for keys and values. @param keyComparator comparator for ordering keys @param valueComparator comparator for ordering values
432 Checks if input sequence matches any of predefined patterns. @return true if sequence matches any pattern, false otherwise
433 Removes characters from a given sequence based on negation operation. @param sequence input character sequence
434 Replaces a sequence of characters with a replacement string. @param sequence CharSequence to modify @param replacement replacement string @return modified CharSequence or original if not found
435 Converts an InetAddress to a coerced IPv4 address, handling special cases and embedded IPv6 addresses. @param ip the input InetAddress @return Inet4Address object or null if not found
436 Creates a rate limiter with specified permits per second and warm-up period. @param permitsPerSecond maximum permits allowed per second @param warmupPeriod duration for initial warm-up before limiting kicks in
437 Returns an unmodifiable set of key-value entry pairs. @return Set of Entry objects containing keys and values.
438 Schedules a one-time execution of a Runnable command after a specified delay. @param command the task to be executed @param delay time to wait before executing the command @param unit time unit for the delay (e.g., seconds, milliseconds)
439 Builds a weighted cache with the given cache loader. @param loader CacheLoader instance for loading values
440 Builds a local cache instance with the current configuration.
441 Creates an ordered builder using the provided comparator. @param comparator function to determine order of elements
442 Creates a builder with elements in descending order. @return Builder instance with reversed ordering
443 Creates a builder with a natural ordering comparator. @return Builder instance with natural ordering
444 Creates a bidirectional enum map from the given key-value map. @param map input map of enums to enums
445 Creates an EnumHashBiMap from a given Map. @param map input map with enum keys and values
446 Replaces existing values associated with the specified key in this map. @param key the key to replace values for @param values new values to associate with the key @return this map, or null if the key is not present
447 Checks if two lists are permutations of each other. @param first first list @param second second list @return true if lists are permutations, false otherwise
448 Creates an empty multimap with object keys and values.
449 Creates a new ArrayListMultimap instance from the given Multimap. @param multimap existing Multimap to copy elements from
450 Creates an empty multimap with type parameters K and V. @return a newly created HashMultimap instance
451 Creates an empty LinkedList-based multimap.
452 Creates a LinkedListMultimap from an existing Multimap. @param multimap input multimap to copy
453 Creates a new linked hash multimap from an existing one. @param multimap source multimap
454 Builds and returns a mutable network instance.
455 Initializes a graph using an AbstractGraphBuilder. @param builder Graph configuration builder
456 Builds and returns an instance of StandardMutableValueGraph. @return a new instance of StandardMutableValueGraph
457 Puts all cells from the given table into this builder. @param table Table containing data to be added
458 Adds all key-value pairs from an iterable of entries. @param entries collection of entries to add @return this Builder instance for method chaining
459 Adds all entries from the given map to this builder. @param map input map containing key-value pairs
460 Adds multiple key-value pairs from the given iterable. @param entries iterable of entries to add @return this builder instance for method chaining
461 Creates a filtered view of the specified map with an additional filter. @param map original AbstractFilteredMap instance @param entryPredicate predicate to apply on each entry
462 Adds all ranges from the given RangeSet to this builder.
463 Returns a subset of ranges that intersect with the given range. @param range range to intersect with @return sub-range set or original range if fully contained, empty if not found
464 Creates a contiguous set of integers from the given range. @param lower inclusive lower bound @param upper exclusive upper bound
465 Creates a contiguous set of numbers in the range [lower, upper]. @param lower lowest value (inclusive) @param upper highest value (inclusive)
466 Creates a contiguous set of integers from an open range. @param lower lower bound (inclusive) @param upper upper bound (exclusive)
467 Creates a contiguous set of discrete values from the closed-open range [lower, upper). @param lower lower bound (inclusive) @param upper upper bound (exclusive)
468 Coalesces a range with a single point or another range. @param range original range @param value point to merge with
469 Adds a new node and returns its associated network connections. @param node the newly added node
470 Creates an immutable map by copying a given map's contents. @param map the original map to be copied
471 Retrieves a row from the map by its key. @param rowKey unique identifier for the row @return an empty map if not found or null
472 Returns the smallest element in this set that is greater than or equal to the specified element. @param e element to find a lower bound for @return Smallest element >= e or null if not found
473 Returns the largest element in the set that is less than or equal to the given value. @param e input value @return closest element in the set or null if not found
474 Creates an immutable list from an iterator. @param elements the source iterator
475 Builds an ImmutableRangeMap from sorted entries. @return RangeMap object or throws exception on overlapping ranges
476 Merges and sorts input ranges into a single immutable set. @return ImmutableRangeSet object or empty set if no ranges
477 Parses Java class path into a list of URLs. @return List of URLs representing the class path entries
478 Creates a list of method parameters.
479 Retrieves the set of throwable types for this token. @return Immutable list of TypeTokens representing exception types
480 Wraps a collection of tasks into an immutable list. @param tasks Collection of Callable tasks to wrap
481 Creates a sorted copy of the specified iterable. @param elements the input collection to sort @return a sorted ImmutableList or null if input is empty
482 Creates a sorted copy of the given iterable. @param comparator sorting order comparator @param elements input collection to be sorted @return sorted ImmutableList object
483 Creates an immutable sorted set from a given iterator of elements. @param comparator comparison function for sorting @param elements iterator over elements to include in the set @return ImmutableSortedSet object containing all elements
484 Creates an ImmutableMap from a sorted array of key-value pairs. @param n expected number of entries @param entryArray sorted array of Entry objects @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap or fallback implementation if overflow occurs
485 Retrieves the public suffix index from cache or recalculates it if not initialized. @return The public suffix index (0-based)
486 Retrieves the registry suffix index from cache or initializes it if not set. @return registry suffix index
487 Creates an ImmutableSortedMap from a collection of entries. @param comparator key comparison function @param sameComparator whether to use the provided comparator for sorting @param entries iterable of key-value pairs
488 Creates a copy of the given TreeBasedTable with same type parameters. @param table original table to be copied
489 Creates a Bloom filter with specified expected insertions. @param funnel funnel to serialize objects @param expectedInsertions estimated number of inserts
490 Returns a collector that finds the top K elements based on the given comparator. @param k number of top elements to find @param comparator comparison function for elements @return Collector that produces a list of top K elements
491 Retrieves the top K elements from an iterable. @param iterable input collection @param k number of elements to retrieve @return list of top K elements or null if not found
492 Returns the greatest K elements from an iterable. @param iterator iterable of elements @param k number of elements to find @return List of greatest K elements or empty list if not enough elements
493 Catches a specific exception type and returns a fallback value. @param exceptionType class of the exception to catch @param fallback function to execute if caught, returning result @param executor thread pool executor for asynchronous execution
494 Waits until the current operation has been stopped.
495 Waits until the stopped state is achieved. @param timeout maximum time to wait in specified units @param unit time unit (e.g. TimeUnit.SECONDS)
496 Returns a precomputed CharMatcher instance. @return precomputed CharMatcher object
497 Replaced by Files.asByteSource().hash() for efficient hashing. @param file input file to hash @param hashFunction hash function to apply
498 Moves a file from one location to another. @param from source file @param to destination file @throws IOException if move operation fails
499 Reads lines from a URL into a list. @param url the URL to read from @param charset the character set to use for reading
500 Maps a File to a mapped byte buffer in read-only mode. @param file input file to be mapped
501 Returns an exiting executor service with specified termination timeout. @param executor existing thread pool executor @param terminationTimeout duration to wait for tasks to complete @param timeUnit unit of time for termination timeout
502 Returns an exiting scheduled executor service with a specified termination timeout. @param executor Scheduled thread pool executor @param terminationTimeout time to wait before shutting down the executor @param timeUnit unit of time for the termination timeout
503 Adds a shutdown hook with a delay based on the specified timeout. @param service ExecutorService instance @param terminationTimeout duration of shutdown delay in nanoseconds
504 Reclaims a key-value entry from the hash table. @param entry Entry to reclaim @param hash Hash of the reclaimed key @return true if entry was successfully reclaimed, false otherwise
505 Removes a value reference from the map by key or hash. @param key unique key identifier @param hash hash code for key lookup @param valueReference ValueReference object to be removed @return true if removal was successful, false otherwise
506 Waits for the system to reach a healthy state.
507 Waits until the system is healthy or times out. @param timeout maximum duration to wait @param unit time unit for timeout
508 Returns a read-only map of service startup times.
509 Retrieves annotations of specified type from the current class. @param annotationType Class of desired annotations @return Array of annotations or empty array if none found
510 Creates an immutable sorted set from the given collection. @param elements input collection of elements
511 Returns a synchronized version of the input NavigableMap. @param navigableMap input map to synchronize
512 Wraps a File into a char source for reading. @param file the file to read from @param charset encoding of the file content @return string representation of the file content or null on error
513 Converts URL to string representation. @param url input URL @param charset character encoding (e.g. UTF-8)
514 Creates an empty CompactLinkedHashMap instance.
515 Creates a TreeMultimap from an existing Multimap instance. @param multimap the input Multimap to transform @return a new TreeMultimap with comparable keys and values
516 Creates a reentrant lock with the specified name and fairness policy. @param lockName unique lock identifier @param fair whether to use fair locking or not
517 Creates a ReentrantReadWriteLock instance with specified name and fairness. @param lockName unique lock identifier @param fair whether to use fair locking policy
518 Creates a map of LockGraphNode objects for each enum value in the given class. @param clazz Enum class to create nodes for @return Map of enum values to corresponding LockGraphNode objects
519 Validates a domain part by checking length, ASCII content, and character rules. @param part the domain part to validate @param isFinalPart whether this is the final part of the domain @return true if valid, false otherwise
520 Converts InetAddress to integer using IPv4 address. @param ip InetAddress object @return integer representation of the IP address or -1 if not found
521 Checks if the iterator contains the specified object. @param object the object to search for
522 Removes the specified object from the collection. @param object the object to remove, or null for no-op @return true if removed, false otherwise
523 Removes all elements from the current collection that are present in the given collection. @param collection collection of elements to remove @return true if any elements were removed, false otherwise
524 Retains all elements from the given Collection. @param collection Collection to filter from
525 Clears iterator and associated data.
526 Checks if the iterator contains no elements.
527 Returns an array representation of the collection.
528 Schedules a Runnable with a specified delay in the given unit. @param command the task to be executed @param delay duration of delay
529 Retrieves all subscribers for a given listener instance. @param listener target listener object @return multimap of event types to subscriber instances
530 Creates an induced subgraph from a given Network. @param network original network @param nodes subset of nodes to include in the subgraph @return MutableNetwork representing the induced subgraph
531 Creates a mutable copy of the given network. @param network original network to duplicate @return MutableNetwork object with same topology as input network
532 Creates a new mutable graph instance from this builder. @return A new StandardMutableGraph instance
533 Creates an induced subgraph containing specified nodes and their successors. @param graph original ValueGraph @param nodes subset of nodes to include in the subgraph @return MutableValueGraph representing the induced subgraph
534 Creates a deep copy of the given ValueGraph. @param graph original graph to be copied @return a new MutableValueGraph instance containing all nodes and edges from the original graph.
535 Adds all entries from the given map to the builder. @param map map containing key-value pairs to add @return updated Builder instance for method chaining
536 Adds all key-value pairs from a given map to the builder. @param map map containing entries to add @return this Builder instance for method chaining
537 Combines a filtered map with an additional filter. @param map the original filtered map @param entryPredicate the additional filter criterion @return a new filtered navigable map
538 Combines the filter from a SortedMap with an additional entry predicate. @param map original filtered sorted map @param entryPredicate predicate to apply to each entry @return new filtered sorted map
539 Filters a map by applying the given predicate to its keys. @param unfiltered original map @param keyPredicate key filter condition @return filtered map with matching keys or null if empty
540 Filters a map based on the provided predicate. @param unfiltered input map to be filtered @param entryPredicate predicate to determine filter criteria @return filtered Map or existing AbstractFilteredMap if applicable
541 Converts a stream to an immutable sorted map. @param comparator map key comparator @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements
542 Converts a collection to an immutable enum map. @param keyFunction function to extract key enum from input @param valueFunction function to extract map values from input
543 Converts a stream of objects to an immutable enum map. @param keyFunction maps each object to its corresponding enum key @param valueFunction maps each object to its associated value @param mergeFunction merges values for duplicate enum keys
544 Returns a map of type mappings for the given context type. @param contextType the type to generate mappings for @return immutable map of key-value pairs or empty if no mappings found
545 Concatenates multiple ByteSources into one. @param sources iterable of ByteSources to concatenate
546 Concatenates an iterator of char sources into a single char source. @param sources iterable collection of CharSource objects
547 Creates an immutable range set from the given iterable of ranges. @param ranges collection of ranges to include in the range set
548 Creates a new ImmutableSortedMultiset from an iterable of elements and a comparator. @param comparator comparison function for the multiset @param elements iterable of elements to include in the multiset @return ImmutableSortedMultiset instance or a copy if input is already sorted
549 Creates a deep copy of the given SortedMultiset. @param sortedMultiset multiset to be copied
550 Converts this collection to an immutable list. @return ImmutableList object containing all elements
551 Converts a stream into an immutable sorted set. @param comparator Comparator for sorting elements @return Collector that produces ImmutableSortedSet
552 Creates an immutable sorted set from the given iterator of elements. @param elements iterator yielding unique elements to include in the set
553 Builds a BiMap from the Builder's state or throws an exception if invalid. @return ImmutableBiMap object
554 Returns an immutable sorted map containing all entries up to but not including (or including) the specified key. @param toKey the boundary key @param inclusive whether to include the boundary key in the result @return ImmutableSortedMap object or null if input is invalid
555 Returns an immutable sorted map containing all entries greater than or equal to the specified key. @param fromKey key value to start inclusion at @param inclusive whether to include keys equal to the from key as well @return ImmutableSortedMap object or empty map if no entries match
556 Checks whether URL has public suffix. @return true if URL matches public suffix, false otherwise
557 Checks if a domain has a publicly recognized suffix. @return true if suffix is recognized, false otherwise
558 Checks if domain name is under a publicly registered suffix. @return true if under public suffix, false otherwise
559 Checks if the current domain is a top-level private domain (e.g. example.com).
560 Checks if registry suffix is enabled. @return true if registry suffix is enabled, false otherwise
561 Checks if a registry suffix is present. @return true if suffix found, false otherwise
562 Checks if the current domain name is under a registry suffix. @return true if registered under a suffix, false otherwise
563 Checks if top domain is under registry suffix. @return true if index is 1, false otherwise
564 Creates an immutable sorted map from the given entries and comparator. @param entries iterable of key-value pairs @param comparator for sorting keys @return ImmutableSortedMap instance or null if entries are null
565 Creates an immutable sorted map copy of the given sorted map. @param map the original sorted map
566 Creates an immutable copy of the set. @return non-null ImmutableSet containing all elements or empty set if size is 0
567 Collects and returns a set of raw types that can be assigned to the generic type T. @return Set of Class<? super T> representing raw types.
568 Removes the element at specified index and adjusts heap accordingly. @param index position of element to remove @return MoveDesc object describing changes or null if removed element is last
569 Computes the square root of a BigInteger using the specified rounding mode. @param x non-negative BigInteger value @param mode RoundingMode to apply in case of exactness ambiguity @return approximate or exact square root as BigInteger
570 Creates an immutable set from an iterator of elements. @param elements iterator containing the elements to be copied
571 Recursively scans a directory and its subdirectories for resources. @param directory the directory to scan @param packagePrefix prefix for resource names @param currentPath set of currently visited directories @param builder builder for ResourceInfo objects
572 Retrieves classpath entries from the given JAR file's manifest. @param jarFile the JAR file to extract classpath from @param manifest optional manifest to use; if null, returns empty set @return ImmutableSet of File objects representing classpath entries or an empty set if no entries found
573 Returns the raw type of the generic type, which is its first bound.
574 Finds the greatest of up to K elements in a collection. @param iterable input collection @param k maximum number of elements to consider @return List of greatest elements or an empty list if less than K elements are found
575 Converts specified duration to nanoseconds and awaits stopped state. @param timeout duration to wait before timing out
576 Retrieves an exiting executor service instance. @param executor ThreadPoolExecutor instance to wrap
577 Returns an exiting executor service with a specified termination timeout. @param executor existing thread pool executor @param terminationTimeout duration before shutting down the executor
578 Retrieves a scheduled executor service with exit handling. @param executor existing thread pool executor
579 Retrieves an existing scheduled executor service with a specified termination timeout. @param executor Scheduled thread pool executor @param terminationTimeout duration in nanoseconds before shutdown
580 Evicts entries from the segment to maintain size within bounds. @param newest the newest entry by weight
581 Awaits until the health check is successful or times out. @param timeout maximum duration to wait before throwing an exception
582 Returns a map of service to startup duration in milliseconds.
583 Fetches annotations of specified type from this element. @param annotationType Class of the annotations to search for @return Array of annotations found or null if none exist
584 Creates a new ReentrantLock with the specified name. @param lockName unique identifier for the lock
585 Creates a new Reentrant Read-Write Lock with the specified name. @param lockName unique identifier for the lock
586 Validates the syntax of a command by checking each part. @param parts list of command parts @return true if syntax is valid, false otherwise
587 Registers a listener by adding its subscriber methods to the corresponding event type. @param listener object with subscriber methods
588 Removes event subscriber registrations for the given listener. @param listener object to unregister from events
589 Creates an immutable network builder.
590 Creates an induced subgraph from the given nodes. @param graph parent graph @param nodes iterable of node identifiers to include @return MutableGraph representing the subgraph or null if invalid input
591 Creates a deep copy of the given graph. @param graph original graph to copy @return MutableGraph object representing the copied graph
592 Returns an immutable builder for the value graph. @return Builder for immutable ValueGraph
593 Combines filtered map and entry predicate to create a new filtered map. @param map original filtered map @param entryPredicate additional filter for entries @return new filtered BiMap instance
594 Filters a navigable map's entries using the provided predicate. @param unfiltered original map to filter @param entryPredicate predicate to apply to each entry @return filtered NavigableMap or null if input is invalid
595 Filters a sorted map based on the provided predicate. @param unfiltered input map to be filtered @param entryPredicate filter criteria for each entry @return filtered sorted map or null if input is not FilteredEntrySortedMap
596 Filters a map by applying the given predicate to its values. @param unfiltered original map @param valuePredicate predicate for filtering values @return new map with filtered values or null if all entries removed
597 Converts a stream of objects to an immutable map, applying the specified key and value functions. @param keyFunction maps each object to its unique key @param valueFunction maps each object to its associated value @param mergeFunction merges values for duplicate keys
598 Converts a collection of elements to an immutable range map. @param keyFunction function to extract the range key @param valueFunction function to extract the associated value
599 Creates a sorted multiset from the given iterable of elements. @param elements input iterable to be copied
600 Builds and returns an ImmutableSortedMultiset instance from existing sorted multiset data. @return ImmutableSortedMultiset object representing the built collection.
601 Creates a wildcard type that extends the given upper bound. @param upperBound the supertype of the wildcard type
602 Creates a WildcardType that is a supertype of the given Type, allowing any Object. @param lowerBound minimum type bound
603 Generates all ordered permutations of input elements. @param elements iterable collection of elements to permute @param comparator ordering comparator for the permutation order
604 Converts delegate iterable to a sorted, immutable list. @param comparator comparison function for sorting @return ImmutableList of elements in sorted order or null if not found
605 Creates an immutable copy of the specified collection. @param elements Collection to be copied
606 Builds and returns an immutable bi-map. This is a convenience method that simply calls {@link #buildOrThrow()}.
607 Builds an immutable map and throws any exception that occurs. @return ImmutableMap of K to V or null if build fails
608 Builds an immutable map keeping only the last entry. @return An empty map if no entries were kept
609 Returns an immutable sorted map containing all entries with keys less than the specified key. @param toKey upper bound of the returned map's key range
610 Returns a sub-map of this map, containing keys within the specified range. @param fromKey starting key @param fromInclusive whether starting key is inclusive @param toKey ending key @param toInclusive whether ending key is inclusive
611 Returns an immutable map containing all entries with keys greater than or equal to the specified key. @param fromKey key to start including in the returned map
612 Creates an immutable sorted map from the given entries. @param entries Iterable of key-value pairs
613 Creates an immutable sorted map from the given map, using natural order for keys. @param map input map to copy from
614 Creates an immutable sorted map from the given map and comparator. @param map map to copy @param comparator key comparator for sorting @return ImmutableSortedMap instance
615 Generates Cartesian product of input sets. @param sets collection of sets to combine @return set of lists representing all possible combinations
616 Removes the exact object from the queue. @param target Object to be removed @return true if removed, false otherwise
617 Removes and returns an element at specified index. @param index position of the element to remove
618 Creates an immutable set from the given iterable. @param elements collection of elements to be copied
619 Creates an Invokable for a constructor. @param constructor the Constructor to create an Invokable for
620 Checks if this type is a subtype of the given supertype. @param supertype the supertype to check against @return true if this type is a subtype, false otherwise
621 Creates an Invokable instance for the given Method. @param method the target method to invoke
622 Tries to expire entries based on the current timestamp. @param now current system time in milliseconds
623 Creates a new instance with explicit ordering for the given enum class and policy. @param enumClass Class of the enumeration to process @param policy Policy object used in processing
624 Registers an object with the subscribers list. @param object Object to be registered
625 Unregisters an object from subscription service. @param object Object to be unregistered
626 Returns an ImmutableGraph Builder instance.
627 Filters BiMap entries based on the provided predicate. @param unfiltered original BiMap @param entryPredicate predicate to filter entries by @return filtered BiMap or null if unfiltered is not a FilteredEntryBiMap
628 Filters keys from the input map based on the provided predicate. @param unfiltered original map to filter @param keyPredicate condition to apply to each key @return filtered NavigableMap or null if all entries removed
629 Filters a navigable map by retaining entries with values matching the given predicate. @param unfiltered original map to be filtered @param valuePredicate predicate to determine which values to keep @return filtered NavigableMap or null if input is null
630 Filters the keys of a sorted map based on a predicate. @param unfiltered input map to filter @param keyPredicate key filtering condition @return filtered SortedMap with matching keys
631 Filters a sorted map by a predicate on its values. @param unfiltered the original map to filter @param valuePredicate the condition for inclusion in the result @return a new sorted map with filtered entries or an empty map if all entries are removed
632 Creates an immutable sorted multiset from a collection of elements. @param comparator comparison function for sorting elements @param elements iterator over elements to include in the set
633 Creates an immutable set of location information from the given class loader. @param classloader Class loader to fetch location info for
634 Finds the first component type in a given bounds array. @param bounds array of potential bounds @return first class or array component type, or null if not found
635 Creates a new array type from the given component type. @param componentType the type of elements in the array
636 Generates all permutations of input elements in sorted order. @param elements iterable collection of comparable elements
637 Creates a new ImmutableMultiset from the given iterable of elements. @param elements iterable containing the elements to be copied into the multiset
638 Creates a read-only multiset from an iterator of elements. @param elements iterable collection of elements @return ImmutableMultiset object representing the copied data
639 Copies the multiset with elements ordered by highest count first. @param multiset input multiset to copy @return a new ImmutableMultiset instance
640 Generates all possible permutations of given collection's elements. @param elements input iterable to permute
641 Creates an immutable list from the given iterable. @param elements input collection
642 Creates an immutable copy of the given RangeSet. @param rangeSet input RangeSet to be copied
643 Creates an immutable sorted set from a given sorted set. @param sortedSet input sorted set @return ImmutableSortedSet instance or empty set if input is empty
644 Reads and returns a list of lines from the underlying stream. @return List<String> containing read lines or an empty list if none
645 Constructs an immutable map from the builder's results. @return non-empty map or empty map if build() method returned no mappings
646 Creates a multimap from map entries, with optional value sorting. @param mapEntries collection of key-value pairs where values are collections @param valueComparator (optional) comparator to sort values before adding to multimap @return ImmutableListMultimap or empty instance if input is empty
647 Builds an immutable map instance. Calls buildOrThrow() internally to perform actual construction.
648 Creates a multimap from map entries, filtering out empty value collections. @param mapEntries collection of key-value pairs with collection values @param valueComparator comparator for ordering values (optional) @return ImmutableSetMultimap or an empty one if input is empty
649 Converts a Properties object into an ImmutableMap of key-value pairs. @param properties input Properties object
650 Creates an index map from a collection of elements. @param list input collection @return ImmutableMap with element as key and index as value
651 Builds an immutable map of type instances from the builder's result. @return An ImmutableTypeToInstanceMap containing the built data.
652 Builds a TypeTable from the given mappings and user-supplied type variables. @param mappings map of type variable keys to their corresponding types
653 Converts an iterator of keys and a function to values into an immutable map. @param keys iterator of unique keys @param valueFunction function to compute corresponding values
654 Returns a subset of this map containing keys within the specified range. @param fromKey starting key (inclusive) @param toKey ending key (exclusive)
655 Converts a stream of objects to an immutable sorted map. @param comparator key comparison function @param keyFunction maps each object to its key @param valueFunction maps each object to its value @param mergeFunction merges values for duplicate keys @return ImmutableSortedMap<K, V>
656 Retrieves and removes the last element from the collection. @return the removed element, or null if empty.
657 Removes and returns the last element. @return Element removed or null if empty
658 Converts this object to an immutable set of elements. @return Set of elements or null if delegate is null
659 Checks if this TypeToken is a supertype of another. @param type the TypeToken to check against @return true if this token is a superclass, false otherwise
660 Checks if the given Type is a supertype of this Type. @param type Type to check @return true if given Type is a supertype, false otherwise
661 Checks if this token is a subtype of another TypeToken. @param type TypeToken to check against
662 Drains reference queues for map, handling key and value references separately.
663 Filters the keys of a BiMap based on a predicate. @param unfiltered input BiMap to filter @param keyPredicate function to test each key @return filtered BiMap with only matching keys
664 Filters entries in a bidirectional map based on the provided predicate for values. @param unfiltered input BiMap to filter @param valuePredicate predicate to evaluate each value @return filtered BiMap with updated key-value pairs
665 Creates a new sorted multiset from an iterator of elements. @param elements iterator containing elements to be copied
666 Transforms a Class to its corresponding TypeToken. @param cls the input Class
667 Converts this multimap to an immutable multiset. @return Multiset containing all elements from the original map
668 Builds an ImmutableMultiset from the underlying contents. @return ImmutableMultiset instance containing all elements.
669 Computes the Cartesian product of multiple lists. @param lists list of lists to combine @return a list containing all possible combinations as sublists
670 Parses a string into CacheBuilderSpec object. @param cacheBuilderSpecification string representation of cache builder specs
671 Converts this immutable collection to a list. @return List of elements or null if delegate is null
672 Retrieves a list of files in the specified directory. @param dir directory path to scan @return immutable list of file paths or empty if directory is invalid
673 Initializes InternetDomainName with normalized domain name. @param name the domain name to initialize from
674 Collects futures into a single future containing a list of values. @param futures iterable of ListenableFutures to collect @return ListenableFuture containing the collected list of values
675 Combines multiple ListenableFutures into a single FutureCombiner. @param futures iterable of futures to combine
676 Combines all given ListenableFutures to a single result, succeeding only if all input futures succeed. @param futures iterable of futures to combine
677 Converts a collection of potentially failed futures to a list of successful values. @param futures iterable of ListenableFutures potentially containing values of type V @return ListenableFuture containing the successful values as a list, or an empty list if all failed.
678 Converts iterable of ListenableFutures to array. @param futures iterable of futures @return array of futures or null if not found
679 Creates an immutable range set by taking the union of the given iterable ranges. @param ranges iterable collection of ranges to combine
680 Computes the intersection of two range sets. @param other the other range set to intersect with @return an immutable range set containing overlapping ranges
681 Computes the set difference between this range set and another. @param other the range set to subtract from this one @return a new immutable range set containing the differences
682 Converts a stream of elements into an immutable bi-map using the provided key and value functions. @param keyFunction function to extract key from each element @param valueFunction function to extract value from each element
683 Creates a copy of the provided map, converting it to an immutable instance map. @param map input map with class-S instances @return ImmutableClassToInstanceMap or newly created one if not already immutable
684 Creates a copy of the given multimap. @param multimap input multimap to copy @return ImmutableListMultimap instance or original if already immutable and not partial view
685 Builds an ImmutableMultimap from the builder state. @return ImmutableMultimap instance or empty if no entries
686 Merges a range of entries into the existing map. @param range merge range @param value new value for unmapped ranges (null to ignore) @param remappingFunction function to remap existing values
687 Builds an ImmutableSetMultimap from the internal builder state. @return ImmutableSetMultimap object or empty if no entries exist
688 Creates a unique index map from an iterator of values using the provided key function. @param values iterator of values to index @param keyFunction function to generate keys from values @return immutable map with unique keys and corresponding values
689 Generates all combinations of a given set size from the input set. @param set input set @param size desired combination size @return Set of Sets containing all combinations, or empty set if no combinations exist
690 Creates a deep copy of the given graph. @param graph original graph to be copied @return ImmutableGraph object containing the copied data or null if input is null
691 Creates a new TypeResolver instance with filtered type mappings. @param mappings map of type variable keys to their resolved types
692 Converts an iterable of keys to a map using the provided function to generate values. @param keys iterable of unique keys @param valueFunction function that generates values for the given key
693 Retrieves and removes the first element from this queue. @return The polled element or null if queue is empty.
694 Offers an element to the heap and returns whether the heap's size is within limits. @param element element to offer
695 Retrieves all ClassInfo objects from resources. @return immutable set of ClassInfo objects
696 Retrieves a set of top-level ClassInfo objects from resources. @return Set of ClassInfo objects or empty set if none found
697 Performs breadth-first traversal on a set of nodes, starting from the provided initial nodes. @param startNodes Iterable of initial nodes to begin traversal
698 Performs a depth-first pre-order traversal on the given nodes. @param startNodes iterable of starting nodes
699 Performs depth-first post-order traversal on the given nodes. @param startNodes iterable of starting node(s)
700 Scans resources from a set of files and builds an immutable set. @param scannedFiles collection of files to scan @return ImmutableSet of ResourceInfo objects
701 Returns a specialized invokable with the specified return type. @param returnType TypeToken representing the desired return type
702 Tries to lock and drain reference queues, releasing lock on failure.
703 Resolves a given Type object to its resolved form. @param type the Type object to resolve @return the resolved Type object or the original Type if not resolvable
704 Checks if the runtime type is compatible with the formal type. @param formalType the expected type @param declaration the type variable declaration @return true if types are compatible, false otherwise
705 Canonicalizes a type argument for a type variable. @param declaration the type variable to canonicalize against @param typeArg the type argument to canonicalize @return the canonicalized type argument
706 Creates a CacheBuilder instance from a cache specification string. @param spec cache specification string to parse and use as builder configuration.
707 Disables caching by setting maximum size to zero.
708 Creates an InternetDomainName object from a string representation. @param domain string representation of the domain name
709 Combines multiple ListenableFutures into an ordered list. @param futures Iterable of futures to combine @return Ordered list of futures or empty list if none provided
710 Computes the union of this range set and another. @param other RangeSet to combine with @return Union of ranges in both sets
711 Creates an immutable copy of the given multimap. @param multimap input multimap to copy @return ImmutableMultimap object or existing one if it's not a partial view
712 Builds and returns an ImmutableListMultimap instance.
713 Converts a stream of objects into an immutable map using specified key and value functions. @param keyFunction function to extract key from each object @param valueFunction function to extract value from each object
714 Creates a multimap with a single entry for the given key-value pair. @param k1 unique key @param v1 associated value
715 Creates a multimap with two key-value pairs. @param k1 first key @param v1 value associated with key1 @param k2 second key @param v2 value associated with key2 @return ImmutableSetMultimap instance containing the specified entries
716 Creates an Immutable Multimap with three key-value pairs. @param k1 key1 @param v1 value1 @param k2 key2 @param v2 value2 @param k3 key3 @param v3 value3
717 Creates a multimap with four key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @param k4 fourth key @param v4 value for k4 @return ImmutableSetMultimap instance
718 Creates an ImmutableSetMultimap with the specified key-value pairs. @param k1,k2,k3,k4,k5 keys @param v1,v2,v3,v4,v5 values
719 Creates an immutable multimap from the given iterable of key-value pairs. @param entries iterable of key-value entries to copy
720 Creates an immutable multimap copy from a given multimap. @param multimap the multimap to copy
721 Creates an indexed map from a collection of values. @param values iterable collection of values @param keyFunction function to extract keys from values @return ImmutableMap with unique indices or null if not found
722 Creates an ArrayTable instance with the given row and column keys. @param rowKeys iterable of unique row identifiers @param columnKeys iterable of unique column identifiers
723 Generates the power set of the given set. @param set input set @return a set containing all possible subsets of the original set
724 Creates an immutable table from a list of ordered cells. @param cellList list of cells with values @param rowSpace set of unique row identifiers @param columnSpace set of unique column identifiers @return Dense or Sparse ImmutableTable instance based on cell density
725 Builds an immutable graph from a mutable one. @return ImmutableGraph object representing the graph data
726 Creates an immutable copy of the given network. @param network original network to copy
727 Creates an immutable copy of the given ValueGraph. @param graph original graph to replicate @return ImmutableValueGraph instance or existing one if already immutable
728 Resolves type covariance by creating a TypeResolver with type mappings from the given context type. @param contextType the type for which to resolve covariance
729 Resolves type mappings from a given context type. @param contextType the type to resolve mappings for
730 Resolves type parameters for the given types. @param formal expected type @param actual actual type @return TypeResolver object
731 Converts the delegate iterable to an immutable map using a provided function. @param valueFunction function that maps each element to its map value @return ImmutableMap or null if not applicable (but see note)
732 Creates a Min-Max Priority Queue initialized with the given contents. @param initialContents iterable of elements to populate the queue
733 Adds an element to the collection. @param element object to be added
734 Retrieves top-level classes within the specified package. @param packageName unique package identifier @return ImmutableSet of ClassInfo objects for matching package
735 Recursively fetches topLevel classes whose names start with the given package name. @param packageName package name to filter by
736 Performs breadth-first search from the given starting node. @param startNode initial node to begin traversal
737 Performs depth-first pre-order traversal of graph starting from given node. @param startNode root node of traversal
738 Performs a depth-first post-order traversal of a graph starting from the given node. @param startNode the node to begin traversal from
739 Scans resources and returns an immutable set of ResourceInfo objects. @return Set of ResourceInfo objects
740 Constructs a classpath from the given class loader, scanning all resources. @param classloader ClassLoader to use when resolving resources @return ClassPath object containing resolved resource information
741 Returns an invokable instance with specified return type. @param returnType class of the expected return value
742 Retrieves the live value associated with a given entry. @param entry ReferenceEntry object @param now current time in milliseconds @return the live value (V) or null if expired or not found
743 Performs cleanup and locking operations before writing. @param now current timestamp
744 Resolves internal TypeVariables using a provided TypeTable for dependants. @param var TypeVariable to resolve @param forDependants TypeTable used for resolving dependent types @return resolved Type or original TypeVariable if not resolvable
745 Returns the generic return type of this method, or its raw Class if none specified.
746 Resolves runtime type and returns a serialized representation. @return TypeResolver result or null if failed
747 Creates a traverser for navigating directory hierarchies.
748 Creates a HostSpecifier from a valid string representation. @param specifier string containing the host specifier
749 Constructs the ancestral domain by clipping leading parts. @param levels number of levels to clip
750 Constructs a child domain name by appending the given parts to the current domain name. @param leftParts parts of the child domain name
751 Validates a domain name by attempting to parse it. @param name the name to validate @return true if valid, false otherwise
752 Converts a stream of objects to an immutable multimap. @param keyFunction maps each object to its key @param valuesFunction maps each object to a stream of values
753 Creates a multimap with a single entry. @param k1 key @param v1 value
754 Creates a multimap with two key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @return ImmutableListMultimap instance
755 Creates a Multimap with three key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @return Multimap with three entries
756 Creates a multimap with four entries. @param k1 key of first entry @param v1 value of first entry @param k2 key of second entry @param v2 value of second entry @param k3 key of third entry @param v3 value of third entry @param k4 key of fourth entry @param v4 value of fourth entry
757 Creates a multimap with the specified key-value pairs. @param k1 first key @param v1 first value @param k2 second key @param v2 second value @param k3 third key @param v3 third value @param k4 fourth key @param v4 fourth value @param k5 fifth key @param v5 fifth value
758 Creates a copy of the given multimap from its entries. @param entries iterable collection of key-value pairs
759 Creates a multimap index from an iterator of values using a key function. @param values iterator over values to be indexed @param keyFunction function to extract keys from values @return ImmutableListMultimap with indexed values
760 Adds parameters to the media type, overriding existing values if specified. @param attribute parameter name (e.g. "Accept-Language") @param values values for the specified parameter
761 Converts a stream of objects into an immutable multimap. @param keyFunction maps each object to its key @param valueFunction maps each object to its values
762 Computes and returns the inverse of this multimap. @return Inverse multimap or existing cached result if available
763 Marks the service manager as ready, throwing exception if services transitioned prematurely.
764 Returns multimap of services grouped by their corresponding states.
765 Creates an immutable map with unique keys from a delegate iterable. @param keyFunction function to extract keys from elements
766 Creates an ArrayTable instance from a given Table. @param table the input Table to convert @return ArrayTable instance or null if not compatible
767 Builds and returns an immutable network from the mutable network. @return ImmutableNetwork object representing the built network
768 Builds an immutable ValueGraph from the mutable instance. @return ImmutableValueGraph object
769 Captures and resolves the type token for a given class. @param declaringClass the class that declares the generic type
770 Creates an empty Min-Max Priority Queue of type T.
771 Creates a Min-Max priority queue with the given initial contents. @param initialContents iterable collection of elements to initialize the queue
772 Returns an immutable set of all nodes reachable from the given node in the graph. @param graph non-null graph containing the node @param node ID of the starting node
773 Retrieves a map entry for the specified key. @param key the lookup key or null to return null @return Entry object associated with the key, or null if not found
774 Checks if an entry is live based on its hash and current time. @param entry the entry to check @param now the current timestamp @return true if the entry is live, false otherwise
775 Inserts a loading value reference for the given key. @param key unique key identifier @param hash hash code of the key @param checkTime whether to check if refresh is still needed after acquiring the lock @return LoadingValueReference object or null if an existing entry exists and needs no refresh
776 Periodically cleans up resources based on read count threshold. @param none
777 Resolves a TypeVariable's bounds to their concrete types. @param var TypeVariable to resolve @param forDependants TypeTable for dependent types @return resolved Type or the original TypeVariable if no resolution is needed
778 Combines a callable with provided closeables and executes it on the specified executor. @param combiningCallable function to combine with closeables @param executor execution context @return ClosingFuture object representing combined result
779 Asynchronously calls an AsyncCombiningCallable with provided Executor. @param combiningCallable the callable to execute @param executor execution context @return ClosingFuture containing result and closeable resources
780 Parses a string into a HostSpecifier object. @param specifier input string to be parsed @throws ParseException if the input is invalid
781 Validates host specifier string. @param specifier host specifier to validate @return true if valid, false otherwise
782 Returns the internet domain's public suffix if present. @return PublicSuffix object or null if not set
783 Returns the top private domain in the hierarchy. @return InternetDomainName object representing the top private domain
784 Returns the registry suffix of the internet domain name. @return InternetDomainName object or null if not set
785 Returns the top domain under the current registry suffix. @return InternetDomainName object or null if not found
786 Retrieves the immediate parent domain. @return InternetDomainName object representing the parent domain or null if none exists
787 Converts a collection of objects to an immutable multimap. @param keyFunction function to extract key from each object @param valueFunction function to extract value from each object
788 Creates an immutable multimap with a single entry. @param k1 key @param v1 value
789 Creates an ImmutableMultimap with two key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2
790 Creates an ImmutableMultimap with the given key-value pairs. @param k1 first key @param v1 value for key k1 @param k2 second key @param v2 value for key k2 @param k3 third key @param v3 value for key k3
791 Creates an ImmutableMultimap from individual key-value pairs. @param k1,k2,k3,k4 keys @param v1,v2,v3,v4 values
792 Creates an ImmutableMultimap from a collection of key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3 @param k4 fourth key @param v4 value associated with k4 @param k5 fifth key @param v5 value associated with k5
793 Creates an immutable multimap from an iterable of key-value pairs. @param entries the input collection of entries
794 Returns an inverted multimap copy or computes a new one if not cached. @return Inverted Multimap object
795 Creates an indexed multimap from an iterable of values and a function to extract keys. @param values iterable of values @param keyFunction function to map each value to its corresponding key
796 Adds a single parameter to the media type. @param attribute name of the parameter @param value value of the parameter
797 Creates media type with specified parameters. @param parameters multimap of parameter key-value pairs
798 Creates a MediaType instance with the specified type and subtype. @param type the top-level media type (e.g., "text") @param subtype the sub-type of the media type (e.g., "plain")
799 Parses a MediaType string into its constituent parts. @param input the input MediaType string to parse
800 Initializes ServiceManager with a collection of services. If no services are provided, substitutes a placeholder service to ensure proper behavior. Adds listeners to each service. @param services iterable of services to manage
801 Converts a stream of objects to an immutable multimap. @param keyFunction maps each object to its key @param valuesFunction maps each object to a stream of its values
802 Resolves the given type into a TypeToken, while ensuring type safety in invariant contexts. @param type type to be resolved
803 Creates a min-max priority queue with natural ordering. @return MinMaxPriorityQueue instance
804 Loads user data asynchronously, returning the result or null if not found. @param key unique identifier @param hash cache hash @param loader CacheLoader instance @param checkTime whether to check timestamp @return loaded value or null
805 Retrieves and records cache statistics for the given key. @param key unique identifier @param hash hash code of the key @param loadingValueReference reference to the loading value operation @param newValue new value loaded from the cache loader @return loaded value or null if not found
806 Advances to the next external entry based on the provided reference entry. @param entry ReferenceEntry object to advance from @return true if successful, false otherwise
807 Checks if the map contains a specific value. @param value object to search for @return true if found, false otherwise
808 Indexes elements by applying a function to map each element to a unique key. @param keyFunction maps element to its corresponding key
809 Sets the media type's character set and returns a new MediaType instance. @param charset the character set (e.g. UTF-8) for this media type
810 Returns the media type with no parameters. @return MediaType object or new instance if original has parameters
811 Creates application media type with specified subtype. @param subtype subtype of the media type
812 Creates an audio media type with the specified subtype. @param subtype audio subtype (e.g. "mp3", "wav")
813 Creates font media type. @param subtype sub-type of font (e.g. "woff", "woff2")
814 Creates an image media type with specified subtype. @param subtype image subtype (e.g. jpeg, png)
815 Creates text media type with given subtype. @param subtype specific subtype of text media (e.g., "plain", "html")
816 Creates a video media type with specified subtype. @param subtype specific video subtype (e.g. mp4, avi)
817 Builds an Immutable Table from a collection of cells. @return ImmutableTable instance or throws exception if invalid
818 Resolves the generic superclass of this type. @return TypeToken for the superclass, or null if none exists
819 Resolves generic interfaces for the type. @return list of TypeTokens representing the generic interfaces
820 Resolves the most specific superclass of this type. @param superclass target superclass class @return the resolved TypeToken or null if not found
821 Loads all cached values for the specified keys using the provided CacheLoader. @param keys set of unique keys to load @param loader cache loader instance @return map of loaded key-value pairs or null if not found @throws ExecutionException on loading failure
822 Advances to the next entry in a linked chain, attempting to advance to it. @return true if successful, false otherwise
823 Builds an immutable table from internal state. @return built ImmutableTable object or throws exception on failure
824 Attempts to advance to the next entry in a table. @return true if successful, false otherwise
825 Resolves the type token for a given subclass. @param subclass Class<?> of the desired subtype
826 Creates a new immutable table from an existing Table instance. @param table the original table to copy
827 Converts a collection of objects to an immutable table. @param rowFunction function to extract row key @param columnFunction function to extract column key @param valueFunction function to extract table value @return ImmutableTable instance or null if empty input
