1 Returns the first element of this iterable, if any. @return Optional containing the element or null
2 Returns the last element of this iterable collection. @return Optional<@NonNull E> containing the last element or null if empty
3 Attempts to find the first element matching a predicate in an iterator. @param iterator input iterator @param predicate condition to match elements against @return first matching element, or empty Optional if not found
4 Sets the expected node count for graph construction. @param expectedNodeCount non-negative integer value
5 Configures the expected node count for the network. @param expectedNodeCount non-negative integer
6 Sets the expected edge count for the network. @param expectedEdgeCount non-negative integer value
7 Specifies the expected node count for the value graph. @param expectedNodeCount non-negative integer
8 Checks if an iterable contains at least one element matching a given predicate. @param iterable Iterable to search @param predicate Predicate function to evaluate elements against @return true if any element matches the predicate, false otherwise
9 Creates a predicate that checks for a specific pattern within CharSequence objects. @param pattern the pattern to be searched
10 Propagates unchecked Throwable if possible or if it's an instance of the given class. @param throwable nullable exception to propagate @param declaredType expected exception class
11 Retrieves and caches the flattened class hierarchy of the given concrete class. @param concreteClass class to retrieve hierarchy for
12 Returns a platform-specific ThreadFactory instance for the current environment. If running on Google App Engine with API classes, uses ThreadManager.currentRequestThreadFactory; otherwise, falls back to defaultThreadFactory().
13 Checks if this iterable collection contains a specified object. @param target the object to find in the iterable
14 Filters a filtered multimap based on an additional entry predicate. @param multimap underlying filtered multimap @param entryPredicate condition to apply to entries @return FilteredSetMultimap object or null if not found
15 Filters keys from a multimap using the provided predicate. @param unfiltered underlying multimap to filter @param keyPredicate predicate to select keys that conform to specific criteria @return FilteredKeyListMultimap object with filtered keys and values
16 Filters an iterable collection to only include elements of a specific type. @param type target class to check against @return FluentIterable containing filtered elements
17 Removes all elements from this set based on the provided iterable values. @param collection the iterable source of elements to remove @return true if any elements were removed, false otherwise
18 Initializes and populates an EnumMultiset instance with the given iterable of enum elements. @param elements Iterable of enum constants to add to the multiset
19 Creates a linked list instance with the specified iterable. @param elements Iterable of initial elements to add
20 Creates a new ArrayDeque from the given iterable of elements. @param elements Iterable of elements to initialize the deque with
21 Creates a concurrent linked queue initialized with the given iterable. @param elements Iterable of elements to initialize the queue with
22 Creates a linked blocking deque initialized with the given iterable. @param elements Iterable of elements to initialize the deque with
23 Creates a LinkedBlockingQueue initialized with elements from the given iterable. @param elements Iterable of initial elements
24 Creates a priority blocking queue from an iterable. @param elements Iterable of elements to populate the queue
25 Creates a priority queue initialized with the given iterable. @param elements Iterable of elements to populate the queue
26 Creates an EnumSet from the given iterable of enum elements. @param iterable Iterable of enum elements to include @param elementType Class of enum elements @return EnumSet containing all elements in the iterable
27 Creates a new concurrent hash set with the given iterable's elements. @param elements Iterable of elements to add
28 Creates a LinkedHashSet instance from an iterable of elements. @param elements Iterable of elements to add
29 Creates a new TreeSet instance populated with the given iterable elements. @param elements Iterable of elements to add
30 Converts iterable to a collection, preserving type. @param iterable input iterable
31 Creates a new ArrayList instance and populates it with elements from the given iterable. @param elements Iterable of elements to add
32 Creates a hash set from an iterable of elements. @param elements Iterable of elements to add
33 Checks if all elements in this iterable match a given predicate. @param predicate predicate function to apply to each element
34 Returns a list iterator starting at the specified index. @param start position of the iterator
35 Creates a sorted map view from a sorted set and key-value mapping function. @param set underlying sorted set of keys @param function function to map keys to values
36 Transform entries in a sorted map using the provided entry transformer. @param fromMap source map to transform @param transformer transformation function for key-value pairs @return transformed map with updated key-value pairs
37 Transforms the values of a map using a provided transformation function. @param fromMap source map to transform @param function transformation function for values @return transformed map with updated values
38 Updates the count of a specified element in the multiset. @param element nullable object to look up @param occurrences number of times to add or remove the element @return previous count value
39 Adds occurrences of an element to the multiset. @param element element to add @param occurrences number of times to add @return old count if updated, or new count if added
40 Transforms entries in a multimmap using the given transformation function. @param fromMap source multimap to transform @param transformer entry transformation function @return ListMultimap with transformed entries
41 Transforms values in a multimap using the provided function. @param fromMultimap source multimap to transform @param function value transformation function
42 Adds all elements from an iterable to the builder. @param elements Iterable of elements to be added
43 Adds all elements from the given collection to this multiset. @param self this multiset @param elements multiset containing elements to add
44 Checks if given value lies within this range.
45 Builds a Collector for transforming input elements into an ImmutableTable. @param rowFunction function to apply to each element, returning the row key @param columnFunction function to apply to each element, returning the column key @param valueFunction function to apply to each element, returning the table cell value @param tableSupplier supplier of the ImmutableTable to collect into
46 Escapes special characters in a string by converting them to their corresponding Unicode escape sequences. @param s input string @param index starting position in the string
47 Initializes a StandardNetwork instance from the provided builder and connection maps. @param builder network configuration builder @param nodeConnections map of node connections @param edgeToReferenceNode map of edges to reference nodes
48 Initializes a StandardValueGraph instance with the provided builder and node connections. @param builder AbstractGraphBuilder instance for graph configuration @param nodeConnections Map of nodes to their connections @param edgeCount total number of edges in the graph
49 Copies character data from a Readable source to an Appendable destination. @param from Readable source @param to Appendable destination @return total number of characters copied
50 Decodes a CharSequence into a byte array using checked decoding. @param chars input string sequence
51 Calculates the smallest power of two greater than or equal to a given BigInteger value. @param x input BigInteger value
52 Calculates the largest power of two that is less than or equal to the given BigInteger. @param x the input BigInteger
53 Creates an Invokable instance from a given constructor. @param constructor Constructor object to initialize with
54 Creates an Invokable instance from the given Java method. @param method Java method to create Invokable with
55 Completes an AbstractFuture by releasing waiters, interrupting the task if necessary, executing listeners, and handling DelegatingToFuture chains. @param param the AbstractFuture to complete @param callInterruptTask whether to interrupt the task before completing
56 Adds and updates atomic long value associated with a given key. @param key unique map key @param delta value to increment by
57 Atomically adds a value to the map associated with the given key. @param key unique map key @param delta value to add
58 Imports and stores all key-value pairs from given map. @param m map containing keys and long values to import
59 Initializes an instance of AbstractGraphBuilder with specified graph directionality. @param directed true if the graph is directed, false otherwise
60 Adds a listener to the queue with an associated executor. @param listener registered listener @param executor execution context
61 Performs forward conversion from type A to B with automatic null handling. @param a nullable object of type A to be converted
62 Initializes compact hash map with default size.
63 Initializes compact hash map with specified expected size. @param expectedSize initial capacity of the compact hash map
64 Initializes the set with the default capacity using the `init` method.
65 Initializes the set with an estimated size and triggers internal resizing. @param expectedSize initial capacity estimate
66 Returns the simplified class name. @return Class name without package or inner class information
67 Initializes multimap from an empty map. @param map empty map to initialize from
68 Creates a CustomMultimap from an empty multimap with a custom collection factory. @param map empty multimap to initialize from @param factory supplier for creating new collection instances
69 Creates an empty HashMultiset instance.
70 Creates an empty LinkedHashMultiset instance.
71 Creates an EnumMultiset instance for a specified enum class with given elements. @param elements iterable of initial elements to add @param type target enum class
72 Calculates the population standard deviation from the dataset. @return Standard deviation value or NaN if invalid
73 Calculates sample standard deviation using sample variance. @return sample standard deviation or NaN if invalid
74 Calculates population standard deviation based on variance. @return Standard deviation or NaN if sum of squares is invalid
75 Calculates the sample standard deviation based on accumulated data. @return Sample standard deviation or NaN if invalid
76 Creates a matcher that negates the matches of any characters in the given sequence. @param sequence input character sequence
77 Creates a case conversion converter to specified target format. @param targetFormat desired output case format
78 Composes this converter with a given forward converter to create a bidirectional conversion. @param secondConverter forward converter from type B to C
79 Returns the reverse converter instance. @return Converter instance for reversing data or null if not initialized
80 Creates a string converter for the specified enum class. @param enumClass Enum class to convert between string and constants
81 Creates a converter from a given BiMap. @param bimap bidirectional map for data conversion
82 Compares this ForwardingList instance with the given object. @param object nullable object to validate (may be a List)
83 Creates a new instance of the ConcurrentHashMultiset with given elements. @param elements iterable of initial elements to add @return populated ConcurrentHashMultiset instance
84 Joins array elements to an Appendable with customizable separator. @param appendable target Appendable @param parts array of elements to join @return the modified Appendable or throws IOException if occurs
85 Appends iterable elements to a StringBuilder with customizable separator. @param builder target StringBuilder @param parts iterable of elements to append
86 Joins iterable elements into a single string with customizable separator. @param parts iterator of elements to join @return the joined string or throws IOException if occurs
87 Joins map entries into a string representation. @param map input map to be joined
88 Generates a string representation of the cache specification. @return Parsable string containing the object's properties and values
89 Generates a string representation of the MapMaker instance by including its configurable parameters. @return A formatted string containing the object's properties and values
90 Generates a string representation of the CacheBuilder object by iterating over its name-value pairs. @return A formatted string containing the object's properties and values
91 Initializes the MapMakerInternalMap instance with given parameters. @param builder MapMaker configuration object @param entryHelper InternalEntryHelper to manage key-value pairs
92 Converts a Java Util Optional to an Optional instance. @param javaUtilOptional the Optional instance to convert, or null if absent @return Optional<T> or null if input is null
93 Constructs a HostAndPort instance from host and port values. @param host network host address @param port associated port number
94 Constructs a HostAndPort instance from the given host string, without considering any associated port. @param host input host string
95 Retrieves an element from the given iterable at a specified non-negative index. @param iterable iterable to access @param position index of desired element
96 Creates a deep copy of this BloomFilter instance. @return A new BloomFilter object with identical configuration
97 Acquires permits at a controlled rate, waiting for specified time if not available. @param permits number of permits to acquire @return wait time in seconds until permits are available
98 Tries to acquire a single permit within the specified time window. @param timeout maximum allowed wait time in nanoseconds @return true if permit can be acquired, false otherwise
99 Tries to acquire one permit within the given time window. @param timeout maximum allowed wait time in the specified unit @param unit unit of time for the timeout value (e.g. TimeUnit.SECONDS) @return true if a single permit can be acquired, false otherwise
100 Tries to acquire a specified number of permits with a default time window. @param permits number of permits to validate
101 Tries to acquire a single permit within a time window.
102 Tries to acquire a specified number of permits within a given time window. @param permits number of permits to validate @param timeout maximum allowed wait time in nanoseconds @return true if permits can be acquired, false otherwise
103 Attempts to acquire a lock with specified time constraints. @param time duration of lock request @param unit TimeUnit object specifying the unit of time @return true if lock acquired, false otherwise
104 Initializes AbstractService with default state.
105 Verifies the queue's integrity by checking each level. @return true if all levels are intact, false otherwise
106 Configures and returns a CacheBuilder instance with specified settings. @param initialCapacity non-negative integer value for cache capacity @param maximumSize non-negative integer size limit @param maximumWeight non-negative value for cache weight @param concurrencyLevel positive integer value for concurrency level @param keyStrength cache key strength (Weak) @param valueStrength cache value strength (Soft or Weak) @param recordStats flag to record cache statistics @param writeExpirationDuration non-negative time duration for write expiration @param accessExpirationDuration positive time span for access expiration @param refreshDuration positive time duration for refresh after write @return CacheBuilder instance with updated configuration
107 Tries to create a map with weak keys using the provided MapMaker. @param mapMaker instance of MapMaker
108 Verifies if the current service state matches the specified expected state. @param expected desired service state (STARTING, STOPPING, or RUNNING)
109 Retrieves value at specified row and column indices. @param rowIndex index of row @param columnIndex index of column @return V object or null if not found
110 Sets a value at the specified row and column indices. @param rowIndex index of the row @param columnIndex index of the column @param value new value to set (may be null) @return old value or null if not previously set
111 Retrieves an element at the specified index from this immutable double array. @param index index to retrieve (validated against collection size)
112 Retrieves an integer element at the specified index from the immutable array. @param index index of the desired element
113 Retrieves an element from this immutable array by its index. @param index index of the desired element
114 Searches for the first matching character in a sequence starting from a specified position. @param sequence CharSequence to search @param start index where searching begins (must be valid)
115 Initializes iterator with collection size and position. @param size target collection size @param position current index within the collection
116 Creates a ByteArrayDataInput instance from a byte array slice. @param bytes source byte array @param start starting index of the slice
117 Verifies a UTF-8 encoded byte sequence is well-formed. @param bytes the byte array to check @param off starting index in the bytes array @param len length of the byte sequence to verify
118 Converts an object array to a specified type array. @param src source object array @param offset starting index @param len length of the new array @param dst destination array (will be resized if necessary) @return the converted array or null if src is null
119 Creates a copy of the specified object array segment. @param elements original object array @param offset starting index @param length number of elements to copy
120 Writes bytes from this hash code to the given destination array. @param dest byte array to store the hash code @param offset starting index in the destination array @param maxLength maximum number of bytes to write @return actual number of bytes written
121 Encodes a byte array into a string representation using the current encoding scheme. @param bytes input byte array @param off starting index within the array @param len length of the encoded substring
122 Reads bytes from an InputStream into a byte array. @param in input stream @param b target byte array @param off starting index in the byte array @param len number of bytes to read, or -1 for all remaining bytes @return actual number of bytes read
123 Reverses a specified segment of the input boolean array. @param array the input boolean array @param fromIndex starting index of the segment to reverse @param toIndex ending index of the segment to reverse
124 Reverses a portion of the byte array within the specified range. @param array the byte array to manipulate @param fromIndex starting index of the section to reverse (inclusive) @param toIndex ending index of the section to reverse (exclusive)
125 Reverses a character array within the specified range. @param array input character array @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
126 Reverses a portion of the specified array. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
127 Reverses a subarray within the given array. @param array array to reverse @param fromIndex starting index of the subarray @param toIndex ending index of the subarray (exclusive)
128 Returns a subarray of this immutable double array from the specified start index to end index. @param startIndex starting index of the subarray (inclusive) @param endIndex ending index of the subarray (inclusive)
129 Returns a subarray of integers within the specified range. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive)
130 Returns a subarray from the current immutable array starting at {@code startIndex} up to (but not including) {@code endIndex}. @param startIndex starting index of the subarray (inclusive) @param endIndex ending index of the subarray (exclusive)
131 Reverses a portion of the given integer array in-place. @param array the input array to modify @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
132 Reverses a portion of the given array. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
133 Reverses a portion of the given short array. @param array input array @param fromIndex starting index for reversal (inclusive) @param toIndex ending index for reversal (exclusive)
134 Sorts a subarray of unsigned bytes in ascending order. @param array the byte array to sort @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
135 Sorts the specified byte array in descending order within the given range. @param array the byte array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
136 Sorts a subarray of unsigned integers in ascending order. @param array the input array @param fromIndex starting index of the subarray @param toIndex ending index of the subarray
137 Sorts an unsigned integer subarray in descending order. @param array the input array @param fromIndex start index of the subarray @param toIndex end index of the subarray
138 Sorts a subset of the unsigned long array in ascending order. @param array input array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
139 Sorts the specified range of an unsigned long array in descending order. @param array array to sort @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
140 Filters elements from the unfiltered collection based on the provided predicate. @param unfiltered original collection of elements @param predicate criteria to filter elements by
141 Creates a Splitter for splitting based on a single character separator. @param separator the character to split on
142 Initializes an instance with default values.
143 Initializes a Finalizer instance with specified finalizable reference class, queue, and phantom reference. @param finalizableReferenceClass Class of the finalizable reference @param queue Queue for processing and cleanup of references @param frqReference Phantom reference that started this finalizer
144 Initializes an empty Builder instance.
145 Creates an empty ImmutableMultimap Builder instance.
146 Initializes an empty Builder instance.
147 Initializes an empty ForwardingSortedMultiset instance.
148 Initializes an empty ForwardingDeque instance.
149 Initializes an empty ForwardingBlockingQueue instance.
150 Initializes an empty ForwardingSortedSet instance with default behavior.
151 Initializes an empty ForwardingNavigableMap instance.
152 Creates an unmodifiable BiMap instance from a given bidirectional map. @param bimap the underlying BiMap to be made unmodifiable
153 Creates a new instance of MutableClassToInstanceMap with an empty class-instance map.
154 Creates a MutableClassToInstanceMap instance from a given class-instance map. @param backingMap nullable map of classes to their instances
155 Creates an empty immutable type-safe mapping instance.
156 Initializes an empty ForwardingSortedSetMultimap instance.
157 Creates an unmodifiable view of a given multimap. @param delegate original Multimap instance @return UnmodifiableMultimap wrapper, or the original if already unmodifiable
158 Returns an immutable view of the given table. @param table underlying table data structure
159 Adapts a standard Future into a ListenableFuture in the given thread pool executor. @param future standard Java Future instance @param executor Executor for listener callbacks @return ListenableFuture object or existing one if already adapted
160 Retrieves cached value by key if present. @param key unique cache key @return cached value or null if not found
161 Retrieves cached value or loads new one using provided callable. @param key unique cache key @param valueLoader callback to load value if not in cache
162 Retrieves all cached values for the given non-null key set. @param keys iterable of non-null key objects @return immutable map of cached values or empty map if none found
163 Stores a cached entry with the given key and value. @param key unique cache identifier @param value cached data to store
164 Adds all entries from the provided map to this cache. @param m map of key-value pairs to store
165 Invalidates all cache entries with specified keys. @param keys collection of cache key(s) to invalidate
166 Creates a new cache entry with the given key and reference information. @param segment associated cache segment @param key associated key @param hash key hash value @param next optional next entry in linked structure (optional)
167 Creates a new cache entry with the given key and reference information. @param segment associated segment @param key associated key @param hash key hash value @param next optional next entry in linked structure (optional)
168 Creates a new cache entry with the given key and reference information. @param segment caching segment @param key associated key @param hash key hash value @param next optional next entry in linked structure
169 Creates a new reference entry within the specified cache segment. @param segment local cache segment @param key unique identifier for the entry @param hash entry hash value @param next optional next entry in access or write queues (may be null)
170 Creates a new cache entry with the specified parameters. @param segment Segment instance @param key unique cache key @param hash entry hash value @param next next entry in access or write queues (may be null)
171 Creates a new reference entry within the specified cache segment. @param segment cache segment where the entry will be created @param key associated key for this entry @param hash entry hash value @param next next entry in access or write queues (may be null)
172 Sets the value for a given cache entry with specified key and timestamp. @param entry cached entry to update @param key unique identifier @param value new value to set @param now current timestamp
173 Returns the size of the underlying iterable delegate. @return The number of elements in the iterable collection
174 Calculates total edge count by summing node degrees and dividing by 2. @return estimated edge count
175 Converts InputStream to byte array. @param in input stream @return byte array containing the input data or throws IOException if an error occurs.
176 Fetches specified number of bytes from InputStream. @param in input stream @param expectedSize total length of the combined buffer @return byte array containing the input data or throws exception if too large
177 Initializes an instance of AbstractBiMap with provided forward and inverse mappings. @param forward The forward map @param backward The inverse map
178 Removes all values associated with the specified key. @param key unique identifier to remove
179 Replaces values associated with a given key, adding new values and removing old ones. @param key unique identifier to update @return updated collection of values or null if removed
180 Removes all values associated with the specified key. @param key unique identifier to remove
181 Retrieves a sorted set view for the specified key. @param key unique identifier
182 Returns string representation of this collection. @return string representation of the underlying collection
183 Converts this map to a human-readable string representation.
184 Creates a new HashMap instance with the specified expected size. @param expectedSize anticipated number of entries
185 Checks whether a directed or undirected graph contains a cycle. @param graph the input graph to analyze
186 Creates a HashBasedTable with expected rows and cells per row. @param expectedRows number of table rows @param expectedCellsPerRow anticipated cell count per row
187 Creates a linked hash map with the specified expected size. @param expectedSize anticipated number of entries
188 Creates a map with the specified expected size based on the current element order type. @param expectedSize anticipated number of entries
189 Creates a HashSet with specified initial capacity based on expected size. @param expectedSize anticipated number of entries
190 Creates a linked hash set with specified expected size. @param expectedSize anticipated number of entries
191 Initializes ServiceManagerState with a collection of services and sets their initial state to NEW. @param services collection of services to be managed
192 Returns the first entry in the sorted multiset. @return First Entry object or null if empty
193 Returns the last entry in descending order. @return Last Entry object or null if empty
194 Retrieves the first entry from the sorted multiset, removing it upon retrieval. @return First Entry object or null if empty
195 Retrieves and removes the last entry in descending order. @return Entry object or null if empty
196 Returns a set of entries in this multiset. @return Set of Multiset.Entry objects
197 Returns a set of entries in this multiset. @return Set of Multiset.Entry objects
198 Creates a new TreeRangeSet instance and adds all ranges from the given RangeSet. @param rangeSet input RangeSet to merge into the newly created set
199 Creates a TreeRangeSet instance and adds an iterable of ranges. @param ranges collection of ranges to add
200 Returns this multimap's backing sorted map.
201 Retrieves the set of cells within this table. @return Set of Cell objects or creates a new one if not initialized
202 Delegates table value retrieval to superclass implementation. @return collection of table values
203 Creates a reversed ordering instance from the current range. @return GeneralRange object with inverted bounds
204 Creates a cell with specified row key, column key, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value stored cell value
205 Returns an immutable set of unique elements in this multiset.
206 Adds a new immutable map entry with the given key and value. @param key unique key identifier @param value associated value
207 Creates an immutable map with two key-value pairs. @param k1 first unique key @param v1 associated value for k1 @param k2 second unique key @param v2 associated value for k2
208 Creates an immutable map with three key-value pairs. @param k1 unique identifier for the first key @param v1 associated value for the first key @param k2 unique identifier for the second key @param v2 associated value for the second key @param k3 unique identifier for the third key @param v3 associated value for the third key
209 Creates an immutable map with four key-value pairs. @param k1 unique key identifier @param v1 associated value @param k2 unique key identifier @param v2 associated value @param k3 unique key identifier @param v3 associated value @param k4 unique key identifier @param v4 associated value
210 Creates an immutable map from five key-value pairs. @param k1 unique key identifier @param v1 associated value @param k2 unique key identifier @param v2 associated value @param k3 unique key identifier @param v3 associated value @param k4 unique key identifier @param v4 associated value @param k5 unique key identifier @param v5 associated value
211 Creates an immutable map with six entries from the provided key-value pairs. @param k1 unique key identifier @param v1 associated value @param k2 unique key identifier @param v2 associated value @param k3 unique key identifier @param v3 associated value @param k4 unique key identifier @param v4 associated value @param k5 unique key identifier @param v5 associated value @param k6 unique key identifier @param v6 associated value
212 Creates an immutable map from a set of key-value pairs. @param k1 unique key identifier 1 @param v1 associated value 1 @param k2 unique key identifier 2 @param v2 associated value 2 @param k3 unique key identifier 3 @param v3 associated value 3 @param k4 unique key identifier 4 @param v4 associated value 4 @param k5 unique key identifier 5 @param v5 associated value 5 @param k6 unique key identifier 6 @param v6 associated value 6 @param k7 unique key identifier 7 @param v7 associated value 7
213 Creates an immutable map with up to 8 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8 unique keys @param v1,v2,v3,v4,v5,v6,v7,v8 associated values
214 Creates an ImmutableMap from a fixed set of key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8,k9 unique keys @param v1,v2,v3,v4,v5,v6,v7,v8,v9 associated values
215 Creates an ImmutableMap with up to 10 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8,k9,k10 unique keys @param v1,v2,v3,v4,v5,v6,v7,v8,v9,v10 associated values
216 Creates an immutable map entry from the given Entry. @param entry existing entry to reuse
217 Adds a key-value pair to the multimap. @param entry a pre-existing Entry object
218 Adds all provided key-value pairs to the multimap. @param entries iterable collection of Entries to add
219 Adds an Entry to the multimap using its key and value. @param entry a pre-existing Entry object
220 Filters a sorted set based on the provided predicate. @param unfiltered original sorted set of elements @param predicate criteria to filter elements by @return filtered sorted set or null if input is invalid
221 Trims the compact hash map to its optimal size based on current entries and load factor.
222 Trims the compact hash set to its optimal size based on the number of elements. If the internal arrays already meet the requirements, no resizing is performed. Otherwise, it creates a new hash flooding resistant delegate set with the correct table size, updates the existing entries accordingly, and assigns the new delegate set as the backing array.
223 Checks if the range is empty (i.e., lower and upper bounds are equal).
224 Compares this range with another for equality. @param object the other range to compare @return true if this range is equal to the given one, false otherwise
225 Adds an element at the end of the underlying list. @param element element to be added
226 Returns a basic iterator instance via delegation to the underlying list implementation.
227 Returns a list iterator for this list at index 0. @return ListIterator object at position 0
228 Retrieves the first AVL node that meets the range criteria. @return The first matching AvlNode or null if not found
229 Creates a new instance of the HashBasedTable from an existing Table. @param table source table to populate the new HashBasedTable with
230 Creates a new TreeBasedTable with natural ordering for rows and columns.
231 Creates a TreeBasedTable with specified row and column comparators. @param rowComparator comparator for sorting rows @param columnComparator comparator for sorting columns
232 Creates a new HashBiMap instance with the specified expected size. @param expectedSize estimated number of hash table entries
233 Creates an instance of the Builder class for constructing immutable bi-maps.
234 Initializes an instance of the immutable map builder.
235 Returns a builder with entries ordered naturally.
236 Initializes builder with a specified comparator for sorting map entries. @param comparator Comparator instance to order map entries
237 Creates a builder with reversed ordering.
238 Creates an immutable map with a single key-value pair. @param k1 unique key @param v1 associated value
239 Returns the inverse mapping of the stored key-value pairs.
240 Returns an instance of the Builder class.
241 Initializes the Builder with a specified comparator for ordering elements. @param comparator the Comparator to apply when sorting elements
242 Returns a builder initialized with a comparator in descending order.
243 Returns a builder with a natural ordering for comparable elements.
244 Returns an immutable list with elements in reversed order. @return a new ImmutableList instance or the original if size is 1 or less
245 Extracts immutable list of characters from input string. @param string input string to process
246 Creates an immutable list with a single element. @param e1 nullable object to validate and store
247 Retrieves a set of key-value pairs as immutable entries.
248 Creates an immutable set with a single element. @param e1 non-null element to be included in the set
249 Retrieves the character set associated with this media type. @return Optional<Charset> instance containing the charset or empty if absent
250 Stops all managed services asynchronously.
251 Checks if all managed services are running.
252 Creates a set builder with an initial capacity based on the specified size. @param expectedSize target number of elements in the set
253 Adds all entries from a given Multimap. @param multimap source multimap to copy entries from @return Builder instance for method chaining
254 Throws a custom file system exception if deletion fails, wrapping the original IOExceptions. @param path the input file system path @param exceptions collection of IOExceptions to include in the exception
255 Concatenates multiple iterators into a single iterator. @param inputs variable-length array of iterators to be concatenated
256 Retrieves the first matching entry in the map for a given object. @param key object to search for @return E object associated with the given key or null if not found
257 Triggers non-locked cleanup of the segment based on read operations. @param none
258 Checks if the map contains a given key. @param key the object to search for @return true if the key is present, false otherwise
259 Returns a view of the map's portion of key-value pairs between the specified fromKey and toKey. @param fromKey lower bound of keys in the returned submap @param toKey upper bound of keys in the returned submap
260 Computes map differences between two maps, considering equivalence relation. @param left first map to compare @param right second map to compare against @param valueEquivalence equivalence relation for values
261 Computes map differences between two maps, considering equivalence relation. @param left first map to compare @param right second map to compare against @return SortedMapDifference object with differing values or types
262 Initializes the EventBus instance with the given identifier and executor. @param identifier unique identifier for the event bus @param executor thread pool executor to manage event handling tasks
263 Initializes the EventBus instance with a default identifier and the given executor, dispatcher, and exception handler. @param executor thread pool executor to manage event handling tasks @param subscriberExceptionHandler handler for exceptions that may occur during event processing
264 Initializes the EventBus instance with the given thread pool executor. @param executor thread pool executor to manage event handling tasks
265 Initializes the EventBus instance with the given identifier and default executor. @param identifier unique identifier for the event bus
266 Initializes the EventBus instance with a default identifier and per-thread queued dispatching. @param exceptionHandler handler for exceptions that may occur during event processing
267 Finds minimum child node index. @param index current node index
268 Finds the minimum grandchild of a given heap node. @param index current node index @return index of the minimum grandchild or -1 if not found
269 Returns the last element in the queue (minimum value). @return Element object or null if empty
270 Bubbles up an element at the specified index in the heap, ensuring heap properties are maintained. @param index position of the element within the heap @param x element to be inserted or updated
271 Checks if the multiset contains a specified element. @param object object to search for
272 Adds an occurrence of an element to this multiset. @param element the element to add
273 Removes specified elements from the multiset. @param element object to be removed
274 Clears all elements from the underlying multiset.
275 Counts occurrences of a given element in the multiset. @param object target element to search for @return count of occurrences or 0 if not found
276 Computes the hash code based on underlying multiset entries. @return Hash code value
277 Returns a string representation of this multiset using its entries.
278 Converts this collection to an array of specified type. @param array target array; may be resized or filled
279 Returns the last element from the set's view in descending order. @return the last element or null if empty
280 Returns a view of the navigable set as a sorted subset within a specified range. @param fromElement starting element (inclusive) @param toElement ending element (exclusive)
281 Returns the lower bound of this set. @param e element to find lower bound for
282 Retrieves the floor element from the set, i.e., the largest element less than or equal to the specified value. @param e the value to find the floor for @return the floor element or null if not found
283 Returns a view of elements up to but not including the specified element. @param toElement element to set as upper bound
284 Returns the least element greater than or equal to the specified value. @param e target value
285 Retrieves the next element greater than or equal to the specified value. @param e lower bound element @return next higher element or null if not found
286 Creates a subset view of elements within the specified range. @param fromElement lower bound element @param fromInclusive whether to include the fromElement in the result @param toElement upper bound element @param toInclusive whether to include the toElement in the result
287 Returns a view of elements greater than or equal to the specified fromElement. @param fromElement lower bound element
288 Returns a sorted set of unique row keys.
289 Returns a sorted map of rows to their respective column maps. @return Sorted map of rows (R) to maps of columns (C) to values (V)
290 Returns a synchronized deque from the given underlying deque. @param deque the deque to synchronize
291 Initializes ArrayBasedCharEscaper with a mapping and character range. @param replacementMap map of characters to their escaped representations @param safeMin minimum safe character value @param safeMax maximum safe character value
292 Converts character escape mappings to an Escaper instance. @return Escaper object wrapping character mapping table
293 Creates a new instance of ArrayBasedUnicodeEscaper from a replacement map and safety settings. @param replacementMap Map of characters to their replacements @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters (optional)
294 Creates a hash code instance from the given byte array. @param bytes nullable byte array to validate and store
295 Creates a HashCode instance from the given hexadecimal string. @param string input hexadecimal string
296 Combines multiple hash codes into a single hash code. @param hashCodes iterable of hash codes to combine @return combined hash code or null if input is invalid
297 Combines multiple unordered hash codes into a single instance. @param hashCodes iterable collection of hash code instances @return combined HashCode object or null if invalid input
298 Creates HMAC-MD5 hash function with the specified key. @param key secret key for hashing operations
299 Generates HMAC-SHA1 hash function with the provided secret key. @param key byte array representing the secret key for hashing
300 Generates an HMAC SHA-256 hash function instance using a provided byte array as the secret key. @param key byte array containing the secret key for hashing operations
301 Creates an HMAC SHA-512 hash function instance with the specified secret key. @param key byte array representing the secret key
302 Wraps a byte array into a ByteSource instance. @param b input byte array
303 Wraps a character sequence into a CharSource object. @param charSequence input character data (string or char sequence)
304 Writes multiple lines to the output stream using the system's default line separator. @param lines iterator over CharSequence objects
305 Writes multiple lines to the output stream using the default line separator. @param lines iterator over CharSequence objects
306 Reads a BloomFilter instance from an InputStream. @param in input stream to read from @param funnel Funnel instance for deserializing elements @return populated BloomFilter instance or throws IOException if failed
307 Calculates the mean of a stream of numbers from an iterable. @param values iterator over Number objects @return calculated mean value or NaN if invalid input
308 Computes the base-2 logarithm of a double value with specified rounding mode. @param x input double value @param mode RoundingMode to apply when result is not an integer power of two @return int logarithmic result, or modified result if rounding applied
309 Detects hash flooding by checking for consecutive null elements in the hash table. @param hashTable array of objects representing the current hash table
310 Offers an element to the TopKSelector and updates the threshold accordingly. @param elem the offered element
311 Creates a case-insensitive alphabet by duplicating upper and lower case mappings. @return A new Alphabet object with the updated character set
312 Creates a TopKSelector for the least K elements. @param k number of least elements to select (must be >= 0 and <= Integer.MAX_VALUE / 2) @param comparator object for sorting elements
313 Creates a TopKSelector for the greatest K elements based on the provided comparator. @param k number of top elements to select (must be >= 0 and <= Integer.MAX_VALUE / 2) @param comparator object for sorting elements
314 Constructs a linear transformation from two points. @param x2 second point's x-coordinate @param y2 second point's y-coordinate @return LinearTransformation object representing the line through the two points
315 Calculates the least squares fit linear transformation for paired statistics. @return The calculated linear transformation
316 Returns the least squares fit linear transformation based on accumulated data. @return LinearTransformation object representing the best-fit line
317 Checks whether a number is prime using various optimized algorithms. @param n the number to test for primality @return true if n is prime, false otherwise
318 Calculates the base-10 logarithm of a BigInteger value. @param x input BigInteger @param mode rounding mode to apply (e.g. UNNECESSARY, FLOOR, CEILING) @return log10(x) as an int, or throws an assertion error if invalid
319 Computes the binomial coefficient (n choose k). @param n input value @param k input value
320 Computes the arithmetic mean of a dataset. @param values iterable over numerical data points
321 Adds a paired data point to the accumulator and updates statistics. @param x first data point value @param y second data point value
322 Accumulates multiple data points from an iterable. @param values collection of numerical values to be added
323 Accumulates multiple data points from an iterator. @param values iterator over numerical values to be added
324 Accumulates statistical metrics from the provided Stats object. @param values input data to accumulate
325 Accumulates statistical metrics from another dataset. @param values StatsAccumulator instance containing data points to add
326 Selects the kth smallest element in the given numerical array within the specified range. @param required index of the desired element (0-based) @param array input numerical array @param from start index of the search range (inclusive, 0-based) @param to end index of the search range (inclusive, 0-based)
327 Adds all elements from the given DoubleStream to this Builder. @param stream input double stream
328 Adds all double values from the specified iterable, ensuring sufficient capacity. @param values collection of double values to add
329 Adds all integers from the given IntStream. @param stream stream of integers to be added
330 Adds all integers from an iterable collection to the builder's internal array. @param values collection of integers to be added
331 Adds all long values from a given LongStream to the builder. @param stream input stream of long values
332 Reads the object's state from an ObjectInputStream and initializes the AtomicDoubleArray with values read from the stream.
333 Adds all long values from the specified iterable, ensuring sufficient internal storage capacity. @param values Collection of long integers to be added
334 Tries to parse a string representation of an integer value in base 10. @param string string representation of the integer value @return parsed Integer value or null if invalid input
335 Constructs an UnsignedInteger from a string representation in base 10. @param string input string to parse
336 Divides this unsigned long value by another and returns the result. @param val divisor
337 Converts an unsigned long value to a string representation in the specified radix. @param x unsigned long value @param radix base of the number system (must be between Character.MIN_RADIX and Character.MAX_RADIX)
338 Computes product of 'a' and 'b' under modulus 'm'. @param a first multiplicand @param b second multiplicand @param m modulus value
339 Computes the square of 'a' under modulus 'm'. @param a value to be squared @param m modulus value
340 Computes the remainder of unsigned long division. @param val dividend value @return remainder value
341 Parses an unsigned long integer from a string representation. @param string string to parse
342 Compares this ForwardingMapEntry with another Entry for equality. @param object the other entry to compare
343 Computes the hash code by combining the hash codes of the key and value. @return standard hash code
344 Returns a string representation of this map entry in key-value format. @return Key-value pair as a concatenated string
345 Checks if this type token represents an array. @return true if it's an array, false otherwise
346 Creates a listening executor service decorator around the given executor. @param delegate underlying executor service
347 Creates a decorated ScheduledExecutorService instance, either using the given delegate if it's already a ListeningScheduledExecutorService or wrapping it with a ScheduledListeningDecorator. @param delegate underlying executor service
348 Invokes any of the supplied tasks, returning at most one result. @param executorService executor service instance @param tasks collection of callable tasks to be executed @param timed whether to wait for a specific time or indefinitely @param timeout maximum time to wait in specified unit @param unit time unit for timeout @return result of the first task that completes, or null if all fail @throws InterruptedException if interrupted while waiting @throws ExecutionException if an exception occurs during execution @throws TimeoutException if timed operation exceeds specified timeout
349 Executes the given async combiner using the specified executor. @param combiner asynchronous task to be executed @param executor thread pool for executing the combiner @return ListenableFuture representing the result of the execution
350 Executes a combiner function on aggregated futures. @param combiner callable task to combine futures' results @param executor thread pool for execution @return ListenableFuture containing combined result or null if all must succeed and any fails
351 Verifies the acquisition order of a lock against a given policy. @param policy Lock acquisition policy @param acquiredLock The lock that has been acquired by this thread
352 Reloads cached value associated with the given key. @param key unique cache identifier @param oldValue previous value (for comparison) @return ListenableFuture containing the updated value or null if not found
353 Returns a future representing the task's status. @return ListenableFuture containing status information
354 Submits an asynchronous task for execution with specified executor. @param callable asynchronous operation to be executed @param executor executor to use for task execution @return non-cancellation propagating future of the task result
355 Retrieves a future value while handling exceptions with the specified class. @param validator GetCheckedTypeValidator instance for validation @param future Future object containing the result @param exceptionClass Class of the exception to instantiate on failure @return Retrieved value or throws an exception if retrieval fails @throws X instantiated exception object
356 Retrieves a future value while throwing checked exceptions for any failures. @param future the Future object to get from @param exceptionClass Class of the exception to instantiate on failure @param timeout maximum time in specified unit to wait for result @param unit time unit of timeout value @throws X instantiated exception object if operation fails
357 Releases the monitor, signaling next waiting thread if still holding the lock.
358 Awaits for a specified condition to be satisfied, with optional signal before waiting. @param guard condition being waited for @param nanos timeout in nanoseconds, or -1 for no timeout @param signalBeforeWaiting whether to signal next waiter before waiting @return true if condition is satisfied, false on timeout
359 Creates a TimeoutFuture with a specified timeout period and delegates asynchronous task execution. @param delegate the underlying future to be managed @param time the duration of the timeout in the given unit @param unit the unit of measurement for the timeout period @param scheduledExecutor the executor service used for scheduling tasks
360 Schedules async operation with specified delay. @param callable asynchronous operation to be executed @param delay time before execution in the given unit (converted from Duration) @param executorService scheduling service @return ListenableFuture representing scheduled task
