1 Specifies the ordering of the generated table's rows.
2 Specifies the ordering of the generated table's columns.
3 Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries will not be de-duplicated. <p>Callers must ensure that the source {@code iterables} are in non-descending order as this method does not sort its input. <p>For any equivalent elements across all {@code iterables}, it is undefined which element is returned first. @since 11.0
4 Returns the index in {@code iterator} of the first element that satisfies the provided {@code predicate}, or {@code -1} if the Iterator has no such elements. <p>More formally, returns the lowest index {@code i} such that {@code predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no such index. <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. Otherwise, the iterator will be set to the element which satisfies the {@code predicate}. @since 2.0
5 Uses a {@link TreeSet} ordered by the specified comparator to store value collections. <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator} is not serializable.
6 Uses an {@link EnumSet} to store value collections.
7 Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all elements that are contained in either backing set. Iterating over the returned set iterates first over all the elements of {@code set1}, then over each element of {@code set2}, in order, that is not contained in {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
8 Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains all elements that are contained by both backing sets. The iteration order of the returned set matches that of {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}. <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of the two sets. If you have reason to believe one of your sets will generally be smaller than the other, pass it first. Unfortunately, since this method sets the generic type of the returned set based on the type of the first set passed, this could in rare cases force you to make a cast, for example: {@snippet : Set<Object> aFewBadObjects = ... Set<String> manyBadStrings = ... // impossible for a non-String to be in the intersection SuppressWarnings("unchecked") Set<String> badStrings = (Set) Sets.intersection( aFewBadObjects, manyBadStrings); } <p>This is unfortunate, but should come up only very rarely.
9 Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2} may also contain elements not present in {@code set1}; these are simply ignored. The iteration order of the returned set matches that of {@code set1}. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
10 Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set contains all elements that are contained in either {@code set1} or {@code set2} but not in both. The iteration order of the returned set is undefined. <p>Results are undefined if {@code set1} and {@code set2} are sets based on different equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}. @since 3.0
11 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
12 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
13 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
14 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
15 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
16 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
17 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
18 Returns the start position of the first occurrence of the specified {@code target} within {@code array}, or {@code -1} if there is no such occurrence. <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array, i, i + target.length)} contains exactly the same elements as {@code target}. @param array the array to search for the sequence {@code target} @param target the array to search for as a sub-sequence of {@code array}
19 Creates a new {@linkplain Guard guard} for this monitor. @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied isSatisfied()}) @since 21.0 (but only since 33.4.0 in the Android flavor)
20 Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code false} for {@code boolean} and {@code '\0'} for {@code char}. For non-primitive types and {@code void}, {@code null} is returned.
21 Returns a joiner with the same behavior as this one, except automatically substituting {@code nullText} for any provided null elements.
22 Use {@link MoreObjects#toStringHelper(Object)} to create an instance.
23 Returns the value of each present instance from the supplied {@code optionals}, in order, skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are evaluated lazily. <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's {@code Optional} class; use {@code optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead. <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead. @since 11.0 (generics widened in 13.0)
24 Splits {@code sequence} into string components and makes them available through an {@link Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead. @param sequence the sequence of characters to split @return an iteration over the segments split from the parameter
25 Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended with as many copies of {@code padChar} as are necessary to reach that length. For example, <ul> <li>{@code padStart("7", 3, '0')} returns {@code "007"} <li>{@code padStart("2010", 3, '0')} returns {@code "2010"} </ul> <p>See {@link java.util.Formatter} for a richer set of formatting capabilities. @param string the string which should appear at the end of the result @param minLength the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned. @param padChar the character to insert at the beginning of the result until the minimum length is reached @return the padded string
26 Returns a string, of length at least {@code minLength}, consisting of {@code string} appended with as many copies of {@code padChar} as are necessary to reach that length. For example, <ul> <li>{@code padEnd("4.", 5, '0')} returns {@code "4.000"} <li>{@code padEnd("2010", 3, '!')} returns {@code "2010"} </ul> <p>See {@link java.util.Formatter} for a richer set of formatting capabilities. @param string the string which should appear at the beginning of the result @param minLength the minimum length the resulting string must have. Can be zero or negative, in which case the input string is always returned. @param padChar the character to append to the end of the result until the minimum length is reached @return the padded string
27 Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage: <pre> for (Foo foo : foos) { try { foo.bar(); } catch (BarException | RuntimeException | Error t) { failure = t; } } if (failure != null) { throwIfInstanceOf(failure, BarException.class); throwIfUnchecked(failure); throw new AssertionError(failure); } </pre> @since 20.0
28 Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage: <pre> for (Foo foo : foos) { try { foo.bar(); } catch (RuntimeException | Error t) { failure = t; } } if (failure != null) { throwIfUnchecked(failure); throw new AssertionError(failure); } </pre> @since 20.0
29 Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and will not reflect any subsequent changes to the cause chain. <p>Here's an example of how it can be used to find specific types of exceptions in the cause chain: <pre> Iterables.filter(Throwables.getCausalChain(e), IOException.class)); </pre> @param throwable the non-null {@code Throwable} to extract causes from @return an unmodifiable list containing the cause chain starting with {@code throwable} @throws IllegalArgumentException if there is a loop in the causal chain
30 Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link CacheLoader#reload} using {@code executor}. <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such as {@linkplain #reload the default implementation}. @since 17.0
31 Returns a {@code RemovalListener} which processes all eviction notifications using {@code executor}. @param listener the backing listener @param executor the executor with which removal notifications are asynchronously executed
32 Returns a view of all mappings that have the given column key. If the column key isn't in {@link #columnKeySet()}, an empty immutable map is returned. <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key with the corresponding value in the table. Changes to the returned map will update the underlying table, and vice versa. @param columnKey key of column to search for in the table @return the corresponding map from row keys to values
33 Returns a view of all mappings that have the given row key. If the row key isn't in {@link #rowKeySet()}, an empty immutable map is returned. <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the column key with the corresponding value in the table. Changes to the returned map will update the underlying table, and vice versa. @param rowKey key of row to search for in the table @return the corresponding map from column keys to values
34 Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code function}.
35 Returns a {@code Spliterator} filtered by the specified predicate.
36 Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method throws a {@code ClassCastException} or {@code NullPointerException}.
37 Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method throws a {@code ClassCastException} or {@code NullPointerException}.
38 Returns {@code true} if each element in {@code iterable} after the first is greater than or equal to the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.
39 Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i> greater than the element that preceded it, according to the specified comparator. Note that this is always true when the iterable has fewer than two elements.
40 Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less than all other values, and orders the rest using {@code valueComparator} on the contained value. @since 22.0 (but only since 33.4.0 in the Android flavor)
41 Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater than all other values, and orders the rest using {@code valueComparator} on the contained value. @since 22.0 (but only since 33.4.0 in the Android flavor)
42 @since 12.0
43 @since 12.0
44 Adds the given element to this queue. If the queue is currently full, the element at the head of the queue is evicted to make room. @return {@code true} always
45 Construct a fluent iterable from another fluent iterable. This is obviously never necessary, but is intended to help call out cases where one migration from {@code Iterable} to {@code FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}. @deprecated instances of {@code FluentIterable} don't need to be converted to {@code FluentIterable}
46 Adds {@code element} to the {@code ImmutableList}. @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
47 Specifies the ordering of the generated multimap's keys. @since 8.0
48 Specifies the ordering of the generated multimap's values for each key. @since 8.0
49 Adds {@code element} to the {@code ImmutableMultiset}. @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
50 Adds a number of occurrences of an element to this {@code ImmutableMultiset}. @param element the element to add @param occurrences the number of occurrences of the element to add. May be zero, in which case no change will be made. @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation would result in more than {@link Integer#MAX_VALUE} occurrences of the element
51 Adds or removes the necessary occurrences of an element such that the element attains the desired count. @param element the element to add or remove occurrences of @param count the desired count of the element in this multiset @return this {@code Builder} object @throws NullPointerException if {@code element} is null @throws IllegalArgumentException if {@code count} is negative
52 Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset} whose elements are the result of applying {@code elementFunction} to the inputs, with counts equal to the result of applying {@code countFunction} to the inputs. <p>If the mapped elements contain duplicates (according to {@code comparator}), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element. @since 22.0
53 @since 12.0
54 @since 12.0
55 Returns an unmodifiable view of {@code iterable}.
56 Simply returns its argument. @deprecated no need to use this @since 10.0
57 Removes and returns the first matching element, or returns {@code null} if there is none.
58 Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}. <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable} is empty. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements. <p>To cycle over the iterable {@code n} times, use the following: {@code Iterables.concat(Collections.nCopies(n, iterable))} <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Stream.generate(() -> iterable).flatMap(Streams::stream)}.
59 Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}. <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.
60 Returns a view containing the result of applying {@code function} to each element of {@code fromIterable}. <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer contains the corresponding element. <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection}, consider {@link Lists#transform} and {@link Collections2#transform}. <p><b>{@code Stream} equivalent:</b> {@link Stream#map}
61 Returns a view of the supplied iterable that wraps each generated {@link Iterator} through {@link Iterators#consumingIterator(Iterator)}. <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined. Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}. <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable} is not thread-safe. @param iterable the iterable to wrap @return a view of the supplied iterable that wraps each generated iterator through {@link Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators that return and consume the queue's elements in queue order @see Iterators#consumingIterator(Iterator) @since 2.0
62 Returns an unmodifiable view of {@code iterator}.
63 Simply returns its argument. @deprecated no need to use this @since 10.0
64 Traverses an iterator and removes every element that belongs to the provided collection. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param removeFrom the iterator to (potentially) remove elements from @param elementsToRemove the elements to remove @return {@code true} if any element was removed from {@code iterator}
65 Removes every element that satisfies the provided predicate from the iterator. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param removeFrom the iterator to (potentially) remove elements from @param predicate a predicate that determines whether an element should be removed @return {@code true} if any elements were removed from the iterator @since 2.0
66 Traverses an iterator and removes every element that does not belong to the provided collection. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @param removeFrom the iterator to (potentially) remove elements from @param elementsToRetain the elements to retain @return {@code true} if any element was removed from {@code iterator}
67 Adds all elements in {@code iterator} to {@code collection}. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @return {@code true} if {@code collection} was modified as a result of this operation
68 Returns an iterator that cycles indefinitely over the elements of {@code iterable}. <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable} is empty. <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit {@code break} or be certain that you will eventually remove all the elements.
69 Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate {@code retainIfTrue}.
70 Returns {@code true} if every element returned by {@code iterator} satisfies the given predicate. If {@code iterator} is empty, {@code true} is returned.
71 Returns the first element in {@code iterator} that satisfies the given predicate; use this method only when such an element is known to exist. If no such element is found, the iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator, Predicate, Object)} instead. @throws NoSuchElementException if no element in {@code iterator} matches the given predicate
72 Returns a view containing the result of applying {@code function} to each element of {@code fromIterator}. <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding element.
73 Returns a view of the supplied {@code iterator} that removes each element from the supplied {@code iterator} as it is returned. <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator will fail on the first call to {@code next}. The returned {@link Iterator} is also not thread-safe. @param iterator the iterator to remove and return elements from @return an iterator that removes and returns elements from the supplied iterator @since 2.0
74 Clears the iterator using its remove method.
75 Adapts an {@code Enumeration} to the {@code Iterator} interface. <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection using {@link Collections#list}. <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.
76 Simply returns its argument. @deprecated no need to use this @since 10.0
77 Creates an {@code EnumMap} instance. @param type the key type for this map @return a new, empty {@code EnumMap}
78 Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation throws an {@link UnsupportedOperationException}. This also has the side effect of redefining {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation of equals. @param entry the entry for which to return an unmodifiable view @return an unmodifiable view of the entry
79 Returns a view of an entry transformed by the specified transformer.
80 Views an entry transformer as a function from entries to entries.
81 Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code NullPointerException}.
82 Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and {@code NullPointerException}.
83 Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code NullPointerException}.
84 Performs the given action for all key-value pairs contained in this multimap. If an ordering is specified by the {@code Multimap} implementation, actions will be performed in the order of iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller. <p>To loop over all keys and their associated value collections, write {@code Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}. @since 21.0
85 Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in sorted order. <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be cast to a {@link java.util.SortedMap}. <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator} is not serializable.
86 Uses an {@link EnumMap} to map keys to value collections. @since 16.0
87 Simply returns its argument. @deprecated no need to use this @since 10.0
88 Simply returns its argument. @deprecated no need to use this @since 10.0
89 Simply returns its argument. @deprecated no need to use this @since 10.0
90 Runs the specified action for each distinct element in this multiset, and the number of occurrences of that element. For some {@code Multiset} implementations, this may be more efficient than iterating over the {@link #entrySet()} either explicitly or with {@code entrySet().forEach(action)}. @since 21.0
91 {@inheritDoc} <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer} correspondingly many times, though not necessarily sequentially.
92 Simply returns its argument. @deprecated no need to use this @since 10.0
93 Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of {@code multiset1} followed by the members of the element set of {@code multiset2} that are not contained in {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 14.0
94 Returns an unmodifiable view of the intersection of two multisets. In the returned multiset, the count of each element is the <i>minimum</i> of its counts in the two backing multisets, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 2.0
95 Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of {@code multiset1} followed by the members of the element set of {@code multiset2} that are not contained in {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 14.0
96 Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the count of each element is the result of the <i>zero-truncated subtraction</i> of its count in the second multiset from its count in the first multiset, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the same element appearing consecutively. <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are). @since 14.0
97 Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code o}. @since 10.0
98 Delegate implementation which cares about the element type.
99 For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one occurrence of {@code e} in {@code multisetToModify}. <p>Equivalently, this method modifies {@code multisetToModify} so that {@code multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) - occurrencesToRemove.count(e))}. <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit sometimes more efficient than, the following: {@snippet : for (E e : occurrencesToRemove) { multisetToModify.remove(e); } } @return {@code true} if {@code multisetToModify} was changed as a result of this operation @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)
100 An implementation of {@link Multiset#retainAll}.
101 Simply returns its argument. @deprecated no need to use this
102 Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code numElements} elements are not available, it will wait for them up to the specified timeout. @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up, in units of {@code unit} @param unit a {@code TimeUnit} determining how to interpret the timeout parameter @return the number of elements transferred @throws InterruptedException if interrupted while waiting
103 Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but with a different behavior in case it is interrupted while waiting. In that case, the operation will continue as usual, and in the end the thread's interruption status will be set (no {@code InterruptedException} is thrown). @param q the blocking queue to be drained @param buffer where to add the transferred elements @param numElements the number of elements to be waited for @param timeout how long to wait before giving up, in units of {@code unit} @param unit a {@code TimeUnit} determining how to interpret the timeout parameter @return the number of elements transferred
104 Returns {@code true} if {@code value} is within the bounds of this range. For example, on the range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)} returns {@code false}.
105 Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator. <p><b>Note:</b> if mutability is not required, use {@code ImmutableSortedSet.orderedBy(comparator).build()} instead. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead, use the {@code TreeSet} constructor directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code Comparator} to mean "natural ordering," whereas this factory rejects null. Clean your code accordingly. @param comparator the comparator to use to sort the set @return a new, empty {@code TreeSet} @throws NullPointerException if {@code comparator} is null
106 Returns a stream in which each element is the result of passing the corresponding element of each of {@code streamA} and {@code streamB} to {@code function}. <p>For example: {@snippet : Streams.zip( Stream.of("foo1", "foo2", "foo3"), Stream.of("bar1", "bar2"), (arg1, arg2) -> arg1 + ":" + arg2) } <p>will return {@code Stream.of("foo1:bar1", "foo2:bar2")}. <p>The resulting stream will only be as long as the shorter of the two input streams; if one stream is longer, its extra elements will be ignored. <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want to consider using {@link #forEachPair} instead of this method. <p><b>Performance note:</b> The resulting stream is not <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a>. This may harm parallel performance.
107 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indices in the stream. For example, {@snippet : mapWithIndex( Stream.of("a", "b", "c"), (e, index) -> index + ":" + e) } <p>would return {@code Stream.of("0:a", "1:b", "2:c")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
108 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indexes in the stream. For example, {@snippet : mapWithIndex( IntStream.of(10, 11, 12), (e, index) -> index + ":" + e) } <p>...would return {@code Stream.of("0:10", "1:11", "2:12")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
109 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indexes in the stream. For example, {@snippet : mapWithIndex( LongStream.of(10, 11, 12), (e, index) -> index + ":" + e) } <p>...would return {@code Stream.of("0:10", "1:11", "2:12")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
110 Returns a stream consisting of the results of applying the given function to the elements of {@code stream} and their indexes in the stream. For example, {@snippet : mapWithIndex( DoubleStream.of(0.0, 1.0, 2.0) (e, index) -> index + ":" + e) } <p>...would return {@code Stream.of("0:0.0", "1:1.0", "2:2.0")}. <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> if and only if {@code stream} was efficiently splittable and its underlying spliterator reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list. <p>The order of the resulting stream is defined if and only if the order of the original stream was defined.
111 @since 28.1
112 Returns a tree traverser that uses the given function to navigate from a node to its children. This is useful if the function instance already exists, or so that you can supply a lambda expressions. If those circumstances don't apply, you probably don't need to use this; subclass {@code TreeTraverser} and implement its {@link #children} method directly. @since 20.0 @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a lambda, these methods have exactly the same signature.
113 Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal. That is, each node's subtrees are traversed after the node itself is returned. <p>No guarantees are made about the behavior of the traversal when nodes change while iteration is in progress or when the iterators generated by {@link #children} are advanced. @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has the same behavior.
114 Returns an unmodifiable iterable over the nodes in a tree structure, using post-order traversal. That is, each node's subtrees are traversed before the node itself is returned. <p>No guarantees are made about the behavior of the traversal when nodes change while iteration is in progress or when the iterators generated by {@link #children} are advanced. @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which has the same behavior.
115 Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on. <p>No guarantees are made about the behavior of the traversal when nodes change while iteration is in progress or when the iterators generated by {@link #children} are advanced. @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the same behavior.
116 Add a new mapping from an index to an object to the escaping.
117 Adds a replacement string for the given input character. The specified character will be replaced by the given string whenever it occurs in the input, irrespective of whether it lies inside or outside the 'safe' range. @param c the character to be replaced @param replacement the string to replace the given character @return the builder instance @throws NullPointerException if {@code replacement} is null
118 Returns the Unicode code point of the character at the given index. <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)} this method will never fail silently when encountering an invalid surrogate pair. <p>The behaviour of this method is as follows: <ol> <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown. <li><b>If the character at the specified index is not a surrogate, it is returned.</b> <li>If the first character was a high surrogate value, then an attempt is made to read the next character. <ol> <li><b>If the end of the sequence was reached, the negated value of the trailing high surrogate is returned.</b> <li><b>If the next character was a valid low surrogate, the code point value of the high/low surrogate pair is returned.</b> <li>If the next character was not a low surrogate value, then {@link IllegalArgumentException} is thrown. </ol> <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is thrown. </ol> @param seq the sequence of characters from which to decode the code point @param index the index of the first character to decode @param end the index beyond the last valid character to decode @return the Unicode code point for the given index or the negated value of the trailing high surrogate character at the end of the sequence
119 Creates a new DeadEvent. @param source object broadcasting the DeadEvent (generally the {@link EventBus}). @param event the event that could not be delivered.
120 Handles the given exception thrown by a subscriber with the given context.
121 Invokes the subscriber method. This method can be overridden to make the invocation synchronized.
122 @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for broadcasting a new event based on the error. @param event The event object that caused the subscriber to throw. @param subscriber The source subscriber context. @param subscriberMethod the subscribed method.
123 Simply returns its argument. @deprecated no need to use this
124 Simply returns its argument. @deprecated no need to use this
125 Simply returns its argument. @deprecated no need to use this
126 Visits the next node from the top iterator of {@code horizon} and returns the visited node. Null is returned to indicate reaching the end of the top iterator. <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure. (Note, however, that the callers of {@code visitNext()} often insert additional iterators into {@code horizon} between calls to {@code visitNext()}. This causes them to receive additional values interleaved with those shown above.)
127 Creates an input stream that hashes using the given {@link HashFunction} and delegates all data read from it to the underlying {@link InputStream}. <p>The {@link InputStream} should not be read from before or after the hand-off.
128 Creates a new writer that appends everything it writes to {@code target}. @param target target to which to append output
129 Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.
130 Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code CharSource}.
131 Creates a new reader wrapping the given character sequence.
132 Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not close or flush the reader. <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific types. CharBuffer has poor performance when being written into or read out of so round tripping all the bytes through the buffer takes a long time. With these specialized types we can just use a char array. @param from the object to read from @param to the object to write to @return the number of characters copied @throws IOException if an I/O error occurs
133 Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or flush the reader or writer. <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific types. CharBuffer has poor performance when being written into or read out of so round tripping all the bytes through the buffer takes a long time. With these specialized types we can just use a char array. @param from the object to read from @param to the object to write to @return the number of characters copied @throws IOException if an I/O error occurs
134 Discards {@code n} characters of data from the reader. This method will block until the full amount has been skipped. Does not close the reader. @param reader the reader to read from @param n the number of characters to skip @throws EOFException if this stream reaches the end before skipping all the characters @throws IOException if an I/O error occurs
135 Wraps another input stream, counting the number of bytes read. @param in the input stream to be wrapped
136 Wraps another output stream, counting the number of bytes written. @param out the output stream to be wrapped
137 Returns a buffered reader that reads from a file using the given character set. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}. @param file the file to read from @param charset the charset used to decode the input stream; see {@link StandardCharsets} for helpful predefined constants @return the buffered reader
138 Returns a buffered writer that writes to a file using the given character set. <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset, java.nio.file.OpenOption...)}. @param file the file to write to @param charset the charset used to encode the output stream; see {@link StandardCharsets} for helpful predefined constants @return the buffered writer
139 Creates an empty file or updates the last updated timestamp on the same as the unix command of the same name. @param file the file to create or update @throws IOException if an I/O error occurs
140 Creates any necessary but nonexistent parent directories of the specified file. Note that if this operation fails it may have succeeded in creating some (but not all) of the necessary parent directories. @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent directories of the specified file could not be created. @since 4.0
141 Returns the <a href="http://en.wikipedia.org/wiki/Filename_extension">file extension</a> for the given file name, or the empty string if the file has no extension. The result does not include the '{@code .}'. <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's name as determined by {@link File#getName}. It does not account for any filesystem-specific behavior that the {@link File} API does not already account for. For example, on NTFS it will report {@code "txt"} as the extension for the filename {@code "foo.exe:.txt"} even though NTFS will drop the {@code ":.txt"} part of the name when the file is actually created on the filesystem due to NTFS's <a href="https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs">Alternate Data Streams</a>. @since 11.0
142 Returns the file name without its <a href="http://en.wikipedia.org/wiki/Filename_extension">file extension</a> or path. This is similar to the {@code basename} unix command. The result does not include the '{@code .}'. @param file The name of the file to trim the extension from. This can be either a fully qualified file name (including a path) or just a file name. @return The file name without its path or extension. @since 14.0
143 Creates a {@code LittleEndianDataInputStream} that wraps the given stream. @param in the stream to delegate to
144 Creates a {@code LittleEndianDataOutputStream} that wraps the given stream. @param out the stream to delegate to
145 Like the unix command of the same name, creates an empty file or updates the last modified timestamp of the existing file at the given path to the current system time.
146 Constructs a pattern file name filter object. @param pattern the pattern on which to filter file names
147 Returns {@code true} if {@code x} represents a power of two.
148 Invokes {@code consumer} for each value contained in this array, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
149 Invokes {@code consumer} for each value contained in this array, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
150 Invokes {@code consumer} for each value contained in this array, in order. @since 22.0 (but only since 33.4.0 in the Android flavor)
151 Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link Integer}. @see Class#isPrimitive
152 Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise returns {@code type} itself. Idempotent. <pre> wrap(int.class) == Integer.class wrap(Integer.class) == Integer.class wrap(String.class) == String.class </pre>
153 Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise returns {@code type} itself. Idempotent. <pre> unwrap(Integer.class) == int.class unwrap(int.class) == int.class unwrap(String.class) == String.class </pre>
154 Returns the unsigned {@code byte} value represented by a string with the given radix. @param string the string containing the unsigned {@code byte} representation to be parsed. @param radix the radix to use while parsing {@code string} @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @throws NullPointerException if {@code string} is null (in contrast to {@link Byte#parseByte(String)}) @since 13.0
155 Returns the unsigned {@code int} value represented by a string with the given radix. <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead. @param string the string containing the unsigned integer representation to be parsed. @param radix the radix to use while parsing {@code s}; must be between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or if supplied radix is invalid. @throws NullPointerException if {@code s} is null (in contrast to {@link Integer#parseInt(String)})
156 @param delay the time from now to delay execution @param unit the time unit of the delay parameter
157 Updates the value currently associated with {@code key} with the specified function, and returns the new value. If there is not currently a value associated with {@code key}, the function is applied to {@code 0L}. @since 21.0
158 Updates the value currently associated with {@code key} with the specified function, and returns the old value. If there is not currently a value associated with {@code key}, the function is applied to {@code 0L}. @since 21.0
159 Creates an {@link AsyncCallable} from a {@link Callable}. <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link ListeningExecutorService#submit(Callable)}. @since 20.0
160 Wraps the given callable such that for the duration of {@link Callable#call} the thread that is running will have the given name. @param callable The callable to wrap @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once for each invocation of the wrapped callable.
161 Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is running with have the given name. @param task The Runnable to wrap @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once for each invocation of the wrapped callable.
162 Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input, ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned {@link ListenableFuture}. <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction, Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it meets these conditions: <ul> <li>It does not need to capture any {@link Closeable} objects by calling {@link DeferredCloser#eventuallyClose(Object, Executor)}. <li>It returns a {@link ListenableFuture}. </ul> <p>Example usage: {@snippet : // Result.getRowsFuture() returns a ListenableFuture. ClosingFuture<List<Row>> rowsFuture = queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor); } @param function transforms the value of a {@code ClosingFuture} step to a {@link ListenableFuture} with the value of a derived step
163 Simply returns its argument. @deprecated no need to use this @since 28.0
164 Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation {@code function} is invoked on each call to {@link Future#get() get()} on the returned future. <p>The returned {@code Future} reflects the input's cancellation state directly, and any attempt to cancel the returned Future is likewise passed through to the input Future. <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout to the execution of the underlying {@code Future}, <em>not</em> to the execution of the transformation function. <p>The primary audience of this method is callers of {@code transform} who don't have a {@code ListenableFuture} available and do not mind repeated, lazy function evaluation. @param input The future to transform @param function A Function to transform the results of the provided future to the results of the returned future. @return A future that returns the result of the transformation. @since 10.0
165 Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in. <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed right before each task is run. The renaming is best effort, if a {@link SecurityManager} prevents the renaming then it will be skipped but the tasks will still execute. @param executor The executor to decorate @param nameSupplier The source of names for each task
166 Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run in. <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed right before each task is run. The renaming is best effort, if a {@link SecurityManager} prevents the renaming then it will be skipped but the tasks will still execute. @param service The executor to decorate @param nameSupplier The source of names for each task
167 Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its tasks run in. <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed right before each task is run. The renaming is best effort, if a {@link SecurityManager} prevents the renaming then it will be skipped but the tasks will still execute. @param service The executor to decorate @param nameSupplier The source of names for each task
168 Use {@link MoreExecutors#newSequentialExecutor}
169 Adds a task to the queue and makes sure a worker thread is running. <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor, execution of tasks will stop until a call to this method is made.
170 Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory. @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with this ThreadFactory @return this for the builder pattern
171 Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}. @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during thread creation. @return this for the builder pattern @see MoreExecutors
172 Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)} uninterruptibly.
173 Specifies a nanosecond-precision time source for this cache. By default, {@link System#nanoTime} is used. <p>The primary intent of this method is to facilitate testing of caches with a fake or mock time source. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if a ticker was already set
174 Specifies a listener instance that caches should notify each time an entry is removed for any {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener as part of the routine maintenance described in the class documentation above. <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder reference; instead use the reference this method <i>returns</i>. At runtime, these point to the same instance, but only the returned reference has the correct generic type information to ensure type safety. For best results, use the standard method-chaining idiom illustrated in the class documentation above, configuring a builder and building your cache in a single statement. Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache operation at some <i>undefined</i> point in the future. <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to the {@code Cache} user, only logged via a {@link Logger}. @return the cache builder reference that should be used instead of {@code this} for any remaining configuration and cache building @throws IllegalStateException if a removal listener was already set
175 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}. <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link Stats} instance. @throws IllegalStateException if the dataset is empty
176 Returns the lowest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
177 Returns the highest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only then the result is the highest finite value. If it contains {@link Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
178 Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the values. The count must be non-zero. <p>If these values are a sample drawn from a population, this is also an unbiased estimator of the arithmetic mean of the population. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
179 Returns the lowest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values only then the result is the lowest finite value. If it contains {@link Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
180 Returns the highest value in the dataset. The count must be non-zero. <h3>Non-finite values</h3> <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values only then the result is the highest finite value. If it contains {@link Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}. @throws IllegalStateException if the dataset is empty
181 Returns a latch that reaches zero when this objects' deferred closeables have been closed.
182 Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII characters} have been converted to lowercase. All other characters are copied without modification.
183 If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the lowercase equivalent. Otherwise returns the argument.
184 Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII characters} have been converted to uppercase. All other characters are copied without modification.
185 If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the uppercase equivalent. Otherwise returns the argument.
186 Truncates the given character sequence to the given maximum length. If the length of the sequence is greater than {@code maxLength}, the returned string will be exactly {@code maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise, the sequence will be returned as a string with no changes to the content. <p>Examples: {@snippet : Ascii.truncate("foobar", 7, "..."); // returns "foobar" Ascii.truncate("foobar", 5, "..."); // returns "fo..." } <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe for use with it (such as all-ASCII text) and for simple debugging text. When using this method, consider the following: <ul> <li>it may split surrogate pairs <li>it may split characters and combining characters <li>it does not consider word boundaries <li>if truncating for display to users, there are other considerations that must be taken into account <li>the appropriate truncation indicator may be locale-dependent <li>it is safe to use non-ASCII characters in the truncation indicator </ul> @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code truncationIndicator} @since 16.0
187 Writes to the given {@link ByteBuffer} a byte representation of this instance. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions. @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance is written. In the process increases the position of {@link ByteBuffer} by BYTES.
188 Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}. <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code value} is greater than {@code max}, {@code max} is returned. @param value the {@code short} value to constrain @param min the lower bound (inclusive) of the range to constrain {@code value} to @param max the upper bound (inclusive) of the range to constrain {@code value} to @throws IllegalArgumentException if {@code min > max} @since 21.0
189 Sets the priority for new threads created with this ThreadFactory. <p><b>Warning:</b> relying on the thread scheduler is <a href="http://errorprone.info/bugpattern/ThreadPriorityCheck">discouraged</a>. @param priority the priority for new Threads created with this ThreadFactory @return this for the builder pattern
190 Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'} or {@code 'A'} and {@code 'Z'} inclusive. <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used in preference if at least one of the parameters is known to contain only ASCII characters. <p>Note however that this method does not always behave identically to expressions such as: <ul> <li>{@code string.toUpperCase().equals("UPPER CASE ASCII")} <li>{@code string.toLowerCase().equals("lower case ascii")} </ul> <p>due to case-folding of some non-ASCII characters (which does not occur in {@link String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author probably wanted the behavior provided by this method rather than the subtle and sometimes surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}. @since 16.0
191 Constructs a new {@code CacheStats} instance. <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed by end users and is too fine-grained for a builder.
192 Creates a new multimap that uses the provided map. @param map place to store the mapping from each key to its corresponding values @throws IllegalArgumentException if {@code map} is not empty
193 Used during deserialization only.
194 Standard constructor.
195 @since 12.0
196 Creates an empty {@code EnumMultiset}.
197 @since 12.0
198 Divides an iterable into unmodifiable sublists of the given size (the final iterable may be smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two inner lists of three and two elements, all in the original order. <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()} method. The returned lists implement {@link RandomAccess}, whether or not the input list does. <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements. As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link OutOfMemoryError}. <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)} instead. @param iterable the iterable to return a partitioned view of @param size the desired size of each partition (the last may be smaller) @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided into partitions @throws IllegalArgumentException if {@code size} is nonpositive
199 Divides an iterable into unmodifiable sublists of the given size, padding the final iterable with null values if necessary. For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer iterable containing two inner lists of three elements each, all in the original order. <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()} method. @param iterable the iterable to return a partitioned view of @param size the desired size of each partition @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided into partitions (the final iterable may have trailing null elements) @throws IllegalArgumentException if {@code size} is nonpositive
200 Configures this builder to build min-max priority queues with an initial expected size of {@code expectedSize}.
201 Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added.
202 Constructor for use by subclasses. This hasher instance will process chunks of the specified size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code chunkSize}. @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation; must be at least 4 @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize
203 Returns its argument if it is non-negative, zero if it is negative.
204 Returns a {@code char} matcher that matches only one specified BMP character.
205 Returns a {@code char} matcher that matches any character except the BMP character specified. <p>To negate another {@code CharMatcher}, use {@link #negate()}.
206 Returns a string copy of the input character sequence, with each group of consecutive matching BMP characters replaced by a single replacement character. For example: {@snippet : CharMatcher.anyOf("eko").collapseFrom("bookkeeper", '-') } ... returns {@code "b-p-r"}. <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching character, then iterates the remainder of the sequence calling {@link #matches(char)} for each character. @param sequence the character sequence to replace matching groups of characters in @param replacement the character to append to the result string in place of each group of matching characters in {@code sequence} @return the new string
207 Constructor for use by subclasses.
208 Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped references is {@code true} and both wrappers use the {@link Object#equals(Object) same} equivalence.
209 @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent} instead. @since 21.0
210 Removes an entry whose value has been garbage collected.
211 Clears a value that has not yet been set, and thus does not require count to be modified.
212 Determines whether two iterators contain equal elements in the same order. More specifically, this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same number of elements and every element of {@code iterator1} is equal to the corresponding element of {@code iterator2}. <p>Note that this will modify the supplied iterators, since they will have been advanced some number of elements forward.
213 Indicates whether an object equals this entry, following the behavior specified in {@link Multiset.Entry#equals}.
214 Determines whether an edge has already been used during traversal. In the directed case a cycle is always detected before reusing an edge, so no special logic is required. In the undirected case, we must take care not to "backtrack" over an edge (i.e. going from A to B and then going from B to A).
215 Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.
216 Constructs a new finalizable phantom reference. @param referent to phantom reference @param queue that should finalize the referent
217 Constructs a new finalizable soft reference. @param referent to softly reference @param queue that should finalize the referent
218 Constructs a new finalizable weak reference. @param referent to weakly reference @param queue that should finalize the referent
219 Returns a function that ignores its input and always returns {@code value}. <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not serializable unless you explicitly make it {@link Serializable}, typically by writing {@code (Function<Object, E> & Serializable) o -> value}. @param value the constant value for the function to return @return a function that always returns {@code value}
220 Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails. @param hostPortString the full bracketed host-port specification. Port might not be specified. @return an array with 2 strings: host and port, in that order. @throws IllegalArgumentException if parsing the bracketed host-port string fails.
221 Generate an error if the host might be a non-bracketed IPv6 literal. <p>URI formatting requires that IPv6 literals be surrounded by brackets, like "[2001:db8::1]". Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and disallow IPv6 literals that don't contain these brackets. <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)} method. @return {@code this}, to enable chaining of calls. @throws IllegalArgumentException if bracketless IPv6 is detected.
222 Returns a new InetAddress that is one less than the passed in address. This method works for both IPv4 and IPv6 addresses. @param address the InetAddress to decrement @return a new InetAddress that is one less than the passed in address @throws IllegalArgumentException if InetAddress is at the beginning of its range @since 18.0
223 Returns a new InetAddress that is one more than the passed in address. This method works for both IPv4 and IPv6 addresses. @param address the InetAddress to increment @return a new InetAddress that is one more than the passed in address @throws IllegalArgumentException if InetAddress is at the end of its range @since 10.0
224 Returns a proxy instance that implements {@code interfaceType} by dispatching method invocations to {@code handler}. The class loader of {@code interfaceType} will be used to define the proxy class. To implement multiple interfaces or specify a class loader, use {@link Proxy#newProxyInstance}. @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java interface
225 Returns the captured type.
226 Appends the string representation of each of {@code parts}, using the previously configured separator between each, to {@code appendable}. @since 11.0
227 Appends the string representation of each entry in {@code entries}, using the previously configured separator and key-value separator, to {@code builder}. Identical to {@link #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}. @since 10.0
228 Returns a string containing the string representation of each entry in {@code entries}, using the previously configured separator and key-value separator. @since 11.0
229 Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as this {@code Joiner} otherwise. @since 20.0
230 Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}. <p>After calling this method, you can keep adding more properties to later call toString() again and get a more complete representation of the same object; but properties cannot be removed, so this only allows limited reuse of the helper instance. The helper allows duplication of properties (multiple name/value pairs with the same name can be added).
231 Returns an immutable set of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable set is returned. The values are in the same order as the parameters used to build this multimap.
232 Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the context class loader will find resources from the class path. In environments where different threads can have different class loaders, for example app servers, the context class loader will typically have been set to an appropriate loader for the current thread. <p>In the unusual case where the context class loader is null, the class loader that loaded this class ({@code Resources}) will be used instead. @throws IllegalArgumentException if the resource is not found
233 Returns an {@code Optional} instance with no contained reference. <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's {@code Optional.empty}.
234 Returns the equivalent {@code java.util.Optional} value to the given {@code com.google.common.base.Optional}, or {@code null} if the argument is null. <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()} instead. <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it could refer to either the static or instance version of this method. Write out the lambda expression {@code o -> Optional.toJavaUtil(o)} instead. @since 21.0 (but only since 33.4.0 in the Android flavor)
235 Returns the string if it is not empty, or a null string otherwise. @param string the string to test and possibly return @return {@code string} if it is not empty; {@code null} otherwise
236 Returns {@code true} if the given string is null or is the empty string. <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize "in the other direction," converting empty strings to {@code null}, you can use {@link #emptyToNull}. @param string a string reference to check @return {@code true} if the string is null or is the empty string
237 Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips all of its elements. <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip} elements that exist when the {@code Iterator} is created, not when {@code skip()} is called. <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states that a call to {@code remove()} before a call to {@code next()} will throw an {@link IllegalStateException}. <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} @since 3.0
238 Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s iterator does. <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} @param iterable the iterable to limit @param limitSize the maximum number of elements in the returned iterable @throws IllegalArgumentException if {@code limitSize} is negative @since 3.0
239 Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code hasNext()} returns {@code false}, whichever comes first. @return the number of elements the iterator was advanced @since 13.0 (since 3.0 as {@code Iterators.skip})
240 Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its elements. The returned iterator supports {@code remove()} if {@code iterator} does. @param iterator the iterator to limit @param limitSize the maximum number of elements in the returned iterator @throws IllegalArgumentException if {@code limitSize} is negative @since 3.0
241 Creates a new traverser for a directed acyclic graph that has at most one path from the start node(s) to any node reachable from the start node(s), and has no paths from any start node to any other start node, such as a tree or forest. <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data structure being traversed is, in addition to being a tree/forest, also defined <a href="https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness">recursively</a>. This is because the {@code forTree()}-based implementations don't keep track of visited nodes, and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects; this saves both time and space versus traversing the same graph using {@code forGraph()}. <p>Providing a graph to be traversed for which there is more than one path from the start node(s) to any node may lead to: <ul> <li>Traversal not terminating (if the graph has cycles) <li>Nodes being visited multiple times (if multiple paths exist from any start node to any node reachable from any start node) </ul> <p><b>Performance notes</b> <ul> <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from the start node). <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number of nodes that have been seen but not yet visited, that is, the "horizon"). </ul> <p><b>Examples</b> (all edges are directed facing downwards) <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and {@code h}. {@snippet : a b c / \ / \ | / \ / \ | d e f g | | h } <p>. <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code b} were a start node, there would be multiple paths to {@code f}. {@snippet : a b / \ / \ / \ / \ c d e \ / \ / f } <p><b>Note on binary trees</b> <p>This method can be used to traverse over a binary tree. Given methods {@code leftChild(node)} and {@code rightChild(node)}, this method can be called as {@snippet : Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node))); } @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most one path between any two nodes
242 Checks that the passed argument is positive, and ceils it to a multiple of 32.
243 Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be constrained to 32 bits, otherwise it is constrained to 128 bits. @param address the address represented as a big integer @param isIpv6 whether the created address should be IPv4 or IPv6 @return the BigInteger converted to an address @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4 or IPv6 respectively
244 Returns a string consisting of a specific number of concatenated copies of an input string. For example, {@code repeat("hey", 3)} returns the string {@code "heyheyhey"}. <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead. @param string any non-null string @param count the number of times to repeat it; a nonnegative integer @return a string containing {@code string} repeated {@code count} times (the empty string if {@code count} is zero) @throws IllegalArgumentException if {@code count} is negative
245 Creates a BloomFilter.
246 Returns a hash function which computes its hash code by concatenating the hash codes of the underlying hash functions together. This can be useful if you need to generate hash codes of a specific length. <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}. @since 19.0
247 @param c the number of compression rounds (must be positive) @param d the number of finalization rounds (must be positive) @param k0 the first half of the key @param k1 the second half of the key
248 Creates a new instance that uses the given file threshold, and optionally resets the data when the {@link ByteSource} returned by {@link #asByteSource} is finalized. @param fileThreshold the number of bytes before the stream should switch to buffering to a file @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link ByteSource} returned by {@link #asByteSource} is finalized. @throws IllegalArgumentException if {@code fileThreshold} is negative
249 Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address. @param bytes byte array representing an IPv4 address (should be of length 4) @return {@link Inet4Address} corresponding to the supplied byte array @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created
250 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
251 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
252 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
253 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
254 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
255 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
256 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
257 Returns an array containing the same values as {@code array}, but guaranteed to be of a specified minimum length. If {@code array} already has a length of at least {@code minLength}, it is returned directly. Otherwise, a new array of size {@code minLength + padding} is returned, containing the values of {@code array}, and zeroes in the remaining places. @param array the source array @param minLength the minimum length the returned array must guarantee @param padding an extra amount to "grow" the array by if growth is necessary @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative @return an array containing the values of {@code array}, with guaranteed minimum length {@code minLength}
258 Returns the {@code char} value that is equal to {@code value}, if possible. @param value any value in the range of the {@code char} type @return the {@code char} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE} or less than {@link Character#MIN_VALUE}
259 Returns the {@code int} value that is equal to {@code value}, if possible. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link Math#toIntExact(long)} instead, but be aware that that method throws {@link ArithmeticException} rather than {@link IllegalArgumentException}. @param value any value in the range of the {@code int} type @return the {@code int} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or less than {@link Integer#MIN_VALUE}
260 Returns the {@code short} value that is equal to {@code value}, if possible. @param value any value in the range of the {@code short} type @return the {@code short} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or less than {@link Short#MIN_VALUE}
261 Returns the {@code byte} value that is equal to {@code value}, if possible. @param value any value in the range of the {@code byte} type @return the {@code byte} value that equals {@code value} @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or less than {@link Byte#MIN_VALUE}
262 Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if possible. @param value a value between 0 and 255 inclusive @return the {@code byte} value that, when treated as unsigned, equals {@code value} @throws IllegalArgumentException if {@code value} is negative or greater than 255
263 Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if possible. @param value a value between 0 and 2<sup>32</sup>-1 inclusive @return the {@code int} value that, when treated as unsigned, equals {@code value} @throws IllegalArgumentException if {@code value} is negative or greater than or equal to 2<sup>32</sup> @since 21.0
264 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleWithFixedDelay} method. @param initialDelay the time to delay first execution @param delay the delay between the termination of one execution and the commencement of the next @param unit the time unit of the initialDelay and delay parameters
265 Returns a {@link Scheduler} that schedules the task using the {@link ScheduledExecutorService#scheduleAtFixedRate} method. @param initialDelay the time to delay first execution @param period the period between successive executions of the task @param unit the time unit of the initialDelay and period parameters
266 Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}. <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code value} is greater than {@code max}, {@code max} is returned. @param value the {@code char} value to constrain @param min the lower bound (inclusive) of the range to constrain {@code value} to @param max the upper bound (inclusive) of the range to constrain {@code value} to @throws IllegalArgumentException if {@code min > max} @since 21.0
267 Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}. <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code value} is greater than {@code max}, {@code max} is returned. <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of constraining a {@code long} input to an {@code int} range. @param value the {@code long} value to constrain @param min the lower bound (inclusive) of the range to constrain {@code value} to @param max the upper bound (inclusive) of the range to constrain {@code value} to @throws IllegalArgumentException if {@code min > max} @since 21.0
268 Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL} pointing to the named resource. @throws IllegalArgumentException if the resource is not found
269 Starts the stopwatch. @return this {@code Stopwatch} instance @throws IllegalStateException if the stopwatch is already running.
270 Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this point. @return this {@code Stopwatch} instance @throws IllegalStateException if the stopwatch is already stopped.
271 Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent error message.
272 Configures this {@code Builder} to order entries by value according to the specified comparator. <p>The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order. @throws IllegalStateException if this method was already called @since 19.0
273 Sets the minimum total size for the internal hash tables. For example, if the initial capacity is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code initialCapacity} is negative @throws IllegalStateException if an initial capacity was already set
274 Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the cache at a time, but since read operations and cache loading computations can proceed concurrently, this still yields higher concurrency than full synchronization. <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this value, you should always choose it explicitly. <p>The current implementation uses the concurrency level to create a fixed number of hashtable segments, each governed by its own write lock. The segment lock is taken once for each explicit write, and twice for each cache loading computation (once prior to loading the new value, and once after loading completes). Much internal cache management is performed at the segment granularity. For example, access queues and write queues are kept per segment when they are required by the selected eviction algorithm. As such, when writing unit tests it is not uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction behavior. <p>Note that future implementations may abandon segment locking in favor of more advanced concurrency controls. @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive @throws IllegalStateException if a concurrency level was already set
275 Sets the minimum total size for the internal hash tables. For example, if the initial capacity is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each having a hash table of size eight. Providing a large enough estimate at construction time avoids the need for expensive resizing operations later, but setting this value unnecessarily high wastes memory. @throws IllegalArgumentException if {@code initialCapacity} is negative @throws IllegalStateException if an initial capacity was already set
276 Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The table is internally partitioned to try to permit the indicated number of concurrent updates without contention. Because assignment of entries to these partitions is not necessarily uniform, the actual concurrency observed may vary. Ideally, you should choose a value to accommodate as many threads as will ever concurrently modify the table. Using a significantly higher value than you need can waste space and time, and a significantly lower value can lead to thread contention. But overestimates and underestimates within an order of magnitude do not usually have much noticeable impact. A value of one permits only one thread to modify the map at a time, but since read operations can proceed concurrently, this still yields higher concurrency than full synchronization. Defaults to 4. <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will change again in the future. If you care about this value, you should always choose it explicitly. @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive @throws IllegalStateException if a concurrency level was already set
277 Specifies the maximum number of entries the cache may contain. <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each resulting segment inside the cache <i>independently</i> limits its own size to approximately {@code maximumSize / concurrencyLevel}. <p>When eviction is necessary, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often. <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into cache. This can be useful in testing, or to disable caching temporarily. <p>This feature cannot be used in conjunction with {@link #maximumWeight}. @param maximumSize the maximum size of the cache @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code maximumSize} is negative @throws IllegalStateException if a maximum size or weight was already set
278 Specifies the maximum weight of entries the cache may contain. Weight is determined using the {@link Weigher} specified with {@link #weigher}, and use of this method requires a corresponding call to {@link #weigher} prior to calling {@link #build}. <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each resulting segment inside the cache <i>independently</i> limits its own weight to approximately {@code maximumWeight / concurrencyLevel}. <p>When eviction is necessary, the cache evicts entries that are less likely to be used again. For example, the cache may evict an entry because it hasn't been used recently or very often. <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded into cache. This can be useful in testing, or to disable caching temporarily. <p>Note that weight is only used to determine whether the cache is over capacity; it has no effect on selecting which entry should be evicted next. <p>This feature cannot be used in conjunction with {@link #maximumSize}. @param maximumWeight the maximum total weight of entries the cache may contain @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code maximumWeight} is negative @throws IllegalStateException if a maximum weight or size was already set @since 11.0
279 Specifies the weigher to use in determining the weight of entries. Entry weight is taken into consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and are thus effectively static during the lifetime of a cache entry. <p>When the weight of an entry is zero it will not be considered for size-based eviction (though it still may be evicted by other means). <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder} instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the original reference or the returned reference may be used to complete configuration and build the cache, but only the "generic" one is type-safe. That is, it will properly prevent you from building caches whose key or value types are incompatible with the types accepted by the weigher already provided; the {@code CacheBuilder} type cannot do this. For best results, simply use the standard method-chaining idiom, as illustrated in the documentation at top, configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement. <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a cache whose key or value type is incompatible with the weigher, you will likely experience a {@link ClassCastException} at some <i>undefined</i> point in the future. @param weigher the weigher to use in calculating the weight of cache entries @return this {@code CacheBuilder} instance (for chaining) @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was previously called @since 11.0
280 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. <p>If you can represent the duration as a {@link Duration} (which should be preferred when feasible), use {@link #expireAfterWrite(Duration)} instead. @param duration the length of time after an entry is created that it should be automatically removed @param unit the unit that {@code duration} is expressed in @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterWrite} was already set
281 Specifies that each entry should be automatically removed from the cache once a fixed duration has elapsed after the entry's creation, the most recent replacement of its value, or its last access. Access time is reset by all cache read and write operations (including {@code Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the entries you retrieve. <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long) maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be useful in testing, or to disable caching temporarily without a code change. <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or write operations. Expired entries are cleaned up as part of the routine maintenance described in the class javadoc. <p>If you can represent the duration as a {@link Duration} (which should be preferred when feasible), use {@link #expireAfterAccess(Duration)} instead. @param duration the length of time after an entry is last accessed that it should be automatically removed @param unit the unit that {@code duration} is expressed in @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #expireAfterAccess} was already set
282 Specifies that active entries are eligible for automatic refresh once a fixed duration has elapsed after the entry's creation, or the most recent replacement of its value. The semantics of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link CacheLoader#reload}. <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is recommended that users of this method override {@link CacheLoader#reload} with an asynchronous implementation; otherwise refreshes will be performed during unrelated cache read and write operations. <p>Currently automatic refreshes are performed when the first stale request for an entry occurs. The request triggering refresh will make a synchronous call to {@link CacheLoader#reload} and immediately return the new value if the returned future is complete, and the old value otherwise. <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>. <p>If you can represent the duration as a {@link Duration} (which should be preferred when feasible), use {@link #refreshAfterWrite(Duration)} instead. @param duration the length of time after an entry is created that it should be considered stale, and thus eligible for refresh @param unit the unit that {@code duration} is expressed in @return this {@code CacheBuilder} instance (for chaining) @throws IllegalArgumentException if {@code duration} is negative @throws IllegalStateException if {@link #refreshAfterWrite} was already set @since 11.0
283 Sets a custom {@code Equivalence} strategy for comparing keys. <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. @return this {@code CacheBuilder} instance (for chaining)
284 Sets a custom {@code Equivalence} strategy for comparing values. <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()} otherwise. @return this {@code CacheBuilder} instance (for chaining)
285 Sets a custom {@code Equivalence} strategy for comparing keys. <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is used is in {@link Interners.WeakInterner}.
286 Constructs a new type token of {@code T}. <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure. <p>For example: {@snippet : TypeToken<List<String>> t = new TypeToken<List<String>>() {}; }
287 @see Service#failureCause()
288 Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive. @param index a user-supplied index identifying an element of an array, list or string @param size the size of that array, list or string @param desc the text to use to describe this index in an error message @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size} @throws IllegalArgumentException if {@code size} is negative
289 Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of size {@code size}. A position index may range from zero to {@code size}, inclusive. @param index a user-supplied index identifying a position in an array, list or string @param size the size of that array, list or string @param desc the text to use to describe this index in an error message @return the value of {@code index} @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size} @throws IllegalArgumentException if {@code size} is negative
290 Returns a predicate that always evaluates to {@code true}. <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable.
291 Returns a predicate that always evaluates to {@code false}. <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable.
292 Returns a predicate that evaluates to {@code true} if the object reference being tested is null. <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull}, but note that lambdas and method references do not have human-readable {@link #toString()} representations and are not serializable.
293 Returns a predicate that evaluates to {@code true} if the object reference being tested is not null. <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull}, but note that lambdas and method references do not have human-readable {@link #toString()} representations and are not serializable.
294 Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found. <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.
295 Returns a predicate that evaluates to {@code true} if either of its components evaluates to {@code true}. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found. <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.
296 Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits empty strings from the results. For example, {@code Splitter.on(',').omitEmptyStrings().split(",a,,,b,c,,")} returns an iterable containing only {@code ["a", "b", "c"]}. <p>If either {@code trimResults} option is also specified when creating a splitter, that splitter always trims results first before checking for emptiness. So, for example, {@code Splitter.on(':').omitEmptyStrings().trimResults().split(": : : ")} returns an empty iterable. <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty iterable, but when using this option, it can (if the input sequence consists of nothing but separators). @return a splitter with the desired configuration
297 Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after it reaches the limit. The limit defines the maximum number of items returned by the iterator, or the maximum size of the list returned by {@link #splitToList}. <p>For example, {@code Splitter.on(',').limit(3).split("a,b,c,d")} returns an iterable containing {@code ["a", "b", "c,d"]}. When omitting empty strings, the omitted strings do not count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split("a,,,b,,,c,d")} returns an iterable containing {@code ["a", "b", "c,d"]}. When trim is requested, all entries are trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split(" a , b , c , d ")} results in {@code ["a", "b", "c , d"]}. @param maxItems the maximum number of items returned @return a splitter with the desired configuration @since 9.0
298 Splits {@code sequence} into string components and returns them as an immutable list. If you want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}. @param sequence the sequence of characters to split @return an immutable list of the segments split from the parameter @since 15.0
299 Returns a string representation of this system property.
300 Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit, with any fraction rounded down. <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally not useful to specify {@link TimeUnit#NANOSECONDS} precision here. <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a strongly-typed {@code Duration} instance. @since 14.0 (since 10.0 as {@code elapsedTime()})
301 Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link #elapsed(TimeUnit)}, this method does not lose any precision due to rounding. @since 22.0 (but only since 33.4.0 in the Android flavor)
302 Returns a string representation of the current elapsed time.
303 Returns the given string if it is non-null; the empty string otherwise. @param string the string to test and possibly return @return {@code string} itself if it is non-null; {@code ""} if it is null
304 Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) && b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and {@code b} have no common prefix, returns the empty string. @since 11.0
305 Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) && b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and {@code b} have no common suffix, returns the empty string. @since 11.0
306 Returns a supplier that always supplies {@code instance}. <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have human-readable {@link #toString()} representations and are not serializable. If you need a supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.
307 Constructor for use by subclasses.
308 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no message otherwise. @throws VerifyException if {@code expression} is {@code false} @see Preconditions#checkState Preconditions.checkState()
309 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
310 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
311 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
312 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. @param expression a boolean expression @param errorMessageTemplate a template for the exception message should the check fail. The message is formed by replacing each {@code %s} placeholder in the template with an argument. These are matched by position - the first {@code %s} gets {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in square braces. Unmatched placeholders will be left as-is. @param errorMessageArgs the arguments to be substituted into the message template. Arguments are converted to strings using {@link String#valueOf(Object)}. @throws VerifyException if {@code expression} is {@code false} @see Preconditions#checkState Preconditions.checkState()
313 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
314 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
315 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
316 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
317 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
318 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
319 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
320 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
321 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
322 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
323 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
324 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
325 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
326 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
327 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
328 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
329 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
330 Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a custom message otherwise. <p>See {@link #verify(boolean, String, Object...)} for details. @since 23.1 (varargs overload since 17.0)
331 Cleans up the given reference and any other references already in the queue. Catches and logs all throwables. @return true if the caller should continue to wait for more references to be added to the queue, false if the associated FinalizableReferenceQueue is no longer referenced.
332 Constructs an instance with all counts initialized to zero.
333 Increments all counters by the values in {@code other}.
334 Constructor for use by subclasses.
335 Returns the platform preferred map implementation that preserves insertion order when used only for insertions.
336 @since 12.0
337 @since 11.0
338 Constructs a new {@code CacheBuilder} instance with default settings, including strong keys, strong values, and no automatic eviction of any kind. <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on the {@link #build} methods allow you to create a cache of any key and value type desired.
339 Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link LoadingCache#getAll}. <p>If the returned map doesn't contain all requested {@code keys} then the entries it does contain will be cached, but {@code getAll} will throw an exception. If the returned map contains extra keys not present in {@code keys} then all returned entries will be cached, but only the entries for {@code keys} will be returned from {@code getAll}. <p>This method should be overridden when bulk retrieval is significantly more efficient than many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls to {@link LoadingCache#get} if this method is not overridden. @param keys the unique, non-null keys whose values should be loaded @return a map from each key in {@code keys} to the value associated with that key; <b>may not contain null values</b> @throws Exception if unable to load the result @throws InterruptedException if this method is interrupted. {@code InterruptedException} is treated like any other {@code Exception} in all respects except that, when it is caught, the thread's interrupt status is set @since 11.0
340 Returns the number of times {@link Cache} lookup methods have returned either a cached or uncached value. This is defined as {@code hitCount + missCount}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
341 Returns the total number of times that {@link Cache} lookup methods attempted to load new values. This includes both successful load operations and those that threw exceptions. This is defined as {@code loadSuccessCount + loadExceptionCount}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
342 Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code loadSuccessCount + loadExceptionCount == 0}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
343 Returns the average time spent loading new values. This is defined as {@code totalLoadTime / (loadSuccessCount + loadExceptionCount)}. <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is guaranteed not to throw an exception). If you require specific handling, we recommend implementing your own stats collector.
344 Constructor for use by subclasses.
345 Constructor for use by subclasses.
346 Constructor for use by subclasses.
347 Constructor for use by subclasses.
348 Constructor for use by subclasses.
349 Constructor for use by subclasses.
350 Constructor for use by subclasses.
351 Constructor for use by subclasses.
352 Constructor for use by subclasses.
353 Drains the recency queue, updating eviction metadata that the entries therein were read in the specified relative order. This currently amounts to adding them to relevant eviction lists (accounting for the fact that they could have been removed from the map since being added to the recency queue).
354 Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry, or {@code null} if {@code original} was already garbage collected.
355 Removes all {@code Column} mappings whose row key and value satisfy the given predicate.
356 Must be called at the end of each subclass's constructor. This method performs the "real" initialization; we can't put this in the constructor because, in the case where futures are already complete, we would not initialize the subclass before calling {@link #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed, we're guaranteed to have properly initialized the subclass.
357 Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate executor to the given {@code future}. <p>Note, the returned executor can only be used once.
358 Returns the result of the input {@code Future}, which must have already completed. <p>The benefits of this method are twofold. First, the name "getDone" suggests to readers that the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code Future} that is still pending, the program will throw instead of block. This can be important for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from the {@code call} implementation but forget to add it to the arguments of {@code whenAllComplete}. <p>If you are looking for a method to determine whether a given {@code Future} is done, use the instance method {@link Future#isDone()}. @throws ExecutionException if the {@code Future} failed with an exception @throws CancellationException if the {@code Future} was cancelled @throws IllegalStateException if the {@code Future} is not done @since 20.0
359 Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw a checked exception. This makes {@code Future} more suitable for lightweight, fast-running tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior similar to that of {@code ForkJoinTask.join}. <p>Exceptions from {@code Future.get} are treated as follows: <ul> <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link ExecutionError} (if the cause is an {@code Error}). <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is restored before {@code getUnchecked} returns. <li>Any {@link CancellationException} is propagated untouched. So is any other {@link RuntimeException} ({@code get} implementations are discouraged from throwing such exceptions). </ul> <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception from the underlying computation in an {@code UncheckedExecutionException} or {@code ExecutionError}. <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link Uninterruptibles#getUninterruptibly(Future)}. @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an {@code Exception} as its cause @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code Error} as its cause @throws CancellationException if {@code get} throws a {@code CancellationException} @since 10.0
360 Clears all entries from the key and value reference queues.
361 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
362 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
363 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
364 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
365 Returns the default equivalence strategy used to compare and hash keys or values referenced at this strength. This strategy will be used unless the user explicitly specifies an alternate strategy.
366 Returns true if the entry has expired.
367 {@inheritDoc} <p>If the data in the multiset is modified by any other threads during this method, it is undefined which (if any) of these modifications will be reflected in the result.
368 Returns the number of elements remaining in {@code iterator}. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
369 An implementation of {@link Multiset#size}.
370 Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively. @since 20.0
371 Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively. @since 20.0
372 Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively. @since 20.0
373 Returns the platform preferred set implementation that preserves insertion order when used only for insertions.
374 Constructor for use by subclasses.
375 Creates a new iterator with the given first element, or, if {@code firstOrNull} is null, creates a new empty iterator.
376 Constructor for use by subclasses.
377 Creates an unmodifiable, empty collection of values. <p>This is used in {@link #removeAll} on an empty key.
378 A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to forward to this implementation.
379 A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this implementation.
380 If the delegate collection is empty, but the multimap has values for the key, replace the delegate with the new collection for the key. <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't changed.
381 {@inheritDoc} <p>The returned collection is not serializable.
382 {@inheritDoc} <p>The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on.
383 {@inheritDoc} <p>The iterator generated by the returned collection traverses the values in the order they were added to the multimap. Because the values may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link ListMultimap} interface.
384 {@inheritDoc} <p>The iterator generated by the returned collection traverses the values for one key, followed by the values of a second key, and so on. <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is returned by a method call to the collection or its iterator.
385 {@inheritDoc} <p>The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a {@link List}, instead of the {@link Collection} specified in the {@link ListMultimap} interface. <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, {@link Entry#getValue} returns the value from the multimap, which may change over time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()} call won't update the multimap but will lead to a revised value being returned by {@code getValue()}.
386 Returns best-effort-sized StringBuilder based on the given collection size.
387 Creates an {@code ArrayList} instance backed by an array with the specified initial size; simply delegates to {@link ArrayList#ArrayList(int)}. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead, use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking advantage of <a href="https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation">"diamond" syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList} constructors very wisely did not accept varargs.) @param initialArraySize the exact size of the initial backing array for the returned array list ({@code ArrayList} documentation calls this value the "capacity") @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size reaches {@code initialArraySize + 1} @throws IllegalArgumentException if {@code initialArraySize} is negative
388 Returns a capacity that is sufficient to keep the map from being resized as long as it grows no larger than expectedSize and the load factor is ≥ its default (0.75).
389 Uses an {@link ArrayList} to store value collections, initialized to expect the specified number of values per key. @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}
390 Uses a hash-based {@code Set} to store value collections, initialized to expect the specified number of values per key. @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}
391 Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to expect the specified number of values per key. @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}
392 Uses a hash table to map keys to value collections, initialized to expect the specified number of keys. @throws IllegalArgumentException if {@code expectedKeys < 0}
393 Uses an hash table to map keys to value collections, initialized to expect the specified number of keys. <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link Multimap#asMap()} will iterate through the keys in the order that they were first added to the multimap, save that if all values associated with a key are removed and then the key is added back into the multimap, that key will come last in the key iteration order.
394 An implementation of {@link Multiset#setCount(Object, int)}.
395 An implementation of {@link Multiset#setCount(Object, int, int)}.
396 A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
397 A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If you override either of those methods, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
398 Returns the hash code for this multimap. <p>The hash code of a multimap is defined as the hash code of the map view, as returned by {@link Multimap#asMap}. @see Map#hashCode
399 Returns a string representation of the multimap, generated by calling {@code toString} on the map returned by {@link Multimap#asMap}. @return a string representation of the multimap
400 A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll} to forward to this implementation. @since 7.0
401 {@inheritDoc} <p>This implementation returns {@code true} if {@code object} is a multiset of the same size and if, for each element, the two multisets have the same count.
402 A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
403 Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty. The {@link Iterators} analog to this method is {@link Iterators#getNext}. <p>If no default value is desired (and the caller instead wants a {@link NoSuchElementException} to be thrown), it is recommended that {@code iterable.iterator().next()} is used instead. <p>To get the only element in a single-element {@code Iterable}, consider using {@link #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead. <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)} <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list), consider using {@code collection.getFirst()} instead. Note that if the collection is empty, {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the default value. @param defaultValue the default value to return if the iterable is empty @return the first element of {@code iterable} or the default value @since 7.0
404 Returns a map view that associates each key with the corresponding values in the multimap. Changes to the returned map, such as element removal, will update the underlying multimap. The map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}. <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same behavior as {@link #get}, returning a live collection. When passed a key that is not present, however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection. <p>Though the method signature doesn't say so explicitly, the returned map has {@link SortedSet} values.
405 {@inheritDoc} <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap} interface. @since 14.0 (present with return type {@code SortedSet} since 2.0)
406 Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}. This method is an abomination of generics; the only purpose of this method is to contain the ugly type-casting in one place.
407 Returns the string representation {@code rowMap().toString()}.
408 Returns the string representation {@code rowMap().toString()}.
409 @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the key, number of values for that key, and the key's values
410 @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the key, number of values for that key, and the key's values
411 @serialData number of distinct keys, and then for each distinct key: the key, the number of values for that key, and the key's values
412 Populates a multimap by reading an input stream, as part of deserialization. See {@link #writeMultimap} for the data format.
413 Returns an immutable set of the valid column keys, including those that are associated with null values only. @return immutable set of column keys
414 Returns an immutable set of the valid row keys, including those that are associated with null values only. @return immutable set of row keys
415 Returns an immutable set of the distinct keys in this multimap, in the same order as they appear in this multimap.
416 Returns {@code true} if the provided column key is among the column keys provided when the table was constructed.
417 Returns {@code true} if the provided row key is among the row keys provided when the table was constructed.
418 Returns an immutable list of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable list is returned. The values are in the same order as the parameters used to build this multimap.
419 {@inheritDoc} @throws NullPointerException if {@code columnKey} is {@code null}
420 Adds a key-value mapping to the built multimap.
421 Returns, conceptually, "origin + distance", or equivalently, the result of calling {@link #next} on {@code origin} {@code distance} times.
422 Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code function} returns {@code null} for an input, it is replaced with an empty stream.)
423 Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code function} returns {@code null} for an input, it is replaced with an empty stream.)
424 Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code function} returns {@code null} for an input, it is replaced with an empty stream.)
425 Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by applying {@code function} to the elements of {@code fromSpliterator}.
426 A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override {@link #contains}, you may wish to override {@link #containsAll} to forward to this implementation. @since 7.0
427 Stores the hash table mask as the number of bits needed to represent an index.
428 Stores the hash table mask as the number of bits needed to represent an index.
429 Resizes the internal entries array to the specified capacity, which may be greater or less than the current capacity.
430 Resizes the internal entries array to the specified capacity, which may be greater or less than the current capacity.
431 Returns the power of 2 hashtable size required to hold the expected number of items or the minimum hashtable size, whichever is greater.
432 Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result of this comparison chain has not already been determined.
433 Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of this comparison chain has not already been determined.
434 Compares two {@code boolean} values, considering {@code true} to be less than {@code false}, <i>if</i> the result of this comparison chain has not already been determined. <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example: <pre> Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()}) </pre> @since 12.0
435 Compares two {@code boolean} values, considering {@code false} to be less than {@code true}, <i>if</i> the result of this comparison chain has not already been determined. <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example: <pre> Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()}) </pre> @since 12.0 (present as {@code compare} since 2.0)
436 Returns {@code true} if this range has a lower endpoint.
437 Returns {@code true} if this range has an upper endpoint.
438 Constructor for use by subclasses.
439 @serialData the key class, value class, number of entries, first key, first value, second key, second value, and so on.
440 @serialData the key class, number of entries, first key, first value, second key, second value, and so on.
441 @serialData the number of entries, first key, first value, second key, second value, and so on.
442 Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws either a NullPointerException or a ClassCastException as appropriate.
443 @serialData the number of distinct elements, the first element, its count, the second element, its count, and so on
444 @serialData the number of distinct elements, the first element, its count, the second element, its count, and so on
445 @serialData the comparator, the number of distinct elements, the first element, its count, the second element, its count, and so on
446 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableTable#builder}.
447 Returns a fluent iterable containing {@code elements} in the specified order. <p>The returned iterable is an unmodifiable view of the input array. <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[]) Stream.of(T...)}. @since 20.0 (since 18.0 as an overload of {@code of})
448 Returns a fluent iterable containing no elements. <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}. @since 20.0
449 Determines whether this fluent iterable is empty. <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.
450 Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable, followed by those of {@code other}. The iterators are not polled until necessary. <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding {@code Iterator} supports it. <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}. @since 18.0
451 Combines two iterables into a single iterable. The returned iterable has an iterator that traverses the elements in {@code a}, followed by the elements in {@code b}. The source iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Stream.concat(a, b)}.
452 Combines three iterables into a single iterable. The returned iterable has an iterator that traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}. The source iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(a, b, c)}.
453 Combines four iterables into a single iterable. The returned iterable has an iterator that traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the elements in {@code c}, followed by the elements in {@code d}. The source iterators are not polled until necessary. <p>The returned iterable's iterator supports {@code remove()} when the corresponding input iterator supports it. <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code Streams.concat(a, b, c, d)}.
454 Returns a stream of this fluent iterable's contents (similar to calling {@link Collection#stream} on a collection). <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not going through {@code FluentIterable} at all), the more performant and idiomatic your code will be. This method is a transitional aid, to be used only when really necessary. @since 21.0
455 Returns the number of elements in the specified iterator that equal the specified object. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. @see Collections#frequency
456 An admittedly inefficient implementation of {@link Map#containsKey}.
457 An implementation of {@link Map#containsValue}.
458 A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override {@link #addAll(int, Collection)} to forward to this implementation. @since 7.0
459 A sensible default implementation of {@link #subList(int, int)}. If you override any other methods, you may wish to override {@link #subList(int, int)} to forward to this implementation. @since 7.0
460 A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override {@link #iterator}, you may wish to override {@link #hashCode} to forward to this implementation. @since 7.0
461 A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward to this implementation. @since 7.0
462 A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to forward to this implementation. @since 7.0
463 Creates a table that uses the specified backing map and factory. It can generate a table based on arbitrary {@link Map} classes. <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration order. However, the table's {@code row()} method returns instances of a different class than {@code factory.get()} does. <p>Call this method only when the simpler factory methods in classes like {@link HashBasedTable} and {@link TreeBasedTable} won't suffice. <p>The views returned by the {@code Table} methods {@link Table#column}, {@link Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and values are not supported. <p>Lookups by row key are often faster than lookups by column key, because the data is stored in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes longer, since an iteration across all row keys occurs. <p>Note that this implementation is not synchronized. If multiple threads access this table concurrently and one of the threads modifies the table, it must be synchronized externally. <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by {@code factory}, and the table contents are all serializable. <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned by {@code factory}. Those objects should not be manually updated and they should not use soft, weak, or phantom references. @param backingMap place to store the mapping from each row key to its corresponding column key / value map @param factory supplier of new, empty maps that will each hold all column key / value mappings for a given row key @throws IllegalArgumentException if {@code backingMap} is not empty @since 10.0
464 {@inheritDoc} <p>The returned set has an iterator that does not support {@code remove()}. <p>The set's iterator traverses the columns of the first row, the columns of the second row, etc., skipping any columns that have appeared previously.
465 {@inheritDoc} <p>The returned map's views have iterators that don't support {@code remove()}.
466 Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap} for the data format.
467 Populates a multiset by reading an input stream, as part of deserialization. See {@link #writeMultiset} for the data format.
468 Builds a new open-addressed hash table from the first n objects in elements.
469 Creates a new builder. The returned builder is equivalent to the builder generated by {@link ImmutableMap#builder}.
470 Returns a builder that builds the unserialized type. Subclasses should override this method.
471 Returns a new builder, expecting the specified number of entries to be added. <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link Builder#build} is called, the builder is likely to perform better than an unsized {@link #builder()} would have. <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to, but not exactly, the number of entries added to the builder. @since 23.1
472 Resizes internal data structures if necessary to store the specified number of distinct elements.
473 Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate elements (only the first duplicate element is added). @param elements the elements to add @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
474 Adds each element of {@code elements} to the {@code ImmutableList}. @param elements the {@code Iterator} to add to the {@code ImmutableList} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
475 Adds each element of {@code elements} to the {@code ImmutableMultiset}. @param elements the elements to add to the {@code ImmutableMultiset} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
476 Adds each element of {@code elements} to the {@code ImmutableList}. @param elements the {@code Iterable} to add to the {@code ImmutableList} @return this {@code Builder} object @throws NullPointerException if {@code elements} is null or contains a null element
477 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableList}, in encounter order. @since 21.0
478 Returns an empty multimap. <p><b>Performance note:</b> the instance returned is a singleton.
479 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent ranges will be merged. @since 23.1
480 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if the stream contains duplicates (according to {@link Object#equals(Object)}), only the first duplicate in encounter order will appear in the result. @since 21.0
481 Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the natural ordering of the keys is used. Note that its behavior is not consistent with {@link TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.
482 Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet} already contains {@code element}, then {@code add} has no effect. (only the previously added element is retained). @param element the element to add @return this {@code Builder} object @throws NullPointerException if {@code element} is null
483 Returns a function that delegates to the {@link Interner#intern} method of the given interner. @since 8.0
484 Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]} (that is, identical to {@link java.util.Arrays Arrays}{@code .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link Collection}, {@code collection.toString()} also gives the same result, but that behavior is not generally guaranteed.
485 Returns the single element contained in {@code iterable}. <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code stream.collect(MoreCollectors.onlyElement())}. @throws NoSuchElementException if the iterable is empty @throws IllegalArgumentException if the iterable contains multiple elements
486 Returns the single element contained in {@code iterator}, or {@code defaultValue} if the iterator is empty. @throws IllegalArgumentException if the iterator contains multiple elements. The state of the iterator is unspecified.
487 Returns a new array that contains the concatenated contents of two arrays. @param first the first array of elements to concatenate @param second the second array of elements to concatenate @param type the component type of the returned array
488 Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is guaranteed to be {@code O(1)}. <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()} <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list), consider using {@code collection.getLast()} instead. @return the last element of {@code iterable} @throws NoSuchElementException if the iterable is empty
489 Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the iterator is empty. @param defaultValue the default value to return if the iterator is empty @return the last element of {@code iterator} @since 3.0
490 Returns the empty iterator. <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.
491 @serialData the expected values per key, the number of distinct keys, the number of entries, and the entries in order
492 Adds a new node for the specified key-value pair before the specified {@code nextSibling} element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling} is specified, it MUST be for a node for the same {@code key}!
493 Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing {@code sequence} as a sequence of Unicode code units. The view does not support any modification operations, but reflects any changes to the underlying character sequence. @param sequence the character sequence to view as a {@code List} of characters @return an {@code List<Character>} view of the character sequence @since 7.0
494 An implementation of {@link List#indexOf(Object)}.
495 An implementation of {@link List#lastIndexOf(Object)}.
496 Finds the next entry in the current table. Returns {@code true} if an entry was found.
497 Expands the table if possible.
498 Cleanup collected entries when the lock is available.
499 This method is a convenience for testing. Code should call {@link Segment#getLiveValue} instead.
500 Creates an empty {@code Set} that uses identity to determine equality. It compares object references, instead of calling {@code equals}, to determine whether a provided object matches an element in the set. For example, {@code contains} returns {@code false} when passed an object that equals a set member, but isn't the same instance. This behavior is similar to the way {@code IdentityHashMap} handles key lookups. @since 8.0
501 Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee serial access, it is critical that <b>all</b> access to the backing bimap is accomplished through the returned bimap. <p>It is imperative that the user manually synchronize on the returned map when accessing any of its collection views: {@snippet : BiMap<Long, String> map = Maps.synchronizedBiMap( HashBiMap.<Long, String>create()); ... Set<Long> set = map.keySet(); // Needn't be in synchronized block ... synchronized (map) { // Synchronizing on map, not set! Iterator<Long> it = set.iterator(); // Must be in synchronized block while (it.hasNext()) { foo(it.next()); } } } <p>Failure to follow this advice may result in non-deterministic behavior. <p>The returned bimap will be serializable if the specified bimap is serializable. @param bimap the bimap to be wrapped in a synchronized view @return a synchronized view of the specified bimap
502 Moves an element one level up from a min level to a max level (or vice versa). Returns the new position of the element.
503 Swap {@code actualLastElement} with the conceptually correct last element of the heap. Returns the index that {@code actualLastElement} now resides in. <p>Since the last element of the array is actually in the middle of the sorted structure, a childless aunt node could be smaller, which would corrupt the invariant if this element becomes the new parent of the aunt node. In that case, we first switch the last element with its aunt node, before returning.
504 Advances nextCursor to the index of the first element after {@code c} that is not in {@code skipMe} and returns {@code size()} if there is no such element.
505 An implementation of {@link Multiset#iterator}.
506 Returns a new array of the given length with the same type as a reference array. @param reference any array of the desired type @param length the length of the new array
507 Returns an array containing all of the elements in the specified collection. This method returns the elements in the order they are returned by the collection's iterator. The returned array is "safe" in that no references to it are maintained by the collection. The caller is thus free to modify the returned array. <p>This method assumes that the collection size doesn't change while the method is running. <p>TODO(kevinb): support concurrently modified collections? @param c the collection for which to return an array of elements
508 Returns the least of the specified values according to this ordering. If there are multiple least values, the first of those is returned. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead (but note that it does not guarantee which tied minimum element is returned). @param iterator the iterator whose minimum element is to be determined @throws NoSuchElementException if {@code iterator} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering. @since 11.0
509 Returns the greatest of the specified values according to this ordering. If there are multiple greatest values, the first of those is returned. The iterator will be left exhausted: its {@code hasNext()} method will return {@code false}. <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead (but note that it does not guarantee which tied maximum element is returned). @param iterator the iterator whose maximum element is to be determined @throws NoSuchElementException if {@code iterator} is empty @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this ordering. @since 11.0
510 Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends. @throws ClassCastException if the values are not mutually comparable @throws NoSuchElementException if {@code values} is empty @throws NullPointerException if any of {@code values} is null @since 14.0
511 Creates a thread-safe set backed by a hash map. The set is backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency guarantees. <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The set is serializable. @return a new, empty thread-safe {@code Set} @since 15.0
512 Returns a string representation of this range, such as {@code "[3..5)"} (other examples are listed in the class documentation).
513 Returns the lower endpoint of this range. @throws IllegalStateException if this range is unbounded below (that is, {@link #hasLowerBound()} returns {@code false})
514 Returns the upper endpoint of this range. @throws IllegalStateException if this range is unbounded above (that is, {@link #hasUpperBound()} returns {@code false})
515 @throws IllegalArgumentException if another entry in the bucket has the same key @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash flooding attack
516 Constructs a new entry array where each duplicated key from the original appears only once, at its first position but with its final value. The {@code duplicates} map is modified. @param entries the original array of entries including duplicates @param n the number of valid entries in {@code entries} @param newN the expected number of entries once duplicates are removed @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map will be updated by the method, setting each value to false as soon as the {@link Entry} has been included in the new entry array. @return an array of {@code newN} entries where no key appears more than once.
517 Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is returned. @throws IllegalArgumentException if another entry in the bucket has the same key and {@code throwIfDuplicateKeys} is true @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash flooding attack
518 Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet} with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the resulting set will iterate over elements in their enum definition order, not encounter order. @since 21.0
519 Creates an {@code EnumSet} consisting of all enum values that are not in the specified collection. If the collection is an {@link EnumSet}, this method has the same behavior as {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one element, in order to determine the element type. If the collection could be empty, use {@link #complementOf(Collection, Class)} instead of this method. @param collection the collection whose complement should be stored in the enum set @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present in the given collection @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and contains no elements
520 Creates an {@code EnumSet} consisting of all enum values that are not in the specified collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input collection, as long as the elements are of enum type. @param collection the collection whose complement should be stored in the {@code EnumSet} @param type the type of the elements in the set @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not present in the given collection
521 Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is empty. <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> streams. @see IntStream#findFirst() @throws NullPointerException if the last element of the stream is null
522 Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream is empty. <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> streams. @see LongStream#findFirst() @throws NullPointerException if the last element of the stream is null
523 Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream is empty. <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a> streams. @see DoubleStream#findFirst() @throws NullPointerException if the last element of the stream is null
524 Partitions the contents of buffer in the range [left, right] around the pivot element previously stored in buffer[pivotValue]. Returns the new index of the pivot element, pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in (pivotNewIndex, right] is greater than pivotValue.
525 @serialData key comparator, value comparator, number of distinct keys, and then for each distinct key: the key, number of values for that key, and key values
526 Constructor for use by subclasses.
527 Constructor for use by subclasses.
528 Returns the escaped form of a given literal string, starting at the given index. This method is called by the {@link #escape(String)} method when it discovers that escaping is required. It is protected to allow subclasses to override the fastpath escaping function to inline their escaping test. See {@link CharEscaperBuilder} for an example usage. @param s the literal string to be escaped @param index the index to start escaping from @return the escaped form of {@code string} @throws NullPointerException if {@code string} is null
529 Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests through the {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves to its public interface. @param c the character to escape if necessary @return the replacement string, or {@code null} if no escaping was needed
530 Returns a string that would replace the given character in the specified escaper, or {@code null} if no replacement should be made. This method is intended for use in tests through the {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit themselves to its public interface. @param cp the Unicode code point to escape if necessary @return the replacement string, or {@code null} if no escaping was needed
531 Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible with the directionality of this graph.
532 Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node and updates {@link #successorIterator} to iterate through the successors of {@link #node}.
533 Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.
534 Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.
535 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
536 An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and {@link #successors(Object)}.
537 Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with the directionality of this graph.
538 Iterates in the order {@link #nodeU()}, {@link #nodeV()}.
539 Specifies the order of iteration for the elements of {@link Graph#nodes()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
540 Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}. <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable() stable} order. @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code ElementOrder.unordered()} or {@code ElementOrder.stable()}. @since 29.0
541 Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to {@code graph} will be reflected in the view.
542 Returns a view of {@code network} with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to {@code network} will be reflected in the view.
543 Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other properties remain intact, and further updates to {@code graph} will be reflected in the view.
544 Specifies the order of iteration for the elements of {@link Network#nodes()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
545 Specifies the order of iteration for the elements of {@link Network#edges()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
546 Specifies the order of iteration for the elements of {@link Graph#nodes()}. <p>The default value is {@link ElementOrder#insertion() insertion order}.
547 Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}. <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable() stable} order. @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code ElementOrder.unordered()} or {@code ElementOrder.stable()}. @since 29.0
548 Updates this hasher with the given bytes.
549 Updates this hasher with bytes from the given buffer.
550 Updates the sink with the given number of bytes from the buffer.
551 This is invoked for the last bytes of the input, which are not enough to fill a whole chunk. The passed {@code ByteBuffer} is guaranteed to be non-empty. <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.
552 @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain} instead.
553 Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link BloomFilter} with the specified expected false positive probability. <p>Note that if the {@code Collector} receives significantly more elements than specified, the resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive probability. <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>} is. <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of ensuring proper serialization and deserialization, which is important since {@link #equals} also relies on object identity of funnels. @param funnel the funnel of T's that the constructed {@code BloomFilter} will use @param expectedInsertions the number of expected insertions to the constructed {@code BloomFilter}; must be positive @param fpp the desired false positive probability (must be positive and less than 1.0) @return a {@code Collector} generating a {@code BloomFilter} of the received elements @since 23.0 (but only since 33.4.0 in the Android flavor)
554 Returns the number of bits in the underlying bit array.
555 Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code value}. @param value any {@code long} value @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and {@code value} cast to {@code byte} otherwise
556 Compares the two specified {@code byte} values, treating them as unsigned values between 0 and 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127} because it is seen as having the value of positive {@code 129}. @param a the first {@code byte} to compare @param b the second {@code byte} to compare @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is greater than {@code b}; or zero if they are equal
557 Returns a string representation of {@code x} for the given radix, where {@code x} is treated as unsigned. @param x the value to convert to a string. @param radix the radix to use while working with {@code x} @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @since 13.0
558 Combines the two BitArrays using bitwise OR. <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while this operation is executing, not all of those new 1's may be set in the final state of this LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end of this method.
559 Returns true if the bit changed value.
560 Returns a "Java hash code" for this {@code HashCode} instance; this is well-defined (so, for example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise probably not what you want to use.
561 Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned hexadecimal number in lower case. <p>Note that if the output is considered to be a single hexadecimal number, whether this string is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be surprising for implementations of {@code HashCode} that represent the number in big-endian since everything else in the hashing API uniformly treats multibyte values as little-endian. <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.
562 Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the {@code long} value {@code 0x1213141516171819L}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements
563 Computes intermediate hash of 32 bytes of byte array from the given offset. Results are returned in the output array because when we last measured, this was 12% faster than allocating new arrays every time.
564 Computes intermediate hash of 32 bytes of byte array from the given offset. Results are returned in the output array - this is 12% faster than allocating new arrays every time.
565 Returns the value of this {@code UnsignedInteger} as a {@code long}.
566 Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit quantities. <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0
567 Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit quantities. <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead. @param dividend the dividend (numerator) @param divisor the divisor (denominator) @throws ArithmeticException if divisor is 0
568 Returns a hash function implementing the <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">32-bit murmur3 algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known bug</b> as described in the deprecation text. <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not have the bug. @deprecated This implementation produces incorrect hash values from the {@link HashFunction#hashString} method if the string contains non-BMP characters. Use {@link #murmur3_32_fixed(int)} instead.
569 Returns a hash function implementing the <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">32-bit murmur3 algorithm, x86 variant</a> (little-endian variant), using the given seed value. <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A). <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code HashFunction} returned by the original {@code murmur3_32} method. @since 31.0
570 Returns a hash function implementing the <a href="https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp">128-bit murmur3 algorithm, x64 variant</a> (little-endian variant), using the given seed value. <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).
571 Assigns to {@code input} a "bucket" in the range {@code [0, buckets)}, in a uniform manner that minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h, n)} equals: <ul> <li>{@code n - 1}, with approximate probability {@code 1/n} <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n}) </ul> <p>This method is suitable for the common use case of dividing work among buckets that meet the following conditions: <ul> <li>You want to assign the same fraction of inputs to each bucket. <li>When you reduce the number of buckets, you can accept that the most recently added buckets will be removed first. More concretely, if you are dividing traffic among tasks, you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and {@code consistentHash} will handle it. If, however, you are dividing traffic among servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to take each of the servers offline, {@code consistentHash} will be a poor fit: It provides no way for you to specify which of the three buckets is disappearing. Thus, if your buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo} traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic. </ul> <p>See the <a href="http://en.wikipedia.org/wiki/Consistent_hashing">Wikipedia article on consistent hashing</a> for more information.
572 Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code 0x12131415}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements
573 Copies all bytes from the input stream to the output stream. Does not close or flush either stream. <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the equivalent {@link InputStream#transferTo} method instead. @param from the input stream to read from @param to the output stream to write to @return the number of bytes copied @throws IOException if an I/O error occurs
574 Reads and discards data from the given {@code InputStream} until the end of the stream is reached. Returns the total number of bytes read. Does not close the stream. @since 20.0
575 Process the bytes of the given input stream using the given processor. @param input the input stream to process @param processor the object to which to pass the bytes of the stream @return the result of the byte processor @throws IOException if an I/O error occurs @since 14.0
576 Returns a new {@link ByteArrayDataInput} instance to read from the given {@code ByteArrayInputStream}. The given input stream is not reset before being read from by the returned {@code ByteArrayDataInput}. @since 17.0
577 Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code ByteArrayOutputStream}. The given output stream is not reset before being written to by the returned {@code ByteArrayDataOutput} and new data will be appended to any existing content. <p>Note that if the given output stream was not empty or is modified after the {@code ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will not be honored (the bytes returned in the byte array may not be exactly what was written via calls to {@code ByteArrayDataOutput}). @since 17.0
578 Creates a new input stream that will encode the characters from {@code reader} into bytes using the given character set encoder. @param reader input source @param encoder character set encoder used for encoding chars to bytes @param bufferSize size of internal input and output buffers @throws IllegalArgumentException if bufferSize is non-positive
579 Flips the buffer output buffer so we can start reading bytes from it. If we are starting to drain because there was overflow, and there aren't actually any characters to drain, then the overflow must be due to a small output buffer.
580 Copies all bytes from the readable channel to the writable channel. Does not close or flush either channel. @param from the readable channel to read from @param to the writable channel to write to @return the number of bytes copied @throws IOException if an I/O error occurs
581 Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a linefeed ({@code "\r\n"}). @return a {@code String} containing the contents of the line, not including any line-termination characters, or {@code null} if the end of the stream has been reached. @throws IOException if an I/O error occurs
582 Discards up to {@code n} bytes of data from the input stream. This method will block until either the full amount has been skipped or until the end of the stream is reached, whichever happens first. Returns the total number of bytes skipped.
583 Opens a new {@link Stream} for reading text one line at a time from this source. This method returns a new, independent stream each time it is called. <p>The returned stream is lazy and only reads from the source in the terminal operation. If an I/O error occurs while the stream is reading from the source or when the stream is closed, an {@link UncheckedIOException} is thrown. <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code \n}. If the source's content does not end in a line termination sequence, it is treated as if it does. <p>The caller is responsible for ensuring that the returned stream is closed. For example: {@snippet : try (Stream<String> lines = source.lines()) { lines.map(...) .filter(...) .forEach(...); } } @throws IOException if an I/O error occurs while opening the stream @since 22.0 (but only since 33.4.0 in the Android flavor)
584 Reads and discards data from the given {@code Readable} until the end of the stream is reached. Returns the total number of chars read. Does not close the stream. @since 20.0
585 Creates a new instance that will read lines from the given {@code Readable} object.
586 Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than propagating it. <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that a failure that occurs when closing the stream indicates a meaningful problem such as a failure to flush all bytes to the underlying resource. @param inputStream the input stream to be closed, or {@code null} in which case this method does nothing @since 17.0
587 Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than propagating it. <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that's being used only for reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource. @param reader the reader to be closed, or {@code null} in which case this method does nothing @since 17.0
588 Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if so.
589 Calls {@link #close} if not already closed, and then resets this object back to its initial state, for reuse. If data was buffered to a file, it will be deleted. @throws IOException if an I/O error occurred while deleting the file buffer
590 Returns a new {@link CharSource} for reading character data from the given file using the given character set. @since 14.0
591 Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the signature. @param flushable the {@code Flushable} object to be flushed.
592 Checks that the given options allow an insecure delete, throwing an exception if not.
593 Returns a new CharBuffer identical to buf, except twice the capacity.
594 Process additional characters from the stream. When a line separator is found the contents of the line and the line separator itself are passed to the abstract {@link #handleLine} method. @param cbuf the character buffer to process @param off the offset into the buffer @param len the number of characters to process @throws IOException if an I/O error occurs @see #finish
595 Subclasses must call this method after finishing character processing, in order to ensure that any unterminated line in the buffer is passed to {@link #handleLine}. @throws IOException if an I/O error occurs
596 Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()}, except using little-endian byte order. @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in little-endian byte order @throws IOException if an I/O error occurs
597 Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian byte order. @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian byte order @throws IOException if an I/O error occurs
598 Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using little-endian byte order. @return the next eight bytes of the input stream, interpreted as a {@code long} in little-endian byte order @throws IOException if an I/O error occurs
599 Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using little-endian byte order. @throws IOException if an I/O error occurs
600 Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using little-endian byte order. @throws IOException if an I/O error occurs
601 Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using little-endian byte order. @throws IOException if an I/O error occurs
602 Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
603 Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null if no exceptions were thrown.
604 Closes the current input stream and opens the next one, if any.
605 Closes the current reader and opens the next one, if any.
606 Returns a {@link CharSource} that reads from the given URL using the given character set. @since 14.0
607 Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR}, then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}. @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a} is not an integer multiple of {@code b}
608 Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! > Double.MAX_VALUE}. <p>The result is within 1 ulp of the true value. @throws IllegalArgumentException if {@code n < 0}
609 Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)} time. <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow. @throws IllegalArgumentException if {@code k < 0}
610 Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b == 0}. @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}
611 Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}. @throws IllegalArgumentException if {@code n < 0}
612 Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}. @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}
613 Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)} time. @throws IllegalArgumentException if {@code k < 0}
614 Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}. @throws IllegalArgumentException if {@code n < 0}
615 Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be finite. Call either {@link LinearTransformationBuilder#and} or {@link LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.
616 Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other. <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance || Double.valueOf(a).equals(Double.valueOf(b))}. <p>Notable special cases include: <ul> <li>All NaNs are fuzzily equal. <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal. <li>Positive and negative zero are always fuzzily equal. <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a} and {@code b} are fuzzily equal if and only if {@code a == b}. <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal. <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves. </ul> <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an equivalence relation and <em>not</em> suitable for use in {@link Object#equals} implementations. @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN @since 13.0
617 Rounds {@code x} to a {@code double}.
618 Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, CEILING))}. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException of the next-higher power of two is not representable as an {@code int}, i.e. when {@code x > 2^30} @since 20.0
619 Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, FLOOR))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
620 Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of two
621 Returns the square root of {@code x}, rounded with the specified rounding mode. @throws IllegalArgumentException if {@code x < 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code sqrt(x)} is not an integer
622 Returns the sum of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#addExact(int, int)} instead. @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic
623 Returns the difference of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#subtractExact(int, int)} instead. @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic
624 Returns the product of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#multiplyExact(int, int)} instead. @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic
625 Returns true if n is a strong probable prime relative to the specified base.
626 Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, CEILING))}. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException of the next-higher power of two is not representable as a {@code long}, i.e. when {@code x > 2^62} @since 20.0
627 Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code checkedPow(2, log2(x, FLOOR))}. @throws IllegalArgumentException if {@code x <= 0} @since 20.0
628 Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode. @throws IllegalArgumentException if {@code x <= 0} @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x} is not a power of two
629 Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b == 0}. @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}
630 Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x % m}, which might be negative. <p>For example: {@snippet : mod(7, 4) == 3 mod(-7, 4) == 1 mod(-1, 4) == 3 mod(-8, 4) == 0 mod(8, 4) == 0 } @throws ArithmeticException if {@code m <= 0} @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"> Remainder Operator</a>
631 Returns the sum of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#addExact(long, long)} instead. @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic
632 Returns the difference of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#subtractExact(long, long)} instead. @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic
633 Returns the product of {@code a} and {@code b}, provided it does not overflow. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link Math#multiplyExact(long, long)} instead. @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic
634 Returns the number of pairs in the dataset.
635 {@inheritDoc} <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating point values. Two instances are guaranteed to be considered equal if one is copied from the other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without adding any values in between the two calls, or if one is obtained from the other after round-tripping through java serialization. However, floating point rounding errors mean that it may be false for some instances where the statistics are mathematically equal, including instances constructed from the same values in a different order... or (in the general case) even in the same order. (It is guaranteed to return true for instances constructed from the same values in the same order if {@code strictfp} is in effect, or if the system architecture guarantees {@code strictfp}-like semantics.)
636 Creates a new accumulator.
637 Calculates the new value for the accumulated mean when a value is added, in the case where at least one of the previous mean and the value is non-finite.
638 Returns the number of pairs in the dataset.
639 Specifies the computation of a median (i.e. the 1st 2-quantile).
640 Specifies the computation of quartiles (i.e. 4-quantiles).
641 Specifies the computation of percentiles (i.e. 100-quantiles).
642 Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if necessary) that that pivot value appears at the start of the slice i.e. at {@code from}. Expects that {@code from} is strictly less than {@code to}.
643 Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}. <p><b>Note:</b> No guarantees are made regarding stability of the representation between versions. @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.
644 Returns an immutable snapshot of the current statistics.
645 Get the current port number, failing if no port is defined. @return a validated port number, in the range [0..65535] @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)} to prevent this from occurring.
646 Returns the current port number, with a default if no port is defined.
647 Rebuild the host:port string, including brackets if necessary.
648 Provide a default port if the parsed string contained only a host. <p>You can chain this after {@link #fromString(String)} to include a port in case the port was omitted from the input string. If a port was already provided, then this method is a no-op. @param defaultPort a port number, from [0..65535] @return a HostAndPort instance, guaranteed to have a defined port.
649 Returns the string representation of an {@link InetAddress}. <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6 addresses, the output follows <a href="http://tools.ietf.org/html/rfc5952">RFC 5952</a> section 4. The main difference is that this method uses "::" for zero compression, while Java's version uses the uncompressed form (except on Android, where the zero compression is also done). The other difference is that this method outputs any scope ID in the format that it was provided at creation time, while Android may always output it as an interface name, even if it was supplied as a numeric ID. <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses such as "::c000:201". @param ip {@link InetAddress} to be converted to an address string @return {@code String} containing the text-formatted IP address @since 10.0
650 Evaluates whether the argument is an ISATAP address. <p>From RFC 5214: "ISATAP interface identifiers are constructed in Modified EUI-64 format [...] by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit IPv4 address in network byte order [...]" <p>For more on ISATAP addresses see section 6.1 of <a target="_parent" href="http://tools.ietf.org/html/rfc5214#section-6.1">RFC 5214</a>. @param ip {@link Inet6Address} to be examined for ISATAP address format @return {@code true} if the argument is an ISATAP address
651 Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address types that contain an embedded IPv4 address. <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial spoofability. With other transition addresses spoofing involves (at least) infection of one's BGP routing table. @param ip {@link Inet6Address} to be examined for embedded IPv4 client address @return {@code true} if there is an embedded IPv4 client address @since 7.0
652 Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead. @param collection a collection of {@code Boolean} objects @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null
653 Returns the index of the first appearance of the value {@code target} in {@code array}. <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}. @param array an array of {@code boolean} values, possibly empty @param target a primitive {@code boolean} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
654 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code boolean} values, possibly empty @param target a primitive {@code boolean} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
655 Returns an array containing each value of {@code collection}, converted to a {@code byte} value in the manner of {@link Number#byteValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)
656 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code byte} values, possibly empty @param target a primitive {@code byte} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
657 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code byte} values, possibly empty @param target a primitive {@code byte} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
658 Copies a collection of {@code Character} instances into a new array of primitive {@code char} values. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Character} objects @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null
659 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code char} values, possibly empty @param target a primitive {@code char} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
660 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code char} values, possibly empty @param target a primitive {@code char} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
661 Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\u5432'}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements
662 Returns an unspecified hash code for the contents of this immutable array.
663 Returns an array containing each value of {@code collection}, converted to a {@code double} value in the manner of {@link Number#doubleValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Double>} before 12.0)
664 Returns the index of the first appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code double} values, possibly empty @param target a primitive {@code double} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
665 Returns the index of the last appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code double} values, possibly empty @param target a primitive {@code double} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
666 Returns an array containing each value of {@code collection}, converted to a {@code float} value in the manner of {@link Number#floatValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Float>} before 12.0)
667 Returns the index of the first appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code float} values, possibly empty @param target a primitive {@code float} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
668 Returns the index of the last appearance of the value {@code target} in {@code array}. Note that this always returns {@code -1} when {@code target} is {@code NaN}. @param array an array of {@code float} values, possibly empty @param target a primitive {@code float} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
669 Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to {@code initialCapacity} values without resizing. The returned builder is not thread-safe. <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the {@link ImmutableDoubleArray} that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
670 Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial capacity. The returned builder is not thread-safe. <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely occupy more memory than necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
671 Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code asList().indexOf(target)}.
672 Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code asList().lastIndexOf(target)}.
673 Returns a string representation of this array in the same form as {@link Arrays#toString(double[])}, for example {@code "[1, 2, 3]"}.
674 Returns {@code true} if {@code target} is present at any index in this array. Equivalent to {@code asList().contains(target)}.
675 Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to {@code initialCapacity} values without resizing. The returned builder is not thread-safe. <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the {@link ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
676 Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial capacity. The returned builder is not thread-safe. <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy more memory than necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
677 Returns an unspecified hash code for the contents of this immutable array.
678 Returns a string representation of this array in the same form as {@link Arrays#toString(int[])}, for example {@code "[1, 2, 3]"}.
679 Returns {@code true} if {@code target} is present at any index in this array. Equivalent to {@code asList().contains(target)}.
680 Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to {@code initialCapacity} values without resizing. The returned builder is not thread-safe. <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number of values that will be added, if that knowledge is readily available. It is better to guess a value slightly too high than slightly too low. If the value is not exact, the {@link ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
681 Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial capacity. The returned builder is not thread-safe. <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely occupy more memory than necessary; to trim memory usage, build using {@code builder.build().trimmed()}.
682 Returns an unspecified hash code for the contents of this immutable array.
683 Returns a string representation of this array in the same form as {@link Arrays#toString(long[])}, for example {@code "[1, 2, 3]"}.
684 Returns an array containing each value of {@code collection}, converted to a {@code int} value in the manner of {@link Number#intValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)
685 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code int} values, possibly empty @param target a primitive {@code int} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
686 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code int} values, possibly empty @param target a primitive {@code int} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
687 Returns an array containing each value of {@code collection}, converted to a {@code long} value in the manner of {@link Number#longValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Long>} before 12.0)
688 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code long} values, possibly empty @param target a primitive {@code long} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
689 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code long} values, possibly empty @param target a primitive {@code long} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
690 Parses the specified string as a signed long value using the specified radix. The ASCII character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign. <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns {@code null} if non-ASCII digits are present in the string. <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link Integer#parseInt(String)} accepts them. @param string the string representation of a long value @param radix the radix to use when parsing @return the long value represented by {@code string} using {@code radix}, or {@code null} if {@code string} has a length of zero or cannot be parsed as a long value @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX} @throws NullPointerException if {@code string} is {@code null} @since 19.0
691 Returns an array containing each value of {@code collection}, converted to a {@code short} value in the manner of {@link Number#shortValue}. <p>Elements are copied from the argument collection as if by {@code collection.toArray()}. Calling this method is as thread-safe as calling that method. @param collection a collection of {@code Number} instances @return an array containing the same values as {@code collection}, in the same order, converted to primitives @throws NullPointerException if {@code collection} or any of its elements is null @since 1.0 (parameter was {@code Collection<Short>} before 12.0)
692 Returns the index of the first appearance of the value {@code target} in {@code array}. @param array an array of {@code short} values, possibly empty @param target a primitive {@code short} value @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
693 Returns the index of the last appearance of the value {@code target} in {@code array}. @param array an array of {@code short} values, possibly empty @param target a primitive {@code short} value @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no such index exists.
694 Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}. <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more flexibility at little cost in readability. @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements
695 Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable to do so.
696 Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual. <p>If the argument is nonnegative, the returned result will be equal to {@code bits}, otherwise, the result will be equal to {@code 2^32 + bits}. <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead. @since 14.0
697 Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code 10} is used.
698 Returns a string representation of x, where x is treated as unsigned. <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.
699 Compares the two specified {@code int} values, treating them as unsigned values between {@code 0} and {@code 2^32 - 1} inclusive. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the equivalent {@link Integer#compareUnsigned(int, int)} method instead. @param a the first unsigned {@code int} to compare @param b the second unsigned {@code int} to compare @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is greater than {@code b}; or zero if they are equal
700 Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is interpreted as a normal bit, and all other bits are treated as usual. <p>If the argument is nonnegative, the returned result will be equal to {@code bits}, otherwise, the result will be equal to {@code 2^64 + bits}. <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)} instead. @since 14.0
701 Compares the two specified {@code long} values, treating them as unsigned values between {@code 0} and {@code 2^64 - 1} inclusive. <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the equivalent {@link Long#compareUnsigned(long, long)} method instead. @param a the first unsigned {@code long} to compare @param b the second unsigned {@code long} to compare @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is greater than {@code b}; or zero if they are equal
702 Returns the unsigned {@code long} value represented by a string with the given radix. <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead. @param string the string containing the unsigned {@code long} representation to be parsed. @param radix the radix to use while parsing {@code string} @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link Character#MAX_RADIX}. @throws NullPointerException if {@code string} is null (in contrast to {@link Long#parseLong(String)})
703 {@inheritDoc} <ul> <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode} <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString} <li>{@code proxy.equals(argument)} returns true if: <ul> <li>{@code proxy} and {@code argument} are of the same type <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link InvocationHandler} of {@code argument} </ul> <li>other method calls are dispatched to {@link #handleInvocation}. </ul>
704 Returns the package name of the class, without attempting to load the class. <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but does not require the class (or package) to be loaded. <p>But note that this method may behave differently for a class in the default package: For such classes, this method always returns an empty string. But under some version of Java, {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code class.getPackage()} returns {@code null}.
705 Returns the package name of {@code clazz} according to the Java Language Specification (section 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without attempting to define the {@link Package} and hence load files.
706 Returns a {@link ByteSource} view of the resource from which its bytes can be read. @throws NoSuchElementException if the resource cannot be loaded through the class loader, despite physically existing in the class path. @since 20.0
707 Returns true if the element is public.
708 Returns true if the element is protected.
709 Returns true if the element is private.
710 Returns true if the element is static.
711 Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}. <p>Note that a method may still be effectively "final", or non-overridable when it has no {@code final} keyword. For example, it could be private, or it could be declared by a final class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.
712 Returns true if the method is abstract.
713 Returns true if the element is native.
714 Returns true if the method is synchronized.
715 Returns true if the field is volatile.
716 Returns true if the field is transient.
717 Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the same {@code GenericDeclaration}.
718 Returns an instance of type token that wraps {@code type}.
719 Returns an instance of type token that wraps {@code type}.
720 Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.
721 {@inheritDoc} @since 10.0
722 If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts) the given future (if available).
723 @return a {@code ListenableFuture} representing pending completion of the task @throws RejectedExecutionException {@inheritDoc}
724 Schedules the task to run on the provided executor on behalf of the service.
725 Schedules the task to run on the provided executor on behalf of the service.
726 Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}. @since 32.1.0
727 Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}. @since 32.1.0
728 Duration-based overload of {@link #awaitTermination(long, TimeUnit)}. @since 32.1.0
729 Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}. @since 29.0
730 Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}. @since 29.0
731 Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}. @since 29.0
732 Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more than the given time. @param timeout the maximum time to wait @throws TimeoutException if the service has not reached the given state within the deadline @throws IllegalStateException if the service reaches a state from which it is not possible to enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code State#TERMINATED} when this method is called then this will throw an IllegalStateException. @since 28.0
733 Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED terminated} or {@link Service.State#FAILED failed}) for no more than the given time. @param timeout the maximum time to wait @throws TimeoutException if the service has not reached the given state within the deadline @throws IllegalStateException if the service {@linkplain State#FAILED fails}. @since 28.0
734 Returns an instance of {@code interfaceType} that delegates all method calls to the {@code target} object, enforcing the specified time limit on each call. This time-limited delegation is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link Object#toString}. <p>If the target method call finishes before the limit is reached, the return value or exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is reached, the proxy will attempt to abort the call to the target, and will throw an {@link UncheckedTimeoutException} to the caller. <p>It is important to note that the primary purpose of the proxy object is to return control to the caller when the timeout elapses; aborting the target method call is of secondary concern. The particular nature and strength of the guarantees made by the proxy is implementation-dependent. However, it is important that each of the methods on the target object behaves appropriately when its thread is interrupted. <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code: <pre> TimeLimiter limiter = . . .; TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50)); try { return proxy.someMethod(); } catch (UncheckedTimeoutException e) { return DEFAULT_VALUE; } </pre> @param target the object to proxy @param interfaceType the interface you wish the returned proxy to implement @param timeout the maximum length of time that callers are willing to wait on each method call to the proxy @return a time-limiting proxy @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or annotation type, rather than an interface @since 28.0
735 Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a {@link TimeoutException} to the caller. @param callable the Callable to execute @param timeout the maximum length of time to wait @return the result returned by the Callable @throws TimeoutException if the time limit is reached @throws InterruptedException if the current thread was interrupted during execution @throws ExecutionException if {@code callable} throws a checked exception @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException} @throws ExecutionError if {@code callable} throws an {@code Error} @since 28.0
736 Invokes a specified Callable, timing out after the specified time limit. If the target method call finishes before the limit is reached, the return value or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to the target, and throw a {@link TimeoutException} to the caller. <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will ignore interrupts on the current thread. @param callable the Callable to execute @param timeout the maximum length of time to wait @return the result returned by the Callable @throws TimeoutException if the time limit is reached @throws ExecutionException if {@code callable} throws a checked exception @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException} @throws ExecutionError if {@code callable} throws an {@code Error} @since 28.0
737 Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a {@link TimeoutException} to the caller. @param runnable the Runnable to execute @param timeout the maximum length of time to wait @throws TimeoutException if the time limit is reached @throws InterruptedException if the current thread was interrupted during execution @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException} @throws ExecutionError if {@code runnable} throws an {@code Error} @since 28.0
738 Invokes a specified Runnable, timing out after the specified time limit. If the target method run finishes before the limit is reached, this method returns or a wrapped exception is propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and throw a {@link TimeoutException} to the caller. <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will ignore interrupts on the current thread. @param runnable the Runnable to execute @param timeout the maximum length of time to wait @throws TimeoutException if the time limit is reached @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException} @throws ExecutionError if {@code runnable} throws an {@code Error} @since 28.0
739 Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp}, {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService} instance. This method is guaranteed to only be called once. <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED fails}.
740 Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the throwable did not cause this future to fail, and it is the first time we've seen that particular Throwable.
741 Returns the String representation of the current value. @return the String representation of the current value
742 Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive conversion.
743 Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive conversion.
744 Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive conversion.
745 Returns the value of this {@code AtomicDouble} as a {@code double}.
746 Saves the state to a stream (that is, serializes it). @serialData The current value is emitted (a {@code double}).
747 Reconstitutes the instance from a stream (that is, deserializes it).
748 Atomically updates the current value with the results of applying the given function to the current and given values. @param x the update value @param accumulatorFunction the accumulator function @return the previous value @since 31.1
749 Atomically updates the current value with the results of applying the given function to the current and given values. @param x the update value @param accumulatorFunction the accumulator function @return the updated value @since 31.1
750 Returns the String representation of the current values of array. @return the String representation of the current values of array
751 Saves the state to a stream (that is, serializes it). @serialData The length of the array is emitted (int), followed by all of its elements (each a {@code double}) in the proper order.
752 Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values. @param i the index to update @param x the update value @param accumulatorFunction the accumulator function @return the previous value @since 31.1
753 Atomically updates the element at index {@code i} with the results of applying the given function to the current and given values. @param i the index to update @param x the update value @param accumulatorFunction the accumulator function @return the updated value @since 31.1
754 Atomically remove {@code key} from the map iff its associated value is 0. @since 20.0
755 Returns a live, read-only view of the map backing this {@code AtomicLongMap}.
756 If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false. <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is currently in the map, or if {@code key} is not in the map at all.
757 Marks this step as the last step in the {@code ClosingFuture} pipeline. <p>The returned {@link Future} is completed when the pipeline's computation completes, or when the pipeline is cancelled. <p>All objects the pipeline has captured for closing will begin to be closed asynchronously <b>after</b> the returned {@code Future} is done: the future completes before closing starts, rather than once it has finished. <p>After calling this method, you may not call {@link #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other derivation method on the original {@code ClosingFuture} instance. @return a {@link Future} that represents the final value or exception of the pipeline
758 Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done, {@code receiver} will be called with an object that contains the result of the operation. The receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use. <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or any other derivation method on the original {@code ClosingFuture} instance. @param consumer a callback whose method will be called (using {@code executor}) when this operation is done
759 Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to execute. If execution has already begun, the listener is executed immediately. <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener} documentation.
760 Runs this execution list, executing all existing pairs in the order they were added. However, note that listeners added after this point may be executed before those previously added, and note that the execution order of all listeners is ultimately chosen by the implementations of the supplied executors. <p>This method is idempotent. Calling it several times in parallel is semantically equivalent to calling it exactly once. @since 10.0 (present in 1.0 as {@code run})
761 Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code Future} fails with the given {@code exceptionType}, from the result provided by the {@code fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an exception is thrown, this exception is used as the result of the output {@code Future}. <p>Usage examples: {@snippet : // Falling back to a zero counter in case an exception happens when processing the RPC to fetch // counters. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, x -> immediateFuture(0), directExecutor()); } <p>The fallback can also choose to propagate the original exception when desired: {@snippet : // Falling back to a zero counter only in case the exception was a // TimeoutException. ListenableFuture<Integer> faultTolerantFuture = fetchCounters().catchingAsync( FetchException.class, e -> { if (omitDataOnFetchFailure) { return immediateFuture(0); } throw e; }, directExecutor()); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code Future}.) <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #transform}. @param exceptionType the exception type that triggers use of {@code fallback}. The exception type is matched against the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a different kind of exception, that exception itself. To avoid hiding bugs and other unrecoverable errors, callers should prefer more specific types, avoiding {@code Throwable.class} in particular. @param fallback the {@link AsyncFunction} to be called if the input fails with the expected exception type. The function's argument is the input's exception. "The input's exception" means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a different kind of exception, that exception itself. @param executor the executor that runs {@code fallback} if the input fails
762 Returns a new {@code Future} whose result is asynchronously derived from the result of this {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the same exception (and the function is not invoked). <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced by applying the given {@code AsyncFunction} to the result of the original {@code Future}. Example usage: {@snippet : FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query)); ListenableFuture<QueryResult> queryFuture = rowKeyFuture.transformAsync(dataService::readFuture, executor); } <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See the discussion in the {@link #addListener} documentation. All its warnings about heavyweight listeners are also applicable to heavyweight functions passed to this method. (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside {@code AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for completing the returned {@code Future}.) <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the input future and that of the future returned by the chain function. That is, if the returned {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the other two is cancelled, the returned {@code Future} will receive a callback in which it will attempt to cancel itself. <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}. @param function A function to transform the result of this future to the result of the output future @param executor Executor to run the function in. @return A future that holds result of the function (if the input succeeded) or the original input's failure (if not)
763 Creates a {@code ListenableFuture} which has its value set immediately upon construction. The getters just return the value. This {@code Future} can't be canceled or timed out and its {@code isDone()} method always returns {@code true}.
764 Returns a {@code ListenableFuture} which has an exception set immediately upon construction. <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always returns {@code true}. Calling {@code get()} will immediately throw the provided {@code Throwable} wrapped in an {@code ExecutionException}.
765 Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that {@code isCancelled()} always returns {@code true}. @since 14.0
766 Returns the ClassValue-using validator, or falls back to the "weak Set" implementation if unable to do so.
767 Dispatches all events enqueued prior to this call, serially and in order, for every listener. <p>Note: this method is idempotent and safe to call from any thread
768 Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code Monitor(false)}.
769 Enters this monitor. Blocks at most the given time, and may be interrupted. @return whether the monitor was entered @throws InterruptedException if interrupted while waiting @since 28.0 (but only since 33.4.0 in the Android flavor)
770 Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the lock, but does not wait for the guard to be satisfied, and may be interrupted. @return whether the monitor was entered, which guarantees that the guard is now satisfied @since 28.0 (but only since 33.4.0 in the Android flavor)
771 Queries whether any threads are waiting for the given guard to become satisfied. Note that because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee that the guard becoming satisfied in the future will awaken any threads. This method is designed primarily for use in monitoring of the system state.
772 Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully unlikely) event that isSatisfied() throws.
773 Shuts down the given executor service gradually, first disabling new submissions and later, if necessary, cancelling remaining tasks. <p>The method takes the following steps: <ol> <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks. <li>awaits executor service termination for half of the specified timeout. <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling pending tasks and interrupting running tasks. <li>awaits executor service termination for the other half of the specified timeout. </ol> <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link ExecutorService#shutdownNow()} and returns. <p>For a version of this method that waits <i>indefinitely</i>, use {@link ExecutorService#close}. @param service the {@code ExecutorService} to shut down @param timeout the maximum time to wait for the {@code ExecutorService} to terminate @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false} if the call timed out or was interrupted @since 28.0 (but only since 33.4.0 in the Android flavor)
774 Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
775 Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond} argument provided in the factory method that constructed the {@code RateLimiter}. Currently throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not observe the new rate; only subsequent requests will. <p>Note though that, since each request repays (by waiting, if necessary) the cost of the <i>previous</i> request, this means that the very next request after an invocation to {@code setRate} will not be affected by the new rate; it will pay the cost of the previous request, which is in terms of the previous rate. <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of 20 seconds after this method invocation. @param permitsPerSecond the new stable rate of this {@code RateLimiter} @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero
776 Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is configured with. The initial value of this is the same as the {@code permitsPerSecond} argument passed in the factory method that produced this {@code RateLimiter}, and it is only updated after invocations to {@linkplain #setRate}.
777 Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.
778 Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly. <p>Similar methods: <ul> <li>To retrieve a result from a {@code Future} that is already done, use {@link Futures#getDone Futures.getDone}. <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}. <li>To get uninterruptibility and remove checked exceptions, use {@link Futures#getUnchecked}. </ul> @throws ExecutionException if the computation threw an exception @throws CancellationException if the computation was cancelled @throws TimeoutException if the wait timed out @since 28.0 (but only since 33.4.0 in the Android flavor)
779 Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write locks. Every lock is reentrant. @param stripes the minimum number of stripes (locks) required @return a new {@code Striped<ReadWriteLock>}
780 Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock is reentrant. @param stripes the minimum number of stripes (locks) required @return a new {@code Striped<Lock>}
781 Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores, with the specified number of permits. @param stripes the minimum number of stripes (semaphores) required @param permits the number of permits in each semaphore @return a new {@code Striped<Semaphore>}
782 Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced read-write locks. Every lock is reentrant. @param stripes the minimum number of stripes (locks) required @return a new {@code Striped<ReadWriteLock>}
783 Returns a new thread factory using the options supplied during the building process. After building, it is still possible to change the options used to build the ThreadFactory and/or build again. State is not shared amongst built instances. @return the fully constructed {@link ThreadFactory}
784 Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code Runnable}, and arrange that {@code get} will return the given result on successful completion. @param runnable the runnable task @param result the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: {@code ListenableFuture<?> f = ListenableFutureTask.create(runnable, null)}
785 Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
786 Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
787 Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1, timeout, unit)} uninterruptibly. @since 18.0
788 Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits, timeout, unit)} uninterruptibly. @since 28.0 (but only since 33.4.0 in the Android flavor)
789 Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)} uninterruptibly. @since 30.0 (but only since 33.4.0 in the Android flavor)
790 Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit) awaitTermination(long, TimeUnit)} uninterruptibly. @since 30.0 (but only since 33.4.0 in the Android flavor)
791 Returns a PublicSuffixType of the right type according to the given code
