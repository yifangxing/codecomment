file_path,Name,full_name,Start Line,End Line,Comment,Pre_Comment,child Name,domain,inner_method,node_level
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,<init>,com.google.common.base.Absent:<init>(),36,36,"/**
* Private constructor to prevent instantiation of this utility class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,<init>,com.google.common.base.Present:<init>(java.lang.Object),31,33,"/**
* Initializes the presenter with a given reference.
* @param reference the object being presented
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(java.lang.Object),48,51,"/**
* Returns a value wrapped in an Optional if it's not the default value.
* @param defaultValue the default value to use when not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Supplier),59,63,"/**
* Wraps a Supplier to handle potential null returns.
* @param supplier provider of the value or null
* @return value from supplier or null if supplier returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter$IdentityConverter:doAndThen(com.google.common.base.Converter),581,584,"/**
* Returns a new instance of the converter with the mask applied.
* @param otherConverter the original converter to modify
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convertAll,com.google.common.base.Converter:convertAll(java.lang.Iterable),270,291,"/**
* Transforms an iterable of A to an iterable of B, applying the FUNC_MASK operation.
* @param fromIterable input iterable of type A
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(java.lang.Object),45,49,"/**
* Returns a functional mask with the specified default value.
* @param defaultValue fallback value if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(com.google.common.base.Ticker),145,147,"/**
* Initializes stopwatch with a Ticker instance.
* @param ticker Ticker object to monitor elapsed time
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderRowsBy,com.google.common.collect.ImmutableTable$Builder:orderRowsBy(java.util.Comparator),203,207,"/**
* Sets the row comparator for the builder.
* @param rowComparator Comparator to sort rows by
*/",Specifies the ordering of the generated table's rows.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderColumnsBy,com.google.common.collect.ImmutableTable$Builder:orderColumnsBy(java.util.Comparator),210,214,"/**
* Sets a custom comparator for columns.
* @param columnComparator comparator to use when sorting columns
*/",Specifies the ordering of the generated table's columns.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,mergeSorted,"com.google.common.collect.Iterables:mergeSorted(java.lang.Iterable,java.util.Comparator)",1070,1083,"/**
* Flattens and sorts a nested iterable of objects using the provided comparator.
* @param iterables nested iterable of objects
* @param comparator sorting comparator for objects
* @return unmodifiable sorted iterable of objects or empty if input is null
*/","* Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries
   * will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterables} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterables}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,indexOf,"com.google.common.collect.Iterators:indexOf(java.util.Iterator,com.google.common.base.Predicate)",801,811,"/**
* Finds the index of the first element matching a predicate in an iterator.
* @param iterator iterable collection of elements
* @param predicate condition to match
* @return index of matching element, or -1 if not found
*/","* Returns the index in {@code iterator} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterator has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will
   * return {@code false}. Otherwise, the iterator will be set to the element which satisfies the
   * {@code predicate}.
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(java.util.Comparator),384,394,"/**
* Creates a multimap builder with a sorted set as the value collection.
* @param comparator key comparison function
*/","* Uses a {@link TreeSet} ordered by the specified comparator to store value collections.
     *
     * <p>Multimaps generated by the resulting builder will not be serializable if {@code
     * comparator} is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:enumSetValues(java.lang.Class),397,409,"/**
* Creates a SetMultimapBuilder with the given enum value class.
* @param valueClass Class of enum values
*/",Uses an {@link EnumSet} to store value collections.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,union,"com.google.common.collect.Sets:union(java.util.Set,java.util.Set)",830,906,"/**
* Computes the union of two sets, merging their elements.
*@param set1 first set to merge
*@param set2 second set to merge
*@return SetView representing the merged set
*/","* Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all
   * elements that are contained in either backing set. Iterating over the returned set iterates
   * first over all the elements of {@code set1}, then over each element of {@code set2}, in order,
   * that is not contained in {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,intersection,"com.google.common.collect.Sets:intersection(java.util.Set,java.util.Set)",935,1004,"/**
* Returns a SetView containing common elements between two sets.
* @param set1 first set to compare
* @param set2 second set to compare
*/","* Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains
   * all elements that are contained by both backing sets. The iteration order of the returned set
   * matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of
   * the two sets. If you have reason to believe one of your sets will generally be smaller than the
   * other, pass it first. Unfortunately, since this method sets the generic type of the returned
   * set based on the type of the first set passed, this could in rare cases force you to make a
   * cast, for example:
   *
   * {@snippet :
   * Set<Object> aFewBadObjects = ...
   * Set<String> manyBadStrings = ...
   *
   * // impossible for a non-String to be in the intersection
   * SuppressWarnings(""unchecked"")
   * Set<String> badStrings = (Set) Sets.intersection(
   *     aFewBadObjects, manyBadStrings);
   * }
   *
   * <p>This is unfortunate, but should come up only very rarely.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,difference,"com.google.common.collect.Sets:difference(java.util.Set,java.util.Set)",1016,1080,"/**
* Computes the difference between two sets, retaining elements from set1 that are not in set2.
* @param set1 source set
* @param set2 set to exclude from set1
* @return SetView containing set1 elements not in set2
*/","* Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains
   * all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2}
   * may also contain elements not present in {@code set1}; these are simply ignored. The iteration
   * order of the returned set matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,symmetricDifference,"com.google.common.collect.Sets:symmetricDifference(java.util.Set,java.util.Set)",1093,1160,"/**
* Computes the symmetric difference between two sets.
* @param set1 first input set
* @param set2 second input set
* @return SetView object representing the symmetric difference
*/","* Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set
   * contains all elements that are contained in either {@code set1} or {@code set2} but not in
   * both. The iteration order of the returned set is undefined.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,merge,"com.google.common.collect.TableCollectors$MutableCell:merge(java.lang.Object,java.util.function.BinaryOperator)",197,200,"/**
* Merges input values using a specified binary operator.
* @param value the first operand
* @param mergeFunction the binary operation to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",51,79,"/**
* Creates a collector for aggregating data into an immutable table.
* @param rowFunction function to extract row key
* @param columnFunction function to extract column key
* @param valueFunction function to extract value
* @param mergeFunction function to merge values in case of duplicates
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean[])",186,203,"/**
* Finds the first occurrence of a boolean array within another.
* @param array The search array
* @param target The target array to find
* @return Index of the found array or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte[])",116,133,"/**
* Searches array for first occurrence of target.
* @param array byte array to search
* @param target target byte sequence to find
* @return index of target if found, -1 otherwise
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char[])",174,191,"/**
* Finds the first occurrence of a substring in an array.
* @param array search array
* @param target substring to find
* @return index of match or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double[])",160,177,"/**
* Finds the first occurrence of a double[] in another array.
* @param array primary array to search
* @param target array to find within array
* @return index of first match or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float[])",157,174,"/**
* Finds the index of the first occurrence of the target array within the given array.
* @param array input array to search
* @param target array to find
* @return index if found, -1 otherwise
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int[])",184,201,"/**
* Finds the index where array matches target, or returns -1 if no match.
* @param array input array to search
* @param target array to find in array
* @return index of first match, or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long[])",145,162,"/**
* Finds the first occurrence of a target sub-array in a given array.
* @param array source array
* @param target target sub-array to search for
* @return index of first match (>= 0) or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short[])",178,195,"/**
* Finds the first occurrence of a short array within another.
* @param array search array
* @param target array to find
* @return index of match or -1 if not found
*/","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,addListener,"com.google.common.util.concurrent.ImmediateFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",41,60,"/**
* Executes a Runnable using an Executor and logs any exceptions.
* @param listener the Runnable to execute
* @param executor the Executor to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor$Guard:<init>(com.google.common.util.concurrent.Monitor),318,321,"/**
* Initializes Guard object with a Monitor instance.
* @param monitor lock object controlling access to shared resources
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,newGuard,com.google.common.util.concurrent.Monitor:newGuard(java.util.function.BooleanSupplier),370,378,"/**
* Creates a guard that returns true when the given supplier satisfies its condition.
* @param isSatisfied supplier of boolean value indicating satisfaction condition
*/","* Creates a new {@linkplain Guard guard} for this monitor.
   *
   * @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied
   *     isSatisfied()})
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Optional),53,57,"/**
* Wraps an alternate choice in an Optional of type T.
* @param secondChoice alternative value to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Any:matchesAllOf(java.lang.CharSequence),1063,1067,"/**
* Enables function mask on given CharSequence.
* @param sequence input string to apply mask on
* @return always returns true (masking result is ignored)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher$Any:removeFrom(java.lang.CharSequence),1074,1078,"/**
* Generates a mask string from the given CharSequence.
* @param sequence input sequence to process
* @return empty string (functionality is currently stubbed)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimFrom,com.google.common.base.CharMatcher$Any:trimFrom(java.lang.CharSequence),1101,1105,"/**
* Generates mask based on input CharSequence.
* @param sequence input string to process
* @return empty string (no actual processing performed)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$Any:and(com.google.common.base.CharMatcher),1112,1115,"/**
* Returns a CharMatcher that matches any character except those matched by 'other'. 
* @param other another CharMatcher to exclude from matching 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$Any:or(com.google.common.base.CharMatcher),1117,1121,"/**
 * Returns a new CharMatcher that applies both this matcher and another to the input.
 * @param other CharMatcher to be combined with this one
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NamedFastMatcher:<init>(java.lang.String),981,983,"/**
 * Initializes a new instance of NamedFastMatcher with a given description. 
 * @param description unique identifier of the matcher 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence),1143,1147,"/**
* Returns a fixed mask value of -1 based on input sequence.
* @param sequence input text to process (currently ignored)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,lastIndexIn,com.google.common.base.CharMatcher$None:lastIndexIn(java.lang.CharSequence),1156,1160,"/**
* Calculates the function mask from the given CharSequence.
* @param sequence input CharSequence to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$None:matchesNoneOf(java.lang.CharSequence),1167,1171,"/**
* Enables function mask feature for given text sequence.
* @param sequence input CharSequence to enable mask on
* @return always returns true (m1 is called regardless)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",1183,1187,"/**
* Replaces characters in a string using a mask.
* @param sequence original character sequence
* @param replacement new character to replace with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$None:countIn(java.lang.CharSequence),1209,1213,"/**
* Generates a mask value based on the input CharSequence.
* @param sequence input sequence to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$None:and(com.google.common.base.CharMatcher),1215,1219,"/**
* Combines this matcher with another using bitwise OR operation.
* @param other CharMatcher to combine with
* @return combined CharMatcher instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$None:or(com.google.common.base.CharMatcher),1221,1224,"/**
* Returns the bitwise OR of this CharMatcher with another.
* @param other CharMatcher to perform bitwise OR operation on
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Defaults.java,defaultValue,com.google.common.base.Defaults:defaultValue(java.lang.Class),42,65,"/**
* Returns a default instance of the specified type, or null if not applicable.
* @param type Class to fetch default value for
*/","* Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code
   * false} for {@code boolean} and {@code '\0'} for {@code char}. For non-primitive types and
   * {@code void}, {@code null} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$EquivalentToPredicate:<init>(com.google.common.base.Equivalence,java.lang.Object)",318,321,"/**
* Initializes an equivalent to predicate with provided equivalence and target values.
* @param equivalence equivalence strategy
* @param target target value (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$Wrapper:<init>(com.google.common.base.Equivalence,java.lang.Object)",228,231,"/**
* Initializes a new instance of Wrapper with given equivalence and reference.
* @param equivalence equivalence relation for the wrapper
* @param reference the wrapped object, cannot be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$ForMapWithDefault:<init>(java.util.Map,java.lang.Object)",198,201,"/**
* Initializes the map with default value.
* @param map input map
* @param defaultValue default value to use when key is missing
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$FunctionComposition:<init>(com.google.common.base.Function,com.google.common.base.Function)",260,263,"/**
* Combines two functions into a single composite function.
* @param g second function to apply (output of first becomes input for second)
* @param f first function to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$FunctionForMapNoDefault:<init>(java.util.Map),157,159,"/**
 * Initializes the underlying map with the provided instance.
 * @param map the map to associate with this object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$PredicateFunction:<init>(com.google.common.base.Predicate),316,318,"/**
* Constructs a PredicateFunction with the given predicate.
* @param predicate function to apply to input values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$SupplierFunction:<init>(com.google.common.base.Supplier),421,423,"/**
* Constructs a Function from a given Supplier. 
* @param supplier function that generates values of type T
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ToStringFunction:apply(java.lang.Object),74,78,"/**
* Returns a string representation of the input object's mask.
* @param o Object containing mask data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern$JdkMatcher:<init>(java.util.regex.Matcher),55,57,"/**
* Initializes JdkMatcher with a given Matcher instance.
* @param matcher non-null Matcher to wrap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern:<init>(java.util.regex.Pattern),28,30,"/**
* Initializes JdkPattern with a Pattern instance.
* @param pattern compiled regular expression pattern
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,"com.google.common.base.Joiner$MapJoiner:<init>(com.google.common.base.Joiner,java.lang.String)",381,384,"/**
* Constructs a MapJoiner instance with the given Joiner and key-value separator.
* @param joiner The underlying Joiner to use for values
* @param keyValueSeparator Separator between keys and values in output map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,com.google.common.base.Joiner:<init>(java.lang.String),80,82,"/**
* Initializes Joiner with a specified string separator.
* @param separator non-null separator string
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner:useForNull(java.lang.String),276,294,"/**
* Creates a joiner with custom null text for masking.
* @param nullText text to display when joining null values
*/","* Returns a joiner with the same behavior as this one, except automatically substituting {@code
   * nullText} for any provided null elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,iterable,"com.google.common.base.Joiner:iterable(java.lang.Object,java.lang.Object,java.lang.Object[])",532,553,"/**
* Creates an iterable list from the provided objects, treating the first two as a prefix and the rest as a suffix.
* @param first leading object
* @param second secondary object
* @param rest array of additional objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,<init>,com.google.common.base.MoreObjects$ToStringHelper:<init>(java.lang.String),157,159,"/**
 * Initializes the ToStringHelper with the given class name.
 * @param className the name of the class being processed
 */",Use {@link MoreObjects#toStringHelper(Object)} to create an instance.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,presentInstances,com.google.common.base.Optional:presentInstances(java.lang.Iterable),341,360,"/**
* Maps an iterable of Optional values to an iterable of present values.
* @param optionals Iterable of Optional values
* @return Iterable of T objects, or empty if all are absent
*/","* Returns the value of each present instance from the supplied {@code optionals}, in order,
   * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are
   * evaluated lazily.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's
   * {@code Optional} class; use {@code
   * optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.
   *
   * <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead.
   *
   * @since 11.0 (generics widened in 13.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compilePattern,com.google.common.base.Platform:compilePattern(java.lang.String),92,95,"/**
* Compiles given common pattern into a mask.
* @param pattern string representation of the common pattern
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,"com.google.common.base.Predicates$CompositionPredicate:<init>(com.google.common.base.Predicate,com.google.common.base.Function)",694,697,"/**
* Constructs a composition predicate from a given predicate and function.
* @param p the underlying predicate
* @param f the function to compose with the predicate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternPredicate:<init>(com.google.common.base.CommonPattern),734,736,"/**
* Initializes the predicate with a given common pattern.
* @param pattern common pattern to match against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InPredicate:<init>(java.util.Collection),644,646,"/**
* Initializes predicate with a collection of targets.
* @param target Collection of objects to match against.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InstanceOfPredicate:<init>(java.lang.Class),567,569,"/**
* Initializes the predicate with the specified class type.
* @param clazz class to match instances against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$NotPredicate:<init>(com.google.common.base.Predicate),382,384,"/**
 * Sets a custom predicate to filter elements from the collection.
 * @param predicate the predicate to use (must not be null)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$SubtypeOfPredicate:<init>(java.lang.Class),606,608,"/**
* Initializes the predicate with the specified class type.
* @param clazz the class type to be checked against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,defensiveCopy,com.google.common.base.Predicates:defensiveCopy(java.lang.Iterable),804,810,"/**
* Maps an Iterable of elements through a transformation function m1 and then applies another function m2 to each result.
* @param iterable input collection of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Optional),51,55,"/**
* Returns the current instance with an updated optional value.
* @param secondChoice alternative value to be used if null or empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Supplier),57,61,"/**
* Executes supplier function and returns result.
* @param supplier function to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$MapSplitter:<init>(com.google.common.base.Splitter,com.google.common.base.Splitter)",482,485,"/**
* Initializes a new instance of the MapSplitter with an outer splitter and an entry splitter.
* @param outerSplitter outer splitter to use for splitting maps
* @param entrySplitter entry splitter to use for splitting map entries; must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter:split(java.lang.CharSequence),368,385,"/**
* Converts CharSequence to an iterable list of strings, applying custom processing.
* @param sequence input character sequence
*/","* Splits {@code sequence} into string components and makes them available through an {@link
   * Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead.
   *
   * @param sequence the sequence of characters to split
   * @return an iteration over the segments split from the parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padStart,"com.google.common.base.Strings:padStart(java.lang.String,int,char)",92,103,"/**
* Truncates or pads input string to specified minimum length.
* @param string original string
* @param minLength target string length
* @param padChar character used for padding
* @return padded/truncated string of specified length
*/","* Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padStart(""7"", 3, '0')} returns {@code ""007""}
   *   <li>{@code padStart(""2010"", 3, '0')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the end of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to insert at the beginning of the result until the minimum length
   *     is reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padEnd,"com.google.common.base.Strings:padEnd(java.lang.String,int,char)",123,134,"/**
* Pads input string to minimum length with specified character.
* @param string original string
* @param minLength minimum desired length
* @param padChar padding character
* @return padded string or original if already long enough
*/","* Returns a string, of length at least {@code minLength}, consisting of {@code string} appended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padEnd(""4."", 5, '0')} returns {@code ""4.000""}
   *   <li>{@code padEnd(""2010"", 3, '!')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the beginning of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to append to the end of the result until the minimum length is
   *     reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$MemoizingSupplier:<init>(com.google.common.base.Supplier),133,135,"/**
* Initializes memoized supplier with given backing supplier.
* @param delegate Supplier instance to be memoized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:<init>(com.google.common.base.Supplier),188,190,"/**
* Constructs memoizing supplier with given delegate.
* @param delegate Supplier instance to be memoized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,"com.google.common.base.Suppliers$SupplierComposition:<init>(com.google.common.base.Function,com.google.common.base.Supplier)",64,67,"/**
* Constructs a SupplierComposition instance by combining an input transformation and data source.
* @param function input transformation function
* @param supplier data source supplier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$ThreadSafeSupplier:<init>(com.google.common.base.Supplier),410,412,"/**
* Wraps a supplier with thread safety guarantees.
* @param delegate supplier to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfInstanceOf,"com.google.common.base.Throwables:throwIfInstanceOf(java.lang.Throwable,java.lang.Class)",72,79,"/**
* Wraps and re-throws a Throwable with its original type.
* @param throwable the exception to be wrapped
* @param declaredType the target class of the wrapped exception
* @throws X the wrapped exception with updated type
*/","* Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (BarException | RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfInstanceOf(failure, BarException.class);
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfUnchecked,com.google.common.base.Throwables:throwIfUnchecked(java.lang.Throwable),129,137,"/**
* Re-throws the original exception, wrapping it in a RuntimeException or Error as necessary.
* @param throwable the original exception to re-throw
*/","* Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,getCausalChain,com.google.common.base.Throwables:getCausalChain(java.lang.Throwable),284,308,"/**
* Recursively fetches and aggregates root causes of a Throwable.
* @return List<Throwable> list of root causes or empty list if none found
*/","* Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code
   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and
   * will not reflect any subsequent changes to the cause chain.
   *
   * <p>Here's an example of how it can be used to find specific types of exceptions in the cause
   * chain:
   *
   * <pre>
   * Iterables.filter(Throwables.getCausalChain(e), IOException.class));
   * </pre>
   *
   * @param throwable the non-null {@code Throwable} to extract causes from
   * @return an unmodifiable list containing the cause chain starting with {@code throwable}
   * @throws IllegalArgumentException if there is a loop in the causal chain",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,jlaStackTrace,com.google.common.base.Throwables:jlaStackTrace(java.lang.Throwable),401,430,"/**
* Creates a list of stack trace elements from the given Throwable.
* @param t the exception to extract the stack trace from
* @return List of StackTraceElement objects representing the call stack
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$FunctionToCacheLoader:load(java.lang.Object),167,170,"/**
* Computes a function mask value using the provided key.
* @param key input key to be processed
* @return function mask value of type V
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$SupplierToCacheLoader:load(java.lang.Object),218,222,"/**
* Computes and returns a functional mask based on the given object key.
* @param key arbitrary object used as input for computation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,asyncReloading,"com.google.common.cache.CacheLoader:asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor)",184,208,"/**
* Wraps a CacheLoader with custom execution logic.
* @param loader original cache loader to delegate to
* @param executor executor service for asynchronous operations 
*/","* Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link
   * CacheLoader#reload} using {@code executor}.
   *
   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such
   * as {@linkplain #reload the default implementation}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$Segment:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1999,2002,"/**
* Creates a new entry in the map using the provided key and hash.
* @param key unique key value
* @param hash computed hash code for the key
* @param next optional next entry in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalListeners.java,asynchronous,"com.google.common.cache.RemovalListeners:asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor)",40,46,"/**
* Wraps a removal listener with an executor to run listener's callback asynchronously.
* @param listener original removal listener
* @param executor executor to schedule the callback
* @return asynchronous removal listener
*/","* Returns a {@code RemovalListener} which processes all eviction notifications using {@code
   * executor}.
   *
   * @param listener the backing listener
   * @param executor the executor with which removal notifications are asynchronously executed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,<init>,"com.google.common.cache.RemovalNotification:<init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",53,56,"/**
* Creates a removal notification with specified cause.
* @param key        key of removed element
* @param value      value of removed element
* @param cause      reason for removal (cannot be null)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,forEach,com.google.common.collect.AbstractMapBasedMultimap:forEach(java.util.function.BiConsumer),1307,1312,"/**
* Applies a consumer to each entry in the map.
* @param action BiConsumer for key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.AbstractMapBasedMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
* Performs an operation on each element in the collection.
* @param action callback to process each element and its index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(java.util.Comparator),47,49,"/**
* Initializes a new instance of an abstract sorted multiset with a custom comparator.
* @param comparator the Comparator to use for sorting and equality checks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.AbstractSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
* Retrieves a sorted multiset of elements within the specified bounds.
* @param fromElement starting element
* @param fromBoundType type of lower bound (inclusive or exclusive)
* @param toElement ending element
* @param toBoundType type of upper bound (inclusive or exclusive)
* @return SortedMultiset object containing filtered elements",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,column,com.google.common.collect.ArrayTable:column(java.lang.Object),604,613,"/**
* Returns a map of values for the specified column, or an empty map if not found.
* @param columnKey unique column identifier
*/","* Returns a view of all mappings that have the given column key. If the column key isn't in
   * {@link #columnKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key
   * with the corresponding value in the table. Changes to the returned map will update the
   * underlying table, and vice versa.
   *
   * @param columnKey key of column to search for in the table
   * @return the corresponding map from row keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,row,com.google.common.collect.ArrayTable:row(java.lang.Object),696,705,"/**
* Fetches a Map of values for the given row key.
* @param rowKey unique identifier for a data row
* @return A Map with column keys as C and values as V, or null if not found
*/","* Returns a view of all mappings that have the given row key. If the row key isn't in {@link
   * #rowKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the
   * column key with the corresponding value in the table. Changes to the returned map will update
   * the underlying table, and vice versa.
   *
   * @param rowKey key of row to search for in the table
   * @return the corresponding map from column keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultiset,"com.google.common.collect.CollectCollectors:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",167,182,"/**
* Creates a collector for multiset aggregation using the given functions.
* @param elementFunction function to extract elements from input
* @param countFunction function to extract counts from input
* @param multisetSupplier supplier of initial multiset instance
* @return Collector instance for multiset aggregation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultimap,"com.google.common.collect.CollectCollectors:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",413,432,"/**
* Creates a Collector to group input elements by key and value functions.
* @param keyFunction function to extract key from each element
* @param valueFunction function to extract value from each element
* @param multimapSupplier supplier for Multimap instance
* @return Collector instance for grouping elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToMultimap,"com.google.common.collect.CollectCollectors:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",434,457,"/**
* Creates a collector that accumulates values into a Multimap.
* @param keyFunction function to extract the key from each input element
* @param valueFunction function to generate a stream of values for each input element
* @param multimapSupplier supplier of the Multimap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,map,"com.google.common.collect.CollectSpliterators:map(java.util.Spliterator,java.util.function.Function)",108,144,"/**
* Maps elements of the input spliterator using the provided function.
* @param fromSpliterator input spliterator
* @param function mapping function
* @return new spliterator with mapped elements
*/","* Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code
   * function}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,filter,"com.google.common.collect.CollectSpliterators:filter(java.util.Spliterator,java.util.function.Predicate)",147,202,"/**
* Creates a spliterator that filters elements based on the given predicate.
* @param fromSpliterator initial spliterator
* @param predicate filter condition
*/",Returns a {@code Spliterator} filtered by the specified predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$FilteredCollection:forEach(java.util.function.Consumer),184,193,"/**
* Applies a consumer to filtered elements matching the predicate.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$FilteredCollection:removeIf(java.util.function.Predicate),210,214,"/**
* Applies a custom filter in addition to existing predicate.
* @param filter additional filtering criteria
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$TransformedCollection:<init>(java.util.Collection,com.google.common.base.Function)",269,272,"/**
* Constructs a transformed collection by applying a function to each element.
* @param fromCollection input collection of type F
* @param function transformation function to apply to each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$TransformedCollection:forEach(java.util.function.Consumer),294,298,"/**
* Invokes action on each element in the collection, 
* applying a transformation function first.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$TransformedCollection:removeIf(java.util.function.Predicate),300,304,"/**
* Applies predicate filter to collection elements.
* @param filter Predicate function to apply to each element
* @return true if all elements pass the filter, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeContains,"com.google.common.collect.Collections2:safeContains(java.util.Collection,java.lang.Object)",100,107,"/**
* Checks if an object belongs to a collection.
* @param collection the collection to check
* @param object the object to search for
* @return true if found, false otherwise
*/","* Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeRemove,"com.google.common.collect.Collections2:safeRemove(java.util.Collection,java.lang.Object)",113,120,"/**
* Checks if an object is present in a collection.
* @param collection Collection to search
* @param object Object to find
* @return true if found, false otherwise
*/","* Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInOrder,"com.google.common.collect.Comparators:isInOrder(java.lang.Iterable,java.util.Comparator)",73,88,"/**
* Checks if a sorted iterable is valid based on the provided comparator.
* @param iterable Iterable to check
* @param comparator Comparator to use for validation
* @return True if iterable is valid, false otherwise
*/","* Returns {@code true} if each element in {@code iterable} after the first is greater than or
   * equal to the element that preceded it, according to the specified comparator. Note that this is
   * always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInStrictOrder,"com.google.common.collect.Comparators:isInStrictOrder(java.lang.Iterable,java.util.Comparator)",95,110,"/**
* Determines if the iterable contains a sorted sequence based on the provided comparator.
* @param iterable Iterable of objects to check
* @param comparator Comparator function to determine sort order
* @return True if the iterable is sorted, false otherwise
*/","* Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>
   * greater than the element that preceded it, according to the specified comparator. Note that
   * this is always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesFirst,com.google.common.collect.Comparators:emptiesFirst(java.util.Comparator),176,180,"/**
* Creates a comparator for Optional values based on the given value comparator.
* @param valueComparator comparator for non-optional values
* @return comparator for Optional values or null if not found
*/","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesLast,com.google.common.collect.Comparators:emptiesLast(java.util.Comparator),189,193,"/**
* Creates a comparator for Optional values based on the provided value comparator.
* @param valueComparator comparator to apply to contained values
* @return Comparator<Optional<T>> that prioritizes present over absent values
*/","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable),152,155,"/**
* Creates a contiguous set of elements up to the specified element.
* @param toElement target element to include in the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable,boolean)",160,164,"/**
* Creates a contiguous set of elements up to and including the given element.
* @param toElement upper bound (inclusive if true)
* @param inclusive whether to include the upper bound in the set
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable),187,190,"/**
* Creates a contiguous set of elements based on the provided mask.
* @param fromElement starting element value
* @return ContiguousSet object representing the generated mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable,boolean)",195,199,"/**
* Creates a contiguous set of elements based on the given mask.
* @param fromElement starting element (inclusive if true, exclusive otherwise)
* @param inclusive whether to include the starting element in the set
* @return ContiguousSet containing all relevant elements
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,forEachEntry,com.google.common.collect.EnumMultiset:forEachEntry(java.util.function.ObjIntConsumer),283,291,"/**
* Iterates over enum constants with non-zero counts and performs an action.
* @param action functional interface to process each enum constant
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,add,com.google.common.collect.EvictingQueue:add(java.lang.Object),103,115,"/**
* Triggers m4 method on the delegate and returns true.
*/","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,<init>,"com.google.common.collect.FilteredEntryMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",55,58,"/**
* Creates a filtered multimap from the given unfiltered map and filter predicate.
* @param unfiltered original multimap to filter
* @param predicate entry filter condition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:addAll(java.util.Collection),127,131,"/**
* Validates a collection against a predicate (key).
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,"com.google.common.collect.FilteredKeyMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",45,48,"/**
* Creates a filtered multimap with keys that match the given predicate.
* @param unfiltered original multimap to filter
* @param keyPredicate predicate to select matching keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,<init>,com.google.common.collect.FilteredMultimapValues:<init>(com.google.common.collect.FilteredMultimap),43,45,"/**
* Initializes this instance with the specified filtered multimap.
* @param multimap filtered multimap to populate values from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(com.google.common.collect.FluentIterable),172,178,"/**
* Wraps an iterable, returning a fluent iterable.
* @param iterable the input iterable
*/","* Construct a fluent iterable from another fluent iterable. This is obviously never necessary,
   * but is intended to help call out cases where one migration from {@code Iterable} to {@code
   * FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}.
   *
   * @deprecated instances of {@code FluentIterable} don't need to be converted to {@code
   *     FluentIterable}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap:forEach(java.util.function.BiConsumer),570,578,"/**
* Applies a consumer to each key-value pair in the map.
* @param action BiConsumer function to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,getInstance,com.google.common.collect.ImmutableClassToInstanceMap:getInstance(java.lang.Class),182,186,"/**
* Applies mask to input type and delegates it to m2.
* @param type Class of object to apply mask to
* @return Object of type T or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,add,com.google.common.collect.ImmutableList$Builder:add(java.lang.Object),836,843,"/**
* Adds an element to the builder's contents with a specified mask value.
* @param element the element to add
*/","* Adds {@code element} to the {@code ImmutableList}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableList:forEach(java.util.function.Consumer),416,423,"/**
* Invokes the provided consumer on each element of a dynamic sequence.
* @param consumer callback function to process elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,forEach,com.google.common.collect.ImmutableMapKeySet:forEach(java.util.function.Consumer),68,72,"/**
* Applies the provided action to each key in the map.
* @param action consumer function to process keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,forEach,com.google.common.collect.ImmutableMapValues:forEach(java.util.function.Consumer),106,111,"/**
* Performs an action on each value in the map.
*@param action Consumer to process values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderKeysBy,com.google.common.collect.ImmutableMultimap$Builder:orderKeysBy(java.util.Comparator),336,340,"/**
* Configures builder with a custom comparator for keys.
* @param keyComparator Comparator to use when comparing keys
*/","* Specifies the ordering of the generated multimap's keys.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderValuesBy,com.google.common.collect.ImmutableMultimap$Builder:orderValuesBy(java.util.Comparator),347,351,"/**
* Configures the builder to use a custom comparator for value sorting.
* @param valueComparator Comparator instance to apply when ordering values
*/","* Specifies the ordering of the generated multimap's values for each key.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,add,com.google.common.collect.ImmutableMultiset$Builder:add(java.lang.Object),498,503,"/**
* Processes an element and updates internal state.
* @param element Element to process
* @return This builder instance for chaining
*/","* Adds {@code element} to the {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addCopies,"com.google.common.collect.ImmutableMultiset$Builder:addCopies(java.lang.Object,int)",530,534,"/**
* Adds an element with specified occurrences to the mask.
* @param element element to add
* @param occurrences number of times to include the element in the mask
*/","* Adds a number of occurrences of an element to this {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,setCount,"com.google.common.collect.ImmutableMultiset$Builder:setCount(java.lang.Object,int)",546,550,"/**
* Adds multiple instances of the given element to the builder's content.
* @param element element to add, wrapped by m1()
* @param count number of times to add the element
*/","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forEach,com.google.common.collect.ImmutableSet$Indexed:forEach(java.util.function.Consumer),348,355,"/**
* Iterates and processes elements using the provided Consumer.
* @param consumer callback to process each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:add(java.lang.Object),955,962,"/**
* Performs set operations on the delegate and updates internal state.
* @param e element to process
* @return this SetBuilderImpl instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,"com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)",86,103,"/**
* Creates a collector that groups elements into an immutable sorted multiset.
* @param comparator comparison function for sorting
* @param elementFunction maps input to group-by key
* @param countFunction maps input to count in the group
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset}
   * whose elements are the result of applying {@code elementFunction} to the inputs, with counts
   * equal to the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@code comparator}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,"com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object,boolean)",649,652,"/**
* Creates an ordered set of function masks from the given element and inclusivity flag.
* @param toElement the target element for which to create a mask
* @param inclusive whether to include the target element in the mask
* @return ImmutableSortedSet containing the function masks
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,"com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object,boolean)",702,705,"/**
* Computes an immutable sorted set of elements based on the given criteria.
* @param fromElement element to start from (inclusive or exclusive depending on inclusive flag)
* @param inclusive whether the range includes the end element
* @return ImmutableSortedSet containing filtered elements
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,forEach,com.google.common.collect.IndexedImmutableSet:forEach(java.util.function.Consumer),42,49,"/**
* Iterates over a dynamic number of elements, applying consumer to each.
* @param consumer callback function to process each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(java.lang.Iterable),72,81,"/**
* Wraps an iterable in an unmodifiable view, or returns the original if it's already immutable.
* @param iterable input iterable to be wrapped
*/",Returns an unmodifiable view of {@code iterable}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(com.google.common.collect.ImmutableCollection),89,95,"/**
* Returns an iterable view of the given collection.
* @param iterable non-null, immutable collection to view
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeFirstMatching,"com.google.common.collect.Iterables:removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate)",209,221,"/**
* Filters an iterable of objects based on a predicate and returns the first matching element.
* @param removeFrom iterable to search in
* @param predicate condition to match elements against
* @return first matching element or null if none found
*/","Removes and returns the first matching element, or returns {@code null} if there is none.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,cycle,com.google.common.collect.Iterables:cycle(java.lang.Iterable),373,391,"/**
* Creates a cycled iterable from the given collection.
* @param iterable input iterable to cycle through
*/","* Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p>To cycle over the iterable {@code n} times, use the following: {@code
   * Iterables.concat(Collections.nCopies(n, iterable))}
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.generate(() -> iterable).flatMap(Streams::stream)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,com.google.common.base.Predicate)",572,598,"/**
* Filters an iterable of objects based on a predicate, returning the filtered result.
* @param unfiltered input iterable to be filtered
* @param retainIfTrue predicate to determine which elements are retained
* @return filtered Iterable or null if not found
*/","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,transform,"com.google.common.collect.Iterables:transform(java.lang.Iterable,com.google.common.base.Function)",731,752,"/**
* Transforms an iterable of objects to another type using a provided function.
* @param fromIterable input iterable
* @param function transformation function
* @return transformed iterable or null if not found
*/","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterable}.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s
   * iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer
   * contains the corresponding element.
   *
   * <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection},
   * consider {@link Lists#transform} and {@link Collections2#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,consumingIterable,com.google.common.collect.Iterables:consumingIterable(java.lang.Iterable),1020,1036,"/**
* Converts an iterable to a consuming iterable.
* @param iterable input iterable (may be modified)
*/","* Returns a view of the supplied iterable that wraps each generated {@link Iterator} through
   * {@link Iterators#consumingIterator(Iterator)}.
   *
   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link
   * Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined.
   * Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause
   * an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}.
   *
   * <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable}
   * is not thread-safe.
   *
   * @param iterable the iterable to wrap
   * @return a view of the supplied iterable that wraps each generated iterator through {@link
   *     Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators
   *     that return and consume the queue's elements in queue order
   * @see Iterators#consumingIterator(Iterator)
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$PeekingImpl:<init>(java.util.Iterator),1187,1189,"/**
* Initializes PeekingImpl with an iterable Iterator.
* @param iterator iterator over elements of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(java.util.Iterator),129,149,"/**
* Returns an unmodifiable iterator from the given iterator, wrapping it if necessary.
* @param iterator existing iterator to wrap or pass through
*/",Returns an unmodifiable view of {@code iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(com.google.common.collect.UnmodifiableIterator),157,164,"/**
* Wraps an existing iterator with a deprecated mask function.
* @param iterator input iterator to be wrapped
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeAll,"com.google.common.collect.Iterators:removeAll(java.util.Iterator,java.util.Collection)",205,216,"/**
* Removes elements from a collection based on an iterator's filtering criteria.
* @param removeFrom Iterator to filter and remove elements
* @param elementsToRemove Collection of elements to potentially remove
* @return true if any elements were removed, false otherwise
*/","* Traverses an iterator and removes every element that belongs to the provided collection. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeIf,"com.google.common.collect.Iterators:removeIf(java.util.Iterator,com.google.common.base.Predicate)",227,239,"/**
* Removes elements from the iterator matching the predicate.
* @param removeFrom iterator to modify
* @param predicate filter condition for removal
* @return true if any elements were removed, false otherwise
*/","* Removes every element that satisfies the provided predicate from the iterator. The iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,retainAll,"com.google.common.collect.Iterators:retainAll(java.util.Iterator,java.util.Collection)",250,261,"/**
* Removes elements from a collection that do not match the given iterable.
* @param removeFrom iterator to remove elements from
* @param elementsToRetain iterable containing elements to retain
* @return true if any elements were removed, false otherwise
*/","* Traverses an iterator and removes every element that does not belong to the provided
   * collection. The iterator will be left exhausted: its {@code hasNext()} method will return
   * {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,addAll,"com.google.common.collect.Iterators:addAll(java.util.Collection,java.util.Iterator)",363,373,"/**
* Updates a collection with elements from an iterator.
* @param addTo collection to modify
* @param iterator source of elements to add
* @return true if the collection was modified, false otherwise
*/","* Adds all elements in {@code iterator} to {@code collection}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,cycle,com.google.common.collect.Iterators:cycle(java.lang.Iterable),403,439,"/**
* Merges two iterators into a single iterator, combining their elements.
* @param iterable input iterable to merge with the other iterator
* @return merged iterator yielding elements from both iterables
*/","* Returns an iterator that cycles indefinitely over the elements of {@code iterable}.
   *
   * <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,com.google.common.base.Predicate)",666,682,"/**
* Filters an iterator, retaining elements that match a predicate.
* @param unfiltered Iterator to filter
* @param retainIfTrue Predicate to apply to each element
* @return Filtered iterator or null if all elements are filtered out
*/","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,all,"com.google.common.collect.Iterators:all(java.util.Iterator,com.google.common.base.Predicate)",707,717,"/**
* Applies a predicate to all elements in an iterator, returning true if all match.
* @param iterator iterator over elements of type T
* @param predicate condition to evaluate each element against
*/","* Returns {@code true} if every element returned by {@code iterator} satisfies the given
   * predicate. If {@code iterator} is empty, {@code true} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate)",728,740,"/**
* Iterates over the input iterator, applying the predicate to each element.
* Returns the first matching element or throws a NoSuchElementException. 
* @param iterator iterable collection of elements
* @param predicate condition to match elements against
* @return first matching element or null if not found in Java 8 style
*/","* Returns the first element in {@code iterator} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If no such element is found, the iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is
   * possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,
   * Predicate, Object)} instead.
   *
   * @throws NoSuchElementException if no element in {@code iterator} matches the given predicate",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)",751,762,"/**
* Retrieves the first object matching a predicate from an iterator.
* @param iterator input iterator
* @param predicate condition to match
* @param defaultValue value to return if no match is found
* @return matched object or default value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,transform,"com.google.common.collect.Iterators:transform(java.util.Iterator,com.google.common.base.Function)",821,831,"/**
* Maps iterator values to a different type using the provided function.
* @param fromIterator source iterator
* @param function mapping function
* @return mapped iterator or null if input is null
*/","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterator}.
   *
   * <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a
   * successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding
   * element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,consumingIterator,com.google.common.collect.Iterators:consumingIterator(java.util.Iterator),997,1018,"/**
* Converts an Iterator to a read-only, consuming iterator.
* @param iterator original iterator to consume and wrap
*/","* Returns a view of the supplied {@code iterator} that removes each element from the supplied
   * {@code iterator} as it is returned.
   *
   * <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator
   * will fail on the first call to {@code next}. The returned {@link Iterator} is also not
   * thread-safe.
   *
   * @param iterator the iterator to remove and return elements from
   * @return an iterator that removes and returns elements from the supplied iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,clear,com.google.common.collect.Iterators:clear(java.util.Iterator),1037,1043,"/**
* Iterates through an iterator and performs specific operations on each element.
* @param iterator the input iterator to process
*/",Clears the iterator using its remove method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,forEnumeration,com.google.common.collect.Iterators:forEnumeration(java.util.Enumeration),1139,1154,"/**
* Creates an unmodifiable iterator from a given enumeration.
* @param enumeration input enumeration to convert
*/","* Adapts an {@code Enumeration} to the {@code Iterator} interface.
   *
   * <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as
   * an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection
   * using {@link Collections#list}.
   *
   * <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to
   * return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,asEnumeration,com.google.common.collect.Iterators:asEnumeration(java.util.Iterator),1163,1178,"/**
* Creates an enumeration from the given iterator, leveraging its iteration logic.
* @param iterator Iterator containing elements to be enumerated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(com.google.common.collect.PeekingIterator),1281,1288,"/**
* Wraps a Peekable Iterator, returning the original iterator.
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$AbstractListWrapper:<init>(java.util.List),1165,1167,"/**
* Initializes the wrapper with a given backing list.
* @param backingList non-null list to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$OnePlusArrayList:<init>(java.lang.Object,java.lang.Object[])",343,346,"/**
* Initializes OnePlusArrayList with specified initial elements.
* @param first single element
* @param rest array of additional elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$ReverseList:<init>(java.util.List),866,868,"/**
 * Reverses the provided list by updating the internal reference. 
 * @param forwardList List to be reversed and stored in the object's field.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingRandomAccessList:<init>(java.util.List,com.google.common.base.Function)",626,629,"/**
* Transforms elements in a List to another type using a given function.
* @param fromList list to transform
* @param function mapping function to apply to each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingRandomAccessList:removeIf(java.util.function.Predicate),666,670,"/**
* Applies predicate filter to collection elements and returns true if all pass.
*@param filter predicate function to evaluate each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingSequentialList:<init>(java.util.List,com.google.common.base.Function)",569,572,"/**
* Applies transformation to sequential list.
* @param fromList input list of type F
* @param function transformation function returning type T
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingSequentialList:removeIf(java.util.function.Predicate),604,608,"/**
* Applies predicate filter to elements and returns true if all pass.
* @param filter predicate function to evaluate each element
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TwoPlusArrayList:<init>(java.lang.Object,java.lang.Object,java.lang.Object[])",373,377,"/**
* Initializes a new TwoPlusArrayList with the given elements.
* @param first  The first element
* @param second The second element
* @param rest   Additional elements (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$AsMapView:<init>(java.util.Set,com.google.common.base.Function)",891,894,"/**
* Initializes an AsMap view from a given set and transformation function.
* @param set input set
* @param function mapping function to transform keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$KeySet:<init>(java.util.Map),3918,3920,"/**
* Initializes key set from provided map.
* @param map input map to initialize from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$KeySet:forEach(java.util.function.Consumer),3931,3936,"/**
* Invokes consumer on mapped key-value pairs.
* @param action Consumer to process each entry in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$NavigableAsMapView:<init>(java.util.NavigableSet,com.google.common.base.Function)",1045,1048,"/**
* Creates an AsMapView from a NavigableSet and a mapping function.
* @param ks the set of keys
* @param vFunction function to map each key to its value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesMap:<init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",2141,2145,"/**
* Creates a transformed entries map by applying the provided transformer to each entry in the input map.
* @param fromMap input map with key-value pairs of type K-V1
* @param transformer function that transforms each entry into a new value of type V2
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$TransformedEntriesMap:forEach(java.util.function.BiConsumer),2206,2211,"/**
* Applies the given consumer to each entry in this map, transforming values.
* @param action BiConsumer to process key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$Values:<init>(java.util.Map),4111,4113,"/**
* Initializes the values collection from the given map.
* @param map input map to populate values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$Values:forEach(java.util.function.Consumer),4124,4129,"/**
* Applies the provided consumer to each value in the map.
* @param action Consumer function to process individual values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newEnumMap,com.google.common.collect.Maps:newEnumMap(java.lang.Class),449,452,"/**
* Creates an EnumMap instance with a key type and a function that maps each enum value to null.
* @param type Class of the enum values
* @return A pre-initialized EnumMap instance.","* Creates an {@code EnumMap} instance.
   *
   * @param type the key type for this map
   * @return a new, empty {@code EnumMap}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntry,com.google.common.collect.Maps:unmodifiableEntry(java.util.Map$Entry),1496,1512,"/**
* Creates a new Entry instance with generic types, wrapping the provided entry.
* @param entry existing Entry to be wrapped
*/","* Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation
   * throws an {@link UnsupportedOperationException}. This also has the side effect of redefining
   * {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation
   * of equals.
   *
   * @param entry the entry for which to return an unmodifiable view
   * @return an unmodifiable view of the entry",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,"com.google.common.collect.Maps:transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry)",2107,2125,"/**
* Transforms user profile data using the provided EntryTransformer.
* @param transformer transformation function
* @param entry existing UserProfile object
* @return transformed UserProfile object or null if not found
*/",Returns a view of an entry transformed by the specified transformer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asEntryToEntryFunction,com.google.common.collect.Maps:asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer),2128,2133,"/**
* Transforms entries by applying a given function to each key-value pair.
* @param transformer EntryTransformer instance
* @return Function that transforms entries
*/",Views an entry transformer as a function from entries to entries.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeGet,"com.google.common.collect.Maps:safeGet(java.util.Map,java.lang.Object)",3797,3804,"/**
* Retrieves a value from the input map using the provided key.
* @param map input map
* @param key unique identifier to fetch value for
* @return associated value or null if not found or invalid key
*/","* Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeContainsKey,"com.google.common.collect.Maps:safeContainsKey(java.util.Map,java.lang.Object)",3810,3817,"/**
* Checks if a value exists in the given map for the specified key.
* @param map map to search
* @param key key to look up
* @return true if a value exists, false otherwise
*/","* Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and
   * {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeRemove,"com.google.common.collect.Maps:safeRemove(java.util.Map,java.lang.Object)",3823,3830,"/**
* Retrieves a value from the map using the provided key, handling potential ClassCastException and NullPointerException.
* @param map Map containing values
* @param key Key to look up in the map
* @return Value associated with the key or null on failure
*/","* Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,com.google.common.collect.MinMaxPriorityQueue$Builder:<init>(java.util.Comparator),178,180,"/**
* Initializes the builder with a custom comparator.
* @param comparator Comparator to sort builder instances
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimap.java,forEach,com.google.common.collect.Multimap:forEach(java.util.function.BiConsumer),342,345,"/**
* Performs action on each map entry.
* @param action BiConsumer to apply to key-value pairs
*/","* Performs the given action for all key-value pairs contained in this multimap. If an ordering is
   * specified by the {@code Multimap} implementation, actions will be performed in the order of
   * iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller.
   *
   * <p>To loop over all keys and their associated value collections, write {@code
   * Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$EnumSetSupplier:<init>(java.lang.Class),259,261,"/**
* Initializes supplier with given class type.
* @param clazz Class of enum values to be supplied.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$TreeSetSupplier:<init>(java.util.Comparator),245,247,"/**
 * Initializes the TreeSet with a custom comparator.
 * @param comparator comparator to use when ordering elements
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(java.util.Comparator),152,161,"/**
* Creates a MultimapBuilder instance with the given comparator.
* @param comparator key comparison function for the map
*/","* Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.
   *
   * <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator}
   * is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumKeys,com.google.common.collect.MultimapBuilder:enumKeys(java.lang.Class),168,179,"/**
* Creates a MultimapBuilderWithKeys instance with the specified key class.
* @param keyClass the Class of keys to be used in the multimap
*/","* Uses an {@link EnumMap} to map keys to value collections.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$AsMap:<init>(com.google.common.collect.Multimap),1879,1881,"/**
* Initializes an empty map from a given Multimap instance.
* @param multimap non-null Multimap to initialize the map from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$Keys:forEach(java.util.function.Consumer),1766,1770,"/**
* Processes multimap entries using the provided Consumer.
* @param consumer function to process each entry's value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$MapMultimap:<init>(java.util.Map),1143,1145,"/**
* Initializes the multimap from a given input map.
* @param map input map to populate the multimap with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:<init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1506,1510,"/**
* Creates a multimap of transformed entries by applying the given transformer to each entry in fromMultimap.
* @param fromMultimap original multimap to transform
* @param transformer function to apply to each entry's key-value pair
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.ImmutableMultimap),670,676,"/**
* Wraps an ImmutableMultimap with a deprecated function mask.
* @param delegate underlying multimap instance
* @return the wrapped multimap instance
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap),937,944,"/**
* Wraps an immutable multimap with a deprecated function mask.
* @param delegate the underlying multimap to be wrapped
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap),1021,1028,"/**
* Wraps a ImmutableListMultimap instance.
* @param delegate wrapped multimap
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEachEntry,com.google.common.collect.Multiset:forEachEntry(java.util.function.ObjIntConsumer),347,350,"/**
* Iterates over elements and applies consumer to each.
* @param action callback function for processing
*/","* Runs the specified action for each distinct element in this multiset, and the number of
   * occurrences of that element. For some {@code Multiset} implementations, this may be more
   * efficient than iterating over the {@link #entrySet()} either explicitly or with {@code
   * entrySet().forEach(action)}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEach,com.google.common.collect.Multiset:forEach(java.util.function.Consumer),467,479,"/**
* Executes the given consumer on each element of a collection, 
* obtained by invoking m5() and processing its elements.
*/","* {@inheritDoc}
   *
   * <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer}
   * correspondingly many times, though not necessarily sequentially.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$FilteredMultiset:<init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)",333,336,"/**
* Constructs a filtered multiset from an unfiltered multiset and a predicate.
* @param unfiltered the original multiset
* @param predicate the filtering condition
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.ImmutableMultiset),122,128,"/**
* Converts an ImmutableMultiset to a regular Multiset.
* @param multiset the input multiset","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,union,"com.google.common.collect.Multisets:union(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",416,473,"/**
* Merges two multiset instances into a new view multiset.
* @param multiset1 first multiset instance
* @param multiset2 second multiset instance
* @return merged Multiset object
*/","* Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count
   * of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,intersection,"com.google.common.collect.Multisets:intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",487,529,"/**
* Merges two multisets into a new view multiset.
* @param multiset1 first multiset
* @param multiset2 second multiset (elements must be compatible)
* @return merged ViewMultiset object
*/","* Returns an unmodifiable view of the intersection of two multisets. In the returned multiset,
   * the count of each element is the <i>minimum</i> of its counts in the two backing multisets,
   * with elements that would have a count of 0 not included. The iteration order of the returned
   * multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the
   * same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,sum,"com.google.common.collect.Multisets:sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",543,605,"/**
* Merges two multisets into a new multiset containing all elements.
* @param multiset1 first multiset to merge
* @param multiset2 second multiset to merge
* @return merged Multiset object
*/","* Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count
   * of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,difference,"com.google.common.collect.Multisets:difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",619,679,"/**
* Returns a multiset containing elements present in both input multisets.
*@param multiset1 first input multiset
*@param multiset2 second input multiset
*@return Multiset of common elements or empty set if none found
*/","* Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the
   * count of each element is the result of the <i>zero-truncated subtraction</i> of its count in
   * the second multiset from its count in the first multiset, with elements that would have a count
   * of 0 not included. The iteration order of the returned multiset matches that of the element set
   * of {@code multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,containsOccurrences,"com.google.common.collect.Multisets:containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",687,698,"/**
* Checks if a multiset is a superset of another by comparing their element counts.
* @param superMultiset the potentially larger multiset
* @param subMultiset the smaller multiset to check against
* @return true if superMultiset contains all elements and at least as many, false otherwise
*/","* Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code
   * o}.
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrencesImpl,"com.google.common.collect.Multisets:retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",723,742,"/**
* Updates the Multiset to modify, removing or reducing elements with zero or insufficient occurrences.
* @param multisetToModify the Multiset to update
* @param occurrencesToRetain the Multiset of required occurrences
* @return true if any modifications were made, false otherwise
*/",Delegate implementation which cares about the element type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",805,825,"/**
* Removes specified occurrences from a multiset.
* @param multisetToModify the multiset to modify
* @param occurrencesToRemove occurrences to remove
* @return true if any elements were removed, false otherwise
*/","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * occurrencesToRemove.count(e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainAllImpl,"com.google.common.collect.Multisets:retainAllImpl(com.google.common.collect.Multiset,java.util.Collection)",931,939,"/**
* Filters the multiset by retaining only specified elements.
* @param self multiset to filter
* @param elementsToRetain collection of elements to keep
* @return true if filtering was successful, false otherwise
*/",An implementation of {@link Multiset#retainAll}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,compare,"com.google.common.collect.NaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",37,43,"/**
* Calculates and returns a mask value based on comparison of two comparable objects.
* @param left the first comparable object
* @param right the second comparable object
* @return an integer representing the result of the comparison
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(com.google.common.collect.Ordering),203,209,"/**
* Returns the input ordering, or throws exception if null.
* @param ordering input ordering to be returned
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",313,346,"/**
* Adds elements to a collection from a queue, within a timeout.
* @param q BlockingQueue source
* @param buffer Collection target
* @param numElements number of elements to add
* @param timeout timeout duration
* @return number of elements successfully added
*/","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",383,425,"/**
* Adds elements from a queue to a collection within a time limit.
* @param q the blocking queue
* @param buffer the collection for added elements
* @param numElements maximum number of elements to add
* @param timeout time limit in specified unit
* @return number of elements successfully added","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but
   * with a different behavior in case it is interrupted while waiting. In that case, the operation
   * will continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.Range:contains(java.lang.Comparable),407,411,"/**
* Checks if a given value falls within a specific range.
* @param C value to be evaluated
*/","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap:forEach(java.util.function.BiConsumer),165,171,"/**
* Applies a bi-consumer action to each map entry and the main consumer.
* @param action BiConsumer to process key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,forEach,com.google.common.collect.RegularImmutableMap:forEach(java.util.function.BiConsumer),289,295,"/**
* Applies a custom action to each entry in the map.
* @param action BiConsumer function to apply to key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headIndex,"com.google.common.collect.RegularImmutableSortedSet:headIndex(java.lang.Object,boolean)",252,259,"/**
* Calculates the index or mask value for a given element.
* @param toElement element to find
* @param inclusive whether to include the element in the result
* @return index if found, else a mask value (~index)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailIndex,"com.google.common.collect.RegularImmutableSortedSet:tailIndex(java.lang.Object,boolean)",272,279,"/**
* Calculates a function mask based on the given element and inclusivity.
* @param fromElement target element
* @param inclusive true for inclusive search, false otherwise
* @return calculated function mask or its negation if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,compare,"com.google.common.collect.ReverseNaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",32,41,"/**
* Compares two objects using their respective compare methods.
* @param left first object to compare
* @param right second object to compare
* @return integer result of comparison (-1, 0, or 1)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,retainAll,com.google.common.collect.Sets$ImprovedAbstractSet:retainAll(java.util.Collection),89,92,"/**
* Calls superclass's m2 method with result of m1 applied to provided collection.
* @param c input collection to process in m1
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.util.Comparator),438,442,"/**
* Creates a sorted set with the given comparator.
* @param comparator comparison function for elements
*/","* Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator.
   *
   * <p><b>Note:</b> if mutability is not required, use {@code
   * ImmutableSortedSet.orderedBy(comparator).build()} instead.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code
   * Comparator} to mean ""natural ordering,"" whereas this factory rejects null. Clean your code
   * accordingly.
   *
   * @param comparator the comparator to use to sort the set
   * @return a new, empty {@code TreeSet}
   * @throws NullPointerException if {@code comparator} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,forEach,com.google.common.collect.SingletonImmutableBiMap:forEach(java.util.function.BiConsumer),67,70,"/**
* Applies a BiConsumer to each key-value pair in the map. 
* @param action consumer function to apply to each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnKeySet:retainAll(java.util.Collection),736,751,"/**
* Iterates through the backing map and updates it based on the provided collection.
* @param c Collection to process
* @return True if any changes were made, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,zip,"com.google.common.collect.Streams:zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)",332,363,"/**
* Merges two streams and a function into a new stream, applying the function to each pair of elements.
* @param streamA first input stream
* @param streamB second input stream
* @param function BiFunction to apply to each element pair
* @return Stream of results or empty if either stream is empty
*/","* Returns a stream in which each element is the result of passing the corresponding element of
   * each of {@code streamA} and {@code streamB} to {@code function}.
   *
   * <p>For example:
   *
   * {@snippet :
   * Streams.zip(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> arg1 + "":"" + arg2)
   * }
   *
   * <p>will return {@code Stream.of(""foo1:bar1"", ""foo2:bar2"")}.
   *
   * <p>The resulting stream will only be as long as the shorter of the two input streams; if one
   * stream is longer, its extra elements will be ignored.
   *
   * <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want
   * to consider using {@link #forEachPair} instead of this method.
   *
   * <p><b>Performance note:</b> The resulting stream is not <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>.
   * This may harm parallel performance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex)",444,503,"/**
* Applies a function with index to each element in the stream.
* @param stream input stream
* @param function function to apply
* @return transformed stream or null if not found
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indices in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     Stream.of(""a"", ""b"", ""c""),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>would return {@code Stream.of(""0:a"", ""1:b"", ""2:c"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex)",527,582,"/**
* Transforms IntStream into a Stream of objects using the provided function.
* @param stream input IntStream
* @param function mapping function to apply on each index
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     IntStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex)",606,661,"/**
* Creates a stream by applying a function to each element in the input LongStream.
* @param stream input stream of long values
* @param function function to apply to each element
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     LongStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex)",685,740,"/**
* Transforms DoubleStream using a DoubleFunctionWithIndex to produce a Stream of type R.
* @param stream input DoubleStream
* @param function transformation function with index
*/","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     DoubleStream.of(0.0, 1.0, 2.0)
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:0.0"", ""1:1.0"", ""2:2.0"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedObject:<init>(java.lang.Object,java.lang.Object)",85,88,"/**
* Creates a synchronized object wrapper around the given delegate.
* @param delegate the object to synchronize
* @param mutex the synchronization lock or null for no locking
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",102,135,"/**
* Creates a collector to aggregate data into a table.
* @param rowFunction function to extract row data
* @param columnFunction function to extract column data
* @param valueFunction function to extract value data
* @param mergeFunction function to merge values for duplicate keys
* @param tableSupplier supplier of the resulting table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,mergeTables,"com.google.common.collect.TableCollectors:mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",203,221,"/**
* Updates or inserts a value in the specified table using a custom merge function.
* @param table Table to update
* @param row Row identifier
* @param column Column identifier
* @param value New value to insert or replace with
* @param mergeFunction Function to combine old and new values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$TransformedTable:<init>(com.google.common.collect.Table,com.google.common.base.Function)",420,423,"/**
* Applies a transformation function to each row of the input table.
* @param fromTable input table with original values
* @param function transformation function to apply to each row
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$TransposeTable:<init>(com.google.common.collect.Table),225,227,"/**
 * Initializes a new transposed table from an existing one.
 * @param original the original table to transpose
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedIterator.java,<init>,com.google.common.collect.TransformedIterator:<init>(java.util.Iterator),36,38,"/**
* Creates a transformed iterator from an existing iterator.
* @param backingIterator underlying iterator to transform
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$1:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
* Processes a value within the given range.
* @param range range to consider
* @param value value to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$1:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
* Updates mask entries within the specified range with the given value.
* @param range Range of keys to update
* @param value new value for the affected entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$1:remove(com.google.common.collect.Range),211,259,"/**
* Removes the specified range from this data structure.
* @param rangeToRemove Range to remove
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$1:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
* Merges and remaps range map entries within the given range.
* @param range Range to merge entries in
* @param value Value to replace existing values with, or null for no replacement
* @param remappingFunction Function to apply to each entry's value before replacing
*/",* @since 28.1,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$1:subRangeMap(com.google.common.collect.Range),384,391,"/**
* Creates a sub-range map for the given range.
* @param subRange the sub-range to create a map for
* @return RangeMap object or this instance if the entire range is matched
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,<init>,"com.google.common.collect.TreeTraverser$PostOrderNode:<init>(java.lang.Object,java.util.Iterator)",214,217,"/**
* Initializes a PostOrderNode with a given root and child iterator.
* @param root root node of the tree
* @param childIterator iterator over child nodes in post-order traversal order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$PreOrderIterator:next(),158,170,"/**
* Performs a recursive operation on the stack, 
* processing elements and potentially adding children.
* @return T result of the operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,using,com.google.common.collect.TreeTraverser:using(com.google.common.base.Function),93,103,"/**
* Creates a TreeTraverser for traversing trees using the given function.
* @param nodeToChildrenFunction function to fetch children of a tree node
*/","* Returns a tree traverser that uses the given function to navigate from a node to its children.
   * This is useful if the function instance already exists, or so that you can supply a lambda
   * expressions. If those circumstances don't apply, you probably don't need to use this; subclass
   * {@code TreeTraverser} and implement its {@link #children} method directly.
   *
   * @since 20.0
   * @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a
   *     lambda, these methods have exactly the same signature.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,preOrderTraversal,com.google.common.collect.TreeTraverser:preOrderTraversal(java.lang.Object),118,139,"/**
* Creates a FluentIterable from the specified root object.
* @param root The root object to iterate over
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal.
   * That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has
   *     the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,postOrderTraversal,com.google.common.collect.TreeTraverser:postOrderTraversal(java.lang.Object),183,204,"/**
* Creates a FluentIterable for the given root object, wrapping its iterable children.
* @param root root object to create iterable from
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which
   *     has the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,breadthFirstTraversal,com.google.common.collect.TreeTraverser:breadthFirstTraversal(java.lang.Object),258,267,"/**
* Returns a breadth-first iterable for the given root object.
* @param root the root object to traverse
*/","* Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the
   *     same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,escape,com.google.common.escape.ArrayBasedCharEscaper:escape(java.lang.String),103,113,"/**
* Sanitizes input string by replacing or removing invalid characters.
* @param s the input string to sanitize
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,createReplacementArray,com.google.common.escape.ArrayBasedEscaperMap:createReplacementArray(java.util.Map),66,78,"/**
* Generates a character replacement array from the given map.
* @param map input data structure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,escape,com.google.common.escape.ArrayBasedUnicodeEscaper:escape(java.lang.String),142,154,"/**
* Filters input string by replacing or removing invalid characters.
* @param s input string to be filtered
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscape,"com.google.common.escape.CharEscaperBuilder:addEscape(char,java.lang.String)",84,91,"/**
* Updates mask character and range with the given values.
* @param c new mask character
* @param r new range string
*/",Add a new mapping from an index to an object to the escaping.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,addEscape,"com.google.common.escape.Escapers$Builder:addEscape(char,java.lang.String)",140,146,"/**
* Builds a new builder instance with a custom mask character and replacement string.
* @param c the mask character
* @param replacement the string to replace the mask character with
* @return this builder instance for method chaining
*/","* Adds a replacement string for the given input character. The specified character will be
     * replaced by the given string whenever it occurs in the input, irrespective of whether it lies
     * inside or outside the 'safe' range.
     *
     * @param c the character to be replaced
     * @param replacement the string to replace the given character
     * @return the builder instance
     * @throws NullPointerException if {@code replacement} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,codePointAt,"com.google.common.escape.UnicodeEscaper:codePointAt(java.lang.CharSequence,int,int)",245,286,"/**
* Extracts a code point from the CharSequence, handling surrogate pairs and out-of-range indices.
* @param seq input string
* @param index current position
* @param end end of valid range
* @return extracted code point or negative for high surrogate
*/","* Returns the Unicode code point of the character at the given index.
   *
   * <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)}
   * this method will never fail silently when encountering an invalid surrogate pair.
   *
   * <p>The behaviour of this method is as follows:
   *
   * <ol>
   *   <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.
   *   <li><b>If the character at the specified index is not a surrogate, it is returned.</b>
   *   <li>If the first character was a high surrogate value, then an attempt is made to read the
   *       next character.
   *       <ol>
   *         <li><b>If the end of the sequence was reached, the negated value of the trailing high
   *             surrogate is returned.</b>
   *         <li><b>If the next character was a valid low surrogate, the code point value of the
   *             high/low surrogate pair is returned.</b>
   *         <li>If the next character was not a low surrogate value, then {@link
   *             IllegalArgumentException} is thrown.
   *       </ol>
   *   <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is
   *       thrown.
   * </ol>
   *
   * @param seq the sequence of characters from which to decode the code point
   * @param index the index of the first character to decode
   * @param end the index beyond the last valid character to decode
   * @return the Unicode code point for the given index or the negated value of the trailing high
   *     surrogate character at the end of the sequence",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,<init>,"com.google.common.eventbus.DeadEvent:<init>(java.lang.Object,java.lang.Object)",41,44,"/**
* Creates a new DeadEvent instance with the specified source and event.
* @param source the object that triggered the dead event
* @param event the dead event details
*/","* Creates a new DeadEvent.
   *
   * @param source object broadcasting the DeadEvent (generally the {@link EventBus}).
   * @param event the event that could not be delivered.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleSubscriberException,"com.google.common.eventbus.EventBus:handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",216,228,"/**
* Handles a Throwable exception in the context of Subscriber Exception.
* @param e the original exception
* @param context SubscriberExceptionContext instance
*/",Handles the given exception thrown by a subscriber with the given context.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber:invokeSubscriberMethod(java.lang.Object),81,95,"/**
* Invokes method m3 with target and masked event argument.
* @param event Object to be invoked on method m3
*/","* Invokes the subscriber method. This method can be overridden to make the invocation
   * synchronized.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberExceptionContext.java,<init>,"com.google.common.eventbus.SubscriberExceptionContext:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method)",39,45,"/**
* Constructs a new SubscriberExceptionContext instance.
* @param eventBus the EventBus instance
* @param event the event object
* @param subscriber the subscriber object
* @param subscriberMethod the subscriber method reference
*/","* @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for
   *     broadcasting a new event based on the error.
   * @param event The event object that caused the subscriber to throw.
   * @param subscriber The source subscriber context.
   * @param subscriberMethod the subscribed method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if two nodes have the same mask.
* @param nodeU first node to compare
* @param nodeV second node to compare
* @return true if both nodes have the same mask, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,"com.google.common.graph.AbstractNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",224,229,"/**
* Checks if two nodes have compatible masks.
* @param nodeU first node to compare
* @param nodeV second node to compare
* @return true if masks are compatible, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,<init>,com.google.common.graph.AbstractUndirectedNetworkConnections:<init>(java.util.Map),39,41,"/**
* Initializes network connections from edge map.
* @param incidentEdgeMap map of edges to their adjacent nodes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection:<init>(java.lang.Object),75,77,"/**
* Initializes NodeConnection with a given node.
* @param node non-null node object to associate with connection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,value,com.google.common.graph.DirectedGraphConnections:value(java.lang.Object),413,425,"/**
* Extracts a specific value from the given node.
* @param node Node object
* @return Value of type V or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,<init>,"com.google.common.graph.EdgesConnecting:<init>(java.util.Map,java.lang.Object)",42,45,"/**
* Initializes edges connecting to a target node.
* @param nodeToEdgeMap map of nodes to edge collections
* @param targetNode the node for which to find connected edges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,<init>,"com.google.common.graph.EndpointPair:<init>(java.lang.Object,java.lang.Object)",46,49,"/**
* Constructs an EndpointPair with two nodes.
* @param nodeU first endpoint (cannot be null)
* @param nodeV second endpoint (cannot be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.ImmutableGraph),71,77,"/**
* Converts graph to a masked version.
* @param graph input graph to mask
* @return masked graph or null if invalid input
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.ImmutableNetwork),69,75,"/**
* Returns the input network with its mask applied.
* @param network Input network to modify
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ImmutableValueGraph),66,72,"/**
* Wraps the input graph in a new immutable value graph instance.
* @param graph input graph to be wrapped
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,<init>,com.google.common.graph.MapIteratorCache:<init>(java.util.Map),58,60,"/**
* Initializes iterator cache with a given backing map.
* @param backingMap non-null underlying map instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,getWithoutCaching,com.google.common.graph.MapIteratorCache:getWithoutCaching(java.lang.Object),93,96,"/**
* Retrieves a specific mask value from the backing map.
* @param key unique identifier for the mask value
* @return The associated mask value or null if not present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MultiEdgesConnecting.java,<init>,"com.google.common.graph.MultiEdgesConnecting:<init>(java.util.Map,java.lang.Object)",43,46,"/**
* Configures multi-edge connections from out-going edges to a target node.
* @param outEdgeToNode map of out-going edges to their corresponding nodes
* @param targetNode the node that will be connected by multiple edges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,visitNext,com.google.common.graph.Traverser$Traversal$2:visitNext(java.util.Deque),480,480,"/**
* Returns a mask of iterators based on the provided horizon.
* @param horizon deque of iterators to process
* @return abstract N object or null if not applicable","* Visits the next node from the top iterator of {@code horizon} and returns the visited node.
     * Null is returned to indicate reaching the end of the top iterator.
     *
     * <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return
     * {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure.
     * (Note, however, that the callers of {@code visitNext()} often insert additional iterators
     * into {@code horizon} between calls to {@code visitNext()}. This causes them to receive
     * additional values interleaved with those shown above.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser:<init>(com.google.common.graph.SuccessorsFunction),70,72,"/**
* Initializes the Traverser with a SuccessorsFunction.
* @param successorFunction function to compute successors for traversal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,<init>,com.google.common.graph.UndirectedGraphConnections:<init>(java.util.Map),43,45,"/**
* Initializes graph connections with given node values.
* @param adjacentNodeValues map of nodes to their corresponding values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SequentialFunnel:<init>(com.google.common.hash.Funnel),182,184,"/**
* Initializes the sequential funnel with a given funnel element.
* @param elementFunnel funnel element to be used in the sequence
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SinkAsStream:<init>(com.google.common.hash.PrimitiveSink),253,255,"/**
* Initializes the sink stream with a primitive sink.
* @param sink non-null PrimitiveSink instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$StringCharsetFunnel:<init>(java.nio.charset.Charset),93,95,"/**
* Initializes the CharsetFunnel with a specified character set.
* @param charset valid character set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,<init>,"com.google.common.hash.HashingInputStream:<init>(com.google.common.hash.HashFunction,java.io.InputStream)",41,44,"/**
* Initializes a new HashingInputStream instance with the given hash function and input stream.
* @param hashFunction hashing function to apply
* @param in input stream to wrap
*/","* Creates an input stream that hashes using the given {@link HashFunction} and delegates all data
   * read from it to the underlying {@link InputStream}.
   *
   * <p>The {@link InputStream} should not be read from before or after the hand-off.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,<init>,"com.google.common.hash.HashingOutputStream:<init>(com.google.common.hash.HashFunction,java.io.OutputStream)",44,47,"/**
* Initializes a new HashingOutputStream with the specified hash function and output stream.
* @param hashFunction hashing algorithm to apply
* @param out target output stream for hashed data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,<init>,com.google.common.io.AppendableWriter:<init>(java.lang.Appendable),46,48,"/**
 * Initializes an AppendableWriter instance with the specified target. 
 * @param target the appendable target where data will be written to 
 */","* Creates a new writer that appends everything it writes to {@code target}.
   *
   * @param target target to which to append output",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:encodingStream(java.io.Writer),637,681,"/**
* Writes masked data to the specified output stream.
* @param out target output writer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:trimTrailingPadding(java.lang.CharSequence),722,736,"/**
* Trims trailing padding characters from input sequence.
* @param chars input CharSequence to trim
* @return trimmed CharSequence or original if no padding found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:decodingStream(java.io.Reader),778,849,"/**
* Decompresses input data into an InputStream.
* @param reader Reader object for decompression
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingSink,com.google.common.io.BaseEncoding:encodingSink(com.google.common.io.CharSink),177,187,"/**
* Creates a ByteSink instance from the given CharSink, performing internal processing.
*/",* Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingSource,com.google.common.io.BaseEncoding:decodingSource(com.google.common.io.CharSource),250,260,"/**
* Creates a ByteSource from encoded CharSource.
* @param encodedSource input source with encoded characters
*/","* Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code
   * CharSource}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding:trimTrailingPadding(java.lang.CharSequence),272,274,"/**
 * Applies function mask to input CharSequence.
 * @param chars input sequence of characters
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoringReader,"com.google.common.io.BaseEncoding:ignoringReader(java.io.Reader,java.lang.String)",1055,1080,"/**
* Creates a Reader that filters out characters matching the given string.
* @param delegate underlying reader to read from
* @param toIgnore string of characters to ignore
* @return filtered Reader instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,<init>,com.google.common.io.CharSequenceReader:<init>(java.lang.CharSequence),46,48,"/**
* Initializes the reader with the given CharSequence.
* @param seq input text sequence to read from
*/",Creates a new reader wrapping the given character sequence.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(char[]),290,293,"/**
* Masks sensitive data in the provided character buffer.
* @param cbuf input array of characters to be masked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(java.lang.String),300,303,"/**
 * Applies mask to input string.
 * @param str input string to be masked.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToBuilder,"com.google.common.io.CharStreams:copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)",112,124,"/**
* Reads data from a Reader into a StringBuilder and returns the total bytes read.
* @param from input Reader
* @param to output StringBuilder
* @return total bytes read or -1 on IOException
*/","* Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not
   * close or flush the reader.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToWriter,"com.google.common.io.CharStreams:copyReaderToWriter(java.io.Reader,java.io.Writer)",140,152,"/**
* Copies data from a Reader to a Writer.
* @param from input stream
* @param to output stream
* @return total bytes written
*/","* Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or
   * flush the reader or writer.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,skipFully,"com.google.common.io.CharStreams:skipFully(java.io.Reader,long)",258,267,"/**
* Reads and discards data from the Reader until at least 'n' bytes are masked.
* @param reader source of input data
* @param n number of bytes to mask
* @throws IOException if an I/O error occurs
*/","* Discards {@code n} characters of data from the reader. This method will block until the full
   * amount has been skipped. Does not close the reader.
   *
   * @param reader the reader to read from
   * @param n the number of characters to skip
   * @throws EOFException if this stream reaches the end before skipping all the characters
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,<init>,com.google.common.io.Closer:<init>(com.google.common.io.Closer$Suppressor),95,98,"/**
* Constructs a Closer instance with the provided Suppressor.
* @param suppressor Suppressor instance for error suppression
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingInputStream.java,<init>,com.google.common.io.CountingInputStream:<init>(java.io.InputStream),43,45,"/**
 * Initializes a CountingInputStream with the given InputStream.
 * @param in input stream to be wrapped and counted
 */","* Wraps another input stream, counting the number of bytes read.
   *
   * @param in the input stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingOutputStream.java,<init>,com.google.common.io.CountingOutputStream:<init>(java.io.OutputStream),42,44,"/**
 * Initializes a new instance of CountingOutputStream with the specified output stream.
 * @param out the underlying OutputStream to wrap
 */","* Wraps another output stream, counting the number of bytes written.
   *
   * @param out the output stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newReader,"com.google.common.io.Files:newReader(java.io.File,java.nio.charset.Charset)",86,90,"/**
* Creates a BufferedReader instance to read from the specified file.
* @param file the File object representing the input file
* @param charset the Charset used for reading the file content
*/","* Returns a buffered reader that reads from a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered reader",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newWriter,"com.google.common.io.Files:newWriter(java.io.File,java.nio.charset.Charset)",104,108,"/**
* Creates a buffered writer to write data to the specified file.
* @param file target file for writing
* @param charset character encoding for output
*/","* Returns a buffered writer that writes to a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,
   * java.nio.file.OpenOption...)}.
   *
   * @param file the file to write to
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered writer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,touch,com.google.common.io.Files:touch(java.io.File),445,451,"/**
* Updates file modification mask.
* @param file File object to update
*/","* Creates an empty file or updates the last updated timestamp on the same as the unix command of
   * the same name.
   *
   * @param file the file to create or update
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,createParentDirs,com.google.common.io.Files:createParentDirs(java.io.File),462,478,"/**
* Creates directory masks for the given file and its parent directories.
* @param file target file
*/","* Creates any necessary but nonexistent parent directories of the specified file. Note that if
   * this operation fails it may have succeeded in creating some (but not all) of the necessary
   * parent directories.
   *
   * @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent
   *     directories of the specified file could not be created.
   * @since 4.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getFileExtension,com.google.common.io.Files:getFileExtension(java.lang.String),796,801,"/**
* Extracts file name from full path using custom string manipulation methods.
* @param fullName full path to a file
* @return file name or empty string if no dot found
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> for
   * the given file name, or the empty string if the file has no extension. The result does not
   * include the '{@code .}'.
   *
   * <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's
   * name as determined by {@link File#getName}. It does not account for any filesystem-specific
   * behavior that the {@link File} API does not already account for. For example, on NTFS it will
   * report {@code ""txt""} as the extension for the filename {@code ""foo.exe:.txt""} even though NTFS
   * will drop the {@code "":.txt""} part of the name when the file is actually created on the
   * filesystem due to NTFS's <a
   * href=""https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs"">Alternate
   * Data Streams</a>.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getNameWithoutExtension,com.google.common.io.Files:getNameWithoutExtension(java.lang.String),813,818,"/**
* Extracts the filename from a given path without extension.
* @param file input file path
* @return filename string (no extension)
*/","* Returns the file name without its <a
   * href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> or path. This is
   * similar to the {@code basename} unix command. The result does not include the '{@code .}'.
   *
   * @param file The name of the file to trim the extension from. This can be either a fully
   *     qualified file name (including a path) or just a file name.
   * @return The file name without its path or extension.
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,<init>,com.google.common.io.LittleEndianDataInputStream:<init>(java.io.InputStream),51,53,"/**
* Initializes a new LittleEndianDataInputStream instance from an input stream.
* @param in input stream to read from
*/","* Creates a {@code LittleEndianDataInputStream} that wraps the given stream.
   *
   * @param in the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,<init>,com.google.common.io.LittleEndianDataOutputStream:<init>(java.io.OutputStream),46,48,"/**
 * Constructs a new LittleEndianDataOutputStream from an OutputStream.
 * @param out the OutputStream to write to
 */","* Creates a {@code LittleEndianDataOutputStream} that wraps the given stream.
   *
   * @param out the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,touch,com.google.common.io.MoreFiles:touch(java.nio.file.Path),389,407,"/**
* Applies file mask to the specified path.
* @param path target file or directory
*/","* Like the unix command of the same name, creates an empty file or updates the last modified
   * timestamp of the existing file at the given path to the current system time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.util.regex.Pattern),53,55,"/**
 * Initializes the filter with a regular expression pattern.
 * @param pattern regex pattern to match filenames against
 */","* Constructs a pattern file name filter object.
   *
   * @param pattern the pattern on which to filter file names",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,isPowerOfTwo,com.google.common.math.BigIntegerMath:isPowerOfTwo(java.math.BigInteger),72,75,"/**
* Checks if BigInteger meets custom mask criteria.
* @param x input value to check
* @return true if it matches the mask, false otherwise
*/",Returns {@code true} if {@code x} represents a power of two.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,nextEscapeIndex,"com.google.common.net.PercentEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",127,137,"/**
* Finds the first invalid or disallowed character in a string.
* @param csq input CharSequence to search
* @param index starting index for search
* @param end ending index for search
* @return first invalid index, or original index if valid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,escape,com.google.common.net.PercentEscaper:escape(java.lang.String),143,154,"/**
* Sanitizes input string by filtering out unsafe characters.
* @param s input string to be sanitized
* @return sanitized string or modified string if unsafe characters found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,forEach,com.google.common.primitives.ImmutableDoubleArray:forEach(java.util.function.DoubleConsumer),426,431,"/**
* Applies a DoubleConsumer to masked array elements.
* @param consumer callback function to process each double value
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,forEach,com.google.common.primitives.ImmutableIntArray:forEach(java.util.function.IntConsumer),421,426,"/**
* Applies consumer function to masked array elements.
*@param consumer callback function to process each element
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,forEach,com.google.common.primitives.ImmutableLongArray:forEach(java.util.function.LongConsumer),423,428,"/**
* Iterates over an array range and applies a LongConsumer to each element.
* @param consumer function to process long values
*/","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,isWrapperType,com.google.common.primitives.Primitives:isWrapperType(java.lang.Class),101,103,"/**
* Checks if a given class is a primitive type.
* @param type Class to check
* @return true if primitive, false otherwise
*/","* Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link
   * Integer}.
   *
   * @see Class#isPrimitive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,wrap,com.google.common.primitives.Primitives:wrap(java.lang.Class),115,122,"/**
* Wraps primitive types with their wrapper equivalents.
* @param type the input class to be potentially wrapped
* @return the original type if not a primitive, or its wrapper type
*/","* Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     wrap(int.class) == Integer.class
   *     wrap(Integer.class) == Integer.class
   *     wrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,unwrap,com.google.common.primitives.Primitives:unwrap(java.lang.Class),134,141,"/**
* Returns the primitive type wrapper class if available, else the input type.
* @param type input type to check for primitive wrapper
*/","* Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     unwrap(Integer.class) == int.class
   *     unwrap(int.class) == int.class
   *     unwrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,"com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String,int)",229,238,"/**
* Converts a string to a byte value in the specified base.
* @param string input string to convert
* @param radix string base (2-36)
* @return byte representation or throws NumberFormatException if out of range
*/","* Returns the unsigned {@code byte} value represented by a string with the given radix.
   *
   * @param string the string containing the unsigned {@code byte} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,"com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String,int)",360,369,"/**
* Converts a string to an unsigned integer using specified radix.
* @param string input string
* @param radix numeric base of the string (e.g. 10 for decimal)
* @return unsigned integer value or throws NFE if invalid
*/","* Returns the unsigned {@code int} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead.
   *
   * @param string the string containing the unsigned integer representation to be parsed.
   * @param radix the radix to use while parsing {@code s}; must be between {@link
   *     Character#MIN_RADIX} and {@link Character#MAX_RADIX}.
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or
   *     if supplied radix is invalid.
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$LocationInfo:<init>(java.io.File,java.lang.ClassLoader)",411,414,"/**
* Initializes LocationInfo with home directory and class loader.
* @param home absolute path to user's home directory
* @param classloader ClassLoader instance for resource loading
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ResourceInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",217,221,"/**
* Constructs ResourceInfo object with given parameters.
* @param file the underlying File object
* @param resourceName the name of the resource
* @param loader the ClassLoader to use for loading resources
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable:<init>(java.lang.reflect.AccessibleObject),68,72,"/**
* Initializes an invokable object with a given member.
* @param member accessible object and member to initialize the invokable object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeVariableKey:<init>(java.lang.reflect.TypeVariable),554,556,"/**
* Constructs key from given type variable.
* @param var non-null type variable to create key from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.reflect.Type),164,166,"/**
* Constructs a TypeToken instance with the specified runtime type.
* @param type runtime type of the token
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$2:usedInGenericType(java.lang.reflect.Type),642,642,"/**
* Returns a mask value based on the given data type. 
* @param type the data type to generate a mask for 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,getComponentType,com.google.common.reflect.Types:getComponentType(java.lang.reflect.Type),167,192,"/**
* Visits the given type hierarchy and returns a Type object or null if not found.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)",70,75,"/**
* Wraps a future to catch and handle exceptions of specified type.
* @param inputFuture the future to wrap
* @param exceptionType the expected exception type
* @param fallback the fallback value if an exception occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,<init>,com.google.common.util.concurrent.AbstractFuture$Failure:<init>(java.lang.Throwable),163,165,"/**
* Sets the exception that caused the failure.
* @param exception Throwable that triggered the failure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(long,java.util.concurrent.TimeUnit)",742,745,"/**
* Constructs a new schedule with specified delay and time unit.
* @param delay time interval before execution
* @param unit time unit (e.g. TimeUnit.SECONDS, TimeUnit.MINUTES)
*/","* @param delay the time from now to delay execution
       * @param unit the time unit of the delay parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object)",62,65,"/**
* Initializes an abstract transform future with a given input future and transformation function.
* @param inputFuture the future to be transformed
* @param function the transformation function to apply",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,releaseResources,com.google.common.util.concurrent.AggregateFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),336,347,"/**
* Releases resources based on specified reason.
* @param reason reason for releasing resources (e.g. error, timeout)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,<init>,com.google.common.util.concurrent.AtomicLongMap:<init>(java.util.concurrent.ConcurrentHashMap),64,66,"/**
* Initializes AtomicLongMap with an existing ConcurrentHashMap.
* @param map underlying map of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,updateAndGet,"com.google.common.util.concurrent.AtomicLongMap:updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)",145,153,"/**
* Applies a unary operator to the mapped value for a given key.
* @param key unique identifier
* @param updaterFunction function to update the value
* @return updated value or 0 if not found
*/","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the new value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndUpdate,"com.google.common.util.concurrent.AtomicLongMap:getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)",162,174,"/**
* Updates and returns user profile mask by ID using the provided function.
* @param key unique user identifier
* @param updaterFunction LongUnaryOperator to compute new mask value
* @return updated user profile mask or 0L if not found
*/","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the old value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,asAsyncCallable,"com.google.common.util.concurrent.Callables:asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService)",49,56,"/**
* Wraps a Callable in an AsyncCallable using the provided executor service.
* @param callable target function to execute asynchronously
* @param executorService executor service used for asynchronous execution
*/","* Creates an {@link AsyncCallable} from a {@link Callable}.
   *
   * <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link
   * ListeningExecutorService#submit(Callable)}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier)",66,84,"/**
* Creates a wrapped Callable that executes the original callable with its thread's name modified.
* @param callable original callable to execute
* @param nameSupplier supplier of new thread name
* @return wrapped callable with modified thread name
*/","* Wraps the given callable such that for the duration of {@link Callable#call} the thread that is
   * running will have the given name.
   *
   * @param callable The callable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.lang.Runnable,com.google.common.base.Supplier)",94,111,"/**
* Wraps a Runnable task with thread name management.
* @param task the task to execute
* @param nameSupplier supplier of new thread name
*/","* Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is
   * running with have the given name.
   *
   * @param task The Runnable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,add,"com.google.common.util.concurrent.ClosingFuture$CloseableList:add(java.lang.AutoCloseable,java.util.concurrent.Executor)",2230,2242,"/**
* Executes closure and cleanup tasks on the specified AutoCloseable resource.
* @param closeable resource to be closed or cleaned up
* @param executor executor for running asynchronous tasks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$Peeker:<init>(com.google.common.collect.ImmutableList),1136,1138,"/**
* Initializes Peeper with a list of closing futures.
* @param futures List of closing future objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:<init>(com.google.common.util.concurrent.ClosingFuture),332,334,"/**
* Initializes with a closing Future to be used in conjunction.
* @param closingFuture future containing value and closer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,withoutCloser,com.google.common.util.concurrent.ClosingFuture:withoutCloser(com.google.common.util.concurrent.AsyncFunction),826,830,"/**
* Wraps an async function with a mask to handle closing logic.
* @param function the asynchronous function to be masked
*/","* Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input,
   * ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned
   * {@link ListenableFuture}.
   *
   * <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction,
   * Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it
   * meets these conditions:
   *
   * <ul>
   *   <li>It does not need to capture any {@link Closeable} objects by calling {@link
   *       DeferredCloser#eventuallyClose(Object, Executor)}.
   *   <li>It returns a {@link ListenableFuture}.
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsFuture() returns a ListenableFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   * }
   *
   * @param function transforms the value of a {@code ClosingFuture} step to a {@link
   *     ListenableFuture} with the value of a derived step",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),452,454,"/**
* Initializes the lock factory with a given policy.
* @param policy lock creation policy
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,newProxy,"com.google.common.util.concurrent.FakeTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",44,52,"/**
* Applies mask operation to the specified object and types.
* @param target Object to apply mask to
* @param interfaceType Type to apply mask to
* @param timeoutDuration Timeout duration for mask operation
* @param timeoutUnit Unit of time for timeout duration
* @return The original target object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.FluentFuture),145,151,"/**
* Wraps a FluentFuture in a deprecated alias.
* @param future input FluentFuture to be aliased
*/","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,lazyTransform,"com.google.common.util.concurrent.Futures:lazyTransform(java.util.concurrent.Future,com.google.common.base.Function)",512,555,"/**
* Transforms a future of type I to a future of type O using the provided function.
* @param input future of type I
* @param function function to apply to input
* @return future of type O or null if not found
*/","* Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation
   * {@code function} is invoked on each call to {@link Future#get() get()} on the returned future.
   *
   * <p>The returned {@code Future} reflects the input's cancellation state directly, and any
   * attempt to cancel the returned Future is likewise passed through to the input Future.
   *
   * <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout
   * to the execution of the underlying {@code Future}, <em>not</em> to the execution of the
   * transformation function.
   *
   * <p>The primary audience of this method is callers of {@code transform} who don't have a {@code
   * ListenableFuture} available and do not mind repeated, lazy function evaluation.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @return A future that returns the result of the transformation.
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier)",867,873,"/**
* Creates an Executor that wraps the provided executor with a custom function mask.
* @param executor underlying executor instance
* @param nameSupplier supplier of string values for function masking
*/","* Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param executor The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)",886,902,"/**
* Wraps an ExecutorService with functional masking,
* allowing for named execution of tasks.
* @param service underlying executor service
* @param nameSupplier supplier of task names
*/","* Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run
   * in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)",915,932,"/**
* Wraps a ScheduledExecutorService with custom callable and runnable mask.
* @param service the executor to wrap
* @param nameSupplier supplies a name for each execution
*/","* Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its
   * tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Platform.java,restoreInterruptIfIsInterruptedException,com.google.common.util.concurrent.Platform:restoreInterruptIfIsInterruptedException(java.lang.Throwable),34,39,"/**
* Handles and potentially masks specified Throwable instance.
* @param t Throwable object to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),234,236,"/**
* Initializes rate limiter with given Stopwatch instance.
* @param stopwatch Stopwatch to track elapsed time. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,<init>,com.google.common.util.concurrent.SequentialExecutor:<init>(java.util.concurrent.Executor),90,92,"/**
* Initializes the SequentialExecutor with an existing Executor instance.
* @param executor non-null Executor to wrap
*/",Use {@link MoreExecutors#newSequentialExecutor},,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,execute,com.google.common.util.concurrent.SequentialExecutor:execute(java.lang.Runnable),100,174,"/**
* Submits a task to the worker queue, potentially executing it immediately.
* @param task the task to submit
*/","* Adds a task to the queue and makes sure a worker thread is running.
   *
   * <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,
   * execution of tasks will stop until a call to this method is made.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,<init>,com.google.common.util.concurrent.SimpleTimeLimiter:<init>(java.util.concurrent.ExecutorService),56,58,"/**
* Initializes the SimpleTimeLimiter instance with an ExecutorService.
* @param executor The executor service to use for time-limited tasks.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setUncaughtExceptionHandler,com.google.common.util.concurrent.ThreadFactoryBuilder:setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler),129,134,"/**
* Sets an uncaught exception handler using the provided function. 
* @param uncaughtExceptionHandler lambda expression to handle exceptions 
*/","* Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory.
   *
   * @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with
   *     this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setThreadFactory,com.google.common.util.concurrent.ThreadFactoryBuilder:setThreadFactory(java.util.concurrent.ThreadFactory),145,149,"/**
* Sets thread factory mask using given backing thread factory.
* @param backingThreadFactory thread factory to use for masking
*/","* Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads
   * will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}.
   *
   * @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during
   *     thread creation.
   * @return this for the builder pattern
   * @see MoreExecutors",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture:<init>(com.google.common.util.concurrent.ListenableFuture),82,84,"/**
* Constructs a TimeoutFuture from a given ListenableFuture.
* @param delegate the underlying future to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit)",195,219,"/**
* Waits for the specified thread to join, with a timeout.
* @param toJoin thread to wait on
* @param timeout maximum time to wait in given unit
* @param unit TimeUnit of the timeout
*/","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,<init>,com.google.common.util.concurrent.WrappingExecutorService:<init>(java.util.concurrent.ExecutorService),51,53,"/**
* Creates a wrapping executor service instance with the given delegate.
* @param delegate underlying executor service to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.util.concurrent.Callable),98,101,"/**
* Executes a callable task through a delegation chain.
* @param task Callable to execute, result type determined by generics
* @return Future representing the result of the executed task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$SplittingIterator:<init>(com.google.common.base.Splitter,java.lang.CharSequence)",541,546,"/**
* Initializes the iterator with a splitter and the input sequence to split.
* @param splitter Splitter object containing trimming, empty string omission, and limit settings
* @param toSplit CharSequence to be split into individual elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,ticker,com.google.common.cache.CacheBuilder:ticker(com.google.common.base.Ticker),942,947,"/**
* Configures cache builder with a ticker.
* @param ticker ticker object to associate with the cache
* @return the updated CacheBuilder instance
*/","* Specifies a nanosecond-precision time source for this cache. By default, {@link
   * System#nanoTime} is used.
   *
   * <p>The primary intent of this method is to facilitate testing of caches with a fake or mock
   * time source.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a ticker was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,removalListener,com.google.common.cache.CacheBuilder:removalListener(com.google.common.cache.RemovalListener),976,985,"/**
* Sets removal listener for cache events.
* @param listener Removal event handler
*/","* Specifies a listener instance that caches should notify each time an entry is removed for any
   * {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener
   * as part of the routine maintenance described in the class documentation above.
   *
   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder
   * reference; instead use the reference this method <i>returns</i>. At runtime, these point to the
   * same instance, but only the returned reference has the correct generic type information to
   * ensure type safety. For best results, use the standard method-chaining idiom illustrated in the
   * class documentation above, configuring a builder and building your cache in a single statement.
   * Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache
   * operation at some <i>undefined</i> point in the future.
   *
   * <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to
   * the {@code Cache} user, only logged via a {@link Logger}.
   *
   * @return the cache builder reference that should be used instead of {@code this} for any
   *     remaining configuration and cache building
   * @throws IllegalStateException if a removal listener was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,setValue,com.google.common.collect.LinkedListMultimap$NodeIterator:setValue(java.lang.Object),407,410,"/**
* Updates the current object with new value.
* @param value object to be updated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,set,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:set(java.lang.Object),559,563,"/**
* Updates the current object with new value.
* @param value new object to replace the current one
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",135,142,"/**
* Updates mask based on an edge and a node, considering the previous connection.
* @param edge edge to process
* @param node node to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",96,100,"/**
* Updates the mask based on the given edge and node.
* @param edge edge to check
* @param node node to update mask for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,<init>,"com.google.common.graph.ElementOrder:<init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator)",73,77,"/**
* Initializes an instance of ElementOrder with the specified type and optional comparator.
* @param type Type of element order
* @param comparator Optional comparator for sorted elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hash,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:hash(),399,405,"/**
* Calculates hash code based on current state and buffer content.
* @return calculated hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,mean,com.google.common.math.Stats:mean(),254,257,"/**
* Calculates and returns the mean value.
* @return the calculated mean value
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,min,com.google.common.math.Stats:min(),380,383,"/**
* Calculates minimum value based on non-zero count.
* @return Minimum value (min)","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,max,com.google.common.math.Stats:max(),398,401,"/**
* Calculates and returns maximum value.
* @return max maximum value
*/","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,mean,com.google.common.math.StatsAccumulator:mean(),247,250,"/**
* Calculates and returns the mean value.
* @return average of all values (mean)
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,min,com.google.common.math.StatsAccumulator:min(),373,376,"/**
* Calculates minimum value based on count condition.
* @return minimum value or NaN (Not a Number) if count is 0
*/","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,max,com.google.common.math.StatsAccumulator:max(),391,394,"/**
* Calculates and returns the maximum value based on count condition.
* @return max value or NaN if count is zero
*/","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture$CloseableList:whenClosedCountDown(),2247,2258,"/**
* Returns a CountDownLatch that will be closed when the object is closed.
* @return CountDownLatch instance or 0-count latch if already closed
*/",* Returns a latch that reaches zero when this objects' deferred closeables have been closed.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,execute,com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:execute(java.lang.Runnable),320,374,"/**
* Submits a Runnable task to the sequencer or delegates it to an executor.
* @param task the task to be submitted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,run,com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:run(),189,230,"/**
* Continuously executes callbacks from the listener queue.
*@throws Exception
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,hasNext,com.google.common.base.AbstractIterator:hasNext(),53,64,"/**
* Determines if the function is masked based on its state.
* @return true if masked, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoForward,com.google.common.base.Converter:unsafeDoForward(java.lang.Object),244,246,"/**
* Applies two intermediate transformations (m1 and m2) to input object 'a'.
* @param a input object subject to transformations
* @return transformed object of type B, or null if transformation fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoBackward,com.google.common.base.Converter:unsafeDoBackward(java.lang.Object),248,250,"/**
 * Chains two transformations: m1() and m2(), 
 * applying them sequentially to input object b. 
 * @param b input object of type B, may be null 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ForMapWithDefault:apply(java.lang.Object),203,211,"/**
* Retrieves a value from the map based on the provided key.
* @param key unique identifier
* @return Value object or default value if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$ExpiringMemoizingSupplier:get(),300,328,"/**
* Computes and returns the result, synchronizing on initial computation if necessary.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$MemoizingSupplier:get(),137,155,"/**
* Initializes and returns the result of method 'm1' by delegate.
* @return Result type T or null if uninitialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:get(),192,209,"/**
* Computes and returns value of type T using delegate or cached result.
* @return T computed result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.String),407,422,"/**
* Masks specific characters in a string using a bitwise XOR operation.
* @param string input string to process
* @return modified string with masked characters or original string if no matches found
*/","* Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII
   * characters} have been converted to lowercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(char),446,448,"/**
* Applies case mask to character if it matches specified condition.
* @param c input character
* @return modified character or original character if no match","* If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the
   * lowercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasUpperCase,com.google.common.io.BaseEncoding$Alphabet:hasUpperCase(),555,562,"/**
* Checks if any character in the input string matches a specific ASCII mask. 
* @return true if a match is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.String),455,470,"/**
* Masks specific characters in a string using the given case mask.
* @param string input string to process
*/","* Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII
   * characters} have been converted to uppercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(char),494,496,"/**
* Masks case of input character using bitwise XOR operation.
* @param c input character to be masked
*/","* If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the
   * uppercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasLowerCase,com.google.common.io.BaseEncoding$Alphabet:hasLowerCase(),546,553,"/**
* Checks if any character in the input string matches the mask. 
* @return true if a match is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,truncate,"com.google.common.base.Ascii:truncate(java.lang.CharSequence,int,java.lang.String)",550,577,"/**
* Truncates input CharSequence to specified length and appends truncation indicator.
* @param seq input text
* @param maxLength maximum allowed characters
* @param truncationIndicator string to append when truncated
* @return truncated text or original if not truncated
*/","* Truncates the given character sequence to the given maximum length. If the length of the
   * sequence is greater than {@code maxLength}, the returned string will be exactly {@code
   * maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise,
   * the sequence will be returned as a string with no changes to the content.
   *
   * <p>Examples:
   *
   * {@snippet :
   * Ascii.truncate(""foobar"", 7, ""...""); // returns ""foobar""
   * Ascii.truncate(""foobar"", 5, ""...""); // returns ""fo...""
   * }
   *
   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use
   * with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe
   * for use with it (such as all-ASCII text) and for simple debugging text. When using this method,
   * consider the following:
   *
   * <ul>
   *   <li>it may split surrogate pairs
   *   <li>it may split characters and combining characters
   *   <li>it does not consider word boundaries
   *   <li>if truncating for display to users, there are other considerations that must be taken
   *       into account
   *   <li>the appropriate truncation indicator may be locale-dependent
   *   <li>it is safe to use non-ASCII characters in the truncation indicator
   * </ul>
   *
   * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code
   *     truncationIndicator}
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,writeTo,com.google.common.math.Stats:writeTo(java.nio.ByteBuffer),605,618,"/**
* Processes and validates input ByteBuffer for statistical functions.
* @param buffer input data to process
*/","* Writes to the given {@link ByteBuffer} a byte representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance
   *     is written. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,constrainToRange,"com.google.common.primitives.Ints:constrainToRange(int,int,int)",284,288,"/**
* Clamps the given value within a specified range [min, max].
* @param value input value
* @param min minimum allowed value
* @param max maximum allowed value
* @return clamped value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,constrainToRange,"com.google.common.primitives.Shorts:constrainToRange(short,short,short)",274,277,"/**
* Returns a clamped value within the specified range [min, max].
* @param value input value
* @param min minimum allowed value
* @param max maximum allowed value
* @return value if in range; otherwise, nearest boundary value
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code short} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setPriority,com.google.common.util.concurrent.ThreadFactoryBuilder:setPriority(int),104,120,"/**
* Sets thread factory builder's priority.
* @param priority the desired thread priority (MIN_PRIORITY <= priority <= MAX_PRIORITY)
* @return this builder instance
*/","* Sets the priority for new threads created with this ThreadFactory.
   *
   * <p><b>Warning:</b> relying on the thread scheduler is <a
   * href=""http://errorprone.info/bugpattern/ThreadPriorityCheck"">discouraged</a>.
   *
   * @param priority the priority for new Threads created with this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,equalsIgnoreCase,"com.google.common.base.Ascii:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",601,625,"/**
* Compares two character sequences with a custom mask.
* @param s1 first sequence
* @param s2 second sequence
* @return true if sequences match, false otherwise
*/","* Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are
   * equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'}
   * or {@code 'A'} and {@code 'Z'} inclusive.
   *
   * <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used
   * in preference if at least one of the parameters is known to contain only ASCII characters.
   *
   * <p>Note however that this method does not always behave identically to expressions such as:
   *
   * <ul>
   *   <li>{@code string.toUpperCase().equals(""UPPER CASE ASCII"")}
   *   <li>{@code string.toLowerCase().equals(""lower case ascii"")}
   * </ul>
   *
   * <p>due to case-folding of some non-ASCII characters (which does not occur in {@link
   * String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author
   * probably wanted the behavior provided by this method rather than the subtle and sometimes
   * surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$And:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1571,1574,"/**
 * Initializes two character matchers.
 * @param a first matcher to initialize
 * @param b second matcher to initialize
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$AnyOf:<init>(java.lang.CharSequence),1755,1758,"/**
* Initializes any-of characters collection with specified string.
* @param chars input character sequence
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$ForPredicate:<init>(com.google.common.base.Predicate),1822,1824,"/**
* Initializes the filter with a custom predicate.
* @param predicate function to evaluate each character against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Negated:<init>(com.google.common.base.CharMatcher),1521,1523,"/**
* Creates a negated CharMatcher instance from the provided original matcher.
* @param original the original CharMatcher to negate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$Or:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1604,1607,"/**
 * Combines two character matchers into a single matcher. 
 * @param a first character matcher
 * @param b second character matcher
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$And:setBits(java.util.BitSet),1581,1590,"/**
* Combines and updates the given BitSet with results from first and second. 
* @param table BitSet to be updated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Negated:setBits(java.util.BitSet),1545,1552,"/**
* Performs a set operation on the provided BitSet.
* @param table input BitSet to be modified
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Or:setBits(java.util.BitSet),1609,1614,"/**
 * Executes methods 'first.m1' and 'second.m1' on provided BitSet.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$InRange:<init>(char,char)",1790,1794,"/**
* Sets range of allowed characters to [startInclusive, endInclusive].
* @param startInclusive starting character (inclusive)
* @param endInclusive ending character (inclusive) 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$RangesMatcher:<init>(java.lang.String,char[],char[])",1324,1335,"/**
* Initializes a RangesMatcher with description and overlapping character ranges.
* @param description descriptive string
* @param rangeStarts array of starting characters for each range
* @param rangeEnds array of ending characters for each range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,<init>,"com.google.common.cache.CacheStats:<init>(long,long,long,long,long,long)",78,99,"/**
* Initializes CacheStats object with performance metrics.
* @param hitCount number of cache hits
* @param missCount number of cache misses
* @param loadSuccessCount number of successful loads
* @param loadExceptionCount number of failed loads
* @param totalLoadTime aggregate time for all loads
* @param evictionCount number of evictions from cache","* Constructs a new {@code CacheStats} instance.
   *
   * <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed
   * by end users and is too fine-grained for a builder.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,<init>,com.google.common.collect.AbstractMapBasedMultimap:<init>(java.util.Map),123,126,"/**
* Initializes an empty multimap from a given map.
* @param map must be empty; otherwise, an exception is thrown
*/","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,setMap,com.google.common.collect.AbstractMapBasedMultimap:setMap(java.util.Map),129,136,"/**
* Updates internal state with a new collection of key-value pairs.
* @param map Map containing key-value pairs to process
*/",Used during deserialization only.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,<init>,com.google.common.collect.AbstractMapBasedMultiset:<init>(java.util.Map),64,67,"/**
* Initializes an empty multiset from a backing map.
* @param backingMap empty map to store count of each element
*/",Standard constructor.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction,java.util.Comparator)",48,102,"/**
* Creates a Spliterator with specified characteristics and function.
* @param size the number of elements
* @param extraCharacteristics additional spliterator characteristics (e.g. SORTED)
* @param function IntFunction to convert int to T
* @param comparator Comparator for T or null if not sorted
* @return Spliterator<T> instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,add,com.google.common.collect.Collections2$FilteredCollection:add(java.lang.Object),135,139,"/**
* Applies predicate and filters result.
* @param element object to process (must not be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,addAll,com.google.common.collect.Collections2$FilteredCollection:addAll(java.util.Collection),141,147,"/**
* Applies predicate to each element in the collection and filters results.
* @param collection input collection of elements
* @return true if all elements pass filter, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,java.lang.Comparable)",166,172,"/**
* Creates a ContiguousSet containing all elements between the given range.
* @param fromElement start of the element range
* @param toElement end of the element range
* @return ContiguousSet object or null if invalid range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",177,185,"/**
* Creates a contiguous set of elements within the specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return ContiguousSet object or null if invalid range",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferKeyTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferKeyTypeOrObjectUnderJ2cl(java.util.Map),97,106,"/**
* Returns the mask for a given enum-based map.
* @param map Enum-based map instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferValueTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferValueTypeOrObjectUnderJ2cl(java.util.Map),108,114,"/**
* Retrieves the Class of a given enum value from an EnumBiMap or other map.
* @param map Map containing enum values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,<init>,com.google.common.collect.EnumMultiset:<init>(java.lang.Class),93,98,"/**
* Initializes an EnumMultiset for the given enum class.
* @param type the enum class to be used in the multiset
*/",Creates an empty {@code EnumMultiset}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,<init>,com.google.common.collect.ImmutableEnumMap:<init>(java.util.EnumMap),56,59,"/**
* Creates an ImmutableEnumMap from a non-empty EnumMap.
* @param delegate non-empty EnumMap instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",674,682,"/**
* Constructs a sorted set of elements within the specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive (true) or exclusive (false)
* @param toElement ending element
* @param toInclusive whether end is inclusive (true) or exclusive (false)
* @return ImmutableSortedSet of elements in the specified range
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,partition,"com.google.common.collect.Iterables:partition(java.lang.Iterable,int)",527,537,"/**
* Partitions the input iterable into sub-lists of fixed size.
* @param iterable input data to partition
* @param size maximum number of elements per sublist
*/","* Divides an iterable into unmodifiable sublists of the given size (the final iterable may be
   * smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method. The returned lists implement {@link RandomAccess}, whether or not the input list does.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}
   * instead.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,paddedPartition,"com.google.common.collect.Iterables:paddedPartition(java.lang.Iterable,int)",554,564,"/**
* Generates a stream of lists from the input iterable, with each list containing 'size' elements.
* @param iterable input iterable to process
* @param size maximum number of elements per list
*/","* Divides an iterable into unmodifiable sublists of the given size, padding the final iterable
   * with null values if necessary. For example, partitioning an iterable containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterable containing two inner lists of three elements each, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partitionImpl,"com.google.common.collect.Iterators:partitionImpl(java.util.Iterator,int,boolean)",626,660,"/**
* Creates an unmodifiable iterator of lists from the given iterator.
* @param iterator input iterator
* @param size target list size
* @param pad whether to pad with nulls if not full
* @return UnmodifiableIterator of List<T> objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue$Builder:expectedSize(int),186,191,"/**
* Sets the expected size and validates it is non-negative.
* @param expectedSize size in bytes, must be >= 0
*/","* Configures this builder to build min-max priority queues with an initial expected size of
     * {@code expectedSize}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue$Builder:maximumSize(int),199,204,"/**
* Configures the maximum size of data that can be processed.
* @param maximumSize positive integer value for maximum size
*/","* Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to
     * {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately
     * removes its greatest element (according to its comparator), which might be the element that
     * was just added.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset$AvlNode:<init>(java.lang.Object,int)",617,626,"/**
* Initializes an AVL tree node with a given element and count.
* @param elem the element to store
* @param elemCount the initial count of elements in this subtree
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(int),39,43,"/**
* Creates a hasher with buffering capability based on input size.
* @param expectedInputSize estimated size of input data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,"com.google.common.hash.AbstractStreamingHasher:<init>(int,int)",61,70,"/**
* Initializes streaming hasher with specified chunk and buffer sizes.
* @param chunkSize size of each processing unit (in bytes)
* @param bufferSize total buffer capacity (must be a multiple of chunk size)","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code
   * chunkSize}.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4
   * @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingAppendable,"com.google.common.io.BaseEncoding:separatingAppendable(java.lang.Appendable,java.lang.String,int)",1082,1111,"/**
* Creates a delegate that appends a separator after every specified characters.
* @param delegate the underlying appendable object
* @param separator string to be appended at intervals
* @param afterEveryChars interval in characters
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,ensureNonNegative,com.google.common.math.DoubleUtils:ensureNonNegative(double),133,136,"/**
* Computes masked function value using m1 and m3 functions.
* @param value input value
*/","Returns its argument if it is non-negative, zero if it is negative.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,toFile,com.google.common.reflect.ClassPath:toFile(java.net.URL),671,679,"/**
* Creates a File object from the provided URL.
* @param url input URL with file path and optional fallbacks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,is,com.google.common.base.CharMatcher:is(char),297,299,"/**
* Creates a CharMatcher that matches the specified character. 
* @param match the target character to be matched
*/",Returns a {@code char} matcher that matches only one specified BMP character.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isEither,"com.google.common.base.CharMatcher:isEither(char,char)",1717,1719,"/**
* Creates a CharMatcher that matches either of two specified characters. 
* @param c1 first character to match
* @param c2 second character to match
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isNot,com.google.common.base.CharMatcher:isNot(char),306,308,"/**
* Creates a CharMatcher that matches any character except the specified one. 
* @param match character to exclude from matching
*/","* Returns a {@code char} matcher that matches any character except the BMP character specified.
   *
   * <p>To negate another {@code CharMatcher}, use {@link #negate()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$Negated:matchesNoneOf(java.lang.CharSequence),1535,1538,"/**
* Checks if input CharSequence matches the masked pattern.
* @param sequence input string to be checked
* @return true if match is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$Negated:countIn(java.lang.CharSequence),1540,1543,"/**
* Calculates a value based on the provided CharSequence and stored result.
* @param sequence input CharSequence to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,collapseFrom,"com.google.common.base.CharMatcher:collapseFrom(java.lang.CharSequence,char)",840,857,"/**
* Replaces specific characters in a CharSequence with a specified mask.
* @param sequence input string to process
* @param replacement character to use for masking
* @return modified StringBuilder or original string if no replacements were made
*/","* Returns a string copy of the input character sequence, with each group of consecutive matching
   * BMP characters replaced by a single replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.anyOf(""eko"").collapseFrom(""bookkeeper"", '-')
   * }
   *
   * ... returns {@code ""b-p-r""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching groups of characters in
   * @param replacement the character to append to the result string in place of each group of
   *     matching characters in {@code sequence}
   * @return the new string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,isPcreLike,com.google.common.base.CommonPattern:isPcreLike(),40,42,"/**
* Returns a boolean value indicating whether to apply function mask.
* @return true if platform supports function mask, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ConverterComposition:equals(java.lang.Object),422,429,"/**
* Recursively checks if both converters in composition are valid.
* @param object the ConverterComposition instance to check
* @return true if both converters are valid, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ReverseConverter:equals(java.lang.Object),347,354,"/**
* Recursively calls original's m1 method with converted object.
* @param object the Object to be recursively processed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter:<init>(),153,155,"/**
* Initializes the Converter instance with default settings.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getEnumConstants,com.google.common.base.Enums:getEnumConstants(java.lang.Class),86,95,"/**
* Retrieves a cached map of enum constants for the given class.
* @param enumClass target enum class
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,<init>,"com.google.common.base.FunctionalEquivalence:<init>(com.google.common.base.Function,com.google.common.base.Equivalence)",39,43,"/**
* Configures functional equivalence with a given function and result equivalence. 
* @param function the function to be compared
* @param resultEquivalence equivalence relation for the result type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,<init>,com.google.common.base.PairwiseEquivalence:<init>(com.google.common.base.Equivalence),29,31,"/**
* Initializes pairwise equivalence comparison with given element equivalence. 
* @param elementEquivalence equivalence function to compare elements of the same type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,apply,com.google.common.base.Equivalence$EquivalentToPredicate:apply(java.lang.Object),323,326,"/**
* Checks equivalence between input and target using m1 function.
* @param input object to compare (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$Wrapper:equals(java.lang.Object),244,263,"/**
* Checks for equivalence between two objects using the Wrapper's equivalence logic.
* @param obj object to compare with
* @return true if equivalent, false otherwise
*/","* Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped
     * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}
     * equivalence.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,test,"com.google.common.base.Equivalence:test(java.lang.Object,java.lang.Object)",83,88,"/**
* Compares two objects using function mask.
* @param t first object to compare
* @param u second object to compare
*/","* @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent}
   *     instead.
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doEquivalent,"com.google.common.base.FunctionalEquivalence:doEquivalent(java.lang.Object,java.lang.Object)",45,48,"/**
* Compares two values using a custom equivalence relation.
* @param a first value to compare
* @param b second value to compare
* @return true if the values are equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doEquivalent,"com.google.common.base.PairwiseEquivalence:doEquivalent(java.lang.Iterable,java.lang.Iterable)",33,45,"/**
* Compares two iterables for equivalence.
* @param iterableA first iterable to compare
* @param iterableB second iterable to compare
* @return true if iterables are equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,"com.google.common.collect.MapMakerInternalMap$Segment:reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1869,1900,"/**
* Updates entry in hash table if reference matches.
* @param key search key
* @param hash hash value of entry to update
* @param valueReference weak reference to update
* @return true if updated, false otherwise
*/",Removes an entry whose value has been garbage collected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clearValueForTesting,"com.google.common.collect.MapMakerInternalMap$Segment:clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1903,1933,"/**
* Updates the map entry for a given key and hash.
* @param key the key to update
* @param hash the hash code of the key
* @param valueReference the weak reference to update
* @return true if updated, false otherwise
*/","Clears a value that has not yet been set, and thus does not require count to be modified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$EquivalentToPredicate:equals(java.lang.Object),328,338,"/**
* Checks whether this predicate is equivalent to another.
* @param obj the other predicate to compare with
* @return true if equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ConstantFunction:equals(java.lang.Object),376,383,"/**
* Evaluates constant function equivalence.
* @param obj object to compare with the current constant function
* @return true if equivalent, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ForMapWithDefault:equals(java.lang.Object),213,220,"/**
* Recursively checks the map and value of a ForMapWithDefault object.
* @param o object to check, may be null
* @return true if both map and value are valid, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equals,com.google.common.base.Predicates$ContainsPatternPredicate:equals(java.lang.Object),750,761,"/**
* Compares the given object with the current predicate for pattern equality.
* @param obj Object to compare, must be of type ContainsPatternPredicate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,equals,com.google.common.base.Suppliers$SupplierOfInstance:equals(java.lang.Object),373,380,"/**
* Compares the instance with a given object to check for equality.
* @param obj object to compare with the instance
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapEntry.java,equals,com.google.common.collect.AbstractMapEntry:equals(java.lang.Object),48,56,"/**
* Compares this instance with the given object for equality.
* @param object Object to compare with, may be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsValue,com.google.common.collect.ArrayTable:containsValue(java.lang.Object),424,434,"/**
* Checks if a mask matches any element in the given array.
* @param value mask to search for
* @return true if match found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,remove,com.google.common.collect.FilteredMultimapValues:remove(java.lang.Object),62,74,"/**
* Checks if a given object matches any entry in the multimap.
* @param o Object to search for
* @return True if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByKey,"com.google.common.collect.HashBiMap:seekByKey(java.lang.Object,int)",241,250,"/**
* Retrieves a BiEntry from the hash table based on key and its hash.
* @param key object to search for
* @param keyHash hash of the key
* @return matching BiEntry or null if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByValue,"com.google.common.collect.HashBiMap:seekByValue(java.lang.Object,int)",252,261,"/**
* Searches for a BiEntry in the hash table by value and hash.
* @param value Object to search for
* @param valueHash Hash of the object
* @return Matching BiEntry or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,elementsEqual,"com.google.common.collect.Iterators:elementsEqual(java.util.Iterator,java.util.Iterator)",272,284,"/**
* Compares two iterators for equivalence.
* @param iterator1 first iterator to compare
* @param iterator2 second iterator to compare
* @return true if both iterators are equivalent, false otherwise
*/","* Determines whether two iterators contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same
   * number of elements and every element of {@code iterator1} is equal to the corresponding element
   * of {@code iterator2}.
   *
   * <p>Note that this will modify the supplied iterators, since they will have been advanced some
   * number of elements forward.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,matchesValue,"com.google.common.collect.LinkedHashMultimap$ValueEntry:matchesValue(java.lang.Object,int)",216,218,"/**
* Checks if input object matches given hash and value criteria.
* @param v input object to verify
* @param smearedVHash expected hash of input object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$FilteredMapValues:remove(java.lang.Object),2917,2928,"/**
* Checks for a match between an object and the unfiltered map entries.
* @param o Object to search for
* @return True if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$ValueDifferenceImpl:equals(java.lang.Object),729,737,"/**
* Compares a ValueDifference with the left and right maps.
* @param object ValueDifference to compare
* @return true if both sides of the difference match the maps, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,equals,com.google.common.collect.Multisets$AbstractEntry:equals(java.lang.Object),836,844,"/**
* Compares the current multiset entry with the given object.
* @param object object to compare, must be a Multiset.Entry
* @return true if objects are equal, false otherwise
*/","* Indicates whether an object equals this entry, following the behavior specified in {@link
     * Multiset.Entry#equals}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,equals,com.google.common.collect.Tables$AbstractCell:equals(java.lang.Object),176,188,"/**
* Compares this object with another for equality.
* @param obj Object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,equals,com.google.common.graph.ElementOrder:equals(java.lang.Object),161,172,"/**
* Compares the current object with another object for equality.
* @param obj Object to compare with this
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,canTraverseWithoutReusingEdge,"com.google.common.graph.Graphs:canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",167,175,"/**
* Checks whether a node transition is valid based on the graph's properties and the nodes involved.
* @param graph the graph being evaluated
* @param nextNode the node to transition to
* @param previousNode the node to transition from (may be null)
*/","* Determines whether an edge has already been used during traversal. In the directed case a cycle
   * is always detected before reusing an edge, so no special logic is required. In the undirected
   * case, we must take care not to ""backtrack"" over an edge (i.e. going from A to B and then going
   * from B to A).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,equals,com.google.common.net.HostAndPort:equals(java.lang.Object),277,287,"/**
* Compares current object with another for equality.
* @param other Object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,hashCode,com.google.common.base.Equivalence$Wrapper:hashCode(),266,269,"/**
* Calculates and returns the FUNC_MASK value based on reference data.
* @return calculated FUNC_MASK integer value
*/",Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doHash,com.google.common.base.FunctionalEquivalence:doHash(java.lang.Object),50,53,"/**
* Calculates function mask value based on input and equivalence rules.
* @param a input value to process
* @return calculated mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doHash,com.google.common.base.PairwiseEquivalence:doHash(java.lang.Iterable),47,54,"/**
* Computes a unique hash code from an iterable of elements.
* @param iterable input collection to be hashed
* @return calculated hash value as integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizablePhantomReference.java,<init>,"com.google.common.base.FinalizablePhantomReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",43,46,"/**
* Creates a phantom reference with finalization.
* @param referent object being referenced
* @param queue reference queue for cleanup and finalization 
*/","* Constructs a new finalizable phantom reference.
   *
   * @param referent to phantom reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,close,com.google.common.base.FinalizableReferenceQueue:close(),225,229,"/**
* Initializes mask functionality by executing M1 and M2 methods.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableSoftReference.java,<init>,"com.google.common.base.FinalizableSoftReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
* Initializes a soft reference with a finalizable reference queue.
* @param referent object being referenced
* @param queue reference queue for cleanup
*/","* Constructs a new finalizable soft reference.
   *
   * @param referent to softly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableWeakReference.java,<init>,"com.google.common.base.FinalizableWeakReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
* Creates a weak reference to the given object with cleanup on finalization.
* @param referent the object being referenced
* @param queue the reference queue for garbage collection
*/","* Constructs a new finalizable weak reference.
   *
   * @param referent to weakly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,loadFinalizer,com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:loadFinalizer(),329,346,"/**
* Loads and returns the FUNC_MASK class.
* @return Class<?> instance or null on failure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,constant,com.google.common.base.Functions:constant(java.lang.Object),357,360,"/**
* Creates a function that returns the given constant value.
* @param value The constant value to be returned by the function
*/","* Returns a function that ignores its input and always returns {@code value}.
   *
   * <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not
   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code
   * (Function<Object, E> & Serializable) o -> value}.
   *
   * @param value the constant value for the function to return
   * @return a function that always returns {@code value}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$FunctionForMapNoDefault:apply(java.lang.Object),161,168,"/**
* Retrieves a value from the map using the provided key.
* @param key unique identifier
* @return Value associated with the key or null if absent
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",365,372,"/**
* Sets concurrency level for cache.
* @param spec CacheBuilderSpec object
* @param value new concurrency level value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",329,336,"/**
* Sets the initial capacity of the cache.
* @param spec CacheBuilderSpec instance
* @param value new initial capacity value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",341,348,"/**
* Sets the maximum size for cache entries.
* @param spec CacheBuilderSpec instance
* @param value new maximum size value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",353,360,"/**
* Updates maximum weight in CacheBuilderSpec.
* @param spec cache configuration object
* @param value new maximum weight value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,<init>,com.google.common.collect.ConcurrentHashMultiset:<init>(java.util.concurrent.ConcurrentMap),128,132,"/**
* Initializes a concurrent hash multiset from an existing count map.
* @param countMap mapping of elements to their counts
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,convert,"com.google.common.collect.Maps$BiMapConverter:convert(com.google.common.collect.BiMap,java.lang.Object)",1620,1624,"/**
* Retrieves a mapped value from the BiMap.
* @param bimap Bidirectional map instance
* @param input Input key to search in the map
* @return Mapped value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractBaseGraph:incidentEdges(java.lang.Object),106,134,"/**
* Retrieves endpoint pairs from the graph for a given node.
* @param node Node of interest
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getHostAndPortFromBracketedHost,com.google.common.net.HostAndPort:getHostAndPortFromBracketedHost(java.lang.String),210,238,"/**
* Parses a bracketed host-port string into host and port components.
* @param hostPortString input string in the format [host:port]
*/","* Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails.
   *
   * @param hostPortString the full bracketed host-port specification. Port might not be specified.
   * @return an array with 2 strings: host and port, in that order.
   * @throws IllegalArgumentException if parsing the bracketed host-port string fails.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,requireBracketsForIPv6,com.google.common.net.HostAndPort:requireBracketsForIPv6(),271,275,"/**
* Returns HostAndPort object with func mask set.
* @return HostAndPort instance or null if not found
*/","* Generate an error if the host might be a non-bracketed IPv6 literal.
   *
   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like ""[2001:db8::1]"".
   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and
   * disallow IPv6 literals that don't contain these brackets.
   *
   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To
   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}
   * method.
   *
   * @return {@code this}, to enable chaining of calls.
   * @throws IllegalArgumentException if bracketless IPv6 is detected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,decrement,com.google.common.net.InetAddresses:decrement(java.net.InetAddress),1179,1191,"/**
* Masks the least significant bits of an InetAddress.
* @param address InetAddress to modify
* @return modified InetAddress object
*/","* Returns a new InetAddress that is one less than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to decrement
   * @return a new InetAddress that is one less than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the beginning of its range
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,increment,com.google.common.net.InetAddresses:increment(java.net.InetAddress),1202,1214,"/**
* Masks the least significant bits of an InetAddress.
* @param address input InetAddress
* @return modified InetAddress with masked bits
*/","* Returns a new InetAddress that is one more than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to increment
   * @return a new InetAddress that is one more than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the end of its range
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,newProxy,"com.google.common.reflect.Reflection:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)",79,86,"/**
* Dynamically creates and returns an instance of the specified T, 
* implementing the given interface with the provided InvocationHandler.
* @param interfaceType the interface to be implemented
* @param handler invocation handler for the created object
* @return instance of T or null if creation fails
*/","* Returns a proxy instance that implements {@code interfaceType} by dispatching method
   * invocations to {@code handler}. The class loader of {@code interfaceType} will be used to
   * define the proxy class. To implement multiple interfaces or specify a class loader, use {@link
   * Proxy#newProxyInstance}.
   *
   * @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java
   *     interface",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeCapture.java,capture,com.google.common.reflect.TypeCapture:capture(),30,34,"/**
* Retrieves the first type argument from a parameterized type.
* @return The first type argument or null if not found
*/",Returns the captured type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeParameter.java,<init>,com.google.common.reflect.TypeParameter:<init>(),50,54,"/**
* Initializes the TypeParameter instance from a captured Type.
* @throws IllegalArgumentException if the captured Type is not a TypeVariable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,toString,com.google.common.base.Joiner$1:toString(java.lang.Object),510,530,"/**
* Recursively resolves the second part of a composite object.
* @param part nullable object to resolve
* @return resolved CharSequence or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.util.Iterator)",103,114,"/**
* Formats string parts into a single line with separator.
* @param appendable Appendable object to write to
* @param parts Iterator of string parts
* @return the same Appendable object
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",450,453,"/**
* Wraps iterable of entries into a StringBuilder.
* @param builder StringBuilder to append to
* @param entries iterable of entries to process
*/","* Appends the string representation of each entry in {@code entries}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
     *
     * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Iterator),496,498,"/**
* Concatenates and formats entry data into a string mask.
* @param entries iterator of entry objects
* @return formatted string or null if empty
*/","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,withKeyValueSeparator,com.google.common.base.Joiner:withKeyValueSeparator(char),347,349,"/**
* Creates a map joiner using the specified key-value separator.
* @param keyValueSeparator character to separate keys from values
*/","* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as
   * this {@code Joiner} otherwise.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,toString,com.google.common.base.MoreObjects$ToStringHelper:toString(),383,414,"/**
* Builds a JSON-like snapshot of the object's values.
* @return String representation or empty string if no values
*/","* Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.
     *
     * <p>After calling this method, you can keep adding more properties to later call toString()
     * again and get a more complete representation of the same object; but properties cannot be
     * removed, so this only allows limited reuse of the helper instance. The helper allows
     * duplication of properties (multiple name/value pairs with the same name can be added).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.Object),422,427,"/**
* Sets the value to be included in the string representation.
* @param value object to include, or null for no value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,"com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.String,java.lang.Object)",429,435,"/**
* Sets a named value for the builder.
* @param name property name
* @param value property value or null to clear
* @return this builder instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.Object),443,448,"/**
* Sets and returns the value holder with the given object.
* @param value arbitrary object to be stored in the ValueHolder
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,"com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.String,java.lang.Object)",450,456,"/**
* Sets a property with the given name and value.
* @param name property name
* @param value property value
* @return this instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getWeigher,com.google.common.cache.CacheBuilder:getWeigher(),604,607,"/**
* Returns a masked weigher instance with the same key and value types.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyStrength,com.google.common.cache.CacheBuilder:getKeyStrength(),638,640,"/**
* Returns a strength mask with strong value.
* @return int strength mask (M1) value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueStrength,com.google.common.cache.CacheBuilder:getValueStrength(),698,700,"/**
* Returns strength mask value based on given value and strong threshold.
* @param valueStrength input value to evaluate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getRemovalListener,com.google.common.cache.CacheBuilder:getRemovalListener(),988,992,"/**
* Returns a removal listener with masked behavior.
* @return RemovalListener instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,get,com.google.common.collect.ImmutableSetMultimap:get(java.lang.Object),528,533,"/**
* Retrieves an immutable set of values associated with a given key.
* @param key unique key identifier
* @return ImmutableSet containing values or emptySet if not found
*/","* Returns an immutable set of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable set is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyStrength,com.google.common.collect.MapMaker:getKeyStrength(),221,223,"/**
* Returns a strength mask based on key strength.
* @param keyStrength strength of the encryption key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getValueStrength,com.google.common.collect.MapMaker:getValueStrength(),268,270,"/**
* Returns a strength mask with STRONG strength.
* @return Bitmask representing strong strength value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,com.google.common.io.Resources:getResource(java.lang.String),187,197,"/**
* Loads M5 resource by name.
* @param resourceName unique identifier of the resource
* @return URL to the loaded resource or null if not found
*/","* Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the
   * {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the
   * context class loader will find resources from the class path. In environments where different
   * threads can have different class loaders, for example app servers, the context class loader
   * will typically have been set to an appropriate loader for the current thread.
   *
   * <p>In the unusual case where the context class loader is null, the class loader that loaded
   * this class ({@code Resources}) will be used instead.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,absent,com.google.common.base.Optional:absent(),96,98,"/**
* Returns an empty Optional instance.","* Returns an {@code Optional} instance with no contained reference.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.empty}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,toJavaUtil,com.google.common.base.Optional:toJavaUtil(com.google.common.base.Optional),148,155,"/**
* Recursively unwraps and returns the contained value of the given Google Optional.
* @param googleOptional the input Optional to unwrap
* @return contained value or null if not found
*/","* Returns the equivalent {@code java.util.Optional} value to the given {@code
   * com.google.common.base.Optional}, or {@code null} if the argument is null.
   *
   * <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}
   * instead.
   *
   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it
   * could refer to either the static or instance version of this method. Write out the lambda
   * expression {@code o -> Optional.toJavaUtil(o)} instead.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,emptyToNull,com.google.common.base.Platform:emptyToNull(java.lang.String),80,82,"/**
* Returns input string if it matches a specific condition (m1), otherwise returns null.","* Returns the string if it is not empty, or a null string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} if it is not empty; {@code null} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,isNullOrEmpty,com.google.common.base.Strings:isNullOrEmpty(java.lang.String),70,72,"/**
* Checks if input string matches platform-specific mask criteria.
* @param string input string to validate
* @return true if valid, false otherwise
*/","* Returns {@code true} if the given string is null or is the empty string.
   *
   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can
   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms
   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize ""in the other
   * direction,"" converting empty strings to {@code null}, you can use {@link #emptyToNull}.
   *
   * @param string a string reference to check
   * @return {@code true} if the string is null or is the empty string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$AccessDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",461,466,"/**
* Sets cache expiration details.
* @param spec Cache configuration
* @param duration Expiration duration in specified TimeUnit
* @param unit Time unit for expiration duration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$RecordStatsParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",412,417,"/**
* Sets recordStats flag in CacheBuilderSpec.
* @param spec cache builder specification
* @param key unused key parameter
* @param value ignored value parameter (must be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",481,486,"/**
* Configures cache refresh settings.
* @param spec CacheBuilderSpec instance
* @param duration Refresh time in specified TimeUnit
* @param unit Time unit for refresh duration (e.g. TimeUnit.MINUTES)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$WriteDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",471,476,"/**
* Sets write expiration time for cache.
* @param spec CacheBuilderSpec instance
* @param duration duration of write expiration in specified TimeUnit
* @param unit TimeUnit for write expiration duration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,chooseTableSize,com.google.common.collect.ImmutableSet:chooseTableSize(int),696,711,"/**
* Calculates optimal hash table size based on set size.
* @param setSize size of the set to be stored
* @return optimal hash table size or MAX_TABLE_SIZE if too large
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,skip,"com.google.common.collect.Iterables:skip(java.lang.Iterable,int)",912,969,"/**
* Skips the specified number of elements from an iterable.
* @param iterable input collection
* @param numberToSkip number of elements to skip
* @return new iterator skipping the specified elements
*/","* Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If
   * {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips
   * all of its elements.
   *
   * <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are
   * reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the {@code Iterator} is created, not when {@code skip()} is called.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying
   * iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by
   * immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states
   * that a call to {@code remove()} before a call to {@code next()} will throw an {@link
   * IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip}
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,limit,"com.google.common.collect.Iterables:limit(java.lang.Iterable,int)",984,999,"/**
* Truncates iterable to specified size.
* @param iterable input collection
* @param limitSize maximum number of elements to include
*/","* Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code
   * iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s
   * iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit}
   *
   * @param iterable the iterable to limit
   * @param limitSize the maximum number of elements in the returned iterable
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,advance,"com.google.common.collect.Iterators:advance(java.util.Iterator,int)",934,944,"/**
* Advances the given iterator by a specified number of elements.
* @param iterator iterator to advance
* @param numberToAdvance nonnegative count of steps to advance
* @return actual number of steps taken, or -1 on failure
*/","* Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code
   * hasNext()} returns {@code false}, whichever comes first.
   *
   * @return the number of elements the iterator was advanced
   * @since 13.0 (since 3.0 as {@code Iterators.skip})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,limit,"com.google.common.collect.Iterators:limit(java.util.Iterator,int)",956,983,"/**
* Limits the number of elements fetched from an iterator.
* @param iterator input iterator to limit
* @param limitSize maximum number of elements to fetch
* @return limited iterator or null if iterator is null
*/","* Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code
   * iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterator supports {@code remove()} if {@code iterator} does.
   *
   * @param iterator the iterator to limit
   * @param limitSize the maximum number of elements in the returned iterator
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,forTree,com.google.common.graph.Traverser:forTree(com.google.common.graph.SuccessorsFunction),180,193,"/**
* Creates a traverser for the given tree, handling invalid graph types.
* @param tree SuccessorsFunction representing the tree data structure
* @return Traverser instance or null on failure
*/","* Creates a new traverser for a directed acyclic graph that has at most one path from the start
   * node(s) to any node reachable from the start node(s), and has no paths from any start node to
   * any other start node, such as a tree or forest.
   *
   * <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data
   * structure being traversed is, in addition to being a tree/forest, also defined <a
   * href=""https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness"">recursively</a>.
   * This is because the {@code forTree()}-based implementations don't keep track of visited nodes,
   * and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects;
   * this saves both time and space versus traversing the same graph using {@code forGraph()}.
   *
   * <p>Providing a graph to be traversed for which there is more than one path from the start
   * node(s) to any node may lead to:
   *
   * <ul>
   *   <li>Traversal not terminating (if the graph has cycles)
   *   <li>Nodes being visited multiple times (if multiple paths exist from any start node to any
   *       node reachable from any start node)
   * </ul>
   *
   * <p><b>Performance notes</b>
   *
   * <ul>
   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from
   *       the start node).
   *   <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number
   *       of nodes that have been seen but not yet visited, that is, the ""horizon"").
   * </ul>
   *
   * <p><b>Examples</b> (all edges are directed facing downwards)
   *
   * <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code
   * b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and
   * {@code h}.
   *
   * {@snippet :
   *    a     b      c
   *   / \   / \     |
   *  /   \ /   \    |
   * d     e     f   g
   *       |
   *       |
   *       h
   * }
   *
   * <p>.
   *
   * <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code
   * b} were a start node, there would be multiple paths to {@code f}.
   *
   * {@snippet :
   *    a     b
   *   / \   / \
   *  /   \ /   \
   * c     d     e
   *        \   /
   *         \ /
   *          f
   * }
   *
   * <p><b>Note on binary trees</b>
   *
   * <p>This method can be used to traverse over a binary tree. Given methods {@code
   * leftChild(node)} and {@code rightChild(node)}, this method can be called as
   *
   * {@snippet :
   * Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node)));
   * }
   *
   * @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most
   *     one path between any two nodes",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long[]),176,185,"/**
* Initializes a lock-free bit array with the specified data.
* @param data array of long values representing bits
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,checkPositiveAndMakeMultipleOf32,com.google.common.hash.Hashing:checkPositiveAndMakeMultipleOf32(int),739,742,"/**
* Calculates a mask from the given number of bits.
* @param bits number of bits
*/","Checks that the passed argument is positive, and ceils it to a multiple of 32.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,<init>,"com.google.common.io.ByteStreams$LimitedInputStream:<init>(java.io.InputStream,long)",720,725,"/**
* Initializes a limited InputStream with the given input stream and size limit.
* @param in the underlying input stream
* @param limit the maximum number of bytes to read from the stream
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,com.google.common.math.Quantiles$Scale:<init>(int),176,179,"/**
* Initializes a Quantile scale with a specified value.
* @param scale positive quantile scale value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,"com.google.common.math.Quantiles$ScaleAndIndexes:<init>(int,int[])",327,334,"/**
* Initializes ScaleAndIndexes object with provided scale and indexes.
* @param scale index scale value
* @param indexes array of valid indexes to associate with the scale
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromBigInteger,"com.google.common.net.InetAddresses:fromBigInteger(java.math.BigInteger,boolean)",1120,1150,"/**
* Converts a BigInteger to an InetAddress.
* @param address BigInteger value
* @param isIpv6 true for IPv6, false for IPv4
* @return InetAddress object or throws exception if invalid
*/","* Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be
   * constrained to 32 bits, otherwise it is constrained to 128 bits.
   *
   * @param address the address represented as a big integer
   * @param isIpv6 whether the created address should be IPv4 or IPv6
   * @return the BigInteger converted to an address
   * @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4
   *     or IPv6 respectively",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:<init>(int),350,353,"/**
* Calculates the power-of-two mask for a striped data structure.
* @param stripes number of stripes in the data structure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodabetFor,com.google.common.io.BaseEncoding$Alphabet:decodabetFor(char[]),481,491,"/**
* Encodes ASCII characters to byte array with index mapping.
* @param chars input character array
* @return encoded byte array or null if invalid input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,repeat,"com.google.common.base.Strings:repeat(java.lang.String,int)",148,174,"/**
* Repeats a given string by a specified count.
* @param string the input string to repeat
* @param count the number of times to repeat the string
* @return repeated string or empty string if count is 0
*/","* Returns a string consisting of a specific number of concatenated copies of an input string. For
   * example, {@code repeat(""hey"", 3)} returns the string {@code ""heyheyhey""}.
   *
   * <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead.
   *
   * @param string any non-null string
   * @param count the number of times to repeat it; a nonnegative integer
   * @return a string containing {@code string} repeated {@code count} times (the empty string if
   *     {@code count} is zero)
   * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(int),642,646,"/**
* Masks value with a function-like behavior based on its sign.
* @param value input integer value to be masked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(int),654,658,"/**
* Returns the input value unchanged.
* @param value input integer to mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,newHasher,com.google.common.hash.AbstractHashFunction:newHasher(int),75,80,"/**
* Creates a new hasher instance with specified input size validation.
* @param expectedInputSize the expected input size (must be non-negative)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,"com.google.common.hash.BloomFilter:<init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)",131,140,"/**
* Constructs a BloomFilter with the specified parameters.
* @param bits LockFreeBitArray instance
* @param numHashFunctions number of hash functions to use
* @param funnel Funnel instance for hashing elements
* @param strategy Strategy instance for managing filter state
*/",Creates a BloomFilter.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,<init>,"com.google.common.hash.ChecksumHashFunction:<init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String)",42,48,"/**
* Initializes a ChecksumHashFunction with the specified checksum algorithm and bit length.
* @param checksumSupplier supplier of checksum algorithm
* @param bits bit length (either 32 or 64)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,concatenating,com.google.common.hash.Hashing:concatenating(java.lang.Iterable),774,783,"/**
* Combines and validates a collection of hash functions.
* @param hashFunctions iterable of HashFunction objects
* @return ConcatenatedHashFunction instance or throws exception if invalid
*/","* Returns a hash function which computes its hash code by concatenating the hash codes of the
   * underlying hash functions together. This can be useful if you need to generate hash codes of a
   * specific length.
   *
   * <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash
   * functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}.
   *
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction:<init>(int,int,long,long)",55,64,"/**
* Initializes SipHashFunction with parameters for compression and finalization rounds.
* @param c number of iterations during Compression
* @param d number of iterations during Finalization
* @param k0 first long key component
* @param k1 second long key component
*/","* @param c the number of compression rounds (must be positive)
   * @param d the number of finalization rounds (must be positive)
   * @param k0 the first half of the key
   * @param k1 the second half of the key",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,"com.google.common.io.FileBackedOutputStream:<init>(int,boolean)",119,154,"/**
* Initializes a FileBackedOutputStream with given file threshold and reset on finalize behavior.
* @param fileThreshold non-negative threshold for switching to file-backed output
* @param resetOnFinalize whether to reset the stream on finalize
*/","* Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,<init>,"com.google.common.net.InetAddresses$TeredoInfo:<init>(java.net.Inet4Address,java.net.Inet4Address,int,int)",768,781,"/**
* Constructs a TeredoInfo object with the specified server, client,
* and configuration parameters.
* @param server the IPv4 address of the server (or null for default)
* @param client the IPv4 address of the client (or null for default)
* @param port the UDP port number
* @param flags the configuration flags
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getInet4Address,com.google.common.net.InetAddresses:getInet4Address(byte[]),124,132,"/**
* Creates an Inet4Address instance from a byte array.
* @param bytes the byte representation of the IP address
*/","* Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address.
   *
   * @param bytes byte array representing an IPv4 address (should be of length 4)
   * @return {@link Inet4Address} corresponding to the supplied byte array
   * @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,ensureCapacity,"com.google.common.primitives.Booleans:ensureCapacity(boolean[],int,int)",272,276,"/**
* Trims or pads input boolean array to specified minimum length with optional padding.
* @param array input boolean array
* @param minLength required array length
* @param padding additional elements to append if array is shorter than minLength
* @return trimmed or padded boolean array, or original array if sufficient","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,ensureCapacity,"com.google.common.primitives.Bytes:ensureCapacity(byte[],int,int)",201,205,"/**
* Pads or truncates input byte array to specified length and padding.
* @param array input byte array
* @param minLength minimum required length
* @param padding additional bytes to append if minLength is exceeded
* @return padded or truncated byte array
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,ensureCapacity,"com.google.common.primitives.Chars:ensureCapacity(char[],int,int)",356,360,"/**
* Truncates or pads input array to specified minimum length with given padding.
* @param array input character array
* @param minLength minimum required length
* @param padding amount of padding to add if necessary
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,ensureCapacity,"com.google.common.primitives.Doubles:ensureCapacity(double[],int,int)",348,352,"/**
* Pads or truncates input array to specified minimum length with additional padding.
* @param array input data
* @param minLength minimum required length
* @param padding amount of padding to add
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,ensureCapacity,"com.google.common.primitives.Floats:ensureCapacity(float[],int,int)",345,349,"/**
* Pads or truncates input array to specified length with optional padding.
* @param array input float array
* @param minLength minimum required array length
* @param padding additional elements to append (if minLength not reached)
* @return padded or truncated float array","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,ensureCapacity,"com.google.common.primitives.Ints:ensureCapacity(int[],int,int)",416,420,"/**
* Truncates or pads input array to meet length requirements.
* @param array input data
* @param minLength minimum required length
* @param padding value to add if array is too short
* @return modified array or original if sufficient","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,ensureCapacity,"com.google.common.primitives.Longs:ensureCapacity(long[],int,int)",495,499,"/**
* Truncates or pads input array to specified minimum length with given padding.
* @param array input array
* @param minLength minimum required array length
* @param padding additional elements to add for truncation or padding
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,ensureCapacity,"com.google.common.primitives.Shorts:ensureCapacity(short[],int,int)",406,410,"/**
* Pads or truncates input array to minimum length with specified padding.
* @param array input short array
* @param minLength minimum desired length
* @param padding additional bytes to append if minLength exceeds array length
* @return padded or truncated short array of consistent length
*/","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,checkPermits,com.google.common.util.concurrent.RateLimiter:checkPermits(int),493,495,"/**
* Validates requested permit count.
* @param permits number of permits to validate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(long),648,652,"/**
* Returns input value unchanged if non-negative; otherwise throws exception.
* @param value the input value to be checked and returned
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(long),660,664,"/**
* Masks a given value using bitwise operations.
* @param value input value to be masked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,checkedCast,com.google.common.primitives.Chars:checkedCast(long),85,89,"/**
* Converts long to char and performs out-of-range check.
* @param value input value
*/","* Returns the {@code char} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code char} type
   * @return the {@code char} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}
   *     or less than {@link Character#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,checkedCast,com.google.common.primitives.Ints:checkedCast(long),95,99,"/**
* Converts long value to int and performs bounds check.
* @param value input value
* @return int representation or throws exception if out of range
*/","* Returns the {@code int} value that is equal to {@code value}, if possible.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link
   * Math#toIntExact(long)} instead, but be aware that that method throws {@link
   * ArithmeticException} rather than {@link IllegalArgumentException}.
   *
   * @param value any value in the range of the {@code int} type
   * @return the {@code int} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or
   *     less than {@link Integer#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,checkNoOverflow,com.google.common.primitives.Longs:checkNoOverflow(long),268,274,"/**
* Converts a large long value to an int, checking for overflow. 
* @param result the input long value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,checkedCast,com.google.common.primitives.Shorts:checkedCast(long),90,94,"/**
* Converts long to short, throwing exception if out of range.
* @param value long value to convert
*/","* Returns the {@code short} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code short} type
   * @return the {@code short} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or
   *     less than {@link Short#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,checkedCast,com.google.common.primitives.SignedBytes:checkedCast(long),57,61,"/**
* Converts long value to byte and checks for out-of-range condition.
* @param value long value to be converted
*/","* Returns the {@code byte} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code byte} type
   * @return the {@code byte} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or
   *     less than {@link Byte#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,checkedCast,com.google.common.primitives.UnsignedBytes:checkedCast(long),97,101,"/**
* Extracts and returns the lowest byte from a given long integer value.
* @param value input long integer value
*/","* Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 255 inclusive
   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than 255",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,checkedCast,com.google.common.primitives.UnsignedInts:checkedCast(long),93,96,"/**
* Extracts the lower 32 bits from a long value.
* @param value input value
* @return int representation or throws exception if out of range
*/","* Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 2<sup>32</sup>-1 inclusive
   * @return the {@code int} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than or equal to
   *     2<sup>32</sup>
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit)",143,155,"/**
* Creates a scheduler with customizable delays and time units.
* @param initialDelay initial delay before first execution
* @param delay interval between subsequent executions
* @param unit time unit for delays (e.g. TimeUnit.SECONDS)","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @param unit the time unit of the initialDelay and delay parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit)",178,190,"/**
* Creates a Scheduler instance with specified delay and period.
* @param initialDelay time to wait before executing the task
* @param period interval between subsequent executions
* @return Scheduler object for scheduling tasks
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @param unit the time unit of the initialDelay and period parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,checkPositiveTimeout,com.google.common.util.concurrent.SimpleTimeLimiter:checkPositiveTimeout(long),279,281,"/**
* Validates that timeout duration is positive.
* @param timeoutDuration time duration to validate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,constrainToRange,"com.google.common.primitives.Chars:constrainToRange(char,char,char)",266,269,"/**
* Returns a value clamped between min and max.
* @param value input character
* @param min minimum allowed value
* @param max maximum allowed value
* @return value constrained within min and max range
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code char} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,constrainToRange,"com.google.common.primitives.Longs:constrainToRange(long,long,long)",240,243,"/**
* Clamps a value within a specified range.
* @param value the input value
* @param min minimum allowed value
* @param max maximum allowed value
* @return clamped value between min and max
*/","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of
   * constraining a {@code long} input to an {@code int} range.
   *
   * @param value the {@code long} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",383,388,"/**
* Sets the mask for a cache key.
* @param spec CacheBuilderSpec instance
* @param key unique cache key identifier
* @param value nullable value (ignored if null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",399,406,"/**
* Sets the mask for a cache entry.
* @param spec CacheBuilderSpec object
* @param key unique key identifier
* @param value optional value (null if not applicable)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,add,"com.google.common.collect.Multisets$FilteredMultiset:add(java.lang.Object,int)",374,379,"/**
* Evaluates element occurrences against a predicate and returns the result.
* @param element object to evaluate
* @param occurrences number of elements to check
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,"com.google.common.io.Resources:getResource(java.lang.Class,java.lang.String)",205,211,"/**
* Resolves resource URL for the given class and name.
* @param contextClass Class used as base for resolving resources
* @param resourceName Name of the resource to resolve
* @return Resource URL or null if not found
*/","* Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL}
   * pointing to the named resource.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,disallowPrimitiveType,"com.google.common.reflect.Types:disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)",525,532,"/**
* Validates usage of primitive types in the provided array.
* @param types array of primitive type references
* @param usedAs string describing how each type is being used
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,"com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)",609,624,"/**
* Initializes a StateSnapshot with the given state, shutdown flag, and optional failure cause.
* @param internalState current state of the system
* @param shutdownWhenStartupFinishes whether to shut down when startup finishes
* @param failure optional Throwable cause for failed state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,checkNoDuplicate,"com.google.common.collect.RegularImmutableTable:checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",196,204,"/**
* Validates and updates value in table cell with specified row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param existingValue current table cell value (can be null)
* @param newValue new value to update the table cell with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,start,com.google.common.base.Stopwatch:start(),163,169,"/**
* Starts or resumes stopwatch and returns the instance.
*/","* Starts the stopwatch.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already running.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,stop,com.google.common.base.Stopwatch:stop(),178,185,"/**
* Stops and updates the running time of the stopwatch.
* @return This stopwatch instance for method chaining
*/","* Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this
   * point.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already stopped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkNonLoadingCache,com.google.common.cache.CacheBuilder:checkNonLoadingCache(),1053,1055,"/**
 * Validates that refreshNanos is set to a valid value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkWeightWithWeigher,com.google.common.cache.CacheBuilder:checkWeightWithWeigher(),1057,1070,"/**
* Validates weigher configuration based on strict parsing mode.
* @param weigher the weigher object
* @param strictParsing flag for strict parsing mode
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:remove(),1470,1477,"/**
* Updates iterator and collection state after removing an item.
* @param collection non-null collection object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectPreconditions.java,checkRemove,com.google.common.collect.CollectPreconditions:checkRemove(boolean),62,64,"/**
* Enables or disables removal functionality based on the provided flag.
* @param canRemove true to allow removal, false otherwise
*/","* Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent
   * error message.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,orderEntriesByValue,com.google.common.collect.ImmutableMap$Builder:orderEntriesByValue(java.util.Comparator),513,518,"/**
* Sets a custom comparator for values.
* @param valueComparator Comparator to use when comparing values
*/","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$PeekingImpl:remove(),1209,1213,"/**
* Executes second-level functionality.
* @param hasPeeked flag indicating if user has peeked
* @param message error message to display
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:remove(),546,557,"/**
* Updates node references and indices after a node removal.
* @param current the removed node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isEvenLevel,com.google.common.collect.MinMaxPriorityQueue:isEvenLevel(int),491,496,"/**
* Determines if the given index is a valid power of two.
* @param index input value to test
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,checkNotDone,com.google.common.hash.MacHashFunction$MacHasher:checkNotDone(),130,132,"/**
* Ensures a Hasher cannot be reused after hashing.
* @param done true to flag hasher as used
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,checkNotDone,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:checkNotDone(),157,159,"/**
* Throws an exception when attempting to reuse a hasher after hashing. 
* @throws AssertionError with message indicating invalid usage. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,initialCapacity,com.google.common.cache.CacheBuilder:initialCapacity(int),411,420,"/**
* Sets the initial cache capacity and validates the input value.
* @param initialCapacity positive integer capacity
* @return CacheBuilder instance for chaining
*/","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,concurrencyLevel,com.google.common.cache.CacheBuilder:concurrencyLevel(int),457,466,"/**
* Sets the maximum allowed concurrent updates.
* @param concurrencyLevel positive integer value
*/","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the cache
   * at a time, but since read operations and cache loading computations can proceed concurrently,
   * this still yields higher concurrency than full synchronization.
   *
   * <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this
   * value, you should always choose it explicitly.
   *
   * <p>The current implementation uses the concurrency level to create a fixed number of hashtable
   * segments, each governed by its own write lock. The segment lock is taken once for each explicit
   * write, and twice for each cache loading computation (once prior to loading the new value, and
   * once after loading completes). Much internal cache management is performed at the segment
   * granularity. For example, access queues and write queues are kept per segment when they are
   * required by the selected eviction algorithm. As such, when writing unit tests it is not
   * uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction
   * behavior.
   *
   * <p>Note that future implementations may abandon segment locking in favor of more advanced
   * concurrency controls.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,initialCapacity,com.google.common.collect.MapMaker:initialCapacity(int),144,153,"/**
* Configures the map maker with an initial capacity.
* @param initialCapacity minimum number of entries in the map
* @return this MapMaker instance for chaining
*/","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,concurrencyLevel,com.google.common.collect.MapMaker:concurrencyLevel(int),178,187,"/**
* Configures map maker with specified concurrency level.
* @param concurrencyLevel positive integer concurrency level
*/","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the map
   * at a time, but since read operations can proceed concurrently, this still yields higher
   * concurrency than full synchronization. Defaults to 4.
   *
   * <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will
   * change again in the future. If you care about this value, you should always choose it
   * explicitly.
   *
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asInt,com.google.common.hash.HashCode$BytesHashCode:asInt(),267,277,"/**
* Combines the first four bytes into a single integer mask.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumSize,com.google.common.cache.CacheBuilder:maximumSize(long),493,505,"/**
* Sets the maximum cache size.
* @param maximumSize positive integer value
*/","* Specifies the maximum number of entries the cache may contain.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own size to approximately
   * {@code maximumSize / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into
   * cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}.
   *
   * @param maximumSize the maximum size of the cache
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumSize} is negative
   * @throws IllegalStateException if a maximum size or weight was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumWeight,com.google.common.cache.CacheBuilder:maximumWeight(long),534,546,"/**
* Sets the maximum weight for the cache.
* @param maximumWeight non-negative weight limit
*/","* Specifies the maximum weight of entries the cache may contain. Weight is determined using the
   * {@link Weigher} specified with {@link #weigher}, and use of this method requires a
   * corresponding call to {@link #weigher} prior to calling {@link #build}.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately
   * {@code maximumWeight / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded
   * into cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no
   * effect on selecting which entry should be evicted next.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumSize}.
   *
   * @param maximumWeight the maximum total weight of entries the cache may contain
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumWeight} is negative
   * @throws IllegalStateException if a maximum weight or size was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weigher,com.google.common.cache.CacheBuilder:weigher(com.google.common.cache.Weigher),577,594,"/**
* Sets the weigher function for this cache builder.
* @param weigher function to calculate key weights
*/","* Specifies the weigher to use in determining the weight of entries. Entry weight is taken into
   * consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use
   * of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling
   * {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and
   * are thus effectively static during the lifetime of a cache entry.
   *
   * <p>When the weight of an entry is zero it will not be considered for size-based eviction
   * (though it still may be evicted by other means).
   *
   * <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder}
   * instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the
   * original reference or the returned reference may be used to complete configuration and build
   * the cache, but only the ""generic"" one is type-safe. That is, it will properly prevent you from
   * building caches whose key or value types are incompatible with the types accepted by the
   * weigher already provided; the {@code CacheBuilder} type cannot do this. For best results,
   * simply use the standard method-chaining idiom, as illustrated in the documentation at top,
   * configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement.
   *
   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a
   * cache whose key or value type is incompatible with the weigher, you will likely experience a
   * {@link ClassCastException} at some <i>undefined</i> point in the future.
   *
   * @param weigher the weigher to use in calculating the weight of cache entries
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was
   *     previously called
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,"com.google.common.cache.CacheBuilder:expireAfterWrite(long,java.util.concurrent.TimeUnit)",753,763,"/**
* Sets the time-to-live for cache entries written by this builder.
* @param duration positive time duration
* @param unit time unit (e.g. seconds, milliseconds)
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,"com.google.common.cache.CacheBuilder:expireAfterAccess(long,java.util.concurrent.TimeUnit)",831,841,"/**
* Sets cache expiration time after access.
* @param duration time to live in specified unit
* @param unit time unit (e.g. seconds, minutes)
* @return this CacheBuilder instance
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for
   * example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the
   * entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterAccess(Duration)} instead.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,"com.google.common.cache.CacheBuilder:refreshAfterWrite(long,java.util.concurrent.TimeUnit)",916,925,"/**
* Configures cache refresh interval in the given time unit.
* @param duration cache refresh interval
* @param unit time unit (e.g. TimeUnit.SECONDS)
*/","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * and immediately return the new value if the returned future is complete, and the old value
   * otherwise.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #refreshAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,keyEquivalence,com.google.common.cache.CacheBuilder:keyEquivalence(com.google.common.base.Equivalence),366,372,"/**
* Sets the equivalence function for cache keys.
* @param equivalence key equivalence function
*/","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when
   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,valueEquivalence,com.google.common.cache.CacheBuilder:valueEquivalence(com.google.common.base.Equivalence),387,394,"/**
* Configures the cache builder with an equivalence function.
* @param equivalence equivalence function for key comparison
*/","* Sets a custom {@code Equivalence} strategy for comparing values.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when
   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}
   * otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setKeyStrength,com.google.common.cache.CacheBuilder:setKeyStrength(com.google.common.cache.LocalCache$Strength),631,636,"/**
* Sets cache key strength and returns the builder instance.
* @param strength Cache strength (e.g. Weak, Soft, Strong)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setValueStrength,com.google.common.cache.CacheBuilder:setValueStrength(com.google.common.cache.LocalCache$Strength),691,696,"/**
* Sets cache function mask strength and updates value strength.
* @param strength desired cache function mask strength
* @return this CacheBuilder instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,keyEquivalence,com.google.common.collect.MapMaker:keyEquivalence(com.google.common.base.Equivalence),121,128,"/**
* Configures the map maker with custom equivalence.
* @param equivalence custom equivalence strategy
* @return MapMaker instance for chaining calls
*/","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link
   * #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is
   * used is in {@link Interners.WeakInterner}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setKeyStrength,com.google.common.collect.MapMaker:setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength),210,219,"/**
* Sets map strength and updates key strength.
* @param strength desired map strength
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setValueStrength,com.google.common.collect.MapMaker:setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength),257,266,"/**
* Configures the map maker with a specified strength.
* @param strength desired strength of the map
* @return this MapMaker instance for method chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(),124,134,"/**
* Initializes TypeToken with captured runtime type and checks if it's a type variable.
*/","* Constructs a new type token of {@code T}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * TypeToken<List<String>> t = new TypeToken<List<String>>() {};
   * }",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService$StateSnapshot:failureCause(),640,647,"/**
* Returns a Throwable with a failure mask.
* @return Throwable object representing the failure
*/",* @see Service#failureCause(),,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,doTransform,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object)",222,233,"/**
* Applies async function to input and returns the resulting future.
* @param function async function to apply
* @param input input parameter for the function
* @return ListenableFuture containing the result or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,runInterruptibly,com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:runInterruptibly(),163,171,"/**
* Executes asynchronous operation and returns the result as a ListenableFuture.
* @return ListenableFuture containing the operation's result or an error message
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,runInterruptibly,com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:runInterruptibly(),161,168,"/**
* Returns a ListenableFuture representing the result of FUNC_MASK operation.
* @throws Exception if an error occurs during the execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int,java.lang.String)",1365,1372,"/**
* Calculates a mask value from the given index and size.
* @param index position in the sequence
* @param size total count of elements
* @return mask value or throws IndexOutOfBoundsException if invalid
*/","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int,java.lang.String)",1414,1421,"/**
* Returns the index within the given size range.
* @param index position to validate
* @param size maximum allowed value
* @return validated index or throws exception if invalid
*/","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,badPositionIndexes,"com.google.common.base.Preconditions:badPositionIndexes(int,int,int)",1452,1461,"/**
* Validates and generates a function mask within specified bounds.
* @param start starting index
* @param end ending index
* @param size total size of the mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysTrue,com.google.common.base.Predicates:alwaysTrue(),51,53,"/**
* Returns a predicate that always evaluates to true. 
* @return A predicate function that matches all elements of type T.","* Returns a predicate that always evaluates to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysFalse,com.google.common.base.Predicates:alwaysFalse(),61,63,"/**
* Returns a predicate that always evaluates to false.
*/","* Returns a predicate that always evaluates to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,isNull,com.google.common.base.Predicates:isNull(),73,75,"/**
* Returns a predicate that checks for null values.
* @return A predicate that returns true if the input is null, false otherwise.","* Returns a predicate that evaluates to {@code true} if the object reference being tested is
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,notNull,com.google.common.base.Predicates:notNull(),85,87,"/**
* Returns a predicate that filters out non-null values.
* @return A Predicate that always returns true for non-null objects and false otherwise
*/","* Returns a predicate that evaluates to {@code true} if the object reference being tested is not
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,"com.google.common.base.Predicates:and(com.google.common.base.Predicate,com.google.common.base.Predicate)",134,137,"/**
* Combines two predicates with a logical AND operation.
* @param first first predicate to evaluate
* @param second second predicate to evaluate
* @return combined predicate that returns true if both individual predicates return true
*/","* Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code
   * true}. The components are evaluated in order, and evaluation will be ""short-circuited"" as soon
   * as a false predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,"com.google.common.base.Predicates:or(com.google.common.base.Predicate,com.google.common.base.Predicate)",174,177,"/**
* Combines two predicates using logical OR.
* @param first first predicate
* @param second second predicate
* @return a new predicate that returns true if either of the input predicates is true
*/","* Returns a predicate that evaluates to {@code true} if either of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,matches,com.google.common.base.SmallCharMatcher:matches(char),111,133,"/**
* Checks if character matches a value in the table.
* @param c character to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy),108,110,"/**
* Initializes the Splitter with the specified strategy.
* @param strategy the splitting strategy to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,omitEmptyStrings,com.google.common.base.Splitter:omitEmptyStrings(),306,308,"/**
* Creates a Splitter instance with default settings.
* @return Splitter object configured for function masking
*/","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits
   * empty strings from the results. For example, {@code
   * Splitter.on(',').omitEmptyStrings().split("",a,,,b,c,,"")} returns an iterable containing only
   * {@code [""a"", ""b"", ""c""]}.
   *
   * <p>If either {@code trimResults} option is also specified when creating a splitter, that
   * splitter always trims results first before checking for emptiness. So, for example, {@code
   * Splitter.on(':').omitEmptyStrings().trimResults().split("": : : "")} returns an empty iterable.
   *
   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty
   * iterable, but when using this option, it can (if the input sequence consists of nothing but
   * separators).
   *
   * @return a splitter with the desired configuration",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,limit,com.google.common.base.Splitter:limit(int),326,329,"/**
* Creates a Splitter instance with the specified maximum items.
* @param maxItems maximum number of split items
*/","* Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after
   * it reaches the limit. The limit defines the maximum number of items returned by the iterator,
   * or the maximum size of the list returned by {@link #splitToList}.
   *
   * <p>For example, {@code Splitter.on(',').limit(3).split(""a,b,c,d"")} returns an iterable
   * containing {@code [""a"", ""b"", ""c,d""]}. When omitting empty strings, the omitted strings do not
   * count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split(""a,,,b,,,c,d"")} returns
   * an iterable containing {@code [""a"", ""b"", ""c,d""]}. When trim is requested, all entries are
   * trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split("" a , b
   * , c , d "")} results in {@code [""a"", ""b"", ""c , d""]}.
   *
   * @param maxItems the maximum number of items returned
   * @return a splitter with the desired configuration
   * @since 9.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(com.google.common.base.CharMatcher),355,358,"/**
* Creates a splitter with customized trimming behavior.
* @param trimmer CharMatcher instance for trimming strings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToList,com.google.common.base.Splitter:splitToList(java.lang.CharSequence),399,410,"/**
* Extracts and returns a list of masked strings from the input sequence.
* @param sequence input character sequence to process
*/","* Splits {@code sequence} into string components and returns them as an immutable list. If you
   * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return an immutable list of the segments split from the parameter
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaIoCreator:createTempDir(),259,280,"/**
* Creates a unique temporary directory.
* @return File object representing the created directory
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaNioCreator:createTempDir(),121,130,"/**
* Creates a file with system-dependent mask value.
* @return File object representing the created file
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempFile,com.google.common.io.TempFileCreator$JavaNioCreator:createTempFile(java.lang.String),132,140,"/**
* Creates a temporary file with specified permissions.
* @param prefix unique identifier for the file
* @return TemporaryFile object or throws IOException if creation fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/StandardSystemProperty.java,toString,com.google.common.base.StandardSystemProperty:toString(),160,163,"/**
* Combines two function masks into a single string. 
* @return concatenated string: result of m1() and m2().",Returns a string representation of this system property.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(),141,143,"/**
* Initializes system ticker instance. 
* @param none 
* @return none */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getTicker,com.google.common.cache.CacheBuilder:getTicker(boolean),949,954,"/**
* Returns a Ticker object with optional time recording based on input flag.
* @param recordsTime true to include timestamp, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(java.util.concurrent.TimeUnit),216,218,"/**
* Calculates time unit mask from desired unit.
* @param desiredUnit target TimeUnit to convert from
*/","* Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,
   * with any fraction rounded down.
   *
   * <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally
   * not useful to specify {@link TimeUnit#NANOSECONDS} precision here.
   *
   * <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent
   * elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a
   * strongly-typed {@code Duration} instance.
   *
   * @since 14.0 (since 10.0 as {@code elapsedTime()})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(),226,231,"/**
* Calculates and returns a duration value using m1() and m2() methods.","* Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link
   * #elapsed(TimeUnit)}, this method does not lose any precision due to rounding.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,toString,com.google.common.base.Stopwatch:toString(),234,243,"/**
* Converts time duration to human-readable string format.
* @return formatted string representation of time duration
*/",Returns a string representation of the current elapsed time.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,nullToEmpty,com.google.common.base.Strings:nullToEmpty(java.lang.String),45,47,"/**
 * Wraps native platform call to process input string.
 * @param string input string to be processed
 */","* Returns the given string if it is non-null; the empty string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is non-null; {@code """"} if it is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonPrefix,"com.google.common.base.Strings:commonPrefix(java.lang.CharSequence,java.lang.CharSequence)",183,196,"/**
* Calculates the common prefix mask between two strings.
* @param a first string
* @param b second string
* @return masked common prefix as a string
*/","* Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &&
   * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common prefix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonSuffix,"com.google.common.base.Strings:commonSuffix(java.lang.CharSequence,java.lang.CharSequence)",205,219,"/**
* Computes the longest common suffix of two strings.
* @param a first CharSequence to compare
* @param b second CharSequence to compare
* @return longest common suffix as a String or empty if not found
*/","* Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) &&
   * b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common suffix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,ofInstance,com.google.common.base.Suppliers:ofInstance(java.lang.Object),354,357,"/**
* Creates a supplier that returns the given instance.
* @param instance the object to be supplied
*/","* Returns a supplier that always supplies {@code instance}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable. If you need a
   * supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ticker.java,<init>,com.google.common.base.Ticker$1:<init>(),33,33,"/**
* Initializes an empty Ticker instance.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,<init>,com.google.common.cache.CacheBuilder$3:<init>(),311,311,"/**
* Private constructor to prevent instantiation of CacheBuilder. 
* Should be used as a factory method only. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLengthGeneral,"com.google.common.base.Utf8:encodedLengthGeneral(java.lang.CharSequence,int)",78,98,"/**
* Calculates the length of a CharSequence in UTF-8 code units.
* @param sequence input string
* @param start starting index (inclusive)
* @return length in UTF-8 code units
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,com.google.common.base.Verify:verify(boolean),98,102,"/**
* Validates boolean expression; throws exception on false result.","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no
   * message otherwise.
   *
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char)",136,140,"/**
* Validates an expression and throws a VerifyException with a customized error message.
* @param expression boolean value to be validated
* @param errorMessageTemplate template for the error message
* @param p1 placeholder character in the error message template
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int)",150,154,"/**
* Throws VerifyException with formatted error message if expression is false.
* @param expression boolean condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 parameter used in error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long)",164,168,"/**
* Throws an exception with error message if given condition is false.
* @param expression boolean condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 parameter value used in error message generation
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object)",119,126,"/**
* Validates boolean expression and throws a custom exception if false.
* @param expression condition to verify
* @param errorMessageTemplate error message template with placeholders for args
* @param errorMessageArgs optional arguments for the error message (varies in length)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each {@code %s} placeholder in the template with an
   *     argument. These are matched by position - the first {@code %s} gets {@code
   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in
   *     square braces. Unmatched placeholders will be left as-is.
   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
   *     are converted to strings using {@link String#valueOf(Object)}.
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,char)",192,196,"/**
* Validates boolean condition and throws exception with formatted error message.
* @param expression condition to validate
* @param errorMessageTemplate template for error message with placeholders (p1, p2)
* @throws VerifyException if expression is false
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,char)",206,210,"/**
* Validates boolean expression and throws exception with formatted error message.
* @param expression boolean condition to be verified
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message formatting
* @param p2 second parameter for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,char)",220,224,"/**
* Throws VerifyException if expression is false; otherwise, does nothing.
* @param expression boolean condition to evaluate
* @param errorMessageTemplate error message template for exception
* @param p1 first parameter for error message
* @param p2 second parameter for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,char)",234,239,"/**
* Throws a VerifyException with parameterized error message when the given expression is false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for customizing the error message
* @param p1 first variable for error message substitution (may be null)
* @param p2 second character for error message substitution","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,int)",249,253,"/**
* Validates boolean expression; throws exception with formatted error message otherwise.
* @param expression condition to be verified
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message
* @param p2 second parameter for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,int)",263,267,"/**
* Validates an expression and throws a VerifyException with formatted error message if false.
* @param expression boolean condition to validate
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message formatting
* @param p2 second parameter for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,int)",277,281,"/**
* Verifies expression and throws VerifyException with formatted error message if false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message formatting
* @param p2 second parameter for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,int)",291,296,"/**
* Throws a VerifyException with formatted error message if expression is false.
* @param expression condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 object used in error message formatting
* @param p2 integer value used in error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,long)",306,310,"/**
* Throws VerifyException if given boolean expression is false.
* @param expression boolean condition to verify
* @param errorMessageTemplate error message template with placeholders
* @param p1 placeholder 1 for errorMessageTemplate
* @param p2 placeholder 2 for errorMessageTemplate
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,long)",320,324,"/**
* Verifies an expression and throws VerifyException with custom error message if false.
* @param expression boolean condition to be verified
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message
* @param p2 second parameter for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,long)",334,338,"/**
* Validates an expression and throws exception with parameterized error message if false.
* @param expression boolean condition to validate
* @param errorMessageTemplate error message template string
* @param p1 first parameter for error message
* @param p2 second parameter for error message
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,long)",348,353,"/**
* Throws VerifyException if given boolean expression is false.
* @param expression condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 first parameter (optional)
* @param p2 second parameter
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,java.lang.Object)",363,368,"/**
* Throws a VerifyException with a formatted error message if the given expression is false.
* @param expression condition to verify
* @param errorMessageTemplate template for error message with placeholders p1 and p2
* @param p1 first placeholder in error message (char)
* @param p2 second placeholder in error message (Object, may be null)","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,java.lang.Object)",378,383,"/**
* Throws VerifyException with formatted error message if condition is false.
* @param expression boolean condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message
* @param p2 second parameter for error message (may be null) 
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,java.lang.Object)",393,398,"/**
* Verifies boolean expression; throws exception with formatted message on failure.
* @param expression condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 first parameter for error message
* @param p2 second parameter for error message (may be null)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)",408,413,"/**
* Throws a VerifyException with a custom error message if the given expression is false.
* @param expression boolean condition to evaluate
* @param errorMessageTemplate template for error message
* @param p1 and p2 optional parameters for error message (may be null)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",423,432,"/**
* Validates the given expression; throws VerifyException with formatted error message if false.
* @param expression boolean condition to validate
* @param errorMessageTemplate template for error message (args: p1, p2, p3)
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",442,452,"/**
* Throws a VerifyException with formatted error message when condition is false.
* @param expression boolean condition to verify
* @param errorMessageTemplate template for error message
* @param p1-4 optional parameters for error message formatting
*/","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,cleanUp,com.google.common.base.internal.Finalizer:cleanUp(java.lang.ref.Reference),160,183,"/**
* Checks if a reference chain can be finalized using the provided method.
* @param firstReference initial reference to check
*/","* Cleans up the given reference and any other references already in the queue. Catches and logs
   * all throwables.
   *
   * @return true if the caller should continue to wait for more references to be added to the
   *     queue, false if the associated FinalizableReferenceQueue is no longer referenced.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,<init>,com.google.common.cache.AbstractCache$SimpleStatsCounter:<init>(),218,218,"/**
* Initializes a new instance of the SimpleStatsCounter class. 
*/",Constructs an instance with all counts initialized to zero.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,incrementBy,com.google.common.cache.AbstractCache$SimpleStatsCounter:incrementBy(com.google.common.cache.AbstractCache$StatsCounter),272,280,"/**
* Merges statistics from another StatsCounter into this instance.
* @param other StatsCounter to merge with this instance
*/",Increments all counters by the values in {@code other}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,<init>,com.google.common.cache.AbstractLoadingCache:<init>(),46,46,"/**
* Initializes an instance of AbstractLoadingCache.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnPutsMap,com.google.common.collect.Platform:preservesInsertionOrderOnPutsMap(),73,76,"/**
* Creates an empty map with type parameters K and V.
*/","* Returns the platform preferred map implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,putAll,com.google.common.cache.AbstractCache:putAll(java.util.Map),94,99,"/**
* Iterates the input map and applies a transformation to each entry.
* @param m input map of type <K,V>
*/",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,invalidateAll,com.google.common.cache.AbstractCache:invalidateAll(java.lang.Iterable),117,123,"/**
* Iterates over the given iterable of object keys and applies the m1 function to each. 
* @param keys collection of object identifiers
*/",* @since 11.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getUnchecked,com.google.common.cache.AbstractLoadingCache:getUnchecked(java.lang.Object),48,56,"/**
* Wraps the execution of m2 with exception handling and re-throwing. 
* @param key input key for m2 function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,newBuilder,com.google.common.cache.CacheBuilder:newBuilder(),320,322,"/**
* Returns a cache builder with default settings.
* @return CacheBuilder instance for configuration and creation of caches
*/","* Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,
   * strong values, and no automatic eviction of any kind.
   *
   * <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on
   * the {@link #build} methods allow you to create a cache of any key and value type desired.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,hashCode,com.google.common.cache.CacheBuilderSpec:hashCode(),241,254,"/**
* Calculates the function mask based on various configuration parameters.
* @return function mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,equals,com.google.common.cache.CacheBuilderSpec:equals(java.lang.Object),256,281,"/**
* Compares this CacheBuilderSpec with another for equality.
* @param obj object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$FunctionToCacheLoader:<init>(com.google.common.base.Function),163,165,"/**
* Initializes caching loader with provided computation function.
* @param computingFunction function to compute cache values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$SupplierToCacheLoader:<init>(com.google.common.base.Supplier),214,216,"/**
* Initializes the cache loader with a supplier that computes values. 
* @param computingSupplier supplier to compute values, must not be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader:loadAll(java.lang.Iterable),125,129,"/**
* Throws an exception for unsupported loading operation on given key set.
* @throws Exception if operation is not supported
*/","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,requestCount,com.google.common.cache.CacheStats:requestCount(),109,111,"/**
* Calculates the function mask value based on hit and miss counts.
* @return calculated function mask value
*/","* Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadCount,com.google.common.cache.CacheStats:loadCount(),161,163,"/**
* Calculates combined mask value from success and exception counts.
* @return combined mask value
*/","* Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations and those that threw exceptions. This is
   * defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadExceptionRate,com.google.common.cache.CacheStats:loadExceptionRate(),202,205,"/**
* Calculates the exception rate as a ratio of exceptions to total loads.
* @return Exception rate as a double value between 0 and 1, or 0 if no loads
*/","* Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,averageLoadPenalty,com.google.common.cache.CacheStats:averageLoadPenalty(),225,228,"/**
* Calculates average load time.
* @return Average load time in seconds or 0 if no loads were performed
*/","* Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache:<init>(),39,39,"/**
* Initializes an empty forwarding cache instance. 
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,<init>,com.google.common.collect.ForwardingCollection:<init>(),54,54,"/**
* Creates an empty forwarding collection. 
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,<init>,com.google.common.collect.ForwardingIterator:<init>(),44,44,"/**
* Creates an empty iterator that forwards its operations to another iterator.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,<init>,com.google.common.collect.ForwardingMap:<init>(),62,62,"/**
* Initializes an empty forwarding map instance.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,<init>,com.google.common.collect.ForwardingMapEntry:<init>(),55,55,"/**
 * Default constructor for a forwarding map entry. 
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,<init>,com.google.common.collect.ForwardingMultimap:<init>(),44,44,"/**
* Constructs an empty ForwardingMultimap instance. 
* @throws NullPointerException if any of the input parameters are null
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingTable.java,<init>,com.google.common.collect.ForwardingTable:<init>(),39,39,"/**
* Initializes an empty forwarding table. 
* This constructor is typically used when creating a new instance of the ForwardingTable class.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingExecutorService:<init>(),49,49,"/**
* Creates an empty executor service instance. 
* @see ExecutorService#shutdown()",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture:<init>(),41,41,"/**
* Constructs an empty Future.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,delegate,com.google.common.cache.ForwardingLoadingCache:delegate(),41,42,"/**
* Returns a cache instance with a custom key-value type.
* @return LoadingCache instance with K as key and V as value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,createEntrySet,com.google.common.collect.ImmutableMultiset:createEntrySet(),365,367,"/**
* Returns an immutable set of entries based on the result of m1().
* @return Set of entries if m1() returns true, otherwise a default EntrySet.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:build(),675,678,"/**
* Returns an immutable set containing all possible function masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,createEntrySet,com.google.common.collect.ImmutableSortedMap:createEntrySet(),808,872,"/**
* Returns a set of map entries based on the mask.
* @return Set of entries or empty set if masked out
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createCellSet,com.google.common.collect.RegularImmutableTable:createCellSet(),42,45,"/**
* Returns an immutable set of cells based on a conditional function mask.
* @return Set of cells or empty set if m1() returns false
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribersForTesting,com.google.common.eventbus.SubscriberRegistry:getSubscribersForTesting(java.lang.Class),116,119,"/**
* Returns a set of subscribers masked by the given event type.
* @param eventType class representing the event type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInterfaces,com.google.common.reflect.TypeToken$TypeCollector$3:getInterfaces(java.lang.Object),1431,1431,"/**
* Returns an iterable of values that mask the given type.
* @param type the type to be masked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$AbstractCacheSet:isEmpty(),4543,4546,"/**
* Delegates call to local cache instance's implementation.
* @return result of local cache instance's m1() method
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$Values:isEmpty(),4595,4598,"/**
* Delegates to local cache's implementation of this method.
* @return result from local cache's m1() method
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$AccessQueue:offer(com.google.common.cache.ReferenceEntry),3830,3840,"/**
* Updates mask bits in the given ReferenceEntry and its associated Head.
* @param entry ReferenceEntry to update
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$AccessQueue:iterator(),3908,3917,"/**
* Returns an iterator over the linked entries in this map.
* @return Iterator of ReferenceEntries or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainRecencyQueue,com.google.common.cache.LocalCache$Segment:drainRecencyQueue(),2578,2590,"/**
* Removes and processes entries from the reference queue.
* @GuardedBy(""this"") ensures thread safety
*/","* Drains the recency queue, updating eviction metadata that the entries therein were read in
     * the specified relative order. This currently amounts to adding them to relevant eviction
     * lists (accounting for the fact that they could have been removed from the map since being
     * added to the recency queue).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$2:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Computes the reference entry mask for a given key.
* @param segment Segmentation object
* @param key Key to compute mask for
* @param original Original reference entry
* @param newNext New next reference entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$3:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Computes mask value for given key and entries.
* @param segment cache segment
* @param original original entry
* @param newNext new next entry
* @param key unique key identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$4:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Calculates the mask for a reference entry update.
* @param segment Segment object
* @param original Original reference entry
* @param newNext New next reference entry
* @param key Key value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$6:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Computes reference entry mask using provided parameters.
* @param segment Segment object
* @param original Original reference entry
* @param newNext New next reference entry
* @param key Key value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$7:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Computes new mask value for the given key and segments.
* @param segment Segment object
* @param original Original reference entry
* @param newNext New next reference entry
* @param key Key to compute mask for
* @return computed ReferenceEntry object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$8:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
* Returns a reference entry with updated mask value.
* @param segment backing segment
* @param key affected key
* @param oldNext next entry in chain
* @param newNext replacement next entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$Segment:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",2008,2027,"/**
* Creates a new reference entry with the given next and key.
* @param original existing entry to modify
* @param newNext new next entry in the map
*/","* Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry,
     * or {@code null} if {@code original} was already garbage collected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$WriteQueue:offer(com.google.common.cache.ReferenceEntry),3690,3700,"/**
* Updates mask values in the given ReferenceEntry and other related entries.
* @param entry ReferenceEntry object to update
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,satisfies,"com.google.common.collect.FilteredEntryMultimap:satisfies(java.lang.Object,java.lang.Object)",75,77,"/**
* Evaluates a predicate on the given key-value pair.
* @param key key object
* @param value value object
* @return true if predicate is satisfied, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,get,com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:get(int),88,92,"/**
* Retrieves an entry by index and returns its key-value pair.
* @param index the position of the desired entry
* @return Entry object containing key K and value V or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,apply,"com.google.common.collect.Maps$AbstractFilteredMap:apply(java.lang.Object,java.lang.Object)",2855,2861,"/**
* Evaluates a predicate with the given key and value.
* @param key unique identifier
* @param value associated data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,containsEntry,"com.google.common.collect.Multimaps$MapMultimap:containsEntry(java.lang.Object,java.lang.Object)",1162,1165,"/**
* Adds a key-value pair to the map.
* @param key unique identifier or null if not applicable
* @param value associated data or null if not applicable
* @return true if successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$MapMultimap:remove(java.lang.Object,java.lang.Object)",1230,1233,"/**
* Calls Map's 2nd level method with transformed key-value pair.
* @param key nullable object to transform (key)
* @param value nullable object to transform (value)
* @return true if successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeFromColumnIf,com.google.common.collect.StandardTable$Column:removeFromColumnIf(com.google.common.base.Predicate),487,504,"/**
* Applies filter to backing map entries and removes matching values.
* @param predicate filter condition for entries
* @return true if any entries were removed, false otherwise
*/",Removes all {@code Column} mappings whose row key and value satisfy the given predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$KeyIterator:next(),4463,4466,"/**
* Returns a mask value by invoking nested methods.
* @return Mask value of type K
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",972,976,"/**
* Constructs a new StrongEntry with given key and associated values.
* @param key the unique key
* @param hash the hash code of the key
* @param next reference to the next entry in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1190,1194,"/**
* Constructs a weak entry with specified key and next reference.
* @param queue the reference queue for garbage collection
* @param key the associated key
* @param hash the hash value of the key
* @param next the next reference in the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,set,com.google.common.cache.LocalCache$LoadingValueReference:set(java.lang.Object),3519,3522,"/**
 * Calls m1 on the FutureValue instance with the provided new value.
 * @param newValue new value to be passed to m1, or null if no change is made. 
 * @return true if successful, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setException,com.google.common.cache.LocalCache$LoadingValueReference:setException(java.lang.Throwable),3524,3527,"/**
* Delegates error handling to futureValue.
* @param t Throwable object to process
* @return true if handled successfully, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,init,com.google.common.util.concurrent.AggregateFuture:init(),113,180,"/**
* Handles futures with optional callback.
* @param allMustSucceed whether all futures must succeed
* @param collectsValues whether to collect values from completed futures
*/","* Must be called at the end of each subclass's constructor. This method performs the ""real""
   * initialization; we can't put this in the constructor because, in the case where futures are
   * already complete, we would not initialize the subclass before calling {@link
   * #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed,
   * we're guaranteed to have properly initialized the subclass.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,closeQuietly,"com.google.common.util.concurrent.ClosingFuture:closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)",2128,2161,"/**
* Closes AutoCloseable resource asynchronously using an Executor.
* @param closeable resource to close
* @param executor executor for asynchronous execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,rejectionPropagatingExecutor,"com.google.common.util.concurrent.MoreExecutors:rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)",1026,1040,"/**
* Wraps an Executor with a custom behavior: delegates to the original if possible, otherwise catches and re-executes rejected commands. 
* @param delegate underlying executor
* @param future future object for handling rejection
* @return new executor instance or the original if applicable
*/","* Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate
   * executor to the given {@code future}.
   *
   * <p>Note, the returned executor can only be used once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$LoadingValueReference:waitForValue(),3601,3604,"/**
* Computes and returns the functional mask.
* @throws ExecutionException if an error occurs during computation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getDone,com.google.common.util.concurrent.Futures:getDone(java.util.concurrent.Future),1160,1176,"/**
* Wraps a Future in a mask, forcing it to complete and extracting its value.
* @param future the Future to mask
* @return the masked Future's value or null if not found
*/","* Returns the result of the input {@code Future}, which must have already completed.
   *
   * <p>The benefits of this method are twofold. First, the name ""getDone"" suggests to readers that
   * the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code
   * Future} that is still pending, the program will throw instead of block. This can be important
   * for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link
   * FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from
   * the {@code call} implementation but forget to add it to the arguments of {@code
   * whenAllComplete}.
   *
   * <p>If you are looking for a method to determine whether a given {@code Future} is done, use the
   * instance method {@link Future#isDone()}.
   *
   * @throws ExecutionException if the {@code Future} failed with an exception
   * @throws CancellationException if the {@code Future} was cancelled
   * @throws IllegalStateException if the {@code Future} is not done
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getUnchecked,com.google.common.util.concurrent.Futures:getUnchecked(java.util.concurrent.Future),1368,1385,"/**
* Wraps a Future in a checked exception, rethrowing any errors as ExecutionErrors.
* @param future the Future to mask
* @return the original Future's value or null if not set
*/","* Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw
   * a checked exception. This makes {@code Future} more suitable for lightweight, fast-running
   * tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior
   * similar to that of {@code ForkJoinTask.join}.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link
   *       UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link
   *       ExecutionError} (if the cause is an {@code Error}).
   *   <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is
   *       restored before {@code getUnchecked} returns.
   *   <li>Any {@link CancellationException} is propagated untouched. So is any other {@link
   *       RuntimeException} ({@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code
   * InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception
   * from the underlying computation in an {@code UncheckedExecutionException} or {@code
   * ExecutionError}.
   *
   * <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link
   * Uninterruptibles#getUninterruptibly(Future)}.
   *
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an
   *     {@code Exception} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$LocalManualCache:size(),4897,4900,"/**
* Returns a functional mask value from the local cache.
* @return functional mask value as a long integer",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,initTable,com.google.common.cache.LocalCache$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray),1990,1997,"/**
* Initializes the hash table with a new capacity, adjusting threshold accordingly.
* @param newTable new reference array to replace existing table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",81,93,"/**
* Executes a Runnable with timeout and error handling.
* @param runnable task to be executed
* @param timeoutDuration duration of the execution time limit
* @param timeoutUnit unit of the timeout duration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowExecutionExceptionOrError(java.lang.Throwable),261,269,"/**
* Wraps a Throwable into an ExecutionException.
* @param cause the underlying exception
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowRuntimeExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable),271,277,"/**
* Wraps and re-throws exceptions as ExecutionErrors or UncheckedExecutionExceptions.
* @param cause the underlying exception to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clearReferenceQueues,com.google.common.cache.LocalCache$Segment:clearReferenceQueues(),2504,2511,"/**
* Evaluates map conditions and triggers corresponding functions.
*/",Clears all entries from the key and value reference queues.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$WriteQueue:iterator(),3768,3777,"/**
* Returns an iterator over the linked list of entries starting from the given entry.
* @return Iterator over the linked list or null if the entry is the head
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runUnlockedCleanup,com.google.common.cache.LocalCache$Segment:runUnlockedCleanup(),3481,3486,"/**
* Skips function mask operation if m1() returns false.
* Triggers m2() on map if condition is not met.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$SoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1542,1546,"/**
* Creates and returns a soft value reference.
* @param queue the reference queue
* @param value the referenced object
* @param entry the reference entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedSoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1638,1642,"/**
* Initializes a weighted soft value reference with the specified parameters.
* @param queue garbage collection queue
* @param referent referenced object
* @param entry reference entry
* @param weight relative importance of this reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedStrongValueReference:<init>(java.lang.Object,int)",1660,1663,"/**
 * Initializes a weighted strong value reference with the given referent and weight.
 * @param referent object being referenced
 * @param weight strength of the reference (intensity)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$1:defaultEquivalence(),444,444,"/**
* Generates an equivalence function that uses a mask to compare objects. 
* @return An Equivalence instance for masked comparison.","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$1:defaultEquivalence(),272,272,"/**
* Returns an equivalence function using a mask to compare objects. 
* @return Equivalence function implementing custom equality logic.","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$2:defaultEquivalence(),444,444,"/**
* Returns an equivalence function for masking objects.
* @return Equivalence function to mask objects
*/","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$3:defaultEquivalence(),444,444,"/**
* Returns an equivalence function for Object type.
* The returned function will be used to compare objects. 
* @return equivalence function for Object type
*/","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$2:defaultEquivalence(),272,272,"/**
* Generates an equivalence function mask for objects. 
* @return An instance of Equivalence representing the mask.","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1498,1502,"/**
* Creates a weak reference to the given value.
* @param queue reference queue for garbage collection
* @param value referenced object
* @param entry reference entry containing context information
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedWeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1616,1620,"/**
* Constructs a weighted weak reference to the given object.
* @param queue garbage collection queue
* @param referent referenced object
* @param entry associated ReferenceEntry
* @param weight reference weight (not used in this implementation) 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyAccessOrder,com.google.common.cache.LocalCache:nullifyAccessOrder(com.google.common.cache.ReferenceEntry),1811,1815,"/**
* Reinitializes a null reference entry with default values.
* @param nulled reference entry to be reinitialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyWriteOrder,com.google.common.cache.LocalCache:nullifyWriteOrder(com.google.common.cache.ReferenceEntry),1824,1828,"/**
* Updates a nullified reference entry with default values.
* @param nulled the entry to be updated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$StrongValueReference:waitForValue(),1603,1606,"/**
* Returns a mask value based on the m1() function result. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$ValueIterator:next(),4471,4474,"/**
* Returns a mask value by executing nested methods m1 and m2.
* @return Mask value object of type V or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,toString,com.google.common.cache.LocalCache$WriteThroughEntry:toString(),4523,4526,"/**
* Combines results of m1 and m2 methods with an equals sign.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteQueue,com.google.common.cache.LocalCache:usesWriteQueue(),352,354,"/**
* Returns true if some condition is met based on m1() result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsWrite,com.google.common.cache.LocalCache:recordsWrite(),356,358,"/**
* Evaluates a boolean mask by combining results of m1 and m2.
* @return true if either m1 or m2 returns true
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expires,com.google.common.cache.LocalCache:expires(),332,334,"/**
* Evaluates mask condition using m1 and m2 methods.
* @return true if either m1 or m2 returns true, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessQueue,com.google.common.cache.LocalCache:usesAccessQueue(),348,350,"/**
* Evaluates a boolean mask by ORing results of m1() and m2().
* @return true if either m1() or m2() returns true, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsAccess,com.google.common.cache.LocalCache:recordsAccess(),360,362,"/**
* Returns true if mask is valid.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isExpired,"com.google.common.cache.LocalCache:isExpired(com.google.common.cache.ReferenceEntry,long)",1791,1800,"/**
* Evaluates whether a cache entry has expired based on access and write timestamps.
* @param entry Cache entry to check
* @param now Current time in nanoseconds
* @return True if entry has expired, false otherwise
*/",Returns true if the entry has expired.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newValueReference,"com.google.common.cache.LocalCache:newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int)",1720,1724,"/**
* Computes the ValueReference for a given ReferenceEntry and value.
* @param entry ReferenceEntry containing key-value pair
* @param value target value to compare with existing entries
* @param weight weighting factor for the comparison
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,hash,com.google.common.cache.LocalCache:hash(java.lang.Object),1726,1729,"/**
* Computes hash value for given key and passes it to m2 method.
* @param key object to compute hash from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache:size(),3969,3972,"/**
* Computes and returns the function mask using m1() and m2() values.
* @return 32-bit integer representing the function mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.AbstractMapBasedMultiset:size(),185,188,"/**
* Calculates and returns a mask of size bits.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,size,com.google.common.collect.ConcurrentHashMultiset:size(),154,161,"/**
* Calculates the sum of all values in the count map and returns it as an integer mask.
*/","* {@inheritDoc}
   *
   * <p>If the data in the multiset is modified by any other threads during this method, it is
   * undefined which (if any) of these modifications will be reflected in the result.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,size,com.google.common.collect.EnumMultiset:size(),125,128,"/**
* Computes M1 mask value based on array size.
* @return M1 mask integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,size,com.google.common.collect.Iterators:size(java.util.Iterator),170,177,"/**
* Counts and returns a hash value from the given iterator.
* @param iterator iterator to iterate over elements
*/","* Returns the number of elements remaining in {@code iterator}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,size,com.google.common.collect.JdkBackedImmutableMultiset:size(),89,92,"/**
* Calculates a mask based on size.
* @return A 32-bit integer representing the calculated mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap:size(),2345,2353,"/**
* Calculates the FUNC_MASK value by summing segment counts.
* @return The total count of elements in all segments
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,linearTimeSizeImpl,com.google.common.collect.Multisets:linearTimeSizeImpl(com.google.common.collect.Multiset),1136,1142,"/**
* Calculates the function mask value based on the given Multiset.
* @param multiset input multiset object
*/",An implementation of {@link Multiset#size}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,size,com.google.common.collect.RegularImmutableSortedMultiset:size(),95,99,"/**
* Calculates mask value based on cumulative counts.
* @return integer mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedAdd,"com.google.common.math.IntMath:saturatedAdd(int,int)",540,542,"/**
* Calculates the result of bitwise OR operation between two integers.
* @param a first integer value
* @param b second integer value
* @return result of (a | b)
*/","* Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case
   * {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedSubtract,"com.google.common.math.IntMath:saturatedSubtract(int,int)",550,552,"/**
* Computes the mask value of 'a' relative to 'b'.
* @param a reference integer
* @param b target integer
* @return signed difference between 'a' and 'b'
*/","* Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in
   * which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedMultiply,"com.google.common.math.IntMath:saturatedMultiply(int,int)",560,562,"/**
* Calculates the product of two integers and returns its bitwise complement.
* @param a first integer
* @param b second integer
* @return product's bitwise complement as an int
*/","* Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which
   * case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnAddsSet,com.google.common.collect.Platform:preservesInsertionOrderOnAddsSet(),91,93,"/**
* Returns a set of unique objects using compact hash set implementation.
* @return Set containing elements from the compact hash set
*/","* Returns the platform preferred set implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkKey,com.google.common.collect.AbstractBiMap$Inverse:checkKey(java.lang.Object),474,478,"/**
* Computes functional mask value using inverse mapping.
* @param key input parameter
* @return functional mask value of type K
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumBiMap:entrySet(),320,324,"/**
* Returns a set of key-value entries. If the underlying entry set is null,
* initializes it with a new EntrySet instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumHashBiMap:entrySet(),320,324,"/**
* Returns a set of map entries.
* @return Set of Map entries or newly created EntrySet if none exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setValue,com.google.common.collect.AbstractBiMap$BiMapEntry:setValue(java.lang.Object),338,352,"/**
* Updates and retrieves user data by ID.
* @param value UserProfile object to update
* @return updated UserProfile object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumBiMap:containsValue(java.lang.Object),117,120,"/**
* Applies bitwise inversion using M1 function.
* @param value input object to be inverted
* @return true if inversion is successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumHashBiMap:containsValue(java.lang.Object),117,120,"/**
* Inverts input value using the M1 function.
* @param value input value to invert (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$EntrySet:clear(),393,396,"/**
* Calls overridden method from parent class.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$KeySet:clear(),245,248,"/**
 * Calls the overridden method in the parent class.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumBiMap:clear(),217,221,"/**
* Calls m1 on the delegate and its inverse, propagating results.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumHashBiMap:clear(),217,221,"/**
* Calls methods on both delegate and inverse delegates.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$EntrySet:iterator(),419,422,"/**
* Returns an iterator over an entry set of key-value pairs.
* @return iterator over Entry objects or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,makeInverse,com.google.common.collect.AbstractBiMap:makeInverse(java.util.Map),107,109,"/**
* Creates an inverse bi-map from the given map.
* @param backward input map with values as keys and original keys as values. 
* @return InverseBiMap instance or null if invalid.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkValue,com.google.common.collect.AbstractBiMap$Inverse:checkValue(java.lang.Object),480,484,"/**
* Computes the inverse mask value using m1 function.
* @param value input value to invert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.AbstractBiMap$Inverse:values(),277,285,"/**
* Initializes or returns the set of values used as masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.EnumBiMap:values(),277,285,"/**
* Returns or initializes a set of values based on existing state.
* @return Set of values, initialized if not already created
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$KeySet:iterator(),269,272,"/**
* Retrieves and returns an iterator over a collection of items.
* @return Iterator instance containing K-type elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$Keys:iterator(),1787,1790,"/**
* Returns an iterator over keys in the multimap.
* @return Iterator of K objects (multimap keys)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumBiMap:keySet(),232,236,"/**
* Returns a set of keys or initializes a new one if empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumHashBiMap:keySet(),232,236,"/**
* Returns a set of keys or initializes it if not already created. 
* @return Set containing the keys or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$ValueSet:iterator(),296,299,"/**
* Returns an iterator over mapped values from m1().m2().
* @return Iterator containing V objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,iterator,com.google.common.collect.FilteredMultimapValues:iterator(),47,50,"/**
* Retrieves an iterator over multimap's key-set values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumBiMap:inverse(),225,228,"/**
* Returns the inverse mapping of key-value pairs.
* @return BiMap containing key-value pairs in reverse order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumHashBiMap:inverse(),225,228,"/**
* Returns the inverse mapping of the underlying data structure.
* @return BiMap containing inverted key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$Itr:next(),1178,1192,"/**
* Iterates to next entry and updates iterators, then applies transformation.
* @return transformed object of type T or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,<init>,"com.google.common.collect.GeneralRange:<init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType)",103,146,"/**
* Constructs a GeneralRange object with specified bounds and comparator.
* @param comparator comparison function
* @param hasLowerBound true to include lower bound, false otherwise
* @param lowerEndpoint lower bound endpoint (null if not included)
* @param lowerBoundType type of lower bound
* @param hasUpperBound true to include upper bound, false otherwise
* @param upperEndpoint upper bound endpoint (null if not included)
* @param upperBoundType type of upper bound",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$PeekingImpl:next(),1196,1207,"/**
* Returns next element from the iterator, either by peeking or retrieving a previously seen element.
*@return E type element, or null if no elements are available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peek,com.google.common.collect.Iterators$PeekingImpl:peek(),1215,1224,"/**
* Returns a masked value based on the currently peeked element.
* @return E type object or null if not yet peeked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$TransformedEntriesMap:getOrDefault(java.lang.Object,java.lang.Object)",2163,2172,"/**
* Retrieves a transformed object using the provided key.
* @param key unique identifier or null for default value
* @param defaultValue default object to return if not found
* @return transformed V2 object or defaultValue if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$TransformedEntriesMap:remove(java.lang.Object),2175,2182,"/**
* Applies transformation to value if key exists in map; otherwise returns null.
* @param key nullable object to search for
* @return transformed V2 value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$AvlNode:getElement(),1031,1035,"/**
* Evaluates the mask function for the given element.
* @param elem input element to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,updateInverseMap,"com.google.common.collect.AbstractBiMap:updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)",154,164,"/**
* Updates cache with new value and applies transformation to old value.
* @param key unique identifier
* @param containedKey true if key is present in cache
* @param oldValue previous value (null if not cached)
* @param newValue updated value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,removeFromBothMaps,com.google.common.collect.AbstractBiMap:removeFromBothMaps(java.lang.Object),172,179,"/**
* Retrieves and caches value from delegate using FUNC_MASK, 
* updating cache with new result if different. 
* @param key object to use for lookup
* @return cached or newly computed V value, or null if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
* Resolves conflict by iterating through map entries and throwing exception on duplicate value.
* @param function BiFunction to delegate to the underlying map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumHashBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
* Resolves conflicts between this map and its inverse by iterating over the entries of both maps.
* @param function BiFunction to resolve conflicts
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,next,com.google.common.collect.AbstractIndexedListIterator:next(),75,82,"/**
* Returns a mask value based on current position.
* @return functional mask value of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,previous,com.google.common.collect.AbstractIndexedListIterator:previous(),94,101,"/**
* Returns the function mask value.
* @return Function mask value or throws exception if invalid state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,<init>,com.google.common.collect.AbstractIterator:<init>(),69,69,"/**
 * Initializes an iterator instance with no specific implementation.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSequentialIterator.java,<init>,com.google.common.collect.AbstractSequentialIterator:<init>(java.lang.Object),50,52,"/**
* Initializes iterator with an optional initial value.
* @param firstOrNull the initial value or null if empty
*/","* Creates a new iterator with the given first element, or, if {@code firstOrNull} is null,
   * creates a new empty iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableListIterator.java,<init>,com.google.common.collect.UnmodifiableListIterator:<init>(),34,34,"/**
* Default constructor for an unmodifiable list iterator.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,hasNext,com.google.common.collect.AbstractIterator:hasNext(),126,137,"/**
* Evaluates the functional mask based on the current state.
* @return true if ready, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,wrapEntry,com.google.common.collect.AbstractMapBasedMultimap$AsMap:wrapEntry(java.util.Map$Entry),1412,1415,"/**
* Applies a transformation to an entry's value.
* @param entry map entry with key and collection of values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:sortedMap(),1546,1549,"/**
* Returns a navigable map of collections with key-value pairs inherited from superclass.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:comparator(),1491,1494,"/**
* Returns a comparator instance based on the result of m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:firstKey(),1496,1500,"/**
* Calls m1 to retrieve an instance of type T and invokes its m2 method. 
* @return result of calling m2 on the returned instance.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:lastKey(),1502,1506,"/**
* Calls m1() and delegates its result to call m2(), returning the value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:headMap(java.lang.Object),1508,1511,"/**
* Returns a sorted map of values associated with the given key.
* @param toKey unique identifier for which to fetch associated values
* @return SortedMap containing associated values or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:subMap(java.lang.Object,java.lang.Object)",1513,1517,"/**
* Returns a sorted map of key-value pairs between the specified range.
* @param fromKey starting key (inclusive)
* @param toKey ending key (inclusive)
* @return a SortedMap containing key-value pairs or an empty map if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:tailMap(java.lang.Object),1519,1522,"/**
* Wraps the result of m2() in a SortedMap.
* @param fromKey key to start searching from
* @return SortedMap containing results or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:createKeySet(),1534,1537,"/**
* Returns a sorted set of keys based on m1() result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollAsMapEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollAsMapEntry(java.util.Iterator),1617,1627,"/**
* Processes a database entry to extract masked data.
* @param entryIterator iterator over entries
* @return Entry with processed mask, or null if invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractMapBasedMultimap:createUnmodifiableEmptyCollection(),143,145,"/**
* Applies two transformation functions (m1 and m2) sequentially to an empty collection. 
* @return transformed collection of type V 
*/","* Creates an unmodifiable, empty collection of values.
   *
   * <p>This is used in {@link #removeAll} on an empty key.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:sortedMap(),1065,1068,"/**
* Returns a NavigableMap of K to collections of V.
* @return map containing data from superclass implementation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:comparator(),1026,1029,"/**
* Returns a comparator that is logically equivalent to the one returned by m1().
* @return Comparator object or null if m1() returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:first(),1031,1035,"/**
* Returns a value of type K using functions m1 and m2.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:headSet(java.lang.Object),1037,1040,"/**
* Returns a sorted set of keys from m1() based on the provided key.
* @param toElement key element to sort by
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:last(),1042,1046,"/**
 * Returns a mask value by composing m1() and m2().
 * @return Mask value of type K
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",1048,1051,"/**
* Returns a sorted set of keys within the specified range.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (exclusive)
* @return SortedSet of keys or empty if range is invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:tailSet(java.lang.Object),1053,1056,"/**
* Creates a sorted set of keys based on the provided element.
* @param fromElement key to initialize the set with
* @return SortedSet containing keys, or null if invalid input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollFirst(),1090,1093,"/**
* Computes and returns a mask value using iterated function m1(). 
* @return K type mask value or null if not applicable.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollFirst(),722,725,"/**
* Computes and returns a masked value using iterators.
*@return V computed value or null if not applicable",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollFirstEntry,com.google.common.collect.AbstractNavigableMap:pollFirstEntry(),51,54,"/**
* Returns an iterator over entries using m1() as a mask. 
* @return Iterator over masked entries or null if empty 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollLastEntry,com.google.common.collect.AbstractNavigableMap:pollLastEntry(),56,59,"/**
* Returns an Entry instance based on the result of m1(). 
* @return Entry object or null if not found.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardPollFirstEntry(),243,245,"/**
* Returns an Entry instance with a computed mask value.
* @return Entry object or null if computation fails","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code
   * entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to
   * forward to this implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollFirst,com.google.common.collect.ForwardingNavigableSet:standardPollFirst(),127,129,"/**
* Computes and returns a functional mask value.
* @return a Nullable value containing the result or null if failed.","* A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you
   * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this
   * implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:remove(),484,489,"/**
 * Decrements total size and calls subsequent methods in sequence.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,refreshIfEmpty,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:refreshIfEmpty(),353,365,"/**
* Recursively traverses the ancestor chain or updates the delegate based on conditions.
* @throws ConcurrentModificationException if ancestor's state changes unexpectedly
*/","* If the delegate collection is empty, but the multimap has values for the key, replace the
     * delegate with the new collection for the key.
     *
     * <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't
     * changed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:addAll(int,java.util.Collection)",778,793,"/**
* Updates collection at specified index, triggering size changes and potential reinitialization.
* @param index position to update
* @param c collection of values to modify
* @return true if collection was updated, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:get(int),795,800,"/**
* Calls hierarchical method m2 and invokes its m3 with provided index. 
* @param index integer index to pass to m3 in m2
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:set(int,java.lang.Object)",802,807,"/**
* Recursively fetches an element at specified index from a nested data structure.
* @param index the position of the desired element
* @param element the object to insert or replace at the given index
* @return V the fetched element or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:add(int,java.lang.Object)",809,818,"/**
* Updates the data structure at specified index with new element.
* @param index position to update
* @param element new value to insert
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:remove(int),820,828,"/**
* Computes and returns a value of type V at the specified index.
* @param index index to compute value for
* @return Value object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,indexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:indexOf(java.lang.Object),830,834,"/**
* Calls m2() with provided object and returns its result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastIndexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:lastIndexOf(java.lang.Object),836,840,"/**
* Calls m2() and delegates to its result's m3() with input object.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasPrevious,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:hasPrevious(),875,878,"/**
* Calls m1 to perform some operation and returns its result.
* @return true if m1's result is successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previous,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previous(),880,884,"/**
* Calls M1 to retrieve an intermediate result and then calls its M2 method.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,nextIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:nextIndex(),886,889,"/**
* Calls and returns the result of m2() from the returned value of m1(). 
* @return result of m2() or null if m1() returns null 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previousIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previousIndex(),891,894,"/**
* Calls and returns result of m2() from UserProfile object retrieved by m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:set(java.lang.Object),896,899,"/**
* Calls m1() and delegates m2 operation with given value.
* @param value input parameter for m2 operation in m1
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:add(java.lang.Object),901,909,"/**
* Updates internal state and calls dependent methods based on the provided value.
* @param value input value for processing
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subList,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:subList(int,int)",854,861,"/**
* Retrieves a list of items V within the specified range.
* @param fromIndex start index
* @param toIndex end index
* @return List of items V or empty list if no items found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getSortedSetDelegate,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:getSortedSetDelegate(),697,700,"/**
* Returns a NavigableSet of elements, delegating to superclass implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:comparator(),643,646,"/**
* Delegates to another comparator's delegate.
* @return Comparator object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:first(),648,653,"/**
* Invokes m1(), then calls and returns the result of m3() on the returned value of m2().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:last(),655,660,"/**
 * Calls m1(), then returns result of calling m2()'s m3() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:headSet(java.lang.Object),662,669,"/**
* Returns a sorted set of elements, including the specified element.
* @param toElement element to include in the result
* @return SortedSet containing all relevant elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:subSet(java.lang.Object,java.lang.Object)",671,678,"/**
* Creates a sorted set of elements within the specified range.
* @param fromElement lower bound element
* @param toElement upper bound element
* @return SortedSet containing elements in the range [fromElement, toElement]
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:tailSet(java.lang.Object),680,687,"/**
* Creates a sorted set of elements from the current set and the given element.
* @param fromElement element to include in the resulting set
* @return SortedSet containing all elements or a subset based on m5()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,put,"com.google.common.collect.AbstractMapBasedMultimap:put(java.lang.Object,java.lang.Object)",189,207,"/**
* Inserts a value into a collection associated with a key.
* @param key unique identifier of the map
* @param value value to insert
* @return true if insertion successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getOrCreateCollection,com.google.common.collect.AbstractMapBasedMultimap:getOrCreateCollection(java.lang.Object),209,216,"/**
* Retrieves a collection of values associated with the given key.
* @param key unique identifier for which to retrieve the collection
* @return Collection<V> containing zero or more values; null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap:get(java.lang.Object),292,299,"/**
* Retrieves a collection of values from the map using the provided key.
* If no value is found in the map, attempts to retrieve it via alternative method.
* @param key unique identifier for retrieval
* @return Collection of values or null if not found and m2 failed
*/","* {@inheritDoc}
   *
   * <p>The returned collection is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,values,com.google.common.collect.AbstractMapBasedMultimap:values(),1214,1217,"/**
* Calls superclass implementation of m1().","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,values,com.google.common.collect.LinkedListMultimap:values(),748,751,"/**
* Calls superclass's implementation of m1 and returns result as List<V>.
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values in the order they
   * were added to the multimap. Because the values may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeys,com.google.common.collect.AbstractMapBasedMultimap:createKeys(),1247,1250,"/**
* Returns a multiset containing all keys from this map.
* @return A Multiset of keys or null if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createKeys,com.google.common.collect.LinkedListMultimap:createKeys(),735,738,"/**
* Returns a multiset containing all keys from this map.
* @return A Multiset object containing all key values.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createKeys,com.google.common.collect.Multimaps$MapMultimap:createKeys(),1270,1273,"/**
* Returns a multiset view of keys in this map.
* @return Multiset containing all unique keys in this map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entries,com.google.common.collect.AbstractMapBasedMultimap:entries(),1261,1264,"/**
 * Calls superclass implementation of `m1()` to fetch entries.
 */","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.
   *
   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the
   * time the entry is returned by a method call to the collection or its iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueIterator,com.google.common.collect.AbstractMultimap:valueIterator(),218,220,"/**
* Returns an iterator over mapped values from previous computation.
* @return Iterator of V objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,entries,com.google.common.collect.LinkedListMultimap:entries(),798,801,"/**
* Calls parent's implementation of m1 and returns result.
* @return list of entries as per parent class implementation
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the entries in the order they
   * were added to the multimap. Because the entries may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.
   *
   * <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what
   * happens subsequently. As long as the corresponding key-value mapping is not removed from the
   * multimap, {@link Entry#getValue} returns the value from the multimap, which may change over
   * time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap
   * does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()}
   * call won't update the multimap but will lead to a revised value being returned by {@code
   * getValue()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,getAndSet,"com.google.common.collect.AbstractMapBasedMultiset:getAndSet(com.google.common.collect.Count,int)",337,343,"/**
* Recursively calculates minimum count based on input Count object or returns 0 if it's null.
* @param i the Count object to process or null
* @return minimum count value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,next,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:next(),215,229,"/**
* Fetches and processes the next occurrence.
* @return E object or null if exhausted
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.AbstractMapBasedMultiset:clear(),169,176,"/**
* Resets internal state and updates backing map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.HashMultiset:iterator(),190,193,"/**
* Returns an iterator over the multiset's elements.
* @return Iterator instance to traverse the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.LinkedHashMultiset:iterator(),190,193,"/**
* Returns an iterator over the elements in this multiset.
* @return Iterator object containing all unique elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,newStringBuilderForCollection,com.google.common.collect.Collections2:newStringBuilderForCollection(int),351,354,"/**
* Generates a StringBuilder with a dynamically-sized buffer based on input size.
* @param size the desired size of the buffer
*/",Returns best-effort-sized StringBuilder based on the given collection size.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,"com.google.common.collect.FilteredEntryMultimap$Keys:remove(java.lang.Object,int)",361,385,"/**
* Counts occurrences of a value in a collection.
* @param key the value to search for
* @param occurrences maximum count to consider
* @return actual count or 0 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,computeArrayListCapacity,com.google.common.collect.Lists:computeArrayListCapacity(int),155,161,"/**
* Calculates function mask based on input array size.
* @param arraySize Size of the input array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithCapacity,com.google.common.collect.Lists:newArrayListWithCapacity(int),180,185,"/**
* Creates a dynamically-sized ArrayList with an initial capacity. 
* @param initialArraySize the initial size of the array list
*/","* Creates an {@code ArrayList} instance backed by an array with the specified initial size;
   * simply delegates to {@link ArrayList#ArrayList(int)}.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList}
   * constructors very wisely did not accept varargs.)
   *
   * @param initialArraySize the exact size of the initial backing array for the returned array list
   *     ({@code ArrayList} documentation calls this value the ""capacity"")
   * @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size
   *     reaches {@code initialArraySize + 1}
   * @throws IllegalArgumentException if {@code initialArraySize} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,capacity,com.google.common.collect.Maps:capacity(int),286,307,"/**
* Calculates a mask value based on the expected size.
* @param expectedSize size to determine the mask for
*/","* Returns a capacity that is sufficient to keep the map from being resized as long as it grows no
   * larger than expectedSize and the load factor is ≥ its default (0.75).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$ArrayListSupplier:<init>(int),185,187,"/**
* Initializes supplier with expected values per key.
* @param expectedValuesPerKey non-negative integer value for expected values per key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$HashSetSupplier:<init>(int),217,219,"/**
* Initializes supplier with expected values per key.
* @param expectedValuesPerKey minimum expected values per key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:<init>(int),231,233,"/**
* Initializes LinkedHashSetSupplier with expected values per key.
* @param expectedValuesPerKey minimum number of values per key in the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(int),295,305,"/**
* Creates a ListMultimapBuilder with expected values per key.
* @param expectedValuesPerKey maximum number of values per key
*/","* Uses an {@link ArrayList} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(int),337,347,"/**
* Creates a SetMultimapBuilder with the specified expected values per key.
* @param expectedValuesPerKey maximum number of values allowed per key
*/","* Uses a hash-based {@code Set} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(int),360,370,"/**
* Creates a SetMultimapBuilder with specified expected values per key.
* @param expectedValuesPerKey the number of values to expect per key
*/","* Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to
     * expect the specified number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(int),83,91,"/**
* Creates a multimap builder with expected key count.
* @param expectedKeys number of keys to expect
*/","* Uses a hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * @throws IllegalArgumentException if {@code expectedKeys < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(int),114,122,"/**
* Creates a multimap builder with expected keys.
* @param expectedKeys number of expected key-value pairs
*/","* Uses an hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$ImmutableEntry:<init>(java.lang.Object,int)",268,272,"/**
* Constructs an immutable entry with the given element and count.
* @param element the non-null element to store
* @param count the non-negative count of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int)",942,956,"/**
* Updates multiset count for given element.
* @param self Multiset instance
* @param element element to update count for
* @param count new count value
* @return original count value
*/","An implementation of {@link Multiset#setCount(Object, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int)",959,970,"/**
* Updates the multiset count for a given element.
* @param self Multiset instance
* @param element element to update count for
* @param oldCount current count of element in set
* @param newCount desired count of element in set
* @return true if count was updated, false otherwise
*/","An implementation of {@link Multiset#setCount(Object, int, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Entries:spliterator(),134,137,"/**
* Returns Spliterator for iterating over key-value pairs.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap$EntrySet:hashCode(),142,145,"/**
* Returns the functional mask value.
* @return The functional mask as an integer.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,hashCode,com.google.common.collect.FilteredKeySetMultimap$EntrySet:hashCode(),69,72,"/**
* Returns the mask value using Sets.m1.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardHashCode,com.google.common.collect.ForwardingSet:standardHashCode(),98,100,"/**
* Calculates and returns the mask value using Sets.m1(). 
* @return Mask integer value.","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashCode,com.google.common.collect.ImmutableSet:hashCode(),298,301,"/**
 * Returns the functional mask value based on instance properties.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$UnmodifiableEntrySet:hashCode(),1583,1586,"/**
* Returns a function mask value using Sets.m1.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,hashCode,com.google.common.collect.RegularContiguousSet:hashCode(),237,240,"/**
* Returns the function mask value using Sets.m1(). 
* @return Function mask integer value",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$FilteredSet:hashCode(),1291,1294,"/**
* Computes and returns the FUNC_MASK value using the m1 function. 
* @return integer mask value",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,hashCode,com.google.common.collect.TreeRangeSet$AsRanges:hashCode(),110,113,"/**
* Returns a mask value using Sets.m1(). 
* @return int mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap$EntrySet:equals(java.lang.Object),147,150,"/**
* Checks object against function mask using Set's m1 method.
* @param obj nullable object to check
* @return true if object matches mask, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,equals,com.google.common.collect.FilteredKeySetMultimap$EntrySet:equals(java.lang.Object),74,77,"/**
* Checks if an object matches the function mask.
* @param o the object to check (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardEquals,com.google.common.collect.ForwardingSet:standardEquals(java.lang.Object),88,90,"/**
* Checks if an object matches the function mask.
* @param object the object to check
* @return true if the object matches the mask, false otherwise
*/","* A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If
   * you override either of those methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$UnmodifiableEntrySet:equals(java.lang.Object),1578,1581,"/**
* Checks if an object matches a specific mask using Sets.m1.
* @param object object to be checked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$FilteredSet:equals(java.lang.Object),1286,1289,"/**
* Evaluates object against function mask.
* @param object object to check (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:equals(java.lang.Object),1022,1030,"/**
* Checks if object matches function mask.
* @param o the object to compare
* @return true if match, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,equals,com.google.common.collect.TreeRangeSet$AsRanges:equals(java.lang.Object),115,118,"/**
 * Checks if object matches a specific mask.
 * @param o the object to check (may be null)
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsValue,com.google.common.collect.AbstractMultimap:containsValue(java.lang.Object),48,57,"/**
* Checks if a value matches any collection's predicate.
* @param value object to check
* @return true if matched, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.AbstractMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
* Checks if a key-value pair exists in a collection.
* @param key unique identifier or search criteria
* @param value associated data to match
* @return true if pair found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.AbstractMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Checks if a given value exists in the mapped collection for a specified key.
* @param key unique identifier or null if not applicable
* @param value value to search for or null if not applicable
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap:hashCode(),251,254,"/**
* Calls and returns result of m1(), which in turn calls and returns result of this method.","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.AbstractMultimap:toString(),262,265,"/**
* Calls m1() to fetch related data and executes m2() on the result.","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,asMap,com.google.common.collect.LinkedListMultimap:asMap(),228,232,"/**
* Returns cached or recalculated map of key-value pairs.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.AbstractMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
* Applies the mask function to each entry in the multimap.
* @param multimap map of key-value pairs
* @return true if any entries were modified, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keySet,com.google.common.collect.LinkedListMultimap:keySet(),162,166,"/**
* Returns set of keys using cached or recalculated values.
* @return Set of keys, potentially updated from cache
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keys,com.google.common.collect.LinkedListMultimap:keys(),172,176,"/**
* Returns a multiset of keys from cache or computes it if not available.
*@return Multiset of keys or null if computation failed.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap:equals(java.lang.Object),238,241,"/**
* Checks object against multimap mask.
* @param object object to check against multimap mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.ConcurrentHashMultiset:contains(java.lang.Object),54,57,"/**
* Evaluates the element using rule m1 and returns true if result is positive.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.EnumMultiset:contains(java.lang.Object),54,57,"/**
* Checks if an element matches a filter condition.
* @param element potentially filtered object
* @return true if element meets the criteria, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,add,com.google.common.collect.AbstractMultiset:add(java.lang.Object),60,65,"/**
* Calls internal implementation and returns true.
* @param element object to process (currently unused)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,remove,com.google.common.collect.AbstractMultiset:remove(java.lang.Object),73,77,"/**
* Determines if an element is greater than a threshold value.
* @param element object to compare (threshold value implicitly set to 1)
* @return true if element is greater, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,removeAll,com.google.common.collect.AbstractMultiset:removeAll(java.util.Collection),111,115,"/**
* Checks if specified collection of elements can be removed from this multiset.
* @param elementsToRemove collection of elements to remove
* @return true if removal is possible, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemoveAll,com.google.common.collect.ForwardingMultiset:standardRemoveAll(java.util.Collection),190,193,"/**
* Checks for functional mask based on collection of elements to remove.
* @param elementsToRemove Collection of elements to consider for mask calculation
*/","* A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.AbstractMultiset:elementSet(),130,137,"/**
* Returns a set of elements based on the current mask.
* @return Set of elements or initializes it using m1() if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.AbstractMultiset:entrySet(),164,171,"/**
* Returns a set of entries, initializing it if not already populated.
* @return Set of Entry objects or null if initialization failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,equals,com.google.common.collect.AbstractMultiset:equals(java.lang.Object),207,210,"/**
* Checks if an object matches function mask.
* @param object object to check (may be null)
*/","* {@inheritDoc}
   *
   * <p>This implementation returns {@code true} if {@code object} is a multiset of the same size
   * and if, for each element, the two multisets have the same count.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardEquals,com.google.common.collect.ForwardingMultiset:standardEquals(java.lang.Object),285,287,"/**
* Checks if an object matches the current multisets.
* @param object object to check
* @return true if object is in multisets, false otherwise
*/","* A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code
   * entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to
   * override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,equals,com.google.common.collect.ImmutableMultiset:equals(java.lang.Object),336,339,"/**
* Checks if an object matches the function mask criteria.
* @param object object to check (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstEntry,com.google.common.collect.AbstractNavigableMap:firstEntry(),41,44,"/**
* Returns an entry from the iterator sequence.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastEntry,com.google.common.collect.AbstractNavigableMap:lastEntry(),46,49,"/**
* Returns an Entry object from iterator results.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getFirst,"com.google.common.collect.Iterables:getFirst(java.lang.Iterable,java.lang.Object)",825,829,"/**
* Returns first non-null element from the iterable or a default value if all elements are null.
* @param iterable collection of objects to search
* @param defaultValue fallback object if no non-null element is found in the iterable
* @return first non-null element of type T, or T itself as default value","* Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty.
   * The {@link Iterators} analog to this method is {@link Iterators#getNext}.
   *
   * <p>If no default value is desired (and the caller instead wants a {@link
   * NoSuchElementException} to be thrown), it is recommended that {@code
   * iterable.iterator().next()} is used instead.
   *
   * <p>To get the only element in a single-element {@code Iterable}, consider using {@link
   * #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getFirst()} instead. Note that if the collection is empty,
   * {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the default value to return if the iterable is empty
   * @return the first element of {@code iterable} or the default value
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lowerKey,com.google.common.collect.AbstractNavigableMap:lowerKey(java.lang.Object),103,106,"/**
 * Computes the functional mask value from a given key.
 * @param key input key to compute mask from
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,floorKey,com.google.common.collect.AbstractNavigableMap:floorKey(java.lang.Object),108,111,"/**
* Retrieves a value from a map using the provided key.
* @param key unique identifier or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,ceilingKey,com.google.common.collect.AbstractNavigableMap:ceilingKey(java.lang.Object),113,116,"/**
* Retrieves value associated with the given key using m1() and maps it to m2(). 
* @param key unique identifier for the desired value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,higherKey,com.google.common.collect.AbstractNavigableMap:higherKey(java.lang.Object),118,121,"/**
* Retrieves a value from a map using the provided key.
* @param key unique identifier or key to search by
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,descendingKeySet,com.google.common.collect.AbstractNavigableMap:descendingKeySet(),150,153,"/**
* Returns a navigable set of keys based on m1 and m2 relationships.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList),151,153,"/**
* Constructs an ImmutableRangeSet from a list of non-overlapping ranges.
* @param ranges unmodifiable list of immutable ranges
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,"com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet)",155,158,"/**
* Constructs an ImmutableRangeSet from provided ranges and complement.
* @param ranges list of non-overlapping ranges
* @param complement additional ranges not included in the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet:<init>(java.util.NavigableMap),76,78,"/**
* Initializes TreeRangeSet with a map of cut-based ranges.
* @param rangesByLowerCut NavigableMap of Cut to Range pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet:contains(java.lang.Comparable),30,33,"/**
* Checks if input value matches any mask.
* @param value input to check against masks
* @return true if match found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet:contains(java.lang.Comparable),30,33,"/**
* Checks if a given C value matches a specific mask.
* @param value input value to check
* @return true if value matches mask, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet:isEmpty(),38,41,"/**
* Calls and returns the result of m2() on the object returned by m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.AbstractRangeSet:clear(),53,56,"/**
* Updates mask value using specified range. 
* @param Range of values to apply to mask",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap),294,297,"/**
* Initializes upper bound window from lower bound ranges map.
* @param rangesByLowerBound NavigableMap of Cut-to-Range mappings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.ImmutableRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
* Delegates to another implementation of RangeSet comparison.
* @param other the RangeSet instance to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.TreeRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
* Recursively checks if this range set is equivalent to another.
* @param other RangeSet to compare with
* @return true if sets are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,addAll,com.google.common.collect.TreeRangeSet:addAll(com.google.common.collect.RangeSet),63,66,"/**
* Recursively applies range operation to all intervals in the given set.
* @param other RangeSet object to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,removeAll,com.google.common.collect.TreeRangeSet:removeAll(com.google.common.collect.RangeSet),68,71,"/**
* Recursively processes another range set.
* @param other RangeSet to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.ImmutableRangeSet:equals(java.lang.Object),81,90,"/**
* Compares this RangeSet with another object for equality.
* @param obj the object to compare, may be null or not a RangeSet
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.TreeRangeSet:equals(java.lang.Object),81,90,"/**
* Compares this RangeSet to another object for equality.
* @param obj the object to compare with, can be null or any type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedSetMultimap:asMap(),136,139,"/**
* Calls superclass method to retrieve data and returns it as a map.
* @return A map of key-value pairs where K is... and V is...
*/","* Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link
   * SortedSet} values.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,keySet,com.google.common.collect.TreeMultimap:keySet(),185,188,"/**
* Calls superclass method to retrieve navigable set of keys.","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedSet} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,orNaturalOrder,com.google.common.collect.Maps:orNaturalOrder(java.util.Comparator),786,793,"/**
* Returns a comparator, either the provided one or a default mask comparator.
* @param comparator nullable comparator to use; defaults to a mask comparator
*/","* Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}.
   * This method is an abomination of generics; the only purpose of this method is to contain the
   * ugly type-casting in one place.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,reverse,com.google.common.collect.ReverseNaturalOrdering:reverse(),43,46,"/**
* Returns a natural ordering comparator with a mask value of 1.
* @return Ordering comparator instance for type S.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,comparator,com.google.common.collect.SortedIterables:comparator(java.util.SortedSet),51,60,"/**
* Returns a comparator for the given sorted set, falling back to a default ordering.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:comparator(),500,503,"/**
* Returns a comparator to order Cut objects based on their mask values.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:comparator(),332,335,"/**
* Returns a comparator for sorting Cut objects based on their mask value. 
* @return Comparator instance for sorting by mask value",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:comparator(),734,737,"/**
* Returns a comparator for ordering Cut instances by their masks.
* @return Comparator instance to compare Cut objects based on their mask values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,firstEntry,com.google.common.collect.TreeMultiset:firstEntry(),66,70,"/**
* Returns the first matching Entry instance from the iterator,
* or null if no match is found.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,lastEntry,com.google.common.collect.TreeMultiset:lastEntry(),72,76,"/**
* Returns an Entry object based on iterator result, or null if not found.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.AbstractSortedMultiset:descendingMultiset(),122,126,"/**
* Returns the sorted multiset, or initializes it via m1() if null. 
* @return SortedMultiset object or null if initialization failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$Values:contains(java.lang.Object),217,220,"/**
* Applies mask function to input object.
* @param o input object (may be null)
* @return true if masked successfully, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.StandardTable:containsValue(java.lang.Object),109,112,"/**
* Invokes superclass implementation with non-null value.
* @param value object to pass to superclass method
* @return true if superclass returns true and value is not null, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,isEmpty,com.google.common.collect.ImmutableTable:isEmpty(),85,88,"/**
* Checks if function mask value is zero.
* @return true if function mask is zero, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,putAll,com.google.common.collect.AbstractTable:putAll(com.google.common.collect.Table),109,114,"/**
 * Iterates over the given table and calls the m4 method for each cell.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,cellSet,com.google.common.collect.AbstractTable:cellSet(),118,122,"/**
* Returns a set of cells based on the mask calculation.
* @return Set of cells or null if calculation fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,values,com.google.common.collect.AbstractTable:values(),181,185,"/**
* Returns a collection of values or initializes it from the m1() function if not already set. 
* @return Collection of values or null if initialization failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.AbstractTable:equals(java.lang.Object),233,236,"/**
* Checks if an object matches a specific mask.
* @param obj object to check
* @return true if object matches mask, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ArrayTable:toString(),244,247,"/**
* Calls and returns result of m2() from returned object by m1().
*/",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ImmutableTable:toString(),244,247,"/**
* Calls m1() and chains its result to call m2() on it.
*/",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ByFunctionOrdering.java,<init>,"com.google.common.collect.ByFunctionOrdering:<init>(com.google.common.base.Function,com.google.common.collect.Ordering)",39,42,"/**
* Configures the ordering of functions.
* @param function Function to be ordered
* @param ordering Ordering strategy to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparatorOrdering.java,<init>,com.google.common.collect.ComparatorOrdering:<init>(java.util.Comparator),34,36,"/**
* Initializes sorting order based on provided comparator.
* @param comparator non-null ordering comparator to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,"com.google.common.collect.CompoundOrdering:<init>(java.util.Comparator,java.util.Comparator)",33,36,"/**
* Initializes the compound ordering with two comparators.
* @param primary primary comparator for ordering
* @param secondary secondary comparator for ordering when primary is equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(com.google.common.collect.ImmutableMap),35,37,"/**
* Initializes explicit ordering with provided ranking map.
* @param rankMap immutable map of elements to their ranks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LexicographicalOrdering.java,<init>,com.google.common.collect.LexicographicalOrdering:<init>(java.util.Comparator),33,35,"/**
 * Sets the custom comparator to use lexicographical ordering.
 * @param elementOrder Comparator instance to determine ordering
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,<init>,com.google.common.collect.NaturalOrdering:<init>(),81,81,"/**
* Initializes internal state of natural ordering comparator. 
* Private constructor to prevent instantiation. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,<init>,com.google.common.collect.NullsFirstOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
* Sets the ordering strategy to prioritize null values first.
* @param ordering Ordering instance to use
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,<init>,com.google.common.collect.NullsLastOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
* Sets custom sorting order with null values at the end.
* @param ordering Ordering strategy to be applied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,<init>,com.google.common.collect.ReverseNaturalOrdering:<init>(),100,100,"/**
* Initializes the reverse natural ordering.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,<init>,com.google.common.collect.ReverseOrdering:<init>(com.google.common.collect.Ordering),34,36,"/**
 * Creates a new ordering with reversed order.
 * @param forwardOrder original ordering to be inverted
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UsingToStringOrdering.java,<init>,com.google.common.collect.UsingToStringOrdering:<init>(),44,44,"/**
* Initializes custom ordering for toString() output. 
* This constructor is typically used to set up data structures. 
* @see UsingToStringOrdering#toString() */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,writeObject,com.google.common.collect.ArrayListMultimap:writeObject(java.io.ObjectOutputStream),160,165,"/**
* Serializes function mask to OutputStream.
*/","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,writeObject,com.google.common.collect.HashMultimap:writeObject(java.io.ObjectOutputStream),136,141,"/**
* Serializes this object's state to the provided ObjectOutputStream.
*/","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,writeObject,com.google.common.collect.ImmutableListMultimap:writeObject(java.io.ObjectOutputStream),512,517,"/**
* Serializes function mask data to the given output stream.
*/","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,readObject,com.google.common.collect.ArrayListMultimap:readObject(java.io.ObjectInputStream),167,176,"/**
* Deserializes function mask data from the given ObjectInputStream.
* @param stream input stream containing serialized data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultimap,"com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)",162,167,"/**
* Reads and populates a Multimap with data from an ObjectInputStream.
* @param multimap the map to populate
* @param stream input stream containing map data
*/","* Populates a multimap by reading an input stream, as part of deserialization. See {@link
   * #writeMultimap} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,<init>,"com.google.common.collect.TableCollectors$MutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",176,180,"/**
* Initializes a mutable cell with specified row, column and value.
* @param row the row of the cell
* @param column the column of the cell
* @param value the initial value of the cell",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$ImmutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",140,147,"/**
* Constructs an ImmutableCell object with specified row, column keys and value.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell data value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,keySet,com.google.common.collect.ArrayTable$ArrayMap:keySet(),197,200,"/**
* Delegate to keyIndex's m1() to retrieve a set of K keys. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getKey,com.google.common.collect.ArrayTable$ArrayMap:getKey(int),202,204,"/**
* Retrieves a mask value based on the provided index.
* @param index integer index to determine mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable$ArrayMap:put(java.lang.Object,java.lang.Object)",278,286,"/**
* Computes function mask by key and value, throwing exception on missing key.
* @param key unique identifier
* @param value associated value or null for default
* @return V object or null if value is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,columnKeySet,com.google.common.collect.ArrayTable:columnKeySet(),645,648,"/**
* Returns an immutable set of column keys with masks.
*/","* Returns an immutable set of the valid column keys, including those that are associated with
   * null values only.
   *
   * @return immutable set of column keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,rowKeySet,com.google.common.collect.ArrayTable:rowKeySet(),737,740,"/**
* Returns an immutable set of function masks.
*/","* Returns an immutable set of the valid row keys, including those that are associated with null
   * values only.
   *
   * @return immutable set of row keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,getKey,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:getKey(int),104,106,"/**
* Computes FUNC_MASK value based on input index.
* @param index index to compute mask from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,toString,com.google.common.collect.ExplicitOrdering:toString(),66,69,"/**
* Returns the explicit ordering function mask using rank map value.
* @return Explicit ordering function mask as a string.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:createKeySet(),1136,1139,"/**
* Returns an immutable set of function masks.
* @return Set of function mask identifiers
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,readResolve,com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:readResolve(),99,101,"/**
* Retrieves and returns the mask value from the internal map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,keySet,com.google.common.collect.ImmutableMultimap:keySet(),584,587,"/**
* Retrieves key set from underlying map.
*/","* Returns an immutable set of the distinct keys in this multimap, in the same order as they
   * appear in this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,columnKeySet,com.google.common.collect.ImmutableTable:columnKeySet(),343,346,"/**
* Returns a set of function masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:readResolve(),364,366,"/**
* Retrieves a mask object from the underlying map.
* @return Mask object associated with key 'm1' in the map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,contains,com.google.common.collect.Sets$PowerSet:contains(java.lang.Object),1750,1757,"/**
* Checks if object matches a specific mask.
* @param obj the object to check
* @return true if object is valid, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entryIterator,com.google.common.collect.ArrayTable$ArrayMap:entryIterator(),246,254,"/**
* Returns an iterator over the map entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,isEmpty,com.google.common.collect.ArrayTable$ArrayMap:isEmpty(),219,222,"/**
* Delegates to KeyIndex instance's implementation of m1.
* @return true if m1 returns true, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsKey,com.google.common.collect.ArrayTable$ArrayMap:containsKey(java.lang.Object),263,266,"/**
* Calls keyIndex's `m1` method to search for a key.
* @param key object to be searched (may be null)
* @return true if key found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsColumn,com.google.common.collect.ArrayTable:containsColumn(java.lang.Object),410,413,"/**
* Checks if a column key matches a mask.
* @param columnKey nullable object representing column key
* @return true if match found, false otherwise
*/","* Returns {@code true} if the provided column key is among the column keys provided when the
   * table was constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsRow,com.google.common.collect.ArrayTable:containsRow(java.lang.Object),419,422,"/**
* Checks if a given row key matches a valid index.
* @param rowKey unique identifier of a database record (may be null)
* @return true if the row key corresponds to an existing index, false otherwise
*/","* Returns {@code true} if the provided row key is among the row keys provided when the table was
   * constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsKey,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:containsKey(java.lang.Object),1141,1144,"/**
* Delegates to underlying map's m1 method.
* @param key object to look up (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,contains,com.google.common.collect.ImmutableMapKeySet:contains(java.lang.Object),58,61,"/**
* Applies mask to input object using mapping function m1.
* @param object input object to be masked (may be null)
* @return true if masking was successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,containsKey,com.google.common.collect.ImmutableMultimap:containsKey(java.lang.Object),563,566,"/**
* Calls map's equivalent method with the provided key.
* @param key the object to be used in the map operation
* @return true if the operation was successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellIterator,com.google.common.collect.ArrayTable:cellIterator(),549,557,"/**
* Returns an iterator over cells with a specific mask.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesIterator,com.google.common.collect.ArrayTable:valuesIterator(),791,799,"/**
* Returns an iterator over values with indices.
* @return Iterator of values, or null if underlying collection is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,asList,com.google.common.collect.EmptyContiguousSet:asList(),118,121,"/**
* Returns a list of mask values.
* @return List of C objects representing mask values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,get,com.google.common.collect.ImmutableListMultimap:get(java.lang.Object),446,451,"/**
* Returns an immutable list of values associated with the given key.
* If no value is found, returns a default empty list.
* @param key unique identifier
*/","* Returns an immutable list of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable list is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createValues,com.google.common.collect.RegularImmutableTable:createValues(),86,89,"/**
* Returns an immutable collection of function masks based on a predicate.
* @return Collection of V objects or empty set if predicate fails.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,column,com.google.common.collect.ImmutableTable:column(java.lang.Object),336,341,"/**
* Creates a mask map from the given column key.
* @param columnKey unique column identifier
*/","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code columnKey} is {@code null}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeTable:<init>(),280,282,"/**
* Initializes an empty TypeTable with an immutable map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry:<init>(java.lang.Object,java.lang.Object)",52,55,"/**
* Constructs an immutable entry with the specified key and value.
* @param key key of this entry
* @param value value of this entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,"com.google.common.collect.ImmutableMultimap$Builder:put(java.lang.Object,java.lang.Object)",238,248,"/**
* Adds a value to the collection for the given key.
* @param key unique key identifier
* @param value value to add
*/",Adds a key-value mapping to the built multimap.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$BigIntegerDomain:offset(java.math.BigInteger,long)",224,228,"/**
* Calculates mask value based on given distance.
* @param origin initial BigInteger value
* @param distance scalar value to apply in calculation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$LongDomain:offset(java.lang.Long,long)",147,155,"/**
* Calculates a result value by adding an origin and distance.
* @param origin initial value
* @param distance value to add
* @return sum of origin and distance or null if overflow occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain:offset(java.lang.Comparable,long)",263,274,"/**
* Computes position by applying a mask function 'm2' for the given distance.
* @param origin initial position
* @param distance number of iterations to apply m2
* @return final position or null if overflowed
*/","* Returns, conceptually, ""origin + distance"", or equivalently, the result of calling {@link
   * #next} on {@code origin} {@code distance} times.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliterator:trySplit(),376,399,"/**
* Creates an output spliterator by processing the input from a split.
* @return Output spliterator or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToDouble,"com.google.common.collect.CollectSpliterators:flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long)",275,290,"/**
* Creates a flat map spliterator for double values.
* @param fromSpliterator input spliterator
* @param function mapping function to apply to each element
* @param topCharacteristics characteristics of the resulting spliterator
* @param topSize estimated size of the resulting spliterator
*/","* Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToInt,"com.google.common.collect.CollectSpliterators:flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long)",231,246,"/**
* Creates a flat map spliterator for integers.
* @param fromSpliterator source spliterator
* @param function mapping function
* @param topCharacteristics characteristics of the resulting spliterator
* @param topSize estimated size of the resulting spliterator
*/","* Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToLong,"com.google.common.collect.CollectSpliterators:flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long)",253,268,"/**
* Creates a flat map spliterator for long values.
* @param fromSpliterator input spliterator
* @param function transformation function
* @param topCharacteristics desired spliterator characteristics
* @param topSize estimated size of output","* Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMap,"com.google.common.collect.CollectSpliterators:flatMap(java.util.Spliterator,java.util.function.Function,int,long)",208,224,"/**
* Creates a Spliterator for flat mapping elements.
* @param fromSpliterator original spliterator
* @param function transformation function
* @param topCharacteristics characteristics of the resulting spliterator
* @param topSize size estimate of the resulting spliterator
* @return new Spliterator instance
*/","* Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by
   * applying {@code function} to the elements of {@code fromSpliterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSet:<init>(java.util.Set,com.google.common.base.Predicate)",1282,1284,"/**
* Constructs a filtered set with elements that match the given predicate.
* @param unfiltered original set to filter
* @param predicate condition for inclusion in the filtered set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,containsAll,com.google.common.collect.Collections2$FilteredCollection:containsAll(java.util.Collection),164,167,"/**
* Checks if the provided collection matches a specific mask condition.
* @param collection Collection to be checked
* @return true if collection meets the mask criteria, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContainsAll,com.google.common.collect.ForwardingCollection:standardContainsAll(java.util.Collection),149,151,"/**
* Checks if provided collection intersects with internal mask.
* @param collection Collection to check against internal mask
*/","* A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override
   * {@link #contains}, you may wish to override {@link #containsAll} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,containsAll,com.google.common.collect.RegularContiguousSet:containsAll(java.util.Collection),185,188,"/**
* Checks if provided collection of targets intersects with this object's mask.
* @param targets Collection of target objects to check against the mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:containsAll(java.util.Collection),1015,1020,"/**
* Evaluates the mask function on the given collection.
* @param c Collection to apply the mask function to
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$OrderedPermutationIterator:calculateNextPermutation(),524,540,"/**
* Generates the next permutation in a sequence.
* @param none
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$PermutationIterator:calculateNextPermutation(),656,685,"/**
* Reorganizes the list by shifting elements based on a custom comparison function.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,contains,com.google.common.collect.CompactHashMap$EntrySetView:contains(java.lang.Object),827,838,"/**
* Evaluates the given object against the delegate or an entry's key and value.
* @param o Object to evaluate
* @return True if the object matches, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$KeySetView:remove(java.lang.Object),729,735,"/**
* Resolves object reference by delegating to the underlying map or using compact map fallback.
* @param o object to resolve
* @return true if resolved, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySetIterator,com.google.common.collect.CompactHashMap:keySetIterator(),768,780,"/**
* Returns an iterator over the given key values, 
* either from a cached map or by directly iterating.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySetIterator,com.google.common.collect.CompactHashMap:entrySetIterator(),874,885,"/**
* Returns an iterator over the entries in a map or creates a mock iterator if null.
* @return Iterator of map entries or mock iterator if original is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,size,com.google.common.collect.CompactHashMap:size(),953,957,"/**
* Recursively computes a value based on the delegate map.
* @return computed value or size if no delegate is present
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,valuesIterator,com.google.common.collect.CompactHashMap:valuesIterator(),1052,1064,"/**
* Returns an iterator over the values in a filtered map.
* @return Iterator of filtered values or null if no values exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$KeySetView:spliterator(),742,752,"/**
* Returns a spliterator for the collection.
* @return Spliterator instance or default spliterator if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$ValuesView:spliterator(),1013,1022,"/**
* Creates a spliterator for the underlying collection.
* @return non-null spliterator if collection exists; otherwise, spliterator over an empty array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,next,com.google.common.collect.CompactHashMap$Itr:next(),638,649,"/**
* Retrieves a masked value of type T based on current indexing.
* @return T the retrieved value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setHashTableMask,com.google.common.collect.CompactHashMap:setHashTableMask(int),311,315,"/**
* Updates metadata with compact hashing based on provided mask.
* @param mask bitwise mask value
*/",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setHashTableMask,com.google.common.collect.CompactHashSet:setHashTableMask(int),279,283,"/**
* Updates metadata with a compact hash based on the provided mask.
* @param mask integer representing the mask value
*/",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entry,com.google.common.collect.CompactHashMap:entry(int),1188,1190,"/**
* Returns an integer value from an array using index i.
* @param i index into array m1()
* @return integer value at specified index
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setEntry,"com.google.common.collect.CompactHashMap:setEntry(int,int)",1200,1202,"/**
* Sets the mask value at index 'i' to 'value'. 
* @param i index of the mask array
* @param value new mask value to be set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,key,com.google.common.collect.CompactHashMap:key(int),1178,1181,"/**
* Retrieves value from array m1() at specified index.
* @param i array index
* @return value of type K or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setKey,"com.google.common.collect.CompactHashMap:setKey(int,java.lang.Object)",1192,1194,"/**
* Sets a value in the first mask array at the specified index.
* @param i index to set (must be within bounds)
* @param key value to store
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeEntries,com.google.common.collect.CompactHashMap:resizeEntries(int),426,430,"/**
* Initializes internal arrays with specified capacity.
* @param newCapacity new size for entries, keys and values arrays
*/","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,value,com.google.common.collect.CompactHashMap:value(int),1183,1186,"/**
* Retrieves value from array using index.
* @param i index into the underlying array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,"com.google.common.collect.CompactHashMap:setValue(int,java.lang.Object)",1196,1198,"/**
* Assigns value to array element at index i.
* @param i array index
* @param value new value to assign
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySet,com.google.common.collect.CompactHashMap:keySet(),687,690,"/**
* Returns a set of keys based on cached or freshly computed result.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySet,com.google.common.collect.CompactHashMap:entrySet(),797,800,"/**
* Returns an unmodifiable set view of all entries in the map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,values,com.google.common.collect.CompactHashMap:values(),980,983,"/**
* Returns a collection of function masks.
* @return Collection of V objects or initializes valuesView if null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isUsingHashFloodingResistance,com.google.common.collect.CompactHashSet:isUsingHashFloodingResistance(),273,276,"/**
* Checks if function mask is enabled.
* @return true if enabled, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,iterator,com.google.common.collect.CompactHashSet:iterator(),539,588,"/**
* Returns an iterator over the elements of this compact set.
* @return Iterator over the elements, or a custom iterator with metadata management
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,size,com.google.common.collect.CompactHashSet:size(),615,619,"/**
* Returns the size of the set or its delegated set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,entry,com.google.common.collect.CompactHashSet:entry(int),744,746,"/**
* Returns the value at index 'i' from an array fetched by m1().
* @param i index into the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setEntry,"com.google.common.collect.CompactHashSet:setEntry(int,int)",752,754,"/**
 * Sets the value at index i in the array returned by m1().",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeEntries,com.google.common.collect.CompactHashSet:resizeEntries(int),378,381,"/**
* Updates internal arrays to accommodate specified capacity.
* @param newCapacity desired array size
*/","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,spliterator,com.google.common.collect.CompactHashSet:spliterator(),590,600,"/**
* Creates a spliterator for the iterable.
* @return Spliterator containing all elements or null if not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(),626,633,"/**
* Recursively fetches data from delegate or calculates it locally.
*@return Array of Objects or empty array if no data found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,element,com.google.common.collect.CompactHashSet:element(int),739,742,"/**
* Retrieves an element from the internal array m1() using the provided index.
* @param i index into the internal array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setElement,"com.google.common.collect.CompactHashSet:setElement(int,java.lang.Object)",748,750,"/**
 * Assigns value to array element at index 'i' using mask 1. 
 * @param i index in array m1()
 * @param value new value to be assigned
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,tableSize,com.google.common.collect.CompactHashing:tableSize(int),70,73,"/**
* Calculates function mask based on expected size.
* @param expectedSize estimated table size
*/","* Returns the power of 2 hashtable size required to hold the expected number of items or the
   * minimum hashtable size, whichever is greater.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,link,com.google.common.collect.CompactLinkedHashMap:link(int),310,312,"/**
* Returns a mask value from the m1() array based on input index.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setLink,"com.google.common.collect.CompactLinkedHashMap:setLink(int,long)",314,316,"/**
 * Sets a value at index 'i' in the array returned by m1().
 * @param i index to set
 * @param value new value to store
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getPredecessor,com.google.common.collect.CompactLinkedHashSet:getPredecessor(int),162,164,"/**
* Calculates function mask value from given entry index.
* @param entry entry index to calculate mask from
* @return calculated function mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setPredecessor,"com.google.common.collect.CompactLinkedHashSet:setPredecessor(int,int)",175,177,"/**
* Sets the predicate value in the mask at specified entry index.
* @param entry the index to update
* @param pred the new predicate value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getSuccessor,com.google.common.collect.CompactLinkedHashSet:getSuccessor(int),166,169,"/**
* Calculates the function mask value based on the given entry index.
* @param entry integer index into the m1() array
* @return function mask value minus one
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSuccessor,"com.google.common.collect.CompactLinkedHashSet:setSuccessor(int,int)",171,173,"/**
* Updates the successor mask at the specified entry index.
* @param entry index of the successor to update
* @param succ new successor value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(int,int)",242,242,"/**
* Performs bitwise comparison between two integers using a mask.
* @param left  first integer value
* @param right second integer value
* @return Comparison result (e.g. -1, 0, or 1)","* Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result
   * of this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,compare,"com.google.common.primitives.Ints$LexicographicalComparator:compare(int[],int[])",464,476,"/**
* Compares two integer arrays element-wise and returns the first non-equal value.
* If all elements match, returns the difference in array lengths.
* @param left first array to compare
* @param right second array to compare
* @return comparison result or length difference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(long,long)",248,248,"/**
* Compares two values using a custom comparison chain.
* @param left first value to compare
* @param right second value to compare
* @return Comparison result (mask)
*/","* Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of
   * this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,compare,"com.google.common.primitives.Longs$LexicographicalComparator:compare(long[],long[])",544,554,"/**
* Compares two long arrays element-wise and returns the first non-zero difference.
* @param left first array
* @param right second array
* @return first non-zero difference or length difference if all elements are equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareTrueFirst,"com.google.common.collect.ComparisonChain$1:compareTrueFirst(boolean,boolean)",287,287,"/**
* Compares two boolean values using a chain of comparisons.
* @param left first boolean value to compare
* @param right second boolean value to compare
*/","* Compares two {@code boolean} values, considering {@code true} to be less than {@code false},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()})
   * </pre>
   *
   * @since 12.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareFalseFirst,"com.google.common.collect.ComparisonChain$1:compareFalseFirst(boolean,boolean)",301,301,"/**
 * Performs comparison between two boolean values and returns a chain of comparisons.
 * @param left left-hand value to compare
 * @param right right-hand value to compare
 */","* Compares two {@code boolean} values, considering {@code false} to be less than {@code true},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()})
   * </pre>
   *
   * @since 12.0 (present as {@code compare} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,compare,"com.google.common.primitives.Booleans$LexicographicalComparator:compare(boolean[],boolean[])",322,332,"/**
* Compares two boolean arrays element-wise and returns the first differing index.
* If all elements are equal, returns the difference in array lengths.
* @param left left boolean array
* @param right right boolean array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,next,com.google.common.collect.ConcurrentHashMultiset$3:next(),54,59,"/**
* Calls m1() to fetch and returns its result's m2() value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,readObject,com.google.common.collect.ConcurrentHashMultiset:readObject(java.io.ObjectInputStream),602,609,"/**
* Deserializes and initializes count map from stream.
* @throws IOException I/O error during deserialization
* @throws ClassNotFoundException Class not found exception
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,leastValueAbove,com.google.common.collect.Cut$BelowAll:leastValueAbove(com.google.common.collect.DiscreteDomain),177,180,"/**
* Returns the minimum value in the given discrete domain.
* @param domain DiscreteDomain containing comparable values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,greatestValueBelow,com.google.common.collect.Cut$AboveAll:greatestValueBelow(com.google.common.collect.DiscreteDomain),282,285,"/**
* Returns the first element of the given discrete domain.
* @param domain DiscreteDomain instance to extract from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$AboveValue:isLessThan(java.lang.Comparable),399,402,"/**
* Checks if input value falls outside a specified range.
* @param value input value to check
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$BelowValue:isLessThan(java.lang.Comparable),318,321,"/**
* Checks if a given numeric value is within a specific range.
* @param value number to check
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equalsOrThrow,"com.google.common.collect.RegularContiguousSet:equalsOrThrow(java.lang.Comparable,java.lang.Comparable)",115,117,"/**
* Checks if two comparable values are equal.
* @param left first value to compare
* @param right second value to compare (can be null)
* @return true if values are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,<init>,com.google.common.collect.ContiguousSet:<init>(com.google.common.collect.DiscreteDomain),147,150,"/**
 * Constructs a contiguous set over the specified discrete domain.
 * @param domain DiscreteDomain instance to define the set's scope
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,<init>,"com.google.common.collect.RegularImmutableSortedSet:<init>(com.google.common.collect.ImmutableList,java.util.Comparator)",49,52,"/**
* Constructs an immutable sorted set from a list of elements using a custom comparator.
* @param elements non-null list of elements to include in the set
* @param comparator non-null comparator for sorting and comparing elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveAll:<init>(),230,233,"/**
* Initializes superclass with empty string parameter.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveValue:<init>(java.lang.Comparable),395,397,"/**
* Initializes a new instance of the class with the given API endpoint.
* @param endpoint API endpoint URL
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowAll:<init>(),125,133,"/**
* Initializes private constructor to prevent instantiation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowValue:<init>(java.lang.Comparable),314,316,"/**
* Initializes the endpoint with a below value check.
* @param endpoint API endpoint to initialize
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$AboveValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",414,424,"/**
* Generates a cut based on the bound type and discrete domain.
* @param boundType OPEN or CLOSED bound type
* @param domain DiscreteDomain object for generating cuts
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasLowerBound,com.google.common.collect.Range:hasLowerBound(),338,340,"/**
* Checks if the lower bound is not equal to m1. 
* @return true if lower bound is not m1, false otherwise
*/",Returns {@code true} if this range has a lower endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$AboveValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",426,436,"/**
* Computes a cut mask for the given discrete domain and bound type.
* @param boundType OPEN or CLOSED bound type
* @return Cut object based on the bound type and domain
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,compareTo,com.google.common.collect.Cut:compareTo(com.google.common.collect.Cut),71,85,"/**
* Computes a mask value based on the comparison with two cut values.
* @param that Cut object to compare with
* @return integer mask value indicating relationship between this and that cut
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasUpperBound,com.google.common.collect.Range:hasUpperBound(),364,366,"/**
* Checks if upper bound is set to m1 (minimum value).",Returns {@code true} if this range has an upper endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$AboveValue:canonical(com.google.common.collect.DiscreteDomain),458,462,"/**
* Computes and returns a Cut object based on the given DiscreteDomain.
* @param domain discrete domain to operate on
* @return Cut object or null if computation fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,<init>,com.google.common.collect.DescendingImmutableSortedMultiset:<init>(com.google.common.collect.ImmutableSortedMultiset),31,33,"/**
* Creates a new descending immutable sorted multiset by copying the given forward multiset.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,"com.google.common.collect.RegularImmutableSortedMultiset:<init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)",54,60,"/**
* Constructs a regular immutable sorted multiset from the given set and cumulative counts.
* @param elementSet sorted set of elements
* @param cumulativeCounts array of cumulative count values
* @param offset starting index in the cumulative counts array
* @param length number of elements in this multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,elementSet,com.google.common.collect.DescendingImmutableSortedMultiset:elementSet(),55,58,"/**
* Calls m1 on forward and chains result with m2.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueComparator,com.google.common.collect.ImmutableSetMultimap:valueComparator(),673,677,"/**
* Returns a Comparator instance based on the mask type.
* @return Comparator instance or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,comparator,com.google.common.collect.ImmutableSortedMultiset:comparator(),328,331,"/**
* Returns a comparator instance by delegating to another comparator.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,indexOf,com.google.common.collect.DescendingImmutableSortedSet:indexOf(java.lang.Object),106,114,"/**
* Calculates an index based on the provided target object.
* @param target Object to calculate index for
* @return Index value or -1 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,entrySet,com.google.common.collect.DescendingMultiset:entrySet(),116,120,"/**
* Returns a set of entries based on function mask.
* @return Set of entries or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,<init>,com.google.common.collect.DiscreteDomain:<init>(),250,252,"/**
* Initializes DiscreteDomain with default settings.
* @param useDefault whether to use default domain properties
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,tailSetImpl,"com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Object,boolean)",81,84,"/**
* Returns the current set as a contiguous set.
* @param fromElement lower bound element (inclusive if fromInclusive)
* @param fromInclusive whether to include the lower bound in the range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,subSetImpl,"com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",75,79,"/**
* Returns this set instance itself as a contiguous set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,headSetImpl,"com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Object,boolean)",70,73,"/**
* Returns this ContiguousSet instance as is.
* @param toElement element to consider (not used)
* @param inclusive whether to include the element (not used)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,writeObject,com.google.common.collect.EnumBiMap:writeObject(java.io.ObjectOutputStream),142,148,"/**
* Serializes the object to the given ObjectOutputStream.
* @throws IOException if serialization fails
*/","* @serialData the key class, value class, number of entries, first key, first value, second key,
   *     second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,writeObject,com.google.common.collect.EnumHashBiMap:writeObject(java.io.ObjectOutputStream),117,122,"/**
* Serializes object state to output stream.
* @throws IOException if serialization fails
*/","* @serialData the key class, number of entries, first key, first value, second key, second value,
   *     and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeObject,com.google.common.collect.HashBiMap:writeObject(java.io.ObjectOutputStream),783,788,"/**
* Serializes object state to output stream using custom serialization methods. 
* @throws IOException if serialization fails */","* @serialData the number of entries, first key, first value, second key, second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,next,com.google.common.collect.EnumMultiset$Itr:next(),230,239,"/**
* Fetches and returns a value of type T, incrementing the internal index.
* @throws NoSuchElementException if m1() returns false
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,checkIsE,com.google.common.collect.EnumMultiset:checkIsE(java.lang.Object),113,118,"/**
* Validates and casts object to expected type.
* @param element object to be validated
*/","* Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws
   * either a NullPointerException or a ClassCastException as appropriate.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,count,com.google.common.collect.EnumMultiset:count(java.lang.Object),130,138,"/**
* Returns a bitmask value based on the given enum element.
* @param element Enum object to process
* @return Bitmask integer or 0 if invalid input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,writeObject,com.google.common.collect.EnumMultiset:writeObject(java.io.ObjectOutputStream),298,303,"/**
* Serializes this object to the given ObjectOutputStream.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,writeObject,com.google.common.collect.HashMultiset:writeObject(java.io.ObjectOutputStream),80,85,"/**
* Serializes this object to the given output stream.
* @throws IOException if serialization fails
*/","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,writeObject,com.google.common.collect.LinkedHashMultiset:writeObject(java.io.ObjectOutputStream),88,93,"/**
* Serializes this object using ObjectOutputStream.
* @param stream OutputStream to write serialization data to
*/","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,writeObject,com.google.common.collect.TreeMultiset:writeObject(java.io.ObjectOutputStream),1068,1074,"/**
* Serializes this object to the given ObjectOutputStream.
*/","* @serialData the comparator, the number of distinct elements, the first element, its count, the
   *     second element, its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,rank,com.google.common.collect.ExplicitOrdering:rank(java.lang.Object),44,50,"/**
* Retrieves the functional mask from a given value.
* @param value input value to determine functional mask
* @return integer functional mask or throws exception on failure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,clear,com.google.common.collect.FilteredEntryMultimap$AsMap:clear(),181,184,"/**
* Calls the overridden method on the wrapped multimap. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,<init>,com.google.common.collect.ImmutableRangeMap$Builder:<init>(),114,116,"/**
* Initializes a new instance of the Builder with an empty list of entries.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet$Builder:<init>(),760,762,"/**
* Initializes builder with an empty list of ranges.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,<init>,com.google.common.collect.ImmutableTable$Builder:<init>(),200,200,"/**
* Constructor to initialize the builder instance.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableTable#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$1:<init>(),73,73,"/**
* Private constructor to prevent instantiation of utility class. 
* Ensures this class cannot be instantiated directly. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$1:<init>(),47,47,"/**
* Private constructor to prevent instantiation of utility class.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeAll,com.google.common.collect.FilteredEntryMultimap:removeAll(java.lang.Object),106,109,"/**
* Retrieves collection of values based on optional key.
* @param key nullable object to filter by
* @return Collection of V objects or empty if no match
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,unfiltered,com.google.common.collect.FilteredKeyListMultimap:unfiltered(),36,39,"/**
* Delegates to superclass to fetch multimap data.
* @return Multimap of type K and V or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,delegate,com.google.common.collect.ForwardingList:delegate(),60,61,"/**
* Returns a list of elements that match the functional mask.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,removeAll,com.google.common.collect.FilteredKeyMultimap:removeAll(java.lang.Object),79,82,"/**
* Determines and returns collection of type V based on filtering criteria.
* @param key nullable object used for filtering
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(java.lang.Object[]),160,162,"/**
* Wraps an array into a fluent iterable.
* @param elements input array of elements
*/","* Returns a fluent iterable containing {@code elements} in the specified order.
   *
   * <p>The returned iterable is an unmodifiable view of the input array.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[])
   * Stream.of(T...)}.
   *
   * @since 20.0 (since 18.0 as an overload of {@code of})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,of,com.google.common.collect.FluentIterable:of(),311,314,"/**
* Creates an empty FluentIterable instance. 
*/","* Returns a fluent iterable containing no elements.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,isEmpty,com.google.common.collect.FluentIterable:isEmpty(),605,607,"/**
* Negates the result of m3() by inverting m2()'s output from m1().
*/","* Determines whether this fluent iterable is empty.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,append,com.google.common.collect.FluentIterable:append(java.lang.Iterable),392,394,"/**
* Combines two iterables into a single fluent iterable.
* @param other The second iterable to combine
*/","* Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,
   * followed by those of {@code other}. The iterators are not polled until necessary.
   *
   * <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding
   * {@code Iterator} supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable)",429,432,"/**
* Merges two iterable collections into one.
* @param a first collection
* @param b second collection
*/","* Combines two iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}. The source
   * iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.concat(a, b)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",445,448,"/**
* Combines three iterables into a single iterable.
* @param a first iterable
* @param b second iterable
* @param c third iterable
* @return a new iterable containing all elements from the input iterables
*/","* Combines three iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",462,468,"/**
* Concatenates four iterables into a single iterable.
* @param a first iterable to concatenate
* @param b second iterable to concatenate
* @param c third iterable to concatenate
* @param d fourth iterable to concatenate
*/","* Combines four iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}, followed by the elements in {@code d}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c, d)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,stream,com.google.common.collect.FluentIterable:stream(),850,852,"/**
* Returns a stream of elements processed by m1().","* Returns a stream of this fluent iterable's contents (similar to calling {@link
   * Collection#stream} on a collection).
   *
   * <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not
   * going through {@code FluentIterable} at all), the more performant and idiomatic your code will
   * be. This method is a transitional aid, to be used only when really necessary.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.collect.ForwardingBlockingDeque:remainingCapacity(),61,64,"/**
* Calls m1 and delegates to its m2 method.
* @return result of m1.m2()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putFirst,com.google.common.collect.ForwardingBlockingDeque:putFirst(java.lang.Object),66,69,"/**
* Calls m2 on an instance retrieved from m1.
* @param e element to pass to m2
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putLast,com.google.common.collect.ForwardingBlockingDeque:putLast(java.lang.Object),71,74,"/**
* Calls m2 on the result of m1.
* @param e object to pass to m2
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerFirst,"com.google.common.collect.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",76,79,"/**
* Delegates to inner model's m2 method.
* @param e input object
* @param timeout time limit in specified unit
* @param unit time unit (e.g. seconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerLast,"com.google.common.collect.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",81,84,"/**
* Delegates to underlying service instance to perform operation.
* @param e the object to operate on
* @param timeout maximum time to wait for result
* @param unit unit of time for timeout
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeFirst,com.google.common.collect.ForwardingBlockingDeque:takeFirst(),86,89,"/**
* Calls nested method m2() on result of m1().
* @throws InterruptedException if interrupted while executing m1()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeLast,com.google.common.collect.ForwardingBlockingDeque:takeLast(),91,94,"/**
* Calls m1() to retrieve an instance of type E and then invokes its m2() method. 
* @throws InterruptedException if interrupted while waiting for m1() completion
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollFirst,"com.google.common.collect.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",96,99,"/**
* Calls m2() on returned UserProfile object from m1().
* @param timeout time to wait before operation times out
* @param unit unit of time for timeout value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollLast,"com.google.common.collect.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",101,104,"/**
* Invokes second-level operation with specified timeout and time unit.
* @param timeout operation timeout value
* @param unit time unit for the timeout (e.g. seconds, milliseconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,put,com.google.common.collect.ForwardingBlockingDeque:put(java.lang.Object),106,109,"/**
 * Calls m2() on an external object fetched by m1().
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offer,"com.google.common.collect.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",111,114,"/**
* Delegates execution of method m2 to an instance of m1.
* @param e object of type E
* @param timeout time unit for operation
* @param unit time unit for timeout
* @return result of m2 execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,take,com.google.common.collect.ForwardingBlockingDeque:take(),116,119,"/**
* Calls m1 to retrieve an intermediate result and then calls its m2 method.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,poll,"com.google.common.collect.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",121,124,"/**
* Calls m2() on the result of m1(), with specified timeout.
* @param timeout maximum wait time in milliseconds
* @param unit unit of time for timeout (e.g. TimeUnit.MILLISECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection),126,129,"/**
* Calls m1() to compute and returns its result for the given collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,"com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",131,134,"/**
* Calls internal implementation of m2 with collection and max elements. 
* @param c Collection to process
* @param maxElements Maximum number of elements to consider
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,frequency,"com.google.common.collect.Iterators:frequency(java.util.Iterator,java.lang.Object)",381,389,"/**
* Counts occurrences of specified element in an iterable.
* @param iterator iterable to search
* @param element target object to find
* @return number of matching elements or -1 if not found
*/","* Returns the number of elements in the specified iterator that equal the specified object. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @see Collections#frequency",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKeyImpl,"com.google.common.collect.Maps:containsKeyImpl(java.util.Map,java.lang.Object)",3833,3835,"/**
* Checks if a given key is present in the provided map.
* @param map input map to search
* @param key object to search for
* @return true if found, false otherwise
*/",An admittedly inefficient implementation of {@link Map#containsKey}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsValueImpl,"com.google.common.collect.Maps:containsValueImpl(java.util.Map,java.lang.Object)",3838,3840,"/**
* Checks if a key-value pair exists in the given map.
* @param map input map
* @param value target value to search for
* @return true if pair is found, false otherwise
*/",An implementation of {@link Map#containsValue}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAddAll,"com.google.common.collect.ForwardingList:standardAddAll(int,java.lang.Iterable)",148,150,"/**
* Checks mask status at specified index.
* @param index position to check
* @param elements iterable of elements
*/","* A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code
   * add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may
   * wish to override {@link #addAll(int, Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardSubList,"com.google.common.collect.ForwardingList:standardSubList(int,int)",214,216,"/**
* Returns a sublist of elements within specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of E objects or empty list if range invalid
*/","* A sensible default implementation of {@link #subList(int, int)}. If you override any other
   * methods, you may wish to override {@link #subList(int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardHashCode,com.google.common.collect.ForwardingList:standardHashCode(),236,238,"/**
* Calculates function mask value using internal list.
* @return integer function mask value
*/","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,get,com.google.common.collect.ForwardingListMultimap:get(java.lang.Object),46,49,"/**
 * Calls m1() to retrieve data and then delegates to its m2() method with the provided key.
 * @param key unique identifier for data retrieval
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,replaceValues,"com.google.common.collect.ForwardingListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,61,"/**
* Delegates to m1() to perform operation m2 with given key and values. 
* @param key unique identifier
* @param values collection of values associated with the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardPutAll,com.google.common.collect.ForwardingMap:standardPutAll(java.util.Map),146,148,"/**
* Merges input map into this map using specified merge strategy.
* @param map Map to be merged
*/","* A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you
   * override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward
   * to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardEquals,com.google.common.collect.ForwardingMap:standardEquals(java.lang.Object),275,277,"/**
* Checks if an object matches the current functional mask.
* @param object object to be checked
* @return true if object is a match, false otherwise
*/","* A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,equals,com.google.common.collect.ImmutableMap:equals(java.lang.Object),1205,1208,"/**
* Checks if an object matches the function mask.
* @param object the object to check
* @return true if the object matches, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,iterator,com.google.common.collect.ForwardingMultiset$StandardElementSet:iterator(),250,253,"/**
* Returns an iterator over elements in the current set.
* @return Iterator to traverse elements of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,replaceAll,com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:replaceAll(java.util.function.BiFunction),286,289,"/**
* Invokes a transformation function on each value in the map.
* @param function BiFunction to apply to key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerEntry,com.google.common.collect.ForwardingNavigableMap:lowerEntry(java.lang.Object),66,69,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key unique identifier used in m2() call on m1()'s result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerKey,com.google.common.collect.ForwardingNavigableMap:lowerKey(java.lang.Object),80,83,"/**
* Calls m1() and delegates to its m2(K) method with given key.
* @param key unique identifier of type K
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorEntry,com.google.common.collect.ForwardingNavigableMap:floorEntry(java.lang.Object),94,97,"/**
* Calls secondary operation on primary result with given key.
* @param key key to pass to secondary operation
* @return Entry object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorKey,com.google.common.collect.ForwardingNavigableMap:floorKey(java.lang.Object),108,111,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key unique identifier or null for default behavior
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingEntry,com.google.common.collect.ForwardingNavigableMap:ceilingEntry(java.lang.Object),122,125,"/**
* Calls m1() and passes its result to m2(key).
* @param key unique identifier of interest
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingKey,com.google.common.collect.ForwardingNavigableMap:ceilingKey(java.lang.Object),136,139,"/**
* Calls m1() to perform secondary operation on input key.
* @param key object to be processed by m1()
* @return result of m1()'s secondary operation, or null if unavailable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherEntry,com.google.common.collect.ForwardingNavigableMap:higherEntry(java.lang.Object),150,153,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key unique identifier for the entry
* @return Entry object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherKey,com.google.common.collect.ForwardingNavigableMap:higherKey(java.lang.Object),164,167,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key unique identifier or null for default value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,firstEntry,com.google.common.collect.ForwardingNavigableMap:firstEntry(),178,181,"/**
* Calls m1() to retrieve an entry and then delegates to its m2() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lastEntry,com.google.common.collect.ForwardingNavigableMap:lastEntry(),206,209,"/**
* Calls m1() and delegates to its m2() method.
* @return result of m1().m2(), or null if m1() returns null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollFirstEntry,com.google.common.collect.ForwardingNavigableMap:pollFirstEntry(),233,236,"/**
* Calls m1(), then invokes m2() on its result.
* @return null if m1() returns null, otherwise the result of m2()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollLastEntry,com.google.common.collect.ForwardingNavigableMap:pollLastEntry(),247,250,"/**
* Calls m2 on the result of m1.
* @return Entry object or null if m1 returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingMap,com.google.common.collect.ForwardingNavigableMap:descendingMap(),261,264,"/**
* Delegates to m1() and returns its result as a navigable map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,navigableKeySet,com.google.common.collect.ForwardingNavigableMap:navigableKeySet(),327,330,"/**
 * Delegates call to m1(), which returns a NavigableSet of K. 
 * @return a NavigableSet containing elements of type K.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingKeySet,com.google.common.collect.ForwardingNavigableMap:descendingKeySet(),347,350,"/**
* Calls m2 on the result of m1 to retrieve a navigable set.
* @return a NavigableSet of type K or null if m1 returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,subMap,"com.google.common.collect.ForwardingNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",374,381,"/**
* Delegates key range query to underlying map.
* @param fromKey start of key range (inclusive)
* @param fromInclusive whether start is inclusive
* @param toKey end of key range (inclusive)
* @param toInclusive whether end is inclusive
* @return NavigableMap containing matching entries",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,headMap,"com.google.common.collect.ForwardingNavigableMap:headMap(java.lang.Object,boolean)",383,386,"/**
* Calls m1() and delegates to its m2() method.
* @param toKey key to find in the map
* @param inclusive whether to include the end value
* @return a NavigableMap containing keys from m1()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,tailMap,"com.google.common.collect.ForwardingNavigableMap:tailMap(java.lang.Object,boolean)",388,391,"/**
* Calls m1() and delegates to its m2() method with provided parameters.
* @param fromKey starting key for the map segment
* @param inclusive whether to include the ending key in the result 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,elementSet,com.google.common.collect.ForwardingSortedMultiset:elementSet(),54,57,"/**
* Calls m2() on result of m1(), returning resulting navigable set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,comparator,com.google.common.collect.ForwardingSortedMultiset:comparator(),79,82,"/**
* Returns a comparator instance by delegating to another comparator.
* @return Comparator object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,descendingMultiset,com.google.common.collect.ForwardingSortedMultiset:descendingMultiset(),84,87,"/**
* Calls m1() to get a SortedMultiset and then calls its m2() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,firstEntry,com.google.common.collect.ForwardingSortedMultiset:firstEntry(),111,114,"/**
* Calls m1() to retrieve and then delegates to its m2() method.
* @return result of the delegated call, or null if m1() returns null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,lastEntry,com.google.common.collect.ForwardingSortedMultiset:lastEntry(),131,134,"/**
* Calls m1 to fetch an Entry, then calls its m2 method.
* @return result of calling m2 on the fetched Entry or null if it is null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:pollFirstEntry(),152,155,"/**
* Calls and returns result of m2() on the object returned by m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollLastEntry,com.google.common.collect.ForwardingSortedMultiset:pollLastEntry(),174,177,"/**
* Calls m1() to fetch an intermediate result and then calls its m2() method.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,headMultiset,"com.google.common.collect.ForwardingSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",197,200,"/**
* Delegates to m1() and calls its m2() method with provided parameters.
* @param upperBound the upper bound for the multiset
* @param boundType type of bounds for the multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,subMultiset,"com.google.common.collect.ForwardingSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",202,209,"/**
* Calls the internal {@link #m1()} method to perform a bounded multiset operation.
* @param lowerBound parameter for lower bound of the range
* @param lowerBoundType type of lower bound (e.g. inclusive, exclusive)
* @param upperBound parameter for upper bound of the range
* @param upperBoundType type of upper bound (e.g. inclusive, exclusive)
* @return a new SortedMultiset instance with the specified bounds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,tailMultiset,"com.google.common.collect.ForwardingSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",227,230,"/**
* Calls m1() and delegates to its m2() method with given lowerBound and boundType. 
* @param lowerBound lower bound for the multiset
* @param boundType type of bounds for the multiset 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,get,com.google.common.collect.ForwardingSortedSetMultimap:get(java.lang.Object),47,50,"/**
* Calls m1() to retrieve related data and then applies m2() on it.
* @param key arbitrary key value
* @return Set of values or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,removeAll,com.google.common.collect.ForwardingSortedSetMultimap:removeAll(java.lang.Object),52,55,"/**
* Calls m2() on the result of m1(), passing through the provided key.
* @param key object to pass to m2()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,valueComparator,com.google.common.collect.ForwardingSortedSetMultimap:valueComparator(),62,65,"/**
* Returns a comparator instance based on the result of m1().
* @return Comparator object or null if m1() returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,delegate,com.google.common.collect.ForwardingSetMultimap:delegate(),43,44,"/**
* Returns a multimap representing function masks.
* @return SetMultimap of K to V values.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSet,com.google.common.collect.Tables$UnmodifiableTable:cellSet(),554,557,"/**
* Returns a set of cells from super class's implementation.
* @return Set of Cell objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$UnmodifiableTable:column(java.lang.Object),564,567,"/**
* Returns a map of values using column key.
* @param columnKey unique identifier or null for default behavior
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnKeySet,com.google.common.collect.Tables$UnmodifiableTable:columnKeySet(),569,572,"/**
* Delegates to superclass's implementation and returns result as a set.
* @return Set of C objects from superclass's m1() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$UnmodifiableTable:row(java.lang.Object),597,600,"/**
* Returns a map with transformed values from super class's m1 method.
* @param rowKey unique identifier for transformation
* @return Transformed Map object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableTable:rowKeySet(),602,605,"/**
* Delegates to superclass's m1(), then maps results with m2().",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,values,com.google.common.collect.Tables$UnmodifiableTable:values(),612,615,"/**
 * Delegates to superclass method and returns result as a collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooLow,com.google.common.collect.GeneralRange:tooLow(java.lang.Object),166,174,"/**
* Checks if input value falls within functional mask.
* @param t input value to check
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooHigh,com.google.common.collect.GeneralRange:tooHigh(java.lang.Object),176,184,"/**
* Evaluates whether the input object matches a certain condition.
* @param t input object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,equals,com.google.common.collect.GeneralRange:equals(java.lang.Object),241,254,"/**
* Compares this object with the given GeneralRange instance.
* @param obj GeneralRange object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,hashCode,com.google.common.collect.GeneralRange:hashCode(),256,264,"/**
* Computes and returns a function mask using M5 algorithm.
* @return unique integer mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,<init>,"com.google.common.collect.HashBasedTable:<init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory)",102,104,"/**
* Initializes a HashBasedTable instance with a backing map and data factory.
* @param backingMap underlying map of key-value pairs
* @param factory factory to create table cells (values)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,<init>,"com.google.common.collect.StandardRowSortedTable:<init>(java.util.SortedMap,com.google.common.base.Supplier)",59,62,"/**
* Creates a standard row-sorted table instance.
* @param backingMap map of data to be sorted
* @param factory supplier for default cell map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,newCustomTable,"com.google.common.collect.Tables:newCustomTable(java.util.Map,com.google.common.base.Supplier)",372,378,"/**
* Creates a table from the given map and factory.
* @param backingMap data source map
* @param factory supplier for table columns
* @return Table instance or null if failed to create
*/","* Creates a table that uses the specified backing map and factory. It can generate a table based
   * on arbitrary {@link Map} classes.
   *
   * <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration
   * order. However, the table's {@code row()} method returns instances of a different class than
   * {@code factory.get()} does.
   *
   * <p>Call this method only when the simpler factory methods in classes like {@link
   * HashBasedTable} and {@link TreeBasedTable} won't suffice.
   *
   * <p>The views returned by the {@code Table} methods {@link Table#column}, {@link
   * Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code
   * remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and
   * values are not supported.
   *
   * <p>Lookups by row key are often faster than lookups by column key, because the data is stored
   * in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still
   * runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes
   * longer, since an iteration across all row keys occurs.
   *
   * <p>Note that this implementation is not synchronized. If multiple threads access this table
   * concurrently and one of the threads modifies the table, it must be synchronized externally.
   *
   * <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by
   * {@code factory}, and the table contents are all serializable.
   *
   * <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned
   * by {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param backingMap place to store the mapping from each row key to its corresponding column key
   *     / value map
   * @param factory supplier of new, empty maps that will each hold all column key / value mappings
   *     for a given row key
   * @throws IllegalArgumentException if {@code backingMap} is not empty
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnMap,com.google.common.collect.HashBasedTable:columnMap(),875,879,"/**
* Returns a map of column-masked data or initializes a new one if not set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnKeySet,com.google.common.collect.HashBasedTable:columnKeySet(),680,684,"/**
* Initializes or returns an existing set of functional mask column keys.
* @return Set of C objects representing the functional mask column keys
*/","* {@inheritDoc}
   *
   * <p>The returned set has an iterator that does not support {@code remove()}.
   *
   * <p>The set's iterator traverses the columns of the first row, the columns of the second row,
   * etc., skipping any columns that have appeared previously.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:size(),924,927,"/**
* Calls m1() to retrieve an instance and delegates to its m2() method.
* @return result of m1().m2()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,keySet,com.google.common.collect.StandardTable$ColumnMap:keySet(),907,910,"/**
* Returns a set of function masks.
* @return Set of C objects representing function masks.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,column,com.google.common.collect.HashBasedTable:column(java.lang.Object),454,457,"/**
* Creates a column map with the given key.
* @param columnKey unique column identifier
*/","* {@inheritDoc}
   *
   * <p>The returned map's views have iterators that don't support {@code remove()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,row,com.google.common.collect.HashBasedTable:row(java.lang.Object),312,315,"/**
* Returns a map representation of the given row key.
* @param rowKey unique identifier of the row
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.HashBasedTable:clear(),135,138,"/**
 * Calls the corresponding method on the backing map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.HashBasedTable:size(),124,131,"/**
* Calculates total size by summing sizes of all maps in the collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.HashBasedTable:isEmpty(),119,122,"/**
* Calls underlying backing map's m1() method and returns its result.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,clear,com.google.common.collect.HashBiMap$Inverse:clear(),609,612,"/**
 * Calls method m2 on an instance of UserProfile retrieved from m1. 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap$Inverse:containsKey(java.lang.Object),614,617,"/**
* Checks if input value matches expected pattern using nested function calls.
* @param value input object to check (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,inverse,com.google.common.collect.HashBiMap$Inverse:inverse(),648,651,"/**
* Returns a bimap containing function masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap$Inverse:values(),686,689,"/**
* Returns a set of key masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeReplace,com.google.common.collect.HashBiMap$Inverse:writeReplace(),755,757,"/**
* Returns an inverse serialized form of this hash bi-map.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readResolve,com.google.common.collect.HashBiMap$InverseSerializedForm:readResolve(),775,777,"/**
* Returns a mask object from the provided bimap instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap:values(),512,515,"/**
* Returns a set of masks based on internal data.
* @return Set of mask values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,next,com.google.common.collect.HashBiMap$Itr:next(),447,459,"/**
* Retrieves a functional mask for the current iteration.
* @return T object representing the functional mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,init,com.google.common.collect.HashBiMap:init(int),139,149,"/**
* Initializes hash tables and related data structures.
* @param expectedSize estimated size of the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,rehashIfNecessary,com.google.common.collect.HashBiMap:rehashIfNecessary(),380,397,"/**
* Resizes and rehashes the hash table to double its capacity.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMap,"com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream)",73,77,"/**
* Reads a Map from an ObjectInputStream.
* @param map the map to populate
* @param stream the input stream containing the serialized map data
*/","* Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}
   * for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.HashBiMap:entrySet(),3758,3781,"/**
* Returns a set of key-value entries for this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,readObject,com.google.common.collect.HashMultiset:readObject(java.io.ObjectInputStream),87,94,"/**
* Deserializes function mask data from the given stream.
* @param stream ObjectInputStream instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,readObject,com.google.common.collect.LinkedHashMultiset:readObject(java.io.ObjectInputStream),95,102,"/**
* Deserializes function mask data from the given input stream.
* @param stream Input stream containing serialized data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultiset,"com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)",116,120,"/**
* Reads distinct element count from input stream and initializes Multiset.
* @param multiset Multiset instance to initialize
* @param stream ObjectInputStream for reading data
*/","* Populates a multiset by reading an input stream, as part of deserialization. See {@link
   * #writeMultiset} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Hashing.java,smearedHash,com.google.common.collect.Hashing:smearedHash(java.lang.Object),55,57,"/**
* Returns integer mask value from input object.
* @param o input object (null returns 0)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,rebuildHashTable,"com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:rebuildHashTable(int,java.lang.Object[],int)",828,844,"/**
* Creates a hash table with the given size, populating it with elements
* from the provided array up to the specified index.
* @param newTableSize desired table size
* @param elements array of objects to populate the table
* @param n maximum index in elements to use
* @return populated hash table or null if not created
*/",Builds a new open-addressed hash table from the first n objects in elements.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,writeReplace,com.google.common.collect.ImmutableAsList:writeReplace(),84,89,"/**
* Returns serialized form of mask value.
* @return SerializedForm object representing mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(int),347,349,"/**
* Initializes builder with specified container size. 
* @param size initial capacity of the container.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$Builder:<init>(),426,428,"/**
* Initializes builder with default initial capacity.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMap#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,makeBuilder,com.google.common.collect.ImmutableMap$SerializedForm:makeBuilder(int),1299,1301,"/**
* Creates a new Builder instance with specified capacity.
* @param size initial capacity of the builder
*/",* Returns a builder that builds the unserialized type. Subclasses should override this method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableMap:builderWithExpectedSize(int),368,371,"/**
* Creates a Builder instance with specified capacity.
* @param expectedSize initial size of the builder's data structure
*/","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,inverse,com.google.common.collect.RegularImmutableBiMap:inverse(),195,202,"/**
* Returns a bi-map of V to K based on the inverse mapping.
* @return ImmutableBiMap or newly created one if original is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,valuePredicateOnEntries,com.google.common.collect.Maps:valuePredicateOnEntries(com.google.common.base.Predicate),2400,2403,"/**
* Creates a predicate that filters entries based on a given value predicate and a map of default values.
* @param valuePredicate predicate to filter entry values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,<init>,"com.google.common.collect.JdkBackedImmutableBiMap:<init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map)",59,64,"/**
* Initializes a JdkBackedImmutableBiMap from pre-populated entries and delegate maps.
* @param entries immutable list of key-value pairs
* @param forwardDelegate map for forward lookup (key to value)
* @param backwardDelegate map for backward lookup (value to key)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,<init>,"com.google.common.collect.RegularImmutableBiMap:<init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)",116,127,"/**
* Constructs a RegularImmutableBiMap from provided tables and entries.
* @param keyTable array of ImmutableMapEntry key-value pairs
* @param valueTable array of ImmutableMapEntry key-value pairs
* @param entries additional map entries
* @param mask hash code mask
* @param hashCode initial hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object)",44,49,"/**
* Initializes a singleton immutable bi-map with a given key-value pair.
* @param singleKey the unique key
* @param singleValue the corresponding value 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap)",51,55,"/**
* Initializes a singleton immutable bi-map with a specific key-value pair and its inverse. 
* @param singleKey the unique key
* @param singleValue the corresponding value
* @param inverse the inverse bi-map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,<init>,"com.google.common.collect.JdkBackedImmutableMap:<init>(java.util.Map,com.google.common.collect.ImmutableList)",91,94,"/**
* Creates an immutable map backed by a JDK map and iterable entries.
* @param delegateMap the underlying JDK map
* @param entries the immutable list of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,"com.google.common.collect.RegularImmutableMap:<init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)",217,222,"/**
* Initializes a new instance of RegularImmutableMap with the given entries and table.
* @param entries array of key-value pairs
* @param table backing map data (optional)
* @param mask bit mask for efficient lookup
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,readResolve,com.google.common.collect.ImmutableClassToInstanceMap:readResolve(),202,204,"/**
* Returns a mask object based on conditional evaluation of m1 and m2 methods.
* @return Mask object if condition is true; 'this' otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,ensureCapacity,com.google.common.collect.ImmutableMap$Builder:ensureCapacity(int),437,444,"/**
* Adjusts internal array size to accommodate minimum required capacity.
* @param minCapacity the new minimum capacity for the collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureCapacity,com.google.common.collect.ImmutableSet$SetBuilderImpl:ensureCapacity(int),603,609,"/**
* Dynamically adjusts the capacity of the dedupedElements array to accommodate at least 'minCapacity' elements.
* @param minCapacity minimum required capacity for the array
*/","* Resizes internal data structures if necessary to store the specified number of distinct
     * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(int),814,817,"/**
* Initializes builder with specified initial capacity.
* @param capacity initial size of internal array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(com.google.common.collect.Multiset),487,489,"/**
* Initializes a new Builder instance with an initial multiset of elements.
* @param contents Multiset containing the initial set of elements to be processed.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(boolean),493,495,"/**
* Initializes builder with optional flag to force subclassing.
* @param subclass ignored by default, forces subclass creation",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.lang.Iterable),540,545,"/**
* Adds iterable of elements to builder.
* @param elements collection of objects to be added
* @return the same builder instance for method chaining
*/","* Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.util.Iterator),905,910,"/**
* Adds an iterator of elements to the builder.
* @param elements iterable collection of items
*/","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterator} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.util.Iterator),578,583,"/**
* Adds an iterator of elements to the builder.
* @param elements iterator of elements to add
*/","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.util.Iterator),547,552,"/**
* Initializes builder with iterable of elements.
* @param elements iterator over elements to be processed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList:<init>(),392,392,"/**
* Creates an empty immutable list.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,<init>,com.google.common.collect.ImmutableMapValues:<init>(com.google.common.collect.ImmutableMap),40,42,"/**
* Initializes an instance with the values of another immutable map.
* @param map source map whose values are copied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$EntryCollection:<init>(com.google.common.collect.ImmutableMultimap),623,625,"/**
* Initializes an EntryCollection from a given ImmutableMultimap.
* @param multimap collection of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Values:<init>(com.google.common.collect.ImmutableMultimap),830,832,"/**
* Constructs a new instance from an immutable multimap.
* @param multimap underlying multimap data structure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet:<init>(),277,277,"/**
* Initializes an empty immutable set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.lang.Iterable),881,896,"/**
* Configures builder with iterable elements and updates internal state.
* @param elements Iterable of elements to be processed
*/","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,writeReplace,com.google.common.collect.ImmutableList:writeReplace(),748,753,"/**
* Returns serialized form of mask configuration.
* @return SerializedForm object representing mask settings
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,writeReplace,com.google.common.collect.ImmutableEnumMap:writeReplace(),118,122,"/**
* Returns an EnumSerializedForm instance representing function mask delegate.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entryIterator,com.google.common.collect.ImmutableEnumMap:entryIterator(),97,100,"/**
* Returns an unmodifiable iterator over function mask entries.
* @return Iterator of Entry objects containing key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$UnmodifiableEntries:iterator(),1544,1547,"/**
 * Returns an iterator over key-value entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,writeReplace,com.google.common.collect.ImmutableEnumSet:writeReplace(),140,144,"/**
* Returns an EnumSerializedForm instance based on delegate. 
* @return serialized form of enum values 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,combine,com.google.common.collect.ImmutableList$Builder:combine(com.google.common.collect.ImmutableList$Builder),912,917,"/**
* Configures mask settings from provided Builder instance.
* @param builder input configuration to apply
* @return updated Builder instance for chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverseIndex,com.google.common.collect.ImmutableList$ReverseImmutableList:reverseIndex(int),644,646,"/**
* Calculates a mask value based on the given index.
* @param index input index to compute mask from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reversePosition,com.google.common.collect.ImmutableList$ReverseImmutableList:reversePosition(int),648,650,"/**
* Calculates a mask value by subtracting the input index from the result of m1(). 
* @param index The index to be used in the calculation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(int),406,414,"/**
* Returns a read-only iterator over the elements at specified index.
* @param index starting index for iteration
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList:listIterator(),401,404,"/**
* Returns an unmodifiable iterator over the list starting at index 0.
* @return UnmodifiableListIterator instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,listIterator,com.google.common.collect.RegularImmutableAsList:listIterator(int),55,59,"/**
* Retrieves an unmodifiable iterator for the list at the specified index.
* @param index position of the list to retrieve iterator from
* @return UnmodifiableListIterator instance or null if index is invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,toImmutableList,com.google.common.collect.ImmutableList:toImmutableList(),74,76,"/**
* Returns a collector that accumulates elements into an immutable list. 
* @return A collector instance
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableList}, in encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner2:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1434,1438,"/**
* Constructs a new Combiner2 instance from two closing futures.
* @param future1 first ClosingFuture object
* @param future2 second ClosingFuture object 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner3:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1603,1609,"/**
* Constructs a Combiner3 instance from three closing futures.
* @param future1 first future to combine
* @param future2 second future to combine
* @param future3 third future to combine
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner4:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1794,1804,"/**
* Combines four closing futures into a single Combiner instance.
* @param future1 first ClosingFuture of type V1
* @param future2 second ClosingFuture of type V2
* @param future3 third ClosingFuture of type V3
* @param future4 fourth ClosingFuture of type V4",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner5:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",2001,2013,"/**
* Constructs a Combiner with five closing futures.
* @param future1 first ClosingFuture
* @param future2 second ClosingFuture
* @param future3 third ClosingFuture
* @param future4 fourth ClosingFuture
* @param future5 fifth ClosingFuture",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,copyIntoArray,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:copyIntoArray(java.lang.Object[],int)",56,60,"/**
* Calls m1 on Entries instance with provided parameters.
* @param dst array to store result (or null)
* @return number of elements written to dst
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIntoArray,"com.google.common.collect.ImmutableSet$Indexed:copyIntoArray(java.lang.Object[],int)",357,360,"/**
* Delegates call to m1() to perform M2 operation.
* @param dst array to store result (may be null)
* @param offset starting index in dst array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,copyIntoArray,"com.google.common.collect.IndexedImmutableSet:copyIntoArray(java.lang.Object[],int)",51,55,"/**
* Delegate to m1() to perform M2 operation.
* @param dst array to store result (may be null)
* @param offset offset within dst array
* @return result of M2 operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,copyIntoArray,"com.google.common.collect.RegularImmutableAsList:copyIntoArray(java.lang.Object[],int)",67,71,"/**
* Calls delegateList's m1 method with provided array and offset.
* @param dst potentially null array to write result into
* @param offset starting index in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,copyIntoArray,"com.google.common.collect.RegularImmutableSortedSet:copyIntoArray(java.lang.Object[],int)",165,168,"/**
 * Calls m1() on elements and returns result.
 * @param dst array to store results (may be null)
 * @param offset starting index in the destination array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$ParameterizedTypeImpl:hashCode(),295,300,"/**
* Calculates bitwise XOR of type values from owner, arguments, and raw types. 
* @return result of the XOR operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$WildcardTypeImpl:hashCode(),497,500,"/**
* Computes bitwise XOR of lower and upper bounds. 
* @return result of m1() operation on both bounds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,com.google.common.collect.ImmutableMultimap:of(),84,86,"/**
* Creates an empty immutable multimap. 
* @return An instance of ImmutableListMultimap with no mappings
*/","* Returns an empty multimap.
   *
   * <p><b>Performance note:</b> the instance returned is a singleton.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,"com.google.common.collect.ImmutableListMultimap:<init>(com.google.common.collect.ImmutableMap,int)",435,437,"/**
* Constructs an immutable multimap from an immutable map of key-value lists.
* @param map map of keys to value lists
* @param size initial capacity of the multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)",46,49,"/**
* Initializes a regular entry set with an immutable map and its corresponding list of entries.
* @param map immutable map containing key-value pairs
* @param entries list of entries for the given map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createKeySet(),755,758,"/**
* Returns an immutable set of keys from this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableBiMap:createKeySet(),123,126,"/**
* Returns an immutable set of keys from this map.
* @return Set of keys or empty set if map is empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableMap:createKeySet(),117,120,"/**
* Returns an immutable set of keys for this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap$Inverse:createKeySet(),238,241,"/**
* Returns an immutable set of function masks.
* @return Set of V values representing function masks.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap:createKeySet(),160,163,"/**
* Returns an immutable set of keys in this map.
* @return Set of keys or empty set if map is empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryIterator,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:entryIterator(),1168,1193,"/**
* Returns an unmodifiable iterator over the map's entry set with values as immutable sets.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap),1243,1260,"/**
* Initializes SerializedForm from a key-value map.
* @param map Immutable map of key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keyIterator,com.google.common.collect.ImmutableMap:keyIterator(),1070,1083,"/**
* Returns an unmodifiable iterator of unique keys from the underlying map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap:hashCode(),1212,1215,"/**
* Calculates the mask value using m1 and m2 functions.
* @return the resulting mask value as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,readResolve,com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:readResolve(),149,151,"/**
* Returns the mask value from the data map.
* @return The mask value as an Object.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,get,com.google.common.collect.ImmutableMapKeySet:get(int),63,66,"/**
* Retrieves value from nested map structure at specified index.
* @param index position in nested map to retrieve value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,asList,com.google.common.collect.ImmutableMapValues:asList(),81,104,"/**
* Builds an immutable list of values from the map's entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getCell,com.google.common.collect.SparseImmutableTable:getCell(int),115,123,"/**
* Retrieves a Cell instance based on the given index.
* @param index unique cell identifier
* @return Cell object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsValue,com.google.common.collect.ImmutableMap:containsValue(java.lang.Object),986,989,"/**
* Checks if input value matches a specific mask using M1 and M2 methods.
* @param value input object to be checked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,readResolve,com.google.common.collect.ImmutableMapValues$SerializedForm:readResolve(),139,141,"/**
* Returns a mask object from the map. 
* @return Object representing the mask value 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyIntoArray,"com.google.common.collect.ImmutableMultimap$Values:copyIntoArray(java.lang.Object[],int)",844,851,"/**
* Updates multiple values into the provided array starting from the specified offset.
* @param dst the destination array
* @param offset initial index in the array to store the values
* @return updated offset after storing all values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$Values$SerializedForm:readResolve(),419,421,"/**
* Returns the mask value from the underlying data structure.
* @return The mask value as an Object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,isHashCodeFast,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isHashCodeFast(),1163,1166,"/**
* Delegates to parent map's 'm1' method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,isHashCodeFast,com.google.common.collect.ImmutableMapEntrySet:isHashCodeFast(),116,120,"/**
* Calls m1() and returns its result's boolean value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,checkNoConflict,"com.google.common.collect.ImmutableMap:checkNoConflict(boolean,java.lang.String,java.lang.Object,java.lang.Object)",373,378,"/**
* Throws an exception when a conflict occurs unless explicitly marked as safe.
* @param safe flag to indicate whether conflict is allowed
* @param conflictDescription description of the conflicting entries
* @param entry1 and entry2 objects involved in the conflict
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,writeReplace,com.google.common.collect.ImmutableMapEntrySet:writeReplace(),127,132,"/**
* Returns serialized form of function mask entry set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,createAsList,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:createAsList(),77,80,"/**
* Returns an immutable list of key-value pairs.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,<init>,"com.google.common.collect.ImmutableSortedAsList:<init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)",34,36,"/**
* Constructs an ImmutableSortedAsList instance from a set and a list.
* @param backingSet underlying sorted set
* @param backingList underlying immutable list
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,contains,com.google.common.collect.ImmutableMapValues:contains(java.lang.Object),71,74,"/**
* Compares two objects using iterative equality check.
* @param object nullable object to compare with result of m1()
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$EntryCollection:iterator(),627,630,"/**
* Returns an unmodifiable iterator over the entries in this multimap.
* @return Iterator of Entry objects or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,isPartialView,com.google.common.collect.ImmutableMultimap$EntryCollection:isPartialView(),632,635,"/**
* Calls multimap's m1() method to perform some operation.
* @return true if successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$EntryCollection:size(),637,640,"/**
* Calls multimap's m1() method to perform some operation.
* @return result of m1() method
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Keys:size(),748,751,"/**
* Delegates to underlying multimap's M1 operation.
* @return result of M1 operation on wrapped multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Values:size(),853,856,"/**
 * Delegates call to multimap's m1() method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,<init>,"com.google.common.collect.JdkBackedImmutableMultiset:<init>(java.util.Map,com.google.common.collect.ImmutableList,long)",59,64,"/**
* Initializes an immutable multiset with the given data.
* @param delegateMap map of elements to their counts
* @param entries list of element-count pairs
* @param size total number of elements in the multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset:<init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet)",126,137,"/**
* Initializes a RegularImmutableMultiset with the given data structures.
* @param entries array of key-value pairs
* @param hashTable optional hash table for efficient lookup (null if not used)
* @param size total number of elements in the multiset
* @param hashCode hash code of the multiset
* @param elementSet optional set of unique elements (null if not used)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,writeReplace,com.google.common.collect.ImmutableMultimap$Keys:writeReplace(),764,769,"/**
* Returns an immutable serialized form of this multimap.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,readResolve,com.google.common.collect.ImmutableMultimap$KeysSerializedForm:readResolve(),787,789,"/**
* Returns the first element of the multimap.
* @return Object representing the key of the first entry in the multimap
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Values:contains(java.lang.Object),834,837,"/**
* Checks if an object matches a filter in the multimap.
* @param object object to check against the multimap's filter
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$Values:iterator(),839,842,"/**
* Returns an unmodifiable iterator over the multimap's key set.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,forEach,com.google.common.collect.ImmutableMultimap:forEach(java.util.function.BiConsumer),706,712,"/**
* Applies the provided consumer to each key-value pair in this map.
* @param action BiConsumer to process key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,elementSet,com.google.common.collect.JdkBackedImmutableMultiset:elementSet(),73,77,"/**
* Creates or returns an immutable set of elements based on the provided entries.
* @return ImmutableSet containing all unique elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,elementSet,com.google.common.collect.RegularImmutableMultiset:elementSet(),181,185,"/**
* Creates or retrieves the set of elements with mask 1. 
* @return non-null set of elements with mask 1
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset$EntrySet:writeReplace(),406,411,"/**
* Returns an immutable multiset entry set as a serialized form. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset:writeReplace(),436,441,"/**
* Returns serialized form of this object.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet$AsSet:writeReplace(),711,715,"/**
* Returns serialized form of function mask.
* @return AsSetSerializedForm object representing the function mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet:writeReplace(),866,869,"/**
* Returns a serialized form of the given ranges.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,toImmutableRangeSet,com.google.common.collect.ImmutableRangeSet:toImmutableRangeSet(),73,76,"/**
* Returns a collector for immutable range sets of comparable elements.","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent
   * ranges will be merged.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:<init>(),661,663,"/**
* Initializes empty set builder with default capacity.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(int),728,733,"/**
* Initializes a Regular Set Builder with specified capacity and default settings.
* @param expectedCapacity initial capacity of the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl),735,741,"/**
* Copies the state of another RegularSetBuilderImpl instance.
* @param toCopy RegularSetBuilderImpl to copy from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,writeReplace,com.google.common.collect.ImmutableSet:writeReplace(),418,422,"/**
* Returns serialized form of mask data.
* @return SerializedForm object containing mask data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,toImmutableSet,com.google.common.collect.ImmutableSet:toImmutableSet(),71,73,"/**
* Returns an immutable set collector. 
* @return Collector instance to collect elements into an ImmutableSet
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if
   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first
   * duplicate in encounter order will appear in the result.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,delegateCollection,com.google.common.collect.ImmutableSortedAsList:delegateCollection(),38,41,"/**
* Returns an immutable sorted set of elements from superclass.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,"com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)",764,766,"/**
* Constructs an empty sorted map with given key set and values.
* @param keySet unique keys in sorted order
* @param valueList corresponding values in list form
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,forEach,com.google.common.collect.ImmutableSortedMap:forEach(java.util.function.BiConsumer),782,789,"/**
* Performs a bulk operation on the map's entries.
* @param action consumer to process each entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,isPartialView,com.google.common.collect.ImmutableSortedMap:isPartialView(),797,800,"/**
* Evaluates whether this map contains any elements.
* @return true if the map is not empty, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstEntry,com.google.common.collect.ImmutableSortedMap:firstEntry(),1071,1074,"/**
* Returns an Entry instance based on the result of m1().
* @return null if m1() is true, otherwise a populated Entry object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastEntry,com.google.common.collect.ImmutableSortedMap:lastEntry(),1076,1079,"/**
* Returns the next entry in the sequence, or null if exhausted.
* @return Next Entry object or null if no more entries exist
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,comparator,com.google.common.collect.ImmutableSortedMap:comparator(),904,907,"/**
* Returns a comparator instance by delegating to another comparator. 
* @return Comparator instance or null if source is null 
*/","* Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the
   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link
   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,writeReplace,com.google.common.collect.ImmutableSortedMultiset:writeReplace(),596,600,"/**
* Returns serialized form of current entity.
* @return SerializedForm object representing this entity's state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,add,com.google.common.collect.ImmutableSortedSet$Builder:add(java.lang.Object),497,521,"/**
* Adds an element to the collection and adjusts capacity as needed.
* @param element item to add
* @return Builder instance for method chaining
*/","* Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet}
     * already contains {@code element}, then {@code add} has no effect. (only the previously added
     * element is retained).
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,writeReplace,com.google.common.collect.ImmutableSortedSet:writeReplace(),881,885,"/**
* Returns a serialized form of E with custom comparator and value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,unsafeCompare,"com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.lang.Object,java.lang.Object)",599,601,"/**
* Delegate to comparator-based version with default comparison.
* @param a object to compare
* @param b object to compare against
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,<init>,com.google.common.collect.RegularImmutableTable:<init>(),38,38,"/**
* Constructs an immutable table with default properties.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,"com.google.common.collect.SingletonImmutableTable:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",37,41,"/**
* Initializes an immutable table with a single entry.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value the data to be stored in the table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerBuilder:<init>(),49,49,"/**
* Private constructor to prevent instantiation of this utility class.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,asFunction,com.google.common.collect.Interners:asFunction(com.google.common.collect.Interner),165,167,"/**
* Creates a function that applies the m1 operation to interned values.
* @param interner Interner instance for value interning
*/","* Returns a function that delegates to the {@link Interner#intern} method of the given interner.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toString,com.google.common.collect.Iterables:toString(java.lang.Iterable),247,249,"/**
* Converts an iterable to a string representation using the M1 method.
* @param iterable input iterable
*/","* Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}
   * (that is, identical to {@link java.util.Arrays Arrays}{@code
   * .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link
   * Collection}, {@code collection.toString()} also gives the same result, but that behavior is not
   * generally guaranteed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable),260,263,"/**
* Converts an iterable to its minimum value (M2). 
* @param iterable input collection of values 
* @return minimum value or null if empty */","* Returns the single element contained in {@code iterable}.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.onlyElement())}.
   *
   * @throws NoSuchElementException if the iterable is empty
   * @throws IllegalArgumentException if the iterable contains multiple elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getOnlyElement,"com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator,java.lang.Object)",336,340,"/**
* Recursively fetches the next element from an iterator or returns a default value if exhausted.
* @param iterator iterable source
* @param defaultValue fallback value to return when iterator is empty
* @return T object or defaultValue if no more elements in iterator
*/","* Returns the single element contained in {@code iterator}, or {@code defaultValue} if the
   * iterator is empty.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the
   *     iterator is unspecified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object[],java.lang.Class)",72,79,"/**
* Merges two arrays of type T into a single array.
* @param first first array to merge
* @param second second array to merge
* @return merged array or null if not found
*/","* Returns a new array that contains the concatenated contents of two arrays.
   *
   * @param first the first array of elements to concatenate
   * @param second the second array of elements to concatenate
   * @param type the component type of the returned array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,com.google.common.collect.Iterables:getLast(java.lang.Iterable),843,855,"/**
* Wraps a generic Iterable in a List, then delegates to the appropriate iterator method.
*@param iterable input iterable to be wrapped and processed
*@return first element of the wrapped list or null if not found
*/","* Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link
   * RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead.
   *
   * @return the last element of {@code iterable}
   * @throws NoSuchElementException if the iterable is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getLast,"com.google.common.collect.Iterators:getLast(java.util.Iterator,java.lang.Object)",921,925,"/**
* Recursively fetches the next element from an iterator or returns a default value if exhausted.
* @param iterator iterable source
* @param defaultValue fallback object to return when iteration ends
* @return next element in iterator, or default value if no more elements
*/","* Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the
   * iterator is empty.
   *
   * @param defaultValue the default value to return if the iterator is empty
   * @return the last element of {@code iterator}
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,hasNext,com.google.common.collect.Iterators$ConcatenatedIterator:hasNext(),1394,1430,"/**
* Iterates through concatenated iterators until a match is found.
* @return true if a match is found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,emptyIterator,com.google.common.collect.Iterators:emptyIterator(),80,82,"/**
* Returns an iterator over a constant value sequence (null).
* @return Iterator with a single null element.","* Returns the empty iterator.
   *
   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,iterator,com.google.common.collect.SingletonImmutableList:iterator(),50,53,"/**
* Returns an iterator over all elements in the collection.
* @return Iterator object or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,iterator,com.google.common.collect.SingletonImmutableSet:iterator(),55,58,"/**
* Returns an unmodifiable iterator over elements of type E.
* @return Iterator object or null if not supported
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,newHeader,com.google.common.collect.LinkedHashMultimap$ValueEntry:newHeader(),211,214,"/**
* Creates an empty ValueEntry instance with default values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,forEach,com.google.common.collect.LinkedHashMultimap$ValueSet:forEach(java.util.function.Consumer),452,460,"/**
* Executes a consumer on each value in the set and its linked values.
* @param action Consumer to apply to each value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,rehashIfNecessary,com.google.common.collect.LinkedHashMultimap$ValueSet:rehashIfNecessary(),503,519,"/**
* Resizes and rehashes the internal hash table if necessary.
* @param size current hash table size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap$ValueSet:clear(),547,559,"/**
* Clears and rehashes the hash table.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromValueSet,com.google.common.collect.LinkedHashMultimap:deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink),148,151,"/**
* Processes ValueSetLink entry using masks.
* @param entry ValueSetLink object to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,succeedsInMultimap,"com.google.common.collect.LinkedHashMultimap:succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)",142,146,"/**
* Swaps and updates the mask values of two ValueEntries.
* @param pred first ValueEntry
* @param succ second ValueEntry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,entrySpliterator,com.google.common.collect.LinkedHashMultimap:entrySpliterator(),593,596,"/**
* Creates a spliterator for iterating over distinct and ordered entries.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,writeObject,com.google.common.collect.LinkedHashMultimap:writeObject(java.io.ObjectOutputStream),618,631,"/**
* Serializes user data to the given output stream.
* @param stream ObjectOutputStream instance
*/","* @serialData the expected values per key, the number of distinct keys, the number of entries,
   *     and the entries in order",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueIterator,com.google.common.collect.LinkedHashMultimap:valueIterator(),598,601,"/**
* Returns an iterator over values in map generated by m1().",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:hasNext(),426,430,"/**
* Checks if there is a valid mask to be processed.
* @return true if a mask exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:next(),432,445,"/**
* Fetches a key from the iterator, traversing to the nearest unseen key.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:remove(),447,454,"/**
* Resets internal state and updates expected modification count.
* @param current non-null UserProfile object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,addNode,"com.google.common.collect.LinkedListMultimap:addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node)",198,249,"/**
* Inserts a new node with the given key and value, potentially reordering the existing nodes in the list.
* @param key unique identifier
* @param value associated data
* @param nextSibling optional sibling node to insert before
* @return the newly inserted Node object
*/","* Adds a new node for the specified key-value pair before the specified {@code nextSibling}
   * element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling}
   * is specified, it MUST be for a node for the same {@code key}!",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$NodeIterator:hasNext(),334,338,"/**
* Checks if there is a next item in the sequence.
* @return true if next item exists, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$NodeIterator:next(),340,351,"/**
* Returns the next node in a linked list sequence.
* @return the next Node object or throws exception if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$NodeIterator:remove(),353,366,"/**
* Updates internal state after removing a node from the linked list.
* @param current removed node reference
* @param next index of next node (used for error checking)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasPrevious,com.google.common.collect.LinkedListMultimap$NodeIterator:hasPrevious(),368,372,"/**
 * Checks if previous mask is set.
 * @return true if previous mask exists, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,previous,com.google.common.collect.LinkedListMultimap$NodeIterator:previous(),374,385,"/**
* Returns the node preceding the current node.
* @return Node object or throws NoSuchElementException if none found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.CharSequence),762,764,"/**
* Converts input sequence into a list of characters.
* @param sequence input character sequence
*/","* Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing
   * {@code sequence} as a sequence of Unicode code units. The view does not support any
   * modification operations, but reflects any changes to the underlying character sequence.
   *
   * @param sequence the character sequence to view as a {@code List} of characters
   * @return an {@code List<Character>} view of the character sequence
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$RandomAccessPartition:<init>(java.util.List,int)",739,741,"/**
 * Initializes a new RandomAccessPartition instance with the specified list and partition size.
 * @param list underlying list to be partitioned
 * @param size number of elements in each partition
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,indexOfImpl,"com.google.common.collect.Lists:indexOfImpl(java.util.List,java.lang.Object)",1065,1077,"/**
* Searches for the first occurrence of the specified element in the given list.
* @param list searchable collection
* @param element target object to find
* @return index of found element or -1 if not found
*/",An implementation of {@link List#indexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,lastIndexOfImpl,"com.google.common.collect.Lists:lastIndexOfImpl(java.util.List,java.lang.Object)",1098,1110,"/**
* Searches for the first occurrence of an element in a list.
* @param list List to search
* @param element Element to find (may be null)
* @return Index of the found element, or -1 if not found
*/",An implementation of {@link List#lastIndexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,delegate,com.google.common.collect.ForwardingConcurrentMap:delegate(),46,47,"/**
* Returns a concurrent map of function masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:<init>(java.lang.Object,int)",584,586,"/**
 * Constructs a new StrongKeyDummyValueEntry instance.
 * @param key the key to store
 * @param hash the hash value associated with the key
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:<init>(java.lang.Object,int)",394,396,"/**
* Constructs a strong key-strong value entry with the given key and hash.
* @param key object to store in this entry
* @param hash hash code of the provided key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",696,698,"/**
* Constructs a WeakKeyDummyValueEntry with given parameters.
* @param queue ReferenceQueue instance
* @param key unique key identifier
* @param hash integer hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",787,789,"/**
* Constructs a private entry with the specified reference queue and key.
* @param queue Reference queue to notify when this entry is reclaimed
* @param key Key associated with this entry
* @param hash Hash code of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap:containsValue(java.lang.Object),2385,2421,"/**
* Checks if a value matches any entry in the map.
* @param value object to search for
* @return true if found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$EntrySet:isEmpty(),2776,2779,"/**
* Calls internal map's m1() and returns its result.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$KeySet:isEmpty(),2688,2691,"/**
* Delegates call to internal map's implementation of this method.
* @return result from internal map's implementation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$Values:isEmpty(),2722,2725,"/**
* Delegate to internal map's m1() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextInTable,com.google.common.collect.MapMakerInternalMap$HashIterator:nextInTable(),2577,2586,"/**
* Checks for a match based on table entries.
* @return true if a matching entry is found, false otherwise
*/",Finds the next entry in the current table. Returns {@code true} if an entry was found.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,expand,com.google.common.collect.MapMakerInternalMap$Segment:expand(),1556,1622,"/**
* Rehashes and updates the internal data structure to accommodate growing capacity.
* @GuardedBy(""this"") 
*/",Expands the table if possible.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$Segment:<init>(com.google.common.collect.MapMakerInternalMap,int)",1234,1237,"/**
* Initializes internal table with specified capacity.
* @param initialCapacity initial capacity of the table
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,tryDrainReferenceQueues,com.google.common.collect.MapMakerInternalMap$Segment:tryDrainReferenceQueues(),1362,1370,"/**
* Executes m3() with m2() cleanup in case of failure.
*/",Cleanup collected entries when the lock is available.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runLockedCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runLockedCleanup(),2007,2016,"/**
* Executes masked function logic.
* @throws Exception if an error occurs during execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Segment:clear(),1794,1811,"/**
* Resets internal data structures and updates counters.
* @param count likely represents an element count
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",652,661,"/**
* Creates a new StrongKeyDummyValueEntry instance or links it to the existing entry.
* @param key unique key value
* @param hash hash code of the key
* @param next optional reference to the previous entry
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",467,476,"/**
* Creates a new entry for the given key and hash value.
* @param segment segment to which this entry belongs
* @param key unique key value
* @param hash hash code of the key
* @param next optional reference to the next entry in the chain
* @return new StrongKeyStrongValueEntry or LinkedStrongKeyStrongValueEntry instance",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",566,575,"/**
* Creates a new StrongKeyWeakValueEntry instance or links to an existing one.
* @param key unique entry key
* @param hash key hash value
* @param next previous entry in the linked list (null if standalone)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:<init>(java.lang.Object,int)",487,489,"/**
* Creates a new instance of StrongKeyWeakValueEntry with given key and hash.
* @param key object to be stored in this entry
* @param hash hash value for the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",882,884,"/**
* Constructs a new WeakKeyWeakValueEntry with specified parameters.
* @param queue ReferenceQueue to use
* @param key the key for this entry
* @param hash the hash code of the key
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2078,2082,"/**
* Creates a WeakValueReference for the given value and internal entry.
* @param e InternalEntry containing key-value association
* @param value associated value to reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2084,2095,"/**
* Updates the mask for a given internal entry.
* @param e InternalEntry object
* @param valueReference WeakValueReference to update
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2072,2076,"/**
* Applies transformation to internal entry and returns result.
* @param e Internal entry to transform
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)",751,762,"/**
* Processes a WeakKeyDummyValueEntry for the given segment.
* @param segment WeakKeyDummyValueSegment to process
* @param entry current WeakKeyDummyValueEntry
* @param newNext potential new next entry in the chain
* @return processed WeakKeyDummyValueEntry or null if key is invalid",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getValue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getValue(),700,703,"/**
* Returns the mask value for Dummy.
* @return Mask value (Dummy.VALUE)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)",841,854,"/**
* Creates a new weak key strong value entry by masking the given segment and entry.
* @param segment WeakKeyStrongValueSegment to mask
* @param newNext optional new next entry in masked segment
* @return new WeakKeyStrongValueEntry or null if key is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2209,2213,"/**
* Creates a weak reference to the given value.
* @param e internal entry
* @param value associated value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2215,2226,"/**
* Updates the mask for a given internal entry.
* @param e InternalEntry object
* @param valueReference new reference to update the mask for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2203,2207,"/**
* Computes and returns a WeakValueReference object based on the given InternalEntry.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isLiveForTesting,com.google.common.collect.MapMakerInternalMap:isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),1128,1131,"/**
* Evaluates a mask condition based on internal entry data.
* @param entry InternalEntry object with associated data
*/","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,hash,com.google.common.collect.MapMakerInternalMap:hash(java.lang.Object),1108,1111,"/**
* Computes hash code from input key and passes it to m2() function.
* @param key object to compute hash code from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredKeyMap:<init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)",2975,2981,"/**
* Creates a filtered map based on key and entry predicates.
* @param unfiltered original map to filter
* @param keyPredicate predicate for keys
* @param entryPredicate predicate for entries
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$AsMapView:createKeySet(),896,899,"/**
 * Computes and returns the set of function masks.
 * @return Set of K values representing function masks
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$AsMapView:size(),906,909,"/**
* Calls and returns result of m2() from m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AsMapView:containsKey(java.lang.Object),911,914,"/**
* Checks if a given key matches any mask.
* @param key object to check against masks
* @return true if key matches, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AsMapView:remove(java.lang.Object),932,941,"/**
* Calls M2 with a casted key on the internal data structure.
* @param key Object to be used as key, may be null
* @return V object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$AsMapView:clear(),943,946,"/**
* Calls m2() on an instance retrieved by calling m1().",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$AsMapView:forEach(java.util.function.BiConsumer),965,970,"/**
* Applies consumer to each key-value pair in map.
*@param action BiConsumer for processing key-value pairs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,backingSet,com.google.common.collect.Maps$SortedAsMapView:backingSet(),990,993,"/**
* Calls superclass method to retrieve sorted set of keys.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$NavigableAsMapView:entryIterator(),1095,1098,"/**
* Returns an iterator of key-value pairs from the set.
* @return Iterator over entries in the set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$AsMap$EntrySet:iterator(),1904,1907,"/**
* Returns an iterator over entries in the multimap.
* @return Iterator of key-value pairs or null if empty.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:iterator(),919,922,"/**
* Returns an iterator over table entries with column data.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$RowMap$EntrySet:iterator(),839,842,"/**
* Returns an iterator over entries in the backing map.
* @return Iterator of key-value pairs or null if empty
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.Maps$DescendingMap:entrySet(),4383,4387,"/**
* Returns a set of key-value pairs or reinitializes it by calling m1().
* @return Set of entries or null if uninitialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,java.lang.Object)",4434,4437,"/**
* Returns a sorted map of elements within the specified key range.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object),4444,4447,"/**
* Returns a new empty sorted map with the specified key type.
* @param toKey the initial key for the map
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object),4454,4457,"/**
* Returns a sorted map starting from the specified key.
* @param fromKey key to start the map from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:removeAll(java.util.Collection),955,965,"/**
* Calculates functional mask value based on collection data.
* @param c Collection of items to process
* @return true if calculation is successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forcePut,"com.google.common.collect.Maps$FilteredEntryBiMap:forcePut(java.lang.Object,java.lang.Object)",3387,3391,"/**
* Inserts or updates cache entry with specified key-value pair.
* @param key unique identifier
* @param value associated data
* @return null (void result)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,replaceAll,com.google.common.collect.Maps$FilteredEntryBiMap:replaceAll(java.util.function.BiFunction),3393,3401,"/**
* Applies a given transformation function to mapped values.
* @param function BiFunction to apply to transformed values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:removeAll(java.util.Collection),3098,3101,"/**
* Evaluates the mask of elements in the given collection.
* @param collection Collection to evaluate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:retainAll(java.util.Collection),3103,3106,"/**
* Applies filter to the given collection using predicate.
* @param collection input collection to filter
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:comparator(),3147,3150,"/**
* Returns a comparator based on the result of m1(). 
* @return Comparator object or null if m1() returns null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap:comparator(),3181,3184,"/**
* Returns a comparator instance by delegating to another comparator.
* @return Comparator object or null if delegate returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$FilteredEntrySortedMap:lastKey(),3193,3206,"/**
* Iteratively searches for a matching element in the sorted map.
* @return Key of first matching element or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$FilteredEntrySortedMap:firstKey(),3186,3191,"/**
* Returns a mask value by chaining calls to m1(), m2(), and m3().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$KeySet:iterator(),3926,3929,"/**
* Returns an iterator over elements of type K.
* @return Iterator instance wrapping the result of nested operations.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$KeySet:size(),3938,3941,"/**
* Calls m1() to fetch intermediate result and then calls its m2() method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$KeySet:isEmpty(),3943,3946,"/**
* Calls and returns result of m1(), then calls m2() on that result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$KeySet:contains(java.lang.Object),3948,3951,"/**
* Checks if an object matches a specific mask.
* @param o the object to check (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$KeySet:clear(),3962,3965,"/**
* Calls m2() on the result of calling m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,map,com.google.common.collect.Maps$SortedKeySet:map(),3982,3985,"/**
* Calls superclass implementation of m1 and returns result as SortedMap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedMapDifferenceImpl:<init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)",752,758,"/**
* Constructs a difference report for two sorted maps.
* @param onlyOnLeft  keys present in left map but not right
* @param onlyOnRight keys present in right map but not left
* @param onBoth      keys common to both input maps
* @param differences key-value differences between the two maps
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toString,com.google.common.collect.Maps$MapDifferenceImpl:toString(),682,699,"/**
* Computes comparison result with detailed reasons.
* @return Comparison outcome as a string or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnLeft,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnLeft(),770,773,"/**
* Delegates to superclass method to retrieve sorted map.
* @return A sorted map of type K and V.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnRight,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnRight(),775,778,"/**
* Calls parent's implementation of m1 and returns its result as a SortedMap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesInCommon,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesInCommon(),765,768,"/**
* Calls superclass's implementation of m1(), returning a SortedMap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$MapDifferenceImpl:equals(java.lang.Object),661,674,"/**
* Compares this object with the given object for equality.
* @param object Object to compare, can be null or a MapDifference
* @return true if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$MapDifferenceImpl:hashCode(),676,680,"/**
* Calculates combined function mask using bitwise OR of individual masks.
* @return Combined function mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesDiffering,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesDiffering(),760,763,"/**
* Returns a sorted map of value differences by delegating to superclass implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lower,com.google.common.collect.Maps$NavigableKeySet:lower(java.lang.Object),4032,4035,"/**
 * Applies mask operation to input element.
 * @param e input element to be masked
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floor,com.google.common.collect.Maps$NavigableKeySet:floor(java.lang.Object),4037,4040,"/**
* Applies mask function to an object using nested methods.
* @param e input object of type K
* @return result of masked operation or null if null input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceiling,com.google.common.collect.Maps$NavigableKeySet:ceiling(java.lang.Object),4042,4045,"/**
* Applies mask function to input element.
* @param e input element of type K
* @return result of mask application or null if unsuccessful
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higher,com.google.common.collect.Maps$NavigableKeySet:higher(java.lang.Object),4047,4050,"/**
* Applies function mask to input value.
* @param e input value to be transformed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirst,com.google.common.collect.Maps$NavigableKeySet:pollFirst(),4052,4055,"/**
* Computes and returns the function mask value.
* @return The calculated mask value or null if not applicable.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLast,com.google.common.collect.Maps$NavigableKeySet:pollLast(),4057,4060,"/**
* Calculates and returns a mask value using chained function calls.
* @return Mask value of type K or null if an error occurs.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingSet,com.google.common.collect.Maps$NavigableKeySet:descendingSet(),4062,4065,"/**
* Returns a navigable set of K values based on m1 and m2 operations.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",4072,4079,"/**
* Retrieves a navigable set of elements within the specified range.
* @param fromElement starting element (inclusive if trueParameter)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive if trueParameter)
* @param toInclusive whether end is inclusive
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,"com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object,boolean)",4086,4089,"/**
* Retrieves a navigable set of elements based on the provided element and inclusivity flag.
* @param toElement The target element for which to retrieve a set
* @param inclusive Whether to include or exclude the target element in the set
* @return A NavigableSet containing relevant elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,"com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object,boolean)",4096,4099,"/**
* Creates a navigable set of elements within the specified range.
* @param fromElement starting element (inclusive if true)
* @param inclusive whether to include or exclude the start element
* @return NavigableSet containing matching elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:fromMap(),2389,2392,"/**
* Delegates to superclass to fetch navigable map data.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$TransformedEntriesSortedMap:comparator(),2232,2235,"/**
* Returns a comparator instance by delegating to another comparator.
* @return Comparator instance or null if delegate returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:firstKey(),2237,2241,"/**
* Calls m1(), then invokes m2() on its result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:lastKey(),2248,2252,"/**
* Calls the m2() method on the result of m1().
* @return The result of m2() or null if m1() returns null.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,delegate,com.google.common.collect.ForwardingSortedMap:delegate(),65,66,"/**
* Returns a sorted map of function mask entries. 
* @return A map containing function mask data. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,create,"com.google.common.collect.Maps$ValueDifferenceImpl:create(java.lang.Object,java.lang.Object)",707,710,"/**
* Creates a ValueDifference object from two values.
* @param left the first value
* @param right the second value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$Values:iterator(),4119,4122,"/**
* Recursively generates an iterator from nested model components.
* @return Iterator of type V
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$Values:remove(java.lang.Object),4131,4144,"/**
* Tries to call superclass method m5; if unsupported, iterates through entries and calls m5 on matching key.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$Values:size(),4176,4179,"/**
* Calls helper method m1 to retrieve value and delegates it to its own m2 implementation. 
* @return result of calling m1().m2() 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$Values:isEmpty(),4181,4184,"/**
* Calls and returns result of m2() from returned object by m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$Values:contains(java.lang.Object),4186,4189,"/**
* Applies mask function to given object.
* @param o input object to be masked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$Values:clear(),4191,4194,"/**
* Calls m2() on the result of m1().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$Values:removeAll(java.util.Collection),4146,4159,"/**
* Recursively checks collection membership using superclass method.
* @param c Collection to check
* @return true if contained, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$Values:retainAll(java.util.Collection),4161,4174,"/**
* Delegates collection filtering to superclass while handling unsupported operations.
* @param c Collection to filter
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,<init>,com.google.common.eventbus.SubscriberRegistry:<init>(com.google.common.eventbus.EventBus),69,71,"/**
* Initializes subscriber registry with an EventBus instance.
* @param bus non-null EventBus object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,com.google.common.collect.TreeRangeMap:<init>(),89,91,"/**
 * Initializes an empty TreeRangeMap instance. 
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newIdentityHashSet,com.google.common.collect.Sets:newIdentityHashSet(),453,455,"/**
* Creates an empty set with null-allowed elements.
*/","* Creates an empty {@code Set} that uses identity to determine equality. It compares object
   * references, instead of calling {@code equals}, to determine whether a provided object matches
   * an element in the set. For example, {@code contains} returns {@code false} when passed an
   * object that equals a set member, but isn't the same instance. This behavior is similar to the
   * way {@code IdentityHashMap} handles key lookups.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedBiMap,com.google.common.collect.Maps:synchronizedBiMap(com.google.common.collect.BiMap),1678,1682,"/**
* Returns a synchronized version of the input BiMap.
*/","* Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing bimap is accomplished
   * through the returned bimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned map when accessing any
   * of its collection views:
   *
   * {@snippet :
   * BiMap<Long, String> map = Maps.synchronizedBiMap(
   *     HashBiMap.<Long, String>create());
   * ...
   * Set<Long> set = map.keySet();  // Needn't be in synchronized block
   * ...
   * synchronized (map) {  // Synchronizing on map, not set!
   *   Iterator<Long> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified bimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keyPredicateOnEntries,com.google.common.collect.Maps:keyPredicateOnEntries(com.google.common.base.Predicate),2395,2398,"/**
* Creates a predicate to filter entries based on a given key predicate.
* @param keyPredicate predicate to evaluate against entry keys
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,compareElements,"com.google.common.collect.MinMaxPriorityQueue$Heap:compareElements(int,int)",530,532,"/**
* Calculates function mask value by applying two intermediate functions.
* @param a first operand
* @param b second operand
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peek,com.google.common.collect.MinMaxPriorityQueue:peek(),318,321,"/**
* Returns a functional mask based on condition evaluation.
* @return null if m1 returns true, otherwise result of m2 with default value 0.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getGrandparentIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:getGrandparentIndex(int),760,762,"/**
* Applies two iterations of the m1 function to the input integer.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOverUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOverUp(int,java.lang.Object)",634,664,"/**
* Inserts element into a sorted order while maintaining the heap property.
* @param index current position in the heap
* @param x element to insert
* @return updated index of the newly inserted element
*/","* Moves an element one level up from a min level to a max level (or vice versa). Returns the
     * new position of the element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,swapWithConceptuallyLastElement,com.google.common.collect.MinMaxPriorityQueue$Heap:swapWithConceptuallyLastElement(java.lang.Object),679,694,"/**
* Retrieves a suitable index for the last element based on its ordering.
* @param actualLastElement the element to be ordered
* @return a valid index or size if no suitable position found
*/","* Swap {@code actualLastElement} with the conceptually correct last element of the heap.
     * Returns the index that {@code actualLastElement} now resides in.
     *
     * <p>Since the last element of the array is actually in the middle of the sorted structure, a
     * childless aunt node could be smaller, which would corrupt the invariant if this element
     * becomes the new parent of the aunt node. In that case, we first switch the last element with
     * its aunt node, before returning.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,nextNotInSkipMe,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:nextNotInSkipMe(int),869,878,"/**
* Updates the next cursor position based on the input mask character count.
* @param c desired mask character count
*/","* Advances nextCursor to the index of the first element after {@code c} that is not in {@code
     * skipMe} and returns {@code size()} if there is no such element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,initialQueueSize,"com.google.common.collect.MinMaxPriorityQueue:initialQueueSize(int,int,java.lang.Iterable)",939,956,"/**
* Calculates the functional mask size based on configuration and contents.
* @param configuredExpectedSize expected size or DEFAULT_CAPACITY if unset
* @param maximumSize maximum allowed size
* @param initialContents initial collection of items
* @return calculated functional mask size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,add,com.google.common.collect.MoreCollectors$ToOptionalState:add(java.lang.Object),117,130,"/**
* Processes an object, potentially adding it to a collection of extras.
* @param o the object to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,combine,com.google.common.collect.MoreCollectors$ToOptionalState:combine(com.google.common.collect.MoreCollectors$ToOptionalState),132,150,"/**
* Merges two ToOptionalState objects with optional element and extras.
* @param other ToOptionalState object to merge
* @return This ToOptionalState object with merged data or other if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getOptional,com.google.common.collect.MoreCollectors$ToOptionalState:getOptional(),152,158,"/**
* Returns an object with mask identifier or throws exception if not available.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getElement,com.google.common.collect.MoreCollectors$ToOptionalState:getElement(),160,168,"/**
* Returns a mask object based on element availability and extras condition.
* @throws NoSuchElementException if element is null
* @throws Exception if extras condition fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$ListMultimapBuilder:build(com.google.common.collect.Multimap),439,443,"/**
* Delegate method to fetch Multimap instance with type parameters.
* @param multimap existing Multimap instance
* @return ListMultimap instance with specified type parameters
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SetMultimapBuilder:build(com.google.common.collect.Multimap),459,463,"/**
* Wraps a Multimap in a SetMultimap instance.
* @param multimap input multimap to convert
* @return SetMultimap version of the input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:<init>(),474,474,"/**
* Constructs a new multimap builder with sorted keys. 
* @see MultimapBuilder 
* @see SortedKeyMultimapBuilder 
* @see UnsortedKeyMultimapBuilder 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap$EntrySet:remove(java.lang.Object),1909,1918,"/**
* Evaluates the input object against a mask, performing necessary operations.
* @param o Object to be evaluated
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$AsMap:get(java.lang.Object),1921,1925,"/**
* Retrieves collection of values associated with given key.
* @param key object to look up in the multimap
* @return Collection of values or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap:remove(java.lang.Object),1927,1930,"/**
* Retrieves collection of values based on a given key.
* @param key object to search with (may be null)
* @return Collection of V objects or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableListMultimap:delegate(),799,802,"/**
* Calls superclass implementation of m1 and returns result as ListMultimap.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:delegate(),829,832,"/**
* Delegates to superclass to retrieve multimap instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,"com.google.common.collect.Multisets$FilteredMultiset:remove(java.lang.Object,int)",381,389,"/**
* Recursively counts occurrences of an element in a collection.
* @param element the object to search for
* @param occurrences initial count value (starts at 0)
* @return total count or 0 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iteratorImpl,com.google.common.collect.Multisets:iteratorImpl(com.google.common.collect.Multiset),1061,1063,"/**
* Creates an iterator that masks elements in a multiset.
* @param multiset the multiset to iterate over
*/",An implementation of {@link Multiset#iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,next,com.google.common.collect.Multisets$MultisetIteratorImpl:next(),1088,1105,"/**
* Advances iterator and returns the next element, or throws exception if exhausted.
* @throws NoSuchElementException if no more elements available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,elementSet,com.google.common.collect.Multisets$UnmodifiableMultiset:elementSet(),151,155,"/**
* Returns the set of elements, possibly initializing it if null.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,delegate,com.google.common.collect.UnmodifiableSortedMultiset:delegate(),44,47,"/**
* Delegates to superclass method and returns result as SortedMultiset.
* @return SortedMultiset containing elements from superclass implementation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,delegate,com.google.common.collect.ForwardingMultiset:delegate(),56,57,"/**
* Returns an empty multiset with a default mask. 
* @return EmptyMultiset instance.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,delegate,com.google.common.collect.MutableClassToInstanceMap$2:delegate(),79,82,"/**
 * Returns a map of function to result class mappings.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,writeReplace,com.google.common.collect.MutableClassToInstanceMap:writeReplace(),186,188,"/**
* Creates and returns a serialized form of the mask.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,newArray,"com.google.common.collect.ObjectArrays:newArray(java.lang.Object[],int)",61,63,"/**
* Copies an array of type T to a new array with specified length.
* @param reference original array
* @param length desired length of the new array
* @return new array of type T or null if not found
*/","* Returns a new array of the given length with the same type as a reference array.
   *
   * @param reference any array of the desired type
   * @param length the length of the new array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection),180,182,"/**
* Returns an array of objects based on collection size.
* @param c input collection
*/","* Returns an array containing all of the elements in the specified collection. This method
   * returns the elements in the order they are returned by the collection's iterator. The returned
   * array is ""safe"" in that no references to it are maintained by the collection. The caller is
   * thus free to modify the returned array.
   *
   * <p>This method assumes that the collection size doesn't change while the method is running.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,checkElementsNotNull,"com.google.common.collect.ObjectArrays:checkElementsNotNull(java.lang.Object[],int)",219,225,"/**
* Applies a transformation to each element in the provided array of specified length.
* @param array input array with elements to transform
* @param length number of elements in the array
* @return transformed array (or original if m1() didn't modify it)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compare,"com.google.common.collect.Ordering$ArbitraryOrdering:compare(java.lang.Object,java.lang.Object)",355,376,"/**
* Compares two objects using custom comparison logic.
* @param left first object
* @param right second object
* @return -1, 0 or 1 indicating the comparison result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.util.Iterator),561,571,"/**
* Finds the minimum element in an iterator of type E.
* @param iterator iterator containing elements to compare
*/","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead
   * (but note that it does not guarantee which tied minimum element is returned).
   *
   * @param iterator the iterator whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,"com.google.common.collect.ReverseOrdering:max(java.lang.Object,java.lang.Object)",72,75,"/**
* Combines two elements into a single result using m1 operation.
* @param a first element of type E
* @param b second element of type E
* @return combined result of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.util.Iterator),652,662,"/**
* Finds the maximum element in an iterable sequence.
* @param iterator iterator over elements of type E
* @return maximum element or null if empty
*/","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned. The iterator will be left exhausted: its
   * {@code hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead
   * (but note that it does not guarantee which tied maximum element is returned).
   *
   * @param iterator the iterator whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloseAll,com.google.common.collect.Range:encloseAll(java.lang.Iterable),304,322,"/**
* Computes the range of values from an iterable.
* @param values input iterable of comparable values
* @return Range object representing the minimum and maximum values
*/","* Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the
   * given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends.
   *
   * @throws ClassCastException if the values are not mutually comparable
   * @throws NoSuchElementException if {@code values} is empty
   * @throws NullPointerException if any of {@code values} is null
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,"com.google.common.collect.ReverseOrdering:min(java.lang.Object,java.lang.Object)",51,54,"/**
* Combines two elements into a single result using forward-ordering.
* @param a first element to combine
* @param b second element to combine
* @return combined result of type T (or subclass)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(),279,281,"/**
* Retrieves a set of elements using platform-specific implementation.
* @return A set of type E or null if unavailable
*/","* Creates a thread-safe set backed by a hash map. The set is backed by a {@link
   * ConcurrentHashMap} instance, and thus carries the same concurrency guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @return a new, empty thread-safe {@code Set}
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,compare,"com.google.common.collect.Range$RangeLexOrdering:compare(com.google.common.collect.Range,com.google.common.collect.Range)",721,727,"/**
* Compares two ranges using their bounds.
* @param left the first range
* @param right the second range
* @return a comparison result code (e.g., -1, 0, or 1)",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,toString,com.google.common.collect.Range:toString(),681,684,"/**
* Delegate to overloaded version with bounds.
* @param lowerBound lower bound of range (not used in this implementation)
* @param upperBound upper bound of range (not used in this implementation)
* @return result of the overloaded method
*/","* Returns a string representation of this range, such as {@code ""[3..5)""} (other examples are
   * listed in the class documentation).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,lowerEndpoint,com.google.common.collect.Range:lowerEndpoint(),348,350,"/**
* Returns the mask value from the lower bound M1.","* Returns the lower endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded below (that is, {@link
   *     #hasLowerBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,upperEndpoint,com.google.common.collect.Range:upperEndpoint(),374,376,"/**
* Returns the upper bound's first element as a function mask.","* Returns the upper endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded above (that is, {@link
   *     #hasUpperBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,descendingIterator,com.google.common.collect.RegularContiguousSet:descendingIterator(),102,113,"/**
* Returns an iterator over the function mask values.
* @return Iterator over function mask values or null if exhausted.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,iterator,com.google.common.collect.RegularContiguousSet:iterator(),90,100,"/**
* Returns an iterator for iterating over the mask values.
* @return UnmodifiableIterator instance or null if iteration is not possible
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,size,com.google.common.collect.RegularContiguousSet:size(),165,169,"/**
* Calculates and returns an integer mask value based on the Euclidean distance between two points.
* @return integer mask value or Integer.MAX_VALUE if distance exceeds maximum int range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equals,com.google.common.collect.RegularContiguousSet:equals(java.lang.Object),223,234,"/**
* Checks equality with another object, or recursively checks sets.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,size,com.google.common.collect.RegularImmutableBiMap$Inverse:size(),206,209,"/**
* Calls m1() and delegates to its m2() implementation.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap$Inverse:get(java.lang.Object),222,236,"/**
* Retrieves key K from function mask using input value.
* @param value input object to search for
* @return associated key K or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,checkNoConflictInValueBucket,"com.google.common.collect.RegularImmutableBiMap:checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)",136,146,"/**
* Iterates over hash bucket entries and applies FUNC_MASK to each non-matching value.
* @param value Object to be masked
* @param entry Entry object associated with the mask operation
* @param valueBucketHead Head of the hash bucket entry list
*/","* @throws IllegalArgumentException if another entry in the bucket has the same key
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,writeReplace,com.google.common.collect.RegularImmutableBiMap$Inverse:writeReplace(),314,319,"/**
* Returns an inverse serialized form of this bi-map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,removeDuplicates,"com.google.common.collect.RegularImmutableMap:removeDuplicates(java.util.Map$Entry[],int,int,java.util.IdentityHashMap)",186,203,"/**
* Filters and creates a new array of entries based on the provided IdentityHashMap.
* @param entries original entries array
* @param n length of original entries array
* @param newN desired length of new entries array
* @return filtered Entry[] or null if empty
*/","* Constructs a new entry array where each duplicated key from the original appears only once, at
   * its first position but with its final value. The {@code duplicates} map is modified.
   *
   * @param entries the original array of entries including duplicates
   * @param n the number of valid entries in {@code entries}
   * @param newN the expected number of entries once duplicates are removed
   * @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map
   *     will be updated by the method, setting each value to false as soon as the {@link Entry} has
   *     been included in the new entry array.
   * @return an array of {@code newN} entries where no key appears more than once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createKeySet,com.google.common.collect.RegularImmutableMap:createKeySet(),312,315,"/**
* Returns an immutable set of keys.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$KeySet:size(),339,342,"/**
* Calls m1() on underlying data structure (map).
* Returns result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$Values:size(),389,392,"/**
* Calls m1() on underlying map data structure.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,checkNoConflictInKeyBucket,"com.google.common.collect.RegularImmutableMap:checkNoConflictInKeyBucket(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,boolean)",235,256,"/**
* Retrieves an ImmutableMapEntry for the given key, potentially creating a new entry or throwing an exception on duplicate keys.
* @param key object to search for
* @param newValue value to associate with found key (if any)
* @param keyBucketHead head of the bucket to search in
* @param throwIfDuplicateKeys whether to throw BucketOverflowException if key already exists
* @return ImmutableMapEntry or null if not found
*/","* Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If
   * it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an
   * {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is
   * returned.
   *
   * @throws IllegalArgumentException if another entry in the bucket has the same key and {@code
   *     throwIfDuplicateKeys} is true
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,"com.google.common.collect.RegularImmutableMap:get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)",265,287,"/**
* Retrieves a value from the key table using a mask and comparing with the provided key.
* @param key object to search for
* @param keyTable array of immutable map entries
* @param mask bitwise mask applied to indexes
* @return value associated with the matching key, or null if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,hashFloodingDetected,com.google.common.collect.RegularImmutableMultiset:hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]),87,98,"/**
* Checks for hash table overflow by inspecting buckets.
* @param hashTable array of immutable entries
* @return true if any bucket exceeds max length, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,forEachEntry,com.google.common.collect.RegularImmutableSortedMultiset:forEachEntry(java.util.function.ObjIntConsumer),71,77,"/**
* Performs a function on each element in the collection, applying a mask.
* @param action consumer to process elements with their masked values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,last,com.google.common.collect.RegularImmutableSortedSet:last(),215,221,"/**
* Returns a functional mask value based on internal conditions.
* @return functional mask value or throws exception if invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,unsafeBinarySearch,com.google.common.collect.RegularImmutableSortedSet:unsafeBinarySearch(java.lang.Object),156,158,"/**
 * Performs binary search on elements to find matching index using hash function m1. 
 * @param key object used for searching
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,indexOf,com.google.common.collect.RegularImmutableSortedSet:indexOf(java.lang.Object),300,312,"/**
* Retrieves the functional mask index for a given object.
* @param target the object to find the mask index for
* @return non-negative index if found, -1 otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,delegate,com.google.common.collect.ForwardingNavigableSet:delegate(),58,59,"/**
* Returns a navigable set of elements based on the function mask. 
* @return A set containing all applicable elements.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.collect.Sets$PowerSet:iterator(),1740,1748,"/**
* Returns an iterator over subsets of the input set.
* @return Iterator over sets of elements with specified subset size
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,toImmutableEnumSet,com.google.common.collect.Sets:toImmutableEnumSet(),150,152,"/**
* Returns a collector that collects enum values into an immutable set.","* Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}
   * with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the
   * resulting set will iterate over elements in their enum definition order, not encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,com.google.common.collect.Sets:complementOf(java.util.Collection),505,515,"/**
* Merges a collection into an EnumSet.
* @param collection collection to merge
*/","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. If the collection is an {@link EnumSet}, this method has the same behavior as
   * {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one
   * element, in order to determine the element type. If the collection could be empty, use {@link
   * #complementOf(Collection, Class)} instead of this method.
   *
   * @param collection the collection whose complement should be stored in the enum set
   * @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present
   *     in the given collection
   * @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and
   *     contains no elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,"com.google.common.collect.Sets:complementOf(java.util.Collection,java.lang.Class)",527,535,"/**
* Creates an EnumSet from the given Collection and Enum type.
* @param collection Collection of enum values
* @param type Enum class to create set for
* @return EnumSet instance or null if collection is not a valid EnumSet
*/","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input
   * collection, as long as the elements are of enum type.
   *
   * @param collection the collection whose complement should be stored in the {@code EnumSet}
   * @param type the type of the elements in the set
   * @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not
   *     present in the given collection",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,<init>,com.google.common.collect.SortedMultisets$NavigableElementSet:<init>(com.google.common.collect.SortedMultiset),99,101,"/**
 * Constructs a new NavigableElementSet instance from a SortedMultiset.
 * @param multiset the underlying sorted multiset
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,iterator,com.google.common.collect.SortedMultisets$ElementSet:iterator(),57,60,"/**
* Returns an iterator over elements in the multiset created by applying m1(), then m2(), and finally m3() to the initial set.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,comparator,com.google.common.collect.SortedMultisets$ElementSet:comparator(),62,65,"/**
* Returns a comparator instance by delegating to another comparator.
* @return Comparator instance or null if delegate returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$ElementSet:subSet(java.lang.Object,java.lang.Object)",67,70,"/**
* Retrieves a sorted set of elements within the specified range.
* @param fromElement inclusive lower bound element
* @param toElement exclusive upper bound element
* @return SortedSet containing elements in the range",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,com.google.common.collect.SortedMultisets$ElementSet:headSet(java.lang.Object),72,75,"/**
* Retrieves a sorted set of elements up to and including 'toElement'.
*@param toElement the upper bound element for the set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,com.google.common.collect.SortedMultisets$ElementSet:tailSet(java.lang.Object),77,80,"/**
* Retrieves a sorted set of elements based on the provided filtering criteria.
* @param fromElement starting element for the filtered set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,first,com.google.common.collect.SortedMultisets$ElementSet:first(),82,86,"/**
* Calculates and returns the functional mask value.
* @return The result of combining m1(), m2(), and m3() functions.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,last,com.google.common.collect.SortedMultisets$ElementSet:last(),88,92,"/**
* Calculates and returns the function mask value.
* @return The computed function mask value of type E.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnKeySet:iterator(),688,691,"/**
 * Returns an iterator over C values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,updateBackingRowMapField,com.google.common.collect.StandardTable$Row:updateBackingRowMapField(),326,330,"/**
* Initializes or updates backing row map based on key existence.
* @param backingRowMap current backing row map
* @param rowKey unique row identifier
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
* Updates multiple values in a map by key and value.
* @param rowKey Row key
* @param columnKey Column key
* @param value Value to update
* @return Updated value or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.StandardTable:rowMap(),802,806,"/**
* Returns a map of rows to maps of columns to values, 
* potentially fetching from cache if available.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.IntStream),941,945,"/**
* Extracts and boxes the last integer value from a stream.
* @param stream input stream of integers
* @return OptionalInt containing the last value or empty if stream is empty
*/","* Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is
   * empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see IntStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.LongStream),959,963,"/**
* Applies transformation to LongStream, then extracts and wraps last value.
* @param stream input LongStream
* @return OptionalLong containing result or empty if not applicable
*/","* Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see LongStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.DoubleStream),977,981,"/**
* Applies transformations to a DoubleStream, returning an OptionalDouble.
* @param stream input DoubleStream
*/","* Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see DoubleStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedAsMap:values(),1420,1428,"/**
* Returns a synchronized collection of collections, initialized on demand.
* @return Collection<Collection<V>> synchronized collection or null if not initialized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMapEntries:<init>(java.util.Set,java.lang.Object)",959,961,"/**
* Wraps the given set of map entries as a synchronized map.
* @param delegate Set of map entry mappings to synchronize
* @param mutex synchronization lock or null for no locking
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSet:<init>(java.util.SortedSet,java.lang.Object)",309,311,"/**
* Creates a synchronized sorted set with the specified delegate and lock.
* @param delegate the underlying sorted set
* @param mutex the object used for synchronization (may be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized:set(java.util.Set,java.lang.Object)",265,268,"/**
* Creates a synchronized set from the given set, using the provided mutex for synchronization.
* @param set input set to synchronize
* @param mutex synchronization object (may be null)
* @return synchronized Set instance or null if input is null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedCollection:delegate(),131,135,"/**
* Delegates to superclass to fetch collection of type E.
* @return Collection of elements of type E or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedEntry:delegate(),1797,1801,"/**
* Calls superclass's Map.Entry implementation.
* @return A Map.Entry instance with key and value types determined by K and V.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMap:delegate(),1072,1076,"/**
* Calls overridden superclass method to retrieve a map.
* @return A Map object containing key-value pairs.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultimap:delegate(),602,606,"/**
* Returns a multimap instance by delegating to superclass implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedTable:delegate(),2046,2050,"/**
* Returns a table instance with type parameters.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedDeque:<init>(java.util.Deque,java.lang.Object)",1902,1904,"/**
 * Initializes a synchronized deque with a specified underlying deque and synchronization object.
 * @param delegate the underlying deque to synchronize
 * @param mutex the object used for synchronization
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,queue,"com.google.common.collect.Synchronized:queue(java.util.Queue,java.lang.Object)",1841,1843,"/**
* Wraps a queue with synchronization if not already synchronized.
* @param queue input queue to synchronize
* @param mutex object for synchronization lock
* @return synchronized queue or original queue if already synchronized
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedRandomAccessList:<init>(java.util.List,java.lang.Object)",482,484,"/**
 * Initializes a synchronized random access list with the given list and synchronization mutex.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multiset,"com.google.common.collect.Synchronized:multiset(com.google.common.collect.Multiset,java.lang.Object)",489,495,"/**
* Wraps a Multiset instance with a synchronized or immutable lock.
* @param multiset input Multiset to be protected
* @param mutex optional synchronization object; null for default locking
* @return synchronized or immutable version of input Multiset
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,get,"com.google.common.collect.Tables$TransformedTable:get(java.lang.Object,java.lang.Object)",430,438,"/**
* Executes a query and returns result if successful, otherwise null.
* @param rowKey unique table identifier
* @param columnKey unique column identifier
* @return V2 object or null on failure
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,remove,"com.google.common.collect.Tables$TransformedTable:remove(java.lang.Object,java.lang.Object)",463,469,"/**
* Applies M4 to the result of M3 on a table value if condition in M1 is met.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return V2 object or null if condition not met
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,delegate,com.google.common.collect.Tables$UnmodifiableRowSortedMap:delegate(),651,654,"/**
* Calls superclass implementation of m1 to fetch data.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,partition,"com.google.common.collect.TopKSelector:partition(int,int,int)",215,229,"/**
* Reorders elements in the buffer array around a pivot value.
* @param left start index
* @param right end index
* @param pivotIndex index of the pivot element
* @return new index of the pivot element
*/","* Partitions the contents of buffer in the range [left, right] around the pivot element
   * previously stored in buffer[pivotValue]. Returns the new index of the pivot element,
   * pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in
   * (pivotNewIndex, right] is greater than pivotValue.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,hasPrevious,com.google.common.collect.TransformedListIterator:hasPrevious(),41,44,"/**
* Calls and returns result of m1(), which is expected to call m2().
* This implementation relies on m1() to handle the actual logic.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previous,com.google.common.collect.TransformedListIterator:previous(),46,50,"/**
* Recursively calls m2 on result of m1 and returns result.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,nextIndex,com.google.common.collect.TransformedListIterator:nextIndex(),52,55,"/**
* Calls m1() to perform some operation and returns its result.
* @return result of m1() execution or -1 if failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previousIndex,com.google.common.collect.TransformedListIterator:previousIndex(),57,60,"/**
* Calls and returns the result of m1(), which in turn calls this method.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,comparator,com.google.common.collect.TreeBasedTable$TreeRow:comparator(),207,210,"/**
* Returns comparator for sorting based on mask values.
* @return Comparator object for custom ordering",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,computeBackingRowMap,com.google.common.collect.TreeBasedTable$TreeRow:computeBackingRowMap(),270,284,"/**
* Retrieves a filtered sorted map of values within the specified bounds.
* @return SortedMap object or null if no data is available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,maintainEmptyInvariant,com.google.common.collect.TreeBasedTable$TreeRow:maintainEmptyInvariant(),286,294,"/**
* Resets the row cache and invalidates the current row.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,createCollection,com.google.common.collect.TreeMultimap:createCollection(java.lang.Object),144,150,"/**
* Calls superclass's m3 method after potentially invoking m1() and m2().
* @param key object to search for in the collection
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,writeObject,com.google.common.collect.TreeMultimap:writeObject(java.io.ObjectOutputStream),208,215,"/**
* Serializes object to output stream.
* @throws IOException if serialization fails
*/","* @serialData key comparator, value comparator, number of distinct keys, and then for each
   *     distinct key: the key, number of values for that key, and key values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeMultiset,com.google.common.collect.TreeMultiset$AvlNode:recomputeMultiset(),935,939,"/**
* Updates mask-related properties by processing left and right subtrees.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeHeight,com.google.common.collect.TreeMultiset$AvlNode:recomputeHeight(),941,943,"/**
* Calculates and sets the height of the element based on left and right values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,balanceFactor,com.google.common.collect.TreeMultiset$AvlNode:balanceFactor(),972,974,"/**
 * Calculates functional difference between two values.
 * @return Difference value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,successor,"com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)",1052,1056,"/**
* Recursively updates AVL tree nodes in-place.
* @param a first node
* @param b second node
* @param c third node (optional)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,elementIterator,com.google.common.collect.TreeMultiset:elementIterator(),440,443,"/**
* Returns an iterator over elements in the multiset created by m1().
* @return Iterator over E elements or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,comparator,com.google.common.collect.TreeMultiset:comparator(),61,64,"/**
* Returns a comparator instance used to mask values.
* @return Comparator instance for masking values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap$SubRangeMap:equals(java.lang.Object),633,640,"/**
* Recursively checks if the given object contains a valid RangeMap.
* @param o Object to check, may be null
* @return true if valid RangeMap found, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap$SubRangeMap:hashCode(),642,645,"/**
* Calls and returns result of m2() from retrieved m1() instance.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,toString,com.google.common.collect.TreeRangeMap$SubRangeMap:toString(),647,650,"/**
* Calls and returns result of m1(), which in turn calls m2().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap:equals(java.lang.Object),812,819,"/**
* Recursively checks the input object for a valid RangeMap instance.
* @param o Object to check, may be null
* @return true if RangeMap is found and recursively processed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap:hashCode(),821,824,"/**
* Calls m1() and delegates to its m2() implementation.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,<init>,com.google.common.escape.CharEscaper:<init>(),46,46,"/**
* Initializes default character escaper instance.",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,<init>,com.google.common.escape.UnicodeEscaper:<init>(),59,59,"/**
* Constructor to create an instance of UnicodeEscaper. 
* This constructor is typically used internally by the library and should not be called directly from user code.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escapeSlow,"com.google.common.escape.CharEscaper:escapeSlow(java.lang.String,int)",96,156,"/**
* Escapes special characters in a string and returns the result.
* @param s input string to be processed
* @return escaped string or null if processing fails
*/","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.CharEscaper,char)",171,173,"/**
* Escapes a single character using the provided CharEscaper.
* @param escaper Character escaping strategy
* @param c character to be escaped
* @return escaped character or null if not applicable","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves
   * to its public interface.
   *
   * @param c the character to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.UnicodeEscaper,int)",184,186,"/**
* Escapes Unicode character with given code point using provided escape strategy.
* @param escaper Unicode escaping strategy to use
* @param cp Unicode code point to escape
* @return escaped string or null if unsuccessful
*/","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit
   * themselves to its public interface.
   *
   * @param cp the Unicode code point to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$ImmediateDispatcher:dispatch(java.lang.Object,java.util.Iterator)",185,191,"/**
* Processes a functional mask event by invoking the 'm1' method and iterating over active subscribers to notify them of the event.
* @param event functional mask event object
* @param subscribers iterator of currently subscribed objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:dispatch(java.lang.Object,java.util.Iterator)",157,168,"/**
* Processes event mask updates.
* @param event Object containing event data
* @param subscribers Iterator of subscribers to notify
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:dispatch(java.lang.Object,java.util.Iterator)",98,120,"/**
* Dispatches event to subscribers and updates thread state.
* @param event Event object to be dispatched
* @param subscribers Iterator of Subscriber objects
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,logger,com.google.common.eventbus.EventBus$LoggingHandler:logger(com.google.common.eventbus.SubscriberExceptionContext),286,288,"/**
* Creates a logger instance with a specific mask.
* @param context Subscriber exception context
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,message,com.google.common.eventbus.EventBus$LoggingHandler:message(com.google.common.eventbus.SubscriberExceptionContext),290,301,"/**
* Generates a formatted exception message from the provided context.
* @param context SubscriberExceptionContext object containing relevant details
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,<init>,"com.google.common.eventbus.Subscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",56,63,"/**
* Initializes a new subscriber instance with the specified event bus, target object, and method.
* @param bus EventBus instance
* @param target Target object to subscribe to events
* @param method Method to invoke on target when events occur
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,validateEndpoints,com.google.common.graph.AbstractBaseGraph:validateEndpoints(com.google.common.graph.EndpointPair),179,182,"/**
* Validates and processes endpoint pairs.
* @param endpoints pair of endpoints to process
*/","* Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible
   * with the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Evaluates endpoint pair for function mask.
* @param endpoints pair of nodes to check
* @return true if valid, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ForwardingGraph:predecessors(java.lang.Object),70,73,"/**
* Delegate call to m1() to perform recursive operation on the given node. 
* @param node Node object to operate on 
* @return Resulting set of N objects",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,advance,com.google.common.graph.EndpointPairIterator:advance(),55,63,"/**
* Advances to the next node and its successors in a graph traversal.
*/","* Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node
   * and updates {@link #successorIterator} to iterate through the successors of {@link #node}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ForwardingGraph:successors(java.lang.Object),75,78,"/**
* Recursively calls and chains m1() to compute m2.
* @param node Node object for computation
* @return Set of N objects computed by m2
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,size,com.google.common.graph.IncidentEdgeSet:size(),41,50,"/**
* Calculates the result of M3 based on graph conditions and node values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,contains,com.google.common.graph.IncidentEdgeSet:contains(java.lang.Object),52,79,"/**
* Evaluates whether an EndpointPair is valid given the graph state.
* @param obj EndpointPair object to validate
* @return true if pair is valid, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Undirected:computeNext(),123,145,"/**
* Iteratively searches for a successor node and returns an endpoint pair.
* @return EndpointPair object or null if no successors found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",63,65,"/**
* Computes and returns an endpoint pair based on the graph's type.
* @param graph the input graph object
* @param nodeU and nodeV the two nodes to consider
*/",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Network,java.lang.Object,java.lang.Object)",68,70,"/**
* Resolves endpoint pair for given network and nodes.
* @param network network instance
* @param nodeU first node identifier
* @param nodeV second node identifier
* @return EndpointPair object or null if not found
*/",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Directed:computeNext(),74,85,"/**
* Recursively returns a pair of endpoints to mask.
* @return Pair of masked endpoint and next iterator, or null if complete
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.EndpointPair),292,297,"/**
* Returns a new EndpointPair with the first endpoint masked and the second unchanged, 
* unless both are identical, in which case it returns the original pair.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractGraph:edges(),66,99,"/**
* Returns a set of EndpointPairs, iterating over all pairs in the graph.
*@return Set of EndpointPairs
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph:edges(),66,99,"/**
* Returns a set of endpoint pairs with their respective masks.
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,validateEndpoints,com.google.common.graph.AbstractNetwork:validateEndpoints(com.google.common.graph.EndpointPair),244,247,"/**
 * Processes endpoint pairs and handles mismatches.
 * @param endpoints EndpointPair object to process
 */","* Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with
   * the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,inEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:inEdges(),58,61,"/**
 * Returns a set of functional masks.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,outEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:outEdges(),63,66,"/**
* Returns a set of function masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",74,80,"/**
* Computes functional mask value based on edge and self-loop flag.
* @param edge input edge object
* @param isSelfLoop true if the edge represents a self-loop, false otherwise
* @return masked value of type N or null for self-loops
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.DirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),114,122,"/**
* Recursively traverses graph, updating node and its successors.
* @param edge Graph edge to traverse
* @return Updated Node object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,iterator,com.google.common.graph.EdgesConnecting:iterator(),47,53,"/**
* Returns an iterator over the connected edges, either from a single edge or all edges if none is found.
* @return UnmodifiableIterator over E type elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,size,com.google.common.graph.EdgesConnecting:size(),55,58,"/**
* Returns non-zero value if mask is present, zero otherwise.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,contains,com.google.common.graph.EdgesConnecting:contains(java.lang.Object),60,64,"/**
* Checks if an edge matches a functional mask.
* @param edge nullable object to evaluate against the mask
* @return true if edge matches, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,hashCode,com.google.common.graph.EndpointPair$Ordered:hashCode(),183,186,"/**
* Calculates and returns the combined mask value using m1() and m2() functions.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,toString,com.google.common.graph.EndpointPair$Ordered:toString(),188,191,"/**
* Combines results of m1 and m2 methods into a formatted string.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Ordered:equals(java.lang.Object),166,181,"/**
* Compares this endpoint pair with another for equality.
* @param obj EndpointPair object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,iterator,com.google.common.graph.EndpointPair$Unordered:iterator(),125,128,"/**
* Returns an iterator over edge masks of the graph.
*@return Iterator over edge masks or null if no edges exist
*/","Iterates in the order {@link #nodeU()}, {@link #nodeV()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Unordered:equals(java.lang.Object),214,241,"/**
* Compares this EndpointPair with another, checking for equality based on pair's components.
* @param obj the other EndpointPair to compare with
* @return true if the pairs are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodes,com.google.common.graph.ImmutableGraph:nodes(),31,34,"/**
* Delegates to m1() and returns its result.
* @return set of N objects or null if m1() fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,isDirected,com.google.common.graph.ImmutableGraph:isDirected(),45,48,"/**
* Calls m1() to execute its logic and then calls its m2() method.
* Returns true if m1()'s m2() returns true, false otherwise. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableGraph:allowsSelfLoops(),50,53,"/**
* Calls m1 to fetch its result and then calls m2 on that result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodeOrder,com.google.common.graph.ImmutableGraph:nodeOrder(),55,58,"/**
* Recursively calls m1 to fetch and returns its result's ElementOrder.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,adjacentNodes,com.google.common.graph.ImmutableGraph:adjacentNodes(java.lang.Object),65,68,"/**
* Delegates call to m1() and retrieves result from it.
* @param node Node object to process
* @return Set of N objects or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,incidentEdges,com.google.common.graph.ImmutableGraph:incidentEdges(java.lang.Object),80,83,"/**
* Delegates to m1() to fetch endpoint pairs for the given node.
* @param node Node object
* @return Set of EndpointPairs or empty set if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,degree,com.google.common.graph.ImmutableGraph:degree(java.lang.Object),85,88,"/**
* Recursively calls m1() to perform some operation and returns its result for the given node.
* @param node Node object to operate on
* @return Result of the operation as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,inDegree,com.google.common.graph.ImmutableGraph:inDegree(java.lang.Object),90,93,"/**
* Recursively calls m1() to fetch and execute node's operation.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,outDegree,com.google.common.graph.ImmutableGraph:outDegree(java.lang.Object),95,98,"/**
* Recursively calls m1() to perform some operation and then delegates to node's m2().
* @param node N object, likely containing a reference to m1()'s result or other relevant data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",100,103,"/**
* Calls recursive algorithm to check if two nodes are in same set.
* @param nodeU first node to compare
* @param nodeV second node to compare
* @return true if nodes are in same set, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),105,108,"/**
* Calls m1() and delegates to its m2() implementation.
* @param endpoints pair of endpoints for m1()'s m2() call
* @return result of m1()'s m2() call
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingValueGraph.java,successors,com.google.common.graph.ForwardingValueGraph:successors(java.lang.Object),78,81,"/**
 * Delegates call to m1() to perform M2 operation on the given node.
 * @param node node object to operate on
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,nodeOrder,com.google.common.graph.GraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),149,153,"/**
* Creates a graph builder with the specified element order.
* @param nodeOrder Element order to apply
*/","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,incidentEdgeOrder,com.google.common.graph.GraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),168,178,"/**
* Creates a graph builder with the specified element order.
* @param incidentEdgeOrder specifies how edges are ordered
*/","* Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link
   * Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link
   * Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedGraph:predecessors(java.lang.Object),313,316,"/**
* Computes function mask for given node.
* @param node Node object to process
* @return Set of N objects representing function mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedGraph:successors(java.lang.Object),318,321,"/**
* Computes functional mask for given node.
* @param node input node for which to compute mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedGraph:inDegree(java.lang.Object),335,338,"/**
* Computes the mask value for a given node based on recursive calculations.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedGraph:outDegree(java.lang.Object),340,343,"/**
* Calculates function mask value based on node properties.
* @param node Node object to process
* @return Function mask integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",345,348,"/**
* Calls m1() with reversed node order and returns its result.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Graph),248,258,"/**
* Returns a transposed version of the input graph, or the original graph if it's already transposed.
* @param graph input graph to be transformed
* @return TransposedGraph object or the original graph if not needed
*/","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Network),280,290,"/**
* Converts a Network to its transposed form.
* @param network original network instance
* @return the transposed network or the original if not applicable
*/","* Returns a view of {@code network} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code network} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedNetwork:predecessors(java.lang.Object),433,436,"/**
 * Computes functional mask for a given graph node.
 * @param node graph node to compute mask for
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedNetwork:successors(java.lang.Object),438,441,"/**
* Computes functional mask for given node.
* @param node input data structure (type N)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedNetwork:inDegree(java.lang.Object),443,446,"/**
* Calculates the function mask for a given node.
* @param node input node to process
* @return integer result of m1() and m2() operations
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedNetwork:outDegree(java.lang.Object),448,451,"/**
* Computes mask value for given node.
* @param node Node object to compute mask for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inEdges,com.google.common.graph.Graphs$TransposedNetwork:inEdges(java.lang.Object),453,456,"/**
* Computes the set of nodes in the search space.
* @param node current node being processed
* @return Set of node identifiers (E)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outEdges,com.google.common.graph.Graphs$TransposedNetwork:outEdges(java.lang.Object),458,461,"/**
* Applies mask operation on the given graph node.
* @param node graph node to operate on
* @return set of E values resulting from the operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",469,472,"/**
* Delegate call to m1() with nodes swapped.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",479,482,"/**
* Invokes m1() and delegates result to its m2() method with swapped nodes.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",489,492,"/**
* Calls m1() to fetch an intermediate result and then swaps input nodes before querying it. 
* @param nodeU first graph node
* @param nodeV second graph node
* @return E result type object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",499,502,"/**
* Calls m1() with swapped nodes and returns its result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.ValueGraph),264,274,"/**
* Converts a ValueGraph into its transposed equivalent.
* @param graph input graph to be transposed
* @return the transposed ValueGraph or original if not transposable
*/","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedValueGraph:predecessors(java.lang.Object),370,373,"/**
* Computes function mask for the given node.
* @param node input node to compute mask for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedValueGraph:successors(java.lang.Object),375,378,"/**
 * Computes and returns the set of function masks for the given node.
 * @param node input node to compute masks for
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedValueGraph:inDegree(java.lang.Object),380,383,"/**
* Computes the functional mask value for the given node.
* @param node Node object to compute mask value for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedValueGraph:outDegree(java.lang.Object),385,388,"/**
* Calculates a mask value based on the given node.
* @param node Node object to process
* @return calculated mask value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",390,393,"/**
* Calls m1() to evaluate mirrored relation between nodes. 
* @param nodeU first node in comparison
* @param nodeV second node in comparison
* @return true if nodes are related, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(java.lang.Object,java.lang.Object)",400,403,"/**
* Calls m1() to delegate computation and returns result of m2() on swapped nodes. 
* @param nodeU first node in computation
* @param nodeV second node in computation
* @return Optional containing V value or empty if not found",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",410,413,"/**
* Invokes recursive version of m2() on the current graph.
* @param nodeU first node
* @param nodeV second node
* @param defaultValue default value to return if not found
* @return result of m2() or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,asGraph,com.google.common.graph.ImmutableNetwork:asGraph(),77,80,"/**
* Delegates to superclass to compute graph and wraps result in an immutable graph.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,asGraph,com.google.common.graph.ImmutableValueGraph:asGraph(),79,82,"/**
* Creates an immutable graph representation of this instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgeOrder,com.google.common.graph.ImmutableNetwork:edgeOrder(),125,128,"/**
* Returns the mask element order.
* @return ElementOrder instance representing the mask element's ordering.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodeOrder,com.google.common.graph.ImmutableNetwork:nodeOrder(),120,123,"/**
* Returns the order of element nodes in this collection.
* @return ElementOrder object representing the ordering of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsSelfLoops,com.google.common.graph.ImmutableNetwork:allowsSelfLoops(),115,118,"/**
* Checks if function can have self-loops.
* @return true if self-loops are allowed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsParallelEdges,com.google.common.graph.ImmutableNetwork:allowsParallelEdges(),110,113,"/**
* Checks whether edge parallelism is allowed.
* @return true if parallel edges are allowed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,isDirected,com.google.common.graph.ImmutableNetwork:isDirected(),105,108,"/**
* Checks if the graph is directed.
* @return true if directed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodes,com.google.common.graph.ImmutableNetwork:nodes(),95,98,"/**
* Returns a set of node identifiers.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodeOrder,com.google.common.graph.ImmutableValueGraph:nodeOrder(),98,101,"/**
* Returns the element order for mask operations.
* @return ElementOrder object representing mask operation order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableValueGraph:allowsSelfLoops(),93,96,"/**
* Checks whether function masks are allowed.
* @return true if self-loops are permitted, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,isDirected,com.google.common.graph.ImmutableValueGraph:isDirected(),88,91,"/**
* Returns whether this graph has directed edges.
* @return true if edges are directed, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodes,com.google.common.graph.ImmutableValueGraph:nodes(),83,86,"/**
* Returns a set of nodes with specific mask.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,put,"com.google.common.graph.MapIteratorCache:put(java.lang.Object,java.lang.Object)",62,68,"/**
* Stores key-value pair in backing map.
* @param key unique identifier
* @param value associated data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,remove,com.google.common.graph.MapIteratorCache:remove(java.lang.Object),70,75,"/**
* Retrieves value from backing map using provided key.
* @param key object to search by
* @return value associated with the key or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,clear,com.google.common.graph.MapIteratorCache:clear(),77,80,"/**
 * Invokes primary and secondary map operations.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,clearCache,com.google.common.graph.MapRetrievalCache:clearCache(),83,88,"/**
 * Clears inherited state and cache entries.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,containsKey,com.google.common.graph.MapIteratorCache:containsKey(java.lang.Object),98,100,"/**
* Checks if a key exists in the map.
* @param key nullable object to search by
* @return true if key is present, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.StandardNetwork:edges(),100,103,"/**
* Returns a set of referenced nodes based on current edge configuration.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,getIfCached,com.google.common.graph.MapRetrievalCache:getIfCached(java.lang.Object),57,81,"/**
* Retrieves cached value by key, prioritizing super class and then local cache entries.
* @param key unique identifier to fetch
* @return cached object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,addToCache,"com.google.common.graph.MapRetrievalCache:addToCache(java.lang.Object,java.lang.Object)",90,92,"/**
* Wraps key-value pair in a CacheEntry object and calls m1 recursively.
* @param key unique identifier
* @param value associated data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,nodeOrder,com.google.common.graph.NetworkBuilder:nodeOrder(com.google.common.graph.ElementOrder),176,180,"/**
* Creates a new NetworkBuilder instance with the specified element order.
* @param nodeOrder ElementOrder object defining network topology
* @return A new NetworkBuilder instance with customized settings
*/","* Specifies the order of iteration for the elements of {@link Network#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,edgeOrder,com.google.common.graph.NetworkBuilder:edgeOrder(com.google.common.graph.ElementOrder),187,191,"/**
* Configures network builder with specified element order.
* @param edgeOrder ElementOrder object defining ordering rules
*/","* Specifies the order of iteration for the elements of {@link Network#edges()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$1:newTraversal(),345,345,"/**
* Returns an abstract Traversal object with customizable flags. 
* @return Traversal object with configurable traversal behavior
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser$Traversal$2:<init>(com.google.common.graph.SuccessorsFunction),364,366,"/**
* Initializes graph traversal with a custom successors function.
* @param successorFunction function to retrieve next nodes in traversal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser$Traversal:breadthFirst(java.util.Iterator),409,411,"/**
* Converts an iterator of nodes to a masked iterator.
* @param startNodes input node iterator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,preOrder,com.google.common.graph.Traverser$Traversal:preOrder(java.util.Iterator),413,415,"/**
* Returns an iterator over nodes in insertion order from front.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,predecessors,com.google.common.graph.UndirectedGraphConnections:predecessors(),69,72,"/**
* Returns a set of function masks.
* @return Set of N objects representing function masks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,successors,com.google.common.graph.UndirectedGraphConnections:successors(),74,77,"/**
* Returns a set of function masks.
* @return Set of N objects representing function masks
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,removePredecessor,com.google.common.graph.UndirectedGraphConnections:removePredecessor(java.lang.Object),91,95,"/**
* Applies mask operation to given node.
* @param node Node object to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,addPredecessor,"com.google.common.graph.UndirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",102,106,"/**
* Calls mask-related function on a given node with specified value.
* @param node Node object to be processed
* @param value Value associated with the operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.UndirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),92,100,"/**
* Performs M operation on a graph edge, updating the associated node and its neighbors.
* @param edge E object representing the graph edge
* @return N object representing the updated node
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,nodeOrder,com.google.common.graph.ValueGraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),153,157,"/**
* Creates a ValueGraphBuilder with specified element order.
* @param nodeOrder ElementOrder instance to be applied
*/","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,incidentEdgeOrder,com.google.common.graph.ValueGraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),172,183,"/**
* Creates a ValueGraphBuilder instance with the specified incident edge order.
* @param incidentEdgeOrder element order to use for graph construction
*/","* Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link
   * ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link
   * ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(byte[]),41,43,"/**
 * Calls m1 with array and offset defaults to 0 and length of array.
 * @param b input byte array
 */",Updates this hasher with the given bytes.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(java.nio.ByteBuffer),53,62,"/**
* Processes ByteBuffer data using recursive or iterative approach based on a condition.
* @param b input buffer to process
*/",Updates this hasher with bytes from the given buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(int),65,73,"/**
* Initializes hasher with given byte count.
* @param bytes number of bytes to hash
*/",Updates the sink with the given number of bytes from the buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(),53,60,"/**
* Invokes m1() on each function in the collection and returns a Hasher array.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(int),62,70,"/**
* Computes and combines hashes using multiple functions.
* @param expectedInputSize size of input to be hashed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putDouble,com.google.common.hash.AbstractHasher:putDouble(double),36,40,"/**
* Computes hash code for double value using Mersenne Twister hashing. 
* @param d input double to be hashed
* @return hash code as a long integer value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.Hasher:putLong(long),82,84,"/**
* Calculates hash code for given long value.
* @param l input value to be hashed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putFloat,com.google.common.hash.AbstractHasher:putFloat(float),42,46,"/**
* Computes a hash code from a float value using m2 and m1 functions.
* @param f input float value to be hashed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putUnencodedChars,com.google.common.hash.AbstractHasher:putUnencodedChars(java.lang.CharSequence),48,55,"/**
* Updates hash code using characters from CharSequence.
* @param charSequence sequence to process
* @return this Hasher instance for chaining
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.Hasher:putChar(char),101,103,"/**
* Computes a hash code for the given character.
* @param c single character to be hashed
* @return Hasher object or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,putBytes,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(java.nio.ByteBuffer),98,102,"/**
 * Initializes hasher with input data from ByteBuffer.
 * @param bytes input buffer containing hashable data
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hash,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:hash(),104,107,"/**
* Computes hash code using the M3 function.
* @return hash code value as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,processRemaining,com.google.common.hash.AbstractStreamingHasher:processRemaining(java.nio.ByteBuffer),81,90,"/**
* Initializes and formats the ByteBuffer with FUNC_MASK data.
* @param bb ByteBuffer to be modified
*/","* This is invoked for the last bytes of the input, which are not enough to fill a whole chunk.
   * The passed {@code ByteBuffer} is guaranteed to be non-empty.
   *
   * <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munch,com.google.common.hash.AbstractStreamingHasher:munch(),212,220,"/**
* Processes input buffer to mask or compress data.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,com.google.common.hash.BloomFilter$SerialForm:<init>(com.google.common.hash.BloomFilter),571,576,"/**
* Initializes a SerialForm object from a BloomFilter instance.
* @param bf the BloomFilter to deserialize
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,equals,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:equals(java.lang.Object),297,305,"/**
* Compares a given object to a LockFreeBitArray instance and returns true if it's compatible.
* @param o the object to compare
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,hashCode,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:hashCode(),307,311,"/**
* Calls m2 function on data and returns result.
* @return result of m2 function applied to data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,apply,com.google.common.hash.BloomFilter:apply(java.lang.Object),164,169,"/**
* Calls m1() with potentially null input.
* @param input object to pass to m1()
* @return result of m1() call
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain}
   *     instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long,double)",369,385,"/**
* Creates a Bloom filter collector with specified false positive probability.
* @param funnel funnel for collecting data
* @param expectedInsertions estimated number of unique elements to insert
* @param fpp target false positive probability (0 < fpp <= 1)
*/","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with the specified expected false positive probability.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,bitSize,com.google.common.hash.BloomFilter:bitSize(),237,240,"/**
* Calls underlying m1 method in Bits class.
* @return result of underlying m1 method
*/",Returns the number of bits in the underlying bit array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,com.google.common.io.ReaderInputStream:read(),122,125,"/**
* Determines result of 'm1' function based on single byte value and calls 'm2' if applicable.
* @return result of 'm1' or -1 if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,saturatedCast,com.google.common.primitives.UnsignedBytes:saturatedCast(long),111,119,"/**
* Converts a long integer to a byte, clamping it within the valid range.
* @param value input value
*/","* Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code
   * value}.
   *
   * @param value any {@code long} value
   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and
   *     {@code value} cast to {@code byte} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes:compare(byte,byte)",131,133,"/**
* Calculates the difference between two 8-bit values after applying a transformation function.
* @param a first 8-bit value
* @param b second 8-bit value
* @return integer result of the difference
*/","* Compares the two specified {@code byte} values, treating them as unsigned values between 0 and
   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}
   * because it is seen as having the value of positive {@code 129}.
   *
   * @param a the first {@code byte} to compare
   * @param b the second {@code byte} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,"com.google.common.primitives.UnsignedBytes:toString(byte,int)",194,201,"/**
* Converts integer to string representation in given radix.
* @param x integer value
* @param radix base of the number system (e.g. 10 for decimal)
*/","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,putAll,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray),258,267,"/**
* Merges two LockFreeBitArrays by comparing and copying corresponding bits.
* @param other the bit array to merge with
*/","* Combines the two BitArrays using bitwise OR.
     *
     * <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while
     * this operation is executing, not all of those new 1's may be set in the final state of this
     * LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other
     * LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end
     * of this method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,set,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:set(long),188,209,"/**
* Sets a flag at the specified bit index using bitwise operations.
* @param bitIndex target bit index
*/",Returns true if the bit changed value.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,equalsSameBits,com.google.common.hash.HashCode$BytesHashCode:equalsSameBits(com.google.common.hash.HashCode),307,320,"/**
* Compares byte arrays between two objects.
* @param that object to compare with
* @return true if byte arrays match, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,hashCode,com.google.common.hash.HashCode:hashCode(),383,397,"/**
* Computes and returns a mask value based on various conditions and byte array operations.
* @return int representing the computed mask value
*/","* Returns a ""Java hash code"" for this {@code HashCode} instance; this is well-defined (so, for
   * example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise
   * probably not what you want to use.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,toString,com.google.common.hash.HashCode:toString(),410,418,"/**
* Converts raw byte array to a hexadecimal string representation.
*/","* Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,fromByteArray,com.google.common.primitives.Longs:fromByteArray(byte[]),308,312,"/**
* Extracts a 64-bit mask from the given byte array.
* @param bytes input byte array
*/","* Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the
   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the
   * {@code long} value {@code 0x1213141516171819L}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,process,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:process(java.nio.ByteBuffer),81,97,"/**
* Updates CRC values from ByteBuffer.
* @param bb input data
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,processRemaining,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:processRemaining(java.nio.ByteBuffer),99,112,"/**
* Updates CRC checksum using input data from ByteBuffer.
* @param bb input ByteBuffer containing data to update CRC
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,weakHashLength32WithSeeds,"com.google.common.hash.FarmHashFingerprint64:weakHashLength32WithSeeds(byte[],int,long,long,long[])",100,115,"/**
* Computes masked hash using two seeds and outputs two values.
* @param bytes input byte array
* @param offset starting position in bytes array
* @param seedA first seed value
* @param seedB second seed value
* @param output array to store computed values (length 2)
*/","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array because when we last measured, this was 12% faster than allocating
   * new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,weakHashLength32WithSeeds,"com.google.common.hash.Fingerprint2011:weakHashLength32WithSeeds(byte[],int,long,long,long[])",95,110,"/**
* Computes masked hash values using the provided seeds and byte array.
* @param bytes input byte array
* @param offset starting index in the byte array
* @param seedA first intermediate seed value
* @param seedB second intermediate seed value
* @param output two-element long array to store the computed hash values
*/","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array - this is 12% faster than allocating new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength17to32,"com.google.common.hash.FarmHashFingerprint64:hashLength17to32(byte[],int,int)",142,150,"/**
* Computes function mask value from byte array.
* @param bytes input data
* @param offset starting index
* @param length data length
* @return computed long value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength33To64,"com.google.common.hash.FarmHashFingerprint64:hashLength33To64(byte[],int,int)",152,166,"/**
* Computes FUNC_MASK using bitwise operations on input byte array.
* @param bytes input data
* @param offset starting position in bytes
* @param length number of bytes to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength0to16,"com.google.common.hash.FarmHashFingerprint64:hashLength0to16(byte[],int,int)",117,140,"/**
* Computes a function value based on the provided byte array and offset.
* @param bytes input byte array
* @param offset starting position in the array
* @return result of the computed function, or K2 if length is 0
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashLength33To64,"com.google.common.hash.Fingerprint2011:hashLength33To64(byte[],int,int)",148,169,"/**
* Computes a hash value from the provided byte array.
* @param bytes input data
* @param offset starting position in bytes
* @param length number of bytes to process
* @return hash result as a long integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,murmurHash64WithSeed,"com.google.common.hash.Fingerprint2011:murmurHash64WithSeed(byte[],int,int,long)",171,196,"/**
* Computes a hash value for the given byte array using the provided seed.
* @param bytes input byte array
* @param offset starting index in the array
* @param length number of bytes to process
* @param seed initial value for the hash calculation
* @return computed hash value as a long integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,writeReplace,com.google.common.hash.Funnels$StringCharsetFunnel:writeReplace(),121,123,"/**
* Creates and returns a serialized form mask.
* @return SerializedForm instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$BytesHashCode:<init>(byte[]),253,255,"/**
* Initializes the hash code from the given byte array.
* @param bytes input byte array to compute hash code from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$IntHashCode:<init>(int),121,123,"/**
* Initializes an integer hash code value.
* @param hash unique identifier hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$LongHashCode:<init>(long),178,180,"/**
* Initializes hash value from provided long hash code.
* @param hash unique identifier hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asLong,com.google.common.hash.HashCode$BytesHashCode:asLong(),279,286,"/**
* Calculates function mask based on input byte array length.
* @return function mask value or throws exception if invalid
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,padToLong,com.google.common.hash.HashCode$IntHashCode:padToLong(),145,148,"/**
* Calculates and returns the FUNC_MASK value based on hash.
* @return FUNC_MASK value as an unsigned integer.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,longValue,com.google.common.primitives.UnsignedInteger:longValue(),186,189,"/**
* Calculates function mask value using m1() function.",Returns the value of this {@code UnsignedInteger} as a {@code long}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,divide,"com.google.common.primitives.UnsignedInts:divide(int,int)",286,288,"/**
* Calculates the integer mask by dividing the dividend by the divisor.
* @param dividend value to be divided
* @param divisor value to divide by
* @return result of division as an integer
*/","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,remainder,"com.google.common.primitives.UnsignedInts:remainder(int,int)",300,302,"/**
* Calculates the mask value as the remainder of dividing two integers.
* @param dividend number to be divided
* @param divisor  number by which to divide
* @return non-negative integer mask value
*/","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,crc32cConstructor,com.google.common.hash.Hashing$Crc32cMethodHandles:crc32cConstructor(),532,555,"/**
* Retrieves the CRC32C method handle from java.util.zip.CRC32C class.
* @return MethodHandle object for CRC32C method or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32,com.google.common.hash.Hashing:murmur3_32(int),111,115,"/**
* Creates a 32-bit hash function with a specified seed.
* @param seed initial value for the hash function
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known
   * bug</b> as described in the deprecation text.
   *
   * <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not
   * have the bug.
   *
   * @deprecated This implementation produces incorrect hash values from the {@link
   *     HashFunction#hashString} method if the string contains non-BMP characters. Use {@link
   *     #murmur3_32_fixed(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32_fixed,com.google.common.hash.Hashing:murmur3_32_fixed(int),148,151,"/**
* Creates a 32-bit hash function with the specified seed.
* @param seed initial value for hashing
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A).
   *
   * <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code
   * HashFunction} returned by the original {@code murmur3_32} method.
   *
   * @since 31.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_128,com.google.common.hash.Hashing:murmur3_128(int),177,180,"/**
* Creates a hash function instance with a specified seed value.
* @param seed initial seed value
*/","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">128-bit murmur3
   * algorithm, x64 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(long,int)",672,687,"/**
* Generates a hash mask by iterating through Linear Congruential Generator.
* @param input seed value for the generator
* @param buckets maximum number of possible values in the mask
* @return unique hash mask index (0 <= result < buckets)
*/","* Assigns to {@code input} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner that
   * minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h,
   * n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,newHasher,com.google.common.hash.MacHashFunction:newHasher(),79,89,"/**
* Creates a MAC-based hasher instance.
* @return Hasher object or null if cloning fails
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,<init>,"com.google.common.hash.MacHashFunction:<init>(java.lang.String,java.security.Key,java.lang.String)",45,51,"/**
* Initializes a MAC hash function with the given algorithm name and key.
* @param algorithmName name of the MAC algorithm (e.g. ""HMAC-SHA-256"")
* @param key cryptographic key for the MAC
* @param toString string representation of the MAC
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,newHasher,com.google.common.hash.MessageDigestHashFunction:newHasher(),90,100,"/**
* Returns a Hasher instance based on the clone capability.
* @return MessageDigestHasher if supported, or a fallback instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,java.lang.String)",46,51,"/**
* Initializes a hash function using the specified message digest algorithm.
* @param algorithmName name of the message digest algorithm (e.g. ""SHA-256"")
* @param toString human-readable description of the hash function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,int,java.lang.String)",53,61,"/**
* Initializes a message digest hash function with the specified algorithm name, 
* maximum output length in bytes, and string representation. 
* @param algorithmName name of the hashing algorithm (e.g., ""SHA-256"")
* @param bytes maximum output length in bytes
* @param toString string representation of the hash value",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,bmix64,"com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:bmix64(long,long)",110,122,"/**
* Updates hash values using bitwise operations and mixing functions.
* @param k1 first key value
* @param k2 second key value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,processRemaining,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:processRemaining(java.nio.ByteBuffer),124,167,"/**
* Computes hash values from ByteBuffer input.
* @param bb input ByteBuffer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,newHasher,com.google.common.hash.Murmur3_32HashFunction:newHasher(),84,87,"/**
* Returns a hasher instance with FUNC_MASK properties.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putByte,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putByte(byte),295,300,"/**
* Sets a single byte mask value.
* @param b single byte mask value (0-255)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putInt,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putInt(int),331,336,"/**
* Returns a Hasher instance with the specified function mask (i).",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putLong,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putLong(long),338,344,"/**
* Initializes hasher with a 64-bit mask from the given long value.
* @param l 64-bit integer to derive mask from
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putChar,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putChar(char),346,351,"/**
* Returns a new instance of Hasher with the given character's mask value. 
* @param c character to compute mask for",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,getIntLittleEndian,"com.google.common.hash.Murmur3_32HashFunction:getIntLittleEndian(byte[],int)",240,242,"/**
* Extracts a 32-bit integer value from the input byte array using the provided offset.
* @param input the input byte array
* @param offset starting position of the integer in the byte array
* @return extracted integer value as an int
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,fromByteArray,com.google.common.primitives.Ints:fromByteArray(byte[]),347,350,"/**
* Extracts a 32-bit mask from the first four bytes of the input array.
* @param bytes input byte array
*/","* Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of
   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input
   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code
   * 0x12131415}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,processM,com.google.common.hash.SipHashFunction$SipHasher:processM(long),157,161,"/**
* Updates mask values using input 'm' and calls subsequent functions. 
* @param m long value used to update mask bits
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(char[],int,int)",54,60,"/**
* Writes masked characters to the target.
* @param cbuf character buffer to process
* @param off starting offset in the buffer
* @param len number of characters to write
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(int),66,70,"/**
* Processes an input character using mask function.
* @param c input character to be processed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(java.lang.String),72,77,"/**
 * Performs a sequence of operations on the input string.
 * @param str input string to process
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(java.lang.String,int,int)",79,85,"/**
 * Applies mask function to specified string range.
 * @param str input string
 * @param off starting offset
 * @param len length of masked substring
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,flush,com.google.common.io.AppendableWriter:flush(),87,93,"/**
* Calls m1 and optionally flushes target by calling its m2 implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(char),103,108,"/**
* Continues writing with the given character.
* @param c the character to write
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(java.lang.CharSequence),110,115,"/**
* Invokes M2 on the target and returns this instance.
* @param charSeq optional character sequence to pass to M2
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,"com.google.common.io.AppendableWriter:append(java.lang.CharSequence,int,int)",117,122,"/**
* Overridden method to write to target stream with specified range.
* @param charSeq character sequence to write
* @param start starting index of the range
* @param end ending index of the range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,"com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[],int,int)",574,578,"/**
* Constructs a byte source from the specified byte array.
* @param bytes underlying byte array
* @param offset starting index of relevant data
* @param length number of bytes to consider
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ConcatenatedByteSource:<init>(java.lang.Iterable),677,679,"/**
* Constructs a concatenated byte source from an iterable of byte sources.
* @param sources iterable of byte sources to concatenate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$FileByteSource:<init>(java.io.File),125,127,"/**
* Initializes a FileByteSource instance with a specified local file.
* @param file local file to be used as source
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$UrlByteSource:<init>(java.net.URL),63,65,"/**
* Initializes the UrlByteSource with a URL.
* @param url unique URL reference
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding$Alphabet:decode(char),531,544,"/**
* Returns the decoding value for a single ASCII character.
* @param ch Character to decode
* @return Decoding value or -1 if unknown, throws DecodingException otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,equals,com.google.common.io.BaseEncoding$StandardBaseEncoding:equals(java.lang.Object),935,943,"/**
* Compares this encoding with another for equality.
* @param other the encoding to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hashCode,com.google.common.io.BaseEncoding$StandardBaseEncoding:hashCode(),945,948,"/**
* Computes bitwise XOR of 'm1' values from alphabet and padding character.
* @return result of the XOR operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$SeparatedBaseEncoding:<init>(com.google.common.io.BaseEncoding,java.lang.String,int)",1145,1151,"/**
* Initializes a separated base encoding with the given delegate, separator, and interval.
* @param delegate base encoding to delegate to
* @param separator string to insert between encoded characters
* @param afterEveryChars number of characters before inserting the separator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",623,630,"/**
* Initializes encoding with specified alphabet and optional padding character.
* @param alphabet Alphabet instance
* @param paddingChar Optional padding character or null for no padding
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$CharSequenceCharSource:<init>(java.lang.CharSequence),541,543,"/**
* Initializes CharSource with a CharSequence.
* @param seq input sequence (cannot be null)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$ConcatenatedCharSource:<init>(java.lang.Iterable),691,693,"/**
* Initializes ConcatenatedCharSource with an iterable of CharSources.
* @param sources collection of input streams to concatenate
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asByteSource,com.google.common.io.ByteSource$AsCharSource:asByteSource(java.nio.charset.Charset),451,457,"/**
* Delegates byte source handling to superclass or returns this instance if compatible.
* @param charset the character encoding to test for compatibility
* @return ByteSource object, either this instance or the superclass's result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$ByteArrayByteSource:openBufferedStream(),585,588,"/**
* Returns an input stream for mask data.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asCharSource,com.google.common.io.ByteSource$EmptyByteSource:asCharSource(java.nio.charset.Charset),656,660,"/**
* Returns a CharSource instance based on the provided charset.
* @param charset target character set
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$SlicedByteSource:slice(long,long)",529,537,"/**
* Retrieves a segment of the file as a ByteSource.
* @param offset starting position in bytes
* @param length requested data size in bytes
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,asCharSource,com.google.common.io.CharSource$AsByteSource:asCharSource(java.nio.charset.Charset),516,522,"/**
* Delegates char source processing to superclass or returns this instance based on charset compatibility. 
* @param charset Charset object for comparison
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,asCharSource,com.google.common.io.MoreFiles$PathByteSource:asCharSource(java.nio.charset.Charset),167,184,"/**
* Returns a CharSource for the file at path with specified charset.
* If options are empty, returns an AsCharSource wrapping the file stream.
* Otherwise, delegates to superclass implementation. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.io.InputStream,java.io.OutputStream)",108,123,"/**
* Copies data from input stream to output stream.
* @param from InputStream source
* @param to OutputStream destination
* @return total bytes copied
*/","* Copies all bytes from the input stream to the output stream. Does not close or flush either
   * stream.
   *
   * <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the
   * equivalent {@link InputStream#transferTo} method instead.
   *
   * @param from the input stream to read from
   * @param to the output stream to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,exhaust,com.google.common.io.ByteStreams:exhaust(java.io.InputStream),289,298,"/**
* Calculates the total bytes that can be read from an InputStream.
* @param in InputStream to calculate total readable bytes for
* @return Total count of bytes or 0 if unable to read
*/","* Reads and discards data from the given {@code InputStream} until the end of the stream is
   * reached. Returns the total number of bytes read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readBytes,"com.google.common.io.ByteStreams:readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)",895,909,"/**
* Processes InputStream using ByteProcessor and returns result.
* @param input InputStream to process
* @param processor ByteProcessor instance for processing
* @return T object processed from InputStream or null if not found
*/","* Process the bytes of the given input stream using the given processor.
   *
   * @param input the input stream to process
   * @param processor the object to which to pass the bytes of the stream
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(java.io.ByteArrayInputStream),329,332,"/**
* Creates a ByteArrayDataInputStream from the given ByteArrayInputStream.
* @param byteArrayInputStream input stream containing binary data
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the given {@code
   * ByteArrayInputStream}. The given input stream is not reset before being read from by the
   * returned {@code ByteArrayDataInput}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(java.io.ByteArrayOutputStream),514,517,"/**
* Creates a wrapped data output stream with masking functionality.
* @param byteArrayOutputStream underlying byte array output stream
*/","* Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code
   * ByteArrayOutputStream}. The given output stream is not reset before being written to by the
   * returned {@code ByteArrayDataOutput} and new data will be appended to any existing content.
   *
   * <p>Note that if the given output stream was not empty or is modified after the {@code
   * ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will
   * not be honored (the bytes returned in the byte array may not be exactly what was written via
   * calls to {@code ByteArrayDataOutput}).
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)",105,115,"/**
* Initializes ReaderInputStream with specified reader, charset encoder, and buffer size.
* @param reader input stream reader
* @param encoder charset encoder for encoding/decoding data
* @param bufferSize minimum buffer size to allocate
*/","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set encoder.
   *
   * @param reader input source
   * @param encoder character set encoder used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,startDraining,com.google.common.io.ReaderInputStream:startDraining(boolean),242,249,"/**
* Handles buffer overflow and updates the byte buffer accordingly.
* @param overflow flag indicating a potential overflow
*/","* Flips the buffer output buffer so we can start reading bytes from it. If we are starting to
   * drain because there was overflow, and there aren't actually any characters to drain, then the
   * overflow must be due to a small output buffer.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)",134,162,"/**
* Copies data from one channel to another, handling both file and non-file channels.
* @param from input ReadableByteChannel
* @param to output WritableByteChannel
* @return number of bytes copied or -1 on failure
*/","* Copies all bytes from the readable channel to the writable channel. Does not close or flush
   * either channel.
   *
   * @param from the readable channel to read from
   * @param to the writable channel to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,readLine,com.google.common.io.LineReader:readLine(),70,84,"/**
* Reads and returns the next line as a string.
*/","* Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code
   * '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a
   * linefeed ({@code ""\r\n""}).
   *
   * @return a {@code String} containing the contents of the line, not including any
   *     line-termination characters, or {@code null} if the end of the stream has been reached.
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipUpTo,"com.google.common.io.ByteStreams:skipUpTo(java.io.InputStream,long)",843,872,"/**
* Skips or reads up to n bytes from the input stream.
* @param in InputStream to read from
* @param n number of bytes to skip or read
* @return actual number of bytes skipped or read
*/","* Discards up to {@code n} bytes of data from the input stream. This method will block until
   * either the full amount has been skipped or until the end of the stream is reached, whichever
   * happens first. Returns the total number of bytes skipped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,ready,com.google.common.io.CharSequenceReader:ready(),123,127,"/**
 * Returns whether function mask is enabled.
 * @return true if function mask is enabled, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,mark,com.google.common.io.CharSequenceReader:mark(int),134,139,"/**
* Sets read-ahead limit and marks current position.
* @param readAheadLimit non-negative integer specifying read-ahead limit
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,reset,com.google.common.io.CharSequenceReader:reset(),141,145,"/**
* Updates the current position to the marked position.
* Marks the current position and updates the position pointer. 
* @throws IOException if an I/O error occurs during marking.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,hasRemaining,com.google.common.io.CharSequenceReader:hasRemaining(),56,58,"/**
* Evaluates and returns true if mask value is positive.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,skip,com.google.common.io.CharSequenceReader:skip(long),114,121,"/**
* Advances file position by skipping characters based on input mask.
* @param n input value for masking calculation
* @return number of characters skipped or -1 if error occurs
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.Iterator,java.lang.String)",148,157,"/**
* Writes masked lines to output stream.
* @param lines iterator of CharSequence to process
* @param lineSeparator string used to separate lines
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource$CharSequenceCharSource:lines(),592,595,"/**
* Applies two intermediate functions (m1 and m2) sequentially to produce a stream of strings.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource$CharSequenceCharSource:readFirstLine(),597,601,"/**
* Returns the function mask based on iterator results.
* @return function mask string or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(com.google.common.io.LineProcessor),608,618,"/**
* Processes input using a LineProcessor, returning the result.
* @param processor LineProcessor instance to process input
* @return T object processed by processor or null if failed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource:lines(),157,161,"/**
* Processes input stream to extract strings.
* @throws IOException if an I/O error occurs
*/","* Opens a new {@link Stream} for reading text one line at a time from this source. This method
   * returns a new, independent stream each time it is called.
   *
   * <p>The returned stream is lazy and only reads from the source in the terminal operation. If an
   * I/O error occurs while the stream is reading from the source or when the stream is closed, an
   * {@link UncheckedIOException} is thrown.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * <p>The caller is responsible for ensuring that the returned stream is closed. For example:
   *
   * {@snippet :
   * try (Stream<String> lines = source.lines()) {
   *   lines.map(...)
   *      .filter(...)
   *      .forEach(...);
   * }
   * }
   *
   * @throws IOException if an I/O error occurs while opening the stream
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,exhaust,com.google.common.io.CharStreams:exhaust(java.lang.Readable),237,247,"/**
* Calculates the total number of characters in a Readable.
* @param readable source to fetch characters from
* @return total character count or 0 if error occurs
*/","* Reads and discards data from the given {@code Readable} until the end of the stream is reached.
   * Returns the total number of chars read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,<init>,com.google.common.io.LineReader:<init>(java.lang.Readable),56,59,"/**
* Initializes a new instance of LineReader with the provided Readable source.
* @param readable input source, can be a Reader or any other type of Readable
*/",Creates a new instance that will read lines from the given {@code Readable} object.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.InputStream),112,118,"/**
* Wraps input stream with error handling and masking. 
* @param inputStream input stream to mask
*/","* Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that
   * a failure that occurs when closing the stream indicates a meaningful problem such as a failure
   * to flush all bytes to the underlying resource.
   *
   * @param inputStream the input stream to be closed, or {@code null} in which case this method
   *     does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.Reader),133,139,"/**
* Wraps the provided Reader in a mask function.
* @param reader input data source
*/","* Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a
   * failure that occurs when closing the reader indicates a meaningful problem such as a failure to
   * flush all bytes to the underlying resource.
   *
   * @param reader the reader to be closed, or {@code null} in which case this method does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,openInputStream,com.google.common.io.FileBackedOutputStream:openInputStream(),165,173,"/**
* Returns an InputStream for the file or in-memory data.
* @throws IOException on I/O errors
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,update,com.google.common.io.FileBackedOutputStream:update(int),232,255,"/**
* Adjusts internal buffers to prevent exceeding file threshold.
* @param len new buffer length
*/","* Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if
   * so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,reset,com.google.common.io.FileBackedOutputStream:reset(),181,199,"/**
* Cleans up resources and deletes temporary files.
* @throws IOException if deletion fails
*/","* Calls {@link #close} if not already closed, and then resets this object back to its initial
   * state, for reuse. If data was buffered to a file, it will be deleted.
   *
   * @throws IOException if an I/O error occurred while deleting the file buffer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,asCharSource,"com.google.common.io.Files:asCharSource(java.io.File,java.nio.charset.Charset)",209,211,"/**
* Wraps a File with a CharSource interface.
* @param file input file
* @param charset character encoding to use
*/","* Returns a new {@link CharSource} for reading character data from the given file using the given
   * character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Flushables.java,flushQuietly,com.google.common.io.Flushables:flushQuietly(java.io.Flushable),70,77,"/**
* Flushes the given output stream.
* @param flushable output stream to be flushed
*/","* Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the
   * signature.
   *
   * @param flushable the {@code Flushable} object to be flushed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,checkAllowsInsecure,"com.google.common.io.MoreFiles:checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])",743,748,"/**
* Validates recursive delete option to prevent insecure deletes.
* @param path directory path
* @param options array of recursive delete options
* @throws InsecureRecursiveDeleteException if ALLOW_INSECURE not set
*/","Checks that the given options allow an insecure delete, throwing an exception if not.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,grow,com.google.common.io.ReaderInputStream:grow(java.nio.CharBuffer),194,200,"/**
* Creates a larger buffer with the same contents as the input buffer.
* @param buf input buffer to copy and expand
* @return expanded buffer or null if original was null
*/","Returns a new CharBuffer identical to buf, except twice the capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,add,"com.google.common.io.LineBuffer:add(char[],int,int)",52,86,"/**
* Processes a character buffer to extract lines and returns.
* @param cbuf input character array
* @param off starting offset in the buffer
* @param len length of data in the buffer
*/","* Process additional characters from the stream. When a line separator is found the contents of
   * the line and the line separator itself are passed to the abstract {@link #handleLine} method.
   *
   * @param cbuf the character buffer to process
   * @param off the offset into the buffer
   * @param len the number of characters to process
   * @throws IOException if an I/O error occurs
   * @see #finish",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,finish,com.google.common.io.LineBuffer:finish(),104,108,"/**
* Handles mask-related functionality based on return status and line data.
* @throws IOException if an I/O error occurs
*/","* Subclasses must call this method after finishing character processing, in order to ensure that
   * any unterminated line in the buffer is passed to {@link #handleLine}.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readByte,com.google.common.io.LittleEndianDataInputStream:readByte(),210,214,"/**
* Returns the function mask as a single byte.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readBoolean,com.google.common.io.LittleEndianDataInputStream:readBoolean(),216,220,"/**
* Checks for function mask availability.
* @return true if available, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readUnsignedShort,com.google.common.io.LittleEndianDataInputStream:readUnsignedShort(),97,104,"/**
* Calculates a function mask value from bytes retrieved by m1(). 
* @return integer function mask value
*/","* Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()},
   * except using little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readInt,com.google.common.io.LittleEndianDataInputStream:readInt(),114,123,"/**
* Calculates FUNC_MASK value by reading 4 bytes from a source and combining them into an integer. 
* @throws IOException if an I/O error occurs during data read
*/","* Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian
   * byte order.
   *
   * @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readLong,com.google.common.io.LittleEndianDataInputStream:readLong(),133,146,"/**
* Constructs and returns the FUNC_MASK value as a 64-bit long.
*/","* Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code long} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChar,com.google.common.io.LittleEndianDataOutputStream:writeChar(int),82,85,"/**
 * Applies mask function to given integer value.
 * @param v input integer value
 */","* Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeFloat,com.google.common.io.LittleEndianDataOutputStream:writeFloat(float),117,120,"/**
* Applies floating-point masking function to input value.
* @param v input float value
* @throws IOException if an I/O error occurs during computation
*/","* Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeLong,com.google.common.io.LittleEndianDataOutputStream:writeLong(long),142,145,"/**
* Writes long value to output stream using DataOutputStream. 
* @param v long value to be written
*/","* Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,size,com.google.common.io.MoreFiles$PathByteSource:size(),145,158,"/**
* Retrieves the file size from BasicFileAttributes.
* @throws IOException if file is a directory or symbolic link
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelyInsecure,com.google.common.io.MoreFiles:deleteRecursivelyInsecure(java.nio.file.Path),664,683,"/**
* Retrieves a collection of IOExceptions for the specified file system path.
* @param path file system path to process
*/","* Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsSecure,com.google.common.io.MoreFiles:deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream),646,658,"/**
* Collects IOExceptions from iterating over the directory stream.
* @param dir Directory stream to iterate over
* @return Collection of IOExceptions or null if successful
*/","* Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,advance,com.google.common.io.MultiInputStream:advance(),62,67,"/**
* Applies mask operation based on input conditions.
* @throws IOException if an I/O error occurs
*/","Closes the current input stream and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,advance,com.google.common.io.MultiReader:advance(),45,50,"/**
* Updates current state based on mask configuration.
*/","Closes the current reader and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,asCharSource,"com.google.common.io.Resources:asCharSource(java.net.URL,java.nio.charset.Charset)",83,85,"/**
* Wraps URL with Charset using m1.
 @param url  The input URL to be wrapped
 @param charset The character set to use for wrapping
*/","* Returns a {@link CharSource} that reads from the given URL using the given character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,roundToDoubleArbitrarily,com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:roundToDoubleArbitrarily(java.math.BigInteger),334,337,"/**
* Calculates FUNC MASK value from BigInteger.
* @param bigInteger input number as a BigInteger object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,divide,"com.google.common.math.IntMath:divide(int,int,java.math.RoundingMode)",312,367,"/**
* Computes the division result with rounding.
* @param p dividend
* @param q divisor
* @param mode RoundingMode to apply
* @return rounded quotient
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,divide,"com.google.common.math.LongMath:divide(long,long,java.math.RoundingMode)",377,430,"/**
* Computes the result of p / q with specified rounding mode.
* @param p dividend
* @param q divisor
* @param mode RoundingMode to apply
* @return rounded quotient as a long value
*/","* Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code
   * RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is
   * equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR},
   * then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}.
   *
   * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}
   *     is not an integer multiple of {@code b}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,factorial,com.google.common.math.DoubleMath:factorial(int),305,318,"/**
* Calculates the nth factorial value.
* @param n input number
* @return double result of factorial calculation or POSITIVE_INFINITY if too large
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! >
   * Double.MAX_VALUE}.
   *
   * <p>The result is within 1 ulp of the true value.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,pow,"com.google.common.math.IntMath:pow(int,int)",221,253,"/**
* Computes the functional mask value for a given base and exponent.
* @param b base value
* @param k exponent (bit shift)
*/","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,gcd,"com.google.common.math.IntMath:gcd(int,int)",402,445,"/**
* Calculates the bitwise XOR of two integers using the Fast Walsh-Hadamard Transform algorithm.
* @param a first integer
* @param b second integer
* @return result of a ^ b
*/","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,factorial,com.google.common.math.IntMath:factorial(int),626,629,"/**
* Returns the nth factorial value or MAX_INT if out of bounds.
* @param n non-negative integer index
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,binomial,"com.google.common.math.IntMath:binomial(int,int)",653,676,"/**
* Calculates the binomial coefficient using dynamic programming.
* @param n total number of items
* @param k number of chosen items
* @return the binomial coefficient or Integer.MAX_VALUE if out of bounds
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,pow,"com.google.common.math.LongMath:pow(long,int)",262,296,"/**
* Computes a function mask value based on the input exponent.
* @param b input value (-2 <= b <= 2)
* @param k exponent
* @return computed function mask value
*/","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,factorial,com.google.common.math.LongMath:factorial(int),755,759,"/**
* Calculates the nth factorial value, returning MAX_VALUE if out of range.
* @param n input integer index
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,listProduct,com.google.common.math.BigIntegerMath:listProduct(java.util.List),436,438,"/**
* Calculates M2 value using provided list of numbers.
* @param nums list of BigIntegers to process
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,checkFinite,com.google.common.math.DoubleMath:checkFinite(double),524,529,"/**
* Applies two transformations (m1 and m2) to an input value, then returns the original value.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,getSignificand,com.google.common.math.DoubleUtils:getSignificand(double),63,69,"/**
* Calculates the function mask for a given double value.
* @param d input double value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,mapping,"com.google.common.math.LinearTransformation:mapping(double,double)",53,56,"/**
* Creates a linear transformation builder with specified input point.
* @param x1 horizontal coordinate of the point
* @param y1 vertical coordinate of the point
*/","* Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be
   * finite. Call either {@link LinearTransformationBuilder#and} or {@link
   * LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyEquals,"com.google.common.math.DoubleMath:fuzzyEquals(double,double,double)",363,369,"/**
* Checks if two floating-point numbers are within a specified tolerance.
* @param a first number
* @param b second number
* @param tolerance maximum difference allowed
*/","* Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.
   *
   * <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance ||
   * Double.valueOf(a).equals(Double.valueOf(b))}.
   *
   * <p>Notable special cases include:
   *
   * <ul>
   *   <li>All NaNs are fuzzily equal.
   *   <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.
   *   <li>Positive and negative zero are always fuzzily equal.
   *   <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}
   *       and {@code b} are fuzzily equal if and only if {@code a == b}.
   *   <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.
   *   <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code
   *       Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.
   * </ul>
   *
   * <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an
   * equivalence relation and <em>not</em> suitable for use in {@link Object#equals}
   * implementations.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/ToDoubleRounder.java,roundToDouble,"com.google.common.math.ToDoubleRounder:roundToDouble(java.lang.Number,java.math.RoundingMode)",45,151,"/**
* Rounds a value to the nearest double using the specified rounding mode.
* @param x the value to round
* @param mode the rounding mode (e.g. DOWN, UP, CEILING, FLOOR)
*/",Rounds {@code x} to a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,ceilingPowerOfTwo,com.google.common.math.IntMath:ceilingPowerOfTwo(int),63,69,"/**
* Calculates the power of two that is just less than or equal to the given value.
* @param x input value
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as an {@code
   *     int}, i.e. when {@code x > 2^30}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,floorPowerOfTwo,com.google.common.math.IntMath:floorPowerOfTwo(int),78,81,"/**
* Calculates and returns a mask value from input integer x.
* @param x input integer
* @return resulting mask value
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log2,"com.google.common.math.IntMath:log2(int,java.math.RoundingMode)",114,141,"/**
* Computes a mask value based on the input integer and rounding mode.
* @param x input integer
* @param mode RoundingMode to apply
* @return int mask value
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10Floor,com.google.common.math.IntMath:log10Floor(int),178,192,"/**
* Calculates the mask value from input integer.
* @param x input integer
* @return mask value as integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,sqrt,"com.google.common.math.IntMath:sqrt(int,java.math.RoundingMode)",262,294,"/**
* Calculates the integer square root of a value using specified rounding mode.
* @param x input value
* @param mode rounding mode (e.g. UNNECESSARY, FLOOR, CEILING)
* @return integer square root or result of rounding operation
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedAdd,"com.google.common.math.IntMath:checkedAdd(int,int)",455,458,"/**
* Adds two integers with overflow handling.
* @param a first integer value
* @param b second integer value
*/","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedSubtract,"com.google.common.math.IntMath:checkedSubtract(int,int)",468,471,"/**
* Computes exact difference between two integers.
* @param a first integer
* @param b second integer
* @return result of subtraction or 0 if overflow occurs
*/","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedMultiply,"com.google.common.math.IntMath:checkedMultiply(int,int)",481,484,"/**
* Multiplies two integers exactly without overflow.
* @param a first integer
* @param b second integer
*/","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double)",174,178,"/**
* Initializes a regular linear transformation with specified slope and y-intercept.
* @param slope rate of change (y = mx + b)
* @param yIntercept constant term in the linear equation (b) 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double,com.google.common.math.LinearTransformation)",180,184,"/**
* Initializes a regular linear transformation with specified slope and intercept.
* @param slope the rate of change
* @param yIntercept the constant term
* @param inverse the inverse linear transformation, if any
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double),232,235,"/**
* Initializes vertical linear transformation with specified scaling factor.
* @param x scaling factor (x-axis magnitude)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double,com.google.common.math.LinearTransformation)",237,240,"/**
* Initializes a vertical linear transformation with specified scale factor and inverse. 
* @param x scale factor of transformation
* @param inverse inverse linear transformation to apply in addition",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,testWitness,"com.google.common.math.LongMath$MillerRabinTester:testWitness(long,long)",1184,1207,"/**
* Tests whether base is a quadratic nonresidue modulo n.
* @param base value to test
* @param n modulus
* @return true if base is a quadratic nonresidue, false otherwise
*/",Returns true if n is a strong probable prime relative to the specified base.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,ceilingPowerOfTwo,com.google.common.math.LongMath:ceilingPowerOfTwo(long),63,69,"/**
* Calculates the function mask for a given input value.
* @param x input value
*/","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as a {@code
   *     long}, i.e. when {@code x > 2^62}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,floorPowerOfTwo,com.google.common.math.LongMath:floorPowerOfTwo(long),78,84,"/**
* Calculates a mask value from an input number.
* @param x input number
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log2,"com.google.common.math.LongMath:log2(long,java.math.RoundingMode)",116,143,"/**
* Calculates a mask value based on the input long and rounding mode.
* @param x input long
* @param mode RoundingMode enum value
* @return int mask value
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10Floor,com.google.common.math.LongMath:log10Floor(long),181,196,"/**
* Calculates the function mask value from a given long integer.
* @param x input long integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,gcd,"com.google.common.math.LongMath:gcd(long,long)",488,531,"/**
* Computes the FUNC_MASK value using bitwise operations.
* @param a first long value
* @param b second long value
* @return FUNC_MASK result
*/","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mod,"com.google.common.math.LongMath:mod(long,int)",450,454,"/**
* Wraps call to m1 with long and int parameters.
* @param x input value as long
* @param m input value as int
* @return integer result of m1
*/","* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %
   * m}, which might be negative.
   *
   * <p>For example:
   *
   * {@snippet :
   * mod(7, 4) == 3
   * mod(-7, 4) == 1
   * mod(-1, 4) == 3
   * mod(-8, 4) == 0
   * mod(8, 4) == 0
   * }
   *
   * @throws ArithmeticException if {@code m <= 0}
   * @see <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"">
   *     Remainder Operator</a>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedAdd,"com.google.common.math.LongMath:checkedAdd(long,long)",541,544,"/**
* Computes exact sum of two integers.
* @param a first integer value
* @param b second integer value
*/","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedSubtract,"com.google.common.math.LongMath:checkedSubtract(long,long)",554,557,"/**
* Calculates the difference between two 64-bit integers, avoiding overflow.
* @param a first value
* @param b second value
* @return result of subtraction or throws ArithmeticException if overflow occurs
*/","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedMultiply,"com.google.common.math.LongMath:checkedMultiply(long,long)",567,570,"/**
* Multiplies two long values exactly.
* @param a first value
* @param b second value
*/","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,saturatedPow,"com.google.common.math.LongMath:saturatedPow(long,int)",698,745,"/**
* Calculates the FUNC_MASK value based on input long b and int k.
* @param b input long value
* @param k exponent value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,count,com.google.common.math.PairedStats:count(),67,69,"/**
* Calls m1() on xStats instance and returns result.
*/",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,equals,com.google.common.math.PairedStats:equals(java.lang.Object),215,227,"/**
* Compares this object with the given object for equality.
* @param obj Object to compare, or null if not equal
* @return true if objects are equal, false otherwise
*/","* {@inheritDoc}
   *
   * <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating
   * point values. Two instances are guaranteed to be considered equal if one is copied from the
   * other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both
   * were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without
   * adding any values in between the two calls, or if one is obtained from the other after
   * round-tripping through java serialization. However, floating point rounding errors mean that it
   * may be false for some instances where the statistics are mathematically equal, including
   * instances constructed from the same values in a different order... or (in the general case)
   * even in the same order. (It is guaranteed to return true for instances constructed from the
   * same values in the same order if {@code strictfp} is in effect, or if the system architecture
   * guarantees {@code strictfp}-like semantics.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,<init>,com.google.common.math.PairedStatsAccumulator:<init>(),37,37,"/**
* Initializes a new instance of PairedStatsAccumulator. 
* This constructor is used to create an empty accumulator object.
*/",Creates a new accumulator.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,calculateNewMeanNonFinite,"com.google.common.math.StatsAccumulator:calculateNewMeanNonFinite(double,double)",404,429,"/**
* Computes a masked mean value based on input and previous mean.
* @param previousMean initial mean value
* @param value new value to consider
* @return the computed mean value or NaN if invalid
*/","* Calculates the new value for the accumulated mean when a value is added, in the case where at
   * least one of the previous mean and the value is non-finite.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,count,com.google.common.math.PairedStatsAccumulator:count(),100,102,"/**
* Calls m1() on xStats object and returns result.
*/",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,ensureInUnitRange,com.google.common.math.PairedStatsAccumulator:ensureInUnitRange(double),241,243,"/**
* Masks input value to range [-1.0, 1.0].
* @param value input value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,median,com.google.common.math.Quantiles:median(),142,144,"/**
* Calculates and returns a scale and index value using the m1 and m2 functions.
*/",Specifies the computation of a median (i.e. the 1st 2-quantile).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,quartiles,com.google.common.math.Quantiles:quartiles(),147,149,"/**
* Returns a Scale instance with mask value of 4. 
* @return Scale instance with specified mask value.",Specifies the computation of quartiles (i.e. 4-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,percentiles,com.google.common.math.Quantiles:percentiles(),152,154,"/**
 * Returns a Scale instance with a mask value of 100. 
 */",Specifies the computation of percentiles (i.e. 100-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,movePivotToStartOfSlice,"com.google.common.math.Quantiles:movePivotToStartOfSlice(double[],int,int)",603,620,"/**
* Recursively partitions the array into two halves based on the given bounds.
* @param array input array to partition
* @param from start index of the range
* @param to end index of the range
*/","* Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and
   * halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if
   * necessary) that that pivot value appears at the start of the slice i.e. at {@code from}.
   * Expects that {@code from} is strictly less than {@code to}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,readFrom,com.google.common.math.Stats:readFrom(java.nio.ByteBuffer),647,660,"/**
* Creates a Stats object from the provided ByteBuffer.
* @param buffer input data stream
*/","* Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this
   *     instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,snapshot,com.google.common.math.StatsAccumulator:snapshot(),220,222,"/**
* Creates and returns a Stats object with calculated values.
* @return Stats object containing count, mean, sum of squares of deltas, min, and max
*/",Returns an immutable snapshot of the current statistics.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPort,com.google.common.net.HostAndPort:getPort(),111,114,"/**
* Computes and returns the mask value.
* @return The final mask value
*/","* Get the current port number, failing if no port is defined.
   *
   * @return a validated port number, in the range [0..65535]
   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}
   *     to prevent this from occurring.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPortOrDefault,com.google.common.net.HostAndPort:getPortOrDefault(int),117,119,"/**
* Returns port value based on condition (m1()) or uses default port.
* @param defaultPort fallback port number
*/","Returns the current port number, with a default if no port is defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,toString,com.google.common.net.HostAndPort:toString(),295,308,"/**
* Formats host and port into a URL string.
* @return formatted URL or null
*/","Rebuild the host:port string, including brackets if necessary.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,withDefaultPort,com.google.common.net.HostAndPort:withDefaultPort(int),249,255,"/**
* Returns a HostAndPort object with the specified default port.
* Initializes internal state using m1 and m2 methods.
* If m3 condition is met, returns this instance; otherwise,
* creates a new HostAndPort object.","* Provide a default port if the parsed string contained only a host.
   *
   * <p>You can chain this after {@link #fromString(String)} to include a port in case the port was
   * omitted from the input string. If a port was already provided, then this method is a no-op.
   *
   * @param defaultPort a port number, from [0..65535]
   * @return a HostAndPort instance, guaranteed to have a defined port.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV4,com.google.common.net.InetAddresses:textToNumericFormatV4(java.lang.String),241,264,"/**
* Converts IP string to byte array representation.
* @param ipString IPv4 address in dotted decimal format
* @return Byte array or null if invalid IP format
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV6,com.google.common.net.InetAddresses:textToNumericFormatV6(java.lang.String),266,334,"/**
* Extracts and formats IPv6 address from input string.
* @param ipString the input string to parse
* @return formatted byte array representation of IPv6 address or null on error
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toAddrString,com.google.common.net.InetAddresses:toAddrString(java.net.InetAddress),466,481,"/**
* Generates a mask string for the given IP address.
* @param ip IP address to process
*/","* Returns the string representation of an {@link InetAddress}.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses, the output follows <a href=""http://tools.ietf.org/html/rfc5952"">RFC 5952</a> section
   * 4. The main difference is that this method uses ""::"" for zero compression, while Java's version
   * uses the uncompressed form (except on Android, where the zero compression is also done). The
   * other difference is that this method outputs any scope ID in the format that it was provided at
   * creation time, while Android may always output it as an interface name, even if it was supplied
   * as a numeric ID.
   *
   * <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses
   * such as ""::c000:201"".
   *
   * @param ip {@link InetAddress} to be converted to an address string
   * @return {@code String} containing the text-formatted IP address
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,isIsatapAddress,com.google.common.net.InetAddresses:isIsatapAddress(java.net.Inet6Address),857,875,"/**
* Checks if IP address matches specific mask criteria.
* @param ip Inet6Address to verify
* @return true if IP matches mask, false otherwise
*/","* Evaluates whether the argument is an ISATAP address.
   *
   * <p>From RFC 5214: ""ISATAP interface identifiers are constructed in Modified EUI-64 format [...]
   * by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit
   * IPv4 address in network byte order [...]""
   *
   * <p>For more on ISATAP addresses see section 6.1 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc5214#section-6.1"">RFC 5214</a>.
   *
   * @param ip {@link Inet6Address} to be examined for ISATAP address format
   * @return {@code true} if the argument is an ISATAP address",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,hasEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:hasEmbeddedIPv4ClientAddress(java.net.Inet6Address),902,904,"/**
* Checks if IP address matches any of three specific masks.
* @param ip Inet6Address to check
* @return true if IP matches a mask, false otherwise
*/","* Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address
   * types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@code true} if there is an embedded IPv4 client address
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,previewChar,com.google.common.net.MediaType$Tokenizer:previewChar(),1183,1186,"/**
* Computes and returns the function mask.
* @return character value of the computed mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,<init>,com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[]),395,397,"/**
* Constructs a list from a boolean array starting at index 0.
* @param array the input boolean array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,equals,com.google.common.primitives.Booleans$BooleanArrayAsList:equals(java.lang.Object),471,490,"/**
* Compares this object to another for equality, considering type and content.
* @param object the object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toString,com.google.common.primitives.Booleans$BooleanArrayAsList:toString(),501,509,"/**
* Constructs a formatted string representation of the boolean array.
* @return a JSON-style string with boolean values
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,hashCode,com.google.common.primitives.Booleans$BooleanArrayAsList:hashCode(),492,499,"/**
* Calculates a hash code using a custom hashing function.
* @return the resulting hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toArray,com.google.common.primitives.Booleans:toArray(java.util.Collection),354,367,"/**
* Converts a collection of Booleans to a primitive boolean array.
* @param collection Collection of Boolean values
* @return Primitive boolean array or null if conversion fails
*/","* Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.
   *
   * @param collection a collection of {@code Boolean} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean)",162,164,"/**
 * Searches for target value in specified boolean array.
 * @param array boolean array to search
 * @param target desired boolean value
 */","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and
   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,lastIndexOf,"com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean)",213,215,"/**
* Performs binary search on sorted boolean array to find index of target value.
* @param array sorted boolean array
* @param target target boolean value
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,<init>,com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[]),262,264,"/**
* Initializes list from byte array starting at specified offset.
* @param array original byte array
* @param offset starting index in the array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,equals,com.google.common.primitives.Bytes$ByteArrayAsList:equals(java.lang.Object),337,356,"/**
* Compares object for equality with this instance.
* @param object Object to compare, may be null
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toString,com.google.common.primitives.Bytes$ByteArrayAsList:toString(),367,375,"/**
* Builds a string representation of an array range.
* @param start starting index
* @param end ending index
* @return formatted string or null if invalid range
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,hashCode,com.google.common.primitives.Bytes$ByteArrayAsList:hashCode(),358,365,"/**
* Calculates hash code from array using FNV-1a algorithm.
* @return Hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toArray,com.google.common.primitives.Bytes:toArray(java.util.Collection),220,233,"/**
* Converts a collection of Numbers to a byte array.
* @param collection Collection of Numbers
*/","* Returns an array containing each value of {@code collection}, converted to a {@code byte} value
   * in the manner of {@link Number#byteValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte)",92,94,"/**
* Searches for target byte in specified array.","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,lastIndexOf,"com.google.common.primitives.Bytes:lastIndexOf(byte[],byte)",143,145,"/**
* Searches binary array for specified target byte.
* @param array input byte array
* @param target target byte to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,<init>,com.google.common.primitives.Chars$CharArrayAsList:<init>(char[]),582,584,"/**
* Constructs a list view of the given character array, starting from index 0 to its end.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,equals,com.google.common.primitives.Chars$CharArrayAsList:equals(java.lang.Object),658,677,"/**
* Compares this object with the given Object, returning true if they're equal.
* @param object the object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toString,com.google.common.primitives.Chars$CharArrayAsList:toString(),688,696,"/**
* Constructs a string representation of the array segment, bracketed.
* @return String representation of the array segment
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,hashCode,com.google.common.primitives.Chars$CharArrayAsList:hashCode(),679,686,"/**
* Computes hash code using a shift-and-add strategy.
* @return hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toArray,com.google.common.primitives.Chars:toArray(java.util.Collection),436,449,"/**
* Converts a collection of characters to a character array.
* @param collection collection of characters
*/","* Copies a collection of {@code Character} instances into a new array of primitive {@code char}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Character} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,compare,"com.google.common.primitives.Chars$LexicographicalComparator:compare(char[],char[])",406,416,"/**
* Compares two character arrays lexicographically.
* @param left first array to compare
* @param right second array to compare
* @return negative/positive value if left/right is less/greater, 0 if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char)",150,152,"/**
* Searches for target character in given array.
* @param array input character array
* @param target target character to search
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,lastIndexOf,"com.google.common.primitives.Chars:lastIndexOf(char[],char)",201,203,"/**
* Searches for target character in given array.
* @param array input character array
* @param target character to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,fromByteArray,com.google.common.primitives.Chars:fromByteArray(byte[]),326,330,"/**
* Extracts and returns the function mask from a 2-byte array.
* @param bytes input byte array containing the function mask
* @return function mask as a single character or throws if array is too small
*/","* Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\u5432'}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,<init>,com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[]),590,592,"/**
* Initializes the list from a double array starting at index 0 and ending at the end of the array.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,equals,com.google.common.primitives.Doubles$DoubleArrayAsList:equals(java.lang.Object),671,690,"/**
* Compares this object with the given object for equality.
* @param object Object to compare, may be of different type
* @return True if objects are equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toString,com.google.common.primitives.Doubles$DoubleArrayAsList:toString(),701,709,"/**
* Generates a formatted string representation of an array segment.
* @return comma-separated list of elements enclosed in square brackets
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,hashCode,com.google.common.primitives.Doubles$DoubleArrayAsList:hashCode(),692,699,"/**
* Computes hash value using FNV-1a algorithm.
* @return hash code as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray:hashCode(),596,604,"/**
* Calculates a hash value by iterating over an array and applying a hashing function to each element.
* @return the calculated hash value
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toArray,com.google.common.primitives.Doubles:toArray(java.util.Collection),542,555,"/**
* Converts a Number-based collection to a double array.
* @param collection Collection of Numbers to convert
*/","* Returns an array containing each value of {@code collection}, converted to a {@code double}
   * value in the manner of {@link Number#doubleValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Double>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double)",134,136,"/**
* Recursive helper function to find index of target value in sorted array.
* @param array input array
* @param target target value to search for
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,lastIndexOf,"com.google.common.primitives.Doubles:lastIndexOf(double[],double)",188,190,"/**
* Searches for target value in an array.
* @param array input array to search
* @param target value to find
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,<init>,com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[]),584,586,"/**
* Constructs a list from a float array.
* @param array input float array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,equals,com.google.common.primitives.Floats$FloatArrayAsList:equals(java.lang.Object),659,678,"/**
* Compares this instance with the given object for equality.
* @param object Object to compare, can be of any type
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toString,com.google.common.primitives.Floats$FloatArrayAsList:toString(),689,697,"/**
* Formats and concatenates an array of strings into a string.
* @param array input array of strings
* @param start starting index for formatting
* @param end ending index for formatting
* @return formatted string or null if invalid parameters
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,hashCode,com.google.common.primitives.Floats$FloatArrayAsList:hashCode(),680,687,"/**
* Calculates hash value using bitwise operations and recursive function calls.
* @return The calculated hash value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toArray,com.google.common.primitives.Floats:toArray(java.util.Collection),539,552,"/**
* Converts a collection of Numbers to a float array.
* @param collection collection of numeric values
*/","* Returns an array containing each value of {@code collection}, converted to a {@code float}
   * value in the manner of {@link Number#floatValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Float>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float)",131,133,"/**
* Searches for target value in sorted float array.
* @param array sorted array of floats
* @param target target value to search for
* @return index of target value or -1 if not found
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,lastIndexOf,"com.google.common.primitives.Floats:lastIndexOf(float[],float)",185,187,"/**
* Finds index of target value in sorted array.
* @param array sorted float array
* @param target target value to search for
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,size,com.google.common.primitives.ImmutableDoubleArray$AsList:size(),494,497,"/**
* Returns mask value from parent m1 function.
* @return mask value as an integer
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(int),192,195,"/**
* Creates a builder instance with specified initial capacity.
* @param initialCapacity initial collection size
*/","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableDoubleArray} that is built will very likely occupy more memory than strictly
   * necessary; to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(),205,207,"/**
* Creates a Builder instance with default mask size (10).","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,ensureRoomFor,com.google.common.primitives.ImmutableDoubleArray$Builder:ensureRoomFor(int),302,307,"/**
* Dynamically resizes an array by adding a specified number of elements.
* @param numberToAdd the number of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,<init>,com.google.common.primitives.ImmutableDoubleArray:<init>(double[]),354,356,"/**
* Initializes ImmutableDoubleArray with an array.
* @param array input double array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray:indexOf(double),390,397,"/**
* Finds index of first element in array that matches the given target value.
* @param target desired double value
* @return index of matching element or -1 if not found
*/","* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().indexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray:lastIndexOf(double),404,411,"/**
* Finds the first index where a condition is met based on an array and target value.
* @param target target value to search for
* @return index offset from start or -1 if not found
*/","* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().lastIndexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray:toString(),610,623,"/**
* Builds a string representation of an array slice.
* @return JSON-like string or ""[]"" if empty
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(double[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,readResolve,com.google.common.primitives.ImmutableDoubleArray:readResolve(),643,645,"/**
* Returns an empty object if m1 returns true; otherwise, returns this.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,size,com.google.common.primitives.ImmutableIntArray$AsList:size(),489,492,"/**
* Returns function mask value from parent object.
* @return integer representing function mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,indexOf,com.google.common.primitives.ImmutableIntArray$AsList:indexOf(java.lang.Object),504,507,"/**
* Recursively invokes m1 on integer targets, returning result from parent.
* @param target object to recursively invoke m1 on (null returns -1)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray:contains(int),412,414,"/**
* Checks if the given value is within the valid mask range.
* @param target integer value to be checked
* @return true if target is a valid mask, false otherwise
*/","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,lastIndexOf,com.google.common.primitives.ImmutableIntArray$AsList:lastIndexOf(java.lang.Object),509,512,"/**
* Recursively calls m1 on parent object if target is an integer. 
* @param target The object to recursively call m1 on (can be null)
* @return result of recursive call or -1 if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(int),189,192,"/**
* Constructs a new builder with an initial capacity.
* @param initialCapacity starting size of the builder's data structure
*/","* Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(),202,204,"/**
* Creates a new builder instance with default mask size (10). 
* @return A new Builder instance.","* Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy
   * more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,ensureRoomFor,com.google.common.primitives.ImmutableIntArray$Builder:ensureRoomFor(int),299,304,"/**
* Dynamically resizes an array by adding elements from the provided number.
* @param numberToAdd amount of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,<init>,com.google.common.primitives.ImmutableIntArray:<init>(int[]),351,353,"/**
 * Initializes an ImmutableIntArray instance with the given array.
 * @param array the underlying array to be wrapped
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray:hashCode(),586,594,"/**
* Computes a rolling cumulative hash of array elements between 'start' and 'end' indices.
* @return the computed hash value
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,hashCode,com.google.common.primitives.Ints$IntArrayAsList:hashCode(),773,780,"/**
* Computes a hash code using the MurmurHash3 algorithm.
* @return the computed hash code
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray:toString(),600,613,"/**
* Constructs a string representation of an array slice.
*@return formatted string, or ""[]"" if m1() returns true
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(int[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,readResolve,com.google.common.primitives.ImmutableIntArray:readResolve(),633,635,"/**
* Returns an empty object if condition m1() is true; otherwise returns this object.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,size,com.google.common.primitives.ImmutableLongArray$AsList:size(),491,494,"/**
* Returns the function mask value from the parent.
* @return Function mask integer value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,indexOf,com.google.common.primitives.ImmutableLongArray$AsList:indexOf(java.lang.Object),506,509,"/**
* Recursively fetches an ID value from the target object.
* @param target arbitrary object containing a long ID value
* @return ID value or -1 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray:contains(long),414,416,"/**
* Checks if target value falls within valid range.
* @param target long value to check
* @return true if target is valid, false otherwise
*/","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,lastIndexOf,com.google.common.primitives.ImmutableLongArray$AsList:lastIndexOf(java.lang.Object),511,514,"/**
* Recursively fetches an integer value from the target object.
* @param target object containing the value to retrieve
* @return integer value or -1 if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(int),191,194,"/**
* Creates a new builder instance with the specified initial capacity.
* @param initialCapacity initial size of the builder's internal array
*/","* Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(),204,206,"/**
* Creates a new Builder instance with default mask size.
* @return Builder instance with initial mask size set to 10.","* Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,ensureRoomFor,com.google.common.primitives.ImmutableLongArray$Builder:ensureRoomFor(int),301,306,"/**
* Dynamically resizes and updates the array based on added elements.
* @param numberToAdd number of elements to add
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,<init>,com.google.common.primitives.ImmutableLongArray:<init>(long[]),353,355,"/**
 * Initializes an ImmutableLongArray instance from a native long array.
 * @param array the underlying long array
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray:hashCode(),588,596,"/**
* Calculates a hash value from an array of long integers using a rolling hash algorithm.
* @return the calculated hash value
*/",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,hashCode,com.google.common.primitives.Longs$LongArrayAsList:hashCode(),825,832,"/**
* Computes a hash code using the specified array and range.
* @return hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,hashCode,com.google.common.primitives.UnsignedLong:hashCode(),237,240,"/**
* Calls native M1 function from Long class.
* @return result of the native M1 function
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray:toString(),602,615,"/**
* Constructs a string representation of the array from 'start' to 'end'.
* @return stringified array or ""[]"" if m1() returns true
*/","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(long[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,readResolve,com.google.common.primitives.ImmutableLongArray:readResolve(),635,637,"/**
* Returns a mask object based on the result of m1().
* If m1() returns true, an empty mask is returned; otherwise, the current object is returned. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,<init>,com.google.common.primitives.Ints$IntArrayAsList:<init>(int[]),672,674,"/**
* Constructs an IntArrayList from a primitive int array.
* @param array the input array to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,equals,com.google.common.primitives.Ints$IntArrayAsList:equals(java.lang.Object),752,771,"/**
* Compares object's identity or contents with this instance.
* @param object Object to compare, may be null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toString,com.google.common.primitives.Ints$IntArrayAsList:toString(),782,790,"/**
* Builds a string representation of an array slice.
* @return formatted string or null if invalid input
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toArray,com.google.common.primitives.Ints:toArray(java.util.Collection),627,640,"/**
* Converts Collection of Number objects to an integer array.
* @return Integer array representation of the collection
*/","* Returns an array containing each value of {@code collection}, converted to a {@code int} value
   * in the manner of {@link Number#intValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int)",160,162,"/**
* Recursive search for target in sorted array.
* @param array input array to search
* @param target value to find
* @return index of target if found, -1 otherwise
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,lastIndexOf,"com.google.common.primitives.Ints:lastIndexOf(int[],int)",211,213,"/**
* Recursive search function to find index of given target in array.
* @param array input array
* @param target value to search for
* @return index of target if found, -1 otherwise
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,<init>,com.google.common.primitives.Longs$LongArrayAsList:<init>(long[]),724,726,"/**
* Initializes list from long array starting at specified index.
* @param array input array
* @param offset starting index in array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,equals,com.google.common.primitives.Longs$LongArrayAsList:equals(java.lang.Object),804,823,"/**
* Compares this object with the given Object for equality.
* @param object the object to compare with
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toString,com.google.common.primitives.Longs$LongArrayAsList:toString(),834,842,"/**
* Builds a formatted string of array elements between square brackets.
* @return the constructed string
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toArray,com.google.common.primitives.Longs:toArray(java.util.Collection),679,692,"/**
* Converts a Collection of Numbers to an array of long values.
* @param collection input collection
*/","* Returns an array containing each value of {@code collection}, converted to a {@code long} value
   * in the manner of {@link Number#longValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Long>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long)",121,123,"/**
* Searches an array for a target value using recursive helper function.
* @param array input array to search
* @param target value to find in the array
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,lastIndexOf,"com.google.common.primitives.Longs:lastIndexOf(long[],long)",172,174,"/**
* Searches for target value within specified range of an array.
* @param array input array to search
* @param target value to find
* @return index of target value or -1 if not found
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,"com.google.common.primitives.Longs:tryParse(java.lang.String,int)",400,440,"/**
* Converts string to long integer using specified radix.
* @param string input string
* @param radix base of the number (e.g. 10 for decimal)
* @return long value or null if invalid input
*/","* Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ParseRequest.java,fromString,com.google.common.primitives.ParseRequest:fromString(java.lang.String),30,54,"/**
* Parses string to fetch request data.
* @param stringValue input string value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isWrapper,com.google.common.reflect.TypeToken:isWrapper(),554,556,"/**
* Checks function mask based on runtime type.
* @return true if valid, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,compare,"com.google.common.primitives.Shorts$LexicographicalComparator:compare(short[],short[])",456,466,"/**
* Compares two short arrays element-wise and returns the first non-zero difference.
* @param left first short array
* @param right second short array
* @return first differing element or length difference if all equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,<init>,com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[]),633,635,"/**
* Initializes list from short array starting at specified index.
* @param array input short array
* @param offset starting index in array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,equals,com.google.common.primitives.Shorts$ShortArrayAsList:equals(java.lang.Object),708,727,"/**
* Compares object with this instance or short array list.
* @param object object to compare
* @return true if equal, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toString,com.google.common.primitives.Shorts$ShortArrayAsList:toString(),738,746,"/**
* Concatenates and formats array elements into a string.
* @return comma-separated list of array elements in square brackets
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,hashCode,com.google.common.primitives.Shorts$ShortArrayAsList:hashCode(),729,736,"/**
* Computes hash code using the given array and indices.
* @return hash code value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toArray,com.google.common.primitives.Shorts:toArray(java.util.Collection),591,604,"/**
* Converts a collection of Numbers to a short array.
* @param collection Collection of numbers
*/","* Returns an array containing each value of {@code collection}, converted to a {@code short}
   * value in the manner of {@link Number#shortValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Short>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short)",154,156,"/**
* Finds index of specified value in sorted array.
* @param array sorted short array
* @param target value to search for
* @return index of target value or -1 if not found
*/","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,lastIndexOf,"com.google.common.primitives.Shorts:lastIndexOf(short[],short)",205,207,"/**
* Searches for the first occurrence of the target value in the given array.
* @param array input array to search
* @param target value to find
* @return index of the target value or -1 if not found
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,fromByteArray,com.google.common.primitives.Shorts:fromByteArray(byte[]),335,339,"/**
* Calculates the function mask from a 2-byte array.
* @param bytes input byte array (must be at least 2 elements)
*/","* Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,compare,"com.google.common.primitives.SignedBytes$LexicographicalComparator:compare(byte[],byte[])",177,187,"/**
* Compares two byte arrays lexicographically.
* @param left first byte array
* @param right second byte array
* @return integer comparison result or length difference if equal
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,getBestComparator,com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:getBestComparator(),446,466,"/**
* Returns a comparator for unsigned byte arrays.
* @return Comparator instance or default if loading fails
*/","* Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable
     * to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,fromIntBits,com.google.common.primitives.UnsignedInteger:fromIntBits(int),67,69,"/**
* Creates an unsigned integer from the given bit count.
* @param bits number of bits in the unsigned integer
*/","* Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^32 + bits}.
   *
   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(int),250,252,"/**
* Converts an unsigned integer to base 'radix' string representation. 
* @param radix target number system (e.g., 2=Binary, 16=Hexadecimal)","* Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,toString,com.google.common.primitives.UnsignedInts:toString(int),376,378,"/**
* Overloaded version of m1 that calls base method with default value.
* @param x input parameter (default value will be used)
*/","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts:compare(int,int)",69,72,"/**
* Computes bitwise XOR of two integers using helper function m1.
* @param a first integer
* @param b second integer
* @return result of XOR operation
*/","* Compares the two specified {@code int} values, treating them as unsigned values between {@code
   * 0} and {@code 2^32 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Integer#compareUnsigned(int, int)} method instead.
   *
   * @param a the first unsigned {@code int} to compare
   * @param b the second unsigned {@code int} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,fromLongBits,com.google.common.primitives.UnsignedLong:fromLongBits(long),67,70,"/**
* Creates an UnsignedLong instance from the given bit pattern.
* @param bits input bit mask value","* Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^64 + bits}.
   *
   * <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)}
   * instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs:compare(long,long)",77,80,"/**
* Computes M2 of two numbers using M1 function.
* @param a first number
* @param b second number
* @return result of M2 computation
*/","* Compares the two specified {@code long} values, treating them as unsigned values between {@code
   * 0} and {@code 2^64 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Long#compareUnsigned(long, long)} method instead.
   *
   * @param a the first unsigned {@code long} to compare
   * @param b the second unsigned {@code long} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,"com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String,int)",339,363,"/**
* Converts a string to an unsigned long integer with specified radix.
* @param string the input string
* @param radix the base of the number in the string
* @return the converted unsigned long value or throws NFE if invalid
*/","* Returns the unsigned {@code long} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead.
   *
   * @param string the string containing the unsigned {@code long} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/AbstractInvocationHandler.java,invoke,"com.google.common.reflect.AbstractInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",61,87,"/**
* Handles dynamic method invocation for a proxy object.
* @param proxy the proxy object
* @param method the invoked method
* @param args array of arguments (may be null)
*/","* {@inheritDoc}
   *
   * <ul>
   *   <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode}
   *   <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString}
   *   <li>{@code proxy.equals(argument)} returns true if:
   *       <ul>
   *         <li>{@code proxy} and {@code argument} are of the same type
   *         <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link
   *             InvocationHandler} of {@code argument}
   *       </ul>
   *   <li>other method calls are dispatched to {@link #handleInvocation}.
   * </ul>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getPackageName,com.google.common.reflect.ClassPath$ClassInfo:getPackageName(),317,319,"/**
* Dynamically invokes m1() method from class with given name.
*/","* Returns the package name of the class, without attempting to load the class.
     *
     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but
     * does not require the class (or package) to be loaded.
     *
     * <p>But note that this method may behave differently for a class in the default package: For
     * such classes, this method always returns an empty string. But under some version of Java,
     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code
     * class.getPackage()} returns {@code null}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,getPackageName,com.google.common.reflect.Reflection:getPackageName(java.lang.Class),35,37,"/**
* Recursively calls m1() on provided class until it returns non-null result.
* @param clazz input class to start recursion from
*/","* Returns the package name of {@code clazz} according to the Java Language Specification (section
   * 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without
   * attempting to define the {@link Package} and hence load files.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asByteSource,com.google.common.reflect.ClassPath$ResourceInfo:asByteSource(),246,248,"/**
* Returns a ByteSource instance for the m2 resource.
* @return ByteSource object representing the m2 resource data
*/","* Returns a {@link ByteSource} view of the resource from which its bytes can be read.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),102,105,"/**
* Returns an instance of type T with mask applied.
* @param type TypeToken representing the desired type and its mask
* @return An instance of type T or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.Invokable$ConstructorInvokable:getGenericParameterTypes(),454,466,"/**
* Filters and returns a subset of Type array based on conditional checks.
* @return Subset of original Type array or the entire array if no filtering applied
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPublic,com.google.common.reflect.Invokable:isPublic(),150,152,"/**
* Calls m1() and returns true if result is valid (m2())",Returns true if the element is public.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isProtected,com.google.common.reflect.Invokable:isProtected(),155,157,"/**
 * Invokes internal implementation of m2 using result from m1.
 */",Returns true if the element is protected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPrivate,com.google.common.reflect.Invokable:isPrivate(),165,167,"/**
 * Invokes nested static method m2 with result of m1 as argument. 
 */",Returns true if the element is private.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isStatic,com.google.common.reflect.Invokable:isStatic(),170,172,"/**
* Calls m1() to determine modifier value and returns result of m2() on that value.",Returns true if the element is static.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isFinal,com.google.common.reflect.Invokable:isFinal(),181,183,"/**
* Checks result of m1() and returns true if successful.
*/","* Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.
   *
   * <p>Note that a method may still be effectively ""final"", or non-overridable when it has no
   * {@code final} keyword. For example, it could be private, or it could be declared by a final
   * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isAbstract,com.google.common.reflect.Invokable:isAbstract(),186,188,"/**
 * Evaluates the result of m1() using the Modifier.m2() method.",Returns true if the method is abstract.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isNative,com.google.common.reflect.Invokable:isNative(),191,193,"/**
* Invokes m2() on result of m1().
* @return true if successful, false otherwise
*/",Returns true if the element is native.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isSynchronized,com.google.common.reflect.Invokable:isSynchronized(),196,198,"/**
* Calls m1() and checks result with m2().",Returns true if the method is synchronized.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isVolatile,com.google.common.reflect.Invokable:isVolatile(),201,203,"/**
* Calls m1() and passes its result to m2() in Modifier.
* @return result of m2() call
*/",Returns true if the field is volatile.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isTransient,com.google.common.reflect.Invokable:isTransient(),206,208,"/**
* Calls m1() to perform some operation and then uses its result in m2().",Returns true if the field is transient.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,delegate,com.google.common.collect.ForwardingMapEntry:delegate(),57,58,"/**
* Returns an entry with a mask value.
* @return Entry object containing key-value pair and mask value.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),50,53,"/**
* Retrieves a value of type T from a TypeToken using a transformation function.
* @param type Token containing the type and transformation function to apply
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)",62,67,"/**
* Applies mask to object of specified type.
* @param type TypeToken for target class
* @param value Object to be masked
* @return Masked object or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotations,com.google.common.reflect.Parameter:getAnnotations(),88,91,"/**
* Returns an array of annotation masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equals,com.google.common.reflect.TypeResolver$TypeVariableKey:equals(java.lang.Object),563,571,"/**
* Checks if the provided object is a valid TypeVariableKey.
* @param obj the object to check
* @return true if obj is a TypeVariableKey, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equalsType,com.google.common.reflect.TypeResolver$TypeVariableKey:equalsType(java.lang.reflect.Type),591,597,"/**
* Checks if the given type is a TypeVariable and returns its mask value.
* @param type the type to check
* @return true if type is a TypeVariable, false otherwise
*/","* Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the
     * same {@code GenericDeclaration}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$WildcardCapturer:<init>(),453,455,"/**
* Initializes WildcardCapturer with an AtomicInteger instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,notForTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:notForTypeVariable(),526,528,"/**
 * Creates a WildcardCapturer instance with specified ID.
 * @return WildcardCapturer object
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,every,com.google.common.reflect.TypeToken:every(java.lang.reflect.Type[]),1054,1057,"/**
* Constructs bounds from input array.
* @param bounds input bounds array
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,any,com.google.common.reflect.TypeToken:any(java.lang.reflect.Type[]),1059,1062,"/**
* Creates a Bounds instance with mask enabled.
* @param bounds array of Type objects representing the bounds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$ClassSet:readResolve(),800,802,"/**
* Returns a masked result by invoking methods m1 and m2 sequentially. 
* @return Masked object or null if either m1 or m2 returns null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$InterfaceSet:readResolve(),753,755,"/**
* Returns a masked value by invoking m1 and m2 methods sequentially. 
* @return The result of m1().m2() operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.Class),169,171,"/**
 * Creates a TypeToken instance for the given class type.
 * @param type Class type to create a TypeToken for
 */",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.reflect.Type),174,176,"/**
* Creates a TypeToken instance for the given type.
* @param type the input type
*/",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken:toString(),840,843,"/**
* Retrieves Type representation as a string.
* @return type name as a string
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$GenericArrayTypeImpl:toString(),229,232,"/**
* Returns type name with array suffix.
* @return string representation of component type with array indicator
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion:typeName(java.lang.reflect.Type),652,654,"/**
* Returns the function mask for the given data type.
* @param type the data type to retrieve the function mask for
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$1:newArrayType(java.lang.reflect.Type),640,640,"/**
* Generates a type mask based on the given component type.
* @param componentType the type of components to create a mask for
* @return a Type object representing the generated mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$1:usedInGenericType(java.lang.reflect.Type),642,642,"/**
* Returns a mask value based on the given data type. 
* @param type target data type",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$2:newArrayType(java.lang.reflect.Type),640,640,"/**
* Returns a bitmask representing the type of function.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$GenericArrayTypeImpl:equals(java.lang.Object),239,246,"/**
* Determines if the given object represents a generic array type.
* @param obj object to check
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$ParameterizedTypeImpl:equals(java.lang.Object),302,311,"/**
* Compares this instance with the specified object for type equality.
* @param other object to compare with
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService:toString(),151,154,"/**
* Combines results of m1 and m2 functions with a separator.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:<init>(com.google.common.util.concurrent.Futures$InCompletionOrderState),950,952,"/**
 * Initializes a new instance of InCompletionOrderFuture with the given state. 
 * @param state InCompletionOrderState object containing the initial state.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isDone,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isDone(),107,110,"/**
* Calls superclass implementation of m1.
* @return result from superclass's m1 execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isCancelled,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isCancelled(),112,115,"/**
* Calls superclass implementation of m1().",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getDoneValue,com.google.common.util.concurrent.AbstractFuture:getDoneValue(java.lang.Object),280,304,"/**
* Converts object to type V, handling cancellation and failure cases.
* @param obj input object
* @return object of type V or null if NULL
*/",Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",441,470,"/**
* Updates the listener mask with a new runnable and executor.
* @param listener Runnable to add
* @param executor Executor to use for execution
*/","* {@inheritDoc}
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,maybePropagateCancellationTo,com.google.common.util.concurrent.AbstractFuture:maybePropagateCancellationTo(java.util.concurrent.Future),829,834,"/**
* Sets mask on future based on condition and related future. 
* @param related the future to set mask on, or null for no action
*/","* If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts)
   * the given future (if available).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addDoneString,com.google.common.util.concurrent.AbstractFuture:addDoneString(java.lang.StringBuilder),936,950,"/**
* Formats execution result into a StringBuilder.
* @param builder StringBuilder to append formatted result
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,get,com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:get(),48,51,"/**
 * Concatenates the results of m1 and m2 methods into a single string. 
 * @return Combined string result.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService:toString(),115,118,"/**
* Returns a formatted string containing values from m1() and m2().
* @return concatenated string with m1() value followed by ""["", m2(), and ""]""",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:<init>(java.util.concurrent.ExecutorService),498,500,"/**
* Initializes a new instance of the decorator with an executor service.
* @param delegate Executor service to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,submit,com.google.common.util.concurrent.ListeningExecutorService:submit(java.util.concurrent.Callable),51,52,"/**
* Executes a callable task and returns a ListenableFuture result.
* @param task the task to be executed
* @return ListenableFuture containing the result or null if failed
*/","* @return a {@code ListenableFuture} representing pending completion of the task
   * @throws RejectedExecutionException {@inheritDoc}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,"com.google.common.util.concurrent.ServiceManager$ServiceListener:<init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference)",785,788,"/**
* Initializes ServiceListener with given service and state reference.
* @param service target service instance
* @param state weak reference to shared ServiceManagerState object
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
* Schedules a cancellable task to run on a specified executor with a given service.
* @param service AbstractService object
* @param executor ScheduledExecutorService instance
* @param runnable Runnable task to be executed
*/",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
* Schedules a cancellable task to run on the provided executor.
* @param service AbstractService instance (not used in this method)
* @param executor scheduled execution service
* @param runnable task to be executed
*/",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,initializeOrUpdateCancellationDelegate,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:initializeOrUpdateCancellationDelegate(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule),650,666,"/**
* Fetches a cancellable future for the given schedule.
* @param schedule scheduling context
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAll,"com.google.common.util.concurrent.ListeningExecutorService:invokeAll(java.util.Collection,java.time.Duration)",120,124,"/**
* Executes a collection of asynchronous tasks with a specified timeout.
* @param tasks collection of tasks to be executed
* @param timeout maximum time to wait for task completion
* @return list of futures representing task results or null if timed out
*/","* Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAny,"com.google.common.util.concurrent.ListeningExecutorService:invokeAny(java.util.Collection,java.time.Duration)",131,136,"/**
* Executes a collection of asynchronous tasks with a specified timeout.
* @param tasks Collection of callable tasks to execute
* @param timeout Time duration for task execution completion
* @throws InterruptedException if task execution is interrupted
* @throws ExecutionException if task execution fails
* @throws TimeoutException if tasks are not completed within the given time","* Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,awaitTermination,com.google.common.util.concurrent.ListeningExecutorService:awaitTermination(java.time.Duration),143,146,"/**
* Converts duration to nanoseconds and passes to m1() and m2().","* Duration-based overload of {@link #awaitTermination(long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.util.concurrent.Callable,java.time.Duration)",68,72,"/**
* Converts duration to nanoseconds and schedules execution with provided Callable.
* @param callable task to execute
* @param delay time to wait before executing
*/","* Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleAtFixedRate,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,java.time.Duration,java.time.Duration)",86,91,"/**
* Creates a scheduled future instance.
* @param command the task to be executed
* @param initialDelay initial delay before execution starts
* @param period interval between subsequent executions
*/","* Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,java.time.Duration,java.time.Duration)",105,110,"/**
* Creates a scheduled future with customizable delay.
* @param command the task to execute
* @param initialDelay initial delay before first execution
* @param delay subsequent delay between executions
*/","* Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitRunning,com.google.common.util.concurrent.Service:awaitRunning(java.time.Duration),113,115,"/**
* Converts duration to nanoseconds and passes it to m1(). 
* @param timeout duration in unspecified unit
*/","* Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more
   * than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service reaches a state from which it is not possible to
   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code
   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitTerminated,com.google.common.util.concurrent.Service:awaitTerminated(java.time.Duration),149,151,"/**
* Converts duration to nanoseconds and passes it to helper function.
* @param timeout duration to convert
*/","* Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED
   * terminated} or {@link Service.State#FAILED failed}) for no more than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,newProxy,"com.google.common.util.concurrent.TimeLimiter:newProxy(java.lang.Object,java.lang.Class,java.time.Duration)",125,127,"/**
* Wraps the m2 call with a custom timeout using m1.","* Returns an instance of {@code interfaceType} that delegates all method calls to the {@code
   * target} object, enforcing the specified time limit on each call. This time-limited delegation
   * is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link
   * Object#toString}.
   *
   * <p>If the target method call finishes before the limit is reached, the return value or
   * exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is
   * reached, the proxy will attempt to abort the call to the target, and will throw an {@link
   * UncheckedTimeoutException} to the caller.
   *
   * <p>It is important to note that the primary purpose of the proxy object is to return control to
   * the caller when the timeout elapses; aborting the target method call is of secondary concern.
   * The particular nature and strength of the guarantees made by the proxy is
   * implementation-dependent. However, it is important that each of the methods on the target
   * object behaves appropriately when its thread is interrupted.
   *
   * <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code
   * DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code:
   *
   * <pre>
   *   TimeLimiter limiter = . . .;
   *   TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50));
   *   try {
   *     return proxy.someMethod();
   *   } catch (UncheckedTimeoutException e) {
   *     return DEFAULT_VALUE;
   *   }
   * </pre>
   *
   * @param target the object to proxy
   * @param interfaceType the interface you wish the returned proxy to implement
   * @param timeout the maximum length of time that callers are willing to wait on each method call
   *     to the proxy
   * @return a time-limiting proxy
   * @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or
   *     annotation type, rather than an interface
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callWithTimeout(java.util.concurrent.Callable,java.time.Duration)",169,174,"/**
* Invokes a callable with a specified timeout and conversion of timeout to nanoseconds.
* @param callable function to be executed
* @param timeout duration for execution
* @return result of the callable or throws an exception if timed out
*/","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration)",220,226,"/**
* Invokes a callable with a specified time limit and converts the result to the given type.
* @param callable function to invoke
* @param timeout maximum execution duration
* @return result of callable or throws exceptions if timed out or failed
*/","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runWithTimeout(java.lang.Runnable,java.time.Duration)",261,264,"/**
* Wraps a Runnable execution with a timeout and retries.
*@param runnable task to execute
*@param timeout maximum duration for execution
*/","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration)",303,306,"/**
* Wraps a Runnable in a timed execution.
* @param runnable task to be executed
* @param timeout duration before timing out
*/","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,executor,com.google.common.util.concurrent.AbstractScheduledService:executor(),365,394,"/**
* Creates and configures a scheduled executor service.
* @return ScheduledExecutorService instance
*/","* Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp},
   * {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the
   * executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService}
   * instance. This method is guaranteed to only be called once.
   *
   * <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool
   * that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the
   * pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService:toString(),406,409,"/**
* Concatenates and formats mask strings using m1() and m2(). 
* @return Formatted mask string 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,state,com.google.common.util.concurrent.AbstractService:state(),494,497,"/**
* Returns a functional mask from the current snapshot.
* @return State object representing the functional mask
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,<init>,"com.google.common.util.concurrent.AggregateFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,boolean)",67,75,"/**
* Creates an AggregateFuture for a collection of ListenableFutures.
* @param futures Collection of input futures to aggregate
* @param allMustSucceed Whether all futures must succeed
* @param collectsValues Whether values should be collected from futures
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,addInitialException,com.google.common.util.concurrent.AggregateFuture:addInitialException(java.util.Set),251,274,"/**
* Handles function mask exceptions.
* @param seen set of previously thrown exceptions
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,handleException,com.google.common.util.concurrent.AggregateFuture:handleException(java.lang.Throwable),209,241,"/**
* Handles Throwable with optional error masking logic.
* @param throwable exception to process
*/","* Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the
   * throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the
   * throwable did not cause this future to fail, and it is the first time we've seen that
   * particular Throwable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,toString,com.google.common.util.concurrent.AtomicDouble:toString(),254,257,"/**
* Computes Mersenne prime value using Mersenne function.
* @return computed Mersenne prime value as a string
*/","* Returns the String representation of the current value.
   *
   * @return the String representation of the current value",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,intValue,com.google.common.util.concurrent.AtomicDouble:intValue(),263,266,"/**
* Returns a function mask value.
* @return integer function mask value
*/","* Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,longValue,com.google.common.util.concurrent.AtomicDouble:longValue(),272,275,"/**
* Returns the function mask value.
* @return The function mask as a long integer.","* Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,floatValue,com.google.common.util.concurrent.AtomicDouble:floatValue(),281,284,"/**
* Calculates the mask value using function m1.
* @return floating-point mask value
*/","* Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,doubleValue,com.google.common.util.concurrent.AtomicDouble:doubleValue(),287,290,"/**
* Calculates and returns the mask value using the m1 function.",Returns the value of this {@code AtomicDouble} as a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,writeObject,com.google.common.util.concurrent.AtomicDouble:writeObject(java.io.ObjectOutputStream),297,301,"/**
* Writes custom data to ObjectOutputStream.
* @param s ObjectOutputStream instance
*/","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The current value is emitted (a {@code double}).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,readObject,com.google.common.util.concurrent.AtomicDouble:readObject(java.io.ObjectInputStream),304,308,"/**
* Deserializes and processes data from an ObjectInputStream.
* @param s input stream containing serialized data
*/","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDouble:getAndAccumulate(double,java.util.function.DoubleBinaryOperator)",188,192,"/**
* Applies binary operator to input value iteratively.
* @param x initial input value
* @param accumulatorFunction mathematical function to apply at each iteration
* @return result of iterative application (double)
*/","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDouble:accumulateAndGet(double,java.util.function.DoubleBinaryOperator)",203,207,"/**
* Computes result of given binary operator applied to input value and accumulated values.
* @param x input value
* @param accumulatorFunction binary function to accumulate with x
* @return result of accumulation as a double
*/","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,toString,com.google.common.util.concurrent.AtomicDoubleArray:toString(),278,295,"/**
* Generates a comma-separated list of unique integers up to the specified maximum value.
* @return formatted string or ""[]"" if max value is -1
*/","* Returns the String representation of the current values of array.
   *
   * @return the String representation of the current values of array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,writeObject,com.google.common.util.concurrent.AtomicDoubleArray:writeObject(java.io.ObjectOutputStream),303,314,"/**
* Writes masked data to the output stream.
* @throws IOException if write operation fails
*/","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The length of the array is emitted (int), followed by all of its elements (each a
   *     {@code double}) in the proper order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAccumulate(int,double,java.util.function.DoubleBinaryOperator)",207,211,"/**
* Applies a binary operator to the input value and previous result.
* @param i unused integer parameter
* @param x input value
* @return result of applying the operator
*/","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:accumulateAndGet(int,double,java.util.function.DoubleBinaryOperator)",223,227,"/**
* Applies a binary operator to an initial value and a series of inputs.
* @param i input index
* @param x initial value
* @param accumulatorFunction function to apply to the initial value and each input
* @return result of applying the accumulator function to all inputs
*/","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,removeIfZero,com.google.common.util.concurrent.AtomicLongMap:removeIfZero(java.lang.Object),246,249,"/**
* Checks if a mask exists for the given key.
* @param key unique key to search for
*/","* Atomically remove {@code key} from the map iff its associated value is 0.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,asMap,com.google.common.util.concurrent.AtomicLongMap:asMap(),273,276,"/**
* Returns cached map of masks or initializes and returns a new one.
*/","Returns a live, read-only view of the map backing this {@code AtomicLongMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,replace,"com.google.common.util.concurrent.AtomicLongMap:replace(java.lang.Object,long,long)",343,349,"/**
* Updates a value in the map with atomicity.
* @param key unique identifier
* @param expectedOldValue current value to check
* @param newValue new value to update
* @return true if updated successfully, false otherwise
*/","* If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code
   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.
   *
   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is
   * currently in the map, or if {@code key} is not in the map at all.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,close,com.google.common.util.concurrent.ClosingFuture:close(),1110,1113,"/**
* Logs and closes resources associated with this instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToFuture,com.google.common.util.concurrent.ClosingFuture:finishToFuture(),1009,1039,"/**
* Completes the operation and returns a future representing its result.
*/","* Marks this step as the last step in the {@code ClosingFuture} pipeline.
   *
   * <p>The returned {@link Future} is completed when the pipeline's computation completes, or when
   * the pipeline is cancelled.
   *
   * <p>All objects the pipeline has captured for closing will begin to be closed asynchronously
   * <b>after</b> the returned {@code Future} is done: the future completes before closing starts,
   * rather than once it has finished.
   *
   * <p>After calling this method, you may not call {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other
   * derivation method on the original {@code ClosingFuture} instance.
   *
   * @return a {@link Future} that represents the final value or exception of the pipeline",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor)",1052,1076,"/**
* Completes the value and closer to the given consumer.
* @param consumer ValueAndCloserConsumer instance
*/","* Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done,
   * {@code receiver} will be called with an object that contains the result of the operation. The
   * receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or
   * any other derivation method on the original {@code ClosingFuture} instance.
   *
   * @param consumer a callback whose method will be called (using {@code executor}) when this
   *     operation is done",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,checkAndUpdateState,"com.google.common.util.concurrent.ClosingFuture:checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)",2163,2169,"/**
* Validates and masks the state transition between two states.
* @param oldState previous state
* @param newState new state
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,collectOneValue,"com.google.common.util.concurrent.CollectionFuture:collectOneValue(int,java.lang.Object)",60,66,"/**
* Updates the value at a specific index in the list of values.
* @param index position to update
* @param returnValue new value to be stored
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,handleAllCompleted,com.google.common.util.concurrent.CombinedFuture:handleAllCompleted(),61,67,"/**
* Invokes m1() on the combined future interruptible task, if available. 
* @param none 
* @return none 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",493,507,"/**
* Constructs a stack trace with explicit ordering for lock graph nodes.
* @param node1 first LockGraphNode
* @param node2 second LockGraphNode
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,com.google.common.util.concurrent.ListenableFutureTask:<init>(java.util.concurrent.Callable),81,83,"/**
* Executes a Callable task and returns a ListenableFuture result.
* @param callable a task to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,"com.google.common.util.concurrent.ListenableFutureTask:<init>(java.lang.Runnable,java.lang.Object)",85,87,"/**
* Creates a task with a specified result and listener.
* @param runnable the task to be executed
* @param result the desired outcome of the task
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,add,"com.google.common.util.concurrent.ExecutionList:add(java.lang.Runnable,java.util.concurrent.Executor)",69,89,"/**
* Executes a Runnable with optional Executor, handling potential null inputs and concurrent execution. 
* @param runnable the task to be executed
* @param executor optional thread executor for the task
*/","* Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to
   * execute. If execution has already begun, the listener is executed immediately.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,execute,com.google.common.util.concurrent.ExecutionList:execute(),102,134,"/**
* Reverses the linked list of runnables and executes them in reverse order.
*/","* Runs this execution list, executing all existing pairs in the order they were added. However,
   * note that listeners added after this point may be executed before those previously added, and
   * note that the execution order of all listeners is ultimately chosen by the implementations of
   * the supplied executors.
   *
   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent
   * to calling it exactly once.
   *
   * @since 10.0 (present in 1.0 as {@code run})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,"com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:<init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer)",314,318,"/**
* Initializes a non-reentrant task executor with a delegate and execution sequencer.
* @param delegate the underlying executor to use
* @param sequencer the sequencer for managing thread execution order
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,com.google.common.util.concurrent.ExecutionSequencer:<init>(),91,91,"/**
* Default constructor for ExecutionSequencer. 
* Initializes internal state.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFluentFuture.java,<init>,com.google.common.util.concurrent.ForwardingFluentFuture:<init>(com.google.common.util.concurrent.ListenableFuture),40,42,"/**
* Wraps a ListenableFuture with a forwarding fluent interface.
* @param delegate underlying future to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catchingAsync,"com.google.common.util.concurrent.FluentFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",255,260,"/**
* Creates a fluent future using the specified async function and executor.
* @param exceptionType type of throwable to be caught
* @param fallback async function to execute on failure
* @param executor thread pool executor
* @return FluentFuture object representing the computation
*/","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if
   * the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback},
   * an exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage examples:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class, x -> immediateFuture(0), directExecutor());
   * }
   *
   * <p>The fallback can also choose to propagate the original exception when desired:
   *
   * {@snippet :
   * // Falling back to a zero counter only in case the exception was a
   * // TimeoutException.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class,
   *         e -> {
   *           if (omitDataOnFetchFailure) {
   *             return immediateFuture(0);
   *           }
   *           throw e;
   *         },
   *         directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link AsyncFunction} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transformAsync,"com.google.common.util.concurrent.FluentFuture:transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",336,339,"/**
* Wraps this instance as the input to an asynchronous computation.
* @param function async function to apply
* @param executor executor service for parallel execution
*/","* Returns a new {@code Future} whose result is asynchronously derived from the result of this
   * {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the
   * same exception (and the function is not invoked).
   *
   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced
   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.
   * Example usage:
   *
   * {@snippet :
   * FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query));
   * ListenableFuture<QueryResult> queryFuture =
   *     rowKeyFuture.transformAsync(dataService::readFuture, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future and that of the future returned by the chain function. That is, if the returned
   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the
   * other two is cancelled, the returned {@code Future} will receive a callback in which it will
   * attempt to cancel itself.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and
   * {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A function to transform the result of this future to the result of the output
   *     future
   * @param executor Executor to run the function in.
   * @return A future that holds result of the function (if the input succeeded) or the original
   *     input's failure (if not)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingDeque:remainingCapacity(),59,62,"/**
* Calls and returns value of m2() from returned UserProfile object.
* @return result of m2() in UserProfile object or default value if null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:putFirst(java.lang.Object),64,67,"/**
* Calls m2 on the result of m1 with input E.
* @param e input object of type E
* @throws InterruptedException if interrupted during execution
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putLast,com.google.common.util.concurrent.ForwardingBlockingDeque:putLast(java.lang.Object),69,72,"/**
 * Calls m2() on an instance fetched from m1(), passing the provided event.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",74,77,"/**
* Delegates to another method for execution with specified timeout.
* @param e input parameter
* @param timeout maximum execution time in specified units
* @param unit unit of timeout duration (e.g. seconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",79,82,"/**
* Delegates call to m1() to perform operation on object E.
* @param e object of type E to operate on
* @param timeout maximum time in specified unit
* @param unit time unit for timeout value
* @return true if successful, false otherwise
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:takeFirst(),84,87,"/**
* Calls and delegates to m1(), then calls its m2() method.
* @return result of m1().m2()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeLast,com.google.common.util.concurrent.ForwardingBlockingDeque:takeLast(),89,92,"/**
* Calls m1() to perform some operation and then calls its m2() method.
* @return result of m1().m2()
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",94,97,"/**
* Calls M2 on the result of M1 with specified timeout and time unit.
* @param timeout maximum wait time in milliseconds or other unit
* @param unit time unit for timeout (e.g. TimeUnit.MILLISECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",99,102,"/**
* Invokes M2 operation on underlying cache with specified timeout. 
* @param timeout time to wait for result in the given time unit
* @param unit time unit of the timeout value
* @return cached result or null if not available
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,put,com.google.common.util.concurrent.ForwardingBlockingDeque:put(java.lang.Object),104,107,"/**
* Calls m2() on a previously loaded instance of E.
* @throws InterruptedException if interrupted while loading
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offer,"com.google.common.util.concurrent.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",109,112,"/**
* Delegates execution of m2() to m1(), passing through user object and timeout parameters.
* @param e the user object to operate on
* @param timeout maximum wait time in specified unit
* @param unit time unit for timeout value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,take,com.google.common.util.concurrent.ForwardingBlockingDeque:take(),114,117,"/**
* Calls m1 to retrieve an object and then invokes its m2 method.
* @throws InterruptedException if m1 or m2 operation is interrupted.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,poll,"com.google.common.util.concurrent.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",119,122,"/**
* Invokes sub-method to fetch data with specified timeout.
* @param timeout maximum wait time in specified units
* @param unit time unit for timeout (e.g. SECONDS, MILLISECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection),124,127,"/**
* Delegates to m1() for collection operation.
* @param c Collection of elements
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",129,132,"/**
* Delegates to m1() and returns its result.
* @param c collection of elements to process
* @param maxElements maximum number of elements to consider
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,delegate,com.google.common.collect.ForwardingDeque:delegate(),51,52,"/**
* Returns a deque containing function masks.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection,int)",51,55,"/**
* Calls m1() to perform secondary operation on specified collection and maximum elements.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection),57,61,"/**
* Delegates collection operation to internal helper.
* @param c collection to process (elements must be of type E or a superclass)
* @return result of the operation
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,offer,"com.google.common.util.concurrent.ForwardingBlockingQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",63,67,"/**
* Invokes second-level operation on dependent object with specified timeout.
* @param e dependent object to operate on
* @param timeout maximum duration for operation
* @param unit time unit for timeout (e.g. TimeUnit.MILLISECONDS)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,poll,"com.google.common.util.concurrent.ForwardingBlockingQueue:poll(long,java.util.concurrent.TimeUnit)",69,73,"/**
* Calls m2() on retrieved object with specified timeout.
* @param timeout time to wait for operation completion
* @param unit time unit for timeout value
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,put,com.google.common.util.concurrent.ForwardingBlockingQueue:put(java.lang.Object),75,78,"/**
* Calls m2() on an instance retrieved by m1(), passing through input parameter.
* @param e input object of type E
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingQueue:remainingCapacity(),80,83,"/**
* Calls and returns result of m2() from retrieved object. 
* @return result of m2() call on retrieved object or 0 if null.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,take,com.google.common.util.concurrent.ForwardingBlockingQueue:take(),85,89,"/**
 * Calls m1() to retrieve an intermediate result and then calls m2() on it.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,delegate,com.google.common.util.concurrent.ForwardingListenableFuture:delegate(),39,40,"/**
* Returns a future representing the result of the function invocation.
* @return a ListenableFuture containing the result or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable),50,53,"/**
 * Delegates task execution to the underlying service, wrapping result in a ListenableFuture.
 * @param task the task to execute
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,"com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)",55,59,"/**
* Delegates to m1() and executes a task with a given result.
* @param task Runnable operation
* @param result Result type of the operation
* @return ListenableFuture containing the result or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordOutputCancellation,com.google.common.util.concurrent.Futures$InCompletionOrderState:recordOutputCancellation(boolean),1009,1017,"/**
 * Sets cancellation flag and updates interruption status based on input.
 * @param interruptIfRunning whether to set shouldInterrupt flag
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),800,802,"/**
* Wraps a ListenableFuture to propagate non-cancellation exceptions.
* @param delegate original future to be wrapped
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFuture,com.google.common.util.concurrent.Futures:immediateFuture(java.lang.Object),133,142,"/**
* Returns a ListenableFuture representing the given value, 
* or NULL if the input is null.","* Creates a {@code ListenableFuture} which has its value set immediately upon construction. The
   * getters just return the value. This {@code Future} can't be canceled or timed out and its
   * {@code isDone()} method always returns {@code true}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFailedFuture,com.google.common.util.concurrent.Futures:immediateFailedFuture(java.lang.Throwable),162,166,"/**
* Returns an immediately failed future with the specified exception.
* @param throwable the Throwable to be returned
*/","* Returns a {@code ListenableFuture} which has an exception set immediately upon construction.
   *
   * <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always
   * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code
   * Throwable} wrapped in an {@code ExecutionException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateCancelledFuture,com.google.common.util.concurrent.Futures:immediateCancelledFuture(),174,181,"/**
* Returns a cancelled immediate future, cast to type V.
*/","* Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that
   * {@code isCancelled()} always returns {@code true}.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getBestValidator,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:getBestValidator(),190,201,"/**
* Retrieves a GetCheckedTypeValidator instance from the class loader.
*/","* Returns the ClassValue-using validator, or falls back to the ""weak Set"" implementation if
     * unable to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,newWithCause,"com.google.common.util.concurrent.FuturesGetChecked:newWithCause(java.lang.Class,java.lang.Throwable)",231,249,"/**
* Creates an instance of the specified exception class from a Throwable cause.
* @param exceptionClass Class of the exception to be created
* @param cause Chained throwable that may trigger the exception creation
* @return Instance of the exception class or null if not applicable
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,get,"com.google.common.util.concurrent.ImmediateFuture:get(long,java.util.concurrent.TimeUnit)",74,79,"/**
* Executes asynchronous operation with configurable timeout.
* @param timeout execution timeout in specified time unit
* @param unit time unit for the timeout (e.g. seconds)
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,toString,com.google.common.util.concurrent.InterruptibleTask$Blocker:toString(),245,248,"/**
* Calls and returns result of task's m1() method.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,<init>,com.google.common.util.concurrent.InterruptibleTask$Blocker:<init>(com.google.common.util.concurrent.InterruptibleTask),229,231,"/**
* Constructs a new instance of Blocker with the given InterruptibleTask.
* @param task InterruptibleTask to be blocked
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,afterDone,com.google.common.util.concurrent.TrustedListenableFutureTask:afterDone(),89,101,"/**
* Calls superclass method, then executes or cancels a task based on condition.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueueHelper,"com.google.common.util.concurrent.ListenerCallQueue:enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)",103,111,"/**
* Notifies all listeners of a masked event.
* @param event Event object to notify about
* @param label Label associated with the event
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,dispatch,com.google.common.util.concurrent.ListenerCallQueue:dispatch(),118,123,"/**
* Iterates over listener collection and notifies each listener.
*/","* Dispatches all events enqueued prior to this call, serially and in order, for every listener.
   *
   * <p>Note: this method is idempotent and safe to call from any thread",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor:<init>(),348,350,"/**
* Initializes a new Monitor instance with default configuration.
* @param enabled whether to enable monitoring (default is false)
*/","* Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code
   * Monitor(false)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterInterruptibly,com.google.common.util.concurrent.Monitor:enterInterruptibly(java.time.Duration),441,443,"/**
* Converts duration to nanoseconds using helper function.
* @param time Duration object
*/","* Enters this monitor. Blocks at most the given time, and may be interrupted.
   *
   * @return whether the monitor was entered
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIfInterruptibly,"com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",759,761,"/**
* Converts duration to nanoseconds and calls m2 with result.
* @param guard Guard object
* @param time Duration value
* @return boolean result of m2 call
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied, and may be interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,hasWaiters,com.google.common.util.concurrent.Monitor:hasWaiters(com.google.common.util.concurrent.Monitor$Guard),1006,1008,"/**
* Checks if the given Guard has a valid mask value.
* @param guard the Guard object to check
* @return true if the mask is valid, false otherwise
*/","* Queries whether any threads are waiting for the given guard to become satisfied. Note that
   * because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee
   * that the guard becoming satisfied in the future will awaken any threads. This method is
   * designed primarily for use in monitoring of the system state.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,isSatisfied,com.google.common.util.concurrent.Monitor:isSatisfied(com.google.common.util.concurrent.Monitor$Guard),1122,1131,"/**
* Delegates call to Guard's m2() and re-throws any exceptions.
* @param guard object containing the guarded operation
*/","* Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully
   * unlikely) event that isSatisfied() throws.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:<init>(java.lang.Runnable),621,623,"/**
 * Initializes a new task with the given delegate.
 * @param delegate Runnable to be executed in the background
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,shutdownAndAwaitTermination,"com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration)",960,965,"/**
* Wraps ExecutorService and timeout to invoke m2 with converted timeout. 
* @param service ExecutorService instance
* @param timeout duration for operation completion
*/","* Shuts down the given executor service gradually, first disabling new submissions and later, if
   * necessary, cancelling remaining tasks.
   *
   * <p>The method takes the following steps:
   *
   * <ol>
   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.
   *   <li>awaits executor service termination for half of the specified timeout.
   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling
   *       pending tasks and interrupting running tasks.
   *   <li>awaits executor service termination for the other half of the specified timeout.
   * </ol>
   *
   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link
   * ExecutorService#shutdownNow()} and returns.
   *
   * <p>For a version of this method that waits <i>indefinitely</i>, use {@link
   * ExecutorService#close}.
   *
   * @param service the {@code ExecutorService} to shut down
   * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate
   * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}
   *     if the call timed out or was interrupted
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,sleepMicrosUninterruptibly,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:sleepMicrosUninterruptibly(long),472,472,"/**
* Notifies the system about a timing event at the specified microsecond mark.
* @param micros absolute time in microseconds since epoch
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,sleepUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(java.time.Duration),386,390,"/**
* Converts duration to nanoseconds and schedules it. 
* @param sleepFor Duration object to be converted and scheduled
*/","* Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",134,139,"/**
* Creates a smooth bursty rate limiter with specified permits per second.
* @param permitsPerSecond The maximum number of requests allowed per second
* @param stopwatch Stopwatch instance for tracking time
* @return A RateLimiter instance configured with the given parameters
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",200,210,"/**
* Creates a custom rate limiter with smooth warming up.
* @param permitsPerSecond allowed requests per second
* @param warmupPeriod time to reach full capacity (milliseconds)
* @param unit time unit for warmup period (TimeUnit)
* @param coldFactor factor to apply during warm-up (0.0-1.0)
* @param stopwatch stopwatch instance for timing (SleepingStopwatch)
* @return custom rate limiter instance
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,setRate,com.google.common.util.concurrent.RateLimiter:setRate(double),256,261,"/**
* Sets the permit rate and updates internal state.
* @param permitsPerSecond positive rate of permits per second
*/","* Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond}
   * argument provided in the factory method that constructed the {@code RateLimiter}. Currently
   * throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not
   * observe the new rate; only subsequent requests will.
   *
   * <p>Note though that, since each request repays (by waiting, if necessary) the cost of the
   * <i>previous</i> request, this means that the very next request after an invocation to {@code
   * setRate} will not be affected by the new rate; it will pay the cost of the previous request,
   * which is in terms of the previous rate.
   *
   * <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code
   * RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of
   * 20 seconds after this method invocation.
   *
   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,getRate,com.google.common.util.concurrent.RateLimiter:getRate(),271,275,"/**
* Returns a function value based on synchronized access to internal state.
* @return double value
*/","* Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is
   * configured with. The initial value of this is the same as the {@code permitsPerSecond} argument
   * passed in the factory method that produced this {@code RateLimiter}, and it is only updated
   * after invocations to {@linkplain #setRate}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,run,com.google.common.util.concurrent.SequentialExecutor$QueueWorker:run(),180,193,"/**
* Handles errors in mask function execution, transitioning worker state to idle and re-throwing the error. 
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SettableFuture.java,create,com.google.common.util.concurrent.SettableFuture:create(),41,43,"/**
* Creates an empty SettableFuture instance.
* @return A SettableFuture object with no value set.",* Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,getUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,java.time.Duration)",277,284,"/**
* Retrieves result from a Future with specified timeout.
* @param future the Future to wait for
* @param timeout maximum time to wait
* @throws ExecutionException if future failed
* @throws TimeoutException if timed out
*/","* Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly.
   *
   * <p>Similar methods:
   *
   * <ul>
   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link
   *       Futures#getDone Futures.getDone}.
   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link
   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.
   *   <li>To get uninterruptibility and remove checked exceptions, use {@link
   *       Futures#getUnchecked}.
   * </ul>
   *
   * @throws ExecutionException if the computation threw an exception
   * @throws CancellationException if the computation was cancelled
   * @throws TimeoutException if the wait timed out
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,findInterruptibleMethods,com.google.common.util.concurrent.SimpleTimeLimiter:findInterruptibleMethods(java.lang.Class),241,249,"/**
* Retrieves a set of methods from the given interface type, filtered by a predicate.
* @param interfaceType the interface type to query
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,storedPermitsToWaitTime,"com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:storedPermitsToWaitTime(double,double)",244,261,"/**
* Calculates the function mask based on stored and requested permits.
* @param storedPermits current permit count
* @param permitsToTake requested permit quantity
* @return calculated function mask value in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,doSetRate,"com.google.common.util.concurrent.SmoothRateLimiter:doSetRate(double,long)",336,342,"/**
* Recursively calculates and sets a stable interval based on permits per second.
* @param permitsPerSecond rate of allowed operations
* @param nowMicros current timestamp in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,reserveEarliestAvailable,"com.google.common.util.concurrent.SmoothRateLimiter:reserveEarliestAvailable(int,long)",356,369,"/**
* Calculates the next available ticket time based on permits and current time.
* @param requiredPermits number of permits needed
* @param nowMicros current system time in microseconds
* @return the next available ticket time in microseconds
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,get,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:get(java.lang.Object),361,364,"/**
* Applies two hash functions (m1 and m2) to the given key.
* @param key object to be hashed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,newCondition,com.google.common.util.concurrent.Striped$WeakSafeLock:newCondition(),322,325,"/**
* Creates a weakly referenced condition from the result of delegate's m1(). 
* @return A WeakSafeCondition object wrapping the result of delegate.m1() or null if garbage collected.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:readLock(),294,297,"/**
* Returns a lock instance that wraps the delegate's lock with a weak safety guarantee. 
* @return Lock object wrapping the delegate's lock and this instance.",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,writeLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:writeLock(),299,302,"/**
* Creates a WeakSafeLock instance.
* @return WeakSafeLock object wrapping delegate lock and current context
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lazyWeakReadWriteLock,com.google.common.util.concurrent.Striped:lazyWeakReadWriteLock(int),278,280,"/**
* Creates striped read-write locks with specified number of stripes.
* @param stripes number of lock stripes
*/","* Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write
   * locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lock,com.google.common.util.concurrent.Striped:lock(int),207,209,"/**
* Creates striped lock with specified number of stripes.
* @param stripes number of stripes to divide lock into
*/","* Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock
   * is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<Lock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,semaphore,"com.google.common.util.concurrent.Striped:semaphore(int,int)",244,246,"/**
* Creates striped semaphore with specified number of stripes and permits.
* @param stripes number of stripes
* @param permits number of permits per stripe
*/","* Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores,
   * with the specified number of permits.
   *
   * @param stripes the minimum number of stripes (semaphores) required
   * @param permits the number of permits in each semaphore
   * @return a new {@code Striped<Semaphore>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readWriteLock,com.google.common.util.concurrent.Striped:readWriteLock(int),267,269,"/**
* Creates striped read-write locks with specified number of stripes.
* @param stripes number of stripes to divide locks into
*/","* Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced
   * read-write locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,build,com.google.common.util.concurrent.ThreadFactoryBuilder:build(),158,160,"/**
* Creates and returns a custom thread factory instance.","* Returns a new thread factory using the options supplied during the building process. After
   * building, it is still possible to change the options used to build the ThreadFactory and/or
   * build again. State is not shared amongst built instances.
   *
   * @return the fully constructed {@link ThreadFactory}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture$Fire:<init>(com.google.common.util.concurrent.TimeoutFuture),90,92,"/**
 * Sets the timeout future to be used when firing the operation.
 * @param timeoutFuture the timeout future to use
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(com.google.common.util.concurrent.AsyncCallable),36,39,"/**
* Creates a new TrustedListenableFutureTask instance from an AsyncCallable.
* @param callable asynchronous function to execute
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.util.concurrent.Callable),41,43,"/**
* Creates a TrustedListenableFutureTask instance from a Callable.
* @param callable task to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,"com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",54,57,"/**
* Creates a TrustedListenableFutureTask instance for the given Runnable and result.
* @param runnable task to be executed
* @param result expected outcome of the task
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration)",81,85,"/**
* Converts duration to nanoseconds and calls m2 with the converted value.","* Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration)",122,126,"/**
* Converts duration to nanoseconds and calls underlying implementation.
* @param condition Condition object
* @param timeout Duration to convert and pass to underlying method
*/","* Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit)",437,443,"/**
* Wraps existing implementation with default value of 1. 
* @param semaphore semaphore object
* @param unit time unit for timeout
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration)",451,457,"/**
* Converts timeout to nano-seconds and calls m2 with the converted value.
* @param semaphore Semaphore object
* @param permits number of permits to acquire
* @param timeout timeout duration (converted to nano-seconds)
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryLockUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,java.time.Duration)",497,501,"/**
* Converts timeout to nanoseconds and calls m2 with it.
*/","* Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)}
   * uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,java.time.Duration)",552,557,"/**
* Converts timeout to nanoseconds and delegates to other overloaded method.
* @param executor thread pool executor service
* @param timeout duration of wait
*/","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,execute,com.google.common.util.concurrent.WrappingExecutorService:execute(java.lang.Runnable),93,96,"/**
* Delegates execution of asynchronous task to underlying implementation.
* @param command Runnable command to be executed asynchronously
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable),103,106,"/**
* Delegates execution of a Runnable task to an underlying service.
* @param task The task to be executed
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,"com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable,java.lang.Object)",108,112,"/**
* Executes a Runnable and returns its result as a Future.
* @param task the task to execute
* @param result the expected result type
* @return Future containing the result or null if not found
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/PublicSuffixType.java,fromCode,com.google.thirdparty.publicsuffix.PublicSuffixType:fromCode(char),57,64,"/**
* Retrieves PublicSuffixType enum based on the provided character code.
* @param code char character code to match
*/",Returns a PublicSuffixType of the right type according to the given code,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,of,com.google.common.base.Optional:of(java.lang.Object),108,110,"/**
* Applies transformation to input and returns result as an Optional.
* @param reference input value to transform
*/","* Returns an {@code Optional} instance containing the given non-null reference. To have {@code
   * null} treated as {@link #absent}, use {@link #fromNullable} instead.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences.
   *
   * @throws NullPointerException if {@code reference} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,transform,com.google.common.base.Present:transform(com.google.common.base.Function),73,79,"/**
* Validates a transformation function and returns its result or an error message.
* @param function function to be validated and executed
* @return result of the function if valid, otherwise empty Optional with error message
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(com.google.common.base.Ticker),119,121,"/**
* Creates and returns a Stopwatch instance tied to the specified Ticker.
* @param ticker unique timer identifier
*/","* Creates (but does not start) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,indexOf,"com.google.common.collect.Iterables:indexOf(java.lang.Iterable,com.google.common.base.Predicate)",713,716,"/**
* Performs mutable reduction on an iterable using a given predicate.
* @param iterable input iterable
* @param predicate condition for reduction
*/","* Returns the index in {@code iterable} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterable has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,any,"com.google.common.collect.Iterators:any(java.util.Iterator,com.google.common.base.Predicate)",698,701,"/**
* Applies a predicate to an iterator and returns true if successful.
* @param iterator iterable collection of objects
* @param predicate condition to apply to each object
*/","* Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given
   * predicate.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(),373,376,"/**
* Returns a new MultimapBuilder instance with Ordering from m1().",Uses a naturally-ordered {@link TreeSet} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,adjacentNodes,com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNodes(),59,62,"/**
* Computes and returns a set of unique masks.
* @return Set of N objects representing computed masks",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",87,95,"/**
* Creates a table collector for aggregating data into an ImmutableTable.
* @param rowFunction function to extract row keys
* @param columnFunction function to extract column keys
* @param valueFunction function to compute cell values
* @param mergeFunction function to combine cell values
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions. If multiple inputs are mapped to the same row
   * and column pair, they will be combined with the specified merging function in encounter order.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, value, or merging functions return null on any input.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Any:<init>(),1037,1039,"/**
* Creates an instance of CharMatcher that matches any character.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Ascii:<init>(),1307,1309,"/**
* Matches ASCII characters.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$BitSetMatcher:<init>(java.util.BitSet,java.lang.String)",1010,1017,"/**
* Initializes a BitSetMatcher with the given table and description.
* @param table BitSet to match against
* @param description description of this matcher
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$JavaIsoControl:<init>(),1471,1473,"/**
* Initializes CharMatcher with ISO control character pattern.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$None:<init>(),1134,1136,"/**
* Constructs an instance of CharMatcher that matches no characters.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Whitespace:<init>(),1250,1252,"/**
* Creates a CharMatcher that matches whitespace characters.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,<init>,"com.google.common.base.SmallCharMatcher:<init>(char[],long,boolean,java.lang.String)",35,40,"/**
* Initializes a custom small character matcher with the specified filter and options.
* @param table array of characters to match
* @param filter long value used for filtering (purpose depends on subclass)
* @param containsZero whether the matcher should include zero as a valid match
* @param description human-readable description of this matcher's behavior
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equivalentTo,com.google.common.base.Equivalence:equivalentTo(java.lang.Object),308,310,"/**
* Creates a predicate that matches any value equivalent to the given target.
* @param target the target value (can be null)
*/","* Returns a predicate that evaluates to true if and only if the input is equivalent to {@code
   * target} according to this equivalence relation.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,"com.google.common.base.Functions:forMap(java.util.Map,java.lang.Object)",147,150,"/**
* Creates a function that maps keys to values with default value for unknown keys.
* @param map input map
* @param defaultValue default value to return for unmapped keys
*/","* Returns a function which performs a map lookup with a default value. The function created by
   * this method returns {@code defaultValue} for all inputs that do not belong to the map's key
   * set. See also {@link #forMap(Map)}, which throws an exception in this case.
   *
   * <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)}
   * instead. Note that it is not serializable unless you explicitly make it {@link Serializable},
   * typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k,
   * defaultValue)}.
   *
   * @param map source map that determines the function behavior
   * @param defaultValue the value to return for inputs that aren't map keys
   * @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code
   *     defaultValue} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,compose,"com.google.common.base.Functions:compose(com.google.common.base.Function,com.google.common.base.Function)",249,252,"/**
* Composes two functions to mask input type A with output of function f.
* @param g target function taking type B
* @param f function mapping type A to type B
* @return a new function that takes type A and returns the result of g applied to f's output
*/","* Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition
   * is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}.
   *
   * <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code
   * g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not
   * serializable.
   *
   * @param g the second function to apply
   * @param f the first function to apply
   * @return the composition of {@code f} and {@code g}
   * @see <a href=""//en.wikipedia.org/wiki/Function_composition"">function composition</a>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,com.google.common.base.Functions:forMap(java.util.Map),127,130,"/**
* Creates a function that maps each key in the input map to its corresponding value.
* @param map the input map
* @return a function that takes a key and returns its associated value or null if not found
*/","* Returns a function which performs a map lookup. The returned function throws an {@link
   * IllegalArgumentException} if given a key that does not exist in the map. See also {@link
   * #forMap(Map, Object)}, which returns a default value in this case.
   *
   * <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you
   * can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a
   * function that also supports reverse conversion.
   *
   * <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an
   * exception being thrown), you can use the method reference {@code map::get} instead. Note that
   * it is not serializable unless you explicitly make it {@link Serializable}, typically by writing
   * {@code (Function<K, V> & Serializable) map::get}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,matcher,com.google.common.base.JdkPattern:matcher(java.lang.CharSequence),32,35,"/**
* Creates a JdkMatcher instance based on the result of pattern.m1(t).
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compile,com.google.common.base.Platform$JdkPatternCompiler:compile(java.lang.String),106,109,"/**
* Wraps JDK Pattern implementation with CommonPattern API.
* @param pattern input string to analyze
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.util.regex.Pattern),207,210,"/**
* Creates a Splitter with a custom pattern mask.
* @param separatorPattern pattern to split by
*/","* Returns a splitter that considers any subsequence matching {@code pattern} to be a separator.
   * For example, {@code Splitter.on(Pattern.compile(""\r?\n"")).split(entireFile)} splits a string
   * into lines whether it uses DOS-style or UNIX-style line terminators.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(java.lang.String),69,71,"/**
* Creates a Joiner instance with specified separator.
* @param separator string to join elements with
*/",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(char),74,76,"/**
 * Creates a Joiner instance with the specified character as the delimiter.
 * @param separator single character to separate joined strings
 */",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner$MapJoiner:useForNull(java.lang.String),504,506,"/**
* Creates a MapJoiner instance with custom null text separator.
* @param nullText custom text to use when joining map entries
*/","* Returns a map joiner with the same behavior as this one, except automatically substituting
     * {@code nullText} for any provided null keys or values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,compile,com.google.common.base.CommonPattern:compile(java.lang.String),36,38,"/**
* Generates a function mask from the given pattern.
* @param pattern input string to create mask from
* @return a generated function mask or null if failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,onPattern,com.google.common.base.Splitter:onPattern(java.lang.String),248,251,"/**
* Creates a Splitter object with a custom separator pattern mask.
* @param separatorPattern regular expression to split on
*/","* Returns a splitter that considers any subsequence matching a given pattern (regular expression)
   * to be a separator. For example, {@code Splitter.onPattern(""\r?\n"").split(entireFile)} splits a
   * string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent
   * to {@code Splitter.on(Pattern.compile(pattern))}.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a
   *     malformed expression",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternFromStringPredicate:<init>(java.lang.String),782,784,"/**
* Creates a predicate that checks if a given string contains a specific pattern.
* @param string input string to search in
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,contains,com.google.common.base.Predicates:contains(java.util.regex.Pattern),303,306,"/**
* Creates a predicate that matches CharSequence instances against a given regular expression pattern.
* @param pattern the regular expression pattern to match against
*/","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code pattern.matcher(arg).find()}
   *
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,not,com.google.common.base.Predicates:not(com.google.common.base.Predicate),95,97,"/**
* Inverts the given predicate to its logical complement. 
* @param predicate function to invert
*/","* Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code
   * false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,com.google.common.base.Predicates:and(java.lang.Iterable),108,111,"/**
* Combines multiple predicates into a single AND predicate.
* @param components iterable of predicates to combine
* @return combined AND predicate or null if empty
*/","* Returns a predicate that evaluates to {@code true} if each of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,com.google.common.base.Predicates:or(java.lang.Iterable),148,151,"/**
* Combines multiple predicates into an 'or' condition.
* @param components iterable of predicate functions
* @return a single predicate function combining all inputs
*/","* Returns a predicate that evaluates to {@code true} if any one of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter$MapSplitter:split(java.lang.CharSequence),498,514,"/**
* Parses input sequence into a key-value map.
* @param sequence input string to parse
* @return Map of String keys and values or empty if invalid
*/","* Splits {@code sequence} into substrings, splits each substring into an entry, and returns an
     * unmodifiable map with each of the entries. For example, {@code
     * Splitter.on(';').trimResults().withKeyValueSeparator(""=>"").split(""a=>b ; c=>b"")} will return
     * a mapping from {@code ""a""} to {@code ""b""} and {@code ""c""} to {@code ""b""}.
     *
     * <p>The returned map preserves the order of the entries from {@code sequence}.
     *
     * @throws IllegalArgumentException if the specified sequence does not split into valid map
     *     entries, or if there are duplicate keys",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToStream,com.google.common.base.Splitter:splitToStream(java.lang.CharSequence),421,424,"/**
* Processes input sequence and returns a stream of strings.
* @param sequence input CharSequence to be processed
*/","* Splits {@code sequence} into string components and makes them available through an {@link
   * Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return a stream over the segments split from the parameter
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,memoize,com.google.common.base.Suppliers:memoize(com.google.common.base.Supplier),113,121,"/**
* Wraps a supplier with memoization, if applicable.
* @param delegate original supplier to wrap
* @return wrapped supplier or original if already memoized
*/","* Returns a supplier which caches the instance retrieved during the first call to {@code get()}
   * and returns that value on subsequent calls to {@code get()}. See: <a
   * href=""http://en.wikipedia.org/wiki/Memoization"">memoization</a>
   *
   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at
   * most once unless the underlying {@code get()} throws an exception. The supplier's serialized
   * form does not contain the cached value, which will be recalculated when {@code get()} is called
   * on the deserialized instance.
   *
   * <p>When the underlying delegate throws an exception then this memoizing supplier will keep
   * delegating calls until it returns valid data.
   *
   * <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is
   * returned directly.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,compose,"com.google.common.base.Suppliers:compose(com.google.common.base.Function,com.google.common.base.Supplier)",53,56,"/**
* Composes a function with a supplier to create a supplier of the output type.
* @param function Function to apply
* @param supplier Supplier of input data
*/","* Returns a new supplier which is the composition of the provided function and supplier. In other
   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},
   * and then applying {@code function} to that value. Note that the resulting supplier will not
   * call {@code supplier} or invoke {@code function} until it is called.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,synchronizedSupplier,com.google.common.base.Suppliers:synchronizedSupplier(com.google.common.base.Supplier),399,403,"/**
* Wraps a supplier in a thread-safe implementation.
* @param delegate original supplier to be wrapped
*/","* Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling
   * it, making it thread-safe.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfInstanceOf,"com.google.common.base.Throwables:propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)",100,108,"/**
* Handles a throwable of specified type, invoking custom handling logic.
* @param throwable the exception to handle
* @param declaredType the expected type of the exception
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code
   * declaredType}. Example usage:
   *
   * <pre>
   * try {
   *   someMethodThatCouldThrowAnything();
   * } catch (IKnowWhatToDoWithThisException e) {
   *   handle(e);
   * } catch (Throwable t) {
   *   Throwables.propagateIfInstanceOf(t, IOException.class);
   *   Throwables.propagateIfInstanceOf(t, SQLException.class);
   *   throw Throwables.propagate(t);
   * }
   * </pre>
   *
   * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable),146,153,"/**
* Logs a Throwable instance using m1. 
* @param throwable the exception to log or null for no-op
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException} or {@link Error}.
   *
   * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagate,com.google.common.base.Throwables:propagate(java.lang.Throwable),228,235,"/**
* Wraps a Throwable into a Runtime exception.
* @param throwable the input exception to be wrapped.","* Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link
   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.
   *
   * <p>This method always throws an exception. The {@code RuntimeException} return type allows
   * client code to signal to the compiler that statements after the call are unreachable. Example
   * usage:
   *
   * <pre>
   * T doSomething() {
   *   try {
   *     return someMethodThatCouldThrowAnything();
   *   } catch (IKnowWhatToDoWithThisException e) {
   *     return handle(e);
   *   } catch (Throwable t) {
   *     throw Throwables.propagate(t);
   *   }
   * }
   * </pre>
   *
   * @param throwable the Throwable to propagate
   * @return nothing will ever be returned; this return type is only for your convenience, as
   *     illustrated in the example above
   * @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)}
   *     directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new
   *     RuntimeException(e)}. But consider whether users would be better off if your API threw a
   *     different type of exception. For background on the deprecation, read <a
   *     href=""https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate"">Why we
   *     deprecated {@code Throwables.propagate}</a>.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethods,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethods(java.lang.Class),167,191,"/**
* Retrieves a list of methods from the subscriberMethodsCache for the given class.
* @param clazz Class object to fetch methods for
* @return ImmutableList of Method objects or null if cache retrieval fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,newCrc32c,com.google.common.hash.Hashing$Crc32cMethodHandles:newCrc32c(),522,530,"/**
* Returns checksum function mask via reflection.
* @throws Exception if failure to retrieve checksum function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,lazyStackTrace,com.google.common.base.Throwables:lazyStackTrace(java.lang.Throwable),377,384,"/**
* Decomposes Throwable into a list of StackTraceElements based on specific conditions.
*@param throwable the input exception to decompose
*/","* Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full
   * trace but faster iteration over parts of the trace. Here, ""slower"" and ""faster"" are defined in
   * comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace()
   * throwable.getStackTrace()}. Note, however, that this method's special implementation is not
   * available for all platforms and configurations. If that implementation is unavailable, this
   * method falls back to {@code getStackTrace}. Callers that require the special implementation can
   * check its availability with {@link #lazyStackTraceIsLazy()}.
   *
   * <p>The expected (but not guaranteed) performance of the special implementation differs from
   * {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly
   * by delaying the per-stack-frame work until each element is accessed. Roughly speaking:
   *
   * <ul>
   *   <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to
   *       retrieve each element of the returned list.
   *   <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time
   *       to retrieve each element of the returned list (probably slightly more than {@code
   *       1/stackSize}).
   * </ul>
   *
   * <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace
   * throwable.setStackTrace}. Instead, it always reflects the original stack trace from the
   * exception's creation.
   *
   * @since 19.0
   * @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past
   *     JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where
   *     possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1694,1703,"/**
* Retrieves a reference entry for the given key from the specified segment.
* @param key the key to search for
* @param hash the hash code of the key
* @param next the next reference entry in the chain (or null)
*/",* This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,create,"com.google.common.cache.RemovalNotification:create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",48,51,"/**
* Creates a removal notification with specified key, value and removal cause.
* @param key the key to be removed
* @param value the associated value (may be null)
* @param cause the reason for removal
*/","* Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with
   * the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code
   * null} if they were already garbage collected.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.HashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
* Invokes an action on each element in the map.
* @param action consumer function to process elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.LinkedHashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
* Performs operation on elements in the map.
* @param action callback to process each element and its count
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(),42,45,"/**
* Initializes a new instance of the sorted multiset with natural ordering.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset:<init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)",121,126,"/**
* Initializes a TreeMultiset with the specified root node reference,
* range, and end link.
* @param rootReference reference to the root AVL node
* @param range general range of values for the multiset
* @param endLink end link node in the AVL tree
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.TreeMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
* Creates a SortedMultiset with elements within the specified bounds.
* @param fromElement element to start searching from
* @param fromBoundType type of bound for the starting position (e.g. inclusive, exclusive)
* @param toElement element to search up to
* @param toBoundType type of bound for the ending position (e.g. inclusive, exclusive)
* @return SortedMultiset containing elements within the specified bounds
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,toMultiset,"com.google.common.collect.Multisets:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",88,94,"/**
* Creates a collector for counting elements with given functions.
* @param elementFunction function to extract an element from input
* @param countFunction function to count the occurrences of an element
* @param multisetSupplier supplier for Multiset used in collection
*/","* Returns a {@code Collector} that accumulates elements into a multiset created via the specified
   * {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the
   * inputs, with counts equal to the result of applying {@code countFunction} to the inputs.
   * Elements are added in encounter order.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element
   * will be added more than once, with the count summed over all appearances of the element.
   *
   * <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to
   * {@code stream.map(function).collect(Collectors.toCollection(supplier))}.
   *
   * <p>To collect to an {@link ImmutableMultiset}, use {@link
   * ImmutableMultiset#toImmutableMultiset}.
   *
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,toMultimap,"com.google.common.collect.Multimaps:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",115,125,"/**
* Creates a collector that groups input elements by key and value.
* @param keyFunction maps each element to its grouping key
* @param valueFunction maps each element to its grouped value
* @param multimapSupplier provides the Multimap data structure
*/","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. The keys and values of the entries are the result of applying the provided
   * mapping functions to the input elements, accumulated in the encounter order of the stream.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             toMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1),
   *                  MultimapBuilder.treeKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.put('b', ""anana"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""pple"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""sparagus"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""arrot"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""herry"");
   * }
   * }
   *
   * <p>To collect to an {@link ImmutableMultimap}, use either {@link
   * ImmutableSetMultimap#toImmutableSetMultimap} or {@link
   * ImmutableListMultimap#toImmutableListMultimap}.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,flatteningToMultimap,"com.google.common.collect.Multimaps:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",160,171,"/**
* Creates a collector that groups input elements by key and values.
* @param keyFunction maps each element to its group key
* @param valueFunction maps each element to its associated values
* @param multimapSupplier provides the underlying multimap data structure
*/","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. Each input element is mapped to a key and a stream of values, each of which
   * are put into the resulting {@code Multimap}, in the encounter order of the stream and the
   * encounter order of the streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c),
   *                  MultimapBuilder.linkedHashKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'));
   * }
   * }
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesSpliterator,com.google.common.collect.AbstractTable:valuesSpliterator(),201,203,"/**
* Creates a Spliterator from the table cells.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$TransformedCollection:spliterator(),289,292,"/**
* Creates a Spliterator from a collection and a transform function.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keySpliterator,com.google.common.collect.ImmutableMap:keySpliterator(),1085,1087,"/**
* Returns a Spliterator for keys of entries in a collection.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,spliterator,com.google.common.collect.ImmutableMapValues:spliterator(),66,69,"/**
* Creates a spliterator from the map's values. 
* @return Spliterator of V values",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$NavigableAsMapView:entrySpliterator(),1100,1103,"/**
* Computes and returns spliterator of entries based on key-value mapping.
* @return Spliterator of Entry objects with computed values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,spliterator,com.google.common.collect.Multimaps$Keys:spliterator(),1761,1764,"/**
* Returns spliterator over key set of multimap. 
* @return Spliterator containing keys from multimap
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransformedTable:cellSpliterator(),490,493,"/**
* Creates a spliterator for masked cells.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransposeTable:cellSpliterator(),322,325,"/**
* Returns Spliterator for masked cells.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$FilteredCollection:spliterator(),179,182,"/**
* Returns spliterator of filtered elements.
* @return filtered elements spliterator
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeAll,com.google.common.collect.Collections2$FilteredCollection:removeAll(java.util.Collection),200,203,"/**
* Checks if all elements in the collection match a specific condition.
* @param collection Collection of objects to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,retainAll,com.google.common.collect.Collections2$FilteredCollection:retainAll(java.util.Collection),205,208,"/**
* Checks if any element in the collection does not match the predicate. 
* @param collection Collection of elements to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,transform,"com.google.common.collect.Collections2:transform(java.util.Collection,com.google.common.base.Function)",259,262,"/**
* Applies a transformation to each element in the input collection.
* @param fromCollection original collection of objects
* @param function mapping function to apply to each object
* @return transformed collection with new type T
*/","* Returns a collection that applies {@code function} to each element of {@code fromCollection}.
   * The returned collection is a live view of {@code fromCollection}; changes to one affect the
   * other.
   *
   * <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link
   * UnsupportedOperationException}. All other collection methods are supported, as long as {@code
   * fromCollection} supports them.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is.
   *
   * <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection
   * and use the copy.
   *
   * <p>If the input {@code Collection} is known to be a {@code List}, consider {@link
   * Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:contains(java.lang.Object),1436,1439,"/**
* Checks if an object matches a mask.
* @param o object to check (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,contains,com.google.common.collect.Collections2$FilteredCollection:contains(java.lang.Object),154,162,"/**
* Evaluates the predicate on the given element and returns true if it matches.
* @param element object to apply predicate on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,contains,"com.google.common.collect.Iterables:contains(java.lang.Iterable,java.lang.Object)",141,147,"/**
* Checks for presence of an element in a collection or iterator.
* @param iterable collection or iterator to search
* @param element target object to find
* @return true if found, false otherwise
*/","* Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code
   * Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in
   * cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link
   * ClassCastException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$AsMapView:getOrDefault(java.lang.Object,java.lang.Object)",921,930,"/**
* Returns the result of applying a function to a given key, or a default value if not found.
* @param key object to apply function to
* @param defaultValue value to return if key is null or not found
* @return result of function application or default value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$NavigableAsMapView:getOrDefault(java.lang.Object,java.lang.Object)",1079,1088,"/**
* Retrieves value using key from the set, or returns default value.
* @param key Object to search for in the set
* @param defaultValue Value to return if key is not found
* @return Retrieved value of type V, or null if not found and no default provided
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$RowMap$EntrySet:contains(java.lang.Object),849,858,"/**
* Checks if the given object matches the mask criteria.
* @param obj Object to be checked
* @return true if object represents a valid Entry, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Object),152,155,"/**
* Creates a contiguous set of elements up to the specified element.
* @param toElement element up to which the set is created
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Object,boolean)",160,164,"/**
* Creates a contiguous set of elements up to but not including (or including) the specified element.
* @param toElement upper bound of the set
* @param inclusive true for inclusive range, false otherwise
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Object),187,190,"/**
* Creates a contiguous set of elements from the given element.
* @param fromElement starting element (inclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Object,boolean)",195,199,"/**
* Generates a contiguous set of elements based on the given element and inclusivity flag.
* @param fromElement starting element for the set
* @param inclusive whether to include the start element in the set
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,offer,com.google.common.collect.EvictingQueue:offer(java.lang.Object),91,95,"/**
* Applies mask function to input element.
* @param e input element to be masked
*/","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,<init>,"com.google.common.collect.FilteredEntrySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
* Creates a filtered multimap by applying a predicate to each entry.
* @param unfiltered original multimap
* @param predicate filter criterion for entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,<init>,"com.google.common.collect.FilteredKeyListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",32,34,"/**
* Creates a multimap with filtered keys.
* @param unfiltered original multimap
* @param keyPredicate predicate to filter keys by
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,<init>,"com.google.common.collect.FilteredKeySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
* Creates a filtered multimap with keys matching the specified predicate.
* @param unfiltered original multimap
* @param keyPredicate filter criteria for keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createValues,com.google.common.collect.FilteredEntryMultimap:createValues(),134,137,"/**
* Returns a collection of values based on filter criteria. 
* @return Collection of V objects filtered by current multimap.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createValues,com.google.common.collect.FilteredKeyMultimap:createValues(),212,215,"/**
* Returns a filtered multimap values collection.
* @return Collection of values or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap$Inverse:forEach(java.util.function.BiConsumer),739,743,"/**
* Applies the given BiConsumer action to each entry in the map. 
* @param action consumer to apply to key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,forEach,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:forEach(java.util.function.Consumer),72,75,"/**
 * Invokes the provided consumer on all entries in this map.
 * @param action Consumer to process each entry; null if no processing required
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableSortedMap$1EntrySet:forEach(java.util.function.Consumer),416,423,"/**
* Processes elements in batches using the provided consumer.
* @param consumer callback to process individual elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,forEach,com.google.common.collect.JdkBackedImmutableMap:forEach(java.util.function.BiConsumer),111,115,"/**
* Applies the given action to each entry in the map.
*@param action BiConsumer to process key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,forEach,com.google.common.collect.RegularImmutableAsList:forEach(java.util.function.Consumer),61,65,"/**
* Invokes the provided consumer on each element of this collection.
* @param action Consumer to invoke on each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:forEach(java.util.function.Consumer),269,272,"/**
* Delegates to another service to execute an action on entries.
* @param action consumer function to process entry data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,forEach,com.google.common.collect.RegularImmutableSortedSet:forEach(java.util.function.Consumer),85,88,"/**
* Invokes consumer on each element of collection.
* @param action Consumer to be executed on each element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderKeysBy,com.google.common.collect.ImmutableListMultimap$Builder:orderKeysBy(java.util.Comparator),317,322,"/**
* Configures the map's key comparator.
* @param keyComparator comparator to use for keys
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderKeysBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderKeysBy(java.util.Comparator),368,373,"/**
* Configures the map with a custom comparator for keys.
* @param keyComparator Comparator to compare keys; null for default behavior
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderValuesBy,com.google.common.collect.ImmutableListMultimap$Builder:orderValuesBy(java.util.Comparator),329,334,"/**
* Sets custom comparator for values.
* @param valueComparator comparator to use when comparing values
*/","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderValuesBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderValuesBy(java.util.Comparator),386,391,"/**
* Configures the map's value comparator.
* @param valueComparator comparison function for values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,add,com.google.common.collect.ImmutableSortedMultiset$Builder:add(java.lang.Object),472,477,"/**
* Adds an element to the builder's collection.
* @param element object to be added
* @return this builder instance for fluent API usage
*/","* Adds {@code element} to the {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addCopies,"com.google.common.collect.ImmutableSortedMultiset$Builder:addCopies(java.lang.Object,int)",504,509,"/**
* Configures builder with repeated occurrence of specified element.
* @param element object to configure
* @param occurrences number of times to repeat the element
* @return Builder instance for method chaining
*/","* Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,setCount,"com.google.common.collect.ImmutableSortedMultiset$Builder:setCount(java.lang.Object,int)",521,526,"/**
* Configures builder with specified element and quantity.
* @param element data item to process
* @param count number of items
*/","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator),70,73,"/**
* Returns a collector that accumulates elements into an ImmutableSortedMultiset.
* @param comparator comparator for sorting the multiset
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements are sorted by the specified comparator.
   *
   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as
   * explained in the {@link Comparator} documentation.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",63,66,"/**
* Creates an immutable sorted set of elements masked by 'fromElement'.
* @param fromElement element to mask with
* @param inclusive whether to include 'fromElement' in the result
* @return ImmutableSortedSet containing filtered elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object),641,644,"/**
* Returns an immutable sorted set of elements up to and including {@code toElement}.
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code
   * toElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,headSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",52,55,"/**
* Generates an immutable sorted set of elements up to a specified value.
* @param toElement the upper bound element (inclusive or exclusive as per inclusive flag)
* @param inclusive true for inclusive range, false otherwise
* @return ImmutableSortedSet containing elements up to toElement
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object),694,697,"/**
* Returns an immutable sorted set of elements starting from the specified element.
* @param fromElement starting element (inclusive)
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollFirstEntry(),3325,3328,"/**
* Retrieves an entry based on the given predicate.
* @return matching Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollLastEntry(),3330,3333,"/**
* Filters unfiltered entries using predicate and returns result.
* @return filtered Entry object or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollFirst,com.google.common.collect.Sets$FilteredNavigableSet:pollFirst(),1376,1379,"/**
* Applies filter predicate to result of m1 and returns first match.
* @return object of type E or null if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollLast,com.google.common.collect.Sets$FilteredNavigableSet:pollLast(),1381,1384,"/**
* Applies predicate to filtered results of m1().m2() and returns result as type E.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,cycle,com.google.common.collect.FluentIterable:cycle(),377,379,"/**
* Wraps result of m1() with m3().","* Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this
   * fluent iterable.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in this
   * fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent
   * iterable is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code
   * e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and
   * use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(com.google.common.base.Predicate),414,416,"/**
* Filters elements from the underlying iterable using the given predicate.
* @param predicate function to apply to each element
* @return filtered iterable or empty if no matches found
*/","* Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent
   * iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,java.lang.Class)",614,620,"/**
* Filters an iterable by type using a predicate.
* @param unfiltered input iterable
* @param desiredType target class type
* @return filtered iterable of desired type
*/","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transform,com.google.common.collect.FluentIterable:transform(com.google.common.base.Function),479,482,"/**
* Maps elements from this iterable to a new form using the given function.
* @param function transformation function
*/","* Returns a fluent iterable that applies {@code function} to each element of this fluent
   * iterable.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's
   * iterator does. After a successful {@code remove()} call, this fluent iterable no longer
   * contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(java.util.Iterator),1263,1273,"/**
* Wraps or reuses a given Iterator, converting it to a PeekingIterator.
* @param iterator input iterator to be converted
* @return PeekingIterator instance wrapping the original iterator
*/","* Returns a {@code PeekingIterator} backed by the given iterator.
   *
   * <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the
   * iteration, and hence return the same object each time. A subsequent call to {@code next} is
   * guaranteed to return the same object again. For example:
   *
   * {@snippet :
   * PeekingIterator<String> peekingIterator =
   *     Iterators.peekingIterator(Iterators.forArray(""a"", ""b""));
   * String a1 = peekingIterator.peek(); // returns ""a""
   * String a2 = peekingIterator.peek(); // also returns ""a""
   * String a3 = peekingIterator.next(); // also returns ""a""
   * }
   *
   * <p>Any structural changes to the underlying iteration (aside from those performed by the
   * iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined
   * state.
   *
   * <p>The returned iterator does not support removal after peeking, as explained by {@link
   * PeekingIterator#remove()}.
   *
   * <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be
   * returned to the caller, although this is neither guaranteed to occur nor required to be
   * consistent. For example, this method <i>might</i> choose to pass through recognized
   * implementations of {@code PeekingIterator} when the behavior of the implementation is known to
   * meet the contract guaranteed by this method.
   *
   * <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each
   * individual iterator as it is generated.
   *
   * @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this
   *     iterator, so users should cease making direct calls to it after calling this method.
   * @return a peeking iterator backed by that iterator. Apart from the additional {@link
   *     PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,keyIterator,com.google.common.collect.ImmutableEnumMap:keyIterator(),61,64,"/**
* Returns an unmodifiable iterator over function mask values.
* @return UnmodifiableIterator containing function mask data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,iterator,com.google.common.collect.ImmutableEnumSet:iterator(),72,75,"/**
* Returns an unmodifiable iterator over elements from delegate's iterator. 
* @return Iterator instance or null if delegate is null.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,iterator,com.google.common.collect.Iterables$UnmodifiableIterable:iterator(),105,108,"/**
* Returns an iterator over iterable's elements.
* @return Iterator instance or null if iterable is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$UnmodifiableMultiset:iterator(),170,173,"/**
* Returns an iterator over the elements of this collection.
* @return iterator over the elements of type E
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingIterator(),2037,2040,"/**
* Returns an iterator over elements from delegate's iterator.
* @return Iterator of type E or null if delegate iterator is empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeAll,"com.google.common.collect.Iterables:removeAll(java.lang.Iterable,java.util.Collection)",159,164,"/**
* Removes specified elements from the given iterable.
* @param removeFrom Iterable to remove elements from
* @param elementsToRemove Elements to be removed
* @return true if removal was successful, false otherwise
*/","* Removes, from an iterable, every element that belongs to the provided collection.
   *
   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and
   * {@link Iterators#removeAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAllImpl,"com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Collection)",2128,2145,"/**
* Recursively compares the cardinality of two multiset-like collections.
* @param set initial set
* @param collection second collection to compare with
* @return true if the first collection is smaller, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnKeySet:removeAll(java.util.Collection),717,734,"/**
* Updates backing map based on collection changes.
* @param c the collection to compare with
* @return true if any updates occurred, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:removeAll(java.util.Collection),1039,1044,"/**
* Combines three-element tuples from two iterables using cartesian product.
* @param c second collection of elements to combine with first
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeIf,"com.google.common.collect.Iterables:removeIf(java.lang.Iterable,com.google.common.base.Predicate)",199,206,"/**
* Removes elements from an iterable that match a given predicate.
* @param removeFrom the iterable to remove from
* @param predicate the condition for which elements to remove
*/","* Removes, from an iterable, every element that satisfies the provided predicate.
   *
   * <p>Removals may or may not happen immediately as each element is tested against the predicate.
   * The behavior of this method is not specified if {@code predicate} is dependent on {@code
   * removeFrom}.
   *
   * <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code
   * removeFrom.removeIf(predicate)} instead.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterable
   * @throws UnsupportedOperationException if the iterable does not support {@code remove()}.
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,retainAll,"com.google.common.collect.Iterables:retainAll(java.lang.Iterable,java.util.Collection)",176,181,"/**
* Removes specified elements from a collection or iterable.
* @param removeFrom collection or iterable to modify
* @param elementsToRetain elements to exclude from removal
* @return true if any elements were removed, false otherwise
*/","* Removes, from an iterable, every element that does not belong to the provided collection.
   *
   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and
   * {@link Iterators#retainAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:retainAll(java.util.Collection),1046,1051,"/**
* Combines three elements from two collections using m1() and m2().
* @param c collection to combine with result of m1().m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.AbstractMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Checks if key matches any value in the given collection or iterator.
* @param key unique identifier to search for
* @param values collection or iterator of values to search in
* @return true if key is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardAddAll,com.google.common.collect.ForwardingCollection:standardAddAll(java.util.Collection),159,161,"/**
 * Checks if two iterable collections have a common element.
 * @param collection Iterable collection to check against
 */","* A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link
   * #add}, you may wish to override {@link #addAll} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,addAll,"com.google.common.collect.Iterables:addAll(java.util.Collection,java.lang.Iterable)",325,333,"/**
* Merges collections of objects into a single collection.
* @param addTo target collection
* @param elementsToAdd iterable source to merge
* @return true if merged successfully, false otherwise
*/","* Adds all elements in {@code iterable} to {@code collection}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.util.Iterator),147,153,"/**
* Creates a list from an iterator of elements.
* @param elements iterator containing elements to collect
* @return ArrayList of collected elements or empty if iterator is exhausted
*/","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterator)} instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.util.Iterator),244,249,"/**
* Creates a hash set from an iterator of elements.
* @param elements iterator over unique elements
* @return Set containing all unique elements or null if empty
*/","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterator)} instead.
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}
   * instead.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$FilteredCollection:iterator(),174,177,"/**
* Returns an iterator over filtered elements using the provided predicate.
* @return Iterator over E objects that match the predicate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,java.lang.Class)",688,692,"/**
* Wraps an iterator with the specified type, returning a read-only view.
* @param unfiltered original iterator
* @param desiredType target class for filtering
* @return UnmodifiableIterator of T or throws ClassCastException if not compatible
*/","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:entryIterator(),3270,3273,"/**
* Returns an iterator over filtered entries based on predicate.
* @return Iterator of Entry objects or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingEntryIterator(),3275,3278,"/**
* Creates an iterator of entries filtered by the predicate.
* @return Iterator of filtered entries or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$FilteredMultiset:iterator(),338,341,"/**
* Returns an unmodifiable iterator over elements matching the predicate.
* @return Iterator containing filtered elements or empty iterator if none match.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$FilteredNavigableSet:descendingIterator(),1391,1394,"/**
* Returns an iterator over elements from m1's results filtered by predicate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,all,"com.google.common.collect.Iterables:all(java.lang.Iterable,com.google.common.base.Predicate)",638,641,"/**
* Applies predicate to each element in iterable and returns true if all pass.
* @param iterable iterable of elements to check
* @param predicate predicate function to apply to each element
*/","* Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code
   * iterable} is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate)",652,656,"/**
* Applies a predicate to each element in an iterable and returns the first matching element.
* @param iterable collection of objects to search
* @param predicate condition to evaluate elements against
* @return first T that satisfies the predicate or null if not found
*/","* Returns the first element in {@code iterable} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If it is possible that <i>no</i> element
   * will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()}
   *
   * @throws NoSuchElementException if no element in {@code iterable} matches the given predicate",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,last,com.google.common.collect.Sets$FilteredNavigableSet:last(),1396,1400,"/**
* Returns functional mask based on iterator result and predicate.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,first,com.google.common.collect.Sets$FilteredSortedSet:first(),1325,1329,"/**
* Returns filtered iterator with elements matching the predicate.
* @return Iterator containing filtered elements or empty iterator if none match
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object)",683,686,"/**
* Applies a predicate to the first matching element in an iterable.
* @param iterable input collection
* @param predicate condition to match
* @param defaultValue value to return if no match found
* @return matched element or default value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,lower,com.google.common.collect.Sets$FilteredNavigableSet:lower(java.lang.Object),1356,1359,"/**
* Applies mask function to input element using three-step iterator pipeline.
* @param e input element subject to masking
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,floor,com.google.common.collect.Sets$FilteredNavigableSet:floor(java.lang.Object),1361,1364,"/**
* Applies predicate to iterator results and returns result of type E.
* @param e input object of type E
* @return result of type E or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$TransformedCollection:iterator(),284,287,"/**
* Returns an iterator over elements transformed by the specified function.
* @return Iterator of transformed T objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransformedTable:cellIterator(),485,488,"/**
* Returns an iterator over masked cells.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransposeTable:cellIterator(),317,320,"/**
* Returns an iterator over cell values in the transposed table.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.UndirectedGraphConnections:incidentEdgeIterator(java.lang.Object),79,84,"/**
* Returns an iterator over endpoint pairs for the given node.
* @param thisNode current node
* @return Iterator of EndpointPairs or empty if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$AsMap:clear(),1403,1410,"/**
* Recursively iterates over multimap, handling shared submaps.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$KeySet:clear(),994,997,"/**
* Invokes iterator operation on results of primary iteration.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAllNodes,com.google.common.collect.LinkedListMultimap:removeAllNodes(java.lang.Object),298,300,"/**
 * Clears the cache entry associated with the given key. 
 * @param key unique identifier for the cache entry to clear
 */",Removes all nodes for the specified key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$IteratorBasedAbstractMap:clear(),3787,3790,"/**
 * Calls the iterator's m2() method with result of m1().",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,clear,com.google.common.collect.TreeMultiset:clear(),349,371,"/**
* Reinitializes the AVL tree by clearing nodes and rebalancing if necessary.
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessListWrapper:<init>(java.util.List),1210,1212,"/**
* Initializes wrapper with a reference to an existing List.
* @param backingList list being wrapped by this wrapper
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIteratorImpl,"com.google.common.collect.Lists:listIteratorImpl(java.util.List,int)",1130,1132,"/**
* Returns an iterator over a specified sublist of elements.
* @param list input list
* @param index starting index of the sublist
*/",Returns an implementation of {@link List#listIterator(int)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object[])",310,312,"/**
* Creates a list with an initial element and optional additional elements.
* @param first the first element
* @param rest array of optional additional elements
*/","* Returns an unmodifiable list containing the specified first element and backed by the specified
   * array of additional elements. Changes to the {@code rest} array will be reflected in the
   * returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessReverseList:<init>(java.util.List),1008,1010,"/**
* Initializes a list with random access and reverse iteration capabilities from an existing list.
* @param forwardList input list to wrap
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,transform,"com.google.common.collect.Lists:transform(java.util.List,com.google.common.base.Function)",551,556,"/**
* Transforms a list of objects into another type using the provided function.
* @param fromList input list to transform
* @param function mapping function for each element in the list
* @return transformed list of objects or null if the input is not random-accessible
*/","* Returns a list that applies {@code function} to each element of {@code fromList}. The returned
   * list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected
   * in the returned list and vice versa.
   *
   * <p>Since functions are not reversible, the transform is one-way and new items cannot be stored
   * in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported
   * in the returned list.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned list
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a
   * view, copy the returned list into a new list of your choosing.
   *
   * <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned
   * list is threadsafe if the supplied list and function are.
   *
   * <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link
   * Collections2#transform} or {@link Iterables#transform}.
   *
   * <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList},
   * its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This
   * can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>.
   * Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then
   * serialize the copy. Other methods similar to this do not implement serialization at all for
   * this reason.
   *
   * <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link
   * java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you
   * to migrate to streams.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object,java.lang.Object[])",330,333,"/**
* Creates a list containing the provided elements and any additional items in the array.
* @param first leading element
* @param second second element
* @param rest optional array of additional elements
*/","* Returns an unmodifiable list containing the specified first and second element, and backed by
   * the specified array of additional elements. Changes to the {@code rest} array will be reflected
   * in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum
   * argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param second the second element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedAsMapView:<init>(java.util.SortedSet,com.google.common.base.Function)",986,988,"/**
* Constructs a sorted map view from a sorted set. 
* @param set the underlying sorted set
* @param function a function to transform keys into values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.Set,com.google.common.base.Function)",819,822,"/**
* Maps a set to a map using the provided function.
* @param set input set of unique keys
* @param function mapping function from key to value
*/","* Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are
   * computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link
   * #toMap(Iterable, Function)}.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$SortedKeySet:<init>(java.util.SortedMap),3978,3980,"/**
* Constructs a new SortedKeySet from a given SortedMap.
* @param map the SortedMap to create a key set from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$ViewCachingAbstractMap:createKeySet(),3728,3730,"/**
* Creates a set of function masks.
* @return Set of function keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.NavigableSet,com.google.common.base.Function)",875,879,"/**
* Creates a navigable map view from the given set and transformation function.
* @param set navigable key set
* @param function mapping function to apply to each key
*/","* Returns a view of the navigable set as a map, mapping keys from the set according to the
   * specified function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesSortedMap:<init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2227,2230,"/**
* Creates a sorted map of transformed entries.
* @param fromMap initial sorted map to transform
* @param transformer entry transformation function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",1959,1964,"/**
* Transform map entries using the provided transformer and return a new map with updated values.
* @param fromMap original map to transform
* @param transformer entry transformation function
* @return new map with transformed entries or null if input is null
*/","* Returns a view of a map whose values are derived from the original map's entries. In contrast
   * to {@link #transformValues}, this method's entry-transformation logic may depend on the key as
   * well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""no"" + key;
   *       }
   *     };
   * Map<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {verbose=verbose, sort=nosort}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$DescendingMap:values(),4459,4462,"/**
* Returns a collection of values associated with this instance.
* @return Collection of V values or empty collection if none are set.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredMapValues:<init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)",2910,2915,"/**
* Initializes a filtered map view from the provided maps.
* @param filteredMap base map with filtered values
* @param unfiltered original map containing all entries
* @param predicate entry filter condition (null to include all)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$TransformedEntriesMap:values(),2213,2216,"/**
* Returns a collection of V2 values based on this instance.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$ViewCachingAbstractMap:createValues(),3740,3742,"/**
* Returns a collection of values associated with this instance.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entrySpliterator,com.google.common.collect.ImmutableEnumMap:entrySpliterator(),102,105,"/**
* Returns a Spliterator for Entries in the map.
* @return Spliterator of Map entries.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableOrNull,com.google.common.collect.Maps:unmodifiableOrNull(java.util.Map$Entry),3445,3448,"/**
* Returns a new Entry instance with masked values if the input is non-null.
* @param entry input Entry object or null
* @return new Entry instance or null if input was null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsEntryImpl,"com.google.common.collect.Maps:containsEntryImpl(java.util.Collection,java.lang.Object)",3854,3860,"/**
* Checks if a collection contains an entry with the given object as its key or value.
* @param c Collection of entries to search
* @param o Object to match (key or value)
* @return true if found, false otherwise
*/","* Implements {@code Collection.contains} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding
   * collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object that might be contained in {@code c}
   * @return {@code true} if {@code c} contains {@code o}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeEntryImpl,"com.google.common.collect.Maps:removeEntryImpl(java.util.Collection,java.lang.Object)",3873,3879,"/**
* Checks if a collection contains a specific entry.
* @param c Collection of entries
* @param o Entry to search for (null indicates absence)
*/","* Implements {@code Collection.remove} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object to remove from {@code c}
   * @return {@code true} if {@code c} was changed",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:transformEntry(java.util.Map$Entry),2385,2387,"/**
* Transforms an existing Entry to a new type using the provided transformer.
* @param entry existing Entry object or null
* @return transformed Entry object or null if input is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$TransformedEntriesMap:entryIterator(),2194,2198,"/**
* Returns an iterator of map entries transformed by a specified function.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$TransformedEntriesMap:entrySpliterator(),2200,2204,"/**
* Returns a Spliterator for entries in the map, applying the transformer.
* @return Spliterator of transformed map entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entryIterator,com.google.common.collect.Multimaps$TransformedEntriesMultimap:entryIterator(),1541,1545,"/**
* Returns an iterator over entries from a multimap transformed by the given function.
* @return Iterator of transformed entries or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$AsMap:get(java.lang.Object),1353,1362,"/**
* Retrieves a collection of values associated with the given key.
* @param key object to search for in the map
* @return Collection of values or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.AbstractMapBasedMultiset:count(java.lang.Object),250,254,"/**
* Calculates the FUNC_MASK value based on the given element's frequency in the backing map.
* @param element object to check frequency for
* @return FUNC_MASK value or 0 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$CellSet:contains(java.lang.Object),134,144,"/**
* Checks if the provided object matches a Cell instance and has valid data.
* @param o Object to be checked
* @return True if the object is a valid Cell, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,com.google.common.collect.AbstractTable$CellSet:remove(java.lang.Object),146,156,"/**
* Evaluates a given object against the function mask.
* @param o Object to evaluate
* @return true if object matches the function mask, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.AbstractTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
* Retrieves a value from a map based on row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return Value associated with the key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,count,com.google.common.collect.ConcurrentHashMultiset:count(java.lang.Object),142,146,"/**
* Retrieves and returns a functional mask value from the count map.
* @param element object for which to retrieve the mask
* @return functional mask value or 0 if not found
*/","* Returns the number of occurrences of {@code element} in this multiset.
   *
   * @param element the element to look for
   * @return the nonnegative number of occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,removeExactly,"com.google.common.collect.ConcurrentHashMultiset:removeExactly(java.lang.Object,int)",314,340,"/**
* Checks if a mask element exists with specified occurrences.
* @param element the object to search for
* @param occurrences the target occurrence count
* @return true if found, false otherwise
*/","* Removes exactly the specified number of occurrences of {@code element}, or makes no change if
   * this is not possible.
   *
   * <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element
   * count is smaller than {@code occurrences}.
   *
   * @param element the element to remove
   * @param occurrences the number of occurrences of {@code element} to remove
   * @return {@code true} if the removal was possible (including if {@code occurrences} is zero)
   * @throws IllegalArgumentException if {@code occurrences} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int)",349,393,"/**
* Updates and fetches the FUNC_MASK value for a given element.
* @param element E object to operate on
* @param count integer value to update with
* @return updated int value or 0 if not found
*/","* Adds or removes occurrences of {@code element} such that the {@link #count} of the element
   * becomes {@code count}.
   *
   * @return the count of {@code element} in the multiset before this call
   * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int,int)",405,447,"/**
* Verifies update mask by comparing old and new counts.
* @param element object to verify
* @param expectedOldCount expected previous count
* @param newCount new count value
* @return true if update is valid, false otherwise
*/","* Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is
   * currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly
   * {@code expectedOldCount} times, no changes will be made.
   *
   * @return {@code true} if the change was successful. This usually indicates that the multiset has
   *     been modified, but not always: in the case that {@code expectedOldCount == newCount}, the
   *     method will return {@code true} if the condition was met.
   * @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$EntrySet:contains(java.lang.Object),4211,4220,"/**
* Checks if the given object matches a functional mask.
* @param o nullable object to check
* @return true if object matches mask, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,count,com.google.common.collect.Multimaps$Keys:count(java.lang.Object),1792,1796,"/**
* Computes mask value from multimap elements.
* @param element object to fetch associated values for
* @return non-negative integer mask value or 0 if no matches
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.StandardTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
* Retrieves a value from the backing map using row and column keys.
* @param rowKey unique row identifier or null for no result
* @param columnKey unique column identifier or null for no result
* @return Value object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsKey,com.google.common.collect.AbstractMapBasedMultimap$AsMap:containsKey(java.lang.Object),1348,1351,"/**
* Checks if a key exists in the submap.
* @param key nullable object to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.AbstractTable:containsRow(java.lang.Object),43,46,"/**
* Checks if a row key matches the mask.
* @param rowKey unique identifier or null to check all rows
* @return true if row key matches, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.AbstractTable:containsColumn(java.lang.Object),48,51,"/**
* Checks if a mask exists in the database.
* @param columnKey unique identifier of the mask (null to check all)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,"com.google.common.collect.AbstractTable:contains(java.lang.Object,java.lang.Object)",73,77,"/**
* Checks if a cell value exists at the specified row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return true if cell value exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.StandardTable:containsColumn(java.lang.Object),91,102,"/**
* Checks if a key exists in any of the underlying maps.
* @param columnKey key to search for
* @return true if found, false otherwise",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.StandardTable:containsRow(java.lang.Object),104,107,"/**
* Checks if a row exists in the backing map.
* @param rowKey unique identifier of the row to check
* @return true if the row exists, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeValuesForKey,com.google.common.collect.AbstractMapBasedMultimap:removeValuesForKey(java.lang.Object),1148,1156,"/**
* Removes the specified key from the map and updates the total size.
* @param key object to remove or null for no-op
*/",Removes all values for the provided key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,"com.google.common.collect.AbstractTable:remove(java.lang.Object,java.lang.Object)",95,100,"/**
* Retrieves a value from the map using row and column keys.
* @param rowKey unique row identifier or null to fetch all
* @param columnKey unique column identifier or null for all columns
* @return Value object associated with the key, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$UnmodifiableMultimap:forEach(java.util.function.BiConsumer),722,725,"/**
* Wraps and delegates to underlying map with key-value transformation.
* @param consumer BiConsumer to transform and process entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(),134,137,"/**
* Creates an empty MultimapBuilder instance with Comparable keys.","* Uses a naturally-ordered {@link TreeMap} to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createAsMap,com.google.common.collect.LinkedListMultimap:createAsMap(),833,836,"/**
* Returns a map of key-value pairs with each key associated to a collection of values.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$MapMultimap:createAsMap(),1280,1283,"/**
* Returns an immutable map view of this object's key-value pairs with values as collections. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forMap,com.google.common.collect.Multimaps:forMap(java.util.Map),1131,1134,"/**
* Converts a map to a multimap with function mask.
* @param map input map
* @return SetMultimap object wrapping the map
*/","* Returns a multimap view of the specified map. The multimap is backed by the map, so changes to
   * the map are reflected in the multimap, and vice versa. If the map is modified while an
   * iteration over one of the multimap's collection views is in progress (except through the
   * iterator's own {@code remove} operation, or through the {@code setValue} operation on a map
   * entry returned by the iterator), the results of the iteration are undefined.
   *
   * <p>The multimap supports mapping removal, which removes the corresponding mapping from the map.
   * It does not support any operations which might add mappings, such as {@code put}, {@code
   * putAll} or {@code replaceValues}.
   *
   * <p>The returned multimap will be serializable if the specified map is serializable.
   *
   * @param map the backing map for the returned multimap view",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1616,1619,"/**
* Creates a new multimap with transformed entries.
* @param fromMultimap source multimap to transform
* @param transformer function to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1438,1443,"/**
* Transforms a multimap by applying the given entry transformer.
* @param fromMap original multimap to transform
* @param transformer function to apply to each entry in the map
* @return new transformed multimap
*/","* Returns a view of a multimap whose values are derived from the original multimap's entries. In
   * contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * SetMultimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 1, ""a"", 4, ""b"", -6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *          return (value >= 0) ? key : ""no"" + key;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[a, a], b=[nob]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.lang.Iterable),559,569,"/**
* Merges iterable elements into the set.
* @param elements collection of elements to merge
*/","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",911,918,"/**
* Updates the multiset with new elements and checks for mask functionality.
* @param self original multiset instance
* @param elements new elements to add
* @return true if mask is enabled, false otherwise
*/",A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrences,"com.google.common.collect.Multisets:retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",716,720,"/**
* Merges two multisets, modifying the first to retain elements of the second.
* @param multisetToModify The multiset to be modified
* @param multisetToRetain  The multiset whose elements should be retained in the modification
*/","* Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code
   * multisetToRetain.count(e)}.
   *
   * <p>To be precise, {@code multisetToModify.count(e)} is set to {@code
   * Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link
   * #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)},
   * but mutates {@code multisetToModify} instead of returning a view.
   *
   * <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of
   * elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all
   * other elements.
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable)",767,781,"/**
* Removes specified occurrences from the given multiset.
* @param multisetToModify multiset to modify
* @param occurrencesToRemove iterable of elements to remove
* @return true if any removals occurred, false otherwise
*/","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * Iterables.frequency(occurrencesToRemove, e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code
   *     Multiset})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,retainAll,com.google.common.collect.AbstractMultiset:retainAll(java.util.Collection),117,121,"/**
* Checks if all elements in the given collection are present in this set.
* @param elementsToRetain Collection of elements to retain
* @return true if all elements match, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRetainAll,com.google.common.collect.ForwardingMultiset:standardRetainAll(java.util.Collection),202,205,"/**
* Checks if specified elements are present in this collection.
* @param elementsToRetain Collection of elements to check
*/","* A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",291,299,"/**
* Retrieves elements from the queue and stores them in the collection within a specified time limit.
* @param q BlockingQueue to retrieve elements from
* @param buffer Collection to store retrieved elements
* @param numElements Number of elements to retrieve
* @param timeout Time duration for retrieval operation
*/","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",361,368,"/**
* Retrieves up to 'numElements' elements from the queue and adds them to the collection.
* @param q BlockingQueue to dequeue elements from
* @param buffer Collection to store dequeued elements
* @param numElements maximum number of elements to retrieve
* @param timeout time limit for operation","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a
   * different behavior in case it is interrupted while waiting. In that case, the operation will
   * continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Comparable),417,422,"/**
* Checks if the collection contains the specified element.
* @param input element to search for
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,containsAll,com.google.common.collect.Range:containsAll(java.lang.Iterable),440,460,"/**
* Evaluates a collection of objects against a predicate.
* @param values iterable collection of objects
*/","* Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in
   * this range.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,contains,com.google.common.collect.RegularContiguousSet:contains(java.lang.Object),171,183,"/**
* Checks if the provided object is of type C and passes m1() method.
* @param object object to check, may be null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,contains,com.google.common.collect.TreeRangeMap$RangeMapEntry:contains(java.lang.Comparable),107,109,"/**
* Calls nested function m1() to perform m2 operation on provided value.
* @param value input data for m2 evaluation
* @return result of m2 operation, or false if failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse:forEach(java.util.function.BiConsumer),216,220,"/**
* Applies a bi-consumer action to each entry of the map.
*@param action BiConsumer to apply to key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,lower,com.google.common.collect.RegularImmutableSortedSet:lower(java.lang.Object),223,227,"/**
* Retrieves an element from a collection based on a functional mask.
* @param element element to be retrieved
* @return element or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,floor,com.google.common.collect.RegularImmutableSortedSet:floor(java.lang.Object),229,233,"/**
* Retrieves an element from a collection using a custom indexing function.
* @param element the input element to search for
* @return the matching element or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,ceiling,com.google.common.collect.RegularImmutableSortedSet:ceiling(java.lang.Object),235,239,"/**
* Retrieves an element from the collection by its functional mask value.
* @param element object to retrieve a mask for
* @return E object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,higher,com.google.common.collect.RegularImmutableSortedSet:higher(java.lang.Object),241,245,"/**
* Returns an element from the collection based on FUNC_MASK logic.
* @param element input element to process
* @return matching element or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,forEachPair,"com.google.common.collect.Streams:forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer)",395,409,"/**
* Merges two streams of objects into a single sequence, applying a bi-consumer to each pair.
* @param streamA first stream
* @param streamB second stream
* @param consumer function to apply to each pair of elements
*/","* Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA}
   * and {@code streamB}. If one stream is longer than the other, the extra elements are silently
   * ignored. Elements passed to the consumer are guaranteed to come from the same position in their
   * respective source streams. For example:
   *
   * {@snippet :
   * Streams.forEachPair(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> System.out.println(arg1 + "":"" + arg2)
   * }
   *
   * <p>will print:
   *
   * {@snippet :
   * foo1:bar1
   * foo2:bar2
   * }
   *
   * <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence
   * between elements will be made, but the order in which those pairs of elements are passed to the
   * consumer is <i>not</i> defined.
   *
   * <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}.
   * This method behaves equivalently to {@linkplain #zip zipping} the stream elements into
   * temporary pair objects and then using {@link Stream#forEach} on that stream.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedCollection:<init>(java.util.Collection,java.lang.Object)",127,129,"/**
* Initializes a synchronized collection with the given delegate and synchronization object.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedEntry:<init>(java.util.Map$Entry,java.lang.Object)",1793,1795,"/**
* Creates a synchronized entry from the given delegate and mutex.
* @param delegate entry to synchronize
* @param mutex synchronization object (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMap:<init>(java.util.Map,java.lang.Object)",1068,1070,"/**
* Constructs a synchronized map with the specified delegate and mutex.
* @param delegate underlying map to synchronize
* @param mutex synchronization object (or null for default locking)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMultimap:<init>(com.google.common.collect.Multimap,java.lang.Object)",608,610,"/**
 * Constructs a synchronized multimap with the given delegate and lock.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedTable:<init>(com.google.common.collect.Table,java.lang.Object)",2042,2044,"/**
* Creates a synchronized table with shared locking semantics.
* @param delegate underlying table instance
* @param mutex synchronization lock object (null for no locking)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",81,100,"/**
* Creates a Collector for aggregating data into a Table.
* @param rowFunction function to extract table rows
* @param columnFunction function to extract table columns
* @param valueFunction function to extract table values
* @param tableSupplier supplier for the resulting Table object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",100,114,"/**
* Creates a Collector for mapping and aggregating data into a Table.
* @param rowFunction maps input element to table row
* @param columnFunction maps input element to table column
* @param valueFunction maps input element to table cell value
* @param mergeFunction merges two table cell values
* @param tableSupplier creates the underlying Table instance","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, the specified merging function is
   * used to combine the values. Like {@link
   * java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function,
   * BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code
   * NullPointerException} on null values returned from {@code valueFunction}, and treats nulls
   * returned from {@code mergeFunction} as removals of that row/column pair.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transformValues,"com.google.common.collect.Tables:transformValues(com.google.common.collect.Table,com.google.common.base.Function)",401,409,"/**
* Applies a transformation function to the values of a table.
* @param fromTable input table
* @param function mapping function for each value
* @return transformed table with same schema
*/","* Returns a view of a table where each value is transformed by a function. All other properties
   * of the table, such as iteration order, are left intact.
   *
   * <p>Changes in the underlying table are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying table.
   *
   * <p>It's acceptable for the underlying table to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed table might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned table is not thread-safe or serializable, even if the underlying table is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * table to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform
   * well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't
   * need to be a view, copy the returned table into a new table of your choosing.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transpose,com.google.common.collect.Tables:transpose(com.google.common.collect.Table),213,218,"/**
* Returns the original or transposed table based on its type.
* @param table input table to be returned
*/","* Creates a transposed view of a given table that flips its row and column keys. In other words,
   * calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as
   * calling {@code get(rowKey, columnKey)} on the original table. Updating the original table
   * changes the contents of the transposed table and vice versa.
   *
   * <p>The returned table supports update operations as long as the input table supports the
   * analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable}
   * instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code
   * columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other
   * way around.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,<init>,com.google.common.collect.TransformedListIterator:<init>(java.util.ListIterator),33,35,"/**
* Constructs an iterator wrapping the given list iterator.
* @param backingIterator underlying list iterator to iterate over
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,expand,com.google.common.collect.TreeTraverser$PostOrderIterator:expand(java.lang.Object),243,245,"/**
* Creates a PostOrderNode instance with data 't' and mask value from 'm1(t)'.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,create,com.google.common.escape.ArrayBasedEscaperMap:create(java.util.Map),46,48,"/**
* Creates an escaper map with function-based replacements.
* @param replacements map of characters to escaped strings
*/","* Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or
   * ArrayBasedUnicodeEscaper instances.
   *
   * @param replacements a map of characters to their escaped representations",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscapes,"com.google.common.escape.CharEscaperBuilder:addEscapes(char[],java.lang.String)",94,101,"/**
* Sets replacement characters for specified input array and string.
* @param cs input character array
* @param r replacement string
*/",Add multiple mappings at once for a particular index.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,nextEscapeIndex,"com.google.common.escape.UnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",130,140,"/**
* Searches for the first non-matching character in a CharSequence.
* @param csq input string
* @param start starting search position
* @param end ending search position
* @return next potential match position or start if no match found
*/","* Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of
   * the next character that requires escaping.
   *
   * <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for
   * efficiency. The base class implementation determines successive Unicode code points and invokes
   * {@link #escape(int)} for each of them. If the semantics of your escaper are such that code
   * points in the supplementary range are either all escaped or all unescaped, this method can be
   * implemented more efficiently using {@link CharSequence#charAt(int)}.
   *
   * <p>Note however that if your escaper does not escape characters in the supplementary range, you
   * should either continue to validate the correctness of any surrogate characters encountered or
   * provide a clear warning to users that your escaper does not validate its input.
   *
   * <p>See {@link com.google.common.net.PercentEscaper} for an example.
   *
   * @param csq a sequence of characters
   * @param start the index of the first character to be scanned
   * @param end the index immediately after the last character to be scanned
   * @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid
   *     surrogate pairs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber$SynchronizedSubscriber:invokeSubscriberMethod(java.lang.Object),138,143,"/**
 * Calls superclass's m1 method with synchronization on this instance.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,context,com.google.common.eventbus.Subscriber:context(java.lang.Object),98,100,"/**
* Creates a SubscriberExceptionContext instance with the given parameters.
* @param bus Event bus instance
* @param event Object that triggered the exception
* @param target Target object associated with the exception
* @param method Method that caused the exception
*/",Gets the context for the given event.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if two nodes have the same mask.
* @param nodeU first node to compare
* @param nodeV second node to compare
* @return true if both nodes have the same mask, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
* Checks if two nodes have matching masks.
* @param nodeU first node to compare
* @param nodeV second node to compare
* @return true if masks match, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,com.google.common.graph.AbstractNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),231,238,"/**
* Recursively checks endpoint pair validity.
* @param endpoints EndpointPair object containing endpoint data
* @return true if valid, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,<init>,com.google.common.graph.UndirectedMultiNetworkConnections:<init>(java.util.Map),45,47,"/**
 * Initializes an undirected multi-network connections graph from the given map of edges. 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,<init>,com.google.common.graph.UndirectedNetworkConnections:<init>(java.util.Map),37,39,"/**
* Initializes an undirected network with given edge connections.
* @param incidentEdgeMap map of edges to their connected nodes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:<init>(java.lang.Object),80,82,"/**
* Initializes a new prediction model with the given node.
* @param node input data node to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:<init>(java.lang.Object),101,103,"/**
* Initializes success node with given data.
* @param node Node to be initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.DirectedNetworkConnections:edgesConnecting(java.lang.Object),62,65,"/**
* Retrieves edges connecting to the given node.
* @param node Node object
* @return Set of connected nodes or empty set if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.UndirectedNetworkConnections:edgesConnecting(java.lang.Object),54,57,"/**
* Retrieves edges connecting to the given node.
* @param node target node in the graph
* @return set of edge endpoints or empty set if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,<init>,com.google.common.graph.MapRetrievalCache:<init>(java.util.Map),35,37,"/**
* Initializes cache with a backing map.
* @param backingMap underlying data structure to store cached values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,get,com.google.common.graph.MapIteratorCache:get(java.lang.Object),82,91,"/**
* Retrieves a masked object value by key, potentially falling back to alternative retrieval methods.
* @param key the object identifier
* @return the retrieved value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,of,com.google.common.graph.UndirectedGraphConnections:of(com.google.common.graph.ElementOrder),47,58,"/**
* Creates an instance of UndirectedGraphConnections based on the specified incident edge order.
* @param incidentEdgeOrder ElementOrder to determine graph connections implementation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,sequentialFunnel,com.google.common.hash.Funnels:sequentialFunnel(com.google.common.hash.Funnel),173,176,"/**
* Creates a sequential funnel that wraps the given element funnel, allowing iteration over elements.
* @param elementFunnel funnel for individual elements
*/","* Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration
   * order with the specified funnel. No separators are added between the elements.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,asOutputStream,com.google.common.hash.Funnels:asOutputStream(com.google.common.hash.PrimitiveSink),246,248,"/**
* Wraps a PrimitiveSink instance as an OutputStream.","* Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel
   * funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of
   * the object to an {@code OutputStream}.
   *
   * <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing,
   * and no method throws {@code IOException}.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,stringFunnel,com.google.common.hash.Funnels:stringFunnel(java.nio.charset.Charset),86,88,"/**
* Creates a string funnel with specified character set.
* @param charset target character encoding
*/","* Returns a funnel that encodes the characters of a {@code CharSequence} with the specified
   * {@code Charset}.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,asWriter,com.google.common.io.CharStreams:asWriter(java.lang.Appendable),346,351,"/**
* Converts an Appendable to a Writer, or wraps it in a custom writer.
* @param target the Appendable to convert or wrap
* @return a Writer instance suitable for writing to the target
*/","* Returns a Writer that sends all output to the given {@link Appendable} target. Closing the
   * writer will close the target if it is {@link Closeable}, and flushing the writer will flush the
   * target if it is {@link java.io.Flushable}.
   *
   * @param target the object to which output will be sent
   * @return a new Writer object, unless target is a Writer, in which case the target is returned",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,canDecode,com.google.common.io.BaseEncoding$StandardBaseEncoding:canDecode(java.lang.CharSequence),738,751,"/**
* Validates input string against alphabet rules.
*@param chars input string to validate
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:trimTrailingPadding(java.lang.CharSequence),1153,1156,"/**
* Delegates CharSequence manipulation to underlying delegate. 
* @param chars input sequence of characters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeChecked,com.google.common.io.BaseEncoding:decodeChecked(java.lang.CharSequence),230,236,"/**
* Processes input CharSequence to produce a byte array.
* @param chars input string
*/","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws DecodingException if the input is not a valid encoded string according to this
   *     encoding.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$CharSequenceCharSource:openStream(),545,548,"/**
* Returns a Reader instance to iterate over the sequence.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,create,com.google.common.io.Closer:create(),85,87,"/**
* Creates a Closer instance with a suppressing suppressor.
* @return Closer object
*/",Creates a new {@link Closer}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.lang.String),44,46,"/**
* Initializes filter with compiled regular expression.
* @param patternStr string representation of regex pattern
*/","* Constructs a pattern file name filter object.
   *
   * @param patternStr the pattern string on which to filter file names
   * @throws PatternSyntaxException if pattern compilation fails (runtime)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log2,"com.google.common.math.BigIntegerMath:log2(java.math.BigInteger,java.math.RoundingMode)",84,121,"/**
* Calculates the mask value for a given BigInteger and rounding mode.
* @param x BigInteger value
* @param mode RoundingMode to apply
* @return int mask value
*/","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,cast,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:cast(java.lang.Class,java.lang.Object)",128,130,"/**
* Wraps primitive values in their corresponding object type.
* @param type class of the target type
* @param value primitive value to be wrapped
* @return boxed value or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,cast,"com.google.common.collect.MutableClassToInstanceMap:cast(java.lang.Class,java.lang.Object)",181,184,"/**
* Wraps primitive conversion using Primitives.m1 and returns result.
* @param type Class of the desired primitive type
* @param value Value to be converted (or null)
* @return T object or null if input is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String),212,215,"/**
* Returns a byte value based on the given string, using default buffer size.
* @param string input string to process
*/","* Returns the unsigned {@code byte} value represented by the given decimal string.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String),342,345,"/**
* Calls m1 with default max length of 10.
* @param s input string
*/","* Returns the unsigned {@code int} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ClassInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",301,304,"/**
* Constructs ClassInfo with specified file, resource name, and class loader.
* @param file File containing class information
* @param resourceName Name of the resource (class)
* @param loader ClassLoader to use for loading the class
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$ConstructorInvokable:<init>(java.lang.reflect.Constructor),424,427,"/**
 * Constructs an instance of Invokable with the given constructor.
 * @param constructor target constructor to invoke
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$MethodInvokable:<init>(java.lang.reflect.Method),360,363,"/**
* Constructs a new MethodInvokable instance with the given method.
* @param method the method to invoke
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,forLookup,com.google.common.reflect.TypeResolver$TypeVariableKey:forLookup(java.lang.reflect.Type),579,585,"/**
* Returns a type variable key if the input is a type variable, otherwise returns null. 
* @param t the input type to check
*/",Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)",197,202,"/**
* Creates an asynchronous future that catches a specific exception type and returns the fallback value.
* @param input Asynchronous operation to be wrapped
* @param exceptionType Type of exception to catch
* @param fallback Value to return if the specified exception is caught
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)",228,233,"/**
* Catches a future result of type V and returns a fallback value if an exception of type X is thrown. 
* @param input the ListenableFuture to catch
* @param exceptionType the expected exception class
* @param fallback a function to return a fallback value in case of exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getFutureValue,com.google.common.util.concurrent.AbstractFuture:getFutureValue(com.google.common.util.concurrent.ListenableFuture),611,684,"/**
* Transforms a ListenableFuture into a consistent object representation.
* @param future the input future to transform
*/","* Returns a value that satisfies the contract of the {@link #value} field based on the state of
   * given future.
   *
   * <p>This is approximately the inverse of {@link #getDoneValue(Object)}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(java.time.Duration),751,753,"/**
* Initializes Schedule with specified time duration.
* @param delay Duration to schedule (converted internally to nanoseconds)","* @param delay the time from now to delay execution
       * @since 31.1 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)",217,220,"/**
* Asynchronously transforms input future using provided async function.
* @param inputFuture input data as a listenable future
* @param function asynchronous transformation function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)",247,250,"/**
* Transforms a future result using the provided function.
* @param inputFuture ListenableFuture containing data to transform
* @param function transformation function to apply to input data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,afterDone,com.google.common.util.concurrent.AggregateFuture:afterDone(),77,95,"/**
* Invokes parent method, processes futures and notifies listeners if interrupted. 
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,releaseResources,com.google.common.util.concurrent.CollectionFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),76,80,"/**
* Releases resources based on specified reason.
* @param reason reason for releasing resources (e.g. cancelled, failed)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,releaseResources,com.google.common.util.concurrent.CombinedFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),69,82,"/**
* Handles resource release based on given reason.
* @param reason reason for releasing resources
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(),69,71,"/**
* Creates an instance of AtomicLongMap with a ConcurrentHashMap as backing map. 
* @return AtomicLongMap instance
*/",Creates an {@code AtomicLongMap}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicLongMap:accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)",184,188,"/**
* Computes an accumulation value using the provided function and initial value.
* @param key arbitrary key
* @param x update value
* @param accumulatorFunction binary operator for accumulation
* @return accumulated value as a long integer
*/","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the new value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicLongMap:getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)",198,202,"/**
* Applies the given accumulator function to the initial value and input.
* @param key arbitrary key
* @param x input value
* @param accumulatorFunction binary operator for accumulation
* @return result of computation as a long value
*/","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the old value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,put,"com.google.common.util.concurrent.AtomicLongMap:put(java.lang.Object,long)",208,211,"/**
* Updates function mask with new value and returns the updated mask.
* @param key unique key identifier
* @param newValue new function mask value
*/","* Associates {@code newValue} with {@code key} in this map, and returns the value previously
   * associated with {@code key}, or zero if there was no such value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyAsyncClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object)",2195,2208,"/**
* Executes the given asynchronous transformation function and returns its result.
* @param transformation function to be executed
* @param input data to be transformed
* @return FluentFuture containing the result or null if an exception occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClose,"com.google.common.util.concurrent.ClosingFuture$DeferredCloser:eventuallyClose(java.lang.Object,java.util.concurrent.Executor)",232,241,"/**
* Executes a closure on the given object and returns it.
* @param closeable object to be closed
* @param closingExecutor executor for closing operations
* @return original object or null if not provided
*/","* Captures an object to be closed when a {@link ClosingFuture} pipeline is done.
     *
     * <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code
     * AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code
     * Closeable}. (For more about the flavors, see <a
     * href=""https://github.com/google/guava#adding-guava-to-your-build"">Adding Guava to your
     * build</a>.)
     *
     * <p>Be careful when targeting an older SDK than you are building against (most commonly when
     * building for Android): Ensure that any object you pass implements the interface not just in
     * your current SDK version but also at the oldest version you support. For example, <a
     * href=""https://developer.android.com/sdk/api_diff/16/"">API Level 16</a> is the first version
     * in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper
     * {@code Closeable} with a method reference like {@code cursor::close}.
     *
     * <p>Note that this method is still binary-compatible between flavors because the erasure of
     * its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}.
     *
     * @param closeable the object to be closed (see notes above)
     * @param closingExecutor the object will be closed on this executor
     * @return the first argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Peeker:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1159,1170,"/**
* Combines and executes the given callable with a list of closers.
* @param combiner Callable to combine with closers
* @param closeables List of closers to use in combination
* @return Result of the combined callable, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Peeker:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1172,1184,"/**
* Combines asynchronous tasks using a given combiner and manages closeable resources.
* @param combiner AsyncCombiningCallable to combine tasks
* @param closeables CloseableList of resources to manage
* @return FluentFuture containing the combined result or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,provideValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)",1078,1081,"/**
* Consumes a closing future with a value and closure.
* @param consumer consumer to process value and closer
* @param closingFuture closing future containing value and closer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstance,com.google.common.util.concurrent.CycleDetectingLockFactory:newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),231,233,"/**
* Creates a CycleDetectingLockFactory instance based on the given policy.
* @param policy policy object governing lock factory behavior
*/",Creates a new factory with the specified policy.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStart,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStart(),59,72,"/**
* Executes masked operation with retries and logging.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStop,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStop(),74,87,"/**
* Executes a task with error handling and reporting.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,run,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:run(),218,250,"/**
* Tries to execute a task and handles any exceptions that occur.
* @throws Throwable if an error occurs during execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",54,71,"/**
* Executes a callable with timeout and error handling.
* @param callable function to execute
* @param timeoutDuration maximum execution time in specified unit
* @param timeoutUnit time unit for timeout duration
* @return result of the callable or null if timed out
* @throws ExecutionException if execution fails or times out",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,run,com.google.common.util.concurrent.InterruptibleTask:run(),56,93,"/**
* Executes a function with error handling and cleanup.
* @throws Throwable if an exception occurs during execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,<init>,com.google.common.util.concurrent.SmoothRateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),332,334,"/**
* Initializes rate limiter with a sleeping stopwatch.
* @param stopwatch stopwatch instance to measure time intervals
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newSequentialExecutor,com.google.common.util.concurrent.MoreExecutors:newSequentialExecutor(java.util.concurrent.Executor),441,444,"/**
* Wraps an executor in a sequential executor. 
* @param delegate original executor to be wrapped 
*/","* Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks
   * are running concurrently.
   *
   * <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the
   * Java Language Specification. Tasks execute with the same happens-before order that the function
   * calls to {@link Executor#execute execute()} that submitted those tasks had.
   *
   * <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in
   * turn, and does not create any threads of its own.
   *
   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are
   * polled and executed from a task queue until there are no more tasks. The thread will not be
   * released until there are no more tasks to run.
   *
   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread
   * will not be released until that submitted task is also complete.
   *
   * <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running:
   *
   * <ol>
   *   <li>execution will not stop until the task queue is empty.
   *   <li>tasks will begin execution with the thread marked as not interrupted - any interruption
   *       applies only to the task that was running at the point of interruption.
   *   <li>if the thread was interrupted before the SequentialExecutor's worker begins execution,
   *       the interrupt will be restored to the thread after it completes so that its {@code
   *       delegate} Executor may process the interrupt.
   *   <li>subtasks are run with the thread uninterrupted and interrupts received during execution
   *       of a task are ignored.
   * </ol>
   *
   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.
   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next
   * time a task is submitted.
   *
   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never
   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the
   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,
   * despite not throwing a RejectedExecutionException synchronously with the call to {@code
   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link
   * Executors#newSingleThreadExecutor}).
   *
   * @since 23.3 (since 23.1 as {@code sequentialExecutor})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,create,com.google.common.util.concurrent.SimpleTimeLimiter:create(java.util.concurrent.ExecutorService),71,73,"/**
* Creates a SimpleTimeLimiter instance with the given ExecutorService.
* @param executor ExecutorService to associate with the time limiter
*/","* Creates a TimeLimiter instance using the given executor service to execute method calls.
   *
   * <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills
   * up, any time callers spend waiting for a thread may count toward their time limit, and in this
   * case the call may even time out before the target method is ever invoked.
   *
   * @param executor the ExecutorService that will execute the method calls on the target objects;
   *     for example, a {@link Executors#newCachedThreadPool()}.
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,java.time.Duration)",185,189,"/**
* Converts duration to nanoseconds and delegates to overloaded m2. 
* @param toJoin thread to join
* @param timeout duration to wait before joining
*/","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingScheduledExecutorService.java,<init>,com.google.common.util.concurrent.WrappingScheduledExecutorService:<init>(java.util.concurrent.ScheduledExecutorService),39,42,"/**
 * Initializes a WrappingScheduledExecutorService instance with a given ScheduledExecutorService delegate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",133,140,"/**
* Calls superclass method and processes edge/node pair.
* @param edge edge to process
* @param node node to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",89,94,"/**
* Applies mask operation to an edge and its associated node.
* @param edge edge object
* @param node node object
* @param isSelfLoop true if the edge connects a node to itself, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",109,116,"/**
* Recursively processes an edge and its adjacent nodes.
* @param edge graph edge to process
* @param node node associated with the edge
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,unordered,com.google.common.graph.ElementOrder:unordered(),80,82,"/**
* Creates an unordered element order with no mask.
* @return ElementOrder object representing unordered elements
*/",Returns an instance which specifies that no ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,stable,com.google.common.graph.ElementOrder:stable(),120,122,"/**
* Creates an element order with stable type and no mask.
* @return ElementOrder object
*/","* Returns an instance which specifies that ordering is guaranteed to be always be the same across
   * iterations, and across releases. Some methods may have stronger guarantees.
   *
   * <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code
   * graphBuilder.incidentEdgeOrder(ElementOrder.stable())}.
   *
   * <h3>In combination with {@code incidentEdgeOrder}</h3>
   *
   * <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned
   * collections of the following methods:
   *
   * <ul>
   *   <li>For {@link Graph} and {@link ValueGraph}:
   *       <ul>
   *         <li>{@code edges()}: Stable order
   *         <li>{@code adjacentNodes(node)}: Connecting edge insertion order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Edge insertion order
   *       </ul>
   *   <li>For {@link Network}:
   *       <ul>
   *         <li>{@code adjacentNodes(node)}: Stable order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Stable order
   *         <li>{@code inEdges(node)}: Edge insertion order
   *         <li>{@code outEdges(node)}: Edge insertion order
   *         <li>{@code adjacentEdges(edge)}: Stable order
   *         <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order
   *       </ul>
   * </ul>
   *
   * @since 29.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,insertion,com.google.common.graph.ElementOrder:insertion(),125,127,"/**
* Creates an ElementOrder instance with INSERTION type and no mask.
*/",Returns an instance which specifies that insertion ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,natural,com.google.common.graph.ElementOrder:natural(),132,134,"/**
* Creates an ordered element with sorted type and default ordering.
* @return ElementOrder object
*/",* Returns an instance which specifies that the natural ordering of the elements is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,sorted,com.google.common.graph.ElementOrder:sorted(java.util.Comparator),140,142,"/**
* Creates an ElementOrder instance with a sorted type and a custom mask function.
* @param comparator a Comparator to generate the mask function
* @return ElementOrder object with a sorted type and the generated mask function
*/","* Returns an instance which specifies that the ordering of the elements is guaranteed to be
   * determined by {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture:whenClosedCountDown(),2265,2268,"/**
* Returns CountDownLatch from closeables.
*/","* Returns an object that can be used to wait until this objects' deferred closeables have all had
   * {@link Runnable}s that close them submitted to each one's closing {@link Executor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,<init>,"com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:<init>(java.lang.Object,java.util.concurrent.Executor)",145,148,"/**
* Initializes a new queue with a listener and an executor.
* @param listener callback to handle events
* @param executor thread pool for asynchronous execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,next,com.google.common.base.AbstractIterator:next(),76,87,"/**
* Retrieves a mask value based on current state.
* @return T the retrieved mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter:correctedDoForward(java.lang.Object),200,207,"/**
* Applies function mask to input value, handling nulls based on configuration.
* @param a input value of type A
* @return result of masked operation or null if handled automatically
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter:correctedDoBackward(java.lang.Object),209,216,"/**
* Handles input object with optional null handling.
* @param b input object to process
* @return processed result or null if handled automatically
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$1:normalizeWord(java.lang.String),210,210,"/**
 * Masks input string with asterisks (*) to conceal sensitive data.
 * @param word input string to mask
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$2:normalizeWord(java.lang.String),210,210,"/**
* Masks sensitive information from input string.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeFirstWord,com.google.common.base.CaseFormat$3:normalizeFirstWord(java.lang.String),212,214,"/**
* Returns a mask string from the input word.
* @param word the input word to process
* @return masked string result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeToken,com.google.common.net.MediaType:normalizeToken(java.lang.String),1083,1087,"/**
* Processes and formats input token into ASCII string.
* @param token input token to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeParameterValue,"com.google.common.net.MediaType:normalizeParameterValue(java.lang.String,java.lang.String)",1089,1093,"/**
* Validates and encodes input string as ASCII if applicable.
* @param attribute attribute name
* @param value input string to validate/encode
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.CharSequence),431,440,"/**
* Recursively flattens CharSequence into a single-level character array.
* @param chars input CharSequence
* @return flattened character array as string
*/","* Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char)
   * uppercase ASCII characters} have been converted to lowercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$5:normalizeWord(java.lang.String),210,210,"/**
* Masks sensitive information in a given string.
* @param word input string to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.CharSequence),479,488,"/**
* Recursively converts CharSequence to a String.
* @param chars input character sequence
*/","* Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char)
   * lowercase ASCII characters} have been converted to uppercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,firstCharOnlyToUpper,com.google.common.base.CaseFormat:firstCharOnlyToUpper(java.lang.String),216,220,"/**
* Masks sensitive characters from input string.
* @param word input string to mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,toString,com.google.common.io.CharSource$CharSequenceCharSource:toString(),620,623,"/**
* Returns a string representation of a character source mask.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toByteArray,com.google.common.math.PairedStats:toByteArray(),289,295,"/**
* Computes and returns a byte array containing mask values.
*/","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toByteArray,com.google.common.math.Stats:toByteArray(),589,593,"/**
* Generates and returns a byte array mask.
*/","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,init,com.google.common.collect.CompactHashMap:init(int),254,259,"/**
* Initializes metadata mask based on expected size.
* @param expectedSize the expected size of data
*/",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,init,com.google.common.collect.CompactHashSet:init(int),219,224,"/**
* Initializes metadata mask based on expected data size.
* @param expectedSize minimum size of data to store
*/",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher:and(com.google.common.base.CharMatcher),381,383,"/**
* Combines this matcher with another using logical AND.",* Returns a matcher that matches any character matched by both this matcher and {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,forPredicate,com.google.common.base.CharMatcher:forPredicate(com.google.common.base.Predicate),352,354,"/**
 * Wraps a predicate into a CharMatcher instance or creates a new ForPredicate if necessary.
 * @param predicate a predicate to wrap, can be null
 */","* Returns a matcher with identical behavior to the given {@link Character}-based predicate, but
   * which operates on primitive {@code char} instances instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NegatedFastMatcher:<init>(com.google.common.base.CharMatcher),994,996,"/**
* Creates a negated matcher from the provided original matcher.
* @param original matcher to negate its results
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher:negate(),373,376,"/**
* Returns a negated instance of this char matcher.
* @return A CharMatcher that matches any character not matched by this.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher:or(com.google.common.base.CharMatcher),388,390,"/**
* Combines this matcher with another using an OR operation.
* @param other another CharMatcher to combine with
*/",* Returns a matcher that matches any character matched by either this matcher or {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,inRange,"com.google.common.base.CharMatcher:inRange(char,char)",344,346,"/**
* Creates a character matcher that matches any characters within the specified range.
* @param startInclusive starting character (inclusive)
* @param endInclusive ending character (inclusive)
*/","* Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints
   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code
   * CharMatcher.inRange('a', 'z')}.
   *
   * @throws IllegalArgumentException if {@code endInclusive < startInclusive}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Digit:<init>(),1381,1383,"/**
* Initializes CharMatcher instance with digit character matching logic.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Invisible:<init>(),1496,1498,"/**
* Constructs an invisible character matcher with custom range strings. 
* @param RANGE_STARTS starting characters for this matcher
* @param RANGE_ENDS ending characters for this matcher",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$SingleWidth:<init>(),1506,1511,"/**
* Initializes a SingleWidth CharMatcher with Unicode single-width characters.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,snapshot,com.google.common.cache.AbstractCache$SimpleStatsCounter:snapshot(),255,264,"/**
* Computes cache statistics based on hit, miss, load success, exception, and eviction counts.
* @return CacheStats object containing aggregated performance metrics
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,minus,com.google.common.cache.CacheStats:minus(com.google.common.cache.CacheStats),243,251,"/**
* Merges CacheStats from this instance with the given stats.
* @param other CacheStats to combine
*/","* Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}
   * and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be
   * rounded up to zero.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,plus,com.google.common.cache.CacheStats:plus(com.google.common.cache.CacheStats),263,271,"/**
* Merges two CacheStats objects into a new instance.
* @param other the second CacheStats object to merge
* @return a new CacheStats object with combined stats
*/","* Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,<init>,com.google.common.collect.AbstractListMultimap:<init>(java.util.Map),47,49,"/**
* Constructs an AbstractListMultimap from a Map of key to value collections.
* @param map input multimap data in map form
*/","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,<init>,com.google.common.collect.AbstractSetMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs an empty multimap backed by the specified map.
 * @param map map containing key-value pairs to initialize the multimap
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",220,223,"/**
* Constructs a custom multimap with the given map and collection factory.
* @param map underlying map
* @param factory supplier of new collection instances for each key
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(),68,70,"/**
* Initializes a new instance of HashMultiset with an empty backing map.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(),76,78,"/**
* Initializes an empty multiset with a backing map.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction)",43,46,"/**
* Creates a spliterator for a collection of type T with specified size and characteristics.
* @param size number of elements in the collection
* @param extraCharacteristics additional characteristics (not used)
* @param function function to create an element of type T
* @return Spliterator object for the collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,java.lang.Object)",166,172,"/**
* Creates a contiguous set of elements from 'fromElement' to 'toElement'.
* @param fromElement start element
* @param toElement end element
* @return ContiguousSet object representing the range",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",177,185,"/**
* Creates a contiguous set of elements within the specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return ContiguousSet containing elements in the given range
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Class),54,56,"/**
* Creates an EnumMultiset instance for the specified enum type.
* @param type the enum class to create a multiset for
*/",Creates an empty {@code EnumMultiset}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,subSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",57,61,"/**
* Generates a sorted set of elements within the specified range.
* @param fromElement start element (inclusive/exclusive)
* @param fromInclusive whether start element is inclusive
* @param toElement end element (inclusive/exclusive)
* @param toInclusive whether end element is inclusive
* @return ImmutableSortedSet of matching elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,java.lang.Object)",666,669,"/**
* Returns an immutable sorted set of elements within the range [fromElement, toElement].
*/","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link
   * IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}. Similarly, this method keeps the original {@code
   * toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an
   * earlier {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partition,"com.google.common.collect.Iterators:partition(java.util.Iterator,int)",602,605,"/**
* Creates an unmodifiable iterator of lists from the given iterator.
* @param iterator input iterator to process
* @param size target list size
*/","* Divides an iterator into unmodifiable sublists of the given size (the final list may be
   * smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,paddedPartition,"com.google.common.collect.Iterators:paddedPartition(java.util.Iterator,int)",621,624,"/**
* Creates an unmodifiable iterator that wraps a given iterator, 
* returning lists of a specified size. 
* @param iterator the input iterator to wrap
* @param size the list size to use for iteration
*/","* Divides an iterator into unmodifiable sublists of the given size, padding the final iterator
   * with null values if necessary. For example, partitioning an iterator containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterator containing two inner lists of three elements each, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue:expectedSize(int),141,144,"/**
* Creates a Builder instance with Ordering initialized to sort Comparable values.
* @param expectedSize expected size of the collection
*/","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * sized appropriately to hold {@code expectedSize} elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue:maximumSize(int),152,155,"/**
* Creates a new Builder instance with default ordering and specified maximum size.
* @param maximumSize the maximum size for the builder
*/","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it
   * immediately removes its greatest element (according to its comparator), which might be the
   * element that was just added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addRightChild,"com.google.common.collect.TreeMultiset$AvlNode:addRightChild(java.lang.Object,int)",655,663,"/**
* Creates a new AVL node with the given element and count.
* @param e the element to insert
* @param count the number of elements in the subtree
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addLeftChild,"com.google.common.collect.TreeMultiset$AvlNode:addLeftChild(java.lang.Object,int)",665,673,"/**
* Creates a new AVL node with the given element and count,
* rebalances the tree, updates statistics, and returns this node.
* @param e the element to be inserted
* @param count the number of elements in the subtree rooted at this node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(),34,37,"/**
 * Returns a new instance of Hasher initialized with a 32-bit hash value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hashBytes,com.google.common.hash.AbstractNonStreamingHashFunction:hashBytes(java.nio.ByteBuffer),73,76,"/**
* Computes hash code value from ByteBuffer using M2-M4 functions.
* @param input ByteBuffer to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,com.google.common.hash.AbstractStreamingHasher:<init>(int),48,50,"/**
* Initializes streaming hasher with specified chunk size.
* @param chunkSize number of bytes to process in each chunk
*/","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingWriter,"com.google.common.io.BaseEncoding:separatingWriter(java.io.Writer,java.lang.String,int)",1113,1138,"/**
* Wraps a Writer with a function mask, appending a separator after every specified characters.
* @param delegate underlying writer to wrap
* @param separator string to append between characters
* @param afterEveryChars number of characters before appending the separator
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationVariance,com.google.common.math.Stats:populationVariance(),290,299,"/**
* Calculates a value based on count and sum of squares of deltas.
* @return calculated double value or NaN
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleVariance,com.google.common.math.Stats:sampleVariance(),337,343,"/**
* Calculates a value based on count and sum of squares of deltas.
* @return result or NaN if invalid input
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationVariance,com.google.common.math.StatsAccumulator:populationVariance(),283,292,"/**
* Calculates a function value based on deltas and count.
* @return double result or NaN if invalid input
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleVariance,com.google.common.math.StatsAccumulator:sampleVariance(),330,336,"/**
* Calculates a function value based on count and sum of squares of deltas.
* @return double value or NaN if invalid data
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,anyOf,com.google.common.base.CharMatcher:anyOf(java.lang.CharSequence),314,327,"/**
* Returns a CharMatcher instance based on the input sequence type.
* @param sequence input character sequence
*/","* Returns a {@code char} matcher that matches any BMP character present in the given character
   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimAndCollapseFrom,"com.google.common.base.CharMatcher:trimAndCollapseFrom(java.lang.CharSequence,char)",864,882,"/**
* Replaces a contiguous substring in the sequence with a replacement character.
* @param sequence input CharSequence
* @param replacement character to replace with
*/","* Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that
   * groups of matching BMP characters at the start or end of the sequence are removed without
   * replacement.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,<init>,"com.google.common.base.CaseFormat$StringConverter:<init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat)",173,176,"/**
* Configures string formatting conversion between two formats.
* @param sourceFormat initial case format of the string
* @param targetFormat desired output case format of the string
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$ConverterComposition:<init>(com.google.common.base.Converter,com.google.common.base.Converter)",390,393,"/**
* Composes two converters to form a new converter.
* @param first first converter in composition (A -> B)
* @param second second converter in composition (B -> C)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$FunctionBasedConverter:<init>(com.google.common.base.Function,com.google.common.base.Function)",515,520,"/**
* Initializes the converter with provided forward and backward functions.
* @param forwardFunction function to convert from type A to type B
* @param backwardFunction function to convert from type B to type A
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter$ReverseConverter:<init>(com.google.common.base.Converter),311,313,"/**
* Sets the original converter to reverse.
* @param original Converter instance to be reversed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,<init>,com.google.common.base.Enums$StringConverter:<init>(java.lang.Class),114,116,"/**
* Initializes converter with specified enumeration class.
* @param enumClass the Class of the enumeration to convert
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$BiMapConverter:<init>(com.google.common.collect.BiMap),1606,1608,"/**
* Constructs a BiMap converter from a given BiMap.
* @param bimap the BiMap to convert, must not be null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,onResultOf,com.google.common.base.Equivalence:onResultOf(com.google.common.base.Function),177,179,"/**
* Creates an equivalence relation based on the given function.
* @param function a Function to derive the equivalence relation from
*/","* Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying
   * {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of
   * non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a,
   * b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))}
   * is true.
   *
   * <p>For example:
   *
   * {@snippet :
   * Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);
   * }
   *
   * <p>{@code function} will never be invoked with a null value.
   *
   * <p>Note that {@code function} must be consistent according to {@code this} equivalence
   * relation. That is, invoking {@link Function#apply} multiple times for a given value must return
   * equivalent results. For example, {@code
   * Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not
   * guaranteed that {@link Object#toString}) always returns the same string instance.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,pairwise,com.google.common.base.Equivalence:pairwise(),296,300,"/**
* Creates an equivalence relation for iterable collections of objects.
*/","* Returns an equivalence over iterables based on the equivalence of their elements. More
   * specifically, two iterables are considered equivalent if they both contain the same number of
   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null
   * iterables are equivalent to one another.
   *
   * <p>Note that this method performs a similar function for equivalences as {@link
   * com.google.common.collect.Ordering#lexicographical} does for orderings.
   *
   * <p>The returned object is serializable if this object is serializable.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,com.google.common.collect.MapMakerInternalMap:reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference),1113,1117,"/**
* Processes a weak value reference to update the backing map.
* @param valueReference WeakValueReference object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,elementsEqual,"com.google.common.collect.Iterables:elementsEqual(java.lang.Iterable,java.lang.Iterable)",229,238,"/**
* Compares two iterables as collections.
* @param iterable1 first iterable to compare
* @param iterable2 second iterable to compare
* @return true if both iterables are equal, false otherwise
*/","* Determines whether two iterables contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same
   * number of elements and every element of {@code iterable1} is equal to the corresponding element
   * of {@code iterable2}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,equalsImpl,"com.google.common.collect.Lists:equalsImpl(java.util.List,java.lang.Object)",1027,1050,"/**
* Compares two lists for equality.
* @param thisList list to compare
* @param other potentially different list
* @return true if equal, false otherwise
*/",An implementation of {@link List#equals(Object)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(),89,94,"/**
* Creates a new instance of ConcurrentHashMultiset with a ConcurrentHashMap-based map.","* Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load
   * factor, and concurrency settings.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.util.concurrent.ConcurrentMap),124,126,"/**
* Creates a multiset from a map of element counts.
* @param countMap map of elements to their respective counts
*/","* Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal
   * backing map.
   *
   * <p>This instance will assume ownership of {@code countMap}, and other code should not maintain
   * references to the map or modify it in any way.
   *
   * <p>The returned multiset is serializable if the input map is.
   *
   * @param countMap backing map for storing the elements in the multiset and their counts. It must
   *     be empty.
   * @throws IllegalArgumentException if {@code countMap} is not empty
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doForward,com.google.common.collect.Maps$BiMapConverter:doForward(java.lang.Object),1610,1613,"/**
* Maps input A to output B using transformation m1.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doBackward,com.google.common.collect.Maps$BiMapConverter:doBackward(java.lang.Object),1615,1618,"/**
* Applies function m1 from bimap to input B and returns result in type A.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractGraph:incidentEdges(java.lang.Object),106,134,"/**
* Retrieves a set of endpoint pairs for the given node.
* @param node graph node
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractValueGraph:incidentEdges(java.lang.Object),106,134,"/**
* Fetches endpoint pairs for a given node.
* @param node Node object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Iterable)",92,95,"/**
* Invokes m2 with preprocessed string from m1.
* @param appendable target to write result to
* @param parts input iterable
* @return same type as appendable or null if I/O error occurs
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.util.Iterator)",153,161,"/**
* Flattens an iterator of Appendables into a StringBuilder.
* @param builder StringBuilder to accumulate output
* @param parts Iterator of Appendables to be appended
* @return the modified StringBuilder instance
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Map)",400,403,"/**
* Recursively appends key-value pairs from the provided map to the StringBuilder.
* @param builder StringBuilder instance to append to
* @param map Map containing key-value pairs to be appended
*/","* Appends the string representation of each entry of {@code map}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.lang.Iterable),486,488,"/**
* Recursively fetches and returns a string representation of the first entry in the iterable. 
* @param entries iterable of entries
*/","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(java.lang.Object),268,271,"/**
* Returns a mask from the given value.
* @param value object to derive mask from
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a
     * readable name.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,java.lang.Object)",197,200,"/**
* Adds a masked field to the string builder.
* @param name field name
* @param value field value (can be null)
*/","* Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}
     * is {@code null}, the string {@code ""null""} is used, unless {@link #omitNullValues()} is
     * called, in which case this name/value pair will not be added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(boolean),281,284,"/**
* Converts boolean value to string mask representation.
* @param value true or false value to convert
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(char),294,297,"/**
* Converts a single character into a mask.
* @param value character to convert
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(double),307,310,"/**
* Converts double value to string format using internal helper functions.
* @param value input numeric value
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(float),320,323,"/**
* Converts float to mask representation.
* @param value floating-point value to convert
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(int),333,336,"/**
* Converts integer to mask string representation.
* @param value input integer value
* @return String representation of mask or null if invalid
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(long),346,349,"/**
* Converts a long value to a mask string representation.
* @param value long integer value to convert
*/","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,boolean)",207,210,"/**
* Creates a mask with a specified name and boolean value.
* @param name unique identifier for the mask
* @param value whether the mask is enabled or disabled
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,char)",217,220,"/**
* Constructs a mask with specified name and value.
* @param name name of the mask
* @param value character representing the mask type
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,double)",227,230,"/**
* Creates a MaskedValue expression with the given name and value.
* @param name unique identifier for the masked value
* @param value numeric value to be masked
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,float)",237,240,"/**
* Formats a floating-point value as a string with specified name. 
* @param name name of the value
* @param value the value to format
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,int)",247,250,"/**
* Constructs and returns a mask with the given name and value.
* @param name name of the mask
* @param value value of the mask
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,long)",257,260,"/**
* Adds a mask to the builder with the given name and value.
* @param name name of the mask
* @param value mask value as a long integer
*/","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyEquivalence,com.google.common.cache.CacheBuilder:getKeyEquivalence(),374,376,"/**
* Creates equivalence mask using key equivalence and two other masks.
* @return Equivalence object representing the mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueEquivalence,com.google.common.cache.CacheBuilder:getValueEquivalence(),396,398,"/**
* Creates an equivalence relation using the given value equivalence and another equivalence.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyEquivalence,com.google.common.collect.MapMaker:getKeyEquivalence(),130,132,"/**
* Combines key equivalence with a nested equivalence using M3 strategy. 
* @return Equivalence object representing the combined equivalence.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,transform,com.google.common.base.Absent:transform(com.google.common.base.Function),75,79,"/**
* Applies transformation to data using provided function and returns result.
* @param function function to apply to data
* @return transformed value or empty if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromNullable,com.google.common.base.Optional:fromNullable(java.lang.Object),119,121,"/**
* Wraps a reference in an Optional, returning empty if null.
* @param nullableReference the input reference
* @return Optional containing the input reference or empty if null
*/","* If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that
   * reference; otherwise returns {@link Optional#absent}.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.ofNullable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(),120,122,"/**
* Initializes FluentIterable with an absent iterable delegate. 
* @see #iterableDelegate */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource:sizeIfKnown(),181,183,"/**
* Returns an optional Long value representing a default mask.
*/","* Returns the size of this source in bytes, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file,
   * may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method
   * will return a different number of bytes than would be returned by reading all of the bytes (for
   * example, some special files may return a size of 0 despite actually having content when read).
   *
   * <p>Additionally, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource:lengthIfKnown(),190,192,"/**
* Returns the default mask value as an optional long.
* @return Optional containing the default mask value (Long.MIN_VALUE) or empty if null.","* Returns the size of this source in chars, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code
   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>
   * that this method will return a different number of chars than would be returned by reading all
   * of the chars.
   *
   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may
   * return a different number of chars if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstant,"com.google.common.net.MediaType:createConstant(java.lang.String,java.lang.String)",108,113,"/**
* Creates a MediaType instance with the given type and subtype.
* @param type the primary media type
* @param subtype the secondary media type
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,emptyToNull,com.google.common.base.Strings:emptyToNull(java.lang.String),55,57,"/**
* Calls native platform function to perform operation 'm1' on input string.
* @param string input string to be processed (may be null)
*/","* Returns the given string if it is nonempty; {@code null} otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$DurationParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",424,456,"/**
* Sets cache expiration based on unit and duration.
* @param spec CacheBuilderSpec
* @param key Cache key
* @param value Expiration duration and unit (e.g. ""10m"") 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$IntegerParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",295,306,"/**
* Validates and processes a cache entry mask.
* @param spec Cache configuration
* @param key unique cache key
* @param value optional cache entry value (null allowed)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$LongParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",313,324,"/**
* Validates and stores FUNC_MASK cache entry.
* @param spec CacheBuilderSpec
* @param key unique cache key
* @param value optional value (integer) or null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromString,com.google.common.net.HostAndPort:fromString(java.lang.String),167,201,"/**
* Parses a string into a HostAndPort object.
* @param hostPortString input string in the format [host]:port or host:port
*/","* Split a freeform string into a host and port, without strict validation.
   *
   * <p>Note that the host-only formats will leave the port field undefined. You can use {@link
   * #withDefaultPort(int)} to patch in a default value.
   *
   * @param hostPortString the input string to parse.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if nothing meaningful could be parsed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,skip,com.google.common.collect.FluentIterable:skip(int),581,583,"/**
* Returns an iterable of elements, skipping 'numberToSkip' initial ones.
*/","* Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If
   * this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent
   * iterable skips all of its elements.
   *
   * <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in
   * the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the iterator is created, not when {@code skip()} is called.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of
   * this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last
   * skipped element by immediately calling {@code remove()} on the returned fluent iterable's
   * iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a
   * call to {@code next()} will throw an {@link IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,limit,com.google.common.collect.FluentIterable:limit(int),596,598,"/**
* Returns an iterable of up to {@code maxSize} elements from the result of {@link #m1()}.
*/","* Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this
   * fluent iterable does not contain that many elements, the returned fluent iterable will have the
   * same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code
   * remove()} if this fluent iterable's iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same).
   *
   * @param maxSize the maximum number of elements in the returned fluent iterable
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int,java.lang.Object)",788,801,"/**
* Retrieves an element from the specified iterable at the given position.
* @param iterable iterable collection (e.g. list or iterator)
* @param position index of desired element
* @param defaultValue value to return if position is out of bounds
* @return T element at specified position or defaultValue
*/","* Returns the element at the specified position in an iterable or a default value otherwise.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index
   * is out of bounds)
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if {@code position} is greater than or equal to
   *     the size of the iterable
   * @return the element at the specified position in {@code iterable} or {@code defaultValue} if
   *     {@code iterable} contains fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int)",842,855,"/**
* Returns the element at specified position from an iterable.
* @param iterator Iterable object
* @param position index to retrieve an element
* @return Element type T or null if not found
*/","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position.
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterator}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the number of elements remaining in {@code iterator}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int,java.lang.Object)",869,875,"/**
* Retrieves an element from the iterator at specified position or returns default value if not found.
* @param iterator iterator containing elements of type T
* @param position index of desired element
* @param defaultValue value to return if element is missing
* @return element at specified position or defaultValue","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position or {@code defaultValue} otherwise.
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if the iterator is empty or if {@code position}
   *     is greater than the number of elements remaining in {@code iterator}
   * @return the element at the specified position in {@code iterator} or {@code defaultValue} if
   *     {@code iterator} produces fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,fileTraverser,com.google.common.io.Files:fileTraverser(),842,844,"/**
 * Returns a traverser instance to iterate over file system structure.
 */","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link File} and will return all files and directories it encounters.
   *
   * <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no
   * way to ensure that a symbolic link to a directory is not followed when traversing the tree. In
   * this case, iterables created by this traverser could contain files that are outside of the
   * given directory or even be infinite if there is a symbolic link loop.
   *
   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same
   * except that it doesn't follow symbolic links and returns {@code Path} instances.
   *
   * <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not
   * a directory, no exception will be thrown and the returned {@link Iterable} will contain a
   * single element: that file.
   *
   * <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File(""/""))} may return files
   * with the following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"",
   * ""/home/alice"", ...]}
   *
   * @since 23.5",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readResolve,com.google.common.hash.BloomFilter$SerialForm:readResolve(),578,580,"/**
* Creates a bloom filter instance with specified parameters.
* @return A BloomFilter object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,copy,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:copy(),245,247,"/**
* Creates a LockFreeBitArray instance with masked data.
* @return LockFreeBitArray object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,limit,"com.google.common.io.ByteStreams:limit(java.io.InputStream,long)",709,712,"/**
* Limits input stream to specified size.
* @param in original input stream
* @param limit maximum allowed size
*/","* Wraps a {@link InputStream}, limiting the number of bytes which can be read.
   *
   * @param in the input stream to be wrapped
   * @param limit the maximum number of bytes to be read
   * @return a length-limited {@link InputStream}
   * @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv4BigInteger,com.google.common.net.InetAddresses:fromIPv4BigInteger(java.math.BigInteger),1094,1096,"/**
* Calculates and returns the subnet mask from an IPv4 address.
* @param address IPv4 address in BigInteger form
* @return Inet4Address object representing the subnet mask
*/","* Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv4 address
   * @return Inet4Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv6BigInteger,com.google.common.net.InetAddresses:fromIPv6BigInteger(java.math.BigInteger),1106,1108,"/**
* Masks an IPv6 address with a given value.
* @param address BigInteger representation of IPv6 address
*/","* Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv6 address
   * @return Inet6Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$CompactStriped:<init>(int,com.google.common.base.Supplier)",375,383,"/**
* Initializes a CompactStriped object with the specified number of stripes and 
* initializes each stripe using the provided supplier.
* @param stripes number of stripes
* @param supplier function to generate objects for each stripe
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$SmallLazyStriped:<init>(int,com.google.common.base.Supplier)",409,414,"/**
* Initializes a SmallLazyStriped with given stripes count and supplier.
* @param stripes number of stripes
* @param supplier provides elements for the striped array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,<init>,"com.google.common.graph.AbstractDirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",52,57,"/**
* Initializes abstract directed network connections from input edge maps and self-loop count.
* @param inEdgeMap map of incoming edges to their counts
* @param outEdgeMap map of outgoing edges to their counts
* @param selfLoopCount number of self-loops allowed (must not exceed edge map sizes)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",106,114,"/**
* Calculates the mask value for an edge based on its type and node count.
* @param edge graph edge
* @param isSelfLoop true if self-loop, false otherwise
* @return N-type mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,"com.google.common.graph.DirectedGraphConnections:<init>(java.util.Map,java.util.List,int,int)",141,153,"/**
* Initializes DirectedGraphConnections with node adjacency values, ordered connections,
* and counts of predecessors and successors.
* @param adjacentNodeValues map of nodes to their values
* @param orderedNodeConnections list of node connections (optional)
* @param predecessorCount number of predecessors
* @param successorCount number of successors",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",123,133,"/**
* Updates edge and node masks with specified edge and node.
* @param edge the edge to update
* @param node the node to update
* @param isSelfLoop whether this is a self-loop edge
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashUnencodedChars,com.google.common.hash.AbstractHashFunction:hashUnencodedChars(java.lang.CharSequence),38,42,"/**
* Computes hash code using FUNC_MASK algorithm.
* @param input CharSequence to generate hash code for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashInt,com.google.common.hash.AbstractHashFunction:hashInt(int),49,52,"/**
* Calculates hash code for given input using three intermediate hash functions.
* @param input value to calculate hash code for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(java.nio.ByteBuffer),70,73,"/**
* Computes hash code from ByteBuffer input using nested functions.
* @param input ByteBuffer to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,sipHash24,"com.google.common.hash.Hashing:sipHash24(long,long)",210,212,"/**
* Creates a SipHash function with masking keys.
* @param k0 first masking key
* @param k1 second masking key
* @return HashFunction instance
*/","* Returns a hash function implementing the <a href=""https://131002.net/siphash/"">64-bit
   * SipHash-2-4 algorithm</a> using the given seed.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,com.google.common.io.FileBackedOutputStream:<init>(int),106,108,"/**
* Constructs a FileBackedOutputStream with the specified threshold.
* @param fileThreshold minimum size before switching to disk-backed storage
*/","* Creates a new instance that uses the given file threshold, and does not reset the data when the
   * {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromInteger,com.google.common.net.InetAddresses:fromInteger(int),1082,1084,"/**
* Masks an IPv4 address using bitwise operations.
* @param address 32-bit integer representation of an IP address
*/","* Returns an Inet4Address having the integer value specified by the argument.
   *
   * @param address {@code int}, the 32bit integer address to be converted
   * @return {@link Inet4Address} equivalent of the argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,reserve,com.google.common.util.concurrent.RateLimiter:reserve(int),315,320,"/**
* Computes and returns a unique function ID based on input permits.
* @param permits number of permitted access
* @return unique long value representing the function ID
*/","* Reserves the given number of permits from this {@code RateLimiter} for future use, returning
   * the number of microseconds until the reservation can be consumed.
   *
   * @return time in microseconds to wait until the resource can be acquired, never negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,long,java.util.concurrent.TimeUnit)",408,423,"/**
* Waits for permits with optional timeout.
* @param permits number of permits to wait for
* @param timeout maximum time to wait in specified unit
* @param unit TimeUnit object (e.g. seconds, milliseconds)
* @return true if permits are available within timeout
*/","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$IntegerDomain:offset(java.lang.Integer,long)",83,87,"/**
* Calculates functional mask value based on origin and distance.
* @param origin origin point
* @param distance distance from origin
* @return Integer representing functional mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeTo,com.google.common.hash.BloomFilter:writeTo(java.io.OutputStream),592,605,"/**
* Writes strategy and configuration data to output stream.
* @param out OutputStream to write data to
*/","* Writes this {@code BloomFilter} to an output stream, with a custom format (not Java
   * serialization). This has been measured to save at least 400 bytes compared to regular
   * serialization.
   *
   * <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(java.time.Duration,java.time.Duration)",129,132,"/**
* Creates a Scheduler instance with specified initial and periodic delays.
* @param initialDelay initial delay duration
* @param delay periodic delay duration
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(java.time.Duration,java.time.Duration)",165,168,"/**
* Creates a Scheduler instance with custom time delay and interval.
* @param initialDelay time to wait before first execution
* @param period time between subsequent executions
*/","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,toSafeNanos,"com.google.common.util.concurrent.Monitor:toSafeNanos(long,java.util.concurrent.TimeUnit)",1033,1036,"/**
* Calculates a mask value based on the given time and unit.
* @param time timestamp in specified unit
* @param unit TimeUnit enum value
* @return masked timeout value as long
*/","* Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of
   * overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3.
   * Actually waiting for more than 219 years is not supported!",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State),605,607,"/**
* Constructs a state snapshot with the given internal state.
* @param internalState current state of the system
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(com.google.common.base.Ticker),137,139,"/**
 * Creates and starts a stopwatch instance.
 * @param ticker Ticker object to be used in stopwatch
 */","* Creates (and starts) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:remove(),231,247,"/**
* Updates internal state based on removal of current entry.
* @throws ConcurrentModificationException if frequency is invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,com.google.common.collect.EnumMultiset$Itr:remove(),241,250,"/**
* Removes the specified element index from tracking.
* @param toRemove index of element to remove (>= 0 for valid index)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$EmptyModifiableIterator:remove(),112,115,"/**
 * Disables all function masks.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,com.google.common.collect.Multisets$MultisetIteratorImpl:remove(),1107,1121,"/**
* Updates the collection by iterating over entries and decrementing total count.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,orderEntriesByValue,com.google.common.collect.ImmutableBiMap$Builder:orderEntriesByValue(java.util.Comparator),412,417,"/**
* Configures the map's value comparator.
* @param valueComparator comparison function for values
* @return this builder instance for chaining
*/","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,heapForIndex,com.google.common.collect.MinMaxPriorityQueue:heapForIndex(int),484,486,"/**
* Returns heap type (minHeap or maxHeap) based on input index.
* @param i input index
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte),105,109,"/**
* Calls m1 and delegates to mac's m2 with input byte.
*@param b input byte value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte[]),111,115,"/**
 * Calls m1() and delegates byte array processing to mac's m2(). 
 * @param b input byte array to process
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,"com.google.common.hash.MacHashFunction$MacHasher:update(byte[],int,int)",117,121,"/**
* Calls m1() and delegates byte array processing to mac's m2(). 
* @param b input byte array
* @param off offset in bytes
* @param len length of data in bytes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(java.nio.ByteBuffer),123,128,"/**
 * Initializes and executes M3 process using provided ByteBuffer.
 * @param bytes input data buffer
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte),139,143,"/**
 * Performs a specific operation on the given byte and updates the digest.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,"com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte[],int,int)",145,149,"/**
* Calls parent's digest function with input data and offset.
* @param b input byte array
* @param off starting index in the array
* @param len number of bytes to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(java.nio.ByteBuffer),151,155,"/**
 * Processes input buffer by calling lower-level processing and then passing to cryptographic processor. 
 * @param bytes input buffer to process",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,concurrencyLevel,com.google.common.collect.Interners$InternerBuilder:concurrencyLevel(int),79,83,"/**
* Configures map maker with specified concurrency level.
* @param concurrencyLevel number of threads to use","* Sets the concurrency level that will be used by the to-be-built {@link Interner}.
     *
     * @see MapMaker#concurrencyLevel(int)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,com.google.common.cache.CacheBuilder:expireAfterWrite(java.time.Duration),723,729,"/**
* Returns a new CacheBuilder instance with the specified time-to-live duration in nanoseconds.","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,com.google.common.cache.CacheBuilder:expireAfterAccess(java.time.Duration),796,802,"/**
* Creates a cache with specified expiration time.
* @param duration time to live in Duration format
*/","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So,
   * for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for
   * the entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,com.google.common.cache.CacheBuilder:refreshAfterWrite(java.time.Duration),878,884,"/**
* Returns a CacheBuilder instance with specified time-to-idle duration.
* @param duration time-to-idle duration
*/","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * to obtain a future of the new value. If the returned future is already complete, it is returned
   * immediately. Otherwise, the old value is returned.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakKeys,com.google.common.cache.CacheBuilder:weakKeys(),625,629,"/**
* Returns a cache builder with weak function references. 
*/","* Specifies that each key (not value) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore
   * technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap}
   * does).
   *
   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but
   * will never be visible to read or write operations; such entries are cleaned up as part of the
   * routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the key strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakValues,com.google.common.cache.CacheBuilder:weakValues(),659,663,"/**
* Returns a cache builder with weak key and value references. 
* @return CacheBuilder instance with WEAK strength","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching; consider {@link #softValues} instead.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,softValues,com.google.common.cache.CacheBuilder:softValues(),685,689,"/**
* Returns a cache builder with soft mask strength.","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * SoftReference} (by default, strong references are used). Softly-referenced objects will be
   * garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory
   * demand.
   *
   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain
   * #maximumSize(long) maximum size} instead of using soft references. You should only use this
   * method if you are well familiar with the practical consequences of soft references.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakKeys,com.google.common.collect.MapMaker:weakKeys(),204,208,"/**
* Returns a map maker with weak consistency.","* Specifies that each key (not value) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of keys, which is a technical violation of the {@link Map}
   * specification, and may not be what you expect.
   *
   * @throws IllegalStateException if the key strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakValues,com.google.common.collect.MapMaker:weakValues(),241,245,"/**
* Returns a MapMaker instance with weak function references.","* Specifies that each value (not key) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching.
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of values. This technically violates the specifications of the
   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object)
   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,
   * V)}, and may not be what you expect.
   *
   * @throws IllegalStateException if the value strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readMapMaker,com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readMapMaker(java.io.ObjectInputStream),2851,2860,"/**
* Creates a custom MapMaker instance from an ObjectInputStream.
* @param in input stream containing configuration data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService:failureCause(),502,505,"/**
* Returns a Throwable from the associated snapshot.
* @return Throwable object from the snapshot
*/",* @since 14.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int)",1349,1352,"/**
* Recursively calculates an index within bounds.
* @param index current index value
* @param size maximum allowed index value
*/","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int)",1398,1401,"/**
* Calculates the valid range of an array or collection.
* @param index initial index value
* @param size total size of the array or collection
*/","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)}
   * instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when
   * {@code size} is negative, while this method throws {@code IllegalArgumentException}.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndexes,"com.google.common.base.Preconditions:checkPositionIndexes(int,int,int)",1445,1450,"/**
* Validates range interval against array bounds.
* @param start inclusive lower bound
* @param end exclusive upper bound
* @param size total array size
*/","* Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or
   * string of size {@code size}, and are in order. A position index may range from zero to {@code
   * size}, inclusive.
   *
   * @param start a user-supplied index identifying a starting position in an array, list or string
   * @param end a user-supplied index identifying an ending position in an array, list or string
   * @param size the size of that array, list or string
   * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},
   *     or if {@code end} is less than {@code start}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equalTo,com.google.common.base.Predicates:equalTo(java.lang.Object),187,191,"/**
* Creates a predicate that matches the specified target object or returns false for any other value.
* @param target the target object to match
*/","* Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}
   * the given target or both are null.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that
   * lambdas do not have human-readable {@link #toString()} representations and are not
   * serializable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,createCombined,com.google.common.collect.Collections2$FilteredCollection:createCombined(com.google.common.base.Predicate),131,133,"/**
* Creates a filtered collection by combining existing predicate with new one.
* @param newPredicate additional filter criteria
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate)",2221,2227,"/**
* Creates a filtered multimap by applying the given predicate to entries.
* @param multimap input multimap
* @param entryPredicate filter criteria for entries
* @return filtered multimap with matching entries","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,filter,"com.google.common.collect.Multisets:filter(com.google.common.collect.Multiset,com.google.common.base.Predicate)",317,327,"/**
* Combines a multiset with a filter and an additional predicate.
* @param unfiltered the original multiset
* @param predicate the predicate to apply
* @return a filtered multiset with the combined predicates
*/","* Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned
   * multiset is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code
   * elementSet()}, do not support {@code remove()}. However, all other multiset methods supported
   * by {@code unfiltered} are supported by the returned multiset. When given an element that
   * doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw
   * an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code
   * clear()} are called on the filtered multiset, only elements that satisfy the filter will be
   * removed from the underlying multiset.
   *
   * <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every
   * element in the underlying multiset and determine which elements satisfy the filter. When a live
   * view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(com.google.common.base.CharMatcher),140,156,"/**
* Creates a Splitter instance with custom mask behavior.
* @param separatorMatcher CharMatcher to determine mask positions
*/","* Returns a splitter that considers any single character matched by the given {@code CharMatcher}
   * to be a separator. For example, {@code
   * Splitter.on(CharMatcher.anyOf("";,"")).split(""foo,;bar,quux"")} returns an iterable containing
   * {@code [""foo"", """", ""bar"", ""quux""]}.
   *
   * @param separatorMatcher a {@link CharMatcher} that determines whether a character is a
   *     separator
   * @return a splitter, with default settings, that uses this matcher",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,fixedLength,com.google.common.base.Splitter:fixedLength(int),271,288,"/**
* Creates a Splitter with a fixed chunk size.
* @param length the minimum chunk length (must be > 0)
*/","* Returns a splitter that divides strings into pieces of the given length. For example, {@code
   * Splitter.fixedLength(2).split(""abcde"")} returns an iterable containing {@code [""ab"", ""cd"",
   * ""e""]}. The last piece can be smaller than {@code length} but will never be empty.
   *
   * <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final
   * split piece <i>may be longer than the specified fixed length</i>. This is because the splitter
   * will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is.
   *
   * <p><b>Exception:</b> for consistency with separator-based splitters, {@code split("""")} does not
   * yield an empty iterable, but an iterable containing {@code """"}. This is the only case in which
   * {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(),
   * length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}.
   *
   * @param length the desired length of pieces after splitting, a positive integer
   * @return a splitter, with default settings, that can split into fixed sized pieces
   * @throws IllegalArgumentException if {@code length} is zero or negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(),340,342,"/**
* Creates a new splitter with the specified matcher.
* @param matcher Character matcher to split on
*/","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically
   * removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned
   * substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code
   * Splitter.on(',').trimResults().split("" a, b ,c "")} returns an iterable containing {@code [""a"",
   * ""b"", ""c""]}.
   *
   * @return a splitter with the desired configuration",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(),110,112,"/**
 * Creates and returns a new instance of Stopwatch. 
 */","* Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(),128,130,"/**
* Creates and initializes a stopwatch instance with m1() method invocation. 
* @return Stopwatch object initialized to track elapsed time.","* Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,elapsedNanos,com.google.common.cache.LocalCache$LoadingValueReference:elapsedNanos(),3597,3599,"/**
* Returns the function execution time mask in nanoseconds.
* @return time mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,readMicros,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:readMicros(),470,470,"/**
* Returns a functional mask value. 
* Must be implemented by subclasses. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLength,com.google.common.base.Utf8:encodedLength(java.lang.CharSequence),48,76,"/**
* Calculates the UTF-8 length of a CharSequence.
* @param sequence input string
* @return UTF-8 length as an integer, or throws exception if too large
*/","* Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this
   * method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both
   * time and space.
   *
   * @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired
   *     surrogates)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService),539,544,"/**
* Submits a task to the executor with an infinite timeout.
* @param executor Executor service to execute the task in
*/","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly with no timeout.
   *
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,run,com.google.common.base.internal.Finalizer:run(),139,151,"/**
* Continuously executes the masked function until it returns false.
*/","Loops continuously, pulling references off the queue and cleaning them up.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Builder:<init>(),176,176,"/**
* Initializes a new instance of the Builder class.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultimap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,apply,com.google.common.cache.AbstractLoadingCache:apply(java.lang.Object),69,72,"/**
* Returns a value based on a given key using m1 function.
* @param key input key to be processed by m1 function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recreateCacheBuilder,com.google.common.cache.LocalCache$ManualSerializationProxy:recreateCacheBuilder(),4733,4763,"/**
* Configures CacheBuilder with various parameters and returns the updated instance.
* @return CacheBuilder object with specified settings
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Function),140,142,"/**
* Converts a Function to a CacheLoader.
* @param function input function to be converted
*/","* Returns a cache loader that uses {@code function} to load keys, without supporting either
   * reloading or bulk loading. This allows creating a cache loader using a lambda expression.
   *
   * <p>The returned object is serializable if {@code function} is serializable.
   *
   * @param function the function to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by passing each key to {@code function}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Supplier),155,157,"/**
* Creates a cache loader from a supplier function.
* @param supplier function to execute when data is not cached
*/","* Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need
   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and
   * implement {@link #load load} instead.
   *
   * <p>The returned object is serializable if {@code supplier} is serializable.
   *
   * @param supplier the supplier to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the
   *     key",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader$1:loadAll(java.lang.Iterable),125,129,"/**
* Throws exception when attempting to process iterable of keys.
* @throws UnsupportedLoadingOperationException always thrown
*/","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,hitRate,com.google.common.cache.CacheStats:hitRate(),123,126,"/**
* Calculates the function mask based on request and hit counts.
* @return function mask value as a double
*/","* Returns the ratio of cache requests which were hits. This is defined as {@code hitCount /
   * requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,missRate,com.google.common.cache.CacheStats:missRate(),147,150,"/**
* Calculates the miss ratio by dividing miss count by total request count.
* @return Miss ratio as a double, or 0.0 if no requests made
*/","* Returns the ratio of cache requests which were misses. This is defined as {@code missCount /
   * requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including
   * requests which resulted in either successful or failed loading attempts, and requests which
   * waited for other threads to finish loading. It is thus the case that {@code missCount >=
   * loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result
   * in a single load operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache$SimpleForwardingCache:<init>(com.google.common.cache.Cache),136,138,"/**
* Initializes a new cache instance wrapping the provided delegate cache.
* @param delegate the underlying cache to proxy 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache:<init>(),39,39,"/**
* Creates an instance of ForwardingLoadingCache with default settings.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader)",4706,4731,"/**
* Constructs a new ManualSerializationProxy with specified parameters.
* @param keyStrength strength of keys in the cache
* @param valueStrength strength of values in the cache
* @param keyEquivalence equivalence function for keys
* @param valueEquivalence equivalence function for values
* @param expireAfterWriteNanos time to live after write in nanoseconds
* @param expireAfterAccessNanos time to live after access in nanoseconds
* @param maxWeight maximum weight of the cache
* @param weigher weigher function for the cache
* @param concurrencyLevel concurrency level of the cache
* @param removalListener listener for removal events
* @param ticker ticker object used by the cache
* @param loader cache loader object used by the cache
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,<init>,com.google.common.collect.ForwardingList:<init>(),58,58,"/**
* Initializes an empty forwarding list. 
* This constructor is used to create a new instance of a forwarding list.",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,<init>,com.google.common.collect.ForwardingMultiset:<init>(),54,54,"/**
* Constructs an empty ForwardingMultiset instance. 
* This constructor is used to create a new multiset with default settings.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,<init>,com.google.common.collect.ForwardingQueue:<init>(),52,52,"/**
* Initializes an empty ForwardingQueue instance. 
* @throws IllegalStateException if this queue is being constructed by one of its own iterators 
* (in other words, recursively) 
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,<init>,com.google.common.collect.ForwardingSet:<init>(),54,54,"/**
 * Initializes an empty set that forwards operations to another set. 
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntries:<init>(java.util.Collection),1535,1537,"/**
* Sets the collection of unmodifiable entries.
* @param entries Collection of key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$CartesianSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList)",1582,1585,"/**
* Initializes a new instance of the Cartesian set.
* @param axes list of axis sets to include in the Cartesian coordinate system
* @param delegate underlying data structure containing point coordinates
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListIterator.java,<init>,com.google.common.collect.ForwardingListIterator:<init>(),44,44,"/**
* Creates an empty ForwardingListIterator instance. 
* @implSpec This constructor is intended to be used by subclasses when implementing their own constructors. 
* It provides a no-arg constructor that simply calls the superclass's default constructor, effectively creating an empty iterator.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)",69,72,"/**
* Creates an instance of AbstractBiMap from existing backward and forward maps.
* @param backward map with keys of type K
* @param forward map with keys of type V and values of type K
*/",Private constructor for inverse bimap.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,<init>,com.google.common.collect.ForwardingConcurrentMap:<init>(),44,44,"/**
* Creates an empty ForwardingConcurrentMap instance. 
* This constructor does not initialize any data; it simply creates an empty map.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,<init>,com.google.common.collect.ForwardingSortedMap:<init>(),63,63,"/**
* Creates an empty forwarding sorted map. 
* @see ForwardingSortedMap#ForwardingSortedMap() 
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap:<init>(com.google.common.collect.ImmutableMap),173,175,"/**
 * Constructs an instance of ImmutableClassToInstanceMap from an existing map.
 * @param delegate underlying map of classes to instances
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableBiMap:<init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)",1711,1715,"/**
* Wraps a Bimap and its inverse in an unmodifiable map. 
* @param delegate original Bimap
* @param inverse inverse of the Bimap, or null if not provided
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,<init>,com.google.common.collect.MutableClassToInstanceMap:<init>(java.util.Map),75,77,"/**
* Initializes a new instance with a provided backing map.
* @param delegate backing map of classes to instances
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap:<init>(com.google.common.collect.ImmutableMap),98,100,"/**
* Creates an instance of ImmutableTypeToInstanceMap from an existing map.
* @param delegate pre-populated map of type tokens to instances
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap:<init>(),41,41,"/**
* Initializes an empty MutableTypeToInstanceMap instance.",Creates a new map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:<init>(java.util.Map$Entry),161,163,"/**
* Constructs an unmodifiable entry from a given modifiable entry.
* @param delegate the underlying modifiable entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,<init>,com.google.common.collect.ForwardingListMultimap:<init>(),41,41,"/**
 * Initializes an empty forwarding multimap. 
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,<init>,com.google.common.collect.ForwardingSetMultimap:<init>(),41,41,"/**
* Initializes an empty multimap with default settings.",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableMultimap:<init>(com.google.common.collect.Multimap),687,689,"/**
* Wraps an existing multimap as an unmodifiable view.
* @param delegate the underlying multimap instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableTable:<init>(com.google.common.collect.Table),544,546,"/**
* Wraps an existing table with read-only access.
* @param delegate original table instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingListeningExecutorService:<init>(),40,40,"/**
* Initializes a new instance of ForwardingListeningExecutorService.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:<init>(java.util.concurrent.Future),88,90,"/**
 * Wraps a given Future instance with a SimpleForwardingFuture.
 * @param delegate the future to be wrapped
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture:<init>(),37,37,"/**
 * Creates an empty ForwardingListenableFuture instance.",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future,java.util.concurrent.Executor)",128,131,"/**
* Adapts a Future to be Listenable, wrapping it in an executor. 
* @param delegate the underlying Future
* @param adapterExecutor the executor to use for listening events
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,get,com.google.common.cache.ForwardingLoadingCache:get(java.lang.Object),44,48,"/**
* Calls m2() on result of m1(), delegating to the underlying implementation.
* @param key object used by m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getUnchecked,com.google.common.cache.ForwardingLoadingCache:getUnchecked(java.lang.Object),50,54,"/**
* Delegates call to nested map's m2 method.
* @param key key to search in nested map
* @return value associated with key or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getAll,com.google.common.cache.ForwardingLoadingCache:getAll(java.lang.Iterable),56,60,"/**
* Delegates key-value pair retrieval to underlying map.
* @param keys Iterable of keys to retrieve values for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,apply,com.google.common.cache.ForwardingLoadingCache:apply(java.lang.Object),62,65,"/**
* Delegates to M1 to fetch and invoke its m2 method.
* @param key key parameter for M1's m2 method
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,refresh,com.google.common.cache.ForwardingLoadingCache:refresh(java.lang.Object),67,70,"/**
* Calls m2 on the result of m1 with provided key.
* @param key key to be passed to m2
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,delegate,com.google.common.cache.ForwardingCache:delegate(),41,42,"/**
* Returns a cache instance with default mask settings.
* @return Cache instance or null if not supported by subclass
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,entrySet,com.google.common.collect.ImmutableMultiset:entrySet(),359,363,"/**
* Returns an immutable set of entries, lazily initializing it if necessary.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getNextEvictable,com.google.common.cache.LocalCache$Segment:getNextEvictable(),2669,2678,"/**
* Returns the reference entry with a positive FUNC_MASK value.
* @return reference entry or throws AssertionError if none found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",1709,1714,"/**
* Recursively updates the next reference entry in a linked list.
* @param original current entry
* @param newNext replacement entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,put,"com.google.common.collect.Maps$AbstractFilteredMap:put(java.lang.Object,java.lang.Object)",2863,2867,"/**
* Invokes lower-level map operations and delegates to unfiltered map.
* @param key unique identifier
* @param value associated data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,putAll,com.google.common.collect.Maps$AbstractFilteredMap:putAll(java.util.Map),2869,2875,"/**
* Processes entries from a filtered map and delegates remaining entries to another handler.
* @param map filtered map of key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AbstractFilteredMap:containsKey(java.lang.Object),2877,2880,"/**
* Combines filtered and unfiltered database results using the provided key.
* @param key unique identifier to filter results
* @return true if both conditions are met, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AbstractFilteredMap:get(java.lang.Object),2882,2886,"/**
* Fetches and validates unfiltered value by key.
* @param key unique identifier (may be null)
* @return V object or null if not found or invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Column$EntrySet:clear(),534,537,"/**
* Calls m1() and passes its result to m2(). 
* @see m1(), m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$1:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves a reference entry from the given segment based on the provided key and hash.
* @param segment segment to search in
* @param key key to match with existing entries
* @param hash hash code of the key for efficient lookup
* @param next potential next entry in the linked list
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1011,1013,"/**
* Constructs a StrongAccessEntry with the given key and next entry.
* @param key unique key
* @param hash hash value of the key
* @param next reference to the next entry in the map's chain
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1103,1105,"/**
* Initializes a new StrongAccessWriteEntry instance.
* @param key the entry's key
* @param hash the entry's hash code
* @param next the next entry in the map (can be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1057,1059,"/**
* Initializes a new StrongWriteEntry with the given key and hash.
* @param key the entry's key
* @param hash the entry's hash code
* @param next the next entry in the linked list (may be null)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$5:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves a reference entry based on a given key and hash value.
* @param segment the segment to search in
* @param key the key to look up
* @param hash the hash value of the key
* @param next the next entry to consider (null for initial search)
* @return the matching ReferenceEntry or null if not found","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1298,1300,"/**
* Constructs a weak access entry with the specified parameters.
* @param queue reference queue
* @param key unique identifier
* @param hash hash code
* @param next next entry in linked list (may be null)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1390,1393,"/**
* Constructs a weak access write entry.
* @param queue reference queue
* @param key associated object key
* @param hash hash code of the key
* @param next next entry in the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1344,1346,"/**
* Initializes a weak write-only entry in the map.
* @param queue reference queue for garbage collection
* @param key unique key value
* @param hash hash code of the key
* @param next reference to the next entry (null if this is the last)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,notifyNewValue,com.google.common.cache.LocalCache$LoadingValueReference:notifyNewValue(java.lang.Object),3533,3545,"/**
* Updates mask with new value or re-fetches old value on null input.
* @param newValue nullable new mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$LoadingValueReference:compute(java.lang.Object,java.util.function.BiFunction)",3577,3595,"/**
* Applies a transformation function to the given key and returns the new value.
* @param key unique identifier
* @param function BiFunction to compute new value
* @return transformed V object or null on failure
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,run,com.google.common.util.concurrent.AbstractCatchingFuture:run(),77,147,"/**
* Executes input future with fallback and exception handling.
* @param localInputFuture input future to execute
* @param localExceptionType expected exception type
* @param localFallback fallback function
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,run,com.google.common.util.concurrent.AbstractTransformFuture:run(),67,173,"/**
* Performs a transformation using a function and input future.
* @param inputFuture ListenableFuture containing source data
* @param function Function to apply to the source data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,get,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:get(),346,349,"/**
* Returns a mask value.
* @throws ExecutionException if an execution error occurs
*/","* Returns the final value of the associated {@link ClosingFuture}, or throws an exception as
     * {@link Future#get()} would.
     *
     * <p>Because the asynchronous operation has already completed, this method is synchronous and
     * returns immediately.
     *
     * @throws CancellationException if the computation was cancelled
     * @throws ExecutionException if the computation threw an exception",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,com.google.common.util.concurrent.Futures$CallbackListener:run(),1111,1133,"/**
* Handles future operation by checking for failure or execution exceptions.
* @param future the future to operate on
* @param callback the callback to notify of results
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",95,99,"/**
* Executes the Runnable with a specified timeout.
*@param runnable task to be executed
*@param timeoutDuration time limit for execution
*@param timeoutUnit unit of time for timeout duration
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",135,156,"/**
* Executes a callable with a specified timeout.
* @param callable the operation to execute
* @param timeoutDuration duration of the timeout
* @param timeoutUnit unit of the timeout duration
* @return result of the callable or null if timed out
* @throws TimeoutException if execution times out
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if execution fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",158,179,"/**
* Executes a callable with configurable timeout.
* @param callable function to execute
* @param timeoutDuration duration of the wait period
* @param timeoutUnit unit of time for the wait period
* @throws TimeoutException if execution times out
* @throws ExecutionException if execution fails",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",181,199,"/**
* Executes a Runnable with timed execution and retries on timeout or interruption.
* @param runnable task to be executed
* @param timeoutDuration duration of the time limit
* @param timeoutUnit unit of the time limit (e.g. TimeUnit.SECONDS)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",201,219,"/**
* Executes a Runnable with optional timeout.
*@param runnable task to be executed
*@param timeoutDuration duration of timeout in specified unit
*@param timeoutUnit time unit for timeout duration
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postWriteCleanup,com.google.common.cache.LocalCache$Segment:postWriteCleanup(),3459,3461,"/**
* Initializes function mask. 
* Calls m1() function.
*/",Performs routine cleanup following a write.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$2:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Computes and returns a ValueReference based on the given segment, 
* reference entry, value, and weight.
* @param segment Segment object
* @param entry ReferenceEntry object
* @param value Value to be processed
* @param weight Weight factor
* @return ValueReference object or null if not applicable
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedSoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1649,1653,"/**
* Creates a weighted soft reference to the given value.
* @param queue ReferenceQueue for garbage collection
* @param value referenced object
* @param entry ReferenceEntry containing metadata
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$1:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Computes and returns a ValueReference object based on the given parameters.
* @param segment Segment reference
* @param entry Entry reference
* @param value Value to be referenced
* @param weight Weighting factor
* @return ValueReference object or null if computation fails
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$3:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
* Calculates a weighted reference mask from a segment and entry.
* @param segment Segment object
* @param entry ReferenceEntry object
* @param value Value to be masked
* @param weight Weight for the calculation
* @return ValueReference object or null if not found
*/",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedWeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1627,1631,"/**
* Creates a weighted weak reference to the given value.
* @param queue reference queue for garbage collection
* @param value referenced object
* @param entry associated entry in the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$AccessQueue:remove(java.lang.Object),3859,3870,"/**
* Traverses and updates entry in hash map.
* @param o reference entry to process
* @return true if traversal successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AccessQueue:clear(),3895,3906,"/**
* Iterates through the linked list of entries and applies transformations.
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyAccessEntry,"com.google.common.cache.LocalCache$EntryFactory:copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",630,639,"/**
* Updates the masked fields of a reference entry.
* @param original original entry to mask
* @param newEntry new entry with updated masked fields
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyWriteEntry,"com.google.common.cache.LocalCache$EntryFactory:copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",642,651,"/**
* Updates a reference entry with masked values from another.
* @param original the original entry
* @param newEntry the entry to update
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$WriteQueue:remove(java.lang.Object),3719,3730,"/**
* Performs masked operation on a reference entry.
* @param o the reference entry
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$WriteQueue:clear(),3755,3766,"/**
* Traverses the linked list of reference entries and updates each entry.
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteEntries,com.google.common.cache.LocalCache:usesWriteEntries(),368,370,"/**
* Evaluates the function mask by combining the results of m1 and m2.
* @return true if either m1 or m2 returns true, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$Segment:<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)",1964,1984,"/**
* Initializes a Segment instance with the provided parameters.
* @param map LocalCache instance
* @param initialCapacity initial table capacity
* @param maxSegmentWeight maximum segment weight
* @param statsCounter StatsCounter for tracking usage statistics
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordRead,"com.google.common.cache.LocalCache$Segment:recordRead(com.google.common.cache.ReferenceEntry,long)",2530,2535,"/**
* Updates reference entry and adds to recency queue based on map's state.
* @param entry ReferenceEntry object
* @param now current timestamp
*/","* Records the relative order in which this read was performed by adding {@code entry} to the
     * recency queue. At write-time, or when the queue is full past the threshold, the queue will be
     * drained and the entries therein processed.
     *
     * <p>Note: locked reads should use {@link #recordLockedRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordLockedRead,"com.google.common.cache.LocalCache$Segment:recordLockedRead(com.google.common.cache.ReferenceEntry,long)",2544,2550,"/**
* Updates mask of a reference entry and notifies access queue.
* @param entry the reference entry to update
* @param now current timestamp
*/","* Updates the eviction metadata that {@code entry} was just read. This currently amounts to
     * adding {@code entry} to relevant eviction lists.
     *
     * <p>Note: this method should only be called under lock, as it directly manipulates the
     * eviction queues. Unlocked reads should use {@link #recordRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordWrite,"com.google.common.cache.LocalCache$Segment:recordWrite(com.google.common.cache.ReferenceEntry,int,long)",2556,2570,"/**
* Updates the given ReferenceEntry with the provided weight and current time.
* @param entry ReferenceEntry to update
* @param weight new weight value
* @param now current timestamp
*/","* Updates eviction metadata that {@code entry} was just written. This currently amounts to
     * adding {@code entry} to relevant eviction lists.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsTime,com.google.common.cache.LocalCache:recordsTime(),364,366,"/**
* Combines results of m1 and m2 to determine function mask.
* @return true if either m1 or m2 returns true
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessEntries,com.google.common.cache.LocalCache:usesAccessEntries(),372,374,"/**
* Evaluates bitwise OR of results from m1() and m2().
* @return true if either or both functions return true
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache:getLiveValue(com.google.common.cache.ReferenceEntry,long)",1773,1786,"/**
* Calculates a mask value for the given reference entry.
* @param entry ReferenceEntry object
* @param now current time in milliseconds
* @return calculated mask value or null if invalid
*/","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
   * loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean
   * up stale entries. As such it should only be called outside a segment context, such as during
   * iteration.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$AbstractCacheSet:size(),4538,4541,"/**
* Delegates to local cache's implementation of this method.
* @return result from local cache's m1()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$Values:size(),4590,4593,"/**
* Invokes local cache's implementation of m1(). 
* @return result from LocalCache's m1() method
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.HashMultiset:size(),185,188,"/**
* Calculates 2^size - 1 mask value.
* @return the calculated mask value as an integer.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.LinkedHashMultiset:size(),185,188,"/**
* Calculates the mask value based on the size.
* @return Mask value as an integer.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,size,com.google.common.collect.Iterables:size(java.lang.Iterable),129,133,"/**
* Recursively calculates a value from an iterable.
* @param iterable input collection or iterator
* @return calculated integer value
*/",Returns the number of elements in {@code iterable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$EntrySet:size(),2771,2774,"/**
* Delegates to internal map's m1() implementation.
* @return result of internal map's m1() invocation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$KeySet:size(),2683,2686,"/**
* Calls overridden method in internal map.
* @return result of internal map's implementation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$Values:size(),2717,2720,"/**
* Delegates to superclass's implementation of m1(). 
* @return result from superclass's m1() method.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSize,com.google.common.collect.ForwardingMultiset:standardSize(),274,276,"/**
* Calculates a function mask based on internal state.
* @return integer function mask value
*/","* A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #size} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,size,com.google.common.collect.Multisets$ViewMultiset:size(),1173,1176,"/**
* Returns a function mask value using a helper method.
* @return integer representing a function mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$OnePlusArrayList:size(),348,351,"/**
* Calculates the mask value based on the length of the 'rest' array.
* @return The calculated mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$TwoPlusArrayList:size(),379,382,"/**
 * Calculates the function mask based on string length.
 * @return integer value representing the mask
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractBaseGraph:degree(java.lang.Object),136,145,"/**
* Calculates the mask value for a given node based on its properties.
* @param node Node object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArrayInternal,"com.google.common.io.ByteStreams:toByteArrayInternal(java.io.InputStream,java.util.Queue,int)",175,209,"/**
* Fetches data from InputStream into a Queue of byte arrays.
* @param in input stream
* @param bufs queue for storing partial byte arrays
* @param totalLen total length of data to be fetched
*/","* Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have
   * a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given
   * input stream.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedPow,"com.google.common.math.IntMath:saturatedPow(int,int)",571,616,"/**
* Calculates FUNC_MASK value based on input parameters.
* @param b integer value
* @param k exponent value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setDelegates,"com.google.common.collect.AbstractBiMap:setDelegates(java.util.Map,java.util.Map)",97,105,"/**
* Initializes and sets the forward and inverse mappings.
* @param forward mapping from K to V
* @param backward mapping from V to K
*/","* Specifies the delegate maps going in each direction. Called by the constructor and by
   * subclasses during deserialization.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,all,com.google.common.collect.GeneralRange:all(java.util.Comparator),60,62,"/**
* Creates a GeneralRange with specified comparator and flags.
* @param comparator comparison function for range elements
*/",Returns the whole range relative to the specified comparator.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,downTo,"com.google.common.collect.GeneralRange:downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",68,71,"/**
* Creates a GeneralRange instance with the specified comparator and endpoint.
* @param comparator comparator to use for ordering
* @param endpoint single endpoint value
* @param boundType type of bounds (e.g. inclusive, exclusive)
*/","* Returns everything above the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,upTo,"com.google.common.collect.GeneralRange:upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",77,80,"/**
* Creates a GeneralRange instance with specified parameters and comparator.
* @param comparator comparison function for range elements
* @param endpoint endpoint of the range (inclusive)
* @param boundType indicates whether the range is bounded or not
*/","* Returns everything below the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,range,"com.google.common.collect.GeneralRange:range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",86,93,"/**
* Creates a GeneralRange instance with specified bounds and comparator.
* @param comparator comparison function for range
* @param lower lower bound of the range
* @param lowerType type of lower bound (inclusive/exclusive)
* @param upper upper bound of the range
* @param upperType type of upper bound (inclusive/exclusive)","* Returns everything between the endpoints relative to the specified comparator, with the
   * specified endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,intersect,com.google.common.collect.GeneralRange:intersect(com.google.common.collect.GeneralRange),193,239,"/**
* Merges two GeneralRange objects into one.
* @param other the range to merge with
*/","* Returns the intersection of the two ranges, or an empty range if their intersection is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$TransformedEntriesMap:get(java.lang.Object),2157,2160,"/**
 * Retrieves and returns a V2 function mask based on the provided key.
 * @param key object to fetch the corresponding V2 function mask for
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$1:getElement(),1031,1035,"/**
* Computes the mask value using element-specific function m1.
* @return computed mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,"com.google.common.collect.TreeMultiset$AvlNode:count(java.util.Comparator,java.lang.Object)",644,653,"/**
* Recursively compares elements using the provided comparator.
* @param comparator comparison function
* @param e element to compare against
* @return -1 if left is smaller, 1 if right is larger, or 0 for equality
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,ceiling,"com.google.common.collect.TreeMultiset$AvlNode:ceiling(java.util.Comparator,java.lang.Object)",1008,1018,"/**
* Recursively searches for an AVL node with a matching element.
* @param comparator comparison function
* @param e target element
* @return matching AvlNode or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,floor,"com.google.common.collect.TreeMultiset$AvlNode:floor(java.util.Comparator,java.lang.Object)",1020,1029,"/**
* Recursively searches the AVL tree for a node with a matching value.
* @param comparator comparison function
* @param e target value to search for
* @return AvlNode containing the matched value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putInBothMaps,"com.google.common.collect.AbstractBiMap:putInBothMaps(java.lang.Object,java.lang.Object,boolean)",136,152,"/**
* Updates or inserts a key-value pair into the map.
* @param key unique key identifier
* @param value associated value
* @param force whether to override existing values
* @return previous value if any, null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.AbstractBiMap:remove(java.lang.Object),166,170,"/**
* Returns value associated with the given key, or null if not found.
* @param key object to look up (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,com.google.common.collect.Collections2$PermutationIterator:<init>(java.util.List),636,644,"/**
* Initializes permutation iterator with a specified list.
* @param list input list of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConsumingQueueIterator.java,<init>,com.google.common.collect.ConsumingQueueIterator:<init>(java.util.Queue),31,33,"/**
* Initializes iterator with a non-null Queue instance.
* @param queue non-empty collection of elements to iterate over
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator:<init>(com.google.common.graph.BaseGraph),46,49,"/**
* Initializes an iterator over endpoint pairs in the graph.
* @param graph BaseGraph instance to iterate over
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,next,com.google.common.collect.AbstractIterator:next(),149,161,"/**
* Returns a functional mask value based on current state.
* @return T functional mask object or throws exception if invalid state
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,peek,com.google.common.collect.AbstractIterator:peek(),170,177,"/**
* Returns a mask value based on the current state.
* @throws NoSuchElementException if not in valid state
*/","* Returns the next element in the iteration without advancing the iteration, according to the
   * contract of {@link PeekingIterator#peek()}.
   *
   * <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should
   * implement {@code PeekingIterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:spliterator(),1429,1432,"/**
* Creates a spliterator for iterating over map entries.
* @return Spliterator containing key-value pairs or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:next(),1463,1468,"/**
* Retrieves and processes an entry from the iterator.
* @return processed Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerEntry(java.lang.Object),1551,1555,"/**
* Retrieves an entry by key by delegating to a lower-level operation.
* @param key unique identifier
* @return Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerKey(java.lang.Object),1557,1560,"/**
* Calls m1() and delegates m2() operation to its result with provided key.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorEntry(java.lang.Object),1562,1566,"/**
* Retrieves an entry by key via a composed operation.
* @param key unique identifier for the entry to retrieve
* @return Entry object or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorKey(java.lang.Object),1568,1571,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key unique identifier or null for default behavior
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingEntry(java.lang.Object),1573,1577,"/**
* Retrieves an entry from the cache using the given key.
* @param key unique identifier for the desired entry
* @return cached Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingKey(java.lang.Object),1579,1582,"/**
* Calls m2 on the result of m1 with provided key.
* @param key unique identifier to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherEntry(java.lang.Object),1584,1588,"/**
* Retrieves an entry from the cache using a provided key.
* @param key unique identifier for the desired entry
* @return cached Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherKey(java.lang.Object),1590,1593,"/**
* Calls M1 and delegates M2 operation to its result.
* @param key object used in M2 operation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:firstEntry(),1595,1599,"/**
* Recursively fetches an Entry object by calling m1 and m3 methods.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lastEntry(),1601,1605,"/**
* Recursively fetches a nested Entry by calling m1() and processing its result with m3().
* @return Nested Entry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingMap(),1629,1632,"/**
* Wraps the result of m1().m2() in a NavigableMap.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:createKeySet(),1639,1642,"/**
* Returns a navigable set of keys based on m1(). 
* @return NavigableSet of keys ordered by m1() function.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1660,1667,"/**
* Retrieves a navigable map of user IDs within the specified key range.
* @param fromKey start key (inclusive if true)
* @param fromInclusive whether start key is inclusive
* @param toKey end key (inclusive if true)
* @param toInclusive whether end key is inclusive
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object,boolean)",1674,1677,"/**
* Retrieves a navigable map of collections for the given key.
* @param toKey unique key identifier
* @param inclusive whether to include adjacent keys
* @return NavigableMap with key-value pairs or empty if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object,boolean)",1684,1688,"/**
* Returns a navigable map of collections for keys within or at the specified range.
* @param fromKey starting key
* @param inclusive whether to include the end key in the result
* @return NavigableMap of Collections or null if empty",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:keySet(),1528,1532,"/**
* Returns a cached or freshly computed sorted set of keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollFirstEntry(),1607,1610,"/**
* Computes and returns an entry with a mask value.
* @return Entry object containing the computed mask or null if not available.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap:removeAll(java.lang.Object),254,268,"/**
* Retrieves a collection of values from the map using the provided key.
* @param key unique identifier or null to fetch all entries
* @return Collection of V objects or null if key is invalid
*/","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:lower(java.lang.Object),1070,1073,"/**
* Applies functional mask to input object using m1 and m2 methods.
* @param k input object of type K
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:floor(java.lang.Object),1075,1078,"/**
* Applies function mask to input value.
* @param k input value to be masked
* @return transformed value or null if unsuccessful
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:ceiling(java.lang.Object),1080,1083,"/**
* Applies functional mask to input object.
* @param k input object of type K
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:higher(java.lang.Object),1085,1088,"/**
* Applies mask operation to input value.
* @param k input value to be masked
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingSet(),1100,1103,"/**
 * Returns a navigable set of keys based on the internal key mapping.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object,boolean)",1115,1118,"/**
* Creates a navigable key set with specified element and inclusion criteria.
* @param toElement the element to use in set creation
* @param inclusive whether to include the toElement in the set
* @return NavigableSet containing keys or null if invalid parameters.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1126,1134,"/**
* Creates a navigable set of keys within the specified range.
* @param fromElement starting key element (inclusive or exclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending key element (inclusive or exclusive)
* @param toInclusive whether end is inclusive
* @return NavigableSet of keys in the given range",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object,boolean)",1141,1144,"/**
* Creates a navigable key set based on the given range criteria.
* @param fromElement starting element (inclusive if true)
* @param inclusive whether to include the start element
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,validateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:validateIterator(),464,469,"/**
* Validates delegate consistency and throws exception if modified.
* @throws ConcurrentModificationException when delegate is inconsistent
*/","* If the delegate changed since the iterator was created, the iterator is no longer valid.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,size,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:size(),398,402,"/**
* Calls internal implementation of method m2 via delegate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,equals,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:equals(java.lang.Object),404,418,"/**
* Recursively checks if an object is equal to this instance.
* @param object the object to compare
* @return true if object is this instance, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hashCode,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:hashCode(),420,424,"/**
* Calls m1(), then delegates to and returns result from m2() of delegate.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,toString,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:toString(),426,430,"/**
* Calls local implementation of method m2 via delegate and returns result. 
* If not overridden locally, delegates to superclass's implementation.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,iterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:iterator(),436,440,"/**
* Returns an iterator over function masks.
* @return Iterator of function mask values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:spliterator(),442,446,"/**
* Delegates spliterator creation to underlying delegate.
* @return Spliterator of type V
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:add(java.lang.Object),497,509,"/**
* Updates internal state with new value and notifies delegates.
* @param value the new value to process
* @return true if the update resulted in a change, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:contains(java.lang.Object),534,538,"/**
* Calls delegate's m2 method with provided object.
* @param o Object to pass to delegate's m2 method
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:containsAll(java.util.Collection),540,544,"/**
* Delegates collection processing to underlying delegate.
* @param c Collection of unknown type to process
* @return Result of processing, true or false
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:remove(java.lang.Object),557,566,"/**
* Updates user profile data and notifies listeners.
* @param o the UserProfile object to update
* @return true if changes were made, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:lower(java.lang.Object),702,705,"/**
 * Calls the secondary operation on the result of the primary operation,
 * passing through the provided input value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:floor(java.lang.Object),707,710,"/**
* Calls m1() and delegates to its m2(V) method with input v.
* @param v input value to pass to m1().m2(V)
* @return result of m1().m2(V), or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:ceiling(java.lang.Object),712,715,"/**
* Invokes nested operation m2 on result of m1 and passes provided argument.
* @param v input value to pass to m2, may be null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:higher(java.lang.Object),717,720,"/**
* Calls m1() and delegates to its m2(V) method with provided value.
* @param v input value to be processed by m1()'s m2(V)
* @return result from m1()'s m2(V) or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingSet(),736,739,"/**
* Invokes m3 with result of m1 and returns navigable set from m3. 
* @return NavigableSet containing elements from m3 output
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingIterator(),741,744,"/**
* Wraps iterator returned by m1().m2() and returns it.
* @return Iterator containing values of type V or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",746,754,"/**
* Returns a navigable set of elements within the specified range.
* @param fromElement starting element (inclusive if fromInclusive is true)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive if toInclusive is true)
* @param toInclusive whether end is inclusive
* @return NavigableSet of elements in the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:headSet(java.lang.Object,boolean)",756,759,"/**
* Returns a navigable set of elements from m1() by applying m2() with the given toElement and inclusivity.
* @param toElement element to fetch, or null for all
* @param inclusive whether to include the toElement in the result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:tailSet(java.lang.Object,boolean)",761,764,"/**
* Returns a navigable set of elements between 'fromElement' (inclusive if specified).
* @param fromElement starting element
* @param inclusive whether to include the start element in the result
* @return NavigableSet containing elements between 'fromElement'
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,put,"com.google.common.collect.AbstractListMultimap:put(java.lang.Object,java.lang.Object)",118,122,"/**
* Calls superclass's m1 method to store or update the given key-value pair.
* @param key unique identifier for the entry
* @param value associated data for the entry
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,put,"com.google.common.collect.AbstractSetMultimap:put(java.lang.Object,java.lang.Object)",139,143,"/**
* Calls superclass's m1 method with provided key and value.
* @param key arbitrary object used as a key
* @param value arbitrary object used as a value
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} if the method increased the size of the multimap, or {@code false} if the
   *     multimap already contained the key-value pair",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,get,com.google.common.collect.AbstractListMultimap:get(java.lang.Object),80,83,"/**
* Calls superclass method to retrieve list of values associated with the given key.
* @param key unique identifier
* @return List of V objects or null if not found
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,get,com.google.common.collect.AbstractSetMultimap:get(java.lang.Object),78,81,"/**
* Calls superclass's m1 method with given key.
* @param key unique identifier
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,containsValue,com.google.common.collect.LinkedListMultimap:containsValue(java.lang.Object),590,593,"/**
* Checks if input value matches specified mask criteria.
* @param value object to be checked
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,entries,com.google.common.collect.AbstractSetMultimap:entries(),89,92,"/**
* Delegates to superclass method to retrieve entries.
*@return Set of key-value pairs or null if empty
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,iterator,com.google.common.collect.AbstractMultimap$Values:iterator(),192,195,"/**
* Returns an iterator over the function masks.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueSpliterator,com.google.common.collect.AbstractMultimap:valueSpliterator(),222,224,"/**
* Creates a spliterator using three masks.
* @return Spliterator instance with custom split strategy
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,writeObject,com.google.common.collect.LinkedListMultimap:writeObject(java.io.ObjectOutputStream),843,852,"/**
* Writes user data to the specified output stream.
* @throws IOException if I/O error occurs
*/","* @serialData the number of distinct keys, and then for each distinct key: the first key, the
   *     number of values for that key, and the key's values, followed by successive keys and values
   *     from the entries() ordering",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.AbstractMapBasedMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Updates the count for a given element.
* @param element object to update
* @param count new count value
* @return previous count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.HashMultiset:clear(),169,176,"/**
* Resets the internal state and updates the map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.LinkedHashMultiset:clear(),169,176,"/**
* Resets internal state by clearing frequencies and updating map. 
* @see backingMap#m3() */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toStringImpl,com.google.common.collect.Collections2:toStringImpl(java.util.Collection),333,348,"/**
* Concatenates unique identifiers from the given collection into a comma-separated string.
* @param collection input collection of objects
*/",An implementation of {@link Collection#toString()}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toStringImpl,com.google.common.collect.Maps:toStringImpl(java.util.Map),3893,3904,"/**
* Converts a Map to a formatted string in the form of ""{key=value, key2=value2}"".
* @param map input map
* @return formatted string or null if map is empty
*/",An implementation of {@link Map#toString}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithExpectedSize,com.google.common.collect.Lists:newArrayListWithExpectedSize(int),200,204,"/**
* Creates an ArrayList with an initial capacity based on the estimated size.
* @param estimatedSize The expected number of elements in the list
*/","* Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an
   * unspecified amount of padding; you almost certainly mean to call {@link
   * #newArrayListWithCapacity} (see that method for further advice on usage).
   *
   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want
   * some amount of padding, it's best if you choose your desired amount explicitly.
   *
   * @param estimatedSize an estimate of the eventual {@link List#size()} of the new list
   * @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of
   *     elements
   * @throws IllegalArgumentException if {@code estimatedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,combine,com.google.common.util.concurrent.CollectionFuture$ListFuture:combine(java.util.List),94,101,"/**
* Processes a list of Present objects, transforming and combining their values.
* @param values input list of Present objects
* @return transformed list of values or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newHashMapWithExpectedSize,com.google.common.collect.Maps:newHashMapWithExpectedSize(int),276,280,"/**
* Creates a new HashMap with initial capacity based on provided size.
* @param expectedSize estimated number of key-value pairs
*/","* Creates a {@code HashMap} instance, with a high enough ""initial capacity"" that it <i>should</i>
   * hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed,
   * but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method
   * isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Maps:newLinkedHashMapWithExpectedSize(int),359,363,"/**
* Creates a linked hash map with pre-allocated space.
* @param expectedSize estimated size of the map
*/","* Creates a {@code LinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize}
   *     entries without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSetWithExpectedSize,com.google.common.collect.Sets:newHashSetWithExpectedSize(int),263,267,"/**
* Creates a HashSet with an initial capacity based on the provided size.
* @param expectedSize estimated number of elements to store
* @return pre-sized HashSet instance
*/","* Returns a new hash set using the smallest initial table size that can hold {@code expectedSize}
   * elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it
   * is what most users want and expect it to do.
   *
   * <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Sets:newLinkedHashSetWithExpectedSize(int),360,364,"/**
* Creates a LinkedHashSet of type E with an initial capacity based on the provided expected size.
* @param expectedSize estimated number of elements in the set
*/","* Creates a {@code LinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned set.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(),285,287,"/**
* Creates a new MultimapBuilder instance with default expected values per key. 
*/",Uses an {@link ArrayList} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(),327,329,"/**
* Creates a multimap builder with default expected values per key.",Uses a hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(),350,352,"/**
* Creates a multimap builder with default expected values per key.",Uses an insertion-ordered hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(),73,75,"/**
* Creates a new MultimapBuilder instance with default expected keys.",Uses a hash table to map keys to value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(),101,103,"/**
* Creates a MultimapBuilder instance with default expected keys.","* Uses a hash table to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,immutableEntry,"com.google.common.collect.Multisets:immutableEntry(java.lang.Object,int)",258,261,"/**
* Creates an immutable multiset entry with the given element and count.
* @param e the element (may be null)
* @param n the count
*/","* Returns an immutable multiset entry with the specified element and count. The entry will be
   * serializable if {@code e} is.
   *
   * @param e the element to be associated with the returned entry
   * @param n the count to be associated with the returned entry
   * @throws IllegalArgumentException if {@code n} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:<init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry)",142,145,"/**
* Constructs a non-terminal entry with the given element and count.
* @param element element of the entry
* @param count count associated with the entry
* @param nextInBucket reference to the next entry in the bucket
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int)",85,89,"/**
* Calculates mask value based on given element and count.
* @param element user-provided element to process
* @param count number of elements to consider
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int)",215,217,"/**
* Retrieves the mask value from the multiset by counting occurrences of an element.
* @param element element to search for
* @param count maximum number of occurrences to consider
*/","* A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)},
   * {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you
   * override any of these methods, you may wish to override {@link #setCount(Object, int)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Calculates functional mask based on count change.
* @param element the element to consider
* @param oldCount previous count value
* @param newCount updated count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int,int)",226,228,"/**
* Checks if adding/removing an element affects set cardinality.
* @param element the element to add/remove
* @param oldCount initial count of elements
* @param newCount final count of elements after operation
*/","* A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)}
   * and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to
   * override {@link #setCount(Object, int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,equals,com.google.common.collect.ImmutableSet:equals(java.lang.Object),284,296,"/**
* Checks if two objects are equal based on specific conditions.
* @param object the object to compare with this instance
* @return true if objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$PowerSet:hashCode(),1768,1776,"/**
* Calculates result by recursively calling m2 on the result of m1 and shifting 
* left based on the difference between m3 values.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,contains,com.google.common.collect.AbstractMultimap$Values:contains(java.lang.Object),207,210,"/**
* Checks if an object matches the multimap's mask.
* @param o object to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.LinkedListMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
* Checks if a key-value pair exists in a filtered collection.
* @param key unique identifier or filter criteria
* @param value associated data to match with the key
* @return true if the pair is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.LinkedListMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Performs a nested lookup operation on a collection.
* @param key the primary lookup key
* @param value the secondary lookup value (only used if key is found)
* @return true if the value was successfully looked up, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.LinkedListMultimap:hashCode(),251,254,"/**
* Calls and returns the result of m2() from the returned value of m1().
*/","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.LinkedListMultimap:toString(),262,265,"/**
* Calls m1(), then calls m2() on its result.","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.LinkedListMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
* Updates function mask based on the provided multimap.
* @param multimap map of keys to values
* @return true if the function mask was updated, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.LinkedListMultimap:equals(java.lang.Object),238,241,"/**
* Checks whether an object matches a specific filter.
* @param object object to be checked
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,elementSet,com.google.common.collect.AbstractSortedMultiset:elementSet(),51,54,"/**
* Delegates to superclass to retrieve a navigable set of elements.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.ConcurrentHashMultiset:elementSet(),130,137,"/**
* Returns a set of elements, potentially initializing it via the lazy loading method m1().
* @return Set of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.EnumMultiset:elementSet(),130,137,"/**
* Returns a set of elements, initializing it with values from m1() if not already set. 
* @return Set of elements or null if initialization failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.AbstractMapBasedMultiset:entrySet(),83,86,"/**
* Calls superclass implementation of m1 to retrieve multiset entries.
* @return Set of Multiset.Entry objects","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.AbstractMultiset:isEmpty(),49,52,"/**
* Calls and returns result of m2() from m1().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,hashCode,com.google.common.collect.AbstractMultiset:hashCode(),217,220,"/**
* Recursively calls m1 to fetch and then retrieve m2 value.
* @return result of m2 from UserProfile object returned by m1
*/","* {@inheritDoc}
   *
   * <p>This implementation returns the hash code of {@link Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,toString,com.google.common.collect.AbstractMultiset:toString(),228,231,"/**
* Calls m1(), then delegates to its result's m2() method.
*/","* {@inheritDoc}
   *
   * <p>This implementation returns the result of invoking {@code toString} on {@link
   * Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.ConcurrentHashMultiset:entrySet(),164,171,"/**
* Returns a set of entries, initializing it if necessary.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.EnumMultiset:entrySet(),164,171,"/**
* Returns a set of entries, lazily initializing it if necessary.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstKey,com.google.common.collect.AbstractNavigableMap:firstKey(),61,70,"/**
* Retrieves a key from the map using the provided function and returns its associated value.
* @return Value object associated with the retrieved key, or throws NullPointerException if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastKey,com.google.common.collect.AbstractNavigableMap:lastKey(),72,81,"/**
* Retrieves a key-value pair from the map using function m1 and returns its value.
* @return Value associated with the key or throws NoSuchElementException if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardFirstEntry(),188,190,"/**
* Returns an entry from a filtered iterable or null if not found.
*/","* A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link
   * #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to
   * forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,ceiling,com.google.common.collect.ImmutableSortedSet:ceiling(java.lang.Object),738,741,"/**
* Applies mask to input element using m1 and returns result.
* @param e input element of type E
* @return masked element or null if not applicable
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,higher,com.google.common.collect.ImmutableSortedSet:higher(java.lang.Object),746,750,"/**
* Computes functional mask value from input element.
* @param e input element to process
* @return functional mask value or null if not applicable
*/",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(),50,52,"/**
* Constructs an empty TreeRangeSet instance with a comparator-based range map. 
* @return new TreeRangeSet instance
*/",Creates an empty {@code TreeRangeSet} instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet$AsSet:contains(java.lang.Object),664,676,"/**
* Checks if the given object is an instance of type C.
* @param o Object to check
* @return true if o is an instance of C, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet$Complement:contains(java.lang.Comparable),30,33,"/**
* Checks if C value matches any mask.
* @param value input character to check
* @return true if value is a valid mask, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.TreeRangeSet$SubRangeSet:contains(java.lang.Comparable),407,411,"/**
* Checks if a value falls within a specific range (lower/upper bounds).
* @param value input value to check
*/","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.ImmutableRangeSet:clear(),53,56,"/**
* Applies mask to current data range.
* @param C type parameter (not used in this method)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.TreeRangeSet:clear(),53,56,"/**
 * Applies mask to filtered data. 
 * @param m1 masked data range
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)",465,470,"/**
* Initializes ComplementRanges object with given ranges and window.
* @param positiveRangesByLowerBound Map of positive ranges by lower bound
* @param window Range to consider as complement window
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:<init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap)",694,702,"/**
* Initializes SubRangeSet with ranges by lower bound.
* @param lowerBoundWindow window for lower-bound filtering
* @param restriction range restriction filter
* @param rangesByLowerBound map of ranges to sub-ranges by lower bound
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedKeySortedSetMultimap:asMap(),43,46,"/**
* Calls superclass implementation to fetch sorted map of K to collections of V.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,hasSameComparator,"com.google.common.collect.SortedIterables:hasSameComparator(java.util.Comparator,java.lang.Iterable)",37,49,"/**
* Verifies if a custom comparator is compatible with an iterable's sorting.
* @param comparator custom comparator to test
* @param elements iterable to check compatibility with
* @return true if compatible, false otherwise
*/","* Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to
   * {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.TreeMultiset:descendingMultiset(),122,126,"/**
* Returns or initializes the descending multiset.
* @return SortedMultiset object or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.HashBasedTable:containsValue(java.lang.Object),109,112,"/**
* Calls superclass method with non-null value, returning its result.
* @param value object to pass to superclass (may be null)
* @return result from superclass or false if null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,putAll,com.google.common.collect.ArrayTable:putAll(com.google.common.collect.Table),484,487,"/**
* Calls superclass's m1() method with specified table.
*/","* {@inheritDoc}
   *
   * <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,
   * possibly replacing values that were previously non-null.
   *
   * @throws NullPointerException if {@code table} has a null key
   * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not
   *     in {@link #rowKeySet()} or {@link #columnKeySet()}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable:clear(),90,93,"/**
 * Calls Iterators.m3 on the result of m1().m2().
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesIterator,com.google.common.collect.AbstractTable:valuesIterator(),191,199,"/**
* Returns an iterator that applies the mask function to each cell.
* @return Iterator over masked values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.AbstractTable:hashCode(),238,241,"/**
* Calls m1() to fetch nested result and returns its m2() value. 
* @return integer value from nested m2() call or null if not found 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSet,com.google.common.collect.ArrayTable:cellSet(),544,547,"/**
* Delegates to superclass to retrieve a set of cells.
*/","* Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table
   * will update the returned set.
   *
   * <p>The returned set's iterator traverses the mappings with the first row key, the mappings with
   * the second row key, and so on.
   *
   * <p>The value in the returned cells may change if the table subsequently changes.
   *
   * @return set of table cells consisting of row key / column key / value triplets",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellSet,com.google.common.collect.ImmutableTable:cellSet(),300,303,"/**
* Returns an immutable set of cells from superclass.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.StandardTable:cellSet(),235,238,"/**
* Delegates cell set retrieval to superclass. 
* @return Set of Cells or null if not found in subclasses.","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,values,com.google.common.collect.ArrayTable:values(),786,789,"/**
 * Delegates to superclass implementation of data retrieval.
 * @return Collection of values or empty collection if not found
 */","* Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the
   * table will update the returned collection.
   *
   * <p>The returned collection's iterator traverses the values of the first row key, the values of
   * the second row key, and so on.
   *
   * @return collection of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,values,com.google.common.collect.ImmutableTable:values(),318,321,"/**
* Delegates to superclass to retrieve collection of values.
* @return Collection of V type or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.StandardTable:values(),795,798,"/**
 * Calls superclass implementation of m1.
 * @return collection of V objects from superclass
 */","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ArrayTable:equals(java.lang.Object),233,236,"/**
* Checks if an object matches a specific mask.
* @param obj object to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ImmutableTable:equals(java.lang.Object),233,236,"/**
* Checks if an object matches a specific functional mask.
* @param obj object to be checked
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onResultOf,com.google.common.collect.Ordering:onResultOf(com.google.common.base.Function),459,461,"/**
* Creates an ordering based on a given function.
* @param function function to determine ordering
*/","* Returns a new ordering on {@code F} which orders elements by first applying a function to them,
   * then comparing those results using {@code this}. For example, to compare objects by their
   * string forms, in a case-insensitive manner, use:
   *
   * {@snippet :
   * Ordering.from(String.CASE_INSENSITIVE_ORDER)
   *     .onResultOf(Functions.toStringFunction())
   * }
   *
   * <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead
   * (you can omit the comparator if it is the natural order).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(java.util.Comparator),192,196,"/**
* Creates an Ordering instance from a Comparator, or wraps it if already Ordering.
* @param comparator the input comparator to convert
* @return Ordering instance wrapping the comparator
*/","* Returns an ordering based on an <i>existing</i> comparator instance. Note that it is
   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just
   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}
   * method directly.
   *
   * <p>The returned object is serializable if {@code comparator} is serializable.
   *
   * <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so
   * there is no need to use this method.
   *
   * @param comparator the comparator that defines the order
   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that
   *     wraps that comparator",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.util.Comparator),483,485,"/**
* Creates a compound ordering with this comparator and a masked secondary comparator.
* @param secondaryComparator comparator to be masked (e.g., by bitwise AND)
*/","* Returns an ordering which first uses the ordering {@code this}, but which in the event of a
   * ""tie"", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by
   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a
   * compound ordering with three or more components, simply chain multiple calls to this method.
   *
   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to
   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.
   *
   * <p>The returned object is serializable if this object and {@code secondaryComparator} are both
   * serializable.
   *
   * <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.
   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code
   * thenComparing} may be even more useful.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,lexicographical,com.google.common.collect.Comparators:lexicographical(java.util.Comparator),63,66,"/**
* Creates a lexicographical ordering comparator for iterable collections of type S,
* based on the provided comparator for elements of type T.
* @param comparator comparator for individual elements
* @return Comparator for iterable collections of type S
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,lexicographical,com.google.common.collect.Ordering:lexicographical(),531,540,"/**
* Returns an ordering for iterables of type S, where S is a subtype of T.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsFirst,com.google.common.collect.Ordering:nullsFirst(),428,430,"/**
* Creates an ordering that returns null values first.
* @return NullsFirstOrdering instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsLast,com.google.common.collect.Ordering:nullsLast(),442,444,"/**
* Returns an ordering that places null values last.
* @return Ordering instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,reverse,com.google.common.collect.Ordering:reverse(),414,416,"/**
* Returns an ordering that reverses the current ordering.
* @return ReverseOrdering instance based on this ordering.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,readObject,com.google.common.collect.TreeMultimap:readObject(java.io.ObjectInputStream),217,226,"/**
* Deserializes object from ObjectInputStream.
* @throws IOException serialization exception
* @throws ClassNotFoundException type not found during deserialization
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,immutableCell,"com.google.common.collect.Tables:immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)",125,131,"/**
* Creates a cell with the specified value and keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell value
*/","* Returns an immutable cell with the specified row key, column key, and value.
   *
   * <p>The returned cell is serializable.
   *
   * @param rowKey the row key to be associated with the returned cell
   * @param columnKey the column key to be associated with the returned cell
   * @param value the value to be associated with the returned cell",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,elementSet,com.google.common.collect.ImmutableMultimap$Keys:elementSet(),743,746,"/**
* Returns a set of function masks.
* @return immutable set of function IDs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,contains,"com.google.common.collect.ArrayTable:contains(java.lang.Object,java.lang.Object)",401,404,"/**
* Checks if both row and column keys are valid.
* @param rowKey unique row identifier or null if not set
* @param columnKey unique column identifier or null if not set
* @return true if both keys are valid, false otherwise
*/","* Returns {@code true} if the provided keys are among the keys provided when the table was
   * constructed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Keys:contains(java.lang.Object),732,735,"/**
* Checks if an object matches a specific mask.
* @param object object to be checked
* @return true if object matches mask, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver:<init>(),58,60,"/**
* Initializes TypeResolver with default type table.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryOf,"com.google.common.collect.ImmutableMap:entryOf(java.lang.Object,java.lang.Object)",344,346,"/**
* Creates an immutable map entry with the given key and value.
* @param key unique key
* @param value associated value
*/","* Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry
   * with those values.
   *
   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link
   * UnsupportedOperationException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)",102,106,"/**
* Constructs a non-terminal immutable map entry.
* @param key the key
* @param value the value
* @param nextInKeyBucket the next entry in the key bucket or null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,"com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object)",206,210,"/**
* Creates an immutable map entry from the given entry or a new one if not reusable.
* @param entry existing entry to reuse
* @param key new key for non-reusable entries
* @param value new value for non-reusable entries
* @return ImmutableMapEntry object
*/",Makes an entry usable internally by a new ImmutableMap without rereading its contents.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,"com.google.common.collect.ImmutableListMultimap$Builder:put(java.lang.Object,java.lang.Object)",253,258,"/**
* Puts a key-value pair into the map.
* @param key unique identifier of the entry
* @param value associated value for the given key
* @return Builder instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,com.google.common.collect.ImmutableMultimap$Builder:put(java.util.Map$Entry),255,258,"/**
* Creates a new builder instance from an existing Entry.
* @param entry Entry object to create the builder from
*/","* Adds an entry to the built multimap.
     *
     * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,"com.google.common.collect.ImmutableSetMultimap$Builder:put(java.lang.Object,java.lang.Object)",302,307,"/**
* Adds a new entry to the cache with the given key and value.
* @param key unique cache key
* @param value associated cache value
* @return this Builder instance for method chaining
*/",Adds a key-value mapping to the built multimap if it is not already present.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:trySplit(),376,399,"/**
* Creates an OutSpliterator for the given data, estimating its size.
* @return OutSpliterator object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,valueSpliterator,com.google.common.collect.AbstractMapBasedMultimap:valueSpliterator(),1235,1239,"/**
* Creates a spliterator from a map's key-value pairs.
* @return Spliterator instance for iterating over map entries
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entrySpliterator,com.google.common.collect.AbstractMapBasedMultimap:entrySpliterator(),1293,1305,"/**
* Creates a spliterator for the map's entries.
* @return Spliterator of Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,entrySpliterator,com.google.common.collect.ImmutableMultimap:entrySpliterator(),692,704,"/**
* Creates a spliterator for the map's entries.
* @return Spliterator of Map.Entry objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,spliteratorImpl,com.google.common.collect.Multisets:spliteratorImpl(com.google.common.collect.Multiset),1124,1133,"/**
 * Creates a Spliterator for the given Multiset, applying a transformation to its entries.
 * @param multiset the input Multiset
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSpliterator,com.google.common.collect.StandardTable:cellSpliterator(),299,310,"/**
* Creates a spliterator for masked backing map cells.
* @return Spliterator of unique Cell objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSortedSet:<init>(java.util.SortedSet,com.google.common.base.Predicate)",1300,1302,"/**
* Constructs a filtered sorted set from an existing sorted set.
* @param unfiltered original sorted set
* @param predicate filtering condition for elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$KeySetView:iterator(),737,740,"/**
* Returns an iterator over key values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$EntrySetView:iterator(),813,816,"/**
* Returns an iterator over key-value pairs in the map.
* @return Iterator of Entry objects or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,updateLastKnownIndex,com.google.common.collect.CompactHashMap$MapEntry:updateLastKnownIndex(),903,909,"/**
* Updates the last known index for a given key.
* @param key unique identifier
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,isEmpty,com.google.common.collect.CompactHashMap:isEmpty(),959,962,"/**
* Returns whether the mask is valid (i.e., equals zero).
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,clear,com.google.common.collect.CompactHashMap:clear(),1092,1112,"/**
* Processes user profile data by delegating to a Map or generating compact hash.
* @param none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,writeObject,com.google.common.collect.CompactHashMap:writeObject(java.io.ObjectOutputStream),1114,1124,"/**
* Serializes data to the given output stream.
* @param stream ObjectOutputStream instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$ValuesView:iterator(),995,998,"/**
* Returns an iterator over all masks in the system.
* @return Iterator of V objects representing masks",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeTable,"com.google.common.collect.CompactHashMap:resizeTable(int,int,int,int)",432,477,"/**
* Computes a new hash mask based on the provided parameters.
* @param oldMask current hash mask
* @param newCapacity new table capacity
* @param targetHash target hash value (if applicable)
* @param targetEntryIndex target entry index (if applicable)
* @return new hash mask value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeTable,"com.google.common.collect.CompactHashSet:resizeTable(int,int,int,int)",383,418,"/**
* Rebuilds hash table with updated capacity and target entry.
* @param oldMask current mask
* @param newCapacity new table size
* @param targetHash target hash value
* @param targetEntryIndex target entry index (or UNSET for no update)
* @return new mask value",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeMeMaybe,com.google.common.collect.CompactHashMap:resizeMeMaybe(int),411,420,"/**
* Updates internal hash table capacity and size to accommodate new number of entries.
* @param newSize desired number of entries
*/",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,resizeEntries,com.google.common.collect.CompactLinkedHashMap:resizeEntries(int),214,218,"/**
* Updates internal array with new capacity.
* @param newCapacity new size of the array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsValue,com.google.common.collect.CompactHashMap:containsValue(java.lang.Object),964,976,"/**
* Checks if a value exists in the data structure.
* @param value object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,insertEntry,"com.google.common.collect.CompactHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",403,408,"/**
* Initializes entry at specified index with provided key and value.
* @param entryIndex entry index
* @param key unique identifier or null for unset
* @param value associated data or null for unset
* @param hash computed hash code
* @param mask bitmask for compact hashing
*/",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,replaceAll,com.google.common.collect.CompactHashMap:replaceAll(java.util.function.BiFunction),672,683,"/**
* Applies a transformation function to all values in the map.
* @param function BiFunction to apply to each value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isEmpty,com.google.common.collect.CompactHashSet:isEmpty(),621,624,"/**
* Checks if function mask is enabled by verifying the value of m1().
* @return true if function mask is disabled (m1() == 0), false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,clear,com.google.common.collect.CompactHashSet:clear(),677,696,"/**
* Executes delegate operation if available; otherwise, performs fallback actions.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,writeObject,com.google.common.collect.CompactHashSet:writeObject(java.io.ObjectOutputStream),698,705,"/**
* Serializes this collection's elements and metadata to the output stream.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeMeMaybe,com.google.common.collect.CompactHashSet:resizeMeMaybe(int),363,372,"/**
* Updates internal data structure capacity to accommodate the specified new size.
* @param newSize desired number of entries
*/",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,resizeEntries,com.google.common.collect.CompactLinkedHashSet:resizeEntries(int),214,219,"/**
* Updates internal arrays based on new capacity.
* @param newCapacity the updated size of the arrays
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,insertEntry,"com.google.common.collect.CompactHashSet:insertEntry(int,java.lang.Object,int,int)",357,360,"/**
* Updates and stores user profile data.
* @param entryIndex unique index
* @param object UserProfile object to store
* @param hash hashed value
* @param mask bitmask value
*/",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,allocArrays,com.google.common.collect.CompactHashMap:allocArrays(),267,281,"/**
* Initializes internal data structures for compact hashing.
* @return expected table size
*/",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,allocArrays,com.google.common.collect.CompactHashSet:allocArrays(),232,245,"/**
* Initializes internal tables and arrays for a hash map.
* @return expected size of the map
*/",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getPredecessor,com.google.common.collect.CompactLinkedHashMap:getPredecessor(int),148,150,"/**
 * Calculates a mask value from an input integer.
 * @param entry input integer
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getSuccessor,com.google.common.collect.CompactLinkedHashMap:getSuccessor(int),152,155,"/**
* Calculates a function mask value from an input integer.
* @param entry input integer to process
* @return computed function mask value as int
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSuccessor,"com.google.common.collect.CompactLinkedHashMap:setSuccessor(int,int)",157,160,"/**
* Updates entry using a mask to combine values from entry and succ.
* @param entry input value
* @param succ secondary value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setPredecessor,"com.google.common.collect.CompactLinkedHashMap:setPredecessor(int,int)",162,165,"/**
* Updates the masked value using bitwise operations.
* @param entry input integer
* @param pred predicate value to mask with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSucceeds,"com.google.common.collect.CompactLinkedHashSet:setSucceeds(int,int)",179,191,"/**
 * Updates endpoint references for a given predecessor and successor.
 * @param pred the predecessor endpoint
 * @param succ the successor endpoint
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,<init>,com.google.common.collect.EmptyContiguousSet:<init>(com.google.common.collect.DiscreteDomain),36,38,"/**
* Initializes an empty contiguous set over the specified discrete domain. 
* @param domain discrete domain to operate on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,<init>,"com.google.common.collect.RegularContiguousSet:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",42,45,"/**
* Constructs a RegularContiguousSet with specified range and domain.
* @param range contiguous range of values
* @param domain discrete domain for the set's elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asRanges,com.google.common.collect.ImmutableRangeSet:asRanges(),303,309,"/**
* Returns an immutable set of ranges for the given mask.
* @return Set of ranges or empty set if m1() condition is met
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,emptySet,com.google.common.collect.ImmutableSortedSet:emptySet(java.util.Comparator),86,95,"/**
* Creates a sorted set with the given comparator, 
* or returns the natural empty set if comparable.
* @param comparator custom sorting comparator
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$BelowValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",333,343,"/**
* Returns a cut of the same type as input, or an above-value cut if bound is open.
* @param boundType CLOSED or OPEN
* @return Cut object of class C
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$BelowValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",345,355,"/**
* Generates a Cut object based on the bound type.
* @param boundType CLOSED or OPEN
* @return Cut object of type C or itself if open
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,aboveValue,com.google.common.collect.Cut:aboveValue(java.lang.Comparable),390,392,"/**
* Creates an instance of Cut with a comparable endpoint.
* @param endpoint Comparable object representing the endpoint
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,belowValue,com.google.common.collect.Cut:belowValue(java.lang.Comparable),309,311,"/**
* Creates a cut with a mask below the given comparable endpoint.
* @param endpoint the endpoint to create a cut from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,equals,com.google.common.collect.Cut:equals(java.lang.Object),91,105,"/**
* Compares object to Cut instance using custom comparator.
* @param obj Object to compare, may be null
* @return true if comparable and equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,<init>,"com.google.common.collect.Range:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut)",327,335,"/**
* Initializes a Range object with specified bounds.
* @param lowerBound the inclusive lower bound (inclusive)
* @param upperBound the inclusive upper bound (exclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloses,com.google.common.collect.Range:encloses(com.google.common.collect.Range),485,488,"/**
* Checks if two ranges overlap.
* @param other Range object to compare with
* @return true if the ranges intersect, false otherwise
*/","* Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this
   * range. Examples:
   *
   * <ul>
   *   <li>{@code [3..6]} encloses {@code [4..5]}
   *   <li>{@code (3..6)} encloses {@code (3..6)}
   *   <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)
   *   <li>{@code (3..6]} does not enclose {@code [3..6]}
   *   <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value
   *       contained by the latter range)
   *   <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value
   *       contained by the latter range)
   * </ul>
   *
   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code
   * a.contains(v)}, but as the last two examples illustrate, the converse is not always true.
   *
   * <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a
   * <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range
   * according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure
   * also implies {@linkplain #isConnected connectedness}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isConnected,com.google.common.collect.Range:isConnected(com.google.common.collect.Range),515,518,"/**
* Checks if two ranges have disjoint intervals.
* @param other Range object to compare with
*/","* Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses
   * enclosed} by both this range and {@code other}.
   *
   * <p>For example,
   *
   * <ul>
   *   <li>{@code [2, 4)} and {@code [5, 7)} are not connected
   *   <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}
   *   <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range
   *       {@code [4, 4)}
   * </ul>
   *
   * <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and
   * {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this
   * method returns {@code true}.
   *
   * <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain
   * Equivalence equivalence relation} as it is not transitive.
   *
   * <p>Note that certain discrete ranges are not considered connected, even though there are no
   * elements ""between them."" For example, {@code [3, 5]} is not considered connected to {@code [6,
   * 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link
   * #canonical(DiscreteDomain)} before testing for connectedness.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,writeObject,com.google.common.collect.ImmutableSetMultimap:writeObject(java.io.ObjectOutputStream),665,671,"/**
* Serializes this object to the given output stream.
* @throws IOException if serialization fails
*/","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,subMultiset,"com.google.common.collect.ImmutableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",385,394,"/**
* Creates a sorted multiset with bounds.
* @param lowerBound the lower bound (inclusive)
* @param lowerBoundType the type of the lower bound
* @param upperBound the upper bound (exclusive)
* @param upperBoundType the type of the upper bound
* @return ImmutableSortedMultiset object",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,toString,com.google.common.collect.DescendingMultiset:toString(),159,162,"/**
* Calls m1(), then calls m2() on its result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,"com.google.common.collect.EnumMultiset:remove(java.lang.Object,int)",162,187,"/**
* Updates FUNC_MASK count for an Enum element.
* @param element Enum object
* @param occurrences number of occurrences to update
* @return previous count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,compare,"com.google.common.collect.ExplicitOrdering:compare(java.lang.Object,java.lang.Object)",39,42,"/**
* Calculates functional mask difference between two operands.
* @param left first operand to compare
* @param right second operand to compare
* @return integer difference of functional masks
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,builder,com.google.common.collect.ImmutableRangeMap:builder(),101,103,"/**
* Creates a new builder instance with default settings.
*/",Returns a new builder for an immutable range map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,builder,com.google.common.collect.ImmutableRangeSet:builder(),748,750,"/**
* Creates a new Builder instance with default settings.
* @return Builder object for constructing objects of type C
*/",Returns a new builder for an immutable range set.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,builder,com.google.common.collect.ImmutableTable:builder(),149,151,"/**
* Creates a new instance of the Builder class.
* @return Builder object with default configuration
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder#Builder() ImmutableTable.Builder()} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,removeAll,com.google.common.collect.FilteredEntrySetMultimap:removeAll(java.lang.Object),48,51,"/**
* Delegates to superclass implementation of map retrieval.
* @param key nullable object key
* @return Set of values or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,add,"com.google.common.collect.ForwardingList:add(int,java.lang.Object)",63,66,"/**
* Calls m1() to execute m2 with provided parameters.
* @param index unspecified integer index
* @param element object of type E (possibly null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,addAll,"com.google.common.collect.ForwardingList:addAll(int,java.util.Collection)",68,72,"/**
* Calls internal implementation of method m2.
* @param index index to access
* @param elements collection of elements
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,get,com.google.common.collect.ForwardingList:get(int),74,78,"/**
* Calls M1 to retrieve an object and then invokes M2 on it with the given index.
* @param index index value to pass to M2
* @return result of calling M2 on the retrieved object, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,indexOf,com.google.common.collect.ForwardingList:indexOf(java.lang.Object),80,83,"/**
* Calls m1() and delegates its result to its own m2() method.
* @param element object to be processed in subsequent call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,lastIndexOf,com.google.common.collect.ForwardingList:lastIndexOf(java.lang.Object),85,88,"/**
* Calls m1() and delegates its result to m2(element).
* @param element object to be passed to m2 of returned value from m1()
* @return result from m2 of returned value from m1()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(),90,93,"/**
* Calls m1() to retrieve an iterator and then delegates its m2() call.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(int),95,98,"/**
* Delegates list iteration to another iterator instance.
* @param index starting index in the underlying collection
* @return ListIterator object for the specified position
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,remove,com.google.common.collect.ForwardingList:remove(int),100,105,"/**
* Calls m2 on the result of m1, passing the specified index.
* @param index index to pass to m2
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,set,"com.google.common.collect.ForwardingList:set(int,java.lang.Object)",107,112,"/**
* Calls nested method m2 with provided index and element.
* @param index index to pass to m2
* @param element element to pass to m2
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,subList,"com.google.common.collect.ForwardingList:subList(int,int)",114,117,"/**
* Calls the implementation of m2 in the returned object from m1.
* @param fromIndex starting index for filtering
* @param toIndex ending index for filtering
* @return List of E objects within specified range or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,equals,com.google.common.collect.ForwardingList:equals(java.lang.Object),119,122,"/**
* Checks if the given object is an instance of this class or recursively calls m2 on its own instance.
* @param object the object to check (may be null)
* @return true if object is an instance of this class, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,hashCode,com.google.common.collect.ForwardingList:hashCode(),124,127,"/**
* Calls m1() to execute its side effects and returns its result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,removeAll,com.google.common.collect.FilteredKeyListMultimap:removeAll(java.lang.Object),46,49,"/**
* Calls superclass's m1() with given key and casts result to List<V>.
* @param key object to search by, may be null
* @return list of V objects or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,removeAll,com.google.common.collect.FilteredKeySetMultimap:removeAll(java.lang.Object),48,51,"/**
* Delegates call to superclass's m1() method, casting result to Set<V>.
* @param key nullable object used by superclass implementation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractDirectedNetworkConnections$1:iterator(),732,733,"/**
* Returns an unmodifiable iterator over elements of type E.
*/","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,frequency,"com.google.common.collect.Iterables:frequency(java.lang.Iterable,java.lang.Object)",346,353,"/**
* Returns count of given element in the specified iterable.
* @param iterable collection to search
* @param element target object to find
*/","* Returns the number of elements in the specified iterable that equal the specified object. This
   * implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}.
   *
   * <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code
   * stream.filter(element::equals).count()}. If {@code element} might be null, use {@code
   * stream.filter(Predicate.isEqual(element)).count()} instead.
   *
   * @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection,
   *     Object)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsKey,com.google.common.collect.ForwardingMap:standardContainsKey(java.lang.Object),207,209,"/**
* Checks if a key is present in this map.
* @param key object to search for
* @return true if found, false otherwise
*/","* A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code
   * iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to
   * override {@link #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsValue,com.google.common.collect.ForwardingMap:standardContainsValue(java.lang.Object),234,236,"/**
* Checks if the given object matches the function's mask.
* @param value object to check
*/","* A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of
   * {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #containsValue} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,equals,com.google.common.collect.ExplicitOrdering:equals(java.lang.Object),52,59,"/**
* Compares explicit ordering objects based on their rank maps.
* @param object ExplicitOrdering instance to compare with
* @return true if comparison succeeds, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerKey,com.google.common.collect.ForwardingNavigableMap:standardLowerKey(java.lang.Object),90,92,"/**
* Applies mask function to provided key.
* @param key input value to be masked
* @return transformed value or null if not found","* A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override
   * {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorKey,com.google.common.collect.ForwardingNavigableMap:standardFloorKey(java.lang.Object),118,120,"/**
* Applies function chain to input key.
* @param key unique identifier or null if not found
* @return result of function chain or null if key is null
*/","* A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override
   * {@code floorEntry}, you may wish to override {@code floorKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingKey,com.google.common.collect.ForwardingNavigableMap:standardCeilingKey(java.lang.Object),146,148,"/**
* Applies function m2 to the result of applying function m1 to the input key.
* @param key input value to be transformed by functions m1 and m2
* @return transformed value or null if not applicable","* A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override
   * {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherKey,com.google.common.collect.ForwardingNavigableMap:standardHigherKey(java.lang.Object),174,176,"/**
* Computes a mask value based on the given key.
* @param key unique identifier or key to compute mask from
*/","* A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override
   * {@code higherEntry}, you may wish to override {@code higherKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstKey,com.google.common.collect.ForwardingNavigableMap:standardFirstKey(),197,204,"/**
* Retrieves and returns a key from the cache using a custom retrieval function.
* @throws NoSuchElementException if no matching entry is found
*/","* A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override
   * {@code firstEntry}, you may wish to override {@code firstKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastKey,com.google.common.collect.ForwardingNavigableMap:standardLastKey(),224,231,"/**
* Retrieves and returns the mask value from an existing entry.
* @return The mask value or throws NoSuchElementException if not found
*/","* A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code
   * lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastEntry,com.google.common.collect.ForwardingNavigableMap:standardLastEntry(),216,218,"/**
* Retrieves an entry with a specific mask value.
*/","* A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link
   * #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code lastEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollLastEntry,com.google.common.collect.ForwardingNavigableMap:standardPollLastEntry(),257,259,"/**
* Creates an Entry instance using iterator pipeline.
*/","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code
   * entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code pollFirstEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardDescendingKeySet,com.google.common.collect.ForwardingNavigableMap:standardDescendingKeySet(),359,361,"/**
* Returns a navigable set of keys.
* @return Set of keys or null if not initialized
*/","* A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link
   * #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code
   * navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code
   * descendingMap}, you may wish to override {@code descendingKeySet} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardSubMap,"com.google.common.collect.ForwardingNavigableMap:standardSubMap(java.lang.Object,java.lang.Object)",368,372,"/**
* Returns a sorted map of key-value pairs within the specified range.
* @param fromKey starting key
* @param toKey ending key
*/","* A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object,
   * boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may
   * wish to override {@code subMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerEntry,com.google.common.collect.ForwardingNavigableMap:standardLowerEntry(java.lang.Object),76,78,"/**
* Retrieves an entry from the data structure using the given key.
* @param key unique identifier for the desired entry
* @return Entry object or null if not found
*/","* A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * lowerEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorEntry,com.google.common.collect.ForwardingNavigableMap:standardFloorEntry(java.lang.Object),104,106,"/**
* Retrieves and processes an entry based on the given key.
* @param key unique identifier to fetch the entry for
* @return Entry object or null if not found
*/","* A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * floorEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHeadMap,com.google.common.collect.ForwardingNavigableMap:standardHeadMap(java.lang.Object),398,400,"/**
* Returns a sorted map with the specified key.
* @param toKey unique key to be added
*/","* A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object,
   * boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code
   * headMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingEntry,com.google.common.collect.ForwardingNavigableMap:standardCeilingEntry(java.lang.Object),132,134,"/**
* Retrieves an entry from the map using the provided key.
* @param key unique map key
*/","* A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * ceilingEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherEntry,com.google.common.collect.ForwardingNavigableMap:standardHigherEntry(java.lang.Object),160,162,"/**
* Retrieves an entry from the underlying data structure using the provided key.
* @param key unique identifier of the desired entry
* @return The Entry object associated with the key, or null if not found
*/","* A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * higherEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardTailMap,com.google.common.collect.ForwardingNavigableMap:standardTailMap(java.lang.Object),407,409,"/**
* Retrieves a sorted map of key-value pairs starting from the given key.
* @param fromKey the starting key
*/","* A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object,
   * boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code
   * tailMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardSubMultiset,"com.google.common.collect.ForwardingSortedMultiset:standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",219,225,"/**
* Creates a SortedMultiset with bounds for the specified range.
* @param lowerBound lower bound value
* @param lowerBoundType type of lower bound (inclusive or exclusive)
* @param upperBound upper bound value
* @param upperBoundType type of upper bound (inclusive or exclusive)
*/","* A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of
   * {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object,
   * BoundType) tailMultiset}.
   *
   * <p>If you override either of these methods, you may wish to override {@link
   * #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,get,com.google.common.collect.ForwardingSetMultimap:get(java.lang.Object),51,54,"/**
* Calls m1() and delegates to its m2() method with the provided key.
* @param key unique identifier (type depends on K)
* @return set of values (type V) or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,delegate,com.google.common.collect.ForwardingMultimap:delegate(),46,47,"/**
* Returns a multimap of function identifiers to valid values.
* @return Multimap containing function masks.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,isEmpty,com.google.common.collect.GeneralRange:isEmpty(),160,164,"/**
* Evaluates function mask using multiple conditions.
* @return true if any condition is met, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,contains,com.google.common.collect.GeneralRange:contains(java.lang.Object),186,188,"/**
* Evaluates whether an object does not match either of two masks.
* @param t object to be evaluated
* @return true if object does not match either mask, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(),69,71,"/**
* Creates a new instance of HashBasedTable with default factory.
*/",Creates an empty {@code HashBasedTable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,<init>,"com.google.common.collect.TreeBasedTable:<init>(java.util.Comparator,java.util.Comparator)",131,134,"/**
* Initializes a table with custom row and column comparators.
* @param rowComparator comparator for sorting rows
* @param columnComparator comparator for sorting columns
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap$Inverse:replaceAll(java.util.function.BiFunction),745,753,"/**
* Applies the given function to each key-value pair in the map.
* @param function BiFunction to apply to each entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,<init>,com.google.common.collect.HashBiMap:<init>(int),135,137,"/**
* Initializes a new HashBiMap instance with specified capacity.
* @param expectedSize estimated size of the map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readObject,com.google.common.collect.HashBiMap:readObject(java.io.ObjectInputStream),790,797,"/**
* Deserializes function mask data from the given ObjectInputStream.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,readObject,com.google.common.collect.EnumBiMap:readObject(java.io.ObjectInputStream),150,159,"/**
* Deserializes object graph from input stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,readObject,com.google.common.collect.EnumHashBiMap:readObject(java.io.ObjectInputStream),124,136,"/**
* Deserializes object graph from given ObjectInputStream.
* @throws IOException serialization error
* @throws ClassNotFoundException type not found during deserialization
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,readObject,com.google.common.collect.EnumMultiset:readObject(java.io.ObjectInputStream),309,318,"/**
* Deserializes object from InputStream and updates internal state.
*@throws IOException if serialization fails
*@throws ClassNotFoundException if enum constants are invalid
*/","* @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first
   *     element, its count, the second element, its count, and so on",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,indexOf,com.google.common.collect.CompactHashMap:indexOf(java.lang.Object),479,500,"/**
* Calculates a function mask for the given key.
* @param key object to calculate mask for
* @return non-negative index or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,moveLastEntry,"com.google.common.collect.CompactHashMap:moveLastEntry(int,int)",564,606,"/**
* Replaces entry at dstIndex with entry from srcIndex and updates hash table accordingly.
* @param dstIndex index to replace
* @param mask hash value mask
*/","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,contains,com.google.common.collect.CompactHashSet:contains(java.lang.Object),420,446,"/**
* Performs a search for the given object in a compact hash map.
* @param object Object to be searched
* @return True if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,moveLastEntry,"com.google.common.collect.CompactHashSet:moveLastEntry(int,int)",482,520,"/**
* Swaps and updates hash table entry at dstIndex with the one at srcIndex.
* @param dstIndex index to update
* @param mask hash mask value
*/","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,remove,"com.google.common.collect.CompactHashing:remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])",159,196,"/**
* Searches for a key-value pair in the specified table using hash functions.
* @param key object to search for
* @param value object associated with the key (optional)
* @param mask bit mask used for hashing
* @param table underlying data structure
* @param entries array of entry indices
* @param keys array of keys (optional)
* @param values array of values (optional)
* @return index of matching entry (-1 if not found)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse$InverseKeySet:remove(java.lang.Object),663,672,"/**
* Verifies the given object against a mask.
* @param o Object to be verified
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap$Inverse:get(java.lang.Object),619,622,"/**
* Applies two intermediate functions and maps result using m3. 
* @param value input object to process
* @return processed result or null if failed 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse:remove(java.lang.Object),635,646,"/**
* Retrieves a BiEntry object by calculating and comparing two values.
* @param value input value to calculate and compare
* @return BiEntry object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$KeySet:remove(java.lang.Object),498,509,"/**
* Updates the key-value cache with the given object.
* @param o Object to process
* @return True if updated, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap:containsKey(java.lang.Object),263,266,"/**
* Evaluates whether the given key matches any mask in the collection.
* @param key object to be searched in the collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsValue,com.google.common.collect.HashBiMap:containsValue(java.lang.Object),278,281,"/**
* Applies two masks (m1 and m2) to the given value and returns true if the result is non-null.","* Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or,
   * equivalently, if this inverse view contains a key that is equal to {@code value}).
   *
   * <p>Due to the property that values in a BiMap are unique, this will tend to execute in
   * faster-than-linear time.
   *
   * @param value the object to search for in the values of this BiMap
   * @return true if a mapping exists from a key to the specified value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap:get(java.lang.Object),283,286,"/**
* Computes and returns a value using the given key, applying two intermediate functions (m1 and m2).
* @param key nullable input object for computation
* @return computed result or null if any intermediate function returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object,boolean)",294,326,"/**
* Inserts or updates a key-value pair with optional force overwrite.
* @param key unique identifier
* @param value associated data
* @param force whether to overwrite existing value (true) or throw exception (false)
* @return old value if replaced, null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,putInverse,"com.google.common.collect.HashBiMap:putInverse(java.lang.Object,java.lang.Object,boolean)",334,378,"/**
* Updates or inserts a key-value pair into the map.
* @param value value to associate with key
* @param key unique identifier for the entry
* @param force whether to overwrite existing key
* @return the updated map or null if not changed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap:remove(java.lang.Object),404,416,"/**
* Retrieves a masked value by key, performing necessary computations and updating internal data structures.
* @param key Object to look up; may be null
* @return Masked value of type V or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,contains,com.google.common.collect.LinkedHashMultimap$ValueSet:contains(java.lang.Object),467,478,"/**
* Checks if the provided object is masked by another in the hash table.
* @param o the object to check
* @return true if masked, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,remove,com.google.common.collect.LinkedHashMultimap$ValueSet:remove(java.lang.Object),521,545,"/**
* Removes the first occurrence of a specified object from the hash table.
* @param o the object to remove
* @return true if removed, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,count,com.google.common.collect.RegularImmutableMultiset:count(java.lang.Object),158,174,"/**
* Computes a function mask based on the given element.
* @param element object to compute the mask for
* @return non-zero integer value or 0 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,contains,com.google.common.collect.RegularImmutableSet:contains(java.lang.Object),55,70,"/**
* Checks for a match in the hash table.
* @param target object to search for
* @return true if found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,makeBuilder,com.google.common.collect.ImmutableBiMap$SerializedForm:makeBuilder(int),627,630,"/**
* Creates a new Builder instance with specified mask size.
* @param size size of the mask to be used in the builder
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableBiMap:builderWithExpectedSize(int),306,309,"/**
* Creates a new builder instance with specified expected size.
* @param expectedSize the expected size of the data
*/","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(),345,345,"/**
* Initializes a new instance of the Builder class.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableBiMap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builder,com.google.common.collect.ImmutableMap:builder(),352,354,"/**
* Creates a new instance of the builder with default settings.
* @return newly created Builder instance
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$Builder:<init>(java.util.Comparator),619,621,"/**
 * Initializes the builder with a custom key comparator.
 * @param comparator comparator to use when comparing keys
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMap#orderedBy}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$Column$Values:removeAll(java.util.Collection),653,656,"/**
* Applies transformation pipeline to input collection.
* @param c Collection of elements to process
* @return True if processed successfully, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,inverse,com.google.common.collect.JdkBackedImmutableBiMap:inverse(),73,84,"/**
* Returns the inverse mapping of key-value pairs.
* @return ImmutableBiMap object or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,of,"com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object)",82,84,"/**
* Creates an immutable bi-map with a single key-value entry.
* @param k1 unique key
* @param v1 associated value
*/",Returns an immutable bimap containing a single entry.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,inverse,com.google.common.collect.SingletonImmutableBiMap:inverse(),100,113,"/**
* Returns an immutable bi-map of values to keys.
* If inverse is not set, returns the cached or newly created map. 
* @return ImmutableBiMap object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,combine,com.google.common.collect.ImmutableMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),520,527,"/**
* Merges the provided builder with this one, updating internal state.
* @param other Builder instance to merge from
* @return This builder instance for method chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addDedupedElement,com.google.common.collect.ImmutableSet$SetBuilderImpl:addDedupedElement(java.lang.Object),612,615,"/**
* Adds an element to the set while maintaining distinct elements.
* @param e element to be added
*/",Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(),810,812,"/**
* Initializes builder with default capacity. 
* @param initialCapacity starting size of the collection","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableList#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builderWithExpectedSize,com.google.common.collect.ImmutableList:builderWithExpectedSize(int),775,778,"/**
* Creates a builder with a fixed size mask.
* @param expectedSize initial capacity of the list
*/","* Returns a new builder, expecting the specified number of elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of elements added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,<init>,com.google.common.collect.ImmutableSortedSet$Builder:<init>(java.util.Comparator),451,453,"/**
* Constructs a new builder with the specified comparator and initial capacity.
* @param comparator comparator to use when ordering elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.lang.Iterable),549,554,"/**
* Adds an iterable of elements to the builder.
* @param elements Iterable of elements to add
* @return This builder instance for method chaining
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.util.Iterator),549,554,"/**
* Adds an iterator of elements to the builder.
* @param elements iterable collection of elements to process
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.util.Iterator),564,569,"/**
* Adds an iterable of elements to the builder.
* @param elements iterator over elements to add
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$ReverseImmutableList:<init>(com.google.common.collect.ImmutableList),640,642,"/**
* Initializes a new instance with a reversed copy of the provided immutable list.
* @param backingList original immutable list to reverse
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$StringAsImmutableList:<init>(java.lang.String),771,773,"/**
 * Initializes the list with an immutable copy of the provided string.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableList.java,<init>,com.google.common.collect.RegularImmutableList:<init>(java.lang.Object[]),41,43,"/**
 * Constructs an immutable list from a given array.
 * @param array input array to be converted into a list
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,com.google.common.collect.RegularImmutableMap$Values:<init>(com.google.common.collect.RegularImmutableMap),380,382,"/**
* Initializes a new instance with an immutable map of values.
* @param map immutable map containing key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,<init>,com.google.common.collect.SingletonImmutableList:<init>(java.lang.Object),40,42,"/**
* Creates a singleton immutable list containing the specified element.
* @param element non-null element to be wrapped in the list
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createValues,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createValues(),785,788,"/**
* Returns an immutable collection of function masks.
* @return ImmutableMap containing function mask values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createValues,com.google.common.collect.JdkBackedImmutableMap:createValues(),122,125,"/**
* Returns an immutable collection of function mask values.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createEntries,com.google.common.collect.ImmutableMultimap:createEntries(),615,618,"/**
* Returns an immutable collection of entries in this map.
* @return ImmutableCollection of key-value pairs.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createValues,com.google.common.collect.ImmutableMultimap:createValues(),801,804,"/**
* Returns an immutable collection of values for this object.
* @return ImmutableCollection containing values or empty if none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,<init>,com.google.common.collect.ImmutableEnumSet:<init>(java.util.EnumSet),63,65,"/**
* Wraps an existing EnumSet instance in an immutable wrapper.
* @param delegate original EnumSet to be preserved
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$EntrySet:<init>(com.google.common.collect.ImmutableSetMultimap),603,605,"/**
* Initializes an EntrySet from a Multimap.
* @param multimap underlying Multimap instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,<init>,com.google.common.collect.SingletonImmutableSet:<init>(java.lang.Object),41,43,"/**
* Initializes an immutable set with a single element.
* @param element unique object to be added to the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$ReverseImmutableList:listIterator(),401,404,"/**
* Returns an iterator over the elements in this list.
* The returned iterator is unmodifiable and has a fixed start position.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(),401,404,"/**
* Returns an iterator over elements in this list, starting at the specified index. 
* @return Iterator instance starting from given index.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableList:iterator(),396,399,"/**
* Returns an unmodifiable iterator over elements with specific mask.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableListMultimap.java,<init>,com.google.common.collect.EmptyImmutableListMultimap:<init>(),33,35,"/**
 * Initializes an empty immutable multimap.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableBiMap:createEntrySet(),118,121,"/**
* Returns an immutable set of map entries based on this map.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableMap:createEntrySet(),106,109,"/**
* Returns an immutable set of key-value entries.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,createKeySet,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:createKeySet(),110,113,"/**
* Returns an immutable set of K based on specific conditions.
* @return ImmutableSet of K, or inherited result if conditions not met.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$SerializedForm:<init>(com.google.common.collect.ImmutableBiMap),623,625,"/**
* Constructs a new SerializedForm from an Immutable BiMap. 
* @param bimap immutable map of key-value pairs to serialize.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,writeReplace,com.google.common.collect.ImmutableMap:writeReplace(),1311,1314,"/**
* Returns serialized form of current object.
* @return SerializedForm object containing this instance's data.","* Returns a serializable form of this object. Non-public subclasses should not override this
   * method. Publicly-accessible subclasses must override this method and should return a subclass
   * of SerializedForm whose readResolve() method returns objects of the subclass type.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,iterator,com.google.common.collect.ImmutableMapKeySet:iterator(),48,51,"/**
* Returns an iterator over the entries in this map.
* @return Iterator instance or null if empty
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,hashCode,com.google.common.collect.ExplicitOrdering:hashCode(),61,64,"/**
 * Calls the corresponding method on the rank map. 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:hashCode(),1157,1161,"/**
* Calls delegated method from underlying map.
* @return result of the delegated method
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,hashCode,com.google.common.collect.ImmutableMapEntrySet:hashCode(),122,125,"/**
* Calls and returns result of m1(), which then calls m2().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createAsList,com.google.common.collect.RegularImmutableSortedSet:createAsList(),314,317,"/**
* Returns an immutable list of function masks based on size criteria.
* @return ImmutableList containing function masks or sorted list if m1() > 1
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(int),485,491,"/**
* Initializes set builder with specified capacity.
* @param capacity initial size of the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:copy(),782,785,"/**
* Creates a regular set builder instance.
* @return SetBuilderImpl object for building sets
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,comparator,com.google.common.collect.ImmutableSortedAsList:comparator(),43,46,"/**
* Returns a comparator based on the result of calling m1().",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,indexOf,com.google.common.collect.ImmutableSortedAsList:indexOf(java.lang.Object),50,62,"/**
* Computes and returns a valid index based on target object, 
* otherwise returns -1. @param target object to search for.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asMapOfRanges,com.google.common.collect.ImmutableRangeMap:asMapOfRanges(),307,315,"/**
* Creates a map of ranges to values based on the underlying data structure.
* @return Map of non-empty ranges to corresponding values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$SerializedForm:<init>(com.google.common.collect.ImmutableSortedMap),1147,1150,"/**
* Constructs a SerializedForm from a sorted map.
* @param sortedMap map to serialize, with comparator used for ordering
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,combine,com.google.common.collect.ImmutableSortedSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),571,580,"/**
* Updates the builder with elements from another builder.
* @param builder source builder to copy elements from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,of,"com.google.common.collect.ImmutableTable:of(java.lang.Object,java.lang.Object,java.lang.Object)",108,110,"/**
* Creates a new immutable table with a single entry.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value value to store in the table
*/",Returns an immutable table containing a single cell.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,com.google.common.collect.SingletonImmutableTable:<init>(com.google.common.collect.Table$Cell),43,45,"/**
* Creates an immutable table instance with a single cell.
* @param cell Cell object containing row key, column key, and value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toString,com.google.common.collect.FluentIterable:toString(),336,339,"/**
* Returns a string representation of m1()'s result.
* @return String value or null if m1() returns null
*/","* Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ...,
   * en]}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining("", "", ""["", ""]""))}
   * or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,"com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",279,301,"/**
* Adds a key-value pair to the map with masked values.
* @param key unique key
* @param values iterable of values to mask
*/","* Stores a collection of values with the same key in the built multimap.
     *
     * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}
     *     is null. The builder is left in an invalid state.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,pathNotFound,"com.google.common.io.MoreFiles:pathNotFound(java.nio.file.Path,java.util.Collection)",806,853,"/**
* Extracts NoSuchFileException from a collection of IOExceptions and verifies its file path.
* @param path Path to verify
* @param exceptions Collection of IOExceptions
* @return NoSuchFileException if valid, null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,"com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable,java.lang.Object)",274,278,"/**
* Retrieves a parameter of type T from the first iterable element or returns default value.
* @param iterable Iterable containing potentially null elements
* @param defaultValue Default value to return if no valid element found
*/","* Returns the single element contained in {@code iterable}, or {@code defaultValue} if the
   * iterable is empty.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,throwCause,"com.google.common.util.concurrent.SimpleTimeLimiter:throwCause(java.lang.Exception,boolean)",221,239,"/**
* Combines or preserves stack traces for an exception.
* @param e the original exception
* @param combineStackTraces whether to merge stack traces from multiple exceptions
* @throws Exception the combined exception or the original one if not combined
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,"com.google.common.collect.Iterables:getLast(java.lang.Iterable,java.lang.Object)",873,886,"/**
* Retrieves a value from the given iterable, returning the default value if empty.
* @param iterable input iterable
* @param defaultValue value to return if iterable is empty
* @return first non-empty element or default value
*/","* Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty.
   * If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is
   * guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead. Note that if the collection is empty,
   * {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the value to return if {@code iterable} is empty
   * @return the last element of {@code iterable} or the default value
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$ConcatenatedIterator:next(),1432,1441,"/**
* Recursively calls m2 on an iterator, returning result if m1 succeeds.
* @throws NoSuchElementException if m1 fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,iterator,com.google.common.collect.EmptyContiguousSet:iterator(),97,100,"/**
* Returns an iterator over all elements in collection C.
* @return iterator over all elements in C
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,descendingIterator,com.google.common.collect.EmptyContiguousSet:descendingIterator(),102,106,"/**
* Returns an iterator over a sequence of constants (mask values).
* @return Iterator to constant values or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$ConcatenatedIterator:<init>(java.util.Iterator),1377,1380,"/**
* Initializes an iterator that aggregates multiple iterators.
* @param metaIterator parent iterator containing child iterators
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,add,com.google.common.collect.LinkedHashMultimap$ValueSet:add(java.lang.Object),480,501,"/**
* Inserts a value into the multimap.
* @param value value to insert
* @return true if inserted successfully, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromMultimap,com.google.common.collect.LinkedHashMultimap:deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry),153,156,"/**
* Applies custom masking logic to value entry.
* @param entry ValueEntry object containing key and value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap:clear(),608,612,"/**
* Invokes parent class's m1(), then calls m2() with two identical Map.Entry instances. 
* @param multimapHeaderEntry first entry to pass to m2()
* @param multimapHeaderEntry second entry to pass to m2() (same as the first)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueSpliterator,com.google.common.collect.LinkedHashMultimap:valueSpliterator(),603,606,"/**
* Returns a Spliterator for values in the current collection.
* @return a Spliterator of V objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,put,"com.google.common.collect.LinkedListMultimap:put(java.lang.Object,java.lang.Object)",604,609,"/**
* Sets or updates a function mask entry.
* @param key unique key identifier
* @param value associated value
*/","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,partition,"com.google.common.collect.Lists:partition(java.util.List,int)",701,707,"/**
* Partitions the input list into sublists of a specified size.
* @param list input list to partition
* @param size maximum number of elements in each sublist
* @return List of sublists or null if invalid parameters
*/","* Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same
   * size (the final list may be smaller). For example, partitioning a list containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list
   * containing two inner lists of three and two elements, all in the original order.
   *
   * <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner
   * lists are sublist views of the original list, produced on demand using {@link List#subList(int,
   * int)}, and are subject to all the usual caveats about modification as explained in that API.
   *
   * @param list the list to return consecutive sublists of
   * @param size the desired size of each sublist (the last may be smaller)
   * @return a list of consecutive sublists
   * @throws IllegalArgumentException if {@code partitionSize} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIndexOf,com.google.common.collect.ForwardingList:standardIndexOf(java.lang.Object),159,161,"/**
* Returns a function mask based on the provided element.
* @param element object to determine the mask value
*/","* A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList:indexOf(java.lang.Object),425,428,"/**
* Returns function mask value based on input object.
* @param object input object to determine mask value (-1 or result of m1)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardLastIndexOf,com.google.common.collect.ForwardingList:standardLastIndexOf(java.lang.Object),170,172,"/**
* Computes a mask value based on the given element using m1 algorithm.
* @param element input object to process
*/","* A sensible default implementation of {@link #lastIndexOf}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #lastIndexOf} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList:lastIndexOf(java.lang.Object),430,433,"/**
* Calculates function mask based on input object.
* @param object input object to process
* @return function mask value (-1 if null, else calculated result)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,putIfAbsent,"com.google.common.collect.ForwardingConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)",49,53,"/**
* Calls m2 on the result of m1.
* @param key unique key identifier
* @param value associated value
* @return V object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,remove,"com.google.common.collect.ForwardingConcurrentMap:remove(java.lang.Object,java.lang.Object)",55,59,"/**
* Calls the underlying key-value store to update or insert a value.
* @param key unique identifier for the entry (or null for deletion)
* @param value new value for the entry (or null for deletion)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object)",61,65,"/**
* Delegates to nested map's m2 operation.
* @param key key to use in m2 operation
* @param value value to use in m2 operation
* @return result of m2 operation or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",67,72,"/**
* Delegates to underlying map for update operation.
* @param key   unique identifier
* @param oldValue  previous value
* @param newValue  new value
* @return true if updated, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$Values:contains(java.lang.Object),2727,2730,"/**
* Checks if an object matches the map's mask.
* @param o Object to check
* @return true if object matches, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,advance,com.google.common.collect.MapMakerInternalMap$HashIterator:advance(),2541,2562,"/**
* Iterates through segments to find a valid table.
* @return none
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2111,2116,"/**
* Constructs a new StrongKeyDummyValueSegment.
* @param map internal map instance
* @param initialCapacity initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2022,2028,"/**
* Initializes a new strong key-strong value segment.
* @param map internal map instance
* @param initialCapacity initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2048,2053,"/**
* Initializes a strong key, weak value segment.
* @param map the internal map to initialize
* @param initialCapacity initial capacity of this segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2245,2249,"/**
* Initializes a weak key dummy value segment.
* @param map internal map instance
* @param initialCapacity initial capacity of the segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2135,2140,"/**
* Constructs a WeakKeyStrongValueSegment with the given internal map and capacity.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2175,2179,"/**
* Constructs a WeakKeyWeakValueSegment for the given internal map.
* @param map internal map to associate with this segment
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getEntry(java.lang.Object,int)",1413,1433,"/**
* Searches for an entry matching the given key and hash.
* @param key object to search for
* @param hash hash value of the key
* @return Entry object if found, or null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,preWriteCleanup,com.google.common.collect.MapMakerInternalMap$Segment:preWriteCleanup(),1998,2001,"/**
* Invokes m1() function.
*/","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runCleanup(),2003,2005,"/**
* Clears function mask flag. 
* Calls function m1(). 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap:clear(),2489,2494,"/**
* Recursively invokes m1() on each Segment in the collection.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",640,646,"/**
* Computes a dummy value for the given key and segment.
* @param segment StrongKeyDummyValueSegment object
* @param entry StrongKeyDummyValueEntry object to compute mask for
* @param newNext Optional next entry in linked list
* @return computed StrongKeyDummyValueEntry object",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",448,457,"/**
* Creates a new entry with the same value and updated next pointer.
* @param segment associated segment
* @param entry existing entry to modify
* @param newNext new next entry (may be null)
* @return modified StrongKeyStrongValueEntry object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",545,556,"/**
* Updates the given segment's entry with a new next entry.
* @param segment StrongKeyWeakValueSegment to update
* @param entry current entry to replace
* @param newNext new entry to set as next (may be null)
* @return updated StrongKeyWeakValueEntry or null if removed",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",900,904,"/**
* Constructs a new Weak Key Weak Value Entry with the given parameters.
* @param queue reference queue for garbage collection
* @param key weak key value
* @param hash key hash code
* @param next next entry in linked list
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedAsMapView:comparator(),995,998,"/**
* Returns a comparator delegate to the comparator returned by m1().
* @return comparator object or null if m1 returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$SortedAsMapView:keySet(),1000,1003,"/**
* Computes and returns the set of flags (K) based on internal computations.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$SortedAsMapView:firstKey(),1020,1024,"/**
* Calculates and returns a mask value based on nested function calls.
* @return Mask value of type K or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$SortedAsMapView:lastKey(),1026,1030,"/**
 * Returns a mask value using nested function calls.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:last(),3174,3178,"/**
* Returns the function mask value using m1().",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:first(),3168,3172,"/**
 * Returns a function mask of type K. 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$KeySet:remove(java.lang.Object),3953,3960,"/**
* Calls secondary method m2() on matching object, returning result of primary method m1().
* @param o the object to be checked
* @return true if m1() returns true and m2().m3() is called; otherwise, false
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedKeySet:comparator(),3987,3990,"/**
* Returns a comparator based on the result of m1(), which itself returns a comparable object.
* @return A Comparator instance or null if m1() returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$SortedKeySet:first(),4007,4011,"/**
* Returns a mask value by invoking nested methods m1 and m2.
* @return Mask value of type K 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$SortedKeySet:last(),4013,4017,"/**
* Returns a mask value by invoking m1() and then m2().
* @return The final result of the chain, type K.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesOnlyOnLeft,com.google.common.collect.SortedMapDifference:entriesOnlyOnLeft(),33,34,"/**
* Returns a sorted map of function masks. 
* @return Map of K and V types, sorted by key.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesDiffering,com.google.common.collect.SortedMapDifference:entriesDiffering(),42,43,"/**
* Returns a sorted map of key-value differences.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingIterator,com.google.common.collect.Maps$NavigableKeySet:descendingIterator(),4067,4070,"/**
* Returns an iterator over key values with specific mask.
* @return Iterator of K type keys
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",4081,4084,"/**
* Returns a sorted set of elements in the range [fromElement, toElement].
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (inclusive)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object),4091,4094,"/**
* Returns a sorted set of elements from {@code toElement} onwards.
* @param toElement element to start the set from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object),4101,4104,"/**
* Returns a sorted set of elements starting from the specified 'fromElement'.
* @param fromElement the starting element in the set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingKey(java.lang.Object),2280,2283,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key unique identifier of type K
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingKeySet(),2285,2288,"/**
 * Delegates to m1() and returns its result as a NavigableSet.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorKey(java.lang.Object),2305,2308,"/**
 * Calls m2() on the result of m1(), passing the provided key.
 * @param key unique identifier to search for in subsequent m2() call
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherKey(java.lang.Object),2325,2328,"/**
 * Calls secondary operation on primary result using provided key. 
 * @param key The key to pass to secondary operation.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerKey(java.lang.Object),2340,2343,"/**
* Calls m1() and delegates to its m2() method with provided key.
* @param key input key for m2() method call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:navigableKeySet(),2345,2348,"/**
* Calls and returns the result of m2() from the set returned by m1().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,comparator,com.google.common.collect.ForwardingSortedMap:comparator(),68,71,"/**
* Returns a comparator delegate by delegating to the comparator returned by m1().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,firstKey,com.google.common.collect.ForwardingSortedMap:firstKey(),73,77,"/**
* Calls m1() to fetch intermediate result and then invokes its m2() method. 
* @return Result of m1().m2(), or null if m1() returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,headMap,com.google.common.collect.ForwardingSortedMap:headMap(java.lang.Object),79,82,"/**
* Calls M1 and delegates to its M2 method with the provided key.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,lastKey,com.google.common.collect.ForwardingSortedMap:lastKey(),84,88,"/**
* Calls M1 to retrieve a result and then calls its M2 method. 
* @return Result of M2 on the result from M1, or null if M1 returns null 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,subMap,"com.google.common.collect.ForwardingSortedMap:subMap(java.lang.Object,java.lang.Object)",90,93,"/**
* Delegates range-based key retrieval to underlying map.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
* @return SortedMap of keys in the specified range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,tailMap,com.google.common.collect.ForwardingSortedMap:tailMap(java.lang.Object),95,98,"/**
* Calls m1() and delegates to its m2() method with provided fromKey.
* @param fromKey key for filtering results in the returned map
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,delegate,com.google.common.collect.ForwardingMap:delegate(),64,65,"/**
* Returns a map of function masks. 
* @return A map where keys are K and values are V.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doDifference,"com.google.common.collect.Maps:doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",575,607,"/**
* Merges two maps into three result maps: common values on both, unique values on left, and unique values on right.
* @param left source map
* @param right target map
* @param valueEquivalence equivalence function for values
* @param onlyOnLeft map of keys with only values in left map
* @param onlyOnRight map of keys with only values in right map
* @param onBoth map of common key-value pairs
* @param differences map of differing key-value pairs",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,"com.google.common.eventbus.EventBus:<init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler)",190,199,"/**
 * Constructs an EventBus instance with the specified identifier, executor, dispatcher, and exception handler.
 * @param identifier unique event bus identifier
 * @param executor thread execution context
 * @param dispatcher event dispatching strategy
 * @param exceptionHandler error handling callback
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,create,com.google.common.collect.TreeRangeMap:create(),63,65,"/**
* Creates an empty TreeRangeMap instance. 
* @return a new, empty TreeRangeMap object
*/","Returns a new, empty {@link TreeRangeMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,entryPredicate,com.google.common.collect.FilteredKeyMultimap:entryPredicate(),55,58,"/**
* Returns a predicate that filters entries based on key existence.
* @return Predicate filtering by entry presence or absence
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMin,"com.google.common.collect.MinMaxPriorityQueue$Heap:findMin(int,int)",601,614,"/**
* Finds the minimum index satisfying FUNC_MASK conditions.
* @param index starting index
* @param len length of search range
* @return minimum index or -1 if not found","* Returns the index of minimum value between {@code index} and {@code index + len}, or {@code
     * -1} if {@code index} is greater than {@code size}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getMaxElementIndex,com.google.common.collect.MinMaxPriorityQueue:getMaxElementIndex(),324,335,"/**
* Calculates the function mask based on size.
* @return integer value indicating function type
*/",Returns the index of the max element.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekFirst,com.google.common.collect.MinMaxPriorityQueue:peekFirst(),360,362,"/**
* Returns functional mask value using m1() function.
* @return Functional mask as type E or null if unavailable.","* Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the
   * queue is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUpAlternatingLevels,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUpAlternatingLevels(int,java.lang.Object)",582,595,"/**
* Reorders elements in the queue based on custom ordering.
* @param index current position to reorder from
* @param x element to insert and reorder around
* @return final reordered index
*/","* Bubbles a value from {@code index} up the levels of this heap, and returns the index the
     * element ended up at.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,verifyIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:verifyIndex(int),730,744,"/**
* Checks if a given index does not match any pattern.
* @param i index to check
* @return true if no matching pattern, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,hasNext,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:hasNext(),781,786,"/**
* Evaluates condition based on cursor position and ForgetMeNot status.
*@return true if next cursor is before m3 or ForgetMeNot exists and hasn't been marked.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,next,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:next(),788,805,"/**
* Advances the iterator and returns the next element, or throws an exception if exhausted.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build(com.google.common.collect.Multimap),479,483,"/**
* Returns a SortedSetMultimap instance for the given Multimap.
* @param multimap input multimap to convert
* @return SortedSetMultimap or null if not supported
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableListMultimap:get(java.lang.Object),804,807,"/**
* Retrieves list of V objects via nested calls to m1 and m2.
* @param key unique identifier (K type)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:get(java.lang.Object),834,841,"/**
* Retrieves a set of values associated with the given key from the underlying data structure.
* @param key unique identifier for retrieval
* @return Set of V objects or empty set if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:delegate(),868,871,"/**
* Delegates to superclass to fetch multimap. 
* @return sorted set multimap of K and V elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingIterator,com.google.common.collect.AbstractSortedMultiset:descendingIterator(),116,118,"/**
* Returns an iterator of elements based on multiset operations.
* @return Iterator of elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,iterator,com.google.common.collect.ConcurrentHashMultiset:iterator(),553,556,"/**
* Returns an iterator over unique elements in this multiset.
* @return Iterator of unique elements or null if empty.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,iterator,com.google.common.collect.DescendingMultiset:iterator(),143,146,"/**
* Returns an iterator over unique elements in this multiset.
*@return Iterator over unique elements of type E 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,iterator,com.google.common.collect.EnumMultiset:iterator(),293,296,"/**
* Returns an iterator over unique elements in this set.
* @return iterator over unique elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardIterator,com.google.common.collect.ForwardingMultiset:standardIterator(),263,265,"/**
* Returns an iterator over all elements in this multiset.
*/","* A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link
   * #remove(Object)}. If you override either of these methods, you may wish to override {@link
   * #iterator} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$ViewMultiset:iterator(),1183,1186,"/**
* Returns an iterator over elements of type E.
* @return iterator instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,iterator,com.google.common.collect.TreeMultiset:iterator(),542,545,"/**
* Returns an iterator over unique elements in this multiset.
* @return Iterator over unique elements of type E
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,elementSet,com.google.common.collect.UnmodifiableSortedMultiset:elementSet(),59,62,"/**
* Delegates to superclass to retrieve navigable set of elements.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,comparator,com.google.common.collect.UnmodifiableSortedMultiset:comparator(),49,52,"/**
* Returns a comparator instance by delegating to another comparator.
* @return Comparator instance or null if delegate is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,firstEntry,com.google.common.collect.UnmodifiableSortedMultiset:firstEntry(),77,80,"/**
* Calls nested function m1 to fetch an entry, then calls its m2 method.
* @return Result of calling m2 on the returned entry or null if not found.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,lastEntry,com.google.common.collect.UnmodifiableSortedMultiset:lastEntry(),82,85,"/**
* Delegates to {@link #m1()} and forwards its result.
* @return null if {@code m1()} returns null, otherwise the result of calling {@code m1().m2()}
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,count,com.google.common.collect.ForwardingMultiset:count(java.lang.Object),59,62,"/**
* Calls nested m2() method with provided element.
* @param element object to be processed by m1() and then this method
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,add,"com.google.common.collect.ForwardingMultiset:add(java.lang.Object,int)",64,68,"/**
* Calls m1() to perform operation on given element and occurrences.
* @param element object to operate on (null allowed)
* @param occurrences number of operations
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,remove,"com.google.common.collect.ForwardingMultiset:remove(java.lang.Object,int)",70,74,"/**
* Calls secondary operation on underlying data structure.
* @param element object to pass to secondary operation
* @param occurrences number of times to perform operation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,elementSet,com.google.common.collect.ForwardingMultiset:elementSet(),76,79,"/**
* Calls m1(), then calls m2() on its result.
* @return a Set of type E from m1()'s m2() result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,entrySet,com.google.common.collect.ForwardingMultiset:entrySet(),81,84,"/**
* Delegates to m1() and returns its result as a set of entries.
* @return Set of Entry objects containing data from m1()",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,equals,com.google.common.collect.ForwardingMultiset:equals(java.lang.Object),86,89,"/**
* Checks if the provided object is the same instance or recursively calls m2 on its parent. 
* @param object the object to compare with this instance 
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,hashCode,com.google.common.collect.ForwardingMultiset:hashCode(),91,94,"/**
* Calls and returns result of m2() from UserProfile object fetched by m1().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int)",96,100,"/**
* Calls m1() and delegates execution of m2() to it.
* @param element non-null element object
* @param count count value passed to m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int,int)",102,106,"/**
* Delegates M2 operation to underlying model.
* @param element object to operate on
* @param oldCount previous count value
* @param newCount updated count value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(java.lang.Object[]),199,229,"/**
* Resizes and initializes the given array to match a calculated internal size.
* @param other initial array to be modified
* @return the resized array with calculated values or original array if not changed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object,java.lang.Object[])",89,94,"/**
* Merges an element into a sorted array while maintaining the sorted order.
* @param element the new element to insert
* @param array the pre-sorted array
* @return the updated array with the element inserted at its correct position
*/","* Returns a new array that prepends {@code element} to {@code array}.
   *
   * @param element the element to prepend to the front of {@code array}
   * @param array the array of elements to append
   * @return an array whose size is one larger than {@code array}, with {@code element} occupying
   *     the first position, and the elements of {@code array} occupying the remaining elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection,java.lang.Object[])",131,142,"/**
* Converts collection to specified array type.
* @param c Collection to convert
* @param array Array of type T, must be large enough to hold all elements
* @return Array of type T containing converted elements, or null if not found
*/","* Returns an array containing all of the elements in the specified collection; the runtime type
   * of the returned array is that of the specified array. If the collection fits in the specified
   * array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the
   * specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.
   *
   * <p>This method returns the elements in the order they are returned by the collection's
   * iterator.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements
   * @param array the array in which to place the collection elements
   * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of
   *     the runtime type of every element in the specified collection",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(),231,234,"/**
* Returns an array of function masks.
* @return Array of function mask values or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(),987,998,"/**
* Returns an array of function masks.
* @return Array of function mask objects or null if failed to retrieve",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.lang.Iterable),587,590,"/**
* Recursively unwraps and returns the first element of an iterable.
* @param iterable input collection to unwrap
* @return first element of type E, or null if empty
*/","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.min(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied minimum element is returned.
   *
   * @param iterable the iterable whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.util.Iterator),83,86,"/**
* Returns masked data of type E by iterating over the input iterator.
* @param iterator Iterator containing elements to be processed
* @return Masked data object of type E
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.lang.Iterable),678,681,"/**
* Recursively applies transformation from Iterable to target type E.
* @param iterable input collection of elements to transform
* @return transformed result or null if iterable is empty
*/","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.max(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied maximum element is returned.
   *
   * @param iterable the iterable whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.util.Iterator),62,65,"/**
* Applies mask operation using specified iterator.
* @param iterator iterator over elements of type E
* @return result after applying mask, cast to E
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFutureState.java,getOrInitSeenExceptions,com.google.common.util.concurrent.AggregateFutureState:getOrInitSeenExceptions(),84,141,"/**
* Returns the set of exceptions that have been masked.
* @return Set<Throwable> containing masked exceptions
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,toString,com.google.common.collect.ContiguousSet:toString(),250,253,"/**
* Calls inner m2() method via outer m1() method.
* @return result of m2() method call on the returned object from m1()
*/","Returns a shorthand representation of the contents such as {@code ""[1..100]""}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:entryIterator(),362,400,"/**
* Iterates over entries of ranges by lower bound window.
* @return Iterator of Entries containing Cut and Range objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,from,com.google.common.collect.GeneralRange:from(com.google.common.collect.Range),42,57,"/**
* Creates a GeneralRange instance from the given Range.
* @param range input range to transform
*/",Converts a Range to a GeneralRange.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps:subMap(java.util.NavigableMap,com.google.common.collect.Range)",4496,4519,"/**
* Trims and navigates the specified map within the given range.
* @param map NavigableMap to trim
* @param range Range to apply
* @return trimmed NavigableMap or null if not found
*/","* Returns a view of the portion of {@code map} whose keys are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link
   * NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link
   * NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object,
   * boolean) headMap()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets:subSet(java.util.NavigableSet,com.google.common.collect.Range)",2300,2323,"/**
* Retrieves a subset of elements from the navigable set within a given range.
* @param set input set
* @param range query bounds
* @return filtered NavigableSet or result of m14() if no filtering is performed
*/","* Returns a view of the portion of {@code set} whose elements are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link
   * NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link
   * NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object,
   * boolean) headSet()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap:get(java.lang.Object),148,151,"/**
* Retrieves value associated with the given key from the internal map.
* @param key the object to look up in the map (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,com.google.common.collect.RegularImmutableMap:get(java.lang.Object),260,263,"/**
 * Convenience wrapper to fetch value from the specified backing data structure.
 * @param key object containing key elements
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,contains,com.google.common.collect.RegularImmutableSortedSet:contains(java.lang.Object),95,102,"/**
* Checks if object is valid and has a non-negative mask value.
* @param o the object to check
* @return true if valid, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,get,com.google.common.collect.ImmutableSortedMap:get(java.lang.Object),791,795,"/**
* Retrieves a value from the list by its corresponding key.
* @param key object to search for
* @return V object if found, or null otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,count,com.google.common.collect.RegularImmutableSortedMultiset:count(java.lang.Object),89,93,"/**
* Calculates mask value based on element presence.
* @param element object to check for presence in set
* @return non-negative integer or 0 if absent
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,lower,com.google.common.collect.ForwardingNavigableSet:lower(java.lang.Object),61,64,"/**
 * Calls m1() and delegates to its m2(E) method with provided input.
 * @param e input object of type E (may be null)
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,floor,com.google.common.collect.ForwardingNavigableSet:floor(java.lang.Object),75,78,"/**
* Calls the second method on the result of calling the first method.
* @param e input object to pass to the second method
* @return result of the second method or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,ceiling,com.google.common.collect.ForwardingNavigableSet:ceiling(java.lang.Object),89,92,"/**
* Calls nested operation m2 on result of m1 with provided input. 
* @param e input object to be processed by m2 
* @return result of m2 or null if m1 returns null",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,higher,com.google.common.collect.ForwardingNavigableSet:higher(java.lang.Object),103,106,"/**
* Calls m1() to fetch an object and then invokes its m2(E) method.
*@param e object of type E to be passed to m2(E)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollFirst,com.google.common.collect.ForwardingNavigableSet:pollFirst(),117,120,"/**
* Delegate call to m1(), returning its result's m2() value.
* @return result of m1().m2() or null if either returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollLast,com.google.common.collect.ForwardingNavigableSet:pollLast(),131,134,"/**
* Calls the secondary operation on the result of primary operation.
* @return result of secondary operation or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.ForwardingNavigableSet:descendingSet(),155,158,"/**
* Calls m1() to retrieve a navigable set and returns its m2() result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingIterator,com.google.common.collect.ForwardingNavigableSet:descendingIterator(),176,179,"/**
* Delegate iterator retrieval to wrapped object's m1().m2().
* @return Iterator of type E or null if underlying object is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.ForwardingNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
* Calls the overloaded method m2 on a precomputed result.
* @param fromElement lower bound element
* @param fromInclusive whether to include the lower bound
* @param toElement upper bound element
* @param toInclusive whether to include the upper bound
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.ForwardingNavigableSet:headSet(java.lang.Object,boolean)",215,218,"/**
* Calls m1() and delegates to its m2() method with the given parameters.
* @param toElement element to search for
* @param inclusive whether to include the target in the result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.ForwardingNavigableSet:tailSet(java.lang.Object,boolean)",229,232,"/**
* Calls m1() and delegates to its m2() method.
* @param fromElement element to start searching from
* @param inclusive whether to include the specified element in the result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,delegate,com.google.common.collect.ForwardingSortedSet:delegate(),67,68,"/**
* Returns a sorted set of function masks. 
* This is an abstract method that must be implemented by subclasses.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,createElementSet,com.google.common.collect.AbstractSortedMultiset:createElementSet(),56,59,"/**
* Returns a navigable set of elements based on the current collection's mask.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,elementSet,com.google.common.collect.DescendingMultiset:elementSet(),52,59,"/**
* Returns a navigable set of elements, lazily creating one if not already present.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingSet,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingSet(),123,126,"/**
* Creates and returns a navigable set instance.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",143,154,"/**
* Creates a sorted set of elements within the specified range.
* @param fromElement starting element (inclusive or exclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive or exclusive)
* @param toInclusive whether end is inclusive
* @return NavigableSet containing elements in range
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:headSet(java.lang.Object,boolean)",156,160,"/**
* Creates a navigable set from an element with optional bounds.
* @param toElement the element to include
* @param inclusive whether the bound is inclusive
* @return a NavigableSet containing the specified element(s)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:tailSet(java.lang.Object,boolean)",162,166,"/**
* Creates a navigable set of elements with the specified bounds.
* @param fromElement starting element or null for no lower bound
* @param inclusive whether to include the start element in the set",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnKeySet:size(),693,696,"/**
 * Recursively calculates value using m1() result.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,maintainEmptyInvariant,com.google.common.collect.StandardTable$Row:maintainEmptyInvariant(),337,343,"/**
* Clears and updates backing map when backing row map is valid.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Row:containsKey(java.lang.Object),345,349,"/**
* Checks if a given key exists in the backing row map.
* @param key object to search for
* @return true if key is found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Row:get(java.lang.Object),351,355,"/**
* Retrieves value from backing map using provided key.
* @param key optional object identifier
* @return V object or null if not found or invalid input
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$Row:size(),387,391,"/**
* Recursively evaluates m2() value from backing row map.
* @return result of m2() or 0 if backing row map is null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entryIterator,com.google.common.collect.StandardTable$Row:entryIterator(),393,417,"/**
* Returns an iterator over the backing map's entries.
* @return Iterator of map entries or empty iterator if null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entrySpliterator,com.google.common.collect.StandardTable$Row:entrySpliterator(),419,426,"/**
* Returns a spliterator for the backing map's entries.
* @return Spliterator of Entry objects or empty iterator if null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.HashBasedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
* Performs multi-keyed operation and returns result.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value new value to be set
* @return V object or null if failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Column:put(java.lang.Object,java.lang.Object)",466,469,"/**
* Calls standard table's m1 method with adjusted parameters.
* @param key unique data identifier
* @param value associated value to store
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Row:put(java.lang.Object,java.lang.Object)",357,365,"/**
* Recursively resolves a table entry.
* @param key unique table row identifier
* @param value associated table entry value
* @return resolved table entry value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.HashBasedTable:rowMap(),802,806,"/**
* Returns a map of rows to columns to values.
* @return a map of R to maps of C to V, or null if not initialized
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.StandardRowSortedTable:rowMap(),85,88,"/**
* Invokes superclass implementation of m1(), returning a sorted map of maps.
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.StandardTable:rowKeySet(),665,668,"/**
* Returns a set of R objects based on m1 and m2 methods.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedAsMap:containsValue(java.lang.Object),1430,1436,"/**
* Applies mask function to an object.
* @param o object to be masked
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedAsMap:entrySet(),1410,1418,"/**
* Returns a synchronized set of map entries, lazily initializing it if necessary.
* @return Set of synchronized map entries or null if initialization fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:<init>(java.util.NavigableSet,java.lang.Object)",1465,1467,"/**
* Constructs a synchronized navigable set view on top of the specified backing set.
* @param delegate underlying navigable set
* @param mutex synchronization object or null for no synchronization
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSet,"com.google.common.collect.Synchronized:sortedSet(java.util.SortedSet,java.lang.Object)",302,305,"/**
* Creates a synchronized sorted set from the given set.
* @param set input sorted set
* @param mutex synchronization object (or null for no locking)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,com.google.common.collect.Synchronized$SynchronizedCollection:add(java.lang.Object),137,142,"/**
* Delegates user profile update to underlying implementation.
* @param e UserProfile object to be updated
* @return true if update was successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,com.google.common.collect.Synchronized$SynchronizedCollection:addAll(java.util.Collection),144,149,"/**
* Delegates collection operation to instance of type E.
* @param c collection of elements to operate on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedCollection:clear(),151,156,"/**
 * Invokes m2() on the result of m1(), synchronizing access to shared resources.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedCollection:contains(java.lang.Object),158,163,"/**
* Calls m1() and delegates to its m2() method with provided object.
* @param o object to pass to m2() in m1()
* @return result of m2() in m1() or false if an error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedCollection:containsAll(java.util.Collection),165,170,"/**
* Calls m1() and delegates to its m2() method with provided collection.
* @param c input collection to be processed by m1()'s m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedCollection:isEmpty(),172,177,"/**
* Recursively calls m1()'s implementation of m2(), 
* synchronizing access to shared resources.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedCollection:iterator(),179,182,"/**
* Delegates to another iterator, returning its result.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,spliterator,com.google.common.collect.Synchronized$SynchronizedCollection:spliterator(),184,189,"/**
* Delegates m2() call to synchronized m1(), ensuring thread safety.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,stream,com.google.common.collect.Synchronized$SynchronizedCollection:stream(),191,196,"/**
* Delegates to m1(), synchronizing on mutex.
* @return Stream of E objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,parallelStream,com.google.common.collect.Synchronized$SynchronizedCollection:parallelStream(),198,203,"/**
* Recursively fetches elements from another stream, synchronizing access.
* @return A new stream containing elements from this and that stream
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedCollection:forEach(java.util.function.Consumer),205,210,"/**
* Delegates execution of consumer-style action to the wrapped object.
* @param action Consumer function to be executed on the wrapped object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedCollection:remove(java.lang.Object),212,217,"/**
* Recursively calls m2 on the result of m1.
* @param o object to pass to recursive call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedCollection:removeAll(java.util.Collection),219,224,"/**
* Calls m1() and delegates to its m2() method with collection parameter.
* @param c input collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedCollection:retainAll(java.util.Collection),226,231,"/**
* Calls m1() and delegates execution of m2() on Collection c.
* @param c collection to process
* @return result of executing m2() on the provided Collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeIf,com.google.common.collect.Synchronized$SynchronizedCollection:removeIf(java.util.function.Predicate),233,238,"/**
* Invokes secondary filtering operation on cached intermediate result.
* @param filter predicate function to apply
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedCollection:size(),240,245,"/**
* Recursively calls m1() and returns its result.
* @return result of m1().m2() or an error code if failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(),247,252,"/**
* Recursively fetches and returns an array of objects from m1.
* @return Array of objects or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(java.lang.Object[]),254,260,"/**
* Invokes nested method m2 on result of m1, synchronizing access to mutex.
* @param a array of type T
* @return array of type T or null if m1 returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedList:delegate(),375,378,"/**
* Calls superclass implementation of m1 and returns result as List<E>.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultiset:delegate(),506,509,"/**
* Calls superclass implementation of Multiset creation.
* @return Multiset instance with default settings
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedQueue:delegate(),1852,1855,"/**
* Delegates to superclass implementation and returns Queue of type E.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSet:delegate(),277,280,"/**
* Calls superclass's implementation of m1 and returns its result as a Set.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedEntry:equals(java.lang.Object),1803,1808,"/**
* Calls m1() and delegates execution to its m2() method.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedEntry:hashCode(),1810,1815,"/**
* Recursively calls m1(), synchronizing on mutex.
* @return result of m1().m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getKey,com.google.common.collect.Synchronized$SynchronizedEntry:getKey(),1817,1822,"/**
* Recursively calls m1(), synchronizing on mutex to ensure thread safety.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getValue,com.google.common.collect.Synchronized$SynchronizedEntry:getValue(),1824,1829,"/**
* Recursively calls m1() and returns its result.
* @return Result of m1().m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setValue,com.google.common.collect.Synchronized$SynchronizedEntry:setValue(java.lang.Object),1831,1836,"/**
* Calls m1() with synchronized access to mutex and delegates to its m2() method.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedBiMap:delegate(),1358,1361,"/**
* Returns a BiMap instance by delegating to superclass implementation.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMap:clear(),1078,1083,"/**
* Calls m2() on an instance of m1(), synchronizing access to ensure thread safety. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMap:containsKey(java.lang.Object),1085,1090,"/**
* Calls M1's m2 method with provided key, synchronizing on mutex.
* @param key object to pass to m2
* @return result of m2 call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMap:containsValue(java.lang.Object),1092,1097,"/**
* Calls m1() and delegates to its m2() with given value.
* @param value object to pass to m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMap:entrySet(),1099,1107,"/**
* Returns a synchronized set of map entries.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMap:forEach(java.util.function.BiConsumer),1109,1114,"/**
* Executes an action on each entry in the map.
*@param action BiConsumer to perform on each key-value pair
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMap:get(java.lang.Object),1116,1121,"/**
* Calls m2 on the result of m1(), synchronizing access to mutex. 
* @param key object to pass to m2() method
* @return V object or null if not found, may be null",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getOrDefault,"com.google.common.collect.Synchronized$SynchronizedMap:getOrDefault(java.lang.Object,java.lang.Object)",1123,1128,"/**
* Synchronously calls m2 on cached result, using mutex for thread safety.
* @param key object to search for
* @param defaultValue default value to return if not found
* @return V object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMap:isEmpty(),1130,1135,"/**
* Recursively calls m2() on the result of m1(), synchronized by mutex.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMap:keySet(),1137,1145,"/**
* Retrieves and caches a set of keys from a synchronized operation.
* @return Set of K objects, or null if not yet computed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMap:put(java.lang.Object,java.lang.Object)",1147,1152,"/**
* Calls M1's m2() method with provided key and value.
* @param key the key to be used in the call
* @param value the value to be used in the call
* @return result of M1's m2() method or null if not found",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:putIfAbsent(java.lang.Object,java.lang.Object)",1154,1159,"/**
* Synchronously calls the inner map's m2 function with provided key and value.
* @param key unique identifier for the map entry
* @param value associated value for the map entry
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",1161,1166,"/**
* Calls m2 on the cached object.
* @param key unique cache key
* @param oldValue previous value
* @param newValue new value to update with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object)",1168,1173,"/**
* Synchronized wrapper calling m1().m2() with provided key and value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfAbsent(java.lang.Object,java.util.function.Function)",1175,1180,"/**
* Calls the secondary map operation on a wrapped cache.
* @param key unique key
* @param mappingFunction transformation function for result value type
* @return mapped value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfPresent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",1182,1189,"/**
* Performs in-memory operation using remapping function.
* @param key unique data identifier
* @param remappingFunction function to transform existing value
* @return transformed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,compute,"com.google.common.collect.Synchronized$SynchronizedMap:compute(java.lang.Object,java.util.function.BiFunction)",1191,1198,"/**
* Synchronized execution of the secondary map operation.
* @param key key to be processed
* @param remappingFunction function to apply to each entry
* @return result of the secondary map operation or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,merge,"com.google.common.collect.Synchronized$SynchronizedMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",1200,1210,"/**
* Synchronously invokes the M2 method on a shared cache instance.
* @param key unique cache key
* @param value associated value to be cached
* @param remappingFunction function to transform cached values
* @return transformed value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMap:putAll(java.util.Map),1212,1217,"/**
* Calls m2 on the internal map, synchronizing access to prevent concurrent modifications. 
* @param map input map with key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedMap:replaceAll(java.util.function.BiFunction),1219,1224,"/**
* Invokes given function on key-value pair in map.
* @param function BiFunction to apply
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object),1226,1231,"/**
* Delegates to another object's m2() method while synchronizing on mutex.
* @param key the key to pass to the delegate object
* @return result of the delegate object's m2() method or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object,java.lang.Object)",1233,1238,"/**
* Calls nested map's put operation with synchronization. 
* @param key  object to be stored in the map
* @param value object associated with the key
* @return boolean result of the put operation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMap:size(),1240,1245,"/**
* Recursively calls m1(), synchronizing on mutex to ensure thread-safety.
* @return result of m1().m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMap:values(),1247,1255,"/**
* Retrieves cached collection of V objects, or computes and caches it via m3.
* @return Collection of V objects
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMap:equals(java.lang.Object),1257,1265,"/**
* Recursively checks equality with this object, using synchronization. 
* @param o the object to compare with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMap:hashCode(),1267,1272,"/**
* Recursively calls m1(), synchronizing access to shared resources.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedMap:delegate(),1289,1292,"/**
* Calls superclass implementation of m1 and returns its result.
* @return SortedMap instance as per superclass's m1 implementation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedListMultimap:delegate(),797,800,"/**
* Returns a list multimap instance with default settings.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMultimap:size(),612,617,"/**
* Recursively calls m1() and returns its result.
* @return result of recursive call to m1().m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMultimap:isEmpty(),619,624,"/**
* Recursively calls m1's m2 and returns result.
* @return true if recursive call is successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMultimap:containsKey(java.lang.Object),626,631,"/**
* Delegates call to underlying data structure's m2 method.
* @param key object to search in data structure
* @return true if key found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMultimap:containsValue(java.lang.Object),633,638,"/**
* Delegates m2 call to m1 instance.
* @param value nullable object to pass to m2
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsEntry,"com.google.common.collect.Synchronized$SynchronizedMultimap:containsEntry(java.lang.Object,java.lang.Object)",640,645,"/**
* Calls m1() and delegates to its m2() implementation.
* @param key nullable object key
* @param value nullable object value
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMultimap:get(java.lang.Object),647,652,"/**
* Recursively fetches collection of type V associated with given key.
* @param key unique identifier for the collection
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMultimap:put(java.lang.Object,java.lang.Object)",654,659,"/**
* Calls secondary map operation on cached result.
* @param key unique identifier for the cache
* @param value associated data to store in the cache
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,"com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(java.lang.Object,java.lang.Iterable)",661,666,"/**
* Calls secondary map operation on underlying data structure.
* @param key arbitrary key value
* @param values iterable of values to process
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(com.google.common.collect.Multimap),668,673,"/**
* Delegates multimap operation to underlying map, synchronizing access.
* @param multimap Multimap instance to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",675,680,"/**
* Delegates synchronization of M1 operation to this method.
* @param key unique identifier
* @param values collection of values
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultimap:remove(java.lang.Object,java.lang.Object)",682,687,"/**
* Calls M1's m2() with optional key and value parameters.
* @param key optional key object
* @param value optional value object
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedMultimap:removeAll(java.lang.Object),689,694,"/**
* Delegates to m1() with synchronization on mutex.
* @param key object to search in m1()'s result
* @return Collection of V objects or empty collection if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMultimap:clear(),696,701,"/**
* Calls m1() and then m2() on its result, synchronizing on mutex.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMultimap:keySet(),703,711,"/**
* Returns a set of keys, synchronizing and computing it if necessary.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMultimap:values(),713,721,"/**
* Retrieves and caches a collection of V objects, synchronizing on the mutex. 
* @return Collection of V objects or null if not initialized.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedMultimap:entries(),723,731,"/**
* Returns a collection of key-value pairs.
* @return Collection of Map.Entry objects or null if initialization failed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMultimap:forEach(java.util.function.BiConsumer),733,738,"/**
* Invokes consumer on mapped values in parallel.
*@param action BiConsumer to process key-value pairs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultimap:equals(java.lang.Object),760,770,"/**
* Recursively checks equality with the current object, using synchronization.
* @param o object to compare with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultimap:hashCode(),772,777,"/**
* Recursively calls m1(), synchronizing on mutex to ensure thread safety.
* @return result of m1().m2()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSetMultimap:delegate(),842,845,"/**
* Returns a SetMultimap instance.
* @return SetMultimap object (cast from superclass result)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,"com.google.common.collect.Synchronized$SynchronizedTable:contains(java.lang.Object,java.lang.Object)",2052,2057,"/**
* Calls nested map's m2 method with synchronization.
* @param rowKey  key for row-level operation
* @param columnKey key for column-level operation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsRow,com.google.common.collect.Synchronized$SynchronizedTable:containsRow(java.lang.Object),2059,2064,"/**
* Delegates the row key lookup to an underlying implementation.
* @param rowKey object reference or null for default behavior
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsColumn,com.google.common.collect.Synchronized$SynchronizedTable:containsColumn(java.lang.Object),2066,2071,"/**
* Calls second-level cache operation on underlying data source.
* @param columnKey key value to look up in cache
* @return true if cached, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedTable:containsValue(java.lang.Object),2073,2078,"/**
* Calls m2 on the result of m1, synchronizing access to shared resources. 
* @param value input object for m2 method call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,"com.google.common.collect.Synchronized$SynchronizedTable:get(java.lang.Object,java.lang.Object)",2080,2085,"/**
* Calls underlying M1 instance's m2 method with synchronization.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return Value object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedTable:isEmpty(),2087,2092,"/**
* Recursively calls m2 on result of m1, synchronizing access with mutex. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedTable:size(),2094,2099,"/**
* Recursively calls m1(), synchronizing on mutex, and returns result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedTable:clear(),2101,2106,"/**
* Calls m2 on an instance obtained from m1(), synchronized on mutex.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",2108,2116,"/**
* Calls underlying method to update a value in the data structure.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value new value to store
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedTable:putAll(com.google.common.collect.Table),2118,2123,"/**
* Invokes nested operation on table while synchronizing with mutex.
* @param table Table object to perform operation on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedTable:remove(java.lang.Object,java.lang.Object)",2125,2130,"/**
* Wraps and synchronizes calls to m2() on the underlying data structure.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return V value or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,cellSet,com.google.common.collect.Synchronized$SynchronizedTable:cellSet(),2146,2151,"/**
* Recursively fetches cell set using m1 and m3 methods.
* @return Set of cells or empty set if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowKeySet,com.google.common.collect.Synchronized$SynchronizedTable:rowKeySet(),2153,2158,"/**
* Recursively fetches and aggregates data from multiple sources.
* @return A set of R objects representing the aggregated result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnKeySet,com.google.common.collect.Synchronized$SynchronizedTable:columnKeySet(),2160,2165,"/**
* Recursively fetches and returns a set of elements C.
* @return a set of elements C or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedTable:values(),2167,2172,"/**
* Recursively fetches collection V from secondary data source.
* @return Collection V or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedTable:hashCode(),2188,2193,"/**
* Recursively calls m1(), synchronizing on mutex to ensure thread safety.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedTable:equals(java.lang.Object),2195,2203,"/**
* Recursively checks equality with another object, synchronizing on mutex.
* @param obj the object to compare with
* @return true if equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,deque,"com.google.common.collect.Synchronized:deque(java.util.Deque,java.lang.Object)",1895,1897,"/**
* Creates a synchronized deque from an existing one.
* @param deque original deque
* @param mutex synchronization mutex (or null for no sync)
* @return synchronized Deque object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedQueue,com.google.common.collect.Queues:synchronizedQueue(java.util.Queue),456,459,"/**
* Returns synchronized version of input queue.
* @param queue original queue to synchronize
*/","* Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing queue is accomplished
   * through the returned queue.
   *
   * <p>It is imperative that the user manually synchronize on the returned queue when accessing the
   * queue's iterator:
   *
   * {@snippet :
   * Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create());
   * ...
   * queue.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (queue) {  // Must synchronize on queue!
   *   Iterator<E> i = queue.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned queue will be serializable if the specified queue is serializable.
   *
   * @param queue the queue to be wrapped in a synchronized view
   * @return a synchronized view of the specified queue
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,list,"com.google.common.collect.Synchronized:list(java.util.List,java.lang.Object)",363,367,"/**
* Wraps a list with synchronized access based on its type.
* @param list input list to synchronize
* @param mutex synchronization object (can be null)
* @return synchronized list instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keys,com.google.common.collect.Synchronized$SynchronizedMultimap:keys(),750,758,"/**
* Returns a multiset instance, synchronizing access to shared resources.
* @return Multiset<K> instance or reinitialized on first call
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowKeySet(),662,665,"/**
* Calls m2() on the result of m1(), collecting results in a SortedSet.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,compare,"com.google.common.collect.TreeBasedTable$TreeRow:compare(java.lang.Object,java.lang.Object)",212,217,"/**
* Delegates comparison to a dynamically loaded comparator.
* @param a first object to compare
* @param b second object to compare
* @return negative/positive value indicating comparison result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recompute,com.google.common.collect.TreeMultiset$AvlNode:recompute(),945,948,"/**
* Calls methods m1 and m2 in sequence.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateBelowRange,"com.google.common.collect.TreeMultiset:aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",178,201,"/**
* Recursively aggregates values in the AVL tree using the given range and aggregation strategy.
* @param aggr Aggregate object
* @param node Current AvlNode (or null for leaf nodes)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateAboveRange,"com.google.common.collect.TreeMultiset:aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",203,226,"/**
* Recursively aggregates values from the AVL tree.
* @param aggr Aggregate object
* @param node AVLNode to traverse
* @return aggregated long value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)",84,97,"/**
* Initializes ArrayBasedCharEscaper with escaper map and character range.
* @param escaperMap Escaper map for replacement array
* @param safeMin Minimum safe character value
* @param safeMax Maximum safe character value
*/","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is
   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large
   * replacement mappings.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the mapping of characters to be escaped
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,<init>,com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:<init>(char[][]),45,48,"/**
* Initializes decorator with replacement character array.
* @param replacements array of characters to replace existing ones
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,<init>,com.google.common.escape.Escapers$1:<init>(),34,34,"/**
* Private constructor to prevent instantiation of this utility class. 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String)",95,136,"/**
* Initializes ArrayBasedUnicodeEscaper with given parameters.
* @param escaperMap Escaper map to use
* @param safeMin minimum safe code point value
* @param safeMax maximum safe code point value
* @param unsafeReplacement replacement string for unsafe characters (may be null)
*/","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe. This
   * initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the
   * sharing of large replacement mappings.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the map of replacements
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,<init>,"com.google.common.net.PercentEscaper:<init>(java.lang.String,boolean)",85,103,"/**
* Creates a PercentEscaper with specified safe characters and plus-for-space behavior.
* @param safeChars string of allowed characters
* @param plusForSpace whether to replace spaces with '+'
*/","* Constructs a percent escaper with the specified safe characters and optional handling of the
   * space character.
   *
   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe
   * character. This has the effect of creating an escaper which has no well-defined inverse but it
   * can be useful when escaping additional characters.
   *
   * @param safeChars a non-null string specifying additional safe characters for this escaper (the
   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)
   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}
   * @throws IllegalArgumentException if any of the parameters were invalid",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escape,com.google.common.escape.CharEscaper:escape(java.lang.String),55,66,"/**
* Performs a recursive search on the input string.
* @param string input string to process
*/","* Returns the escaped form of a given literal string.
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleException,"com.google.common.eventbus.EventBus$LoggingHandler:handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",278,284,"/**
* Logs a severe error with subscriber context and exception details.
* @param exception the thrown exception
* @param context SubscriberExceptionContext object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,create,"com.google.common.eventbus.Subscriber:create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",38,42,"/**
* Creates a subscriber instance based on the event method's properties.
* @param bus EventBus object
* @param listener listener object
* @param method event method to subscribe to
* @return Subscriber or SynchronizedSubscriber instance
*/",Creates a {@code Subscriber} for {@code method} on {@code listener}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Evaluates endpoint pair for FUNC_MASK functionality.
* @param endpoints EndpointPair object containing relevant data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
* Evaluates mask functionality for a pair of endpoints.
* @param endpoints pair of endpoints to process
* @return true if mask is valid, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ImmutableGraph:predecessors(java.lang.Object),70,73,"/**
* Delegates m2 operation to result of m1.
* @param node node to operate on
* @return set of nodes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ImmutableGraph:successors(java.lang.Object),75,78,"/**
* Recursively fetches neighbors of a given node.
* @param node Node to retrieve neighbors from
* @return Set of neighboring nodes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,incidentNodes,com.google.common.graph.Graphs$TransposedNetwork:incidentNodes(java.lang.Object),463,467,"/**
* Computes and returns an EndpointPair based on the given edge.
* @param edge input edge for computation
* @return computed EndpointPair object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),350,353,"/**
* Calls M3 on the result of M2 and M1.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(com.google.common.graph.EndpointPair),474,477,"/**
* Calls and chains multiple methods to process endpoint pairs.
* @param endpoints pair of network endpoints
* @return set of processed elements (type E)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(com.google.common.graph.EndpointPair),484,487,"/**
* Chains M1 and M2 to fetch data from paired endpoints.
* @param endpoints pair of endpoints to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),494,497,"/**
* Combines endpoint data from both endpoints in the pair and 
* feeds it into the next level of processing.
* @param endpoints Pair of Endpoint objects to be combined
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),504,507,"/**
* Recursively performs M3 operation on endpoint pair.
* @param endpoints EndpointPair object to process
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),395,398,"/**
* Invokes M3 on the result of M1 and M2 in sequence.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(com.google.common.graph.EndpointPair),405,408,"/**
* Recursively applies M3 operation on endpoint pair.
* @param endpoints EndpointPair object containing input data
* @return Optional result of M3 operation or empty if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",415,418,"/**
* Calls m3 on result of m2 with preprocessed data from m1.
* @param endpoints pair of endpoint parameters
* @param defaultValue default value to return if null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,equals,com.google.common.graph.AbstractGraph:equals(java.lang.Object),35,48,"/**
* Compares this graph with another object for equality.
* @param obj the object to compare with
* @return true if the objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,hashCode,com.google.common.graph.AbstractGraph:hashCode(),50,53,"/**
* Calls m1() and returns its result's value of m2().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,toString,com.google.common.graph.AbstractGraph:toString(),56,66,"/**
* Returns a string representation of the graph's characteristics.
*/",Returns a string representation of this graph.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractNetwork$1:edges(),66,99,"/**
* Returns a set of EndpointPairs, iterating over all pairs in the graph.
* @return Set<EndpointPair<N>> containing all valid pairs
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph$1:edges(),66,99,"/**
* Returns a set of EndpointPair objects representing all pairs in the graph.
* @return Set<EndpointPair<N>> containing all pairs or an empty set if none exist
*/","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,containsEdge,com.google.common.graph.StandardNetwork:containsEdge(java.lang.Object),200,202,"/**
* Checks if an edge is marked as functional.
* @param edge edge to check for functionality
* @return true if edge is functional, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.ImmutableNetwork:edges(),100,103,"/**
* Returns a set of edges based on the reference node mapping.
* @return Set of edge identifiers.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,get,com.google.common.graph.MapRetrievalCache:get(java.lang.Object),39,53,"/**
* Retrieves a value associated with the given key using multiple methods.
* @param key Object to search for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,inTree,com.google.common.graph.Traverser$Traversal:inTree(com.google.common.graph.SuccessorsFunction),395,407,"/**
* Creates a traversal function that masks successors based on the provided successors function.
* @param tree SuccessorsFunction to determine masked successors
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",84,90,"/**
* Computes the functional mask for an edge, considering self-loops.
* @param edge edge object
* @param isSelfLoop true if edge represents a self-loop
* @return functional mask value or null for self-loops
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(byte[]),82,88,"/**
* Initializes internal state with provided byte array.
* @param bytes input data to process
* @return this instance for chaining
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(java.nio.ByteBuffer),98,103,"/**
* Initializes hasher with input data.
* @param bytes ByteBuffer containing input data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putShort,com.google.common.hash.AbstractByteHasher:putShort(short),105,110,"/**
* Initializes hasher with short value and returns updated hasher.
* @param s input short value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putInt,com.google.common.hash.AbstractByteHasher:putInt(int),112,117,"/**
* Initializes hasher with input and returns a new hasher instance.
* @param i input value to initialize hasher with 
* @return initialized Hasher object",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putLong,com.google.common.hash.AbstractByteHasher:putLong(long),119,124,"/**
* Initializes hasher with given value and returns a new hasher instance.
* @param l long value to initialize the hasher with
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putChar,com.google.common.hash.AbstractByteHasher:putChar(char),126,131,"/**
* Initializes hasher with single character and returns its hash value.
* @param c single character to hash
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putDouble,com.google.common.hash.Hasher:putDouble(double),92,94,"/**
* Calculates and returns a hash code based on the double value.
* @param d input double value to be hashed
*/",Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.AbstractCompositeHashFunction$1:putLong(long),82,84,"/**
* Computes hash code mask from 64-bit integer value.
* @param l input long value to compute mask from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashLong,com.google.common.hash.AbstractHashFunction:hashLong(long),54,57,"/**
* Calculates hash code based on input value using three intermediate operations.
* @param input long value to be hashed
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.AbstractCompositeHashFunction$1:putChar(char),101,103,"/**
* Computes the hash code for a single character.
* @param c the input character to hash
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,hash,com.google.common.hash.AbstractStreamingHasher:hash(),186,195,"/**
* Calculates and returns the hash code mask using various compatibility functions.
* @return int representing the hash code mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munchIfFull,com.google.common.hash.AbstractStreamingHasher:munchIfFull(),205,210,"/**
 * Applies mask operation if buffer size is less than 8. 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeReplace,com.google.common.hash.BloomFilter:writeReplace(),557,559,"/**
 * Creates and returns a serial form for this mask.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,equals,com.google.common.hash.BloomFilter:equals(java.lang.Object),301,314,"/**
* Compares the current object to another, checking for equality.
* @param object Object to compare with (may be null)
* @return true if objects are equal, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long)",342,345,"/**
* Creates a collector for generating a Bloom filter with the specified expected insertions.
* @param funnel transformation function to apply to input elements
* @param expectedInsertions estimated number of unique elements to be inserted
*/","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with false positive probability 3%.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,expectedFpp,com.google.common.hash.BloomFilter:expectedFpp(),210,212,"/**
* Calculates the function mask value.
* @return double representing the function mask
*/","* Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code
   * true} for an object that has not actually been put in the {@code BloomFilter}.
   *
   * <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain
   * #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the
   * case that too many elements (more than expected) have been put in the {@code BloomFilter},
   * degenerating it.
   *
   * @since 14.0 (since 11.0 as expectedFalsePositiveProbability())",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,isCompatible,com.google.common.hash.BloomFilter:isCompatible(com.google.common.hash.BloomFilter),257,264,"/**
* Checks if two Bloom filters are equivalent based on their hash functions and strategies.
* @param that the other Bloom filter to compare with
* @return true if masks match, false otherwise
*/","* Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom
   * filters to be compatible, they must:
   *
   * <ul>
   *   <li>not be the same instance
   *   <li>have the same number of hash functions
   *   <li>have the same bit size
   *   <li>have the same strategy
   *   <li>have equal funnels
   * </ul>
   *
   * @param that The Bloom filter to check for compatibility.
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:compare(byte[],byte[])",424,434,"/**
* Compares two byte arrays element-wise.
* @param left the first byte array
* @param right the second byte array
* @return non-zero result of comparison, or difference in length if equal
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,com.google.common.primitives.UnsignedBytes:toString(byte),180,182,"/**
* Default implementation of m1 with a default max value of 10.
* @param x input byte value
*/","* Returns a string representation of x, where x is treated as unsigned.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,putAll,com.google.common.hash.BloomFilter:putAll(com.google.common.hash.BloomFilter),275,299,"/**
* Combines two Bloom filters with the same parameters.
* @param that another BloomFilter to combine
*/","* Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the
   * underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom
   * filters are appropriately sized to avoid saturating them.
   *
   * @param that The Bloom filter to combine this Bloom filter with. It is not mutated.
   * @throws IllegalArgumentException if {@code isCompatible(that) == false}
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength65Plus,"com.google.common.hash.FarmHashFingerprint64:hashLength65Plus(byte[],int,int)",171,215,"/**
* Computes a hash value using the specified byte array and length.
* @param bytes input data
* @param offset starting position in bytes
* @param length number of bytes to process
* @return 64-bit hash value as a long
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fullFingerprint,"com.google.common.hash.Fingerprint2011:fullFingerprint(byte[],int,int)",115,146,"/**
* Computes a hash value from the given byte array.
* @param bytes input data
* @param offset starting position in bytes
* @param length number of bytes to process
* @return 64-bit hash value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytesNoCopy,com.google.common.hash.HashCode:fromBytesNoCopy(byte[]),246,248,"/**
* Creates hash code from byte array using BytesHashCode.
* @param bytes input byte array
*/","* Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it
   * must be handed-off so as to preserve the immutability contract of {@code HashCode}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromInt,com.google.common.hash.HashCode:fromInt(int),114,116,"/**
* Returns a hash code from an integer value.
* @param hash input integer to be hashed
*/","* Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromLong,com.google.common.hash.HashCode:fromLong(long),171,173,"/**
* Generates a hash code using FUNC_MASK algorithm.
* @param hash input value to be hashed
* @return LongHashCode object representing the hashed value
*/","* Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,floatValue,com.google.common.primitives.UnsignedInteger:floatValue(),195,198,"/**
 * Calculates the functional mask value using m1().","* Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening
   * primitive conversion from {@code int} to {@code float}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,doubleValue,com.google.common.primitives.UnsignedInteger:doubleValue(),204,207,"/**
 * Calculates function mask value. 
 */","* Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening
   * primitive conversion from {@code int} to {@code double}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,bigIntegerValue,com.google.common.primitives.UnsignedInteger:bigIntegerValue(),210,212,"/**
* Calculates and returns a BigInteger mask value.
*/",Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,goodFastHash,com.google.common.hash.Hashing:goodFastHash(int),69,89,"/**
* Generates a concatenated hash function based on the specified minimum bits.
* @param minimumBits minimum number of bits required for hashing
* @return A concatenated hash function object
*/","* Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm
   * the returned function implements is unspecified and subject to change without notice.
   *
   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code
   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current
   * process in any way, for example being sent over RPC, or saved to disk. For a general-purpose,
   * non-cryptographic hash function that will never change behavior, we suggest {@link
   * #murmur3_128}.
   *
   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value
   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.
   *
   * @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link
   *     HashFunction} instance may use memory proportional to this integer.
   * @return a hash function, described above, that produces hash codes of length {@code
   *     minimumBits} or greater",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(com.google.common.hash.HashCode,int)",638,640,"/**
* Invokes m2 with hash code result from m1.
* @param hashCode instance containing hash code
* @param buckets number of hash buckets
*/","* Assigns to {@code hashCode} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner
   * that minimizes the need for remapping as {@code buckets} grows. That is, {@code
   * consistentHash(h, n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(java.security.Key),302,304,"/**
* Generates an HMAC-MD5 hash function instance.
* @param key encryption key
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and the given secret key.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(java.security.Key),330,332,"/**
* Creates a hash function using HMAC-SHA1 with the given key.
* @param key encryption key
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(java.security.Key),354,356,"/**
* Generates a hash function using HMAC-SHA-256 with custom key and initialization vector.
* @param key unique key for the hash function
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(java.security.Key),378,380,"/**
* Generates an HMAC-SHA-512 hash function using the provided key.
* @param key cryptographic key
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,readResolve,com.google.common.hash.MessageDigestHashFunction$SerializedForm:readResolve(),113,115,"/**
* Creates a hash function instance based on the provided algorithm name and byte sequence.
* @return HashFunction object
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,process,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:process(java.nio.ByteBuffer),102,108,"/**
* Processes ByteBuffer to update mask values and increment length.
* @param bb input ByteBuffer containing mask data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(java.nio.ByteBuffer),316,329,"/**
* Configures hasher with data from ByteBuffer.
* @param buffer input byte buffer
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,process,com.google.common.hash.SipHashFunction$SipHasher:process(java.nio.ByteBuffer),131,135,"/**
* Processes mask data in chunks from ByteBuffer.
* @param buffer input ByteBuffer containing mask data
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[]),569,571,"/**
* Constructs a ByteSource from an existing byte array.
* @param bytes the input byte array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$ByteArrayByteSource:slice(long,long)",629,638,"/**
* Calculates byte source mask for given offset and length.
* @param offset starting position
* @param length number of bytes to include
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.lang.Iterable),374,376,"/**
* Concatenates multiple byte sources into one.
* @param sources iterable of byte sources to concatenate
* @return concatenated ByteSource object
*/","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:decodeTo(byte[],java.lang.CharSequence)",978,990,"/**
* Decodes CharSequence into byte array, using the provided Alphabet.
* @param target output byte array
* @param chars input CharSequence to decode
* @return number of bytes written to target
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:decodeTo(byte[],java.lang.CharSequence)",1025,1047,"/**
* Encodes input characters into target byte array.
* @param target output byte array
* @param chars input character sequence
* @return number of written bytes or throws DecodingException for invalid input
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:decodeTo(byte[],java.lang.CharSequence)",753,776,"/**
* Encodes CharSequence into byte array using alphabet rules.
* @param target output byte array
* @param chars input sequence of characters
* @return number of bytes written to the target array
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withSeparator,"com.google.common.io.BaseEncoding$StandardBaseEncoding:withSeparator(java.lang.String,int)",866,881,"/**
* Creates a BaseEncoding instance with specified separator and output frequency.
* @param separator string to separate encoded characters
* @param afterEveryChars minimum number of characters between separators
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,com.google.common.io.BaseEncoding$Base16Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet),958,965,"/**
* Initializes Base16Encoding with a specified Alphabet, checking for valid length.
* @param alphabet Alphabet instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1003,1006,"/**
* Constructs a new instance of Base64 encoding with specified 
* alphabet and optional padding character.
* @param alphabet must be an alphabet with exactly 64 characters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$StandardBaseEncoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",917,919,"/**
* Creates a standard base encoding instance with specified parameters.
* @param alphabet Alphabet to use
* @param paddingChar Optional character for padding (null for default)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$StringCharSource:<init>(java.lang.String),642,644,"/**
* Initializes CharSource with input sequence.
* @param seq string to be processed as character source
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.lang.Iterable),443,445,"/**
* Concatenates multiple CharSources into one.
* @param sources iterable of CharSources to combine
*/","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(byte[]),304,307,"/**
* Wraps byte array as ByteArrayInputStream for further processing.
* @param bytes input byte array
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the
   * beginning.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(),481,484,"/**
* Creates a new Byte Array Data Output instance.
* @return initialized ByteArrayDataOutput object
*/",Returns a new {@link ByteArrayDataOutput} instance with a default size.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(int),492,500,"/**
* Creates a ByteArrayOutputStream with the specified size.
* @param size buffer size in bytes
*/","* Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before
   * resizing.
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.Charset,int)",86,94,"/**
* Initializes a new ReaderInputStream instance with the specified Reader, 
* Charset, and buffer size. Malformed input and unmappable characters are replaced.
*/","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set. Malformed input and unmappable characters will be replaced.
   *
   * @param reader input source
   * @param charset character set used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,countBySkipping,com.google.common.io.ByteSource:countBySkipping(java.io.InputStream),232,239,"/**
* Calculates the total number of bytes skipped by a function.
* @param in InputStream to read from
* @return total byte count or throws IOException if an error occurs
*/",Counts the bytes in the given input stream using skip if possible.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipFully,"com.google.common.io.ByteStreams:skipFully(java.io.InputStream,long)",830,836,"/**
* Skips up to 'n' bytes from the InputStream.
* @param in input stream
* @param n number of bytes to skip
* @throws IOException if an I/O error occurs or end-of-stream is reached prematurely
*/","* Discards {@code n} bytes of data from the input stream. This method will block until the full
   * amount has been skipped. Does not close the stream.
   *
   * @param in the input stream to read from
   * @param n the number of bytes to skip
   * @throws EOFException if this stream reaches the end before skipping all the bytes
   * @throws IOException if an I/O error occurs, or the stream does not support skipping",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(java.nio.CharBuffer),77,90,"/**
* Reads and writes data to a CharBuffer, performing necessary operations.
* @param target the CharBuffer to read/write from/to
* @return number of characters written or -1 on failure
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(),92,97,"/**
* Fetches and returns a function mask value.
* @throws IOException if an I/O error occurs
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.lang.Iterable,java.lang.String)",119,122,"/**
* Calls overloaded version of m2 with iterator's contents and separator.
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.stream.Stream,java.lang.String)",143,146,"/**
* Wraps existing stream into itself to allow recursive processing.
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,forEachLine,com.google.common.io.CharSource:forEachLine(java.util.function.Consumer),395,402,"/**
* Applies a consumer function to each line of the model output.
* @param action Consumer function to apply to each line
*/","* Reads all lines of text from this source, running the given {@code action} for each line as it
   * is read.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code action}
   *     throws an {@code UncheckedIOException}
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,com.google.common.io.CharStreams:readLines(java.lang.Readable),195,203,"/**
* Processes a Readable input to extract masked values.
* @param r input source (e.g. file, stream)
* @return list of extracted strings or empty if no data
*/","* Reads all of the lines from a {@link Readable} object. The lines do not include
   * line-termination characters, but do include other leading and trailing whitespace.
   *
   * <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link
   * Files#readLines} and {@link Resources#readLines} methods.
   *
   * @param r the object to read from
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,"com.google.common.io.CharStreams:readLines(java.lang.Readable,com.google.common.io.LineProcessor)",214,229,"/**
* Processes readable content using a LineProcessor.
* @param readable input to process
* @param processor callback for each processed line
* @return result from the processor or null on failure
*/","* Streams lines from a {@link Readable} object, stopping when the processor returns {@code false}
   * or all lines have been read and returning the result produced by the processor. Does not close
   * {@code readable}. Note that this method may not fully consume the contents of {@code readable}
   * if the processor stops processing early.
   *
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(int),201,205,"/**
 * Calls m1 with default value and delegates to out's m2.
 * @param b input value passed to out's m2
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,"com.google.common.io.FileBackedOutputStream:write(byte[],int,int)",212,216,"/**
* Writes data to output stream with specified offset and length.
* @param b byte array to write
* @param off starting index of data in the array
* @param len number of bytes to write
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,readMoreChars,com.google.common.io.ReaderInputStream:readMoreChars(),203,230,"/**
* Reads input characters and performs mask-related operations.
* @throws IOException on read errors
*/",Handle the case of underflow caused by needing more input characters.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readShort,com.google.common.io.LittleEndianDataInputStream:readShort(),190,194,"/**
* Returns the function mask value.
* @return 16-bit integer representing the function mask
*/","* Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using
   * little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian
   *     byte order.
   * @throws IOException if an I/O error occurs.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readChar,com.google.common.io.LittleEndianDataInputStream:readChar(),204,208,"/**
* Returns a character representing the function mask.
* @return a single character value or throws IOException if error occurs","* Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian
   * byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFloat,com.google.common.io.LittleEndianDataInputStream:readFloat(),156,160,"/**
* Calculates and returns a floating-point mask value.
* @return The computed mask value as a float.","* Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using
   * little-endian byte order.
   *
   * @return the next four bytes of the input stream, interpreted as a {@code float} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readDouble,com.google.common.io.LittleEndianDataInputStream:readDouble(),170,174,"/**
* Computes function mask value as a double.
* @return double representation of the function mask value
*/","* Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code double} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChars,com.google.common.io.LittleEndianDataOutputStream:writeChars(java.lang.String),93,98,"/**
* Iterates over a string's characters, invoking m2() for each.
* @param s input string
*/","* Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except
   * each character is written using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeDouble,com.google.common.io.LittleEndianDataOutputStream:writeDouble(double),106,109,"/**
* Applies mask to double value.
* @param v input double value
* @throws IOException if operation fails
*/","* Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except
   * using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsInsecure,com.google.common.io.MoreFiles:deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream),690,702,"/**
* Accumulates IOExceptions from iterating over a directory stream.
*@param dir directory to iterate over
*@return Collection of caught IOExceptions or null if successful iteration
*/","* Simple, insecure method for deleting the contents of a directory for file systems that don't
   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null
   * if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelySecure,"com.google.common.io.MoreFiles:deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)",618,640,"/**
* Fetches and processes exceptions from a directory stream.
* @param dir SecureDirectoryStream containing the directory
* @param path Path to process within the directory
* @return Collection of IOExceptions or null if no issues found
*/","* Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions
   * that occurred or null if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,<init>,com.google.common.io.MultiInputStream:<init>(java.util.Iterator),45,48,"/**
* Initializes the MultiInputStream from an iterator of ByteSources.
* @param it iterator of ByteSources to be concatenated
*/","* Creates a new instance.
   *
   * @param it an iterator of I/O suppliers that will provide each substream",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,com.google.common.io.MultiInputStream:read(),82,92,"/**
* Reads data from input source until end of stream is reached.
* @throws IOException on I/O error
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,"com.google.common.io.MultiInputStream:read(byte[],int,int)",94,105,"/**
* Reads bytes from input stream and recursively calls read operation.
* @param b byte array to read into
* @param off offset in the array to start reading at
* @param len number of bytes to read
* @return number of bytes read or -1 if end-of-stream reached
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,<init>,com.google.common.io.MultiReader:<init>(java.util.Iterator),39,42,"/**
* Constructs a multi-reader from an iterator of char sources.
* @param readers iterator over char sources to read from
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,read,"com.google.common.io.MultiReader:read(char[],int,int)",52,64,"/**
* Recursively fetches data from the next level of the hierarchy.
* @param cbuf buffer to read from
* @param off offset in the buffer
* @param len length to read
* @return data size or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,skip,com.google.common.io.MultiReader:skip(long),66,79,"/**
* Recursively calculates M2 value for a given non-negative number n.
* @param n input value, must be >= 0
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asCharSource,com.google.common.reflect.ClassPath$ResourceInfo:asCharSource(java.nio.charset.Charset),258,260,"/**
* Returns a CharSource from the m2 resource with the specified Charset.
* @param charset the character set to use
*/","* Returns a {@link CharSource} view of the resource from which its bytes can be read as
     * characters decoded with the given {@code charset}.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$Partition:size(),726,729,"/**
* Calculates value using ceiling rounding mode.
* @return calculated integer result
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxEncodedSize(int),1158,1163,"/**
* Calculates total size by delegating to other methods.
* @param bytes input byte count
* @return calculated total size
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$StandardBaseEncoding:maxEncodedSize(int),632,635,"/**
* Calculates functional mask value based on input byte count.
* @param bytes number of input bytes
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long),166,173,"/**
* Initializes a LockFreeBitArray with the specified number of bits. 
* @param bits The total number of bits in the array (must be > 0) 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,size,com.google.common.collect.Collections2$PermutationCollection:size(),600,603,"/**
* Calculates result of m2 on input from list.
* @return result as an integer value
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateSize,"com.google.common.collect.Collections2$OrderedPermutationCollection:calculateSize(java.util.List,java.util.Comparator)",454,473,"/**
* Calculates the number of permutations in a sorted list using the given comparator.
* @param sortedInputList sorted input list
* @param comparator comparison function
* @return total permutations or Integer.MAX_VALUE if overflow occurs
*/","* The number of permutations with repeated elements is calculated as follows:
     *
     * <ul>
     *   <li>For an empty list, it is 1 (base case).
     *   <li>When r numbers are added to a list of n-r elements, the number of permutations is
     *       increased by a factor of (n choose r).
     * </ul>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.util.Iterator),508,522,"/**
* Calculates the weighted average of a sequence of numbers.
* @param values iterator over numerical values
* @return weighted average as double or NaN if invalid input
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isPowerOfTwo,com.google.common.math.DoubleMath:isPowerOfTwo(double),201,208,"/**
* Checks if the given double value is a power of 2.
* @param x input value
* @return true if x is a power of 2, false otherwise
*/","* Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer
   * {@code k}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isMathematicalInteger,com.google.common.math.DoubleMath:isMathematicalInteger(double),289,294,"/**
* Evaluates a double value against a mask condition.
* @param x the input double value
*/","* Returns {@code true} if {@code x} represents a mathematical integer.
   *
   * <p>This is equivalent to, but not necessarily implemented as, the expression {@code
   * !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,roundToDouble,"com.google.common.math.LongMath:roundToDouble(long,java.math.RoundingMode)",1226,1327,"/**
* Rounds a long value to the nearest double using the specified RoundingMode.
* @param x the value to be rounded
* @param mode the rounding mode to apply
*/","* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}
   * is precisely representable as a {@code double}, its {@code double} value will be returned;
   * otherwise, the rounding will choose between the two nearest representable values with {@code
   * mode}.
   *
   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754
   * default rounding mode: if the two nearest representable values are equally near, the one with
   * the least significant bit zero is chosen. (In such cases, both of the nearest representable
   * values are even integers; this method returns the one that is a multiple of a greater power of
   * two.)
   *
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not precisely representable as a {@code double}
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyCompare,"com.google.common.math.DoubleMath:fuzzyCompare(double,double,double)",384,394,"/**
* Determines the comparison result of two values within a tolerance.
* @param a first value
* @param b second value
* @param tolerance maximum allowed difference
* @return -1 if a < b, 0 if equal, 1 if a > b
*/","* Compares {@code a} and {@code b} ""fuzzily,"" with a tolerance for nearly-equal values.
   *
   * <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,
   * b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as
   * equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).
   *
   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link
   * Comparable#compareTo} implementations. In particular, it is not transitive.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,maxRunBeforeFallback,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:maxRunBeforeFallback(int),932,934,"/**
* Calculates a mask value based on the given table size using the M1 function.","* If more than this many consecutive positions are filled in a table of the specified size,
     * report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding
     * if fewer consecutive positions are filled; see that method for details.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,trim,com.google.common.collect.TopKSelector:trim(),165,207,"/**
* Performs binary search to find a valid pivot for FUNC_MASK.
* @param left initial left index
* @param right initial right index
*/","* Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log
   * k) worst case.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[],byte[],boolean)",449,479,"/**
* Initializes an Alphabet object with given parameters.
* @param name alphabet name
* @param chars character array representing the alphabet
* @param decodabet byte array for decoding (optional)
* @param ignoreCase whether to ignore case when matching characters
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,ceilToPowerOfTwo,com.google.common.util.concurrent.Striped:ceilToPowerOfTwo(int),510,512,"/**
 * Calculates the mask value using the first integer power of two greater than or equal to x.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10,"com.google.common.math.IntMath:log10(int,java.math.RoundingMode)",153,176,"/**
* Calculates the power of 10 that is just below or above the given value.
* @param x input value
* @param mode RoundingMode to determine whether to return floor, ceiling, etc.
* @return integer power of 10 (or its half) corresponding to the rounded value.","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,sqrt,"com.google.common.math.LongMath:sqrt(long,java.math.RoundingMode)",305,366,"/**
* Computes cube root of a number with specified rounding mode.
* @param x input value
* @param mode RoundingMode to apply
* @return cube root or nearest integer approximation
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,<init>,com.google.common.collect.CartesianList:<init>(com.google.common.collect.ImmutableList),52,65,"/**
* Initializes CartesianList with given axis sizes.
* @param axes list of axis sizes, where each axis is a list of element counts
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,calculateNewCapacity,com.google.common.collect.MinMaxPriorityQueue:calculateNewCapacity(),968,973,"/**
* Calculates the function mask for resizing a queue.
* @return new capacity value",Returns ~2x the old capacity if small; ~1.5x otherwise.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,<init>,"com.google.common.collect.TopKSelector:<init>(java.util.Comparator,int)",123,132,"/**
* Initializes a TopKSelector with the specified comparator and k.
* @param comparator comparator for sorting elements
* @param k number of top elements to select (must be non-negative)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedPow,"com.google.common.math.IntMath:checkedPow(int,int)",495,532,"/**
* Computes a power of 2 or -1 raised to the given exponent.
* @param b base value (2 or -1)
* @param k exponent
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,horizontal,com.google.common.math.LinearTransformation:horizontal(double),121,125,"/**
* Computes and returns a linear transformation with zero slope.
*/","* Builds an instance representing a horizontal transformation with a constant value of {@code y}.
   * (The inverse of this will be a vertical transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:createInverse(),273,275,"/**
* Creates a linear transformation mask with specified x value.
* @return RegularLinearTransformation instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,withSlope,com.google.common.math.LinearTransformation$LinearTransformationBuilder:withSlope(double),97,105,"/**
* Creates a LinearTransformation object based on the given slope.
* @param slope The slope of the linear transformation
* @return A LinearTransformation object representing the line (Regular or Vertical) 
* depending on whether the slope is valid and finite.","* Finish building an instance with the given slope, i.e. the rate of change of {@code y} with
     * respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case
     * the transformation is vertical. (If it is zero, the transformation is horizontal.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,vertical,com.google.common.math.LinearTransformation:vertical(double),112,115,"/**
* Applies linear transformation to input value x and returns result as VerticalLinearTransformation.
*/","* Builds an instance representing a vertical transformation with a constant value of {@code x}.
   * (The inverse of this will be a horizontal transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:createInverse(),217,223,"/**
* Returns a LinearTransformation instance based on the slope and y-intercept.
* If slope is non-zero, returns a RegularLinearTransformation; otherwise, returns a VerticalLinearTransformation.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,test,"com.google.common.math.LongMath$MillerRabinTester:test(long,long)",1159,1163,"/**
* Determines whether to use small or large modulo calculation based on square root of 'n'.
* @param base value for modulo operation
* @param n input number
* @return true if using small modulo, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,factorial,com.google.common.math.BigIntegerMath:factorial(int),381,434,"/**
* Computes the FUNC_MASK value for a given integer n.
* @param n input integer
* @return BigInteger representing the computed mask value
*/","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}
   * if {@code n == 0}.
   *
   * <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously.
   *
   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced
   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at
   * the end).
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10,"com.google.common.math.LongMath:log10(long,java.math.RoundingMode)",155,179,"/**
* Calculates the exponent of a number in base 10.
* @param x input value
* @return integer power or result of rounding operation
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,multiplyFraction,"com.google.common.math.LongMath:multiplyFraction(long,long,long)",852,862,"/**
* Calculates a function mask using the formula: x * (numerator / denominator).
* @param x input value
* @param numerator dividend
* @param denominator divisor
* @return calculated function mask
*/","Returns (x * numerator / denominator), which is assumed to come out to an integral value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedPow,"com.google.common.math.LongMath:checkedPow(long,int)",578,620,"/**
* Computes the result of a power operation using a combination of 
* precomputed values and iterative squaring.
* @param b base value
* @param k exponent
*/","* Returns the {@code b} to the {@code k}th power, provided it does not overflow.
   *
   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code
   *     long} arithmetic",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,populationCovariance,com.google.common.math.PairedStats:populationCovariance(),95,98,"/**
* Calculates and returns the mask value based on m1() result.
* @return calculated mask value
*/","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,sampleCovariance,com.google.common.math.PairedStats:sampleCovariance(),113,116,"/**
* Calculates function mask value based on m1 result.
* @return Function mask value
*/","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStats:pearsonsCorrelationCoefficient(),134,148,"/**
* Calculates a value based on various intermediate results.
* @return calculated double value or NaN if invalid
*/","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.util.Iterator),488,503,"/**
* Calculates the weighted average of a stream of numbers.
* @param values iterator over Number objects
* @return estimated mean or NaN if invalid values encountered
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,add,com.google.common.math.StatsAccumulator:add(double),53,76,"/**
* Updates moving window statistics (mean, min, max) and sum of squares of deltas.
* @param value new data point to incorporate
*/",Adds the given value to the dataset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,merge,"com.google.common.math.StatsAccumulator:merge(long,double,double,double,double)",191,217,"/**
* Updates statistics with values from another dataset.
* @param otherCount count of the other set
* @param otherMean mean value of the other set
* @param otherSumOfSquaresOfDeltas sum of squares of deltas for the other set
* @param otherMin minimum value in the other set
* @param otherMax maximum value in the other set
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,populationCovariance,com.google.common.math.PairedStatsAccumulator:populationCovariance(),128,131,"/**
* Calculates and returns the function mask value.
* @return function mask value as a double
*/","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,sampleCovariance,com.google.common.math.PairedStatsAccumulator:sampleCovariance(),146,149,"/**
* Calculates function value using m1 and sum of products of deltas.
* @return function value
*/","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStatsAccumulator:pearsonsCorrelationCoefficient(),167,181,"/**
* Calculates a masked function value based on statistical deltas.
* @return function value or NaN if invalid
*/","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,partition,"com.google.common.math.Quantiles:partition(double[],int,int)",575,595,"/**
* Partitions the given array around a pivot element.
* @param array input array to be partitioned
* @param from starting index of partition range
* @param to ending index of partition range
* @return index of pivot element in its final position
*/","* Performs a partition operation on the slice of {@code array} with elements in the range [{@code
   * from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them
   * as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code
   * ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or
   * equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are
   * greater than or equal to that.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,fromByteArray,com.google.common.math.PairedStats:fromByteArray(byte[]),304,316,"/**
* Computes paired statistics from a byte array.
* @param byteArray input data
* @return PairedStats object containing x and y statistics and sum of products of deltas
*/","* Creates a {@link PairedStats} instance from the given byte representation which was obtained by
   * {@link #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,fromByteArray,com.google.common.math.Stats:fromByteArray(byte[]),627,635,"/**
* Parses byte array into Stats object.
* @param byteArray input data as a byte array
* @return Stats object or null on parsing error
*/","* Creates a Stats instance from the given byte representation which was obtained by {@link
   * #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,snapshot,com.google.common.math.PairedStatsAccumulator:snapshot(),95,97,"/**
* Creates PairedStats object from individual statistics and product of deltas.
* @return PairedStats object containing calculated values
*/",Returns an immutable snapshot of the current statistics.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,xStats,com.google.common.math.PairedStatsAccumulator:xStats(),105,107,"/**
* Returns stats with specific mask applied. 
* @return Stats object with applied mask 
*/",Returns an immutable snapshot of the statistics on the {@code x} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,yStats,com.google.common.math.PairedStatsAccumulator:yStats(),110,112,"/**
* Returns statistical data with specific mask applied. 
* @return Statistical data object
*/",Returns an immutable snapshot of the statistics on the {@code y} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toStats,com.google.common.math.Stats:toStats(),216,226,"/**
* Aggregates Number values into Stats using the M4 collector.
* @return Stats object with aggregated data
*/","* Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream}
   * of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code
   * boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values
   * (which may cause loss of precision).
   *
   * <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code
   * LongStream}, you should use the factory method {@link #of} instead.
   *
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,convertDottedQuadToHex,com.google.common.net.InetAddresses:convertDottedQuadToHex(java.lang.String),336,347,"/**
* Extracts and formats the initial part and last two octets of an IP address.
* @param ipString input IP address string
* @return formatted IP mask or null if invalid
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toUriString,com.google.common.net.InetAddresses:toUriString(java.net.InetAddress),580,585,"/**
* Formats IP address as IPv4 or IPv6 string.
* @param ip InetAddress object to format
*/","* Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses it compresses zeroes and surrounds the text with square brackets; for example {@code
   * ""[2001:db8::1]""}.
   *
   * <p>Per section 3.2.2 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc3986#section-3.2.2"">RFC 3986</a>, a URI containing an IPv6
   * string literal is of the form {@code ""http://[2001:db8::1]:8888/index.html""}.
   *
   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or
   * this method is recommended over {@link InetAddress#toString()} when an IP address string
   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the
   * IP address string joined by a ""/"".
   *
   * @param ip {@link InetAddress} to be converted to URI string literal
   * @return {@code String} containing URI-safe string literal",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCompatIPv4Address,com.google.common.net.InetAddresses:getCompatIPv4Address(java.net.Inet6Address),702,707,"/**
* Extracts the IPv4 address from a given IPv6 address.
* @param ip IPv6 address
* @return Inet4Address object or null if not IPv4-compatible
*/","* Returns the IPv4 address embedded in an IPv4 compatible address.
   *
   * @param ip {@link Inet6Address} to be examined for an embedded IPv4 address
   * @return {@link Inet4Address} of the embedded IPv4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,get6to4IPv4Address,com.google.common.net.InetAddresses:get6to4IPv4Address(java.net.Inet6Address),733,737,"/**
* Extracts the 32-bit IPv4 address from a given IPv6 address.
* @param ip IPv6 address to extract mask from
*/","* Returns the IPv4 address embedded in a 6to4 address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address
   * @return {@link Inet4Address} of embedded IPv4 in 6to4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getIsatapIPv4Address,com.google.common.net.InetAddresses:getIsatapIPv4Address(java.net.Inet6Address),884,888,"/**
* Masks the given IPv6 address to its IPv4 equivalent using ISATAP.
* @param ip IPv6 address to mask
* @return Inet4Address object or throws exception if invalid
*/","* Returns the IPv4 address embedded in an ISATAP address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address
   * @return {@link Inet4Address} of embedded IPv4 in an ISATAP address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(com.google.common.base.CharMatcher),1167,1173,"/**
* Processes character based on provided matcher rules.
* @param matcher CharMatcher object to apply rules
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(char),1175,1181,"/**
* Masks input character with bitwise operations and returns it.
* @param c input character to mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray$AsList:hashCode(),555,558,"/**
* Calls and returns result from parent's implementation of m1(). 
* @return The value returned by the parent's m1() method.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndex:compute(java.util.Collection),242,244,"/**
* Calculates the mean squared error (MSE) of a numerical dataset.
* @param dataset collection of numbers to process
*/","* Computes the quantile value of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return the quantile value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndexes:compute(java.util.Collection),347,349,"/**
 * Computes mask values from the given numerical dataset.
 * @param dataset collection of numbers to process
 */","* Computes the quantile values of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile
     *     indexes, and the values the corresponding quantile values. When iterating, entries in the
     *     map are ordered by quantile index in the same order they were passed to the {@code
     *     indexes} method.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,add,com.google.common.primitives.ImmutableDoubleArray$Builder:add(double),225,231,"/**
* Sets function mask value and adds it to the data array.
* @param value double representing function mask value
*/","* Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(double[]),237,243,"/**
* Initializes builder with mask values.
* @param values double array of mask values
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.Collection),264,271,"/**
* Sets function mask from a collection of double values.
* @param values collection of double values to set
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(com.google.common.primitives.ImmutableDoubleArray),294,300,"/**
* Configures the builder with a mask from an array of doubles.
* @param values array of double values to create a mask from
* @return this Builder instance for chaining
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,com.google.common.primitives.ImmutableDoubleArray:of(double),97,99,"/**
* Creates an immutable array of doubles containing a single value.
* @param e0 the double value to include in the array
*/",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double)",102,104,"/**
* Creates an ImmutableDoubleArray instance with two elements.
* @param e0 first element
* @param e1 second element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double)",107,109,"/**
* Creates an immutable array of doubles from three input values.
* @param e0 first value
* @param e1 second value
* @param e2 third value
* @return ImmutableDoubleArray object containing the three values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double)",112,114,"/**
* Creates an immutable array of doubles from four input values.
* @param e0 first value
* @param e1 second value
* @param e2 third value
* @param e3 fourth value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double)",117,119,"/**
* Creates an immutable array of doubles from the given function mask values.
* @param e0 first function value
* @param e1 second function value
* @param e2 third function value
* @param e3 fourth function value
* @param e4 fifth function value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double,double)",122,125,"/**
* Creates an immutable array of doubles from 6 input values.
* @param e0 first value
* @param e1 second value
* @param e2 third value
* @param e3 fourth value
* @param e4 fifth value
* @param e5 sixth value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(double[]),146,150,"/**
* Creates an ImmutableDoubleArray from a double array.
* @param values input array of doubles
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.Collection),153,155,"/**
* Creates an immutable double array from a collection of doubles.
* @param values collection of double values
* @return ImmutableDoubleArray or EMPTY if collection is empty
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.stream.DoubleStream),176,180,"/**
* Converts DoubleStream to an ImmutableDoubleArray.
* @param stream input DoubleStream
* @return ImmutableDoubleArray or EMPTY if input is empty
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,trimmed,com.google.common.primitives.ImmutableDoubleArray:trimmed(),631,633,"/**
* Returns an immutable double array based on the result of m1() and m2().
* If m1() is true, returns a new ImmutableDoubleArray instance; otherwise, returns this.","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:indexOf(java.lang.Object),509,512,"/**
* Recursively resolves type 'M1' on provided object.
* @param target object to resolve M1 type for
* @return M1 value or -1 if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray:contains(double),417,419,"/**
* Checks if input value is within valid range based on function m1.
* @param target input value to check
* @return true if within valid range, false otherwise
*/","* Returns {@code true} if {@code target} is present at any index in this array. Values are
   * compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:lastIndexOf(java.lang.Object),514,517,"/**
* Recursively fetches m1 value from parent if target is a Double.
* @param target object to check and traverse (may be null)
* @return m1 value or -1 if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray$AsList:toString(),560,563,"/**
* Calls parent's implementation of m1(). 
* @return result from parent.m1()",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray$AsList:contains(java.lang.Object),499,502,"/**
* Checks if target value is within valid range.
* @param target value to check (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,add,com.google.common.primitives.ImmutableIntArray$Builder:add(int),222,228,"/**
* Sets function mask with specified integer value.
* @param value function mask value to set in the builder
*/","* Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(int[]),234,240,"/**
* Builds mask builder from an array of boolean values.
* @param values array of boolean flags
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.Collection),261,268,"/**
* Configures the builder with a collection of integer values.
* @param values Collection of integers to be masked
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(com.google.common.primitives.ImmutableIntArray),291,297,"/**
* Initializes builder with mask values from the given array.
* @param values ImmutableIntArray containing mask values
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,com.google.common.primitives.ImmutableIntArray:of(int),97,99,"/**
* Creates an immutable array containing a single element.
* @param e0 the element to be included in the array
*/",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int)",102,104,"/**
* Creates an immutable array containing two elements.
* @param e0 first element value
* @param e1 second element value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int)",107,109,"/**
* Creates an immutable array with three elements.
* @param e0 first element value
* @param e1 second element value
* @param e2 third element value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int)",112,114,"/**
* Creates an immutable integer array from four given values.
* @param e0 first value
* @param e1 second value
* @param e2 third value
* @param e3 fourth value
* @return ImmutableIntArray object containing the four values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int)",117,119,"/**
* Creates an immutable array from five integer elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
* @param e4 fifth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int,int)",122,124,"/**
* Creates an immutable integer array with specified values.
* @param e0 first value (index 0)
* @param e1 second value (index 1)
* @param e2 third value (index 2)
* @param e3 fourth value (index 3)
* @param e4 fifth value (index 4)
* @param e5 sixth value (index 5)
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(int[]),145,147,"/**
* Creates an immutable integer array from the provided values.
* @param values input array of integers
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.stream.IntStream),173,177,"/**
* Converts an IntStream to an ImmutableIntArray.
* @param stream input stream of integers
* @return ImmutableIntArray containing stream elements or empty if stream is empty
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,trimmed,com.google.common.primitives.ImmutableIntArray:trimmed(),621,623,"/**
* Returns an immutable array based on a condition.
* @return ImmutableIntArray instance or this if condition is true
*/","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray$AsList:hashCode(),550,553,"/**
 * Calls the overridden method in the parent class and returns its result.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray$AsList:toString(),555,558,"/**
 * Calls parent implementation of m1(). 
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray$AsList:contains(java.lang.Object),501,504,"/**
* Evaluates whether the given target is within the mask range.
* @param target object to check (may be null)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,add,com.google.common.primitives.ImmutableLongArray$Builder:add(long),224,230,"/**
* Sets function mask to specified value.
* @param value new function mask value
*/","* Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(long[]),236,242,"/**
* Updates builder with a long array of function mask values.
* @param values array of function mask values
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.Collection),263,270,"/**
* Sets mask values from a collection.
* @param values collection of Long values to set as masks
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(com.google.common.primitives.ImmutableLongArray),293,299,"/**
* Builds a mask from the given immutable long array.
* @param values input long array
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,com.google.common.primitives.ImmutableLongArray:of(long),97,99,"/**
* Creates an immutable array of function masks from a single long value.
* @param e0 input long value
*/",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long)",102,104,"/**
* Creates an immutable array of two long values representing function mask bits.
* @param e0 first bit value
* @param e1 second bit value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long)",107,109,"/**
* Creates an immutable array of function masks from three input values.
* @param e0 first function mask value
* @param e1 second function mask value
* @param e2 third function mask value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long)",112,114,"/**
* Creates an ImmutableLongArray instance with the given four 64-bit elements.
* @param e0 first element
* @param e1 second element
* @param e2 third element
* @param e3 fourth element
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long)",117,119,"/**
* Creates an immutable array with the given five 64-bit integers.
* @param e0 first integer value
* @param e1 second integer value
* @param e2 third integer value
* @param e3 fourth integer value
* @param e4 fifth integer value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long,long)",122,124,"/**
* Creates an ImmutableLongArray instance from six primitive long values.
* @param e0 first value
* @param e1 second value
* @param e2 third value
* @param e3 fourth value
* @param e4 fifth value
* @param e5 sixth value
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(long[]),145,149,"/**
* Creates an ImmutableLongArray from a long array.
* @param values input array of long values
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.stream.LongStream),175,179,"/**
* Converts LongStream to ImmutableLongArray.
* @param stream input stream of long values
* @return ImmutableLongArray or EMPTY if input is empty
*/","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,trimmed,com.google.common.primitives.ImmutableLongArray:trimmed(),623,625,"/**
* Returns an immutable long array based on function mask evaluation.
* @return ImmutableLongArray instance or existing array if condition is met
*/","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray$AsList:hashCode(),552,555,"/**
* Calls parent's implementation of m1.
* @return result from parent.m1()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray$AsList:toString(),557,560,"/**
* Delegates call to parent's m1() method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,indexes,com.google.common.math.Quantiles$Scale:indexes(java.util.Collection),212,214,"/**
* Creates ScaleAndIndexes object from collection of indexes.
* @param indexes collection of integer values
*/","* Specifies multiple quantile indexes to be calculated, each index being the k in the kth
     * q-quantile.
     *
     * @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for
     *     q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the
     *     set will be snapshotted when this method is called
     * @throws IllegalArgumentException if {@code indexes} is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.Collection),150,152,"/**
* Converts collection of integers to immutable array, or returns empty array if collection is empty.
* @param values Collection of integers
* @return ImmutableIntArray object or EMPTY if input was empty 
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.Collection),152,154,"/**
* Creates an immutable array of function masks from a collection of long values.
* @param values Collection of long values
* @return ImmutableLongArray object or EMPTY if input is empty
*/","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,"com.google.common.primitives.Ints:tryParse(java.lang.String,int)",840,847,"/**
* Converts string to integer using specified radix.
* @param string input string
* @param radix base of the number to convert to (e.g. 10 for decimal)
* @return Integer value or null if conversion failed or inconsistent
*/","* Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,com.google.common.primitives.Longs:tryParse(java.lang.String),376,378,"/**
* Returns a Long value based on input String and default value 10.
* @param string input String to process
*/","* Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,decode,com.google.common.primitives.UnsignedInts:decode(java.lang.String),319,331,"/**
* Converts string to integer mask using ParseRequest and custom radix.
* @param stringValue input string to be converted
*/","* Returns the unsigned {@code int} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(long),75,81,"/**
* Extracts 32-bit unsigned integer from given long value.
* @param value input value to extract from
*/","* Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse
   * operation of {@link #longValue()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.math.BigInteger),89,96,"/**
* Converts a BigInteger to an UnsignedInteger.
* @param value input BigInteger value
*/","* Returns a {@code UnsignedInteger} representing the same value as the specified {@link
   * BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,"com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String,int)",116,118,"/**
* Calculates the mask value from a string representation in a given radix.
* @param string string representation of an unsigned integer
* @param radix base of the number (e.g., 10 for decimal)
*/","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,plus,com.google.common.primitives.UnsignedInteger:plus(com.google.common.primitives.UnsignedInteger),126,128,"/**
* Computes mask value by combining input and internal values.
* @param val input unsigned integer value
*/","* Returns the result of adding this and {@code val}. If the result would have more than 32 bits,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,minus,com.google.common.primitives.UnsignedInteger:minus(com.google.common.primitives.UnsignedInteger),136,138,"/**
* Computes mask value using bitwise operations.
* @param val input unsigned integer
* @return computed UnsignedInteger result
*/","* Returns the result of subtracting this and {@code val}. If the result would be negative,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,times,com.google.common.primitives.UnsignedInteger:times(com.google.common.primitives.UnsignedInteger),146,151,"/**
* Calculates the function mask value.
* @param val input unsigned integer value
* @return resulting unsigned integer mask value
*/","* Returns the result of multiplying this and {@code val}. If the result would have more than 32
   * bits, returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,dividedBy,com.google.common.primitives.UnsignedInteger:dividedBy(com.google.common.primitives.UnsignedInteger),159,161,"/**
* Calculates function mask value based on input unsigned integer.
* @param val input unsigned integer value
* @return calculated function mask value as an UnsignedInteger object
*/","* Returns the result of dividing this by {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,mod,com.google.common.primitives.UnsignedInteger:mod(com.google.common.primitives.UnsignedInteger),169,171,"/**
* Computes the mask for an unsigned integer value.
* @param val input value
* @return computed mask as an unsigned integer
*/","* Returns this mod {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(),240,243,"/**
* Calls m1(int) with default value 10.","Returns a string representation of the {@code UnsignedInteger} value, in base 10.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,compareTo,com.google.common.primitives.UnsignedInteger:compareTo(com.google.common.primitives.UnsignedInteger),219,223,"/**
* Calculates and returns a function mask based on the given UnsignedInteger.
* @param other UnsignedInteger to compare with
*/","* Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are
   * equal, a negative number if {@code this < other}, and a positive number if {@code this >
   * other}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts$LexicographicalComparator:compare(int[],int[])",200,211,"/**
* Compares two integer arrays and returns the difference in their lengths.
* @param left first array to compare
* @param right second array to compare
* @return difference in lengths or result of bitwise XOR operation on mismatched elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(long),78,82,"/**
* Converts a signed long to an unsigned long by discarding the sign bit.
* @param value input long value
* @return UnsignedLong representation of the input value
*/","* Returns an {@code UnsignedLong} representing the same value as the specified {@code long}.
   *
   * @throws IllegalArgumentException if {@code value} is negative
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.math.BigInteger),90,98,"/**
* Converts BigInteger to UnsignedLong.
* @param value input big integer value
*/","* Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}.
   * This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,plus,com.google.common.primitives.UnsignedLong:plus(com.google.common.primitives.UnsignedLong),131,133,"/**
* Calculates the function mask by combining input value with result of m1 operation.
* @param val input unsigned long value
*/","* Returns the result of adding this and {@code val}. If the result would have more than 64 bits,
   * returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,minus,com.google.common.primitives.UnsignedLong:minus(com.google.common.primitives.UnsignedLong),141,143,"/**
* Computes functional mask value using bitwise operation.
* @param val input value
*/","* Returns the result of subtracting this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,times,com.google.common.primitives.UnsignedLong:times(com.google.common.primitives.UnsignedLong),151,153,"/**
* Calculates the function mask value by multiplying and applying M1 result.
* @param val input value
*/","* Returns the result of multiplying this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:compare(byte[],byte[])",374,413,"/**
* Compares two byte arrays using a stride-based approach.
* @param left first byte array to compare
* @param right second byte array to compare
* @return difference between the two arrays, or their length difference if identical
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,compareTo,com.google.common.primitives.UnsignedLong:compareTo(com.google.common.primitives.UnsignedLong),231,235,"/**
* Calculates FUNC_MASK value based on input.
* @param o UnsignedLong object to process
* @return integer result of calculation
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs$LexicographicalComparator:compare(long[],long[])",166,175,"/**
* Compares two arrays of long values and returns their difference.
* @param left first array to compare
* @param right second array to compare
* @return negative if left is shorter, positive if right is shorter, or result of m2 for differing elements
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,divide,"com.google.common.primitives.UnsignedLongs:divide(long,long)",250,273,"/**
* Computes the remainder of a division using the Funky's Algorithm.
* @param dividend input number to be divided
* @param divisor non-negative divisor value
* @return quotient or 0 if negative divisor and odd dividend
*/","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,remainder,"com.google.common.primitives.UnsignedLongs:remainder(long,long)",286,309,"/**
* Computes the remainder of a division operation.
* @param dividend number to be divided
* @param divisor divisor value
* @return remainder of the division as a long integer
*/","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,"com.google.common.primitives.UnsignedLong:valueOf(java.lang.String,int)",120,123,"/**
* Computes mask value from string representation using specified radix.
* @param string input string to process
* @param radix base number system (e.g. 10 for decimal)
* @return UnsignedLong result or null if invalid input
*/","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String),321,324,"/**
* Returns value from m1 with default offset of 10.
* @param string input string to process
*/","* Returns the unsigned {@code long} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,decode,com.google.common.primitives.UnsignedLongs:decode(java.lang.String),381,393,"/**
* Parses a string into an integer mask using ParseRequest.
* @param stringValue input string to parse
* @return integer mask or throws NumberFormatException if invalid
*/","* Returns the unsigned {@code long} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPackagePrivate,com.google.common.reflect.Invokable:isPackagePrivate(),160,162,"/**
* Evaluates mask condition based on m1(), m2(), and m3() results.
* @return true if all conditions are false, false otherwise
*/",Returns true if the element is package-private.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getKey,com.google.common.collect.ForwardingMapEntry:getKey(),60,64,"/**
* Calls m1(), then calls m2() on its result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getValue,com.google.common.collect.ForwardingMapEntry:getValue(),66,70,"/**
* Calls m1(), then invokes its m2() method.
* @return result of invoking m2() on m1()'s return value.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.ForwardingMapEntry:setValue(java.lang.Object),72,77,"/**
* Calls m1() and delegates to its m2(V) method with the provided value. 
* @param value input value to be passed to m1()'s m2(V)",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,equals,com.google.common.collect.ForwardingMapEntry:equals(java.lang.Object),79,82,"/**
* Delegates call to m1() and passes object as argument.
* @param object arbitrary object to pass to m1()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,hashCode,com.google.common.collect.ForwardingMapEntry:hashCode(),84,87,"/**
* Recursively calls and returns the result of m2() from the returned UserProfile object.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(java.lang.Class),107,110,"/**
* Returns an instance of the specified type with a masked value.
* @param type Class of the desired type
* @return Instance of the specified type or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getOwnerType,com.google.common.reflect.Invokable:getOwnerType(),330,333,"/**
* Returns a TypeToken instance for the function's generic type.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(java.lang.Class),45,48,"/**
* Retrieves an instance of type T from cache (m2()) based on its TypeToken representation.
* @param type Class object of the desired type
* @return An instance of type T, or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",55,60,"/**
* Creates a masked instance of a generic type.
* @param type the type to mask, must be a subtype of B
* @param value the instance to mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,wrap,com.google.common.reflect.TypeToken:wrap(),545,552,"/**
* Returns a TypeToken instance for the current type, or this instance if m1() fails.
*/","* Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,unwrap,com.google.common.reflect.TypeToken:unwrap(),564,571,"/**
* Returns a TypeToken instance for the current type, 
* or itself if m1() returns false.","* Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getReturnType,com.google.common.reflect.Invokable:getReturnType(),261,264,"/**
* Returns a TypeToken instance for the generic type of this function.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken$Bounds:isSubtypeOf(java.lang.reflect.Type),1073,1080,"/**
* Recursively checks subtypes against the given supertype.
* @param supertype the type to check against
* @return true if any subtype matches, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken$Bounds:isSupertypeOf(java.lang.reflect.Type),1082,1090,"/**
* Checks if a given subtype matches the target value.
* @param subtype Type to check
* @return true if match found, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getComponentType,com.google.common.reflect.TypeToken:getComponentType(),577,583,"/**
* Retrieves the component type of the runtime type, or null if not found.
* @return TypeToken object representing the component type, or null.","* Returns the array component type if this type represents an array ({@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfArrayType,com.google.common.reflect.TypeToken:isSubtypeOfArrayType(java.lang.reflect.GenericArrayType),919,933,"/**
* Checks if a generic array type matches the supertype.
* @param supertype the type to check against
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOfArray,com.google.common.reflect.TypeToken:isSupertypeOfArray(java.lang.reflect.GenericArrayType),935,948,"/**
* Checks if the given subtype is a function type.
* @param subtype the type to check
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtypeFromLowerBounds,"com.google.common.reflect.TypeToken:getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])",1216,1224,"/**
* Resolves type token for the given subclass and lower bounds.
* @param subclass the class to find the type token for
* @param lowerBounds array of lower bounds (ignored if empty)
* @throws IllegalArgumentException if subclass is not a superclass of this type
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion$4:typeName(java.lang.reflect.Type),652,654,"/**
* Returns the function mask based on the given data type.
* @param type the data type to determine the function mask for
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService$1:toString(),151,154,"/**
* Concatenates and formats two mask values into a single string.
* @return formatted mask string
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture:get(),249,254,"/**
* Calls platform-specific function to perform operation.
* @throws InterruptedException if interrupted while waiting
* @throws ExecutionException if execution failed.","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",117,120,"/**
* Invokes superclass's m1 method with provided listener and executor.
* @param listener callback to execute; must not be null
* @param executor thread pool to schedule execution on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService$DelegateService:toString(),89,92,"/**
* Calls the overloaded method in the service implementation class.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:<init>(java.util.concurrent.ScheduledExecutorService),544,547,"/**
* Initializes a ScheduledListening decorator with a scheduled executor service.
* @param delegate scheduled executor service to wrap
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.util.concurrent.Callable),45,48,"/**
* Wraps a callable in a future using an existing instance.
* @param task the task to be executed
* @return a ListenableFuture representing the result of the task
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,submitAndAddQueueListener,"com.google.common.util.concurrent.MoreExecutors:submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)",764,771,"/**
* Submits a callable task to the specified executor service and returns its ListenableFuture.
* @param executorService ListeningExecutorService instance
* @param task Callable task to execute
* @param queue BlockingQueue of Future objects
* @return ListenableFuture result or null if not found
*/",* Submits the task and adds a listener that adds the future to {@code queue} when it completes.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitRunning,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(java.time.Duration),213,216,"/**
 * Delegates service operation with custom timeout.
 * @param timeout maximum duration to wait for response
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitRunning,com.google.common.util.concurrent.AbstractIdleService:awaitRunning(java.time.Duration),177,180,"/**
* Calls superclass service with specified timeout.
* @param timeout maximum duration to wait before timing out
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitRunning,com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(java.time.Duration),468,471,"/**
* Calls superclass service with given timeout.
* @param timeout maximum time to wait before timeout
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(java.time.Duration),316,319,"/**
* Calls superclass's m1 with specified timeout. 
* @param timeout maximum time to wait for service completion
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitTerminated,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(java.time.Duration),237,240,"/**
* Invokes service method 1 with specified timeout.",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitTerminated,com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(java.time.Duration),201,204,"/**
 * Invokes service operation with provided timeout.
 * @param timeout maximum allowed duration
 */",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitTerminated,com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(java.time.Duration),492,495,"/**
* Calls superclass service method with given timeout.
* @param timeout time to wait before throwing TimeoutException
*/",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(java.time.Duration),351,354,"/**
 * Executes service operation with specified timeout.",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,doStart,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStart(),255,282,"/**
* Executes the masked task, handling exceptions and updating the running task.
* @throws Throwable any exception that occurs during execution
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:toString(),314,317,"/**
* Calls overridden implementation from parent service. 
* @return result of parent service's m1() call 
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:isSatisfied(),160,163,"/**
* Evaluates mask condition based on m1().m2(RUNNING).
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStartableGuard:isSatisfied(),132,135,"/**
* Checks if the current state matches the ""NEW"" mask. 
* @return true if in new state, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppableGuard:isSatisfied(),146,149,"/**
* Checks if mask is valid based on M1 and M2 values.
* @return true if mask is valid, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppedGuard:isSatisfied(),174,177,"/**
* Checks if the mask value is valid.
* @return true if the mask value is non-negative, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isRunning,com.google.common.util.concurrent.AbstractService:isRunning(),489,492,"/**
* Checks if the function is in running state.
* @return true if running, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,toString,com.google.common.util.concurrent.AbstractService:toString(),515,518,"/**
* Combines masked attributes with timestamp.
* @return formatted string of masked values and timestamp
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",41,58,"/**
* Creates a CollectionFuture from an iterable of ListenableFutures and a success requirement. 
* @param futures Iterable of ListenableFutures to combine
* @param allMustSucceed Whether all must succeed for the collection to complete successfully
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable)",38,46,"/**
* Combines multiple listenable futures into a single future.
* @param futures collection of futures to combine
* @param allMustSucceed whether all must succeed for the combined future
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable)",48,56,"/**
* Combines multiple ListenableFutures into a single future.
* @param futures collection of futures to combine
* @param allMustSucceed whether all must succeed for overall success
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,collectValueFromNonCancelledFuture,"com.google.common.util.concurrent.AggregateFuture:collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)",280,290,"/**
* Executes a masked operation on the given input with the specified index.
* @param index input index
* @param future Input object to be processed, returns null if not found
*/","* Collects the result (success or failure) of one input future. The input must not have been
   * cancelled. For details on when this is called, see {@link #collectOneValue}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAdd,com.google.common.util.concurrent.AtomicDouble:getAndAdd(double),163,166,"/**
* Calculates a value using the function m1 and summing operator.
* @param delta input value to be processed
*/","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,addAndGet,com.google.common.util.concurrent.AtomicDouble:addAndGet(double),174,177,"/**
* Computes FUNC_MASK value based on input delta.
* @param delta input value used in calculation
*/","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAdd,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAdd(int,double)",180,183,"/**
* Calculates function mask value using m1 function with sum aggregation.
* @param i input integer value
* @param delta input double value
*/","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,addAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:addAndGet(int,double)",192,195,"/**
* Calculates mask value using the sum of two functions.
* @param i input parameter
* @param delta difference factor
*/","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,cancel,com.google.common.util.concurrent.ClosingFuture:cancel(boolean),1099,1108,"/**
* Cancels the asynchronous task.
* @param mayInterruptIfRunning whether to interrupt running tasks
* @return true if cancellation was successful, false otherwise
*/","* Attempts to cancel execution of this step. This attempt will fail if the step has already
   * completed, has already been cancelled, or could not be cancelled for some other reason. If
   * successful, and this step has not started when {@code cancel} is called, this step should never
   * run.
   *
   * <p>If successful, causes the objects captured by this step (if already started) and its input
   * step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls
   * specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously.
   *
   * @param mayInterruptIfRunning {@code true} if the thread executing this task should be
   *     interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be
   *     cancelled regardless
   * @return {@code false} if the step could not be cancelled, typically because it has already
   *     completed normally; {@code true} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finalize,com.google.common.util.concurrent.ClosingFuture:finalize(),2119,2126,"/**
* Handles a closing future leak by logging an error and discarding the future.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,becomeSubsumedInto,com.google.common.util.concurrent.ClosingFuture:becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList),1121,1124,"/**
* Merges another list of closeables into this list.
* @param otherCloseables CloseableList to merge
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,findPathTo,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)",684,707,"/**
* Recursively builds example stack trace by traversing allowed prior locks.
* @param node current lock graph node
* @param seen set of previously visited nodes
* @return ExampleStackTrace object or null if not found
*/","* Performs a depth-first traversal of the graph edges defined by each node's {@code
     * allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}.
     *
     * @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the
     *     {@code lock}, or {@code null} if no path was found.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)",534,539,"/**
* Constructs a PotentialDeadlockException instance with the given nodes and conflicting stack trace.
* @param node1 first LockGraphNode
* @param node2 second LockGraphNode
* @param conflictingStackTrace ExampleStackTrace of the conflict",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,com.google.common.util.concurrent.ListenableFutureTask:create(java.util.concurrent.Callable),62,64,"/**
* Creates a ListenableFutureTask from a Callable.
* @param callable function to be executed
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Callable}.
   *
   * @param callable the callable task
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,"com.google.common.util.concurrent.ListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",76,79,"/**
* Wraps a Runnable into a ListenableFutureTask with the provided result.
* @param runnable task to execute
* @param result initial result value
*/","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,addListener,"com.google.common.util.concurrent.ListenableFutureTask:addListener(java.lang.Runnable,java.util.concurrent.Executor)",89,92,"/**
* Submits a Runnable task to the specified executor.
* @param listener Runnable task to execute
* @param exec Executor instance to run on
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,addListener,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:addListener(java.lang.Runnable,java.util.concurrent.Executor)",138,171,"/**
* Executes a Runnable on the specified Executor, handling delegates and listeners accordingly.
* @param listener Runnable to be executed
* @param exec Executor instance
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,done,com.google.common.util.concurrent.ListenableFutureTask:done(),110,113,"/**
* Executes mask-related business logic.
* @see executionList.m1() for specific implementation details 
*/",Internal implementation detail used to invoke the listeners.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,create,com.google.common.util.concurrent.ExecutionSequencer:create(),94,96,"/**
* Creates a new instance of ExecutionSequencer.
* @return ExecutionSequencer object
*/",Creates a new instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.ListenableFuture),133,137,"/**
* Converts a ListenableFuture to a FluentFuture, or wraps it if necessary.
* @param future the input future
* @return the converted or wrapped FluentFuture
*/","* Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}.
   *
   * <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned
   * directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the
   * original {@code ListenableFuture}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addFirst,com.google.common.collect.ForwardingDeque:addFirst(java.lang.Object),54,57,"/**
* Calls m1() and then passes its result to m2(E) with the provided parameter.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addLast,com.google.common.collect.ForwardingDeque:addLast(java.lang.Object),59,62,"/**
* Calls m2() on the result of m1(), passing the provided object. 
* @param e Object to be passed to m2() in m1()'s context
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,descendingIterator,com.google.common.collect.ForwardingDeque:descendingIterator(),64,67,"/**
* Delegates call to m1(), returning its iterator result.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getFirst,com.google.common.collect.ForwardingDeque:getFirst(),69,73,"/**
* Calls m1 to retrieve an instance of type E and then calls its m2 method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getLast,com.google.common.collect.ForwardingDeque:getLast(),75,79,"/**
* Calls m1() to retrieve an instance of type E and invokes its m2() method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerFirst,com.google.common.collect.ForwardingDeque:offerFirst(java.lang.Object),81,85,"/**
* Calls m1() and delegates execution of m2(E) to its result.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerLast,com.google.common.collect.ForwardingDeque:offerLast(java.lang.Object),87,91,"/**
* Delegate calls to m1() with provided parameter.
* @param e object to pass to m1()
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekFirst,com.google.common.collect.ForwardingDeque:peekFirst(),93,96,"/**
* Delegates to M1 method and returns its result.
* @return M1 method's return value or null if it is null.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekLast,com.google.common.collect.ForwardingDeque:peekLast(),98,101,"/**
* Calls m1() to fetch intermediate result and then calls m2() on it.
* @return E object or null if either m1() or m2() returns null
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollFirst,com.google.common.collect.ForwardingDeque:pollFirst(),103,107,"/**
* Calls m1() to fetch intermediate data and then calls its m2() method.
* @return Result of calling m1().m2(), or null if m1() returns null.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollLast,com.google.common.collect.ForwardingDeque:pollLast(),109,113,"/**
* Calls m1() to retrieve an intermediate result and then calls its m2() method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pop,com.google.common.collect.ForwardingDeque:pop(),115,120,"/**
* Calls m1() and delegates to its m2() method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,push,com.google.common.collect.ForwardingDeque:push(java.lang.Object),122,125,"/**
 * Calls m2() on an instance of m1(), passing the provided object as a parameter.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirst,com.google.common.collect.ForwardingDeque:removeFirst(),127,132,"/**
* Calls m1() and delegates to its m2() method.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLast,com.google.common.collect.ForwardingDeque:removeLast(),134,139,"/**
* Calls the nested method m2() on the result of m1().
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirstOccurrence,com.google.common.collect.ForwardingDeque:removeFirstOccurrence(java.lang.Object),141,145,"/**
* Invokes m2 on UserProfile object fetched by m1.
* @param o the object to pass to m2, or null if not applicable
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLastOccurrence,com.google.common.collect.ForwardingDeque:removeLastOccurrence(java.lang.Object),147,151,"/**
* Invokes nested 'm2' operation on result of 'm1'. 
* @param o input object to pass to 'm2'
* @return true if successful, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,delegate,com.google.common.collect.ForwardingQueue:delegate(),54,55,"/**
* Returns a queue of elements filtered by a mask.
* @return Queue of E objects that match the mask
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,addListener,"com.google.common.util.concurrent.ForwardingListenableFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",42,45,"/**
* Delegates execution of Runnable to an Executor, utilizing M1.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,delegate,com.google.common.util.concurrent.ForwardingFuture:delegate(),43,44,"/**
* Returns a future representing the result of this operation.
* @return Future containing the result or an exception.",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,nonCancellationPropagating,com.google.common.util.concurrent.Futures:nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture),785,793,"/**
* Wraps a given ListenableFuture with a NonCancellationPropagatingFuture.
* @param future input ListenableFuture to be wrapped
* @return the wrapped ListenableFuture
*/","* Returns a {@code ListenableFuture} whose result is set from the supplied future when it
   * completes. Cancelling the supplied future will also cancel the returned future, but cancelling
   * the returned future will have no effect on the supplied future.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader:reload(java.lang.Object,java.lang.Object)",96,101,"/**
* Performs asynchronous operation based on input key and value.
* @param key unique identifier for the operation
* @param oldValue legacy data to be updated or replaced
* @return ListenableFuture representing the outcome of the operation
*/","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object)",2182,2193,"/**
* Applies transformation function to input and returns result as a ListenableFuture.
* @param transformation function to apply to input
* @param input data to transform
* @return transformed result or null if not found (wrapped in ListenableFuture)
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,fullyFailedFuture,com.google.common.cache.LocalCache$LoadingValueReference:fullyFailedFuture(java.lang.Throwable),3529,3531,"/**
* Wraps the Throwable in a ListenableFuture.
* @param t exception to be wrapped
* @return ListenableFuture containing the exception
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,wrapAndThrowExceptionOrError,"com.google.common.util.concurrent.FuturesGetChecked:wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)",205,214,"/**
* Wraps or re-throws the given Throwable as a specific exception type.
* @param cause original exception
* @param exceptionClass class of the exception to be thrown
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,hasConstructorUsableByGetChecked,com.google.common.util.concurrent.FuturesGetChecked:hasConstructorUsableByGetChecked(java.lang.Class),221,229,"/**
* Checks if a custom exception class is enabled.
* @param exceptionClass the custom exception class to check
* @return true if the exception class is enabled, false otherwise
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event),89,91,"/**
 * Applies mask function to event and itself.
 * @param event Event object containing data to process
 */","* Enqueues an event to be run on currently known listeners.
   *
   * <p>The {@code toString} method of the Event itself will be used to describe the event in the
   * case of an error.
   *
   * @param event the callback to execute on {@link #dispatch}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,"com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String)",99,101,"/**
* Calls m1 function with given event and label parameters.
* @param event Event object of type L
* @param label Input string label
*/","* Enqueues an event to be run on currently known listeners, with a label.
   *
   * @param event the callback to execute on {@link #dispatch}
   * @param label a description of the event to use in the case of an error",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,dispatchListenerEvents,com.google.common.util.concurrent.AbstractService:dispatchListenerEvents(),524,528,"/**
* Triggers listener event if monitor condition is false.
* @param monitor monitor object
*/","* Attempts to execute all the listeners in {@link #listeners} while not holding the {@link
   * #monitor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,dispatchListenerEvents,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:dispatchListenerEvents(),752,757,"/**
* Executes listener operations while releasing the monitor. 
* @param monitor monitor object
*/",Attempts to execute all the listeners in {@link #listeners}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,signalNextWaiter,com.google.common.util.concurrent.Monitor:signalNextWaiter(),1090,1098,"/**
* Checks and updates each active guard based on a custom condition.
* @param activeGuards linked list of currently active guards
*/","* Signals some other thread waiting on a satisfied guard, if one exists.
   *
   * <p>We manage calls to this method carefully, to signal only when necessary, but never losing a
   * signal, which is the classic problem of this kind of concurrency construct. We must signal if
   * the current thread is about to relinquish the lock and may have changed the state protected by
   * the monitor, thereby causing some guard to be satisfied.
   *
   * <p>In addition, any thread that has been signalled when its guard was satisfied acquires the
   * responsibility of signalling the next thread when it again relinquishes the lock. Unlike a
   * normal Condition, there is no guarantee that an interrupted thread has not been signalled,
   * since the concurrency control must manage multiple Conditions. So this method must generally be
   * called when waits are interrupted.
   *
   * <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not
   * satisfied, it does *not* need to call this method before returning to wait. This can only
   * happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the
   * current thread can and returning the guard to the unsatisfied state. In the latter case the
   * other thread (last thread modifying the state protected by the monitor) takes over the
   * responsibility of signalling the next waiter.
   *
   * <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else
   * the current thread's guard might be mistakenly signalled, leading to a lost signal.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,toString,com.google.common.util.concurrent.RateLimiter:toString(),456,459,"/**
* Returns formatted rate limiter configuration string.
* @return stable rate in qps format as a string
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,newProxy,"com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",75,100,"/**
* Creates a proxy instance for the given interface type with specified timeout.
* @param target object to wrap
* @param interfaceType interface type to proxy
* @param timeoutDuration duration of timeout in specified unit
* @param timeoutUnit time unit for timeout duration
* @return proxied instance or null if creation fails
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,useDaemonThreadFactory,com.google.common.util.concurrent.MoreExecutors:useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor),291,299,"/**
* Configures thread factory with custom settings for the given ThreadPoolExecutor.
* @param executor ThreadPoolExecutor instance to configure
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,create,"com.google.common.util.concurrent.TimeoutFuture:create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",43,53,"/**
* Creates a timeout-enabled future from the given delegate future.
* @param delegate original future to be timed out
* @param time duration until timeout in specified unit
* @param unit time unit for timeout duration
* @param scheduledExecutor service scheduling the timer
* @return TimeoutFuture object or null if not found
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submitAsync,"com.google.common.util.concurrent.Futures:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",216,221,"/**
* Executes an asynchronous callable on a specified executor.
* @param callable asynchronous operation to execute
* @param executor thread pool for executing the operation
* @return ListenableFuture representing the operation's result
*/","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",243,260,"/**
* Schedules an asynchronous callable with a specified delay and returns the result as a ListenableFuture.
* @param callable asynchronous operation to execute
* @param delay duration to wait before executing the callable
* @param timeUnit unit of time for the delay
* @param executorService service scheduling the task
* @return ListenableFuture containing the result or null if not found
*/","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.util.concurrent.Callable),56,60,"/**
* Wraps a Callable in a RunnableFuture, enabling asynchronous execution.
* @param callable the input Callable to be wrapped
*/",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",189,194,"/**
* Executes a Callable on the specified Executor and returns its result as a ListenableFuture.
* @param callable function to execute
* @param executor thread pool to run the function in
* @return ListenableFuture containing the result or null if the function throws an exception
*/","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,"com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.lang.Runnable,java.lang.Object)",46,51,"/**
* Creates a future that wraps the given runnable and value.
* @param runnable task to be executed
* @param value associated data
* @return RunnableFuture containing result or null if not set
*/",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.lang.Runnable,java.util.concurrent.Executor)",203,208,"/**
* Executes a Runnable on a specified Executor.
* @param runnable the task to execute
* @param executor the executor service to use
* @return a ListenableFuture representing the asynchronous execution
*/","* Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that
   * will complete after execution.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration)",425,429,"/**
* Converts duration to nanoseconds and delegates to internal implementation.
* @param semaphore synchronization object
* @param timeout time limit for operation
*/","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,getEnumIfPresent,"com.google.common.base.Platform:getEnumIfPresent(java.lang.Class,java.lang.String)",41,54,"/**
* Retrieves an enum constant by name from the specified enum class, returning an empty Optional if not found.
* @param enumClass the target enum class
* @param value the name of the desired enum constant
* @return Optional containing the enum constant or an empty Optional if not found.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(java.lang.Iterable),124,126,"/**
* Initializes a new fluent iterator from an existing iterable.
* @param iterable input iterable to iterate over
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,first,com.google.common.collect.FluentIterable:first(),512,516,"/**
* Returns an Optional of the first element from iterator, 
* if present; otherwise returns empty Optional.
*/","* Returns an {@link Optional} containing the first element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link
   * Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}.
   *
   * @throws NullPointerException if the first element is null; if this is a possibility, use {@code
   *     iterator().next()} or {@link Iterables#getFirst} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,last,com.google.common.collect.FluentIterable:last(),529,562,"/**
* Retrieves the first element from an iterable, or returns a default value.
* @return The first element, or null if not found
*/","* Returns an {@link Optional} containing the last element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is
   * a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed
   * to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}.
   *
   * @throws NullPointerException if the last element is null; if this is a possibility, use {@link
   *     Iterables#getLast} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,tryFind,"com.google.common.collect.Iterators:tryFind(java.util.Iterator,com.google.common.base.Predicate)",775,785,"/**
* Filters an iterator of elements using a predicate and returns the first matching element.
* @param iterator iterable source
* @param predicate condition to match
* @return first matching element or empty if none found
*/","* Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the
   * given predicate, if such an element exists. If no such element is found, an empty {@link
   * Optional} will be returned from this method and the iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterator}, a NullPointerException will be thrown.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,expectedNodeCount,com.google.common.graph.GraphBuilder:expectedNodeCount(int),138,142,"/**
* Sets expected node count and returns this builder instance.
* @param expectedNodeCount the anticipated number of nodes in the graph
*/","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedNodeCount,com.google.common.graph.NetworkBuilder:expectedNodeCount(int),154,158,"/**
* Sets the expected node count and returns this builder instance.
* @param expectedNodeCount desired number of nodes in the network
*/","* Specifies the expected number of nodes in the network.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedEdgeCount,com.google.common.graph.NetworkBuilder:expectedEdgeCount(int),165,169,"/**
* Configures network builder with an expected edge count.
* @param expectedEdgeCount target number of edges in the graph
* @return NetworkBuilder instance for method chaining
*/","* Specifies the expected number of edges in the network.
   *
   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,expectedNodeCount,com.google.common.graph.ValueGraphBuilder:expectedNodeCount(int),142,146,"/**
* Configures graph builder to expect a specific node count.
* @param expectedNodeCount predicted number of nodes
*/","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ByteArrayByteSource:sizeIfKnown(),600,603,"/**
* Returns the mask value based on string length.
* @return Optional Long value or empty if invalid length.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$CharSequenceCharSource:lengthIfKnown(),565,568,"/**
* Returns a unique identifier mask as an optional Long value.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,sizeIfKnown,com.google.common.io.Files$FileByteSource:sizeIfKnown(),134,141,"/**
* Returns the function mask as an optional Long value.
* @return Optional.Long with function mask or empty if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,sizeIfKnown,com.google.common.io.MoreFiles$PathByteSource:sizeIfKnown(),126,143,"/**
* Retrieves and processes file attributes to determine a functional mask.
* @return an Optional containing the functional mask as a Long, or empty if failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstantUtf8,"com.google.common.net.MediaType:createConstantUtf8(java.lang.String,java.lang.String)",115,119,"/**
* Creates a MediaType object with specified type and subtype.
* @param type the media type (e.g. ""text"")
* @param subtype the media subtype (e.g. ""plain"")",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,any,"com.google.common.collect.Iterables:any(java.lang.Iterable,com.google.common.base.Predicate)",627,630,"/**
* Applies a predicate to elements in an iterable and returns true if all match.
* @param iterable input collection
* @param predicate condition to apply to each element
*/","* Returns {@code true} if any element in {@code iterable} satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,from,"com.google.common.base.SmallCharMatcher:from(java.util.BitSet,java.lang.String)",86,109,"/**
* Creates a CharMatcher for the given character set, returning true for any of its characters.
* @param chars BitSet containing desired characters
* @param description human-readable description of the matcher
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,containsPattern,com.google.common.base.Predicates:containsPattern(java.lang.String),291,294,"/**
 * Creates a predicate that matches any CharSequence containing the specified pattern. 
 * @param pattern regular expression pattern to match 
 */","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code Pattern.compile(pattern).matcher(arg).find()}
   *
   * @throws IllegalArgumentException if the pattern is invalid
   * @since 3.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$EntrySet:retainAll(java.util.Collection),557,560,"/**
 * Applies a series of transformations (m1, m2, m3) to the input collection and returns true if the result matches a certain mask.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$KeySet:retainAll(java.util.Collection),631,634,"/**
* Applies transformation chain to collection and returns true if result matches mask.
* @param c input collection of unknown type
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$Values:retainAll(java.util.Collection),658,661,"/**
* Applies functional mask to the given collection.
* @param c input collection to process
* @return true if processing is successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class)",167,174,"/**
* Recursively handles and re-throws an exception of type X.
* @param throwable the exception to be handled
* @param declaredType the expected exception type
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, or {@code declaredType}.
   *
   * <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link
   * #throwIfUnchecked}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType the single checked exception type declared by the calling method
   * @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked},
   *     which togther provide the same behavior except that they reject {@code null}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,flattenHierarchy,com.google.common.eventbus.SubscriberRegistry:flattenHierarchy(java.lang.Class),240,243,"/**
* Retrieves function masks for the given class.
* @param concreteClass Class to fetch function masks for
*/","* Flattens a class's type hierarchy into a set of {@code Class} objects including all
   * superclasses (transitively) and all interfaces implemented by these superclasses.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,platformThreadFactory,com.google.common.util.concurrent.MoreExecutors:platformThreadFactory(),783,800,"/**
* Retrieves the current request thread factory from App Engine's Thread Manager.
* @return ThreadFactory instance or throws an exception if retrieval fails
*/","* Returns a default thread factory used to create new threads.
   *
   * <p>When running on AppEngine with access to <a
   * href=""https://cloud.google.com/appengine/docs/standard/java/javadoc/"">AppEngine legacy
   * APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise,
   * it returns {@link Executors#defaultThreadFactory()}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,enqueueNotification,"com.google.common.cache.LocalCache$Segment:enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause)",2625,2636,"/**
* Updates removal statistics and notifies listeners of key-value pair removal.
* @param key unique key identifier (may be null)
* @param hash hash code for removed entry
* @param value associated value (may be null)
* @param weight weight of removed entry
* @param cause reason for removal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,spliterator,com.google.common.collect.AbstractTable$Values:spliterator(),212,215,"/**
* Returns a Spliterator instance for iterating over elements.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,spliterator,com.google.common.collect.ImmutableMapKeySet:spliterator(),53,56,"/**
* Returns a spliterator for iterating over K values in the map.
* @return Spliterator of K values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AsMapView:createValues(),901,904,"/**
* Returns a collection of V values based on the given set and function.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createValues,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createValues(),1604,1609,"/**
* Transforms multimap entries into V2 collection.
* @return Collection of transformed V2 objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,createValues,com.google.common.collect.Tables$TransformedTable:createValues(),505,508,"/**
 * Returns collection of V2 objects based on table data and function.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:remove(java.lang.Object),1441,1450,"/**
* Evaluates the mask for a given object, performing necessary operations.
* @param o Object to evaluate (can be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,remove,com.google.common.collect.Collections2$FilteredCollection:remove(java.lang.Object),195,198,"/**
* Combines result of filtered and unfiltered checks.
* @param element object to check
* @return true if both filters pass, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,contains,com.google.common.collect.FluentIterable:contains(java.lang.Object),356,358,"/**
* Checks equality between an object and all elements in this collection.
* @param target object to compare with collection elements
*/","* Returns {@code true} if this fluent iterable contains any object for which {@code
   * equals(target)} is true.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AsMapView:get(java.lang.Object),916,919,"/**
* Retrieves a value from the map using the provided key.
* @param key unique identifier or object to look up in the map
* @return mapped value of type V, or null if not found",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$NavigableAsMapView:get(java.lang.Object),1074,1077,"/**
* Retrieves value associated with specified key using m1 function.
* @param key object to look up (can be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate)",2235,2241,"/**
* Creates a filtered multimap by applying the given predicate to each entry.
* @param multimap original multimap
* @param entryPredicate filter criteria for entries
* @return Filtered Multimap with matching entries
*/","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",2067,2077,"/**
* Creates a filtered multimap by applying the provided predicate to keys.
* @param unfiltered original multimap
* @param keyPredicate predicate to filter keys
* @return FilteredKeyListMultimap instance or null if unfiltered is not applicable
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(java.lang.Class),431,434,"/**
* Creates a fluent iterable from an existing collection of objects, filtered by type. 
* @param type class to filter the iterable by
*/","* Returns the elements from this fluent iterable that are instances of class {@code type}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,"com.google.common.collect.Iterators$MergingIterator:<init>(java.lang.Iterable,java.util.Comparator)",1323,1338,"/**
* Merges multiple sorted iterables into a single sorted iterable.
* @param iterators Iterable of iterators to merge
* @param itemComparator Comparator for sorting merged items
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:entryIterator(),505,558,"/**
* Iterates over complement ranges based on the provided window.
* @return Iterator of entries containing a Cut and corresponding Range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:descendingEntryIterator(),560,620,"/**
* Generates an iterator of complement ranges based on the given window and starting point.
* @param startingPoint starting cut for range generation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:descendingEntryIterator(),402,431,"/**
* Iterates over candidate ranges based on the upper bound window.
* @return Iterator of Entry objects containing Cut and Range pairs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:removeAll(java.util.Collection),611,628,"/**
* Updates collection state based on new elements.
* @param c Collection to process
* @return true if collection contents changed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardRemoveAll,com.google.common.collect.ForwardingSet:standardRemoveAll(java.util.Collection),76,79,"/**
* Computes the mask value from the given collection.
* @param collection input collection to process
*/","* A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}.
   * If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAll,com.google.common.collect.Sets$ImprovedAbstractSet:removeAll(java.util.Collection),84,87,"/**
* Tests if collection is empty.
* @param c Collection to check
* @return true if collection is empty, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,clear,com.google.common.collect.Collections2$FilteredCollection:clear(),149,152,"/**
* Applies filtering predicate to unfiltered data.
* @param unfiltered input collection
* @param predicate filtering condition
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,removeAll,com.google.common.collect.FilteredMultimapValues:removeAll(java.util.Collection),76,81,"/**
* Applies mask function to collection elements.
* @param c input collection of unknown type
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,retainAll,com.google.common.collect.FilteredMultimapValues:retainAll(java.util.Collection),83,88,"/**
* Applies complex filter to collection using multimap and iterative transformations.
* @param c Collection of elements to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,replaceValues,"com.google.common.collect.AbstractMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",103,110,"/**
* Combines input values and fetches corresponding mask value.
* @param key unique identifier
* @param values collection of values to combine
* @return Collection of V objects or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.LinkedListMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Checks if a key exists in the given collection or iterator of values.
* @param key unique identifier to search for
* @param values Collection or Iterator of values to search in
* @return true if key is found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Iterable),66,72,"/**
* Creates an EnumMultiset from the given iterable of enum elements.
* @param elements iterable of enum elements to include in the multiset
* @return populated EnumMultiset object or null if iterable is empty
*/","* Creates a new {@code EnumMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain
   * @throws IllegalArgumentException if {@code elements} is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,addAll,com.google.common.collect.EvictingQueue:addAll(java.util.Collection),117,126,"/**
* Truncates collection to maximum allowed size and processes it.
* @param collection Collection of elements
* @return True if processed successfully, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newLinkedList,com.google.common.collect.Lists:newLinkedList(java.lang.Iterable),250,256,"/**
* Creates a linked list from an iterable of elements.
* @param elements iterable to be converted
* @return LinkedList containing the elements or null if empty
*/","* Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently
   * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have
   * spent a lot of time benchmarking your specific needs, use one of those instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly,
   * taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newArrayDeque,com.google.common.collect.Queues:newArrayDeque(java.lang.Iterable),80,87,"/**
* Creates an ArrayDeque from an iterable collection.
* @param elements input iterable containing elements to be added
* @return ArrayDeque instance or a new empty one if not iterable
*/","* Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order
   * they are returned by the iterable's iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newConcurrentLinkedQueue,com.google.common.collect.Queues:newConcurrentLinkedQueue(java.lang.Iterable),102,112,"/**
* Creates a ConcurrentLinkedQueue from an iterable or collection.
* @param elements the input iterable or collection
*/","* Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in
   * the order they are returned by the iterable's iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingDeque,com.google.common.collect.Queues:newLinkedBlockingDeque(java.lang.Iterable),146,155,"/**
* Converts an iterable to a linked blocking deque. 
* @param elements input iterable
* @return LinkedBlockingDeque object containing all elements
*/","* Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingQueue,com.google.common.collect.Queues:newLinkedBlockingQueue(java.lang.Iterable),185,194,"/**
* Creates a LinkedBlockingQueue from an iterable of elements.
* @param elements Iterable containing elements to add
*/","* Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @param elements the elements that the queue should contain, in order
   * @return a new {@code LinkedBlockingQueue} containing those elements",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityBlockingQueue,com.google.common.collect.Queues:newPriorityBlockingQueue(java.lang.Iterable),223,234,"/**
* Creates a priority blocking queue from an iterable of comparable elements.
* @param elements input iterable
*/","* Creates a {@code PriorityBlockingQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityQueue,com.google.common.collect.Queues:newPriorityQueue(java.lang.Iterable),259,268,"/**
* Creates a priority queue from an iterable of comparable elements.
* @param elements input iterable
*/","* Creates a {@code PriorityQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newEnumSet,"com.google.common.collect.Sets:newEnumSet(java.lang.Iterable,java.lang.Class)",159,164,"/**
* Creates an EnumSet from the given enumerable values.
* @param iterable iterable of enum elements
* @param elementType type of enum elements
* @return EnumSet containing all elements in the iterable
*/","* Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their
   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also
   * accepts non-{@code Collection} iterables and empty iterables.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(java.lang.Iterable),296,300,"/**
* Creates a set from the given iterable and merges it with an existing set.
* @param elements iterable to merge into the existing set
* @return merged set containing all unique elements
*/","* Creates a thread-safe set backed by a hash map and containing the given elements. The set is
   * backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency
   * guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @param elements the elements that the set should contain
   * @return a new thread-safe set containing those elements (minus duplicates)
   * @throws NullPointerException if {@code elements} or any of its contents is null
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSet,com.google.common.collect.Sets:newLinkedHashSet(java.lang.Iterable),337,346,"/**
* Creates a LinkedHashSet from the given iterable elements.
* @param elements input iterable
* @return LinkedHashSet of unique elements or null if invalid input
*/","* Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code LinkedHashSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.lang.Iterable),411,419,"/**
* Creates a sorted set from the given iterable of comparable elements.
* @param elements input collection to be sorted
* @return TreeSet containing unique sorted elements
*/","* Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their
   * natural ordering.
   *
   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)}
   * instead.
   *
   * <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this
   * method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code
   * TreeSet} with that comparator.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>This method is just a small convenience for creating an empty set and then calling {@link
   * Iterables#addAll}. This method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain
   * @return a new {@code TreeSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$BreadthFirstIterator:next(),288,293,"/**
* Processes queue element and applies transformation.
* @return transformed type T or null if not found",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,castOrCopyToCollection,com.google.common.collect.Iterables:castOrCopyToCollection(java.lang.Iterable),313,318,"/**
* Converts an Iterable to a Collection, or returns a List if necessary.
* @param iterable input iterable
* @return Collection of type E or List if not a Collection
*/","* Converts an iterable into a collection. If the iterable is already a collection, it is
   * returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the
   * iterable in the same iteration order.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,getCopy,com.google.common.collect.LinkedListMultimap:getCopy(java.lang.Object),648,650,"/**
* Retrieves a list of values associated with the given key.
* @param key unique identifier or search criteria
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.lang.Iterable),130,138,"/**
* Recursively creates an ArrayList from an iterable, using m1 and m2 helper methods.
* @param elements iterable to convert
* @return ArrayList containing elements or recursive result if not a Collection
*/","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(),3108,3112,"/**
* Calculates and returns an array of objects using the results of m1() and m2(). 
* @return Array of Objects or null if calculation fails.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(java.lang.Object[]),3114,3118,"/**
* Maps an array to a transformed array using a functional composition of m1() and m2(). 
* @param array input array to be mapped
* @return transformed array or null if transformation fails
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(),2958,2962,"/**
* Invokes nested operation m3() on result of m1(), which is then further processed by m2().",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(java.lang.Object[]),2964,2968,"/**
* Applies transformation to input array using result of m1() and returns transformed array.
* @param array input array to transform
* @return transformed array or null if failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:retainAll(java.util.Collection),967,978,"/**
* Updates the mask based on the provided collection.
* @param c Collection of column keys to process
* @return True if any changes were made, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:removeAll(java.util.Collection),998,1009,"/**
* Updates function mask based on the given collection.
* @param c Collection of elements to process
* @return True if changes were made, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:retainAll(java.util.Collection),1011,1022,"/**
* Updates function mask based on the given collection.
* @param c Collection of objects to update mask from
* @return True if mask was updated, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.lang.Iterable),225,230,"/**
* Creates a hash set from the given iterable of elements.
* @param elements collection or iterator of elements to include
*/","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link
   * Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toSet()}.)
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}
   * instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code HashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(),227,231,"/**
* Applies operation m3 to the result of applying m1 and then m2. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(java.lang.Object[]),233,237,"/**
* Applies transformation to input array using intermediate results from m1(). 
* @param array input array to be transformed
* @return transformed array or null if invalid input (nullness suppressed)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,allMatch,com.google.common.collect.FluentIterable:allMatch(com.google.common.base.Predicate),451,453,"/**
* Filters elements based on the provided predicate and returns true if any element matches. 
* @param predicate function to evaluate each element
*/","* Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this
   * fluent iterable is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,ceiling,com.google.common.collect.Sets$FilteredNavigableSet:ceiling(java.lang.Object),1366,1369,"/**
* Applies functional mask to input element using M1 and a predicate.
* @param e input element to process
* @return processed element or null if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,higher,com.google.common.collect.Sets$FilteredNavigableSet:higher(java.lang.Object),1371,1374,"/**
* Applies functional mask to input element using predicate and returns result. 
* @param e input element of type E
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(int),204,206,"/**
* Returns an iterator over elements from the specified index.
* @param start starting index (inclusive)
*/","* A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size},
   * {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link
   * #remove(int)}. If you override any of these methods, you may wish to override {@link
   * #listIterator(int)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:transform(java.lang.Object,java.util.Collection)",1621,1624,"/**
* Transforms V1 objects to V2 using the provided key and M1 transformer.
* @param key unique identifier for transformation
* @param values Collection of V1 objects to transform
* @return List of transformed V2 objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:transform(java.lang.Object,java.util.Collection)",1512,1519,"/**
* Applies transformation to a collection of V1 objects and returns the result as a Collection of V2.
* @param key unique identifier for transformation
* @param values input collection of V1 objects
* @return transformed collection of V2 objects or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.SortedSet,com.google.common.base.Function)",847,850,"/**
* Creates a sorted map view of the given set, applying the provided function to each key.
* @param set input sorted set
* @param function mapping function to apply to keys
* @return SortedMap<K, V> or null if not found
*/","* Returns a view of the sorted set as a map, mapping keys from the set according to the specified
   * function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeIncidentNodesMap,com.google.common.graph.AbstractNetwork:edgeIncidentNodesMap(com.google.common.graph.Network),323,325,"/**
* Computes mapping of endpoint pairs to edges in the network.
* @param network Network object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,edgeValueMap,com.google.common.graph.AbstractValueGraph:edgeValueMap(com.google.common.graph.ValueGraph),154,160,"/**
* Computes a map of endpoint pairs to values based on the input graph.
* @param graph ValueGraph instance
* @return Map<EndpointPair<N>, V> containing computed values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$NavigableKeySet:<init>(java.util.NavigableMap),4023,4025,"/**
 * Constructs a navigable key set from the given navigable map.
 * @param map the underlying navigable map
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3992,3995,"/**
* Retrieves a sorted set of keys within the specified range.
* @param fromElement start key (inclusive)
* @param toElement end key (exclusive)
* @return SortedSet of keys or empty set if range is invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$SortedKeySet:headSet(java.lang.Object),3997,4000,"/**
* Retrieves a sorted set of keys based on the given element.
* @param toElement key element used for sorting and filtering
* @return SortedSet of keys or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$SortedKeySet:tailSet(java.lang.Object),4002,4005,"/**
* Returns a sorted set of keys based on the provided element.
* @param fromElement key to start iteration from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,createKeySet,com.google.common.collect.StandardRowSortedTable$RowSortedMap:createKeySet(),102,105,"/**
* Returns a sorted set of function masks.
* @return Set of unique function mask values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,keySet,com.google.common.collect.TreeBasedTable$TreeRow:keySet(),202,205,"/**
* Returns a sorted set of function masks.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$ViewCachingAbstractMap:keySet(),3722,3726,"/**
* Returns a set of function masks.
* @return Set of K objects or null if not initialized
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$NavigableAsMapView:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1050,1057,"/**
* Retrieves a navigable map of key-value pairs within the specified range.
* @param fromKey starting key
* @param fromInclusive whether start is inclusive
* @param toKey ending key
* @param toInclusive whether end is inclusive
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$NavigableAsMapView:headMap(java.lang.Object,boolean)",1059,1062,"/**
* Retrieves a navigable map for the given key and inclusivity.
* @param toKey unique key to fetch
* @param inclusive whether to include key in range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$NavigableAsMapView:tailMap(java.lang.Object,boolean)",1064,1067,"/**
* Retrieves a navigable map of key-value pairs starting from the given key.
* @param fromKey starting key
* @param inclusive whether to include keys up to and including the start key
* @return NavigableMap containing key-value pairs or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$NavigableAsMapView:descendingMap(),1125,1128,"/**
* Returns a navigable map of key-value pairs based on specific criteria.
* @return A map with keys and values of type K and V respectively
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2270,2273,"/**
* Wraps a navigable map with transformed entries using the provided transformer.
* @param fromMap original map to transform
* @param transformer entry transformation function
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2013,2018,"/**
* Creates a new sorted map with transformed entries.
* @param fromMap source sorted map
* @param transformer entry transformation function
* @return SortedMap<K, V2> with transformed values
*/","* Returns a view of a sorted map whose values are derived from the original sorted map's entries.
   * In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableSortedMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""yes"" + key;
   *       }
   *     };
   * SortedMap<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.Map,com.google.common.base.Function)",1824,1829,"/**
* Applies a transformation function to each value in the input map.
* @param fromMap input map with keys of type K and values of type V1
* @param function function to apply to each value, returning new value of type V2
* @return new map with same keys but transformed values of type V2
*/","* Returns a view of a map where each value is transformed by a function. All other properties of
   * the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Map<String, Integer> map = ImmutableMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * Map<String, Double> transformed = Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createAsMap(),1521,1524,"/**
* Transforms multimap into map of collections with masked values.
* @return Map of K to Collections of V2 (masked values)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AbstractFilteredMap:createValues(),2898,2901,"/**
* Returns filtered collection of values based on predicate. 
* @return Collection of V objects matching the predicate",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$FilteredEntryNavigableMap:values(),3265,3268,"/**
* Returns a filtered collection of values based on the provided predicate.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$ViewCachingAbstractMap:values(),3734,3738,"/**
* Returns a collection of values, either from cache or by recalculating them.
* @return Collection of V values or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,contains,com.google.common.collect.AbstractBiMap$EntrySet:contains(java.lang.Object),437,440,"/**
* Applies mask function to input object.
* @param o input object to be masked
* @return true if masking is successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:contains(java.lang.Object),1008,1013,"/**
* Evaluates functional mask for input object.
* @param o input object to check
* @return true if object matches, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:remove(java.lang.Object),1032,1037,"/**
* Evaluates object against a functional mask.
* @param o object to be evaluated
* @return true if object matches the mask, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingEntry(java.lang.Object),2275,2278,"/**
* Retrieves an entry from cache using the provided key.
* @param key unique identifier to fetch associated value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:firstEntry(),2295,2298,"/**
* Retrieves a value from the internal data structure using a nested operation.
* @return an Entry object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorEntry(java.lang.Object),2300,2303,"/**
* Calls m3 with result of m1 and m2 on given key.
* @param key unique identifier
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherEntry(java.lang.Object),2320,2323,"/**
* Calls m2 on cached result of m1 and returns result from m3.
* @param key unique identifier for retrieval
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lastEntry(),2330,2333,"/**
 * Calls m2() on the result of m1(), then calls m3() with that result. 
 * @return Entry object or null if any step returns null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerEntry(java.lang.Object),2335,2338,"/**
* Calls M2 on the result of M1 and then calls M3 with the result.
* @param key unique identifier for lookup
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollFirstEntry(),2350,2353,"/**
* Computes and returns an Entry object using results from m1 and m3.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollLastEntry(),2355,2358,"/**
* Retrieves an Entry by delegating to m1(), then m3() on its result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.AbstractMapBasedMultiset:add(java.lang.Object,int)",264,284,"/**
* Updates the count of an element in the backing map.
* @param element element to update
* @param occurrences number of times to increment/decrement count
* @return previous count value
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.AbstractMapBasedMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes specified occurrences of an element from the map.
* @param element Object to remove
* @param occurrences Number of occurrences to remove (0 for removal count)
* @return Old occurrence count or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.HashMultiset:count(java.lang.Object),250,254,"/**
* Calculates a mask value based on element frequency.
* @param element object to calculate frequency for
* @return non-negative integer mask value or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.LinkedHashMultiset:count(java.lang.Object),250,254,"/**
* Calculates the functional mask value based on an input element.
* @param element input object to determine mask value
* @return int representing the calculated mask value or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.ImmutableTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
* Retrieves value for specific column in given row.
* @param rowKey unique identifier of the row
* @param columnKey name or index of the column to fetch
* @return Value associated with the column, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.StandardTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
* Calls superclass's m1 method only when both keys are non-null.
* @param rowKey primary key of the object
* @param columnKey secondary key of the object
* @return result from superclass's implementation or null if either key is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,add,"com.google.common.collect.ConcurrentHashMultiset:add(java.lang.Object,int)",205,252,"/**
* Computes the FUNC_MASK for an element with specified occurrences.
* @param element the element to compute for
* @param occurrences the number of times the element occurs
* @return a unique mask value or 0 if invalid
*/","* Adds a number of occurrences of the specified element to this multiset.
   *
   * @param element the element to add
   * @param occurrences the number of occurrences to add
   * @return the previous count of the element before the operation; possibly zero
   * @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount
   *     would exceed {@link Integer#MAX_VALUE}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,remove,"com.google.common.collect.ConcurrentHashMultiset:remove(java.lang.Object,int)",272,300,"/**
* Updates element occurrence counter.
* @param element object to update
* @param occurrences new occurrence count
* @return old occurrence count or 0 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$EntrySet:remove(java.lang.Object),4227,4238,"/**
* Evaluates a given object for specific conditions and performs an operation if met.
* @param o the object to evaluate
* @return true if conditions are met, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$Keys:remove(java.lang.Object,int)",1798,1822,"/**
* Updates user profile occurrences, adding or removing entries as needed.
* @param element UserProfile object to update
* @param occurrences number of times to add or remove the entry
* @return total count of occurrences after update
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.HashBasedTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
* Retrieves a value from the backing map using row and column keys.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @return Value object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$KeySet:remove(java.lang.Object),626,629,"/**
* Checks if table contains value.
*@param obj object to search in table
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column:remove(java.lang.Object),481,484,"/**
 * Fetches value from underlying table using given key.
 * @param key nullable object to retrieve value for
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.ImmutableTable:containsRow(java.lang.Object),43,46,"/**
* Checks if the given row key matches the filter criteria.
* @param rowKey unique identifier of the row to check
* @return true if the row matches, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.ImmutableTable:containsColumn(java.lang.Object),48,51,"/**
* Checks if a given column key matches the functional mask criteria.
* @param columnKey unique identifier of a column (can be null)
* @return true if the column is part of the functional mask, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.StandardTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
* Calls superclass's m1 with non-null keys.
* @param rowKey unique row identifier (or null)
* @param columnKey unique column identifier (or null)
* @return true if both keys are valid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.HashBasedTable:containsColumn(java.lang.Object),91,102,"/**
* Checks if a given column key matches any value in the backing map.
* @param columnKey object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.StandardTable$Column$EntrySet:isEmpty(),529,532,"/**
* Checks if the mask is enabled (returns true) or disabled (returns false).
* @return true if mask is enabled, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnKeySet:contains(java.lang.Object),753,756,"/**
 * Checks if an object matches the function mask.
 * @param obj the object to check (may be null)
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$ColumnMap:get(java.lang.Object),885,890,"/**
* Fetches value from map using provided key.
* @param key object to search for in map
* @return map with matching key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$ColumnMap:containsKey(java.lang.Object),892,895,"/**
* Checks if mask exists based on given key.
* @param key unique identifier or null to check all masks
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap:remove(java.lang.Object),897,900,"/**
* Returns a map of type R to V based on the given key.
* @param key the input object to determine the map value from (@Nullable)
* @return a map of type R to V or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.HashBasedTable:containsRow(java.lang.Object),104,107,"/**
* Checks if an object exists in backing map.
* @param rowKey unique identifier of object to check
* @return true if object found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$RowMap:containsKey(java.lang.Object),814,817,"/**
* Evaluates a function mask by calling the underlying m1() method.
* @param key input object to evaluate (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$RowMap:get(java.lang.Object),820,825,"/**
* Retrieves a map value by key using memoized functions.
* @param key object to fetch map value for
* @return Map with values of type C and V, or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1493,1498,"/**
* Creates a new multimap by applying the given transformation to each entry in the input map.
* @param fromMap the original multimap
* @param transformer function to transform values
* @return new multimap with transformed keys and values
*/","* Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's
   * entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's
   * entry-transformation logic may depend on the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableMultimap.of(""a"", 1, ""a"", 4, ""b"", 6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *         return key + value;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {""a""=[""a1"", ""a4""], ""b""=[""b6""]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.Multimap,com.google.common.base.Function)",1334,1341,"/**
* Applies a transformation to the values of a multimap.
* @param fromMultimap input multimap
* @param function mapping function for values
* @return transformed multimap with new key-value pairs
*/","* Returns a view of a multimap where each value is transformed by a function. All other
   * properties of the multimap, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 2, ""b"", -3, ""b"", -3, ""a"", 4, ""c"", 6);
   * Function<Integer, String> square = new Function<Integer, String>() {
   *     public String apply(Integer in) {
   *       return Integer.toString(in * in);
   *     }
   * };
   * Multimap<String, String> transformed =
   *     Multimaps.transformValues(multimap, square);
   *   System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.lang.Iterable),535,540,"/**
* Adds an iterable of elements to the builder.
* @param elements collection of elements to add
* @return this builder instance for method chaining
*/","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,java.util.Collection)",897,908,"/**
* Merges two multisets into one.
* @param self original multiset
* @param elements collection of elements to merge
*/",An implementation of {@link Multiset#addAll}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Object),417,422,"/**
* Checks whether this set contains the specified element.
* @param input element to search in this set
*/","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,indexOf,com.google.common.collect.RegularContiguousSet:indexOf(java.lang.Object),77,88,"/**
* Calculates a function mask based on the target object.
* @param target the object to process
* @return non-negative integer result or -1 if invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,nullableSynchronizedEntry,"com.google.common.collect.Synchronized:nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object)",1779,1787,"/**
* Creates a synchronized map entry from the given entry and mutex.
* @param entry the original map entry
* @param mutex synchronization object or null for no locking
* @return synchronized map entry or null if input was null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMap:<init>(java.util.Map,java.lang.Object)",1398,1400,"/**
* Wraps the provided map as a synchronized collection.
* @param delegate original map to synchronize
* @param mutex optional synchronization object (null for default locking)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedBiMap:<init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap)",1352,1356,"/**
* Constructs an SynchronizedBiMap from a BiMap and optional mutex and inverse.
* @param delegate original BiMap instance
* @param mutex synchronization object (null for no sync)
* @param inverse inverse BiMap (null if not provided)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedMap:<init>(java.util.SortedMap,java.lang.Object)",1285,1287,"/**
* Constructs a synchronized sorted map from a given sorted map and mutex.
* @param delegate underlying sorted map
* @param mutex synchronization object (may be null for no locking)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,map,"com.google.common.collect.Synchronized:map(java.util.Map,java.lang.Object)",1056,1060,"/**
* Creates a synchronized map instance from the given map and optional mutex.
* @param map input map
* @param mutex synchronization mutex (null for no synchronization)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedListMultimap:<init>(com.google.common.collect.ListMultimap,java.lang.Object)",793,795,"/**
* Creates a synchronized list multimap view.
* @param delegate underlying multimap instance
* @param mutex synchronization lock (may be null for no locking)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:<init>(com.google.common.collect.SetMultimap,java.lang.Object)",838,840,"/**
* Creates a synchronized multimap instance.
* @param delegate underlying multimap
* @param mutex synchronization lock (may be null for no locking)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multimap,"com.google.common.collect.Synchronized:multimap(com.google.common.collect.Multimap,java.lang.Object)",586,592,"/**
* Wraps a Multimap with synchronization for thread safety.
* @param multimap input multimap
* @param mutex synchronization lock (null if not needed)
* @return synchronized multimap or original if already thread-safe
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,table,"com.google.common.collect.Synchronized:table(com.google.common.collect.Table,java.lang.Object)",2033,2036,"/**
* Creates a synchronized table instance with the given mutex.
* @param table original table to synchronize
* @param mutex unique identifier for synchronization
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",71,84,"/**
* Creates a Collector for mapping data to a Table.
* @param rowFunction function to map input element to table row
* @param columnFunction function to map input element to table column
* @param valueFunction function to map input element to table value
* @param tableSupplier supplier of the resulting Table instance
*/","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, an {@code IllegalStateException}
   * is thrown when the collection operation is performed.
   *
   * <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,putAll,com.google.common.collect.Tables$TransposeTable:putAll(com.google.common.collect.Table),282,285,"/**
* Calls original method m2 with result of m1 on input table.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,computeNext,com.google.common.collect.TreeTraverser$PostOrderIterator:computeNext(),228,241,"/**
* Recursively applies post-order traversal and unwraps the result.
* @return object of type T or null if no result found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escapeSlow,"com.google.common.escape.UnicodeEscaper:escapeSlow(java.lang.String,int)",157,212,"/**
* Escapes special characters in a string, handling surrogate pairs.
* @param s input string
* @return escaped string representation or null if failed
*/","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * <p>This method is not reentrant and may only be invoked by the top level {@link
   * #escape(String)} method.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,of,com.google.common.graph.UndirectedMultiNetworkConnections:of(),49,52,"/**
* Creates an instance of UndirectedMultiNetworkConnections with a custom hash map.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removePredecessor,com.google.common.graph.DirectedGraphConnections:removePredecessor(java.lang.Object),427,451,"/**
* Updates node connections and predecessor count after removing a predecessor.
* @param node the node being updated
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addPredecessor,"com.google.common.graph.DirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",488,514,"/**
* Updates predecessor information for a node.
* @param node the node to update
* @param unused unused parameter
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removeSuccessor,com.google.common.graph.DirectedGraphConnections:removeSuccessor(java.lang.Object),453,486,"/**
* Removes and returns the value associated with a given node, handling different types of previous values.
* @param node Object representing the node to remove value from
* @return Removed value or null if not found/removed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addSuccessor,"com.google.common.graph.DirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)",516,544,"/**
* Retrieves the successor value for a given node, or generates a new one if not found.
* @param node adjacent node
* @param value associated value
* @return Successor value of type V, or null if generated",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,"com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)",77,93,"/**
* Initializes a StandardNetwork instance from builder and cache node/edge connections.
* @param builder network configuration parameters
* @param nodeConnections map of node connections (caches if expensive lookups)
* @param edgeToReferenceNode map of edge to reference node
*/","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node and edge maps.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,"com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)",68,81,"/**
* Constructs a StandardValueGraph with the specified builder and node connections.
* @param builder Abstract graph builder
* @param nodeConnections map of node connections
* @param edgeCount total number of edges in the graph
*/","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node map.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeEdge,com.google.common.graph.StandardMutableNetwork:removeEdge(java.lang.Object),146,164,"/**
* Updates mask for the given edge and its nodes.
* @param edge edge to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeNode,com.google.common.graph.StandardMutableValueGraph:removeNode(java.lang.Object),119,158,"/**
* Updates graph mask for a given node.
* @param node Node to update
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,"com.google.common.graph.StandardMutableValueGraph:removeEdge(java.lang.Object,java.lang.Object)",160,178,"/**
* Computes and updates the FUNC_MASK for two nodes.
* @param nodeU first node
* @param nodeV second node
* @return previous value of FUNC_MASK or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedReferenceNode,com.google.common.graph.StandardNetwork:checkedReferenceNode(java.lang.Object),187,194,"/**
* Retrieves the reference node for a given edge.
* @param edge edge object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,readResolve,com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:readResolve(),136,138,"/**
* Generates function mask based on canonical charset name.
* @return Function mask object or null if invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copy,"com.google.common.io.CharStreams:copy(java.lang.Readable,java.lang.Appendable)",68,92,"/**
* Calculates the total length of data written from one readable source to another appendable target.
* @param from source of data
* @param to destination for data output
* @return total length of written data or 0 if failed
*/","* Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not
   * close or flush either object.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding:decode(java.lang.CharSequence),215,221,"/**
* Encodes input CharSequence into a byte array using m1, throwing exception on decoding error.
*/","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws IllegalArgumentException if the input is not a valid encoded string according to this
   *     encoding.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,ceilingPowerOfTwo,com.google.common.math.BigIntegerMath:ceilingPowerOfTwo(java.math.BigInteger),56,58,"/**
* Computes the functional mask of a given number.
* @param x input number
* @return functional mask as a BigInteger","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,floorPowerOfTwo,com.google.common.math.BigIntegerMath:floorPowerOfTwo(java.math.BigInteger),67,69,"/**
* Computes the mask value by applying m1 function and then squaring the result. 
* @param x input value for m1 function application
*/","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * BigInteger.valueOf(2).pow(log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,getInstance,com.google.common.collect.MutableClassToInstanceMap:getInstance(java.lang.Class),176,179,"/**
* Returns an instance of given type with mask applied.
* @param type Class to instantiate and apply mask to
* @return Instance of type or null if instantiation fails 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,of,"com.google.common.reflect.ClassPath$ResourceInfo:of(java.io.File,java.lang.String,java.lang.ClassLoader)",209,215,"/**
* Returns a ResourceInfo object for the given file and name,
* or a ClassInfo object if the file has a class extension.
* @param file File object
* @param resourceName String identifier
* @param loader ClassLoader instance
* @return ResourceInfo or ClassInfo object, or null on error
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Constructor),80,82,"/**
* Creates an invokable instance from a constructor.
* @param constructor constructor to wrap
*/",Returns {@link Invokable} of {@code constructor}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Method),75,77,"/**
* Creates an invokable instance for the given method.
* @param method target method to create invokable for
*/",Returns {@link Invokable} of {@code method}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,map,"com.google.common.reflect.TypeResolver$TypeMappingIntrospector:map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)",416,437,"/**
* Updates or adds mapping between variable and type.
* @param var TypeVariableKey to update
* @param arg related Type object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,create,"com.google.common.util.concurrent.AbstractCatchingFuture:create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",42,50,"/**
* Wraps a ListenableFuture with exception handling and fallback functionality.
* @param input original future to transform
* @param exceptionType type of exceptions to catch
* @param fallback function to apply if an exception occurs
* @param executor execution context for the transformation
* @return transformed ListenableFuture or null on failure",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,complete,"com.google.common.util.concurrent.AbstractFuture:complete(com.google.common.util.concurrent.AbstractFuture,boolean)",710,772,"/**
* Resolves listener chain and executes tasks.
* @param param AbstractFuture object
* @param callInterruptTask whether to interrupt task execution
*/",Unblocks all threads and runs all listeners.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,create,"com.google.common.util.concurrent.AbstractTransformFuture:create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",48,53,"/**
* Applies a function to the result of an asynchronous operation.
* @param input asynchronous input
* @param function transformation function
* @param executor executor for the transform operation
* @return transformed result as a ListenableFuture
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,addAndGet,"com.google.common.util.concurrent.AtomicLongMap:addAndGet(java.lang.Object,long)",108,111,"/**
* Calculates mask value using provided key and delta.
* @param key input key
* @param delta delta to apply
*/","* Adds {@code delta} to the value currently associated with {@code key}, and returns the new
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAdd,"com.google.common.util.concurrent.AtomicLongMap:getAndAdd(java.lang.Object,long)",133,136,"/**
* Calculates the updated mask value based on the provided key and delta.
* @param key unique identifier or mask value
* @param delta incremental change to apply
*/","* Adds {@code delta} to the value currently associated with {@code key}, and returns the old
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,putAll,com.google.common.util.concurrent.AtomicLongMap:putAll(java.util.Map),219,221,"/**
* Applies mask to input map using provided put operation. 
* @param m input map with key-value pairs to be masked 
*/","* Copies all of the mappings from the specified map to this map. The effect of this call is
   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key
   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined
   * if the specified map is modified while the operation is in progress.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",73,79,"/**
* Executes a function with timeout and returns result.
* @param callable the function to execute
* @param timeoutDuration duration of execution timeout
* @param timeoutUnit unit of time for timeout duration
* @return T result of function or null if timed out
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,run,com.google.common.util.concurrent.TrustedListenableFutureTask:run(),76,87,"/**
* Clears and executes the current task, if any.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",102,107,"/**
* Applies mask operation to an edge, optionally skipping self-loops.
* @param edge the edge to process
* @param node the node associated with the edge
* @param isSelfLoop whether the edge connects a node to itself
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractBaseGraph:incidentEdgeOrder(),101,104,"/**
* Returns the mask element order with value 1.
* @return ElementOrder object representing the mask element order
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableGraph:incidentEdgeOrder(),79,82,"/**
* Returns the mask element order.
* @return The default mask element order.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableValueGraph:incidentEdgeOrder(),74,77,"/**
* Returns an ElementOrder with mask value 1.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraphBuilder.java,<init>,com.google.common.graph.AbstractGraphBuilder:<init>(boolean),40,42,"/**
* Initializes an abstract graph builder with directionality.
* @param directed true to create a directed graph, false otherwise
*/","* Creates a new instance with the specified edge directionality.
   *
   * @param directed if true, creates an instance for graphs whose edges are each directed; if
   *     false, creates an instance for graphs whose edges are each undirected.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,addListener,"com.google.common.util.concurrent.ListenerCallQueue:addListener(java.lang.Object,java.util.concurrent.Executor)",75,79,"/**
* Initializes and registers listener and executor instances.
* @param listener event listener instance
* @param executor thread executor instance
*/","* Adds a listener that will be called using the given executor when events are later {@link
   * #enqueue enqueued} and {@link #dispatch dispatched}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ConverterComposition:correctedDoForward(java.lang.Object),412,415,"/**
* Calls nested function m1 on wrapped objects first and second, then invokes it on result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ReverseConverter:correctedDoBackward(java.lang.Object),337,340,"/**
* Applies mask logic to input value 'a' and returns result.
* @param a input value to be processed (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convert,com.google.common.base.Converter:convert(java.lang.Object),196,198,"/**
* Applies mask function to input value.
* @param a input value (may be null)
* @return result of applying mask function or null if input is null
*/","* Returns a representation of {@code a} as an instance of type {@code B}.
   *
   * @return the converted value; is null <i>if and only if</i> {@code a} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ConverterComposition:correctedDoBackward(java.lang.Object),417,420,"/**
* Recursively applies method m1 to input object 'c'.
* @param c input object of type C (may be null)
* @return result of recursive operation or null if input is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ReverseConverter:correctedDoForward(java.lang.Object),332,335,"/**
* Applies mask to input value B and returns result.
* @param b input value to be masked
* @return masked value or null if invalid input
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(),240,242,"/**
* Initializes compact hash map with default size.
*/",Constructs a new empty instance of {@code CompactHashMap}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(int),249,251,"/**
* Initializes a compact HashMap with the specified expected size.
* @param expectedSize anticipated number of key-value pairs.","* Constructs a new instance of {@code CompactHashMap} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,init,com.google.common.collect.CompactLinkedHashMap:init(int),115,120,"/**
* Initializes first and last entry indices based on provided size.
* @param expectedSize expected number of entries in the list
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(),205,207,"/**
* Initializes a compact hash set with default size.
*/",Constructs a new empty instance of {@code CompactHashSet}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(int),214,216,"/**
* Initializes a compact hash set with reserved memory space.
* @param expectedSize estimated number of elements to store
*/","* Constructs a new instance of {@code CompactHashSet} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashSet}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,init,com.google.common.collect.CompactLinkedHashSet:init(int),132,137,"/**
* Initializes entry points for iteration.
* @param expectedSize size of expected data
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$FastMatcher:negate(),970,973,"/**
* Returns a negated FastMatcher instance.
* @return matcher that matches any character except those matched by this instance.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$AnyOf:negate(),373,376,"/**
* Returns a negated character matcher.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaLetter:negate(),373,376,"/**
* Returns a negated CharMatcher instance to match any character except those matched by this.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaUpperCase:negate(),373,376,"/**
* Returns a negated char matcher.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$Or:negate(),373,376,"/**
* Returns a negated char matcher instance.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$RangesMatcher:negate(),373,376,"/**
* Returns a negated CharMatcher instance.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getSimpleName,com.google.common.reflect.ClassPath$ClassInfo:getSimpleName(),330,345,"/**
* Extracts and formats class name with mask.
* @return formatted class name or original class name
*/","* Returns the simple name of the underlying class as given in the source code.
     *
     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be
     * loaded.
     *
     * <p>But note that this class uses heuristics to identify the simple name. See a related
     * discussion in <a href=""https://github.com/google/guava/issues/3349"">issue 3349</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,stats,com.google.common.cache.LocalCache$LocalManualCache:stats(),4907,4915,"/**
* Calculates aggregate cache statistics.
* @return CacheStats object with aggregated metrics
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomListMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",341,344,"/**
* Initializes a custom multimap using a user-provided list factory.
* @param map underlying map of keys to values
* @param factory supplier for creating new lists
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedSetMultimap:<init>(java.util.Map),47,49,"/**
* Constructs an AbstractSortedSetMultimap from a map of key to value collections.","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",427,430,"/**
* Initializes a custom multimap with a given map and set factory.
* @param map underlying map
* @param factory supplier of sets for each group in the multimap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newMultimap,"com.google.common.collect.Multimaps:newMultimap(java.util.Map,com.google.common.base.Supplier)",211,214,"/**
* Creates a custom multimap instance from the given map and collection factory.
* @param map initial key-value mappings
* @param factory supplier for creating new collections
* @return Multimap<K, V> instance or null if not created
*/","* Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are
   * generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small
   * number of users will need this method to cover map or collection types that {@link
   * MultimapBuilder} does not support.
   *
   * <p><b>Warning: do not use</b> this method when the collections returned by {@code factory}
   * implement either {@link List} or {@code Set}! Use the more specific method {@link
   * #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid
   * very surprising behavior from {@link Multimap#equals}.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by
   * {@code factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link
   * HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link
   * LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the collections
   * returned by {@code factory}. Those objects should not be manually updated and they should not
   * use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty collections that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(),39,41,"/**
* Returns an empty HashMultiset instance. 
* @return An empty multiset with default settings.","Creates a new, empty {@code HashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(),47,49,"/**
* Creates an empty LinkedHashMultiset instance.","Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSpliterator,com.google.common.collect.ArrayTable:cellSpliterator(),559,563,"/**
* Creates a spliterator for iterating over cells in the grid.
* @return Spliterator of Cell objects with specified ordering and filtering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$EntrySetView:spliterator(),818,825,"/**
* Returns a spliterator for the map entries.
* @return Spliterator of Entry objects or null if the map is empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableList:spliterator(),611,614,"/**
* Returns a spliterator that iterates over elements with specific characteristics.
* @return Spliterator object for iterating elements with custom characteristics.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,spliterator,com.google.common.collect.ImmutableSet$Indexed:spliterator(),343,346,"/**
* Returns a spliterator over elements with specified characteristics.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,spliterator,com.google.common.collect.IndexedImmutableSet:spliterator(),37,40,"/**
* Returns a spliterator to iterate over elements of type E.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,"com.google.common.collect.EnumMultiset:create(java.lang.Iterable,java.lang.Class)",80,84,"/**
* Creates and populates an EnumMultiset from the given iterable of enum elements.
* @param elements iterable of enum elements to add
* @param type enum class defining the element types
* @return populated EnumMultiset instance
*/","* Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link
   * EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,<init>,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:<init>(),58,60,"/**
* Initializes CRC-32C hasher with 16 bytes.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,<init>,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:<init>(int),95,100,"/**
* Initializes a new instance of the Murmur3_128Hasher with a given seed value.
* @param seed initial hash value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction$SipHasher:<init>(int,int,long,long)",121,129,"/**
* Initializes SipHasher with parameters: chunk size, and two 64-bit keys.
* @param c chunk size for hashing
* @param d reserved for future use (currently ignored)
* @param k0 first 64-bit key for mixing
* @param k1 second 64-bit key for mixing",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationStandardDeviation,com.google.common.math.Stats:populationStandardDeviation(),317,319,"/**
* Calculates a value using m1 and m2 mathematical functions. 
* @return result of m2(m1()) operation
*/","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleStandardDeviation,com.google.common.math.Stats:sampleStandardDeviation(),363,365,"/**
 * Calculates the result of the FUNC_MASK mathematical function using m1 and m2 functions.
 */","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationStandardDeviation,com.google.common.math.StatsAccumulator:populationStandardDeviation(),310,312,"/**
* Calculates the function value using m1 and m2 methods.
* @return the result of Math.m2(m1()) operation
*/","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleStandardDeviation,com.google.common.math.StatsAccumulator:sampleStandardDeviation(),356,358,"/**
* Calculates and returns the result of Math.m2 applied to m1(). 
* @return result of Math.m2(m1())","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,noneOf,com.google.common.base.CharMatcher:noneOf(java.lang.CharSequence),333,335,"/**
* Computes and returns a CharMatcher from the given CharSequence.
* @param sequence input string to process
*/","* Returns a {@code char} matcher that matches any BMP character not present in the given
   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,converterTo,com.google.common.base.CaseFormat:converterTo(com.google.common.base.CaseFormat),163,165,"/**
* Creates a converter to mask strings in the specified case format.
* @param targetFormat desired output case format
*/","* Returns a serializable {@code Converter} that converts strings from this format to {@code
   * targetFormat}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter:doAndThen(com.google.common.base.Converter),381,383,"/**
* Composes this converter with another to create a new one that applies both.
* @param secondConverter Converter to apply after this one
*/",Package-private non-final implementation of andThen() so only we can override it.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,reverse,com.google.common.base.Converter:reverse(),301,305,"/**
* Creates or retrieves the mask converter.
* @return Converter instance for masking values
*/","* Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a
   * value roughly equivalent to {@code a}.
   *
   * <p>The returned converter is serializable if {@code this} converter is.
   *
   * <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,stringConverter,com.google.common.base.Enums:stringConverter(java.lang.Class),105,107,"/**
* Creates a converter from string to enum value.
* @param enumClass Class of enum values to convert to
*/","* Returns a serializable converter that converts between strings and {@code enum} values of type
   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The
   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of any
   * enum constant in the specified enum.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asConverter,com.google.common.collect.Maps:asConverter(com.google.common.collect.BiMap),1599,1601,"/**
* Creates a Converter instance from a BiMap.
* @param bimap Bi-map containing mapping between types A and B
*/","* Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose
   * inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}.
   *
   * <p>To use a plain {@link Map} as a {@link Function}, see {@link
   * com.google.common.base.Functions#forMap(Map)} or {@link
   * com.google.common.base.Functions#forMap(Map, Object)}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,drainValueReferenceQueue,com.google.common.collect.MapMakerInternalMap$Segment:drainValueReferenceQueue(java.lang.ref.ReferenceQueue),1386,1398,"/**
* Drains and processes weak references from the queue.
* @param valueReferenceQueue reference queue to drain
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardEquals,com.google.common.collect.ForwardingList:standardEquals(java.lang.Object),225,227,"/**
* Checks if an object matches the current instance's mask.
* @param object object to check
*/","* A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link
   * #iterator}. If you override either of those methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,equals,com.google.common.collect.ImmutableList:equals(java.lang.Object),706,709,"/**
* Checks if an object matches the current instance's mask.
* @param obj the object to check
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.lang.Iterable),104,108,"/**
* Creates a concurrent hash multiset from the given iterable of elements.
* @param elements input collection of elements to add
*/","* Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the
   * default initial capacity, load factor, and concurrency settings.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Object[])",120,126,"/**
* Converts object array to list and appends it to the given Appendable.
* @param appendable target Appendable for appending data
* @param parts input array of objects to convert and append
* @return the provided Appendable instance (no change)
* @throws IOException if an I/O error occurs during appending
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",141,144,"/**
* Combines iterable parts into a StringBuilder.
* @param builder initial StringBuilder instance
* @param parts iterable parts to append
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.util.Iterator),249,251,"/**
* Concatenates iterator of string parts into a single mask value.
* @param parts iterable collection of string components
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Map),476,478,"/**
* Recursively fetches and returns the value from the nested Map.
* @param map input map with potential nested maps
*/","* Returns a string containing the string representation of each entry of {@code map}, using the
     * previously configured separator and key-value separator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toString,com.google.common.cache.CacheBuilderSpec:toString(),236,239,"/**
* Combines user data with calculated values using MoreObjects.
* @return combined string representation
*/","* Returns a string representation for this CacheBuilderSpec instance. The form of this
   * representation is not guaranteed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,toString,com.google.common.eventbus.EventBus:toString(),269,272,"/**
* Calls m3 on the result of m2 applied to identifier.
* @return result of m3 call or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,toString,com.google.common.util.concurrent.Futures$CallbackListener:toString(),1135,1138,"/**
* Composes and executes an M3 operation sequence.
* @return result of the composed operation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,toString,com.google.common.eventbus.DeadEvent:toString(),66,69,"/**
* Composes and executes a chain of object transformations.
* @return transformed string representation or null if failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,toString,com.google.common.graph.ElementOrder:toString(),179,186,"/**
* Formats object details with optional comparator information.
* @return human-readable string representation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,toString,com.google.common.util.concurrent.ClosingFuture:toString(),2113,2117,"/**
* Performs complex data processing and returns result as a string.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,toString,com.google.common.base.Predicates$ContainsPatternPredicate:toString(),763,771,"/**
* Generates a predicate string for contains match.
* @return String representation of the predicate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,toString,com.google.common.collect.MapMaker:toString(),294,313,"/**
* Formats object properties into a string representation.
*@return human-readable string description of the object
*/","* Returns a string representation for this MapMaker instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,toString,com.google.common.cache.CacheBuilder:toString(),1076,1113,"/**
* Generates string representation of object, including its attributes.
*/","* Returns a string representation for this CacheBuilder instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,toString,com.google.common.cache.CacheStats:toString(),293,303,"/**
* Constructs and returns a String representation of this object.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap:<init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)",168,202,"/**
* Initializes the internal map with specified parameters.
* @param builder MapMaker configuration
* @param entryHelper InternalEntryHelper instance
*/","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromJavaUtil,com.google.common.base.Optional:fromJavaUtil(java.util.Optional),129,133,"/**
* Applies mask function to an optional value.
* @param javaUtilOptional input value with potential null
* @return masked value or null if input is null
*/","* Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code
   * java.util.Optional}, or {@code null} if the argument is null.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable$2:<init>(java.lang.Iterable),124,126,"/**
* Initializes FluentIterable from an existing Iterable.
* @param iterable input collection to be iterated over
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,<init>,com.google.common.collect.Iterables$UnmodifiableIterable:<init>(java.lang.Iterable),101,103,"/**
 * Constructs an unmodifiable view of the given iterable.
 * @param iterable the underlying iterable to wrap
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ConcatenatedByteSource:sizeIfKnown(),696,723,"/**
* Calculates total size of all sources, combining known sizes.
* @return total size or Long.MAX_VALUE if overflow occurs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$SlicedByteSource:sizeIfKnown(),544,553,"/**
* Calculates total length of data with sliced size.
* @return total length in bytes or empty if not available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$ConcatenatedCharSource:lengthIfKnown(),710,721,"/**
* Calculates total length of all CharSources.
* @return Total length in bytes or null if any source is unknown
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addPendingString,com.google.common.util.concurrent.AbstractFuture:addPendingString(java.lang.StringBuilder),893,934,"/**
* Formats StringBuilder with pending status and optional future or exception details.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromParts,"com.google.common.net.HostAndPort:fromParts(java.lang.String,int)",133,138,"/**
* Parses and validates host and port string.
* @param host input hostname
* @param port input port number
* @return HostAndPort object with validated hostname and port
*/","* Build a HostAndPort instance from separate host and port values.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host string to parse. Must not contain a port number.
   * @param port a port number from [0..65535]
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out
   *     of range.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromHost,com.google.common.net.HostAndPort:fromHost(java.lang.String),151,155,"/**
* Parses and validates a host string, returning the associated HostAndPort object.
* @param host input host string
* @return HostAndPort object or null if invalid
*/","* Build a HostAndPort instance from a host only.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host-only string to parse. Must not contain a port number.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number.
   * @since 17.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int)",765,771,"/**
* Retrieves an element from the iterable at the specified position.
* @param iterable input collection
* @param position index of desired element
* @return T object or null if out of bounds
*/","* Returns the element at the specified position in an iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws
   * {@code NoSuchElementException} if out of bounds)
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterable}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of {@code iterable}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,copy,com.google.common.hash.BloomFilter:copy(),148,150,"/**
* Creates a Bloom filter instance with pre-computed hash functions and bit array.
* @param bits pre-computed bit array
* @param numHashFunctions number of hash functions to use
* @param funnel functor function for hashing
* @param strategy strategy object for bloom filter configuration
*/","* Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to
   * this instance but shares no mutable state.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,<init>,"com.google.common.graph.DirectedMultiNetworkConnections:<init>(java.util.Map,java.util.Map,int)",44,47,"/**
* Initializes a directed multigraph network with specified edges and self-loops.
* @param inEdges map of incoming edges
* @param outEdges map of outgoing edges
* @param selfLoopCount count of self-loops to include
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,<init>,"com.google.common.graph.DirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",37,39,"/**
* Initializes directed network connections with edge maps and self-loop count.
* @param inEdgeMap map of incoming edges
* @param outEdgeMap map of outgoing edges
* @param selfLoopCount number of self-loops in the graph
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",104,112,"/**
* Calculates and processes a node based on the given edge and self-loop flag.
* @param edge graph edge to process
* @param isSelfLoop whether the edge represents a self-loop
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,of,com.google.common.graph.DirectedGraphConnections:of(com.google.common.graph.ElementOrder),155,176,"/**
* Creates a DirectedGraphConnections instance based on the given incident edge order.
* @param incidentEdgeOrder specifies the ordering of incident edges
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",124,131,"/**
* Calls superclass method and processes edge/node relationships.
* @param edge Graph element
* @param node Node to process
* @param isSelfLoop Whether the edge forms a self-loop
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(int),302,307,"/**
* Calculates mask value based on permits, converting to seconds.
* @param permits number of permits
* @return mask value in seconds
*/","* Acquires the given number of permits from this {@code RateLimiter}, blocking until the request
   * can be granted. Tells the amount of time slept, if any.
   *
   * @param permits the number of permits to acquire
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(java.time.Duration),334,336,"/**
* Converts duration to nanoseconds and passes to m2.
* @param timeout duration to convert
*/","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(long,java.util.concurrent.TimeUnit)",350,353,"/**
* Converts timeout to seconds and delegates to m1(long, long, TimeUnit). 
* @param timeout time in specified unit
* @param unit time unit of timeout (e.g. SECONDS, MINUTES)
*/","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(int),365,367,"/**
* Calculates remaining time based on given permits.
* @param permits number of allowed operations
*/","* Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}.
   *
   * @param permits the number of permits to acquire
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(),378,380,"/**
* Triggers timer with specified delay and timeout. 
* @return true if triggered successfully
*/","* Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without
   * delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(1)}.
   *
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,java.time.Duration)",393,395,"/**
* Calculates availability with given permits and timeout.
* @param permits number of available resources
* @param timeout maximum wait duration
*/","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,"com.google.common.util.concurrent.Monitor:enter(long,java.util.concurrent.TimeUnit)",400,423,"/**
* Attempts to acquire lock with specified timeout.
* @param time timeout duration
* @param unit TimeUnit for time parameter
* @return true if acquired or interrupted, false otherwise
*/","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService:<init>(),195,195,"/**
* Constructor for AbstractService class. 
* Must be called by subclasses to initialize services. 
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isIntact,com.google.common.collect.MinMaxPriorityQueue:isIntact(),503,511,"/**
* Verifies function mask integrity by checking m1 and m2 values for all indices.
* @return true if function mask is valid, false otherwise
*/","* Returns {@code true} if the MinMax heap structure holds. This is only used in testing.
   *
   * <p>TODO(kevinb): move to the test class?",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toCacheBuilder,com.google.common.cache.CacheBuilderSpec:toCacheBuilder(),172,221,"/**
* Configures a CacheBuilder with various parameters.
* @return configured CacheBuilder instance
*/",Returns a CacheBuilder configured according to this instance's specification.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,build,com.google.common.collect.Interners$InternerBuilder:build(),85,90,"/**
* Creates an Interner instance with custom map implementation.
* @return Interner object or null if strong mode is enabled
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,tryWeakKeys,com.google.common.collect.Platform:tryWeakKeys(com.google.common.collect.MapMaker),135,138,"/**
* Returns a MapMaker instance with the specified mask applied.
* @param mapMaker MapMaker instance to modify
*/","* Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in
   * GWT). This is sometimes acceptable, when only server-side code could generate enough volume
   * that reclamation becomes important.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,checkCurrentState,com.google.common.util.concurrent.AbstractService:checkCurrentState(com.google.common.util.concurrent.Service$State),379,392,"/**
* Verifies current service state against a specified expected state.
* @param expected desired service state
*/",Checks that the current state is equal to the expected state.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getEntry,com.google.common.collect.ArrayTable$ArrayMap:getEntry(int),224,244,"/**
* Returns a map entry for the specified index.
* @param index key/index position
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,at,"com.google.common.collect.ArrayTable:at(int,int)",327,332,"/**
* Retrieves value at specified row and column indices from a 2D array.
* @param rowIndex row index
* @param columnIndex column index
* @return value at the specified position or null if out of bounds
*/","* Returns the value corresponding to the specified row and column indices. The same value is
   * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this
   * method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @return the value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,set,"com.google.common.collect.ArrayTable:set(int,int,java.lang.Object)",347,355,"/**
* Updates cell at specified coordinates with new value.
* @param rowIndex row index
* @param columnIndex column index
* @param value new cell value or null to clear
* @return old cell value or null if not set
*/","* Associates {@code value} with the specified row and column indices. The logic {@code
   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same
   * behavior, but this method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @param value value to store in the table
   * @return the previous value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList$1:get(int),115,146,"/**
* Creates an ImmutableList instance with a specified index.
* @param index the index to use in the list creation process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList:get(int),115,146,"/**
* Creates an immutable list with index-based access to nested profiles.
* @param index the primary profile index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$ReverseImmutableList:get(int),680,684,"/**
* Evaluates M4 on forward list using recursive strategy.
* @param index input parameter for M4 evaluation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$SubList:get(int),490,494,"/**
* Computes element at specified index with adjustment.
* @param index desired index in collection
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$CharSequenceAsList:get(int),824,828,"/**
* Evaluates sequence mask at specified index.
* @param index position in sequence to evaluate
* @return Character representing sequence value at index",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverseIndex,com.google.common.collect.Lists$ReverseList:reverseIndex(int),874,878,"/**
* Calculates the function mask value based on the provided index.
* @param index input index value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$StringAsImmutableList:get(int),796,800,"/**
* Retrieves character at specified index from string.
* @param index position in string to fetch character from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,get,com.google.common.collect.SingletonImmutableList:get(int),44,48,"/**
* Returns the mask value of an element at the specified index.
* @param index index of the element (must be 1)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,get,com.google.common.primitives.Booleans$BooleanArrayAsList:get(int),415,419,"/**
* Returns value from array at specified index.
* @param index position in array to retrieve value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,set,"com.google.common.primitives.Booleans$BooleanArrayAsList:set(int,java.lang.Boolean)",452,459,"/**
* Updates an element in the array at the specified index with new value.
* @param index position of the element to update
* @param element new value for the element
* @return old value of the element before update
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,get,com.google.common.primitives.Bytes$ByteArrayAsList:get(int),282,286,"/**
* Retrieves and returns the byte value at the specified index from the array.
* @param index integer index into the array. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,set,"com.google.common.primitives.Bytes$ByteArrayAsList:set(int,java.lang.Byte)",318,325,"/**
* Updates and returns old value at specified index in the array.
* @param index array index to update
* @param element new byte value to replace old one
* @return old byte value before replacement
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,get,com.google.common.primitives.Chars$CharArrayAsList:get(int),602,606,"/**
* Returns character at specified index in array.
* @param index position of character to fetch (starts from 'start' index)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,set,"com.google.common.primitives.Chars$CharArrayAsList:set(int,java.lang.Character)",639,646,"/**
* Updates an array element at specified index with new value.
* @param index the index of the array to update
* @param element the new character value
* @return the old character value at the updated index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,get,com.google.common.primitives.Doubles$DoubleArrayAsList:get(int),610,614,"/**
* Retrieves a double value from the array at specified index.
* @param index array index to access
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,set,"com.google.common.primitives.Doubles$DoubleArrayAsList:set(int,java.lang.Double)",652,659,"/**
* Updates an element in the array at specified index.
* @param index position of the element to update
* @param element new value for the element at index
* @return old value of the updated element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,get,com.google.common.primitives.Floats$FloatArrayAsList:get(int),604,608,"/**
* Retrieves and returns a float value from an array based on the given index.
* @param index array index to fetch the float value for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,set,"com.google.common.primitives.Floats$FloatArrayAsList:set(int,java.lang.Float)",640,647,"/**
* Updates an element in the array at specified index with new value.
* @param index position of the element to update
* @param element new value for the element
* @return old value before updating
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray:get(int),380,383,"/**
* Returns value from array at specified index, validating index range.
* @param index array index to access
* @return array value or throws exception if index is out of bounds
*/","* Returns the {@code double} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray:get(int),377,380,"/**
* Retrieves an integer value from an array at specified index.
* @param index position in array to access
*/","* Returns the {@code int} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray:get(int),379,382,"/**
* Returns the mask value at specified index.
* @param index position in the array
*/","* Returns the {@code long} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,get,com.google.common.primitives.Ints$IntArrayAsList:get(int),692,696,"/**
* Returns an integer value from the array at specified index.
* @param index position in the array to retrieve the value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,set,"com.google.common.primitives.Ints$IntArrayAsList:set(int,java.lang.Integer)",733,740,"/**
* Updates array value at specified index with new element.
* @param index array index to update
* @param element new value to assign
* @return old array value at the updated index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,get,com.google.common.primitives.Longs$LongArrayAsList:get(int),744,748,"/**
* Retrieves a value from the array based on the provided index.
* @param index position in the array to retrieve the value for
* @return the value at the specified index in the array as Long
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,set,"com.google.common.primitives.Longs$LongArrayAsList:set(int,java.lang.Long)",785,792,"/**
* Updates an array element at specified index with the given value.
* @param index array index to update
* @param element new value to assign
* @return old value of the updated element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,get,com.google.common.primitives.Shorts$ShortArrayAsList:get(int),653,657,"/**
* Returns FUNC_MASK value at specified index.
* @param index integer index of value in array
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,set,"com.google.common.primitives.Shorts$ShortArrayAsList:set(int,java.lang.Short)",689,696,"/**
* Updates an array value at specified index using a mask function.
* @param index array index to update
* @param element new value to assign
* @return previous value at the updated index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$LargeLazyStriped:getAt(int),487,499,"/**
* Retrieves or creates lock instance for given index.
* @param index unique identifier
* @return Lock object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$SmallLazyStriped:getAt(int),416,438,"/**
* Acquires and returns a lock instance for the specified index, 
* potentially creating a new one if not already available.
* @param index unique identifier for the lock
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence,int)",1051,1056,"/**
* Calculates the mask position within the given CharSequence sequence.
* @param sequence input text to search
* @param start starting index for mask calculation
* @return calculated mask position or -1 if at end of sequence
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence,int)",1149,1154,"/**
* Calculates and applies mask values based on input sequence and position.
* @param sequence input character sequence
* @param start starting index in the sequence
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence,int)",563,572,"/**
* Searches the CharSequence for a specific pattern starting at index 'start'.
* @param sequence input text to search
* @param start search offset
* @return index of first match or -1 if not found
*/","* Returns the index of the first matching BMP character in a character sequence, starting from a
   * given position, or {@code -1} if no character matches after that position.
   *
   * <p>The default implementation iterates over the sequence in forward order, beginning at {@code
   * start}, calling {@link #matches} for each character.
   *
   * @param sequence the character sequence to examine
   * @param start the first index to examine; must be nonnegative and no greater than {@code
   *     sequence.length()}
   * @return the index of the first matching character, guaranteed to be no less than {@code start},
   *     or {@code -1} if no character matches
   * @throws IndexOutOfBoundsException if start is negative or greater than {@code
   *     sequence.length()}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,"com.google.common.collect.AbstractIndexedListIterator:<init>(int,int)",64,68,"/**
* Initializes an iterator with a specified list size and position.
* @param size total number of elements in the list
* @param position initial index within the list
*/","* Constructs an iterator across a sequence of the given size with the given initial position.
   * That is, the first call to {@link #nextIndex()} will return {@code position}, and the first
   * call to {@link #next()} will return the element at that index, if available. Calls to {@link
   * #previous()} can retrieve the preceding {@code position} elements.
   *
   * @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code
   *     size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(int,java.lang.Object)",153,157,"/**
* Throws an exception when the given element fails to match the mask criteria.
* @param index position of the failing element
* @param element element that failed the mask check
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(int,java.util.Collection)",165,171,"/**
* Checks if collection element at specified index satisfies given predicate.
* @param index the index to check
* @param elements the collection of values to search in
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reversePosition,com.google.common.collect.Lists$ReverseList:reversePosition(int),880,884,"/**
* Calculates function mask value based on index and table size.
* @param index current index
* @return difference between table size and index
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,"com.google.common.io.ByteStreams:newDataInput(byte[],int)",316,320,"/**
* Creates a ByteArrayInputStream from the specified byte array slice.
* @param bytes original byte array
* @param start starting index of the slice
*/","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array,
   * starting at the given position.
   *
   * @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of
   *     the array",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,"com.google.common.base.Utf8:isWellFormed(byte[],int,int)",123,133,"/**
* Verifies the integrity of a byte array range.
* @param bytes input data
* @param off starting offset
* @param len length of the range to verify
* @return true if valid, false otherwise
*/","* Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by
   * {@link #isWellFormed(byte[])}. Note that this can be false even when {@code
   * isWellFormed(bytes)} is true.
   *
   * @param bytes the input buffer
   * @param off the offset in the buffer of the first byte to read
   * @param len the number of bytes to read from the buffer",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.lang.Object[],int,int,java.lang.Object[])",155,166,"/**
* Copies and masks specified elements from source array to destination array.
* @param src source array
* @param offset starting index in source array
* @param len number of elements to copy
* @param dst destination array
* @return the modified destination array
*/","* Implementation of {@link Collection#toArray(Object[])} for collections backed by an object
   * array. the runtime type of the returned array is that of the specified array. If the collection
   * fits in the specified array, it is returned therein. Otherwise, a new array is allocated with
   * the runtime type of the specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,copyAsObjectArray,"com.google.common.collect.ObjectArrays:copyAsObjectArray(java.lang.Object[],int,int)",188,196,"/**
* Extracts a subset of elements from an array.
* @param elements original array (may be null)
* @param offset starting index in the array
* @param length number of elements to extract
* @return extracted element array or null if input is invalid","* Returns a copy of the specified subrange of the specified array that is literally an Object[],
   * and not e.g. a {@code String[]}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,subList,"com.google.common.collect.SingletonImmutableList:subList(int,int)",65,69,"/**
* Returns a list mask for the specified range.
* @param fromIndex start index
* @param toIndex end index
* @return empty list if indices are equal; otherwise, this list itself
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,"com.google.common.hash.AbstractByteHasher:putBytes(byte[],int,int)",90,96,"/**
* Initializes hasher with specified byte array segment.
* @param bytes the input data
* @param off offset within the data
* @param len length of the data segment
* @return this Hasher instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,"com.google.common.hash.AbstractHasher:putBytes(byte[],int,int)",69,77,"/**
* Updates Hasher instance with the specified byte array segment.
* @param bytes input data
* @param off starting offset within the data
* @param len length of the data segment to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,writeBytesTo,"com.google.common.hash.HashCode:writeBytesTo(byte[],int,int)",83,89,"/**
* Calculates and applies a mask to the given byte array.
* @param dest byte array to apply the mask to
* @param offset starting position in the array
* @param maxLength maximum length of the mask
* @return actual length of the applied mask
*/","* Copies bytes from this hash code into {@code dest}.
   *
   * @param dest the byte array into which the hash code will be written
   * @param offset the start offset in the data
   * @param maxLength the maximum number of bytes to write
   * @return the number of bytes written to {@code dest}
   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(byte[],int,int)",302,314,"/**
* Processes input bytes using hash function.
* @param bytes input byte array
* @param off offset into input array
* @param len length of input data to process
* @return this Hasher object for chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",967,976,"/**
* Writes masked byte array to the Appendable target.
* @param target output stream
* @param bytes input data array
* @param off starting offset in bytes array
* @param len number of bytes to write
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",1008,1023,"/**
* Processes byte array into target Appendable stream.
* @param target destination stream
* @param bytes input byte array
* @param off offset in bytes to process from
* @param len length of bytes to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeChunkTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeChunkTo(java.lang.Appendable,byte[],int,int)",692,715,"/**
* Writes encoded bytes to the target Appendable, processing bit streams.
* @param target output stream
* @param bytes input byte array
* @param off starting offset in bytes
* @param len length of bytes to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,"com.google.common.io.BaseEncoding:encode(byte[],int,int)",154,163,"/**
* Builds a formatted string from the given byte array slice.
* @param bytes input byte array
* @param off starting offset within the array
* @param len length of the byte array slice
*/","* Encodes the specified range of the specified byte array, and returns the encoded {@code
   * String}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,read,"com.google.common.io.ByteStreams:read(java.io.InputStream,byte[],int,int)",935,954,"/**
* Reads bytes from InputStream into byte array.
* @param in InputStream to read from
* @param b byte array to fill
* @param off starting offset in b
* @param len number of bytes to read
* @return actual number of bytes read
*/","* Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,"com.google.common.io.CharSequenceReader:read(char[],int,int)",99,112,"/**
* Reads characters from a sequence into an array buffer.
* @param cbuf the character array to populate
* @param off starting offset in the array
* @param len number of characters to read
* @return number of characters successfully read or -1 on error
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(char[],int,int)",295,298,"/**
* Masks characters in buffer according to specified range.
* @param cbuf character array to mask
* @param off starting offset
* @param len length of mask operation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(java.lang.String,int,int)",305,308,"/**
* Masks specified length of string using function m2.
* @param str input string to mask
* @param off starting offset in string
* @param len length of characters to mask
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,append,"com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence,int,int)",315,319,"/**
* Formats a substring using the provided mask and returns this writer.
* @param csq input string or null
* @param start starting index of substring
* @param end ending index of substring
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,subList,"com.google.common.primitives.Booleans$BooleanArrayAsList:subList(int,int)",461,469,"/**
* Returns a list of boolean values based on array elements in the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List<Boolean> containing array element values or empty list if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,"com.google.common.primitives.Booleans:reverse(boolean[],int,int)",554,562,"/**
* Swaps elements in the specified range of the input array.
* @param array input array to modify
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,subList,"com.google.common.primitives.Bytes$ByteArrayAsList:subList(int,int)",327,335,"/**
* Extracts a sublist of byte values within the specified range.
* @param fromIndex starting index
* @param toIndex ending index
* @return List<Byte> representing the extracted sublist or an empty list if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,"com.google.common.primitives.Bytes:reverse(byte[],int,int)",405,413,"/**
* Swaps elements in the specified range of the given byte array.
* @param array input byte array
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,subList,"com.google.common.primitives.Chars$CharArrayAsList:subList(int,int)",648,656,"/**
* Extracts a sublist of characters within the specified range.
* @param fromIndex starting index
* @param toIndex ending index
* @return List<Character> or empty list if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,"com.google.common.primitives.Chars:reverse(char[],int,int)",495,503,"/**
* Swaps characters in the given array between indices fromIndex and toIndex.
* @param array input character array
* @param fromIndex starting index of swap range (inclusive)
* @param toIndex ending index of swap range (exclusive)","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,subList,"com.google.common.primitives.Doubles$DoubleArrayAsList:subList(int,int)",661,669,"/**
* Generates a list of double values between specified indices.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List<Double> containing values or empty if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,"com.google.common.primitives.Doubles:reverse(double[],int,int)",469,477,"/**
* Swaps elements in the specified range of the input array.
* @param array input array to be modified
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,subList,"com.google.common.primitives.Floats$FloatArrayAsList:subList(int,int)",649,657,"/**
* Extracts and returns a list of floats between specified indices.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,"com.google.common.primitives.Floats:reverse(float[],int,int)",466,474,"/**
* Swaps elements in the given array between the specified indices.
* @param array input array to modify
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subArray,"com.google.common.primitives.ImmutableDoubleArray:subArray(int,int)",454,459,"/**
* Creates a masked double array from the given range.
* @param startIndex inclusive start index
* @param endIndex exclusive end index
* @return ImmutableDoubleArray object or EMPTY if range is empty
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subArray,"com.google.common.primitives.ImmutableIntArray:subArray(int,int)",449,454,"/**
* Returns an immutable array of indices within the given range.
* @param startIndex starting index (inclusive)
* @param endIndex ending index (exclusive)
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subArray,"com.google.common.primitives.ImmutableLongArray:subArray(int,int)",451,456,"/**
* Creates an immutable long array mask from the specified range.
* @param startIndex inclusive start index
* @param endIndex exclusive end index
* @return ImmutableLongArray instance or EMPTY if range is empty
*/","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,subList,"com.google.common.primitives.Ints$IntArrayAsList:subList(int,int)",742,750,"/**
* Generates a list of integers representing mask values within the specified range.
* @param fromIndex starting index
* @param toIndex ending index
* @return List of Integer values or empty list if indices are equal
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,"com.google.common.primitives.Ints:reverse(int[],int,int)",528,536,"/**
* Swaps elements in the given array within the specified range.
* @param array the input array
* @param fromIndex start index of swap range (inclusive)
* @param toIndex end index of swap range (exclusive)","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,subList,"com.google.common.primitives.Longs$LongArrayAsList:subList(int,int)",794,802,"/**
* Returns a list of user IDs in the specified range.
* @param fromIndex starting index
* @param toIndex ending index
* @return List of Long values representing user IDs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,"com.google.common.primitives.Longs:reverse(long[],int,int)",606,614,"/**
* Swaps elements in the specified range of the input array.
* @param array input array to be modified
* @param fromIndex starting index for swap operation (exclusive)
* @param toIndex ending index for swap operation (inclusive)
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,subList,"com.google.common.primitives.Shorts$ShortArrayAsList:subList(int,int)",698,706,"/**
* Returns a list of short values representing the function mask.
* @param fromIndex starting index
* @param toIndex ending index
* @return List<Short> containing the function mask or empty if equal indices
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,"com.google.common.primitives.Shorts:reverse(short[],int,int)",518,526,"/**
* Swaps elements in the given array between specified indices.
* @param array input array
* @param fromIndex starting index for swapping
* @param toIndex ending index for swapping
*/","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,"com.google.common.primitives.UnsignedBytes:sort(byte[],int,int)",527,537,"/**
* Performs complex operation on a byte array segment.
* @param array the input array
* @param fromIndex starting index of segment
* @param toIndex ending index of segment (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned bytes.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,"com.google.common.primitives.UnsignedBytes:sortDescending(byte[],int,int)",556,566,"/**
* Clears and reinitializes a byte array range.
* @param array the input byte array
* @param fromIndex starting index of the range
* @param toIndex ending index of the range (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 8-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,"com.google.common.primitives.UnsignedInts:sort(int[],int,int)",235,245,"/**
* Applies transformation and normalization to a subarray.
* @param array input array
* @param fromIndex start index of the subarray
* @param toIndex end index of the subarray (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,"com.google.common.primitives.UnsignedInts:sortDescending(int[],int,int)",264,274,"/**
* Masks elements in the specified range of the input array.
* @param array input array
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,"com.google.common.primitives.UnsignedLongs:sort(long[],int,int)",199,209,"/**
* Performs complex data processing on the specified subarray.
* @param array input array
* @param fromIndex start index of subarray
* @param toIndex end index of subarray (exclusive)
*/","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,"com.google.common.primitives.UnsignedLongs:sortDescending(long[],int,int)",228,238,"/**
* Masks values in a long array within the specified range.
* @param array input array
* @param fromIndex starting index of the mask region
* @param toIndex ending index of the mask region
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$Values:remove(java.lang.Object),648,651,"/**
* Validates object with functional mask.
* @param obj object to validate
* @return true if valid, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,filterUpperBounds,com.google.common.reflect.Types:filterUpperBounds(java.lang.Iterable),521,523,"/**
* Filters and maps the input iterable of Type objects to an iterable of filtered types.
*@param bounds Input iterable of Type objects
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,filter,"com.google.common.collect.Collections2:filter(java.util.Collection,com.google.common.base.Predicate)",85,94,"/**
* Filters a collection based on the given predicate.
* @param unfiltered original collection to filter
* @param predicate condition for inclusion in filtered collection
* @return filtered Collection or existing FilteredCollection if applicable
*/","* Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is
   * a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting collection's iterator does not support {@code remove()}, but all other
   * collection methods are supported. When given an element that doesn't satisfy the predicate, the
   * collection's {@code add()} and {@code addAll()} methods throw an {@link
   * IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are
   * called on the filtered collection, only elements that satisfy the filter will be removed from
   * the underlying collection.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every
   * element in the underlying collection and determine which elements satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered,
   * predicate)} and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeys,com.google.common.collect.FilteredKeyMultimap:createKeys(),222,225,"/**
 * Creates a multiset from the unfiltered set and predicate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(char),126,128,"/**
* Returns a splitter that matches the specified character.
* @param separator single character to match
*/","* Returns a splitter that uses the given single-character separator. For example, {@code
   * Splitter.on(',').split(""foo,,bar"")} returns an iterable containing {@code [""foo"", """", ""bar""]}.
   *
   * @param separator the character to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3500,3502,"/**
* Initializes or updates the old value reference.
* @param oldValue previous value reference, may be null to indicate unset
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:<init>(),463,463,"/**
* Initializes a new sleeping stopwatch instance.",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,<init>,"com.google.common.base.internal.Finalizer:<init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",126,136,"/**
* Initializes a Finalizer instance with reference class, queue, and FRQ.
* @param finalizableReferenceClass class holding finalizeable object
* @param queue ReferenceQueue for garbage collection notification
* @param frqReference PhantomReference that triggered this Finalizer
*/",Constructs a new finalizer thread.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,com.google.common.collect.ImmutableListMultimap$Builder:<init>(),234,234,"/**
* Initializes an empty Builder instance.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableListMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,builder,com.google.common.collect.ImmutableMultimap:builder(),129,131,"/**
* Creates a new instance of the Builder class.
* @return Builder object for constructing objects of type K and V
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$Builder:<init>(),262,262,"/**
 * Initializes a new instance of the builder.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSetMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:<init>(com.google.common.cache.LoadingCache),82,84,"/**
 * Wraps a provided LoadingCache instance with forwarding behavior.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache),4690,4704,"/**
* Creates a manual serialization proxy from the given cache.
* @param cache source cache to copy configuration from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:<init>(java.lang.Object),143,145,"/**
 * Sets the rejecting list key.
 * @param key unique key identifier
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,<init>,com.google.common.collect.ForwardingSortedMultiset:<init>(),49,49,"/**
* Constructor for an empty sorted multiset.",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,com.google.common.collect.Multisets$UnmodifiableMultiset:<init>(com.google.common.collect.Multiset),134,136,"/**
* Wraps a Multiset instance to make it unmodifiable.
* @param delegate original multiset to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,<init>,com.google.common.collect.EvictingQueue:<init>(int),54,58,"/**
* Initializes an EvictingQueue with a specified maximum size.
* @param maxSize the maximum number of elements in the queue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,<init>,com.google.common.collect.ForwardingDeque:<init>(),49,49,"/**
* Initializes an empty ForwardingDeque instance. 
* This constructor is used to create a new deque that will forward operations to another collection.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,<init>,com.google.common.util.concurrent.ForwardingBlockingQueue:<init>(),46,46,"/**
* Constructor for an empty forwarding blocking queue. 
* No initialization is performed in this constructor.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:<init>(java.lang.Object),118,120,"/**
* Adds a rejecting set with the specified key.
* @param key unique identifier of the rejecting set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,<init>,com.google.common.collect.ForwardingSortedSet:<init>(),65,65,"/**
* Initializes an empty forwarding sorted set. 
* @see java.util.ForwardingSet#ForwardingSet()
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntrySet:<init>(java.util.Set),1572,1574,"/**
* Returns an unmodifiable set view of the provided entry set.
*@param entries Set of key-value pairs to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2822,2835,"/**
* Constructs an AbstractSerializationProxy instance with specified serialization settings.
* @param keyStrength Strength of the keys in the map
* @param valueStrength Strength of the values in the map
* @param keyEquivalence Equivalence strategy for keys
* @param valueEquivalence Equivalence strategy for values
* @param concurrencyLevel Concurrency level for concurrent access
* @param delegate Underlying concurrent map instance",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,<init>,com.google.common.collect.ForwardingNavigableMap:<init>(),61,61,"/**
 * Creates an empty forwarding navigable map instance. 
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap),3455,3457,"/**
* Wraps an existing NavigableMap in an unmodifiable view.
* @param delegate the underlying navigable map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap)",3459,3463,"/**
* Wraps a navigable map and its descending counterpart into an unmodifiable view. 
* @param delegate the original map
* @param descendingMap the descending counterpart of the original map",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,inverse,com.google.common.collect.Maps$UnmodifiableBiMap:inverse(),1779,1785,"/**
* Returns a bi-directional map of V to K, either from cached inverse or newly created one.
* @return BiMap<V, K> object; may be null if cache is disabled
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableBiMap,com.google.common.collect.Maps:unmodifiableBiMap(com.google.common.collect.BiMap),1695,1698,"/**
* Creates an unmodifiable view of the given bi-map.
* @param bimap original bi-map to create view from
*/","* Returns an unmodifiable view of the specified bimap. This method allows modules to provide
   * users with ""read-only"" access to internal bimaps. Query operations on the returned bimap ""read
   * through"" to the specified bimap, and attempts to modify the returned map, whether direct or via
   * its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified bimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(),59,61,"/**
* Creates a mutable map to store class-instance associations.
* @return MutableClassToInstanceMap instance
*/","* Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the
   * default initial capacity and load factor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(java.util.Map),68,71,"/**
* Creates a mutable map from a given class-instance map.
* @param backingMap input map with classes as keys and instances as values
*/","* Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code
   * backingMap}. The caller surrenders control of the backing map, and thus should not allow any
   * direct references to it to remain accessible.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,of,com.google.common.reflect.ImmutableTypeToInstanceMap:of(),35,37,"/**
* Creates an ImmutableTypeToInstanceMap instance using a pre-initialized 
* ImmutableMap of TypeTokens to instances.",Returns an empty type to instance map.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,transformEntries,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Iterator),156,159,"/**
* Maps an iterator of entries to a new iterator with masked values.
* @param entries input iterator
* @return iterator with wrapped entries
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,<init>,com.google.common.collect.ForwardingSortedSetMultimap:<init>(),42,42,"/**
* Initializes an empty sorted multimap. 
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableListMultimap:<init>(com.google.common.collect.ListMultimap),795,797,"/**
* Wraps an existing ListMultimap instance as an unmodifiable view. 
* @param delegate the underlying multimap to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:<init>(com.google.common.collect.SetMultimap),825,827,"/**
* Wraps an existing SetMultimap instance with read-only access.
* @param delegate underlying multimap to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.Multimap),656,662,"/**
* Converts a modifiable multimap to an unmodifiable one, or returns the original if it's already unmodifiable. 
* @param delegate input multimap; may be modified in place
* @return UnmodifiableMultimap wrapping the input, or the original if immutable
*/","* Returns an unmodifiable view of the specified multimap. Query operations on the returned
   * multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableRowSortedMap:<init>(com.google.common.collect.RowSortedTable),647,649,"/**
* Creates an unmodifiable view of the specified table's rows.
* @param delegate RowSortedTable instance to wrap
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableTable,com.google.common.collect.Tables:unmodifiableTable(com.google.common.collect.Table),534,537,"/**
* Wraps the given table in an unmodifiable view.
* @param table Input table
*/","* Returns an unmodifiable view of the specified table. This method allows modules to provide
   * users with ""read-only"" access to internal tables. Query operations on the returned table ""read
   * through"" to the specified table, and attempts to modify the returned table, whether direct or
   * via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:<init>(com.google.common.util.concurrent.ListenableFuture),58,60,"/**
* Wraps an existing ListenableFuture in a SimpleForwardingListenableFuture.
* @param delegate original ListenableFuture to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future),124,126,"/**
* Adapts a Future to be Listenable.
*@param delegate original Future to adapt
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,"com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor)",84,91,"/**
* Adapts a non-listenable future to a ListenableFuture instance.
* @param future the non-listenable future to adapt
* @param executor the executor to use for adaptation
* @return a ListenableFuture wrapping the original future's result","* Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture}
   * functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the
   * given executor at the first call to {@code addListener}. The task must be started by the
   * executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's
   * execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so
   * each call to this method may claim and hold a thread for an arbitrary length of time. Use of
   * bounded executors or other executors that may fail to execute a task promptly may result in
   * deadlocks.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getIfPresent,com.google.common.cache.ForwardingCache:getIfPresent(java.lang.Object),47,50,"/**
* Calls m2 on the result of m1, passing through the provided key.
* @param key object to be passed to m2
* @return result of m2 or null if m1 returns null.",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,get,"com.google.common.cache.ForwardingCache:get(java.lang.Object,java.util.concurrent.Callable)",55,58,"/**
* Delegates to underlying cache with provided key and value loader.
* @param key unique cache key
* @param valueLoader callable to load cached value if not present
* @return cached value of type V or throws ExecutionException
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getAllPresent,com.google.common.cache.ForwardingCache:getAllPresent(java.lang.Iterable),63,70,"/**
* Calls m1() and delegates to its m2() method with given keys.
* @param keys Iterable of object keys
* @return Immutable map or null if not found
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,put,"com.google.common.cache.ForwardingCache:put(java.lang.Object,java.lang.Object)",75,78,"/**
* Calls nested map's put operation with provided key and value.
* @param key unique key identifier
* @param value associated value
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,putAll,com.google.common.cache.ForwardingCache:putAll(java.util.Map),83,86,"/**
* Calls m2() on a previously initialized object of type m1()
* and passes in the provided map as an argument.",* @since 12.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidate,com.google.common.cache.ForwardingCache:invalidate(java.lang.Object),88,91,"/**
* Calls m2() on the result of m1(), passing the provided key.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(java.lang.Iterable),96,100,"/**
* Delegates key processing to another method.
* @param keys collection of objects (keys) to process
*/",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(),102,105,"/**
* Calls m2() on the result of invoking m1().
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,size,com.google.common.cache.ForwardingCache:size(),107,110,"/**
 * Calls m1 to compute and returns its result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,stats,com.google.common.cache.ForwardingCache:stats(),112,115,"/**
* Calls m1 to fetch and process intermediate cache stats, then calls m2 on result. 
* @return final CacheStats object or null if m1 returns null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,asMap,com.google.common.cache.ForwardingCache:asMap(),117,120,"/**
* Delegates to m1() and returns its result as a concurrent map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,cleanUp,com.google.common.cache.ForwardingCache:cleanUp(),122,125,"/**
* Calls m2() on the result of m1().
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:readResolve(),431,433,"/**
* Returns the mask value from the multiset.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,iterator,com.google.common.collect.ImmutableMultiset:iterator(),228,255,"/**
* Wraps an iterator over entries into an unmodifiable iterator.
* @return Unmodifiable iterator over values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyIntoArray,"com.google.common.collect.ImmutableMultiset:copyIntoArray(java.lang.Object[],int)",326,334,"/**
* Calculates the total length required to store multiset entries in destination array.
* @param dst destination array
* @param offset starting index of destination array
* @return total length (offset) after storing all entries
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset:hashCode(),341,344,"/**
* Computes and returns a functional mask value.
* @return integer representing the mask value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toString,com.google.common.collect.ImmutableMultiset:toString(),346,349,"/**
* Recursively calls m1 to fetch and process sub-data.
* @return processed data string or null if not available
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AbstractFilteredMap:remove(java.lang.Object),2893,2896,"/**
* Returns value from unfiltered map if filtered map contains key.
* @param key object to search for in maps
* @return value associated with key or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$2:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves a reference entry based on hash and key.
* @param segment segment to search in
* @param key the key to match
* @param hash the hash code of the key
* @param next the next entry to consider (null for head)
* @return matching ReferenceEntry or null if not found","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$4:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves a reference entry from the given segment using the provided key and hash.
* @param segment Segment containing the reference entries
* @param key Key to search for in the segment
* @param hash Hash value of the key
* @param next Next entry in the result chain (or null if none)
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$3:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves the reference entry for the given key from the specified segment.
* @param segment Segment object
* @param key Key to look up
* @param hash Hash code of the key
* @param next Next reference entry in linked list
*/","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$6:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves the reference entry at the specified position in the given segment.
* @param segment the segment to search
* @param key the key to look up
* @param hash the hash value of the key
* @param next the previous entry in the chain (null if first)
* @return the matching ReferenceEntry, or null if not found","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$8:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves a reference entry from a segment using the given key and hash.
* @param segment Segment to search in
* @param key Key to look up
* @param hash Hash value of the key
* @param next Next entry in the segment (null if first)
* @return Matching ReferenceEntry object or null if not found","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$7:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
* Retrieves a reference entry from the specified segment using the given key and hash.
* @param segment the segment to search
* @param key the key to look up
* @param hash the hash value of the key
* @param next the next entry in the list or null if none
* @return the matching ReferenceEntry object, or null if not found","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,"com.google.common.util.concurrent.Futures$CallbackListener:<init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)",1106,1109,"/**
* Initializes a CallbackListener with a Future and its associated callback. 
* @param future The future result to be processed.
* @param callback The callback function to handle the result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$AccessQueue:poll(),3848,3857,"/**
* Returns the next reference entry in a linked list, or null if at head.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$WriteQueue:poll(),3708,3717,"/**
* Returns the next reference entry in the map, advancing to the next node.
* @return next ReferenceEntry or null if reached the end
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,createSegment,"com.google.common.cache.LocalCache:createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)",1762,1765,"/**
* Creates a new segment with specified capacity and weight limits.
* @param initialCapacity initial size of the segment
* @param maxSegmentWeight maximum allowed segment weight
* @param statsCounter statistics counter for tracking data usage
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForLoadingValue,"com.google.common.cache.LocalCache$Segment:waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference)",2189,2209,"/**
* Loads cache value by key from a ReferenceEntry.
* @param e the entry to load from
* @param key unique identifier for the cached value
* @param valueReference ValueReference object
* @return cached V value or throws an exception if failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,"com.google.common.cache.LocalCache$Segment:setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long)",2030,2041,"/**
* Updates the reference entry with a new value and weight.
* @param entry ReferenceEntry to update
* @param key key associated with the value
* @param value new value to store
* @param now timestamp for update operations
*/",Sets a new value of an entry. Adds newly created entries at the end of the access queue.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,size,com.google.common.collect.FluentIterable:size(),346,348,"/**
* Retrieves M-sequences using internal and external methods.
* @return number of M-sequences generated
*/","* Returns the number of elements in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$OnePlusArrayList:get(int),353,359,"/**
* Returns element at specified index in a sequence.
* @param index position of the desired element (0-indexed)
* @return Element E or null if out-of-bounds
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$TwoPlusArrayList:get(int),384,397,"/**
* Returns a functional mask value based on the given index.
* @param index position in the sequence (0-indexed)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edgeCount,com.google.common.graph.AbstractBaseGraph:edgeCount(),52,60,"/**
* Calculates the sum of degrees and returns it, masking lower bit to m3.
* @return Sum of node degrees (divided by 2)
*/","* Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}.
   * This implementation requires O(|N|) time. Classes extending this one may manually keep track of
   * the number of edges as the graph is updated, and override this method for better performance.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractBaseGraph:inDegree(java.lang.Object),147,150,"/**
* Calculates a mask value based on node properties.
* @param node input node object
* @return calculated mask integer
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractBaseGraph:outDegree(java.lang.Object),152,155,"/**
* Computes FUNC_MASK value based on node properties.
* @param node Node object to evaluate
* @return Integer value representing FUNC_MASK result",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractGraph:degree(java.lang.Object),136,145,"/**
* Calculates a mask value based on the given node.
* @param node Node object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph:degree(java.lang.Object),136,145,"/**
* Calculates the mask value for a given node.
* @param node the input node
* @return calculated mask value as an integer
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,com.google.common.io.ByteStreams:toByteArray(java.io.InputStream),240,243,"/**
* Processes input stream to produce byte array result.
* @param in InputStream object
*/","* Reads all bytes from an input stream into a byte array. Does not close the stream.
   *
   * <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead.
   *
   * @param in the input stream to read from
   * @return a byte array containing all the bytes from the stream
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,"com.google.common.io.ByteStreams:toByteArray(java.io.InputStream,long)",250,281,"/**
* Reads data from InputStream into a byte array up to expectedSize.
* @param in InputStream to read from
* @param expectedSize maximum size of the output byte array
* @return fully populated byte array or partially filled with last byte read
*/","* Reads all bytes from an input stream into a byte array. The given expected size is used to
   * create an initial byte array, but if the actual number of bytes read from the stream differs,
   * the correct result will be returned anyway.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,java.util.Map)",64,66,"/**
* Initializes an abstract bi-map with provided forward and backward mappings.
* @param forward forward mapping from key to value
* @param backward backward mapping from value to key
*/",Package-private constructor for creating a map-backed bimap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,com.google.common.collect.TreeMultiset:<init>(java.util.Comparator),128,134,"/**
* Initializes a TreeMultiset instance with the given comparator.
* @param comparator comparison function for ordering elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,readObject,com.google.common.collect.TreeMultiset:readObject(java.io.ObjectInputStream),1076,1092,"/**
* Deserializes a TreeMultiset object from the given stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,headMultiset,"com.google.common.collect.TreeMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",547,553,"/**
* Creates a new SortedMultiset with the specified upper bound and type.
* @param upperBound the upper bound for this multiset
* @param boundType the type of the bound (e.g. open, closed)
* @return a new SortedMultiset instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,tailMultiset,"com.google.common.collect.TreeMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",555,561,"/**
* Creates a sorted multiset with the specified lower bound and bound type.
* @param lowerBound the lower bound of the multiset
* @param boundType the type of bound (e.g., inclusive, exclusive)",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.AbstractBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
* Sets a function mask with the given key and value.
* @param key unique identifier for the mask
* @param value associated value for the mask
* @return null (as per CanIgnoreReturnValue)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.AbstractBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
* Sets a function mask for the specified key-value pair.
* @param key unique identifier
* @param value associated value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumBiMap:remove(java.lang.Object),166,170,"/**
* Returns value associated with given key or null if not found.
* @param key object to look up in underlying data structure
* @return V object or null if not present
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumHashBiMap:remove(java.lang.Object),166,170,"/**
* Returns value associated with key if condition m1() is met, otherwise null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$PermutationCollection:iterator(),610,613,"/**
* Returns an iterator over all possible permutations of input list elements.
* @return Iterator over List<E> permutations or null if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollLastEntry(),1612,1615,"/**
* Computes and returns an Entry object containing key-value pairs.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingKeySet(),1649,1652,"/**
* Returns a navigable set of keys based on the M1 and M2 functions. 
* @return A navigable set of keys.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,java.lang.Object)",1654,1658,"/**
* Returns a navigable map of elements in the range [fromKey, toKey].
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object),1669,1672,"/**
* Retrieves a navigable map of values associated with the given key.
* @param toKey unique key identifier
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object),1679,1682,"/**
* Returns a navigable map of elements within or after the specified key.
* @param fromKey starting key for the map
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:keySet(),1634,1637,"/**
* Delegates to superclass to retrieve navigable set of keys. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,removeAll,com.google.common.collect.AbstractListMultimap:removeAll(java.lang.Object),92,96,"/**
* Calls superclass's implementation to fetch data by key.
* @param key object to search for, or null for default behavior
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,replaceValues,"com.google.common.collect.AbstractMapBasedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",225,247,"/**
* Updates collection with new values and recalculates size.
* @param key unique identifier
* @param values iterable of new values
*/","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,removeAll,com.google.common.collect.AbstractSetMultimap:removeAll(java.lang.Object),100,104,"/**
* Returns set of values associated with the given key.
* @param key nullable object to retrieve values for
* @return Set&lt;V&gt; containing associated values or null if not found
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingIterator(),1105,1108,"/**
* Returns an iterator over keys using masked function.
* @return Iterator of K type keys
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object),1110,1113,"/**
* Returns a navigable set containing all elements less than or equal to the specified element.
* @param toElement the reference element for comparison
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",1120,1124,"/**
* Returns a navigable set of elements within the specified range.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object),1136,1139,"/**
* Returns a navigable set of elements in the database starting from the specified element.
* @param fromElement the starting element for the set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasNext,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:hasNext(),471,475,"/**
* Delegates execution to the iterator's m2() method after calling m1().",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:next(),477,482,"/**
* Calls m1(), then delegates to an iterator's m2() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getDelegateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:getDelegateIterator(),491,494,"/**
* Returns an iterator over values filtered by a mask.
* @return Iterator of filtered values or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addAll(java.util.Collection),517,532,"/**
* Updates collection and returns true if changes were made.
* @param collection Collection to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:clear(),546,555,"/**
* Recursively updates total size by delegating to sub-components.
* @param none
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeAll(java.util.Collection),568,581,"/**
* Updates collection state based on changes to the provided collection.
* @param c Collection object
* @return true if collection state has changed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,retainAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:retainAll(java.util.Collection),583,594,"/**
* Updates collection and delegates to underlying storage, tracking size changes.
* @param c Collection to update
* @return true if collection was modified
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollLast(),727,730,"/**
* Computes and returns a masked value using iterator transformations. 
* @return Masked value of type V or null if not applicable",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,get,com.google.common.collect.AbstractSortedSetMultimap:get(java.lang.Object),90,93,"/**
* Calls superclass's m1 method with given key.
* @param key object to be searched in the set
*/","* Returns a collection view of all values associated with a key. If no mappings in the multimap
   * have the provided key, an empty collection is returned.
   *
   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Values:spliterator(),197,200,"/**
* Returns a spliterator that iterates over all elements in the collection.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.HashMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Updates the element's count by adding or removing a specified amount.
* @param element unique identifier
* @param count change in count value
* @return previous count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.LinkedHashMultiset:setCount(java.lang.Object,int)",314,335,"/**
* Updates the count of a given element in the map.
* @param element element to update
* @param count new count value
* @return previous count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToString,com.google.common.collect.ForwardingCollection:standardToString(),232,234,"/**
* Generates a mask string using internal function m1.
* @return generated mask string
*/","* A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardToString,com.google.common.collect.ForwardingMap:standardToString(),297,299,"/**
* Generates mask string using internal mapping. 
* @return generated mask string","* A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toString,com.google.common.collect.ImmutableMap:toString(),1221,1224,"/**
* Returns the function mask using the provided mapping. 
* @return The calculated function mask as a string.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset$EntrySet:snapshot(),586,591,"/**
* Processes multiset entries using various helper functions (m1, m2, m3) and iterator operations. 
* @return A list of processed Multiset.Entry objects.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(int),72,74,"/**
* Initializes a HashMultiset with a specified number of expected distinct elements. 
* @param distinctElements expected count of unique elements.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashMapWithExpectedSize,com.google.common.collect.Platform:newHashMapWithExpectedSize(int),37,40,"/**
* Creates an empty map with specified capacity.
* @param expectedSize initial size of the map
*/",Returns the platform preferred implementation of a map based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Graph),62,79,"/**
* Performs a function mask operation on the given graph.
* @param graph input graph of type Graph<N>
* @return true if the graph contains a valid function mask, false otherwise
*/","* Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset
   * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting
   * and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,get,com.google.common.collect.HashBasedTable$Factory:get(),60,63,"/**
* Creates a map with expected size containing default values.
* @return Map with expected size and default values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,"com.google.common.collect.HashBasedTable:create(int,int)",81,86,"/**
* Creates a hash table with expected rows and cells per row.
* @param expectedRows number of rows to initialize
* @param expectedCellsPerRow number of cells per row to initialize
*/","* Creates an empty {@code HashBasedTable} with the specified map sizes.
   *
   * @param expectedRows the expected number of distinct row keys
   * @param expectedCellsPerRow the expected number of column key / value mappings in each row
   * @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is
   *     negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(int),80,82,"/**
* Initializes a LinkedHashMultiset with the specified number of expected distinct elements.
* @param distinctElements the expected count of unique elements in the multiset
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Platform:newLinkedHashMapWithExpectedSize(int),46,49,"/**
* Creates an empty map with expected size. 
* @param expectedSize anticipated number of key-value pairs
*/","* Returns the platform preferred implementation of an insertion ordered map based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,createMap,com.google.common.graph.ElementOrder:createMap(int),189,200,"/**
* Creates a map with the optimal size for the given data type.
* @param expectedSize estimated number of key-value pairs
*/",Returns an empty mutable map whose keys will respect this {@link ElementOrder}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl),943,953,"/**
* Builds a new set with expected size from deduplicated elements.
* @param toCopy SetBuilderImpl instance to copy from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$EntrySet:retainAll(java.util.Collection),4250,4269,"/**
* Handles collection operation 8 by delegating to superclass or processing locally.
*@param c Collection to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashSetWithExpectedSize,com.google.common.collect.Platform:newHashSetWithExpectedSize(int),52,54,"/**
* Returns a set of expected size with null values.
* @param expectedSize desired number of elements
*/",Returns the platform preferred implementation of a set based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator$Undirected:<init>(com.google.common.graph.BaseGraph),118,121,"/**
* Initializes an Undirected traversal with the given BaseGraph.
* @param graph The graph to traverse, which must be undirected. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Platform:newLinkedHashSetWithExpectedSize(int),65,67,"/**
* Creates a set with specified size using Sets.m1 factory method.
* @param expectedSize desired number of elements in the set
*/","* Returns the platform preferred implementation of an insertion ordered set based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:<init>(com.google.common.collect.ImmutableCollection),530,533,"/**
* Initializes service manager state with given services.
* @param services collection of services to initialize with
*/","* It is implicitly assumed that all the services are NEW and that they will all remain NEW
     * until all the Listeners are installed and {@link #markReady()} is called. It is our caller's
     * responsibility to only call {@link #markReady()} if all services were new at the time this
     * method was called and when all the listeners were installed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.AbstractSortedMultiset:pollFirstEntry(),78,88,"/**
* Computes the FUNC_MASK value for the current entry.
* @return Entry object with updated mask or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.AbstractSortedMultiset:pollLastEntry(),90,100,"/**
* Calculates the FUNC_MASK value by iterating over entries and applying multisets.
* @return Entry object with updated mask or null if no valid entries found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardFirstEntry(),122,129,"/**
* Computes a mask for the given entry.
* @return Entry object or null if computation fails
*/","* A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardLastEntry(),143,150,"/**
* Retrieves the first matching Entry object from a filtered iterator.
* @return The matched Entry object or null if not found
*/","* A sensible definition of {@link #lastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override
   * {@link #firstEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollFirstEntry(),163,172,"/**
* Computes and returns a masked entry based on iterator results.
* @return Masked Entry object or null if iteration failed
*/","* A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollLastEntry(),186,195,"/**
* Retrieves a unique Entry instance with masked values.
* @return Entry object or null if retrieval fails
*/","* A sensible definition of {@link #pollLastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to
   * override {@link #pollLastEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,getEntry,com.google.common.collect.ImmutableMultimap$Keys:getEntry(int),753,757,"/**
* Retrieves a Multiset.Entry from the underlying data structure.
* @param index position of the entry to retrieve
* @return Multiset.Entry object at specified index or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getEntry,com.google.common.collect.RegularImmutableSortedMultiset:getEntry(int),66,69,"/**
* Computes the function mask using multisets operations.
* @param index input index value
* @return Entry object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,toString,com.google.common.collect.TreeMultiset$AvlNode:toString(),1041,1044,"/**
* Combines results of m1() and m2() using Multisets and calls m4() on result. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Updates count of elements in mask based on given element and counts.
* @param element the element to update (can be null)
* @param oldCount current element count
* @param newCount updated element count
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$PowerSet:equals(java.lang.Object),1759,1766,"/**
* Recursively checks membership in the power set.
* @param obj object to check, may be a PowerSet
* @return true if object is a member of the power set, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.HashMultiset:entrySet(),83,86,"/**
* Calls superclass implementation of m1(). 
* @return A set of multiset entries as defined by superclass.","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.LinkedHashMultiset:entrySet(),83,86,"/**
 * Calls superclass implementation of m1 to retrieve multiset entries.
 */","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.EnumMultiset:isEmpty(),49,52,"/**
* Calls m1() to perform some operation and returns its result of m2().
* @return true if m1()'s m2() call returns true, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset:snapshot(),183,192,"/**
* Generates a masked list of elements by iterating over the multiset and adding each element to the list a specified number of times.
* @return List<E> containing the masked elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,floor,com.google.common.collect.DescendingImmutableSortedSet:floor(java.lang.Object),91,94,"/**
* Applies a transformation to an input element.
* @param element input value to be transformed
* @return transformed value or null if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,lower,com.google.common.collect.DescendingImmutableSortedSet:lower(java.lang.Object),86,89,"/**
 * Applies forward function m1 to filter elements.
 * @param element input element to process
 * @return filtered result or null if not applicable
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(com.google.common.collect.RangeSet),55,59,"/**
* Creates a TreeRangeSet instance by copying the ranges from another RangeSet.
* @param rangeSet source RangeSet to copy
*/",Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(java.lang.Iterable),70,74,"/**
* Constructs a TreeRangeSet from an iterable of ranges.
* @param ranges Iterable of Range objects to add
*/","* Returns a {@code TreeRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An
   * element will be contained in this {@code RangeSet} if and only if it is contained in at least
   * one {@code Range} in {@code ranges}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap),461,463,"/**
* Completes ranges by lower bound with a universal range.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,asMap,com.google.common.collect.TreeMultimap:asMap(),199,202,"/**
* Delegates to superclass to retrieve navigable map of key-value pairs.","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedMap} since 2.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$CellSet:clear(),158,161,"/**
* Calls parent class implementation of m1(). 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$Values:clear(),222,225,"/**
* Calls parent table's implementation of m1(). 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,iterator,com.google.common.collect.AbstractTable$Values:iterator(),207,210,"/**
* Returns an iterator over valid mask values.
* @return Iterator of V type containing valid masks
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ArrayTable:hashCode(),238,241,"/**
* Calls m1() to perform nested operation and returns result.
* @return Result of m1().m2()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ImmutableTable:hashCode(),238,241,"/**
* Calls m1() to retrieve an object and invokes its m2() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.HashBasedTable:cellSet(),235,238,"/**
* Calls superclass implementation of m1(). 
* @return Set of cells as per superclass method.","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,containsValue,com.google.common.collect.ImmutableTable:containsValue(java.lang.Object),388,391,"/**
* Checks if input value matches mask criteria using M1 and M2. 
* @param value input object to be checked 
* @return true if value matches, false otherwise 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.HashBasedTable:values(),795,798,"/**
 * Calls superclass implementation of m1(). 
 */","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onKeys,com.google.common.collect.Ordering:onKeys(),463,465,"/**
* Creates a mask ordering function for entries with type parameter T2.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,ordering,com.google.common.collect.MinMaxPriorityQueue$Builder:ordering(),228,231,"/**
* Creates an ordering instance using the provided comparator.
* @return Ordering instance with specified comparator
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsFirst,com.google.common.collect.NaturalOrdering:nullsFirst(),45,53,"/**
* Returns a nulls-first ordering for the specified type.
* @return Ordering object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,nullsFirst,com.google.common.collect.NullsLastOrdering:nullsFirst(),57,60,"/**
* Returns an Ordering instance for type S, where S is a subclass of T.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsLast,com.google.common.collect.NaturalOrdering:nullsLast(),55,63,"/**
* Returns a user-defined ordering for comparable types, 
* delegating to the superclass implementation if not overridden. 
* @return Ordering instance or inherited from superclass",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,nullsLast,com.google.common.collect.NullsFirstOrdering:nullsLast(),63,66,"/**
* Returns an Ordering object for type S with nullability.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,<init>,com.google.common.collect.DescendingImmutableSortedSet:<init>(com.google.common.collect.ImmutableSortedSet),32,35,"/**
* Creates a descending-ordered ImmutableSortedSet from an existing one.
* @param forward the original sorted set to reverse
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,comparator,com.google.common.collect.DescendingMultiset:comparator(),41,48,"/**
* Returns a custom comparator for the collection, either reusing an existing one or creating a new one based on the provided strategy. 
* @return Comparator<? super E> instance; null if not created yet
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,reverse,com.google.common.collect.GeneralRange:reverse(),269,285,"/**
* Returns a reversed general range object, creating a new one if necessary.
*/",Returns the same range relative to the reversed comparator.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,reverse,com.google.common.collect.Maps$DescendingMap:reverse(java.util.Comparator),4300,4302,"/**
* Returns an ordering based on the provided comparator.
* @param forward comparator to use for ordering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,"com.google.common.collect.MinMaxPriorityQueue:<init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int)",241,251,"/**
* Initializes the MinMaxPriorityQueue with a specified size.
* @param queueSize maximum number of elements in the queue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,reverse,com.google.common.collect.NullsFirstOrdering:reverse(),50,55,"/**
* Returns an Ordering instance for type S, with null safety.
* @return Ordering instance or null if not possible
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,reverse,com.google.common.collect.NullsLastOrdering:reverse(),50,55,"/**
* Returns an Ordering instance of type S, where S is a subtype of T.
* The returned Ordering is the result of applying m1 and m2 to T and then casting the result to S.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,reverse,com.google.common.collect.Sets$DescendingSet:reverse(java.util.Comparator),2246,2248,"/**
* Returns an ordering based on the given comparator.
* @param forward comparator to use for ordering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Iterable),1380,1387,"/**
* Builds an ImmutableList of unique elements from the input iterable.
* @param types input iterable containing elements to be included in the list
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellOf,"com.google.common.collect.ImmutableTable:cellOf(java.lang.Object,java.lang.Object,java.lang.Object)",157,162,"/**
* Creates a cell with masked values.
* @param rowKey masked row key
* @param columnKey masked column key
* @param value masked value
* @return Cell object with masked values
*/","* Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a
   * new entry with those values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,next,com.google.common.collect.StandardTable$CellIterator:next(),255,277,"/**
* Executes M2 operation for cell retrieval.
* @return Cell object with retrieved data
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,elementSet,com.google.common.collect.ImmutableMultiset:elementSet(),354,355,"/**
* Returns an immutable set of function masks.",* @since 21.0 (present with return type {@code Set} since 2.0),,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,"com.google.common.collect.ImmutableMap$Builder:put(java.lang.Object,java.lang.Object)",451,458,"/**
* Adds a new entry with the specified key and value.
* @param key unique key for the entry
* @param value associated value for the entry
*/","* Associates {@code key} with {@code value} in the built map. If the same key is put more than
     * once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last
     * value put for that key.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",142,144,"/**
* Creates a map with two key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @return ImmutableMap containing the specified entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",151,153,"/**
* Creates a map from three key-value pairs.
* @param k1 the first key
* @param v1 the first value
* @param k2 the second key
* @param v2 the second value
* @param k3 the third key
* @param v3 the third value
* @return an ImmutableMap with three entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",160,163,"/**
* Creates an immutable map from four key-value pairs.
* @param k1 key for first entry
* @param v1 value for first entry
* @param k2 key for second entry
* @param v2 value for second entry
* @param k3 key for third entry
* @param v3 value for third entry
* @param k4 key for fourth entry
* @param v4 value for fourth entry
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,174,"/**
* Creates an immutable map from 5 key-value pairs.
* @param k1 k2 k3 k4 k5 keys
* @param v1 v2 v3 v4 v5 values
* @return ImmutableMap containing all provided entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",182,191,"/**
* Creates an immutable map from 6 key-value pairs.
* @param k1,k2,k3,k4,k5,k6 keys
* @param v1,v2,v3,v4,v5,v6 values
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",199,209,"/**
* Creates an immutable map from 7 key-value pairs.
* @param k1 first key
* @param v1 first value
* @param k2 second key
* @param v2 second value
* @param k3 third key
* @param v3 third value
* @param k4 fourth key
* @param v4 fourth value
* @param k5 fifth key
* @param v5 fifth value
* @param k6 sixth key
* @param v6 sixth value
* @param k7 seventh key
* @param v7 seventh value
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",217,243,"/**
* Creates an ImmutableMap from 8 key-value pairs.
* @param k1,k2,k3,k4,k5,k6,k7,k8 keys
* @param v1,v2,v3,v4,v5,v6,v7,v8 values
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",251,280,"/**
* Creates an immutable map from 9 key-value pairs.
* @param k1,k2,k3,k4,k5,k6,k7,k8,k9 keys
* @param v1,v2,v3,v4,v5,v6,v7,v8,v9 values
* @return ImmutableMap with the provided entries
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",288,320,"/**
* Creates an immutable map from 10 key-value pairs.
* @param k1 k2 k3 k4 k5 k6 k7 k8 k9 k10 unique keys
* @param v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 corresponding values
*/","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)",123,130,"/**
* Creates a non-terminal immutable bi-map entry with provided key, value, and adjacent entries.
* @param key unique key identifier
* @param value associated value
* @param nextInKeyBucket optional next entry in key bucket
* @param nextInValueBucket optional next entry in value bucket
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArrayCheckingBucketOverflow,"com.google.common.collect.RegularImmutableMap:fromEntryArrayCheckingBucketOverflow(int,java.util.Map$Entry[],boolean)",104,172,"/**
* Constructs an immutable map from a given array of entries.
* @param n number of entries
* @param entryArray array of entries to use
* @param throwIfDuplicateKeys whether to throw on duplicate keys
* @return ImmutableMap object or null if not constructed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry),213,215,"/**
* Wraps an existing map Entry as an ImmutableMapEntry.",Makes an entry usable internally by a new ImmutableMap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,com.google.common.collect.ImmutableListMultimap$Builder:put(java.util.Map$Entry),265,270,"/**
* Adds an existing entry to the builder.
* @param entry non-null key-value pair
*/","* {@inheritDoc}
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Iterable),265,271,"/**
* Applies the provided entries to the builder, using a mask function.
* @param entries iterable of key-value pairs to process
*/","* Adds entries to the built multimap.
     *
     * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,com.google.common.collect.ImmutableSetMultimap$Builder:put(java.util.Map$Entry),314,319,"/**
* Configures builder with given key-value pair.
* @param entry entry to add to the map
* @return updated builder instance
*/","* Adds an entry to the built multimap if it is not already present.
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:trySplit(),376,399,"/**
* Creates an output spliterator for the provided input.
* @return OutSpliterator object or null on failure
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:trySplit(),376,399,"/**
* Creates a spliterator for the given data, splitting it into two parts.
* @return Spliterator object or null if no split is possible
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,spliterator,com.google.common.collect.Multiset:spliterator(),481,484,"/**
* Returns a Spliterator for iterating over elements in this multiset.
* @return Spliterator instance for iterating over elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredNavigableSet:<init>(java.util.NavigableSet,com.google.common.base.Predicate)",1348,1350,"/**
* Creates a filtered navigable set from an existing navigable set.
* @param unfiltered original navigable set
* @param predicate filtering condition for elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredSortedSet:subSet(java.lang.Object,java.lang.Object)",1309,1313,"/**
* Creates a filtered sorted set of elements between 'fromElement' and 'toElement'.
* @param fromElement starting element (inclusive)
* @param toElement ending element (inclusive) 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,com.google.common.collect.Sets$FilteredSortedSet:headSet(java.lang.Object),1315,1318,"/**
* Filters an existing sorted set using a predicate.
* @param toElement element to filter by
* @return filtered SortedSet of type E or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,com.google.common.collect.Sets$FilteredSortedSet:tailSet(java.lang.Object),1320,1323,"/**
* Returns a filtered sorted set of elements.
* @param fromElement starting element for filtering
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.SortedSet,com.google.common.base.Predicate)",1229,1240,"/**
* Combines a sorted set with a predicate to filter its elements.
* @param unfiltered original sorted set
* @param predicate filtering condition
* @return filtered sorted set or null if not supported
*/","* Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The
   * returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,getValue,com.google.common.collect.CompactHashMap$MapEntry:getValue(),911,932,"/**
* Returns a mask value based on the last known index or delegate data.
* @return V mask value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,firstEntryIndex,com.google.common.collect.CompactHashMap:firstEntryIndex(),608,610,"/**
* Returns function mask value (-1 if true, 0 otherwise).
* @return int mask value based on result of m1()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,clear,com.google.common.collect.CompactLinkedHashMap:clear(),288,299,"/**
* Executes method 4.
* @param links list of URLs to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,trimToSize,com.google.common.collect.CompactHashMap:trimToSize(),1070,1090,"/**
* Initializes or updates the hash table with a compact mask.
*/","* Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,trimToSize,com.google.common.collect.CompactHashSet:trimToSize(),655,675,"/**
* Initializes table size and mask based on delegate set.
* @param none
*/","* Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,firstEntryIndex,com.google.common.collect.CompactHashSet:firstEntryIndex(),522,524,"/**
* Returns a mask value based on boolean result of m1().
* @return -1 if m1() returns true, 0 otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,clear,com.google.common.collect.CompactLinkedHashSet:clear(),247,260,"/**
* Executes M4 operation if M1 condition is met.
* Otherwise, initializes first and last entry with ENDPOINT,
* synchronizes predecessor and successor arrays, and calls parent's M4 method.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,allocArrays,com.google.common.collect.CompactLinkedHashMap:allocArrays(),122,127,"/**
* Initializes links array with expected size.
* @return Size of initialized links array.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,allocArrays,com.google.common.collect.CompactLinkedHashSet:allocArrays(),139,145,"/**
* Initializes arrays to store predecessor and successor nodes, 
* based on the size of the parent's m1() result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSucceeds,"com.google.common.collect.CompactLinkedHashMap:setSucceeds(int,int)",167,179,"/**
* Updates entry pointers based on predecessor and successor endpoint IDs.
* @param pred ID of the previous endpoint
* @param succ ID of the next endpoint
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,insertEntry,"com.google.common.collect.CompactLinkedHashSet:insertEntry(int,java.lang.Object,int,int)",193,198,"/**
* Calls superclass method and invokes other methods to process entry.
* @param entryIndex index of current entry
* @param object object associated with entry (may be null)
* @param hash hash value for entry
* @param mask mask value for entry
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,readResolve,com.google.common.collect.EmptyContiguousSet$SerializedForm:readResolve(),157,159,"/**
* Creates an empty contiguous set from the specified domain.
* @return EmptyContiguousSet instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,readResolve,com.google.common.collect.RegularContiguousSet$SerializedForm:readResolve(),253,255,"/**
* Creates a contiguous set from the given range and domain.
* @return A RegularContiguousSet object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,createDescendingSet,com.google.common.collect.EmptyContiguousSet:createDescendingSet(),177,181,"/**
* Returns an immutable sorted set of function masks.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,emptySet,com.google.common.collect.ImmutableSetMultimap:emptySet(java.util.Comparator),648,652,"/**
* Creates an immutable set instance with optional sorting.
* @param valueComparator comparator for sorted set, or null for unsorted
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,emptyMap,com.google.common.collect.ImmutableSortedMap:emptyMap(java.util.Comparator),119,126,"/**
* Creates an immutable sorted map from a provided comparator.
* @param comparator key comparison function
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,com.google.common.collect.RegularImmutableSortedMultiset:<init>(java.util.Comparator),47,52,"/**
* Initializes a new empty immutable sorted multiset with the given comparator.
* @param comparator comparison function for sorting elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$BelowAll:canonical(com.google.common.collect.DiscreteDomain),187,194,"/**
* Returns a cut from the given discrete domain, or returns itself if not found.
* @param domain DiscreteDomain object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap:getEntry(java.lang.Comparable),126,135,"/**
* Retrieves a range entry by key, considering lower bounds.
* @param key unique key identifier
* @return RangeEntry object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isEmpty,com.google.common.collect.Range:isEmpty(),398,400,"/**
* Checks if upperBound is within the range of lowerBound using m1 method.
*/","* Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does
   * not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and
   * can't be constructed at all.)
   *
   * <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b>
   * considered empty, even though they contain no actual values. In these cases, it may be helpful
   * to preprocess ranges with {@link #canonical(DiscreteDomain)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,equals,com.google.common.collect.Range:equals(java.lang.Object),662,669,"/**
* Recursively checks if the given object's bounds satisfy this range.
* @param object Range or subclass instance to compare with
* @return true if the object's bounds are within this range, false otherwise
*/","* Returns {@code true} if {@code object} is a range having the same endpoints and bound types as
   * this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b>
   * equal to one another, despite the fact that they each contain precisely the same set of values.
   * Similarly, empty ranges are not equal unless they have exactly the same representation, so
   * {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$RangesByUpperBound:get(java.lang.Object),342,360,"/**
* Fetches range for given key, considering upper bound window and lower bound.
* @param key Cut object or null
* @return Range<C> object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,create,"com.google.common.collect.Range:create(com.google.common.collect.Cut,com.google.common.collect.Cut)",132,134,"/**
* Creates a range from two cut points.
* @param lowerBound lower bound of the range
* @param upperBound upper bound of the range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet:encloses(com.google.common.collect.Range),148,153,"/**
* Checks if the given range intersects with any existing range.
* @param range input range to check
* @return true if intersection found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,rangeEnclosing,com.google.common.collect.TreeRangeSet:rangeEnclosing(com.google.common.collect.Range),155,161,"/**
* Returns the range of values that overlap with the input range, 
* based on the given lower bound. If no overlapping range exists, returns null.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAdd,com.google.common.collect.ForwardingList:standardAdd(java.lang.Object),136,139,"/**
* Checks if an element matches the functional mask.
* @param element the element to check
*/","* A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int,
   * Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link
   * #add(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIterator,com.google.common.collect.ForwardingList:standardIterator(),181,183,"/**
* Returns an iterator over elements of type E.
*/","* A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(),192,194,"/**
* Returns an iterator with mask functionality.
* @return Iterator instance
*/","* A sensible default implementation of {@link #listIterator()}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #listIterator()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,asMap,com.google.common.collect.ForwardingMultimap:asMap(),49,52,"/**
* Calls m1(), then delegates to its m2() result.
* @return Map of Ks to Collections of Vs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,clear,com.google.common.collect.ForwardingMultimap:clear(),54,57,"/**
* Calls m2() on the result of m1().",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsEntry,"com.google.common.collect.ForwardingMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,62,"/**
* Delegates call to underlying object's m2 method.
* @param key nullable key object
* @param value nullable value object
* @return result of m2 invocation on underlying object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsKey,com.google.common.collect.ForwardingMultimap:containsKey(java.lang.Object),64,67,"/**
* Delegates key lookup to managed map.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsValue,com.google.common.collect.ForwardingMultimap:containsValue(java.lang.Object),69,72,"/**
* Calls m1() and delegates to its m2() method with provided value.
* @param value object to pass to m2() in m1()
* @return result of m2() call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,entries,com.google.common.collect.ForwardingMultimap:entries(),74,77,"/**
* Calls m1() and delegates to its implementation of m2().
* Returns collection of entries from m1()'s result.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,get,com.google.common.collect.ForwardingMultimap:get(java.lang.Object),79,82,"/**
* Calls m1() and delegates to its m2() method with the provided key.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,isEmpty,com.google.common.collect.ForwardingMultimap:isEmpty(),84,87,"/**
* Calls m1() and returns its result's m2() value.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keys,com.google.common.collect.ForwardingMultimap:keys(),89,92,"/**
* Calls m1() and delegates to its m2() method.
* @return multiset of K elements from m1()'s result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keySet,com.google.common.collect.ForwardingMultimap:keySet(),94,97,"/**
* Calls m1() and delegates to its m2() method.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,put,"com.google.common.collect.ForwardingMultimap:put(java.lang.Object,java.lang.Object)",99,103,"/**
* Calls m1() and delegates to its m2() method.
* @param key arbitrary key object
* @param value arbitrary value object
* @return result of m1().m2()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,"com.google.common.collect.ForwardingMultimap:putAll(java.lang.Object,java.lang.Iterable)",105,109,"/**
* Delegates to internal delegate's m2() method.
* @param key the key to operate on
* @param values the values to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,com.google.common.collect.ForwardingMultimap:putAll(com.google.common.collect.Multimap),111,115,"/**
* Delegates call to m1() with provided Multimap.
* @param multimap input multimap for processing
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,remove,"com.google.common.collect.ForwardingMultimap:remove(java.lang.Object,java.lang.Object)",117,121,"/**
* Delegates to m1() to perform a specific operation.
* @param key object to operate on (may be null)
* @param value additional data for the operation (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,removeAll,com.google.common.collect.ForwardingMultimap:removeAll(java.lang.Object),123,127,"/**
* Calls underlying data structure to retrieve collection of values.
* @param key optional key object
* @return collection of V objects or empty collection if not found",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,replaceValues,"com.google.common.collect.ForwardingMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",129,133,"/**
* Delegates to m1() to perform operation m2 with provided key and values.
* @param key unique identifier
* @param values collection of values related to key
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,size,com.google.common.collect.ForwardingMultimap:size(),135,138,"/**
* Calls m1(), which in turn calls this method recursively.
* Returns result of innermost call to m2().
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,values,com.google.common.collect.ForwardingMultimap:values(),140,143,"/**
* Calls m1(), which then delegates to m2().
* @return Collection of type V from m1()'s result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,equals,com.google.common.collect.ForwardingMultimap:equals(java.lang.Object),145,150,"/**
* Checks if the provided object is identical to the current instance or its parent. 
* @param object object to compare with (may be null)
* @return true if identical, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,hashCode,com.google.common.collect.ForwardingMultimap:hashCode(),152,155,"/**
* Calls m1(), then delegates to its returned value's m2().
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,com.google.common.collect.TreeMultiset:count(java.lang.Object),242,255,"/**
* Computes query result size for given element.
* @param element object to evaluate, or null for default value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,firstNode,com.google.common.collect.TreeMultiset:firstNode(),394,415,"/**
* Retrieves the AVL tree node that matches the given range criteria.
* @return AvlNode object or null if not found
*/",Returns the first node in the tree that is in range.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,lastNode,com.google.common.collect.TreeMultiset:lastNode(),417,438,"/**
* Retrieves an AvlNode within the specified range.
* @return AvlNode object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(com.google.common.collect.Table),95,100,"/**
* Copies data from a Table into a new HashBasedTable.
* @param table source Table to copy from
*/","* Creates a {@code HashBasedTable} with the same mappings as the specified table.
   *
   * @param table the table to copy
   * @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is
   *     null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(),100,103,"/**
* Creates a new TreeBasedTable instance with default ordering.
*/","* Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column
   * keys.
   *
   * <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable},
   * instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's
   * necessary to support classes defined without generics.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,"com.google.common.collect.TreeBasedTable:create(java.util.Comparator,java.util.Comparator)",111,116,"/**
* Creates a TreeBasedTable instance with custom row and column comparators.
* @param rowComparator comparator for rows
* @param columnComparator comparator for columns
*/","* Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators.
   *
   * @param rowComparator the comparator that orders the row keys
   * @param columnComparator the comparator that orders the column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(int),76,79,"/**
* Creates a HashBiMap with initial capacity based on expected size.
* @param expectedSize estimated number of key-value pairs
*/","* Constructs a new, empty bimap with the specified expected size.
   *
   * @param expectedSize the expected number of entries
   * @throws IllegalArgumentException if the specified expected size is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsKey,com.google.common.collect.CompactHashMap:containsKey(java.lang.Object),502,506,"/**
* Checks existence of a value in the underlying map.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,get,com.google.common.collect.CompactHashMap:get(java.lang.Object),508,520,"/**
* Retrieves value V using a nested strategy or by indexing.
* @param key object to search for, may be null
* @return V object or null if not found or failed to retrieve
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashSet:moveLastEntry(int,int)",200,212,"/**
* Updates destination array with shifted data from source array.
* @param dstIndex index to start updating
* @param mask shift mask value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$EntrySetView:remove(java.lang.Object),840,871,"/**
* Tries to find an entry in the map using a custom hashing algorithm.
* @param o object to search for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,removeHelper,com.google.common.collect.CompactHashMap:removeHelper(java.lang.Object),534,559,"/**
* Retrieves and updates the value associated with a given key in the compact hash.
* @param key the key to look up (may be null)
* @return the old value if found, NOT_FOUND otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,remove,com.google.common.collect.CompactHashSet:remove(java.lang.Object),448,477,"/**
* Performs object lookup and cache update.
* @param object the object to look for
* @return true if found, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object)",288,292,"/**
* Creates a new entry with the given key and value.
* @param key unique identifier for the entry
* @param value associated data for the entry
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forcePut,"com.google.common.collect.HashBiMap:forcePut(java.lang.Object,java.lang.Object)",328,332,"/**
* Sets or updates map entry with given key and value.
* @param key unique identifier
* @param value associated value (null if removed)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builder,com.google.common.collect.ImmutableBiMap:builder(),290,292,"/**
* Creates a new instance of the Builder class.
* @return A new Builder instance with default configuration.","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap$Builder:<init>(),97,97,"/**
 * Initializes a new instance of the Builder class.",Creates a new builder.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:<init>(),64,64,"/**
* Private constructor to prevent instantiation of this utility class.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,makeBuilder,com.google.common.collect.ImmutableSortedMap$SerializedForm:makeBuilder(int),1152,1155,"/**
* Creates a new Builder instance with specified key and value sizes.
* @param size total size of key-value pairs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,naturalOrder,com.google.common.collect.ImmutableSortedMap:naturalOrder(),567,569,"/**
* Creates a builder with default ordering (m1()) and returns it. 
* @return Builder instance with specified ordering
*/","* Returns a builder that creates immutable sorted maps whose keys are ordered by their natural
   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,orderedBy,com.google.common.collect.ImmutableSortedMap:orderedBy(java.util.Comparator),579,581,"/**
* Creates a Builder instance with the specified key comparator.
* @param comparator key comparison function
*/","* Returns a builder that creates immutable sorted maps with an explicit comparator. If the
   * comparator has a more general type than the map's keys, such as creating a {@code
   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}
   * constructor instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,reverseOrder,com.google.common.collect.ImmutableSortedMap:reverseOrder(),587,589,"/**
* Creates a new Builder instance with default ordering.
*/","* Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of
   * their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object)",133,135,"/**
* Creates an immutable map from a single key-value pair.
* @param k1 the unique key
* @param v1 the associated value
*/","* Returns an immutable map containing a single entry. This map behaves and performs comparably to
   * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable
   * mainly for consistency and maintainability of your code.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,inverse,com.google.common.collect.ImmutableBiMap:inverse(),582,583,"/**
* Returns an immutable bi-map of function masks.
*/","* {@inheritDoc}
   *
   * <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,combine,com.google.common.collect.ImmutableBiMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),419,424,"/**
* Configures this instance with a new map builder.
* @param builder map builder to inherit from
* @return this instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,combine,com.google.common.collect.ImmutableSortedMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),697,702,"/**
* Merges another immutable map builder into this one.
* @param other the other immutable map to merge
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builder,com.google.common.collect.ImmutableList:builder(),759,761,"/**
* Creates a new instance of the Builder class with default settings.
* @return Builder object initialized with default values
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,orderedBy,com.google.common.collect.ImmutableSortedSet:orderedBy(java.util.Comparator),396,398,"/**
* Creates a Builder instance with custom sorting by provided Comparator.
* @param comparator object used to compare elements of type E
*/","* Returns a builder that creates immutable sorted sets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,reverseOrder,com.google.common.collect.ImmutableSortedSet:reverseOrder(),404,406,"/**
* Creates a new instance of Builder with sorted collection. 
* @return SortedBuilder instance","* Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse
   * of their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,naturalOrder,com.google.common.collect.ImmutableSortedSet:naturalOrder(),414,416,"/**
* Creates a Builder instance with default ordering (m1). 
* @return Builder instance with specified ordering
*/","* Returns a builder that creates immutable sorted sets whose elements are ordered by their
   * natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method
   * provides more type-safety than {@link #builder}, as it can be called only for classes that
   * implement {@link Comparable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverse,com.google.common.collect.ImmutableList:reverse(),633,635,"/**
* Returns a reversed version of this list if its length is greater than 1; otherwise, returns a copy of itself.
* @return the reversed or copied list
*/","* Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,
   * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.
   *
   * @return a view of this immutable list in reverse order
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.String),749,751,"/**
* Converts input string to list of characters with mask applied.
* @param string input string to process
*/","* Returns a view of the specified string as an immutable list of {@code Character} values.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createValues,com.google.common.collect.RegularImmutableMap:createValues(),372,375,"/**
* Returns an immutable collection of function masks.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,of,com.google.common.collect.ImmutableList:of(java.lang.Object),98,100,"/**
* Creates an immutable list containing a single element.
* @param e1 the element to be included in the list
*/","* Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if the element is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,entries,com.google.common.collect.ImmutableSetMultimap:entries(),594,598,"/**
* Returns an immutable set of key-value pairs from the underlying map.
*/","* Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses
   * the values for the first key, the values for the second key, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,of,com.google.common.collect.ImmutableSet:of(java.lang.Object),91,93,"/**
* Creates an immutable set containing a single element.
* @param e1 The element to include in the set
*/","* Returns an immutable set containing the given element. Preferred over {@link
   * Collections#singleton} for code consistency, {@code null} rejection, and because the return
   * type conveys the immutability guarantee.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,iterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:iterator(),62,65,"/**
 * Returns an unmodifiable iterator over entry set of this map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$Indexed:iterator(),338,341,"/**
* Calls m1(), then iterates over its result.
* @return iterator over elements of type E
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:iterator(),396,399,"/**
* Returns an unmodifiable iterator over elements of type E.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,iterator,com.google.common.collect.IndexedImmutableSet:iterator(),32,35,"/**
* Delegates to m1() to fetch an iterator of elements.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,iterator,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:iterator(),264,267,"/**
* Delegate to nested iterator using m1().",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,iterator,com.google.common.collect.RegularImmutableSortedSet:iterator(),69,72,"/**
* Returns an unmodifiable iterator over the collection's elements.
* @return Iterator object or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$CartesianSet:hashCode(),1626,1646,"/**
* Calculates a custom hash value based on multiple factors.
* @return unique hash code
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,charset,com.google.common.net.MediaType:charset(),857,875,"/**
* Resolves the character set from optional or multiple attribute values.
* @return Optional<Charset> containing resolved charset or null if not found
*/","* Returns an optional charset for the value of the charset parameter if it is specified.
   *
   * @throws IllegalStateException if multiple charset values have been set for this media type
   * @throws IllegalCharsetNameException if a charset value is present, but illegal
   * @throws UnsupportedCharsetException if a charset value is present, but no support is available
   *     in this instance of the Java virtual machine",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotation,com.google.common.reflect.Parameter:getAnnotation(java.lang.Class),77,86,"/**
* Finds and returns the first matching annotation of type @A.
* @param annotationType Class of the annotation to search for
* @return Annotation object or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$WildcardTypeImpl:toString(),502,512,"/**
* Constructs the M4 version string by iterating over lower and upper bounds.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopAsync,com.google.common.util.concurrent.ServiceManager:stopAsync(),340,346,"/**
* Calls m1() on all registered services and returns this instance.","* Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services
   * being managed.
   *
   * @return this",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,isHealthy,com.google.common.util.concurrent.ServiceManager:isHealthy(),390,397,"/**
* Verifies all services meet specific condition m1().
* @return true if all services pass, false otherwise
*/","* Returns true if all services are currently in the {@linkplain State#RUNNING running} state.
   *
   * <p>Users who want more detailed information should use the {@link #servicesByState} method to
   * get detailed information about which services are not running.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,writeReplace,com.google.common.collect.ImmutableBiMap:writeReplace(),635,639,"/**
* Returns serialized form of this object.
* @return SerializedForm instance containing this object's state
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(),481,483,"/**
 * Initializes builder with default settings.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builderWithExpectedSize,com.google.common.collect.ImmutableSet:builderWithExpectedSize(int),449,452,"/**
* Creates a builder instance with specified expected size.
* @param expectedSize size to be used in the builder
*/","* Returns a new builder, expecting the specified number of distinct elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder
   * before {@link Builder#build} is called, the builder is likely to perform better than an unsized
   * {@link #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of distinct elements added to the builder.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$Builder:copy(),510,513,"/**
* Calls m1 on current implementation and updates to its result's implementation.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,subListUnchecked,"com.google.common.collect.ImmutableSortedAsList:subListUnchecked(int,int)",76,86,"/**
* Sublists a sorted set within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return ImmutableList of elements in the sub-sorted set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,spliterator,com.google.common.collect.ImmutableSortedAsList:spliterator(),88,95,"/**
* Creates a sorted and distinct spliterator for the collection.
* @return Spliterator object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,lastIndexOf,com.google.common.collect.ImmutableSortedAsList:lastIndexOf(java.lang.Object),64,68,"/**
* Generates function mask from target object.
* @param target nullable target object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,contains,com.google.common.collect.ImmutableSortedAsList:contains(java.lang.Object),70,74,"/**
* Evaluates whether target object's mask value is non-negative.
* @param target Object to evaluate (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,hashCode,com.google.common.collect.ImmutableRangeMap:hashCode(),404,407,"/**
* Calls and returns the result of m1(), which in turn calls this method recursively. 
* @return the result of m1()'s m2() invocation",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,equals,com.google.common.collect.ImmutableRangeMap:equals(java.lang.Object),409,416,"/**
* Recursively checks if the given object contains a valid RangeMap.
* @param o Object to check, may be null
* @return true if RangeMap is found and its contents are valid, else false
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,writeReplace,com.google.common.collect.ImmutableRangeMap:writeReplace(),454,456,"/**
* Returns an instance of SerializedForm with data from m1(). 
* @return SerializedForm object containing result of m1()",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,writeReplace,com.google.common.collect.ImmutableSortedMap:writeReplace(),1160,1164,"/**
* Returns serialized form of this object.
* @return SerializedForm representation of the current object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,"com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",284,289,"/**
* Adds a value collection to the builder.
* @param key unique data key
* @param values iterable of associated values
* @return updated Builder instance
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(com.google.common.collect.Multimap),322,329,"/**
* Adds all entries from the given Multimap to this builder.
* @param multimap source of entries
*/","* Stores another multimap's entries in the built multimap. The generated multimap's key and
     * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,
     * with new keys and values following any existing keys and values.
     *
     * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is
     *     left in an invalid state.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,combine,com.google.common.collect.ImmutableMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),353,361,"/**
* Merges the builder configuration from another instance.
* @param other Builder instance to merge settings from
* @return This builder instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,"com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",333,338,"/**
* Adds key-value pairs to the map builder.
* @param key unique map key
* @param values collection of associated values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,throwDeleteFailed,"com.google.common.io.MoreFiles:throwDeleteFailed(java.nio.file.Path,java.util.Collection)",786,804,"/**
* Throws a FileSystemException if file system operations fail.
*@param path the Path being operated on
*@throws FileSystemException with detailed error information
*/","* Throws an exception indicating that one or more files couldn't be deleted when deleting {@code
   * path} or its contents.
   *
   * <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException}
   * thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the
   * thrown exception contains all the exceptions in the given collection as suppressed exceptions.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)",110,133,"/**
* Executes a callable with optional timeout and interruptibility.
* @param callable function to execute
* @param timeoutDuration execution time limit in specified unit
* @param timeoutUnit time unit for timeout duration (e.g., seconds, milliseconds)
* @param amInterruptible whether to allow interruption of the execution
* @return result of the executed function or null if interrupted/timeouted
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,com.google.common.collect.Iterators:concat(java.util.Iterator),556,559,"/**
* Concatenates and iterates over multiple input iterators.
* @param inputs variable-length array of iterators to concatenate
* @return single iterator containing all elements or null if empty
*/","* Combines multiple iterators into a single iterator. The returned iterator iterates across the
   * elements of each iterator in {@code inputs}. The input iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.
   *
   * @throws NullPointerException if any of the provided iterators is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,readObject,com.google.common.collect.LinkedListMultimap:readObject(java.io.ObjectInputStream),854,867,"/**
* Deserializes and populates a user profile from an ObjectInputStream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:lastIndexOf(java.lang.Object),668,672,"/**
* Retrieves a mask value from the list based on the provided object.
* @param object object to search for
* @return non-negative integer mask value or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList:contains(java.lang.Object),435,438,"/**
* Checks if the given object has a valid mask value.
* @param object input object to check
* @return true if object has a non-negative mask value, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:indexOf(java.lang.Object),662,666,"/**
* Retrieves a functional mask value based on the given object.
* @param object object to retrieve mask for
* @return non-negative mask value or -1 if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextEntry,com.google.common.collect.MapMakerInternalMap$HashIterator:nextEntry(),2613,2620,"/**
* Retrieves the next entry from the external iterator, 
* updating the last returned value and invoking m1().",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",632,638,"/**
* Creates a new instance of a dummy value segment.
* @param map internal map instance
* @param initialCapacity initial capacity for the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",439,446,"/**
* Creates a new StrongKeyStrongValueSegment instance for the given internal map. 
* @param map the internal map to associate with
* @param initialCapacity the initial capacity of the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",537,543,"/**
* Creates a new StrongKeyWeakValueSegment instance.
* @param map internal map instance
* @param initialCapacity initial capacity for the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",744,749,"/**
* Creates a new WeakKeyDummyValueSegment instance.
* @param map internal map instance
* @param initialCapacity segment capacity
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",833,839,"/**
* Creates a new WeakKeyStrongValueSegment instance.
* @param map underlying internal map
* @param initialCapacity initial capacity of the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",933,938,"/**
* Creates a new instance of WeakKeyWeakValueSegment.
* @param map the underlying map
* @param initialCapacity the initial capacity of the segment
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getLiveEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getLiveEntry(java.lang.Object,int)",1435,1437,"/**
* Computes mask value using provided key and hash.
* @param key arbitrary object to compute mask from
* @param hash integer hash code of the key
* @return computed mask value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,com.google.common.collect.MapMakerInternalMap:getEntry(java.lang.Object),2368,2374,"/**
* Computes and caches a custom hash for the given key. 
* @param key object to compute hash for
* @return cached hash or null if key is null
*/","* Returns the internal entry for the specified key. The entry may be computing or partially
   * collected. Does not impact recency ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",1498,1553,"/**
* Inserts or updates a key-value pair into the map.
* @param key unique key identifier
* @param hash hash code of the key
* @param value associated value
* @param onlyIfAbsent true to return existing value if present, false to update and return new value
* @return null if update was successful or key not found; otherwise the existing value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",1624,1669,"/**
* Updates existing map entry if key matches and value is equivalent.
* @param key the key to lookup
* @param hash the hash code of the entry
* @param oldValue the old value (for comparison)
* @param newValue the new value to update with
* @return true if updated, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object)",1671,1710,"/**
* Updates or removes value associated with given key in the map.
* @param key unique key identifier
* @param hash hash code of the key
* @param newValue new value to be stored (or null for removal)
* @return previous value if updated, or null if removed or not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int)",1712,1751,"/**
* Retrieves and updates the value associated with a given key using hash.
* @param key Object to search for
* @param hash hash code of the key
* @return associated value or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int,java.lang.Object)",1753,1792,"/**
* Removes entry from map if key and value match.
* @param key object to remove
* @param hash hash code of the object
* @param value expected value to compare with
* @return true if removal was successful, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,run,com.google.common.collect.MapMakerInternalMap$CleanupMapTask:run(),2285,2295,"/**
* Clears all segments in the internal map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,postReadCleanup,com.google.common.collect.MapMakerInternalMap$Segment:postReadCleanup(),1988,1992,"/**
* Triggers m2() when read count does not exceed drain threshold.
*/","* Performs routine cleanup following a read. Normally cleanup happens during writes, or from
     * the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try
     * cleaning up from the read thread.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$EntrySet:clear(),2781,2784,"/**
* Calls overridden implementation from parent class.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$KeySet:clear(),2703,2706,"/**
* Calls internal map's m1() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Values:clear(),2732,2735,"/**
* Calls internal map's m1() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",966,975,"/**
* Creates a new entry in the segment's queue for the given key.
* @param segment segment to add entry to
* @param key unique key identifier
* @param hash key hash value
* @param next previous entry in linked list (null if not linked) 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardContainsKey,com.google.common.collect.ForwardingSortedMap:standardContainsKey(java.lang.Object),132,143,"/**
* Checks if a key exists in the sorted map.
* @param key Object to search for
* @return true if key is found, false otherwise
*/","* A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of
   * {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link
   * #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardSubMap,"com.google.common.collect.ForwardingSortedMap:standardSubMap(java.lang.Object,java.lang.Object)",152,155,"/**
* Retrieves a sorted map of values between two specified keys.
* @param fromKey starting key
* @param toKey ending key
* @return SortedMap object or null if invalid input
*/","* A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link
   * #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override
   * {@link #subMap(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,size,com.google.common.collect.ForwardingMap:size(),67,70,"/**
* Calls and returns value from nested m2() method.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,isEmpty,com.google.common.collect.ForwardingMap:isEmpty(),72,75,"/**
* Calls m1 to retrieve an object and then calls its m2 method.
* @return true if the returned object's m2 call returns true, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,remove,com.google.common.collect.ForwardingMap:remove(java.lang.Object),77,81,"/**
* Calls M2 on the result of M1, passing through the input key.
* @param key object to pass to M2 (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,clear,com.google.common.collect.ForwardingMap:clear(),83,86,"/**
 * Calls and delegates to the implementation of m2() in the result of calling m1().
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsKey,com.google.common.collect.ForwardingMap:containsKey(java.lang.Object),88,91,"/**
* Calls m2 on the result of m1 with provided key.
* @param key object to pass to m2 (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsValue,com.google.common.collect.ForwardingMap:containsValue(java.lang.Object),93,96,"/**
* Calls m1() and delegates to its m2() method with provided value.
* @param value object to be passed to m1()'s m2()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,get,com.google.common.collect.ForwardingMap:get(java.lang.Object),98,101,"/**
* Calls delegate's m2() with provided key.
* @param key object to query (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,put,"com.google.common.collect.ForwardingMap:put(java.lang.Object,java.lang.Object)",103,107,"/**
* Calls secondary map operation on the underlying data structure.
* @param key   primary key for the operation
* @param value associated value for the operation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,putAll,com.google.common.collect.ForwardingMap:putAll(java.util.Map),109,112,"/**
* Calls m1() and delegates its result to invoke m2 with the provided map.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,keySet,com.google.common.collect.ForwardingMap:keySet(),114,117,"/**
* Calls m1() and returns its result's m2() set.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,values,com.google.common.collect.ForwardingMap:values(),119,122,"/**
* Delegates call to m1(), returning its m2() result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,entrySet,com.google.common.collect.ForwardingMap:entrySet(),124,127,"/**
* Calls m1() to retrieve an intermediate result and delegates m2() operation on it. 
* @return A set of key-value pairs resulting from m1()'s output.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,equals,com.google.common.collect.ForwardingMap:equals(java.lang.Object),129,132,"/**
* Checks if the provided object is the current instance or recursively checks 
* its fields using m1() method. 
* @param object object to check (may be null)
* @return true if object is the current instance, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,hashCode,com.google.common.collect.ForwardingMap:hashCode(),134,137,"/**
* Calls m1() to execute its logic and returns the result of m2().
* @return result of m2() from m1()'s execution.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)",527,540,"/**
* Computes the difference between two maps.
* @param left initial map
* @param right updated map
* @param valueEquivalence equivalence function for values in both maps
* @return MapDifference object describing changes between left and right
*/","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @param valueEquivalence the equivalence relationship to use to compare values
   * @return the difference between the two maps
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.SortedMap,java.util.Map)",559,573,"/**
* Computes the difference between two sorted maps.
* @param left first map
* @param right second map
* @return SortedMapDifference object containing map differences
*/","* Computes the difference between two sorted maps, using the comparator of the left map, or
   * {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This
   * difference is an immutable snapshot of the state of the maps at the time this method is called.
   * It will never change, even if the maps change at a later time.
   *
   * <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must
   * all compare as distinct according to the comparator of the left map.
   *
   * <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call
   * {@code left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.lang.String,java.util.concurrent.Executor)",36,38,"/**
* Initializes an asynchronous event bus with custom dispatcher and logging handler.
* @param identifier unique identifier
* @param executor thread pool executor
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code
   * identifier} as the bus's name for logging purposes.
   *
   * @param identifier short name for the bus, for logging purposes.
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)",49,51,"/**
* Initializes an AsyncEventBus instance with custom executor and exception handler.
* @param executor thread pool executor
* @param subscriberExceptionHandler exception handling strategy for subscribers
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.
   * @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.
   *     See {@link SubscriberExceptionHandler} for more information.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor),59,61,"/**
* Initializes the AsyncEventBus with the provided Executor.
* @param executor thread pool executor to manage event handling
*/","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(java.lang.String),175,178,"/**
* Initializes an EventBus instance with a unique identifier.
* @param identifier unique event bus identifier
*/","* Creates a new EventBus with the given {@code identifier}.
   *
   * @param identifier a brief name for this bus, for logging purposes. Should be a valid Java
   *     identifier.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(com.google.common.eventbus.SubscriberExceptionHandler),186,188,"/**
* Creates an instance of EventBus with custom exception handling.
* @param exceptionHandler handler for unhandled exceptions
*/","* Creates a new EventBus with the given {@link SubscriberExceptionHandler}.
   *
   * @param exceptionHandler Handler for subscriber exceptions.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinChild(int),617,619,"/**
* Computes functional mask value based on input index.
* @param index input index for mask calculation
* @return computed mask value
*/",Returns the minimum child or {@code -1} if no child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinGrandChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinGrandChild(int),622,628,"/**
* Calculates a function mask value based on the given index.
* @param index input index for calculation
*/",Returns the minimum grand child or -1 if no grand child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekLast,com.google.common.collect.MinMaxPriorityQueue:peekLast(),390,392,"/**
* Returns a value based on conditional logic and function calls.
* @return null if m1() is true, or result of m3(m2()) otherwise.","* Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if
   * the queue is empty.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUp(int,java.lang.Object)",565,576,"/**
* Initiates crossover operation by recursively traversing heaps.
* @param index current index in the heap traversal
* @param x element to be crossed over
*/",Bubbles a value from {@code index} up the appropriate heap if required.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:get(java.lang.Object),873,876,"/**
* Retrieves a sorted set of values associated with the given key.
* @param key unique identifier to fetch values for
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,valueComparator,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:valueComparator(),888,891,"/**
* Returns a comparator based on the result of m1().
* @return Comparator object or null if m1() returns null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardContains,com.google.common.collect.ForwardingMultiset:standardContains(java.lang.Object),114,117,"/**
* Evaluates a functional mask value from an object.
* @param object input object to process
* @return true if mask value is positive, false otherwise
*/","* A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link
   * #count}, you may wish to override {@link #contains} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAdd,com.google.common.collect.ForwardingMultiset:standardAdd(java.lang.Object),154,157,"/**
 * Marks an element as masked in the result.
 * @param element element to be marked
 */","* A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you
   * override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemove,com.google.common.collect.ForwardingMultiset:standardRemove(java.lang.Object),178,181,"/**
* Checks if element matches the first filter condition (m1). 
* @param element object to be filtered
* @return true if element passes the filter, false otherwise
*/","* A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If
   * you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardClear,com.google.common.collect.ForwardingMultiset:standardClear(),126,129,"/**
 * Performs mask operation on data.
 * @see Iterators#m3()
 */","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardCount,com.google.common.collect.ForwardingMultiset:standardCount(java.lang.Object),138,145,"/**
* Retrieves a unique mask value associated with the given object.
* @param object nullable object to search for
* @return int mask value or 0 if not found
*/","* A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #count} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardHashCode,com.google.common.collect.ForwardingMultiset:standardHashCode(),296,298,"/**
* Calculates and returns a mask value by calling nested methods.
*/","* A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override
   * {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardToString,com.google.common.collect.ForwardingMultiset:standardToString(),307,310,"/**
* Returns the function mask string by invoking m1 and m2 methods.
*/","* A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override
   * {@link #entrySet}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(),193,197,"/**
* Returns an empty array.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(java.lang.Object[]),236,240,"/**
* Merges two arrays into one.
* @param a array to be merged with this object's array
* @return combined array or null if input array is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(java.lang.Object[]),255,257,"/**
* Returns an array with masked values.
* @param array input array to process
*/","* A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link
   * #iterator}. If you override either of these methods, you may wish to override {@link #toArray}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(java.lang.Object[]),1000,1006,"/**
* Merges two arrays into a single array, synchronizing on mutex.
* @param array input array to merge with
* @return merged array or null if input is null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.lang.Iterable),88,91,"/**
* Applies the m1 function from forwardOrder to an iterable of type E.
* @param iterable input collection to process
* @return result of applying m1, cast to type E
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.lang.Iterable),67,70,"/**
* Applies the M1 transformation to an iterable and returns the result.
* @param iterable collection of elements to transform
* @return transformed collection or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.Maps$6:descendingSet(),155,158,"/**
* Calls m1() and delegates its result to m2().
* Resulting NavigableSet is returned.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollLast,com.google.common.collect.ForwardingNavigableSet:standardPollLast(),141,143,"/**
* Computes a masked value from m1(), using iterators. 
* @return nullable result of computation or null if failed","* A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.
   * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLast,com.google.common.collect.ForwardingNavigableSet:standardLast(),150,153,"/**
* Calculates and returns a mask value by executing methods m1 and m2.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,java.lang.Object)",209,213,"/**
* Returns a sorted set of elements within the specified range.
* @param fromElement start element (inclusive)
* @param toElement end element (exclusive)
*/","* A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object,
   * boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object,
   * boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this
   * implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.Maps$6:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
* Returns a subset of elements in the backing set based on the specified range.
* @param fromElement starting element (inclusive or exclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive or exclusive)
* @param toInclusive whether end is inclusive
* @return NavigableSet of elements within the specified range",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLower,com.google.common.collect.ForwardingNavigableSet:standardLower(java.lang.Object),71,73,"/**
* Applies mask function to input element.
* @param e input element of type E
* @return transformed element or null if not applicable
*/","* A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #lower} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardFloor,com.google.common.collect.ForwardingNavigableSet:standardFloor(java.lang.Object),85,87,"/**
* Applies mask to input element.
* @param e input element to be masked
* @return masked element or null if null input
*/","* A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #floor} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHeadSet,com.google.common.collect.ForwardingNavigableSet:standardHeadSet(java.lang.Object),225,227,"/**
 * Returns a sorted set containing only the specified element.
 * @param toElement the element to include in the set
 */","* A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object,
   * boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override
   * {@link #headSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.Maps$6:headSet(java.lang.Object,boolean)",215,218,"/**
* Delegates call to m1() to fetch NavigableSet of elements.
* @param toElement element to find in set
* @param inclusive whether to include or exclude the specified element
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardCeiling,com.google.common.collect.ForwardingNavigableSet:standardCeiling(java.lang.Object),99,101,"/**
* Computes and returns the functional mask for input object 'e'.
* @param e input object to compute mask for
* @return functional mask or null if not applicable
*/","* A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #ceiling} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHigher,com.google.common.collect.ForwardingNavigableSet:standardHigher(java.lang.Object),113,115,"/**
* Applies functional mask to input element.
* @param e input element to process
* @return transformed element or null if not applicable","* A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #higher} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean)",195,201,"/**
* Creates a range of elements in the set based on the given bounds.
* @param fromElement starting element (inclusive or exclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive or exclusive)
* @param toInclusive whether end is inclusive
*/","* A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the
   * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link
   * #subSet(Object, boolean, Object, boolean)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardTailSet,com.google.common.collect.ForwardingNavigableSet:standardTailSet(java.lang.Object),239,241,"/**
* Returns a sorted set of elements starting from the given element.
*/","* A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object,
   * boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override
   * {@link #tailSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.Maps$6:tailSet(java.lang.Object,boolean)",229,232,"/**
* Calls m1() and delegates to its m2() method with specified parameters.
* @param fromElement the element to start searching from
* @param inclusive whether to include the 'from' element in the result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,comparator,com.google.common.collect.ForwardingSortedSet:comparator(),70,73,"/**
* Returns a comparator based on the result of m1(), which is assumed to be a comparable object. 
* The returned comparator compares objects using the comparison logic provided by m1()'s result.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,first,com.google.common.collect.ForwardingSortedSet:first(),75,79,"/**
* Calls m1(), then delegates execution to its result's m2() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.ForwardingSortedSet:headSet(java.lang.Object),81,84,"/**
* Calls m1() and delegates m2 operation to its result.
* @param toElement element to be added to the set
* @return a sorted set of elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,last,com.google.common.collect.ForwardingSortedSet:last(),86,90,"/**
* Calls m1() to obtain an instance and then invokes its m2() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.ForwardingSortedSet:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
* Calls m1() and delegates range retrieval of elements.
* @param fromElement starting element for the range
* @param toElement ending element for the range
* @return SortedSet of elements within the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.ForwardingSortedSet:tailSet(java.lang.Object),97,100,"/**
* Calls m1() and delegates to its m2() method with the given element.
* @param fromElement starting element for the sorted set
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingIterator,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingIterator(),128,131,"/**
* Returns an iterator of E objects based on masked values.
* @return Iterator of E objects or null if empty
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Row:remove(java.lang.Object),367,376,"/**
* Retrieves a value associated with the given key from the backing map.
* @param key optional object identifier
* @return value of type V or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Row:clear(),378,385,"/**
* Calls m1(), recursively calls backingRowMap's m2() if available, and finally calls m3(). 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,headMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:headMap(java.lang.Object),122,127,"/**
* Computes aggregated data for the given key.
* @param toKey target key
* @return sorted map of aggregated results
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,subMap,"com.google.common.collect.StandardRowSortedTable$RowSortedMap:subMap(java.lang.Object,java.lang.Object)",129,135,"/**
* Computes and returns a sorted map of aggregates between two keys.
* @param fromKey starting key
* @param toKey ending key
* @return SortedMap of aggregate results or null if invalid
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,tailMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:tailMap(java.lang.Object),137,142,"/**
* Retrieves a sorted map of user profiles by ID range.
* @param fromKey starting user identifier
* @return SortedMap of UserProfile objects or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.StandardRowSortedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of unique values based on m1().m2().
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.TreeBasedTable:rowMap(),85,88,"/**
* Calls superclass implementation of method m1 and returns result as SortedMap.","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.HashBasedTable:rowKeySet(),665,668,"/**
* Returns a set of valid function masks.
* @return Set of R objects representing function masks
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,"com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet,java.lang.Object)",1576,1580,"/**
* Creates a synchronized navigable set from the given set and mutex.
* @param navigableSet original navigable set
* @param mutex synchronization lock (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingSet,"com.google.common.collect.Synchronized:typePreservingSet(java.util.Set,java.lang.Object)",947,954,"/**
* Returns a set with elements masked by the given mutex.
* @param set input set
* @param mutex object to mask with (may be null)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedAsMapValues:iterator(),1447,1456,"/**
* Wraps super's iterator with a transformed iterator, applying mask function to each collection.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedList:add(int,java.lang.Object)",380,385,"/**
* Calls nested object's m2() method with synchronization. 
* @param index position in the collection
* @param element item to be added or updated 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,"com.google.common.collect.Synchronized$SynchronizedList:addAll(int,java.util.Collection)",387,392,"/**
* Recursively calls `m2` on the result of `m1`, synchronizing access to shared state. 
* @param index index for recursive call
* @param c collection for recursive call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedList:get(int),394,399,"/**
* Calls m2 on the result of m1 and returns the result.
* @param index the input to pass to m2
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,indexOf,com.google.common.collect.Synchronized$SynchronizedList:indexOf(java.lang.Object),401,406,"/**
* Calls m1() and delegates its result to m2(), passing user-provided object.
* @param o user-provided object
* @return result of m2() in m1()'s context
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastIndexOf,com.google.common.collect.Synchronized$SynchronizedList:lastIndexOf(java.lang.Object),408,413,"/**
* Calls m1() and delegates to its m2() method with input object.
* @param o input object to pass to m1()'s m2()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(),415,418,"/**
* Calls m1(), then delegates to its returned iterator's m2() method.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(int),420,423,"/**
* Delegates list iteration to wrapped iterator.
* @param index position in the underlying collection
* @return ListIterator instance wrapping the result
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedList:remove(int),425,430,"/**
* Calls m2() on the result of m1(), synchronizing access to mutex.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized$SynchronizedList:set(int,java.lang.Object)",432,437,"/**
* Calls m1() to delegate recursive operation.
* @param index index into result array
* @param element new element to add at specified index
* @return result object of type E or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedList:replaceAll(java.util.function.UnaryOperator),439,444,"/**
* Invokes m2 on the result of m1, synchronizing access to shared resources. 
* @param operator UnaryOperator instance to be applied
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sort,com.google.common.collect.Synchronized$SynchronizedList:sort(java.util.Comparator),446,451,"/**
* Invokes m2 on the internal object, synchronizing access using mutex.
* @param c optional comparator to be used in m2 invocation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subList,"com.google.common.collect.Synchronized$SynchronizedList:subList(int,int)",453,458,"/**
* Synchronized method to fetch elements from index range [fromIndex, toIndex).
* @param fromIndex starting index of the range
* @param toIndex ending index of the range (exclusive)
* @return List of E objects within the specified range
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedList:equals(java.lang.Object),460,468,"/**
* Recursively checks object equality with this instance.
* @param o the object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedList:hashCode(),470,475,"/**
* Recursively calls m1() and returns its result.
* @return result of m1().m2()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,count,com.google.common.collect.Synchronized$SynchronizedMultiset:count(java.lang.Object),511,516,"/**
* Calls m1() and delegates to its m2() method with provided object.
* @param o the object to pass to m1()'s m2()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedMultiset:add(java.lang.Object,int)",518,523,"/**
* Calls m1() and delegates execution of m2 to its result.
* @param e object to pass to m2, can be null
* @param n integer parameter for m2
* @return result of m2 from the m1() instance's perspective
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultiset:remove(java.lang.Object,int)",525,530,"/**
* Invokes m2 on the result of m1 and returns the result.
* @param o object to pass to m2
* @param n integer parameter for m2
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int)",532,537,"/**
* Calls second-level operation on the result of first-level operation.
* @param element parameter for second-level operation
* @param count parameter for second-level operation
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int,int)",539,544,"/**
* Delegates call to m1() with synchronization on mutex.
* @param element object to process
* @param oldCount previous count value
* @param newCount updated count value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,elementSet,com.google.common.collect.Synchronized$SynchronizedMultiset:elementSet(),546,554,"/**
* Computes and caches a set of elements, synchronizing access to shared resources.
* @return Set<E> containing computed elements or cached value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMultiset:entrySet(),556,564,"/**
* Computes and returns a set of multiset entries.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultiset:equals(java.lang.Object),566,574,"/**
* Recursively checks equality with this instance, synchronizing on mutex if necessary.
* @param o object to compare
* @return true if equal, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultiset:hashCode(),576,581,"/**
* Recursively calls m1(), synchronizing on mutex to ensure thread safety.
* @return result of m1()'s recursive call
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedDeque:delegate(),1906,1909,"/**
* Calls superclass's implementation of m1 and returns the result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,element,com.google.common.collect.Synchronized$SynchronizedQueue:element(),1857,1862,"/**
* Recursively fetches value of type E using cached result from m1().
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offer,com.google.common.collect.Synchronized$SynchronizedQueue:offer(java.lang.Object),1864,1869,"/**
* Calls m1() while holding the mutex lock and returns its result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peek,com.google.common.collect.Synchronized$SynchronizedQueue:peek(),1871,1876,"/**
* Calls m1() and retrieves its result, then calls m2() on that result.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,poll,com.google.common.collect.Synchronized$SynchronizedQueue:poll(),1878,1883,"/**
* Recursively fetches object M2 by synchronizing with mutex.
* @return Object M2 or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedQueue:remove(),1885,1890,"/**
* Recursively calls m1() to fetch result, synchronizing on mutex.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedSet:equals(java.lang.Object),282,290,"/**
* Recursively checks equality with this object instance.
* @param o the object to compare, may be null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedSet:hashCode(),292,297,"/**
* Recursively calls m1() and returns its result.
* @return int value from m1()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSet:delegate(),313,316,"/**
* Delegate to superclass to retrieve a sorted set of elements. 
* @return SortedSet containing elements or null if not found 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedBiMap:values(),1363,1371,"/**
* Computes and returns a set of values, synchronizing on the mutex.
* @return Set<V> containing computed values or null
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forcePut,"com.google.common.collect.Synchronized$SynchronizedBiMap:forcePut(java.lang.Object,java.lang.Object)",1373,1378,"/**
* Calls M1 to perform a synchronized operation.
* @param key the key for the operation
* @param value the value for the operation
* @return result of the operation or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedAsMap:get(java.lang.Object),1402,1408,"/**
* Fetches a collection of values associated with the given key.
* @param key nullable object to search for
* @return Collection of values or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableMap:delegate(),1609,1612,"/**
* Calls superclass's implementation of m1(), returning a NavigableMap. 
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedMap:comparator(),1294,1299,"/**
* Returns a comparator instance by delegating to m1(), which is synchronized. 
* @return A comparator instance or null if m1() returns null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:firstKey(),1301,1306,"/**
* Recursively calls m1(), synchronizing on mutex to ensure thread safety.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:lastKey(),1315,1320,"/**
* Recursively calls m1() to compute result and synchronizes access. 
* @return result of computation by m1()",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedListMultimap:get(java.lang.Object),802,807,"/**
* Recursively fetches V objects using K keys.
* @param key unique identifier of type K
* @return list of V objects or empty list if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",816,821,"/**
* Calls secondary method on cached instance.
* @param key unique identifier
* @param values iterable of values to process
* @return list of processed values or null if failed
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSetMultimap:get(java.lang.Object),847,852,"/**
* Recursively fetches and returns a set of values associated with the given key.
* @param key unique identifier for which to retrieve values
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSetMultimap:removeAll(java.lang.Object),854,859,"/**
* Delegates to m1() while synchronizing on mutex.
* @param key object to fetch from m1()'s collection
* @return Set of V elements or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",861,866,"/**
* Delegates to {@link #m1()} and executes its m2 operation in a thread-safe manner.
* @param key the key for the operation
* @param values the iterable of values
* @return a set of results or null if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedSetMultimap:entries(),868,876,"/**
* Initializes and returns cached entry set for the map.
* @return Set of key-value entries or empty set if not initialized
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:delegate(),897,900,"/**
* Returns a sorted multimap instance.
* @return SortedSetMultimap object representing a sorted collection of key-value pairs.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedDeque,com.google.common.collect.Queues:synchronizedDeque(java.util.Deque),490,493,"/**
* Wraps the provided deque in a synchronized container.
* @param deque input deque to synchronize
*/","* Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing deque is accomplished
   * through the returned deque.
   *
   * <p>It is imperative that the user manually synchronize on the returned deque when accessing any
   * of the deque's iterators:
   *
   * {@snippet :
   * Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque());
   * ...
   * deque.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (deque) {  // Must synchronize on deque!
   *   Iterator<E> i = deque.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned deque will be serializable if the specified deque is serializable.
   *
   * @param deque the deque to be wrapped in a synchronized view
   * @return a synchronized view of the specified deque
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingCollection,"com.google.common.collect.Synchronized:typePreservingCollection(java.util.Collection,java.lang.Object)",933,945,"/**
* Dispatches to specific masked collection method based on collection type.
* @param collection input collection
* @param mutex synchronization object
* @return Collection of masked elements
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rangeContains,com.google.common.collect.TreeBasedTable$TreeRow:rangeContains(java.lang.Object),219,223,"/**
* Checks if an object falls within a masked range.
* @param o the object to check
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateLeft,com.google.common.collect.TreeMultiset$AvlNode:rotateLeft(),976,986,"/**
* Rotates the AVL tree to the right, returning the new root node.
* @return AvlNode representing the new tree structure
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateRight,com.google.common.collect.TreeMultiset$AvlNode:rotateRight(),988,998,"/**
* Rotates the AVL tree to the right.
* @return The root of the rotated tree
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateForEntries,com.google.common.collect.TreeMultiset:aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate),166,176,"/**
* Calculates the aggregated total with masked values.
* @param aggr Aggregate object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(java.util.Map,char,char)",65,69,"/**
* Constructs an array-based character escaper with custom replacements.
* @param replacementMap mapping of characters to their escaped equivalents
* @param safeMin minimum ASCII value for safe characters
* @param safeMax maximum ASCII value for safe characters
*/","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,toEscaper,com.google.common.escape.CharEscaperBuilder:toEscaper(),124,126,"/**
* Creates an escaper with a mask of predefined characters.
* @return Escaper object with custom masking behavior
*/","* Convert this builder into a char escaper which is just a decorator around the underlying array
   * of replacement char[]s.
   *
   * @return an escaper that escapes based on the underlying array.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(java.util.Map,int,int,java.lang.String)",72,78,"/**
* Constructs an ArrayBasedUnicodeEscaper instance with a custom replacement map.
* @param replacementMap mapping of characters to replace
* @param safeMin minimum Unicode code point value
* @param safeMax maximum Unicode code point value
* @param unsafeReplacement string to use for unknown/unsafe code points (optional)
*/","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedConnections,com.google.common.graph.StandardNetwork:checkedConnections(java.lang.Object),178,185,"/**
* Retrieves network connections for a given node.
* @param node node identifier
* @return NetworkConnections object or throws exception if not found
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,checkedConnections,com.google.common.graph.StandardValueGraph:checkedConnections(java.lang.Object),159,166,"/**
* Retrieves and returns the graph connections for a given node.
* @param node unique node identifier
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnectingInternal,"com.google.common.graph.StandardValueGraph:hasEdgeConnectingInternal(java.lang.Object,java.lang.Object)",172,175,"/**
* Checks if a graph connection exists between two nodes.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if a connection exists, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefaultInternal,"com.google.common.graph.StandardValueGraph:edgeValueOrDefaultInternal(java.lang.Object,java.lang.Object,java.lang.Object)",177,186,"/**
* Retrieves the masked value from graph connection between node U and V.
* @param nodeU starting node
* @param nodeV target node
* @param defaultValue default value to return if no connection found
* @return masked value or null if not connected, otherwise defaultValue
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$2:newTraversal(),345,345,"/**
* Generates a traversal function mask for the given node type N.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytesInternal,com.google.common.hash.AbstractStreamingHasher:putBytesInternal(java.nio.ByteBuffer),110,134,"/**
* Updates internal state with data from the provided ByteBuffer.
* @param readBuffer source ByteBuffer to copy from
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putByte,com.google.common.hash.AbstractStreamingHasher:putByte(byte),146,152,"/**
* Updates hasher with given byte and computes intermediate hash value.
* @param b single byte to process
* @return this Hasher instance for chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putShort,com.google.common.hash.AbstractStreamingHasher:putShort(short),154,160,"/**
* Initializes hasher with short value and executes subsequent operations.
* @param s short value to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putChar,com.google.common.hash.AbstractStreamingHasher:putChar(char),162,168,"/**
* Initializes hasher with character and performs subsequent operations.
* @param c input character to hash
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putInt,com.google.common.hash.AbstractStreamingHasher:putInt(int),170,176,"/**
* Initializes hasher with an integer value.
* @param i input integer to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putLong,com.google.common.hash.AbstractStreamingHasher:putLong(long),178,184,"/**
* Initializes hasher with provided value and performs additional processing.
* @param l long value to be hashed
* @return this instance for method chaining
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,fingerprint,"com.google.common.hash.FarmHashFingerprint64:fingerprint(byte[],int,int)",67,80,"/**
* Computes a function mask from the given byte array and offset.
* @param bytes input byte array
* @param offset starting index in bytes
* @return 64-bit long value representing the computed mask
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fingerprint,"com.google.common.hash.Fingerprint2011:fingerprint(byte[],int,int)",58,74,"/**
* Computes a function value from the input bytes using various algorithms.
* @param bytes input byte array
* @param offset starting index in bytes
* @param length number of bytes to process
* @return computed function value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytes,com.google.common.hash.HashCode:fromBytes(byte[]),237,240,"/**
* Generates a hash code mask from the given byte array.
* @param bytes input byte array
*/","* Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the
   * immutability contract of {@code HashCode}. The array cannot be empty.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromString,com.google.common.hash.HashCode:fromString(java.lang.String),335,350,"/**
* Computes a hash code for the input string, ensuring it has at least 2 characters and an even length.
* @param string input string to be hashed
*/","* Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must
   * be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters.
   *
   * <p>This method accepts the exact format generated by {@link #toString}. If you require more
   * lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode}
   * (and pass the result to {@link #fromBytes}).
   *
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineOrdered,com.google.common.hash.Hashing:combineOrdered(java.lang.Iterable),698,712,"/**
* Combines multiple hash codes into a single hash code.
* @param hashCodes iterable of hash codes to combine
*/","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an ordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in the <i>same</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineUnordered,com.google.common.hash.Hashing:combineUnordered(java.lang.Iterable),723,736,"/**
* Combines multiple hash codes into a single hash code.
* @param hashCodes iterable collection of hash codes to combine
*/","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an unordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in <i>some</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,hash,com.google.common.hash.MacHashFunction$MacHasher:hash(),134,139,"/**
* Calculates and returns a hash code based on MAC value.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,hash,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:hash(),161,168,"/**
* Computes hash code based on digest values.
* @return calculated hash code
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,makeHash,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:makeHash(),169,189,"/**
* Computes hash code for a chunk of data using FNV-1a algorithm.
* @return 64-bit hash value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,makeHash,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:makeHash(),114,122,"/**
* Calculates and returns a hash code using CRC-32 algorithm.
* @return 32-bit unsigned integer hash code value.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,fmix,"com.google.common.hash.Murmur3_32HashFunction:fmix(int,int)",259,267,"/**
* Computes a hash code using the FNV-1a algorithm.
* @param h1 initial hash value
* @param length input data length
* @return final hash code as an integer
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,hash,com.google.common.hash.ChecksumHashFunction$ChecksumHasher:hash(),91,104,"/**
* Computes hash code for a given data set based on its bit size.
* @return HashCode object representing the computed hash
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,makeHash,com.google.common.hash.SipHashFunction$SipHasher:makeHash(),145,155,"/**
* Computes hash code using bitwise operations and multiple rounds.
* @return unique hash code value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(byte[]),318,320,"/**
* Computes and returns an MD5-based hash function using the provided key.
* @param key byte array representing the secret key
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array
   * and the MD5 algorithm.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(byte[]),342,344,"/**
* Creates an HmacSHA1 hash function instance from input key.
* @param key byte array to derive secret key for HMAC computation
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-1 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(byte[]),366,368,"/**
* Initializes HmacSHA256 hash function with given key.
* @param key raw byte array to be hashed
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-256 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(byte[]),390,392,"/**
* Computes M2 hash function using HMAC-SHA-512 with key from M1.
* @param key input byte array
*/","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-512 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$EmptyByteSource:<init>(),652,654,"/**
* Initializes an empty byte source with a zero-length array.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,wrap,com.google.common.io.ByteSource:wrap(byte[]),427,429,"/**
 * Returns a byte source wrapping the input array.
 * @param b input byte array
 */","* Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range
   * in the array, use {@code ByteSource.wrap(b).slice(offset, length)}.
   *
   * <p>Note that the given byte array may be passed directly to methods on, for example, {@code
   * OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code
   * ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the
   * contents of the array, but provides better performance in the normal case.
   *
   * @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base16Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",992,995,"/**
* Creates Base16 encoding instance with specified alphabet.
* @param alphabet Alphabet to use for encoding
* @param paddingChar Optional padding character (null if not used)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base64Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1049,1052,"/**
* Creates a Base64 encoding instance with specified alphabet and padding character.
* @param alphabet used alphabet (e.g. ASCII or UTF-8)
* @param paddingChar optional padding character
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,omitPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:omitPadding(),851,854,"/**
* Returns the base encoding mask.
* @return BaseEncoding object or this instance if padding is enabled
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withPadChar,com.google.common.io.BaseEncoding$StandardBaseEncoding:withPadChar(char),856,864,"/**
* Determines the BaseEncoding instance for a given character padding.
* @param padChar character to be padded
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$EmptyCharSource:<init>(),677,679,"/**
* Initializes an empty character source with an empty string.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,wrap,com.google.common.io.CharSource:wrap(java.lang.CharSequence),492,496,"/**
* Converts input CharSequence to appropriate CharSource implementation.
* @param charSequence input character sequence
* @return CharSource object wrapping the input sequence
*/","* Returns a view of the given character sequence as a {@link CharSource}. The behavior of the
   * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if
   * the {@code charSequence} is mutated while it is being read, so don't do that.
   *
   * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$AsByteSource:openStream(),524,527,"/**
* Wraps character source into an input stream with specified buffer size.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.lang.Iterable),109,111,"/**
* Writes iterable of characters to file with newline separator.
* @param lines iterable of character sequences
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.util.stream.Stream),132,134,"/**
* Writes input stream of characters to output with line separator.
* @param lines Stream of character sequences
*/","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(byte[]),207,210,"/**
 * Calls the overloaded version of m1 with a range spanning the entire input array.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,"com.google.common.io.ReaderInputStream:read(byte[],int,int)",129,191,"/**
* Reads and encodes input data from byte array.
* @param b input byte array
* @param off starting offset in bytes
* @param len length of data to read
* @return number of bytes read or -1 if error
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$ConcatenatedByteSource:openStream(),681,684,"/**
* Creates a multi-input stream from the specified sources.
* @return A single input stream combining multiple sources.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,skip,com.google.common.io.MultiInputStream:skip(long),107,120,"/**
* Recursively calculates a value using {@link #in} and the given non-negative integer.
* @param n input parameter
* @return calculated result or 0 if unsuccessful
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$ConcatenatedCharSource:openStream(),695,698,"/**
* Returns a reader from the first source in sources.m1().
* @throws IOException if an I/O error occurs
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$Partition:get(int),718,724,"/**
* Retrieves a subset of data from the list based on the given index.
* @param index starting position for the subset
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)",438,463,"/**
* Creates a Bloom filter with specified parameters.
* @param funnel data transformation function
* @param expectedInsertions estimated number of elements to insert
* @param fpp desired false positive probability
* @param strategy hash strategy
* @return BloomFilter instance or throws exception if creation fails
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readFrom,"com.google.common.hash.BloomFilter:readFrom(java.io.InputStream,com.google.common.hash.Funnel)",618,661,"/**
* Deserializes a Bloom filter from an input stream.
* @param in InputStream containing Bloom filter data
* @param funnel Funnel used to serialize/deserialize data
*/","* Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code
   * BloomFilter}.
   *
   * <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here.
   * <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate
   * the original Bloom filter!
   *
   * @throws IOException if the InputStream throws an {@code IOException}, or if its data does not
   *     appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.lang.Iterable),488,493,"/**
* Recursively computes M2 value from an iterable of numbers.
* @param values input collection of numerical values
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,log2,"com.google.common.math.DoubleMath:log2(double,java.math.RoundingMode)",239,279,"/**
* Rounds a positive finite number to the specified mode.
* @param x the input value
* @param mode rounding mode
* @return rounded exponent value
*/","* Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an
   * {@code int}.
   *
   * <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}.
   *
   * @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is
   *     infinite",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundIntermediate,"com.google.common.math.DoubleMath:roundIntermediate(double,java.math.RoundingMode)",53,111,"/**
* Applies rounding function to input value based on specified mode.
* @param x input value
* @param mode RoundingMode to apply (e.g. UNNECESSARY, FLOOR, CEILING)
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureTableCapacity,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:ensureTableCapacity(int),846,859,"/**
* Dynamically adjusts hash table size based on minimum capacity.
* @param minCapacity minimum required capacity
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashFloodingDetected,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:hashFloodingDetected(java.lang.Object[]),889,925,"/**
* Checks if the provided hash table contains a run of null values.
* @param hashTable input array to check
* @return true if a run is found, false otherwise
*/","* Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n /
     * log n) on average.
     *
     * <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many
     * exactly matching hash codes, which would cause construction to take O(n^2), but can't detect
     * e.g. hash codes adversarially designed to go into ascending table locations, which keeps
     * construction O(n) (as desired) but then can have O(n) queries later.
     *
     * <p>If this returns false, then no query can take more than O(log n).
     *
     * <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains
     * operations take expected O(1) time but with high probability take O(log n) for at least some
     * element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)
     *
     * <p>This method may return {@code true} even on truly random input, but {@code
     * ImmutableSetTest} tests that the probability of that is low.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offer,com.google.common.collect.TopKSelector:offer(java.lang.Object),138,159,"/**
* Adds an element to the buffer, updating threshold as needed.
* @param elem element to add
*/","* Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized
   * O(1) time.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[])",445,447,"/**
* Constructs an Alphabet instance with the given name and character set.
* @param name name of the alphabet
* @param chars character array representing the alphabet's characters
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$Alphabet:ignoreCase(),494,517,"/**
* Creates a case-insensitive alphabet by modifying the decoding table.
* @return A new Alphabet instance with modified decoding behavior
*/",Returns an equivalent {@code Alphabet} except it ignores case.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,growIfNeeded,com.google.common.collect.MinMaxPriorityQueue:growIfNeeded(),958,965,"/**
* Dynamically resizes the queue array to accommodate growing elements.
* @param size current element count
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,"com.google.common.collect.TopKSelector:least(int,java.util.Comparator)",79,82,"/**
* Creates a TopKSelector instance with the specified comparator and top-k value.
* @param k top-k value
* @param comparator comparison function for elements of type T
*/","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,"com.google.common.collect.TopKSelector:greatest(int,java.util.Comparator)",101,104,"/**
* Creates a TopKSelector instance with the specified comparator and k value.
* @param k number of top elements to select
* @param comparator comparison function for selecting top elements
*/","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:inverse(),262,266,"/**
* Returns the initial linear transformation mask.
* @return The initial linear transformation or a newly created one if null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,and,"com.google.common.math.LinearTransformation$LinearTransformationBuilder:and(double,double)",82,90,"/**
* Calculates Linear Transformation based on two points.
* @param x2 x-coordinate of second point
* @param y2 y-coordinate of second point
* @return instance of LinearTransformation or VerticalLinearTransformation if parallel to x-axis
*/","* Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values
     * must not both be identical to the values given in the first mapping. If only the {@code x}
     * values are identical, the transformation is vertical. If only the {@code y} values are
     * identical, the transformation is horizontal (i.e. the slope is zero).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,leastSquaresFit,com.google.common.math.PairedStats:leastSquaresFit(),181,198,"/**
* Calculates linear transformation mask based on input statistics.
* @return LinearTransformation object representing the calculated mask
*/","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset must have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,leastSquaresFit,com.google.common.math.PairedStatsAccumulator:leastSquaresFit(),214,231,"/**
* Computes the linear transformation mask based on statistical data.
* @return LinearTransformation object or default value if not applicable
*/","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:inverse(),206,210,"/**
* Returns a linear transformation based on the current state.
* @return LinearTransformation object or null if not applicable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,isPrime,com.google.common.math.LongMath:isPrime(long),984,1036,"/**
* Checks primality of a number using the Miller-Rabin algorithm.
* @param n the number to test
* @return true if prime, false otherwise
*/","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log10,"com.google.common.math.BigIntegerMath:log10(java.math.BigInteger,java.math.RoundingMode)",141,206,"/**
* Computes integer power of a BigInteger using a specified rounding mode.
* @param x the base BigInteger
* @param mode the RoundingMode to use
* @return the result as an int or throws an assertion error if invalid
*/","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,binomial,"com.google.common.math.LongMath:binomial(int,int)",791,849,"/**
* Computes the binomial coefficient (n choose k) using various optimizations.
* @param n total number of items
* @param k number of chosen items
* @return binomial coefficient or Long.MAX_VALUE if out of range
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toString,com.google.common.math.PairedStats:toString(),240,254,"/**
* Constructs stats string with optional population covariance.
* @return Stats string or null if m1() <= 0
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.lang.Iterable),474,476,"/**
* Recursively calculates mean squared value of iterable numbers.
* @param values iterable collection of numeric values
*/","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,add,"com.google.common.math.PairedStatsAccumulator:add(double,double)",46,67,"/**
* Updates statistics with a point, and possibly sums product of deltas if conditions are met.
* @param x input value 1
* @param y input value 2
*/",Adds the given pair of values to the dataset.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.lang.Iterable),84,88,"/**
* Applies mask operation to each number in the iterable.
* @param values collection of numbers to process
*/","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.Iterator),96,100,"/**
* Applies mask operation to each numeric value in the iterator.
* @param values Iterator of numbers to process
*/","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.Stats),171,176,"/**
* Masks stats based on first value, skipping if zero.
* @param values Stats object with various metrics
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.StatsAccumulator),184,189,"/**
* Calculates the masked value based on StatsAccumulator values.
* @param values StatsAccumulator containing M1-M5 values
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.
   *
   * @since 28.2",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectInPlace,"com.google.common.math.Quantiles:selectInPlace(int,double[],int,int)",537,565,"/**
* Partitions the array around the target value 'required' using QuickSelect algorithm.
* @param required target value
* @param array input array of doubles
* @param from start index
* @param to end index
*/","* Performs an in-place selection to find the element which would appear at a given index in a
   * dataset if it were sorted. The following preconditions should hold:
   *
   * <ul>
   *   <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array};
   *   <li>{@code required} should be in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range [0, {@code from}) should be less than or equal
   *       to all the values with indexes in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be
   *       greater than or equal to all the values with indexes in the range [{@code from}, {@code
   *       to}].
   * </ul>
   *
   * This method will reorder the values with indexes in the range [{@code from}, {@code to}] such
   * that all the values with indexes in the range [{@code from}, {@code required}) are less than or
   * equal to the value with index {@code required}, and all the values with indexes in the range
   * ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at
   * {@code required} is the value which would appear at that index in the sorted dataset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.stream.DoubleStream),279,288,"/**
* Processes a double stream, populating the builder with data.
* @param stream DoubleStream to process
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.lang.Iterable),249,258,"/**
* Adds a collection of double values to the builder.
* @param values iterable of doubles
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,writeReplace,com.google.common.primitives.ImmutableDoubleArray:writeReplace(),639,641,"/**
* Returns the function mask value. 
* @return The result of calling m1()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray$AsList:contains(java.lang.Object),504,507,"/**
* Checks if target object has valid mask value.
* @param target object to check (may be null)
* @return true if valid, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.stream.IntStream),276,285,"/**
* Processes IntStream into a mask using the provided consumer.
* @param stream input stream of integers
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.lang.Iterable),246,255,"/**
* Processes a collection of integers, delegating to Collection-based variant.
* @param values iterable list of integer values
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,writeReplace,com.google.common.primitives.ImmutableIntArray:writeReplace(),629,631,"/**
* Returns the function mask value using the m1 method.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.stream.LongStream),278,287,"/**
* Processes a LongStream into the builder.
* @param stream input data stream
*/","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,readObject,com.google.common.util.concurrent.AtomicDoubleArray:readObject(java.io.ObjectInputStream),317,326,"/**
* Deserializes and initializes a long array from the given stream.
* @param s ObjectInputStream to read from
*/","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.lang.Iterable),248,257,"/**
* Processes a collection of user IDs.
* @param values Iterable of unique user identifiers
*/","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,writeReplace,com.google.common.primitives.ImmutableLongArray:writeReplace(),631,633,"/**
* Returns a mask object.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,com.google.common.primitives.Ints:tryParse(java.lang.String),816,818,"/**
* Returns an integer value using m1 with default capacity.
* @param string input string
*/","* Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String),105,107,"/**
* Returns an unsigned integer value from a string representation.
* @param string string to parse (assumed base-10)
*/","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,dividedBy,com.google.common.primitives.UnsignedLong:dividedBy(com.google.common.primitives.UnsignedLong),160,162,"/**
* Computes a mask value from an unsigned long value.
* @param val input unsigned long value
*/","* Returns the result of dividing this by {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,"com.google.common.primitives.UnsignedLongs:toString(long,int)",459,502,"/**
* Converts a long integer to a string representation in the specified radix.
* @param x long value to convert
* @param radix base of the output number system (2-36)
*/","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mulMod,"com.google.common.math.LongMath$MillerRabinTester$2:mulMod(long,long,long)",1166,1166,"/**
* Computes function value of (a * b) mod m.
* @param a first operand
* @param b second operand
* @param m modulus value
*/",Returns a * b mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,squareMod,"com.google.common.math.LongMath$MillerRabinTester$2:squareMod(long,long)",1169,1169,"/**
* Computes a mask value using modular arithmetic.
* @param a input value
* @param m modulus
* @return masked result",Returns a^2 mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,mod,com.google.common.primitives.UnsignedLong:mod(com.google.common.primitives.UnsignedLong),169,171,"/**
* Calculates mask value based on input.
* @param val input value
* @return UnsignedLong result of calculation
*/","* Returns this modulo {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.lang.String),107,110,"/**
* Returns an unsigned long value from the given string representation.
* @param string input string to parse
*/","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardEquals,com.google.common.collect.ForwardingMapEntry:standardEquals(java.lang.Object),96,103,"/**
* Compares the given object to this instance using MASK-based equality.
* @param object object to compare with this instance
*/","* A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardHashCode,com.google.common.collect.ForwardingMapEntry:standardHashCode(),112,116,"/**
* Computes a mask by XORing hash values from two functions.
* @return the computed mask value
*/","* A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #hashCode()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardToString,com.google.common.collect.ForwardingMapEntry:standardToString(),125,127,"/**
* Combines results of m1 and m2 functions with an assignment operator.","* A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}.
   * If you override either of these methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:setValue(java.lang.Object),72,77,"/**
* Calls m1() and delegates to its m2(V) method with provided value.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.MutableClassToInstanceMap$1:setValue(java.lang.Object),72,77,"/**
* Calls m1() and delegates to its m2(V) method with provided value.
* @param value input value for m2(V) method in m1()
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.StandardTable$Row$2:setValue(java.lang.Object),72,77,"/**
* Calls m1() and delegates to its m2(V) method with provided value.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,equals,com.google.common.reflect.Invokable:equals(java.lang.Object),210,217,"/**
* Evaluates object's invocability and delegates to sub-elements.
* @param obj the object to evaluate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isArray,com.google.common.reflect.TypeToken:isArray(),526,528,"/**
* Checks if mask data is available.
* @return true if data exists, false otherwise
*/","* Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySupertype,com.google.common.reflect.TypeToken:getArraySupertype(java.lang.Class),1226,1249,"/**
* Computes a functional interface type token for the given supertype.
* @param supertype Class of the supertype to compute for
* @return TypeToken representing the functional interface type
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(),92,97,"/**
* Calls superclass's implementation of M1.
* @throws InterruptedException if interrupted while executing
* @throws ExecutionException if execution fails
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ExecutorService),461,468,"/**
* Creates a listening executor service from the given delegate, 
* wrapping it as necessary to provide listening capabilities. 
* @param delegate underlying executor service instance
*/","* Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit
   * {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well
   * as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code
   * invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented
   * in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is
   * returned untouched, and the rest of this documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ScheduledExecutorService),486,492,"/**
* Wraps a ScheduledExecutorService instance with a ListeningScheduledExecutorService interface, if available; otherwise, decorates it.
* @param delegate the underlying ScheduledExecutorService instance
*/","* Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods
   * submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as
   * well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code
   * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks
   * must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningScheduledExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code
   * ListeningScheduledExecutorService}, it is returned untouched, and the rest of this
   * documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit)",675,759,"/**
* Executes a collection of tasks with optional timeout and returns the first non-null result.
* @param executorService service to execute tasks
* @param tasks collection of tasks to execute
* @param timed whether to use a timeout
* @param timeout duration of the timeout
* @param unit time unit for the timeout
* @return first non-null task result or throws an exception if all fail or timeout","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture$ListFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",87,92,"/**
* Creates and initializes a list of future results with specified characteristics.
* @param futures Collection of listenable futures to be processed
* @param allMustSucceed Whether all futures must succeed for the operation to complete successfully
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,callAsync,"com.google.common.util.concurrent.Futures$FutureCombiner:callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",719,722,"/**
* Combines futures using a custom combiner and returns the result.
* @param combiner asynchronous callable to combine futures
* @param executor thread pool executor
* @return ListenableFuture representing combined future result
*/","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,call,"com.google.common.util.concurrent.Futures$FutureCombiner:call(java.util.concurrent.Callable,java.util.concurrent.Executor)",744,747,"/**
* Combines futures into a single future using the provided callable.
* @param combiner function to combine individual results
* @param executor thread pool for execution
* @return ListenableFuture containing combined result or null if failed
*/","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * Callable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,processCompleted,com.google.common.util.concurrent.AggregateFuture:processCompleted(com.google.common.collect.ImmutableCollection),302,324,"/**
* Processes futures collection at completion.
* @param futuresIfNeedToCollectAtCompletion optional collection of futures to process
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLock,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",623,675,"/**
* Handles lock acquisition based on acquired locks and policy rules.
* @param policy concurrency policy
* @param acquiredLock current lock graph node
*/","* Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the
     * specified {@code acquiredLock}.
     *
     * <p>When this method returns, the {@code acquiredLock} should be in either the {@code
     * preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the
     * {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not
     * safe.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader$1:reload(java.lang.Object,java.lang.Object)",96,101,"/**
* Performs asynchronous operation using key and old value.
* @param key functional key
* @param oldValue previous value
* @return ListenableFuture representing the result or an exception
*/","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),631,633,"/**
* Constructs a ClosingFuture with an empty closeable list.
* @param future ListenableFuture to be wrapped
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,offer,com.google.common.collect.ForwardingQueue:offer(java.lang.Object),57,61,"/**
* Calls m1() and delegates result to its m2(E) method.
* @param o object to pass to m2 in the called chain
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,poll,com.google.common.collect.ForwardingQueue:poll(),63,67,"/**
* Calls m2() on result of m1(), returning result or null if m1() returns null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,remove,com.google.common.collect.ForwardingQueue:remove(),69,74,"/**
* Calls m1() and delegates to its m2() result.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,peek,com.google.common.collect.ForwardingQueue:peek(),76,79,"/**
* Calls m1() and delegates to its m2() method.
* @return result of m1().m2(), or null if m1() returns null.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,element,com.google.common.collect.ForwardingQueue:element(),81,85,"/**
 * Calls method m2() on result of m1(), returning its value.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,cancel,com.google.common.util.concurrent.ForwardingFuture:cancel(boolean),46,50,"/**
* Calls m2 on UserProfile instance fetched from m1.
* @param mayInterruptIfRunning flag to interrupt running tasks
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isCancelled,com.google.common.util.concurrent.ForwardingFuture:isCancelled(),52,55,"/**
* Calls m1() and returns the result of calling m2() on its returned value.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isDone,com.google.common.util.concurrent.ForwardingFuture:isDone(),57,60,"/**
* Calls and returns result of m2() from UserProfile object returned by m1().
* @return true if m2() succeeds in UserProfile object, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,com.google.common.util.concurrent.ForwardingFuture:get(),62,67,"/**
* Calls m1() and delegates the result to its m2() method.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,"com.google.common.util.concurrent.ForwardingFuture:get(long,java.util.concurrent.TimeUnit)",69,75,"/**
* Calls m2 on the result of m1 with the specified timeout and time unit.
* @param timeout maximum wait duration in specified time unit
* @param unit time unit for timeout value
* @return V object or throws exception if timeout is reached
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,statusFuture,com.google.common.util.concurrent.ClosingFuture:statusFuture(),651,653,"/**
* Generates a mask using internal computations.
* @return ListenableFuture representing the result
*/","* Returns a future that finishes when this step does. Calling {@code get()} on the returned
   * future returns {@code null} if the step is successful or throws the same exception that would
   * be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code
   * cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline.
   *
   * <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls
   * to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or
   * a derivation method <i>on the same instance</i>. This is important because calling {@code
   * statusFuture} alone does not provide a way to close the pipeline.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submitAsync,"com.google.common.util.concurrent.ExecutionSequencer:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",175,264,"/**
* Wraps an AsyncCallable in a TrustedListenableFutureTask and executes it with the given Executor.
* @param callable the asynchronous operation to be executed
* @param executor the executor to run the operation on
* @return a ListenableFuture representing the result of the execution
*/","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to the future returned from {@code
   * callable} or a callable that has begun to execute, but if the output future is cancelled before
   * {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)",52,67,"/**
* Validates future result with checked type validator and throws exception on failure.
* @param validator GetCheckedTypeValidator instance
* @param future Future<V> object to be validated
* @param exceptionClass Class of exception to be thrown
* @throws X exception if validation fails
*/","Implementation of {@link Futures#getChecked(Future, Class)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",70,87,"/**
* Retrieves a value from a future with custom exception handling and timeout.
* @param future Future object to retrieve value from
* @param exceptionClass Class of exception to be thrown on failure
* @param timeout Timeout duration in specified unit
* @param unit TimeUnit for timeout duration
* @return Retrieved value or throws an exception if failed
*/","Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,checkExceptionClassValidity,com.google.common.util.concurrent.FuturesGetChecked:checkExceptionClassValidity(java.lang.Class),296,307,"/**
* Validates the exception type for Futures.getChecked.
* @param exceptionClass Exception class to validate
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStartingEvent,com.google.common.util.concurrent.AbstractService:enqueueStartingEvent(),530,532,"/**
* Fires starting event to registered listeners.
* @param STARTING_EVENT predefined event type
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueRunningEvent,com.google.common.util.concurrent.AbstractService:enqueueRunningEvent(),534,536,"/**
* Triggers RUNNING_EVENT on listeners.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStoppingEvent,com.google.common.util.concurrent.AbstractService:enqueueStoppingEvent(com.google.common.util.concurrent.Service$State),538,546,"/**
* Transitions the state to STOPPING based on the current state.
* @param from current state
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueTerminatedEvent,com.google.common.util.concurrent.AbstractService:enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State),548,566,"/**
* Handles state transitions by firing events and asserting invalid states.
* @param from current State value
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueFailedEvent,"com.google.common.util.concurrent.AbstractService:enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",568,582,"/**
* Dispatches event to listeners with failed state and exception details.
* @param from current state
* @param cause associated Throwable
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueStoppedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueStoppedEvent(),728,730,"/**
* Notifies listeners that the function has stopped.",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueHealthyEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueHealthyEvent(),732,734,"/**
* Triggers HEALTHY_EVENT listener notification.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueFailedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueFailedEvent(com.google.common.util.concurrent.Service),736,749,"/**
* Notifies listeners of a failed function mask operation.
* @param service the affected Service object
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,leave,com.google.common.util.concurrent.Monitor:leave(),929,939,"/**
* Acquires and releases a lock, executing m3() if the lock is in a specific state.
*/",Leaves this monitor. May be called only by a thread currently occupying this monitor.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,await,"com.google.common.util.concurrent.Monitor:await(com.google.common.util.concurrent.Monitor$Guard,boolean)",1178,1191,"/**
* Waits on condition guarded by the given lock, notifying if signaled.
* @param guard Guard object with associated lock and condition
* @param signalBeforeWaiting whether to notify before waiting
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitUninterruptibly,"com.google.common.util.concurrent.Monitor:awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)",1193,1206,"/**
* Waits on condition with optional signal before waiting and cleanup.
* @param guard Guard object to wait on
* @param signalBeforeWaiting flag to signal before waiting
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitNanos,"com.google.common.util.concurrent.Monitor:awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean)",1209,1233,"/**
* Waits on a Guard condition until signaled or timeout.
* @param guard the Guard object to wait on
* @param nanos timeout in nanoseconds
* @param signalBeforeWaiting whether to signal before waiting
* @return true if timed out, false otherwise
*/",Caller should check before calling that guard is not satisfied.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",403,415,"/**
* Returns a future with timeout, delegating to the provided future if it's already completed.
* @param delegate original future to be timed out
* @param time timeout duration in specified time unit
* @param unit time unit for timeout duration (e.g., SECONDS)
* @param scheduledExecutor executor service for scheduling timeout operation
* @return ListenableFuture with timeout applied or the original future if it's already completed","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",229,235,"/**
* Wraps an asynchronous callable with a specified delay and executor service.
* @param callable async operation to perform
* @param delay delay before executing the operation
* @param executorService scheduled thread pool for execution
* @return ListenableFuture representing the result of the operation
*/","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getIfPresent,"com.google.common.base.Enums:getIfPresent(java.lang.Class,java.lang.String)",67,71,"/**
* Retrieves an enum constant by its name.
* @param enumClass target enum class
* @param value name of the enum constant to find
* @return Optional enum constant or empty if not found
*/","* Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the
   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing
   * user input or falling back to a default enum constant. For example, {@code
   * Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,tryFind,"com.google.common.collect.Iterables:tryFind(java.lang.Iterable,com.google.common.base.Predicate)",699,701,"/**
* Combines an iterable with a predicate using multiple-iterator approach.
* @param iterable input collection to iterate over
* @param predicate filtering condition for elements
* @return Optional containing combined result or empty if none found
*/","* Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the
   * given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterable}, a NullPointerException will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isEmpty,com.google.common.collect.Collections2$FilteredCollection:isEmpty(),169,172,"/**
* Checks if all elements in the unfiltered collection match the predicate.
* @return true if no matches, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,anyMatch,com.google.common.collect.FluentIterable:anyMatch(com.google.common.base.Predicate),441,443,"/**
* Applies predicate to each element and returns true if all match.
* @param predicate function to evaluate elements
*/","* Returns {@code true} if any element in this fluent iterable satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$FilteredEntryNavigableMap:isEmpty(),3285,3288,"/**
* Checks if any entries match the predicate.
* @return true if no matching entries found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedPositive,"com.google.common.base.CharMatcher:precomputedPositive(int,java.util.BitSet,java.lang.String)",447,464,"/**
* Creates a CharMatcher based on the input parameters.
* @param totalCharacters total characters in the mask
* @param table bitset containing character values
* @param description string describing the match pattern
*/",* Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class)",187,196,"/**
* Calls multiple methods with exception handling and type checking.
* @param throwable exception to handle
* @param declaredType1 first class to check
* @param declaredType2 second class to check
* @throws X1 first type of exception or subclass
* @throws X2 second type of exception or subclass
*/","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType1 any checked exception type declared by the calling method
   * @param declaredType2 any other checked exception type declared by the calling method
   * @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link
   *     #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code
   *     null}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,com.google.common.io.Closer:rethrow(java.lang.Throwable),130,136,"/**
* Wraps and re-throws an exception with additional processing.
* @param e original Throwable
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped
   * in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception
   * types your try block can throw when calling an overload of this method so as to avoid losing
   * the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);}
   * to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class)",152,160,"/**
* Throws a custom runtime exception with masked original Throwable.
* @param e original Throwable to be masked
* @param declaredType custom exception type to be thrown
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type.
   * Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to
   * declare all of the checked exception types your try block can throw when calling an overload of
   * this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X when the given throwable is of the declared type X",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,close,com.google.common.io.Closer:close(),195,218,"/**
* Iterates over stack and attempts to close Closeables while handling exceptions.
* @throws IOException if any operation fails
*/","* Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an
   * exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods,
   * any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the
   * <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any
   * additional exceptions that are thrown after that will be suppressed.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newThread,"com.google.common.util.concurrent.MoreExecutors:newThread(java.lang.String,java.lang.Runnable)",838,851,"/**
* Creates and starts a new thread with the given name and Runnable task.
* @param name unique thread identifier
* @param runnable task to be executed by the thread
*/","* Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless
   * changing the name is forbidden by the security manager.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeCollectedEntry,com.google.common.cache.LocalCache$Segment:removeCollectedEntry(com.google.common.cache.ReferenceEntry),3279,3289,"/**
* Updates entry's mask and notifies queues.
* @param entry ReferenceEntry object to update
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2025,2038,"/**
* Creates a filtered multimap by applying the given predicate to keys.
* @param unfiltered original multimap
* @param keyPredicate key filter predicate
* @return filtered multimap or null if input is invalid
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2206,2213,"/**
* Filters a multimap based on the provided predicate.
* @param unfiltered original multimap
* @param entryPredicate filter condition for entries
* @return filtered SetMultimap or null if empty
*/","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotation,com.google.common.reflect.Parameter:getDeclaredAnnotation(java.lang.Class),112,116,"/**
* Retrieves an annotation instance based on the provided type.
* @param annotationType Class of the desired annotation
* @return Annotation instance or null if not found
*/",* @since 18.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,mergeSorted,"com.google.common.collect.Iterators:mergeSorted(java.lang.Iterable,java.util.Comparator)",1302,1308,"/**
*Merges multiple iterators into a single unmodifiable iterator.
*@param iterators iterable collection of iterators to merge
*@param comparator comparison function for sorting merged elements
*@return UnmodifiableIterator merging all input iterators
*/","* Returns an iterator over the merged contents of all given {@code iterators}, traversing every
   * element of the input iterators. Equivalent entries will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterators} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterators}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:size(),622,625,"/**
 * Calls iterative function m2 with result from m1 as input.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$EntrySet:removeAll(java.util.Collection),4240,4248,"/**
* Calls M4 on a transformed collection or uses alternative implementation if unsupported.
* @param c Collection to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap:remove(java.lang.Object),198,222,"/**
* Filters collection based on key-value pairs matching the provided key.
* @param key object to filter by
* @return filtered Collection or null if empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Object[])",293,296,"/**
* Copies elements from an iterable to a target array.
* @param iterable source of elements
* @param array target array
* @return the populated array or null if iterable is empty
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,com.google.common.collect.Iterables:toArray(java.lang.Iterable),304,306,"/**
* Calls M1 method on iterable and returns its result.
* @param iterable input collection to process
*/","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,replaceValues,"com.google.common.collect.LinkedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",621,646,"/**
* Merges user values by ID, combining provided values with existing ones.
* @param key unique identifier for values
* @param values Iterable of new values to merge
* @return List of merged values or null if not found
*/","* {@inheritDoc}
   *
   * <p>If any entries for the specified {@code key} already exist in the multimap, their values are
   * changed in-place without affecting the iteration order.
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAll,com.google.common.collect.LinkedListMultimap:removeAll(java.lang.Object),657,670,"/**
* Retrieves a list of values for the given key, performing secondary operations.
* @param key object to retrieve associated values
* @return list of values or null if not found
*/","* {@inheritDoc}
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,sortedCopy,com.google.common.collect.AllEqualOrdering:sortedCopy(java.lang.Iterable),41,44,"/**
* Maps an iterable to a list using Guava's MappedList.
* @param iterable input iterable to be mapped
* @return a new list containing all elements from the iterable
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationIterator:<init>(java.util.List,java.util.Comparator)",509,512,"/**
* Initializes an ordered permutation iterator from a sorted list.
* @param list sorted list of elements
* @param comparator custom comparator for sorting (if null, uses natural order)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newCopyOnWriteArrayList,com.google.common.collect.Lists:newCopyOnWriteArrayList(java.lang.Iterable),283,294,"/**
* Creates a CopyOnWriteArrayList from the given iterable.
* @param elements input collection or iterable
*/","* Creates a {@code CopyOnWriteArrayList} instance containing the given elements.
   *
   * @param elements the elements that the list should contain, in order
   * @return a new {@code CopyOnWriteArrayList} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newCopyOnWriteArraySet,com.google.common.collect.Sets:newCopyOnWriteArraySet(java.lang.Iterable),479,490,"/**
* Creates a CopyOnWriteArraySet from an iterable collection of elements.
* @param elements Iterable collection of elements to include in the set
*/","* Creates a {@code CopyOnWriteArraySet} instance containing the given elements.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code CopyOnWriteArraySet} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",271,303,"/**
* Performs binary search on a sorted list of objects.
* @param list the list to search
* @param key the target object
* @param comparator the comparator for the search
* @param presentBehavior behavior when the key is found in the list
* @param absentBehavior behavior when the key is not found in the list
* @return result of the specified behavior","* Searches the specified list for the specified object using the binary search algorithm. The
   * list must be sorted into ascending order according to the specified comparator (as by the
   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to
   * making this call. If it is not sorted, the results are undefined.
   *
   * <p>If there are elements in the list which compare as equal to the key, the choice of {@link
   * KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the
   * key, the choice of {@link KeyAbsentBehavior} decides which index is returned.
   *
   * <p>This method runs in log(n) time on random-access lists, which offer near-constant-time
   * access to each list element.
   *
   * @param list the list to be searched.
   * @param key the value to be searched for.
   * @param comparator the comparator by which the list is ordered.
   * @param presentBehavior the specification for what to do if at least one element of the list
   *     compares as equal to the key.
   * @param absentBehavior the specification for what to do if no elements of the list compare as
   *     equal to the key.
   * @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;
   *     otherwise the index determined by the {@code KeyAbsentBehavior}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,bulkGet,com.google.common.util.concurrent.Striped:bulkGet(java.lang.Iterable),141,184,"/**
* Merges and masks iterable keys into stripes.
* @param keys input keys to process
* @return Iterable of L objects, grouped by stripe
*/","* Returns the stripes that correspond to the passed objects, in ascending (as per {@link
   * #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method
   * are guaranteed to not deadlock each other.
   *
   * <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code
   * bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared
   * stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed
   * for a pair of them to match). Please consider carefully the implications of the number of
   * stripes, the intended concurrency level, and the typical number of keys used in a {@code
   * bulkGet(keys)} operation. See <a href=""http://www.mathpages.com/home/kmath199.htm"">Balls in
   * Bins model</a> for mathematical formulas that can be used to estimate the probability of
   * collisions.
   *
   * @param keys arbitrary non-null keys
   * @return the stripes corresponding to the objects (one per each object, derived by delegating to
   *     {@link #get(Object)}; may contain duplicates), in an increasing index order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:get(java.lang.Object),1626,1629,"/**
* Retrieves V2 list based on provided key.
* @param key unique identifier or null if not applicable
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:removeAll(java.lang.Object),1631,1635,"/**
* Retrieves V2 data using provided key.
* @param key unique identifier (may be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesMultimap:get(java.lang.Object),1547,1550,"/**
* Retrieves collection of V2 objects based on given key.
* @param key unique identifier or null if not applicable
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesMultimap:removeAll(java.lang.Object),1588,1592,"/**
* Retrieves a collection of V2 objects using a provided key.
* @param key unique identifier (may be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$SortedAsMapView:subMap(java.lang.Object,java.lang.Object)",1005,1008,"/**
* Fetches a sorted map of key-value pairs between two keys.
* @param fromKey starting key
* @param toKey ending key
* @return SortedMap object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$SortedAsMapView:headMap(java.lang.Object),1010,1013,"/**
* Retrieves a sorted map key-value pair by specified key.
* @param toKey unique key identifier
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$SortedAsMapView:tailMap(java.lang.Object),1015,1018,"/**
* Retrieves a sorted map of key-value pairs starting from the specified key.
* @param fromKey starting key for the map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,equals,com.google.common.graph.AbstractNetwork:equals(java.lang.Object),253,266,"/**
* Compares this network with another for equality.
* @param obj the object to compare with, must be a Network instance
* @return true if both networks are equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hashCode,com.google.common.graph.AbstractNetwork:hashCode(),268,271,"/**
* Calls m1 with the current object and returns result of m2.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,toString,com.google.common.graph.AbstractNetwork:toString(),274,286,"/**
* Returns a string representation of the graph's properties.
* @return formatted string with various graph attributes
*/",Returns a string representation of this network.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,equals,com.google.common.graph.AbstractValueGraph:equals(java.lang.Object),121,134,"/**
* Compares this object to another potentially different instance.
* @param obj the object to compare with
* @return true if objects are equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,hashCode,com.google.common.graph.AbstractValueGraph:hashCode(),136,139,"/**
* Calls m1() on the current instance and returns the result.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,toString,com.google.common.graph.AbstractValueGraph:toString(),142,152,"/**
* Returns a string representing the graph's functional mask.
*/",Returns a string representation of this graph.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,navigableKeySet,com.google.common.collect.AbstractNavigableMap:navigableKeySet(),140,143,"/**
* Returns a navigable set of keys based on the current map's key set.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$DescendingMap:navigableKeySet(),4414,4418,"/**
* Returns a navigable set of keys.
* @return a non-null NavigableSet containing all keys or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$NavigableAsMapView:descendingEntryIterator(),1110,1113,"/**
* Returns an iterator over entries in the masked collection.
* @return Iterator of key-value pairs or null if empty.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2068,2074,"/**
* Creates a new NavigableMap with transformed entries based on the provided Transformer.
* @param fromMap The original map to transform
* @param transformer The entry transformation function
* @return A new NavigableMap with transformed entries or null if input is invalid
*/","* Returns a view of a navigable map whose values are derived from the original navigable map's
   * entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may
   * depend on the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Boolean> options = Maps.newTreeMap();
   * options.put(""verbose"", false);
   * options.put(""sort"", true);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : (""yes"" + key);
   *       }
   *     };
   * NavigableMap<String, String> transformed =
   *     LabsMaps.transformNavigableEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 13.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:headMap(java.lang.Object),2243,2246,"/**
* Applies transformation and fetches sorted map with specified key.
* @param toKey unique key identifier
* @return SortedMap object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesSortedMap:subMap(java.lang.Object,java.lang.Object)",2254,2257,"/**
* Fetches a sorted map of data between two keys.
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:tailMap(java.lang.Object),2259,2262,"/**
* Applies transformation to secondary map result.
* @param fromKey starting key for secondary map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.SortedMap,com.google.common.base.Function)",1862,1868,"/**
* Applies a transformation function to the values of a sorted map.
* @param fromMap input sorted map
* @param function transformation function for values
* @return transformed sorted map with new key-value pairs
*/","* Returns a view of a sorted map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * SortedMap<String, Integer> map = ImmutableSortedMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * SortedMap<String, Double> transformed =
   *      Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,asMap,com.google.common.collect.Multimaps$UnmodifiableMultimap:asMap(),701,711,"/**
* Returns a read-only multimap with key-value pairs from the delegate's m1() result.
* @return Map of K to Collection of V, or null if map is not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$TransformedTable:row(java.lang.Object),471,474,"/**
* Transforms table data by applying a specified function.
* @param rowKey unique table key (null if all rows)
* @return Map of transformed values or null if rowKey is null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$TransformedTable:column(java.lang.Object),476,479,"/**
* Transforms table data using specified function.
* @param columnKey unique identifier for column in table
* @return a map of transformed values or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$TransformedTable:rowMap(),510,513,"/**
* Transforms table data into nested map structure using function.
*@return Nested map of R to C to V2 values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$TransformedTable:columnMap(),515,519,"/**
* Transforms table data into nested map structure.
* @return Nested map with column keys and value maps
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$UnmodifiableTable:columnMap(),574,577,"/**
* Transforms and caches the result of m1().",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableTable:rowMap(),607,610,"/**
* Transforms the result of super.m1() into an unmodifiable map structure.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.HashMultiset:add(java.lang.Object,int)",264,284,"/**
* Updates element occurrence count and returns the previous count.
* @param element element to update
* @param occurrences number of times to add to or remove from the count
* @return previous count of the element
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.LinkedHashMultiset:add(java.lang.Object,int)",264,284,"/**
* Updates the count of a given element in the backing map.
* @param element the element to update
* @param occurrences the number of times to increment the count
* @return the previous count of the element
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.HashMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes specified occurrences of an element from the backing map.
* @param element object to remove
* @param occurrences count of elements to remove
* @return original count of removed elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.LinkedHashMultiset:remove(java.lang.Object,int)",286,311,"/**
* Removes specified occurrences of element from the backing map.
* @param element object to remove
* @param occurrences number of elements to delete
* @return original count of element in the backing map
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,contains,"com.google.common.collect.ImmutableTable:contains(java.lang.Object,java.lang.Object)",383,386,"/**
* Checks if a key exists in the data set.
* @param rowKey unique row identifier or null for all rows
* @param columnKey unique column identifier or null for all columns
* @return true if a matching key is found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.HashBasedTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
* Calls parent's implementation with non-null keys.
* @param rowKey unique row identifier or null
* @param columnKey unique column identifier or null
* @return result from parent method or null if either key was null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Column:get(java.lang.Object),471,474,"/**
* Retrieves value from standard table using provided key.
* @param key nullable object to search by
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsMapping,"com.google.common.collect.StandardTable:containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)",192,195,"/**
* Validates a cell value by checking if it's not null and matches the expected m2 result.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell value to validate
* @return true if valid, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.HashBasedTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
* Calls superclass method with non-null keys.
* @param rowKey unique row identifier (or null)
* @param columnKey unique column identifier (or null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$Column$KeySet:contains(java.lang.Object),621,624,"/**
 * Delegates call to StandardTable's overridden method.
 * @param obj object to process (null if not applicable)
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Column:containsKey(java.lang.Object),476,479,"/**
* Checks if a mask exists based on the provided key.
* @param key unique identifier or null to check all masks
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:contains(java.lang.Object),929,939,"/**
* Checks if an object matches the function mask condition.
* @param obj the object to check
* @return true if the object matches, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function)",1378,1385,"/**
* Applies a function to the values of a multimap and returns a new multimap with transformed values.
* @param fromMultimap source multimap
* @param function transformation function
* @return ListMultimap<K, V2> with transformed values
*/","* Returns a view of a {@code ListMultimap} where each value is transformed by a function. All
   * other properties of the multimap, such as iteration order, are left intact. For example, the
   * code:
   *
   * {@snippet :
   * ListMultimap<String, Integer> multimap =
   *      ImmutableListMultimap.of(""a"", 4, ""a"", 16, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * ListMultimap<String, Double> transformed = Multimaps.transformValues(map,
   *     sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[2.0, 4.0], b=[3.0]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,addAll,com.google.common.collect.AbstractMultiset:addAll(java.util.Collection),105,109,"/**
* Checks if adding elements to a multiset would change its mask.
* @param elementsToAdd collection of elements to add
* @return true if the mask would change, false otherwise
*/","* {@inheritDoc}
   *
   * <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link
   * Multiset}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAddAll,com.google.common.collect.ForwardingMultiset:standardAddAll(java.util.Collection),166,169,"/**
* Checks for functional mask by comparing with added elements.
* @param elementsToAdd collection of elements to add
*/","* A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and
   * {@link #add(Object, int)}. If you override either of these methods, you may wish to override
   * {@link #addAll(Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,asMap,com.google.common.collect.Synchronized$SynchronizedMultimap:asMap(),740,748,"/**
* Returns a synchronized map view of the underlying data structure.
* @return Map with keys K and values V, or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,inverse,com.google.common.collect.Synchronized$SynchronizedBiMap:inverse(),1380,1388,"/**
* Returns the inverse mapping of the map returned by m1().m2().
* @return BiMap object or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:<init>(java.util.NavigableMap,java.lang.Object)",1605,1607,"/**
* Creates a synchronized navigable map from an existing navigable map.
* @param delegate original navigable map
* @param mutex synchronization object (null for no sync)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedMap,"com.google.common.collect.Synchronized:sortedMap(java.util.SortedMap,java.lang.Object)",1277,1280,"/**
* Returns a synchronized version of the input map.
* @param sortedMap input map to synchronize
* @param mutex synchronization object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,row,com.google.common.collect.Synchronized$SynchronizedTable:row(java.lang.Object),2132,2137,"/**
* Retrieves map data using provided row key.
* @param rowKey unique identifier for the map data
* @return Map object containing C and V values, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,column,com.google.common.collect.Synchronized$SynchronizedTable:column(java.lang.Object),2139,2144,"/**
* Executes M2 query using cached results and synchronization.
* @param columnKey key to filter database records
* @return Map of query results or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowMap,com.google.common.collect.Synchronized$SynchronizedTable:rowMap(),2174,2179,"/**
* Recursively fetches and processes data using m1, m2, and m3.
* @return Map of processed data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnMap,com.google.common.collect.Synchronized$SynchronizedTable:columnMap(),2181,2186,"/**
* Computes and returns a nested map by synchronizing and combining results from m1(), m2(), and m3().
* @return A map of maps, where inner keys are result of m2() applied to outer key.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listMultimap,"com.google.common.collect.Synchronized:listMultimap(com.google.common.collect.ListMultimap,java.lang.Object)",782,788,"/**
* Wraps a ListMultimap with synchronization using a mutex.
* @param multimap input multimap
* @param mutex synchronization lock object or null for no sync
* @return synchronized ListMultimap instance or original if already synced
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap,java.lang.Object)",893,895,"/**
* Creates a synchronized multimap wrapper around a SortedSetMultimap.
* @param delegate original multimap instance
* @param mutex synchronization object (may be null for no synchronization)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setMultimap,"com.google.common.collect.Synchronized:setMultimap(com.google.common.collect.SetMultimap,java.lang.Object)",826,832,"/**
* Converts a non-synchronized multimap to synchronized or immutable equivalent.
* @param multimap original multimap
* @param mutex synchronization mutex (may be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedMultimap,com.google.common.collect.Multimaps:synchronizedMultimap(com.google.common.collect.Multimap),639,643,"/**
* Applies synchronization to a given multimap.
* @param multimap input multimap
* @return synchronized multimap instance
*/","* Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to
   * guarantee serial access, it is critical that <b>all</b> access to the backing multimap is
   * accomplished through the returned multimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned multimap when accessing
   * any of its collection views:
   *
   * {@snippet :
   * Multimap<K, V> multimap = Multimaps.synchronizedMultimap(
   *     HashMultimap.<K, V>create());
   * ...
   * Collection<V> values = multimap.get(key);  // Needn't be in synchronized block
   * ...
   * synchronized (multimap) {  // Synchronizing on multimap, not values!
   *   Iterator<V> i = values.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link
   * Multimap#replaceValues} methods return collections that aren't synchronized.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,synchronizedTable,com.google.common.collect.Tables:synchronizedTable(com.google.common.collect.Table),699,703,"/**
* Wraps a table in a synchronized container.
* @param table input table to synchronize
* @return synchronized table instance
*/","* Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing table is accomplished
   * through the returned table.
   *
   * <p>It is imperative that the user manually synchronize on the returned table when accessing any
   * of its collection views:
   *
   * {@snippet :
   * Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create());
   * ...
   * Map<C, V> row = table.row(rowKey);  // Needn't be in synchronized block
   * ...
   * synchronized (table) {  // Synchronizing on table, not row!
   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the table to be wrapped in a synchronized view
   * @return a synchronized view of the specified table
   * @since 22.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escape,com.google.common.escape.UnicodeEscaper:escape(java.lang.String),100,106,"/**
* Extracts and returns the masked substring from input string.
* @param string input string to process
*/","* Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href=""http://en.wikipedia.org/wiki/UTF-16"">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeNode,com.google.common.graph.StandardMutableGraph:removeNode(java.lang.Object),60,63,"/**
* Delegate to value graph for M1 operation.
* @param node input node
* @return true if operation succeeds, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,"com.google.common.graph.StandardMutableGraph:removeEdge(java.lang.Object,java.lang.Object)",65,68,"/**
* Checks if there's an edge between two nodes.
* @param nodeU first node to check
* @param nodeV second node to check
* @return true if edge exists, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,com.google.common.graph.StandardMutableValueGraph:removeEdge(com.google.common.graph.EndpointPair),180,185,"/**
* Recursively fetches value using endpoint pairs.
* @param endpoints pair of endpoints to use for fetching
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.StandardNetwork:incidentNodes(java.lang.Object),135,141,"/**
* Creates an EndpointPair from the given edge.
* @param edge input edge
* @return EndpointPair containing nodes U and V
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toStringBuilder,com.google.common.io.CharStreams:toStringBuilder(java.lang.Readable),174,182,"/**
* Builds a mask string from the given Readable input.
* @param r input source to process
* @return StringBuilder containing generated mask or null on error
*/","* Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance.
   * Does not close the {@code Readable}.
   *
   * @param r the object to read from
   * @return a {@link StringBuilder} containing all the characters
   * @throws IOException if an I/O error occurs",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,visitParameterizedType,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitParameterizedType(java.lang.reflect.ParameterizedType),393,404,"/**
* Validates and processes parameterized type.
* @param parameterizedType Parameterized type to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,catching,"com.google.common.util.concurrent.Futures:catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",298,306,"/**
* Creates a future that catches exceptions of specified type and returns fallback value.
* @param input the original future to catch from
* @param exceptionType class of exceptions to catch
* @param fallback function to apply if an exception is caught
* @param executor thread pool for executing fallback function
* @return ListenableFuture containing result or fallback value","* Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
   * primary input fails with the given {@code exceptionType}, from the result provided by the
   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so
   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code
   * fallback}, an exception is thrown, this exception is used as the result of the output {@code
   * Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * ListenableFuture<Integer> fetchCounterFuture = ...;
   *
   * // Falling back to a zero counter in case an exception happens when
   * // processing the RPC to fetch counters.
   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(
   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * @param input the primary input {@code Future}
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if {@code input} fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if {@code input} fails
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture:cancel(boolean),342,410,"/**
* Cancels the underlying future, propagating cancellation to dependent futures.
* @param mayInterruptIfRunning whether to interrupt running tasks
*/","* {@inheritDoc}
   *
   * <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain
   * #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate
   * {@code Future} that was supplied in the {@code setFuture} call.
   *
   * <p>Rather than override this method to perform additional cancellation work or cleanup,
   * subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link
   * #wasInterrupted} as necessary. This ensures that the work is done even if the future is
   * cancelled without a call to {@code cancel}, such as by calling {@code
   * setFuture(cancelledFuture)}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,set,com.google.common.util.concurrent.AbstractFuture:set(java.lang.Object),487,495,"/**
* Checks if a given value matches the function mask condition.
* @param value input value to check
*/","* Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or
   * set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns,
   * the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was
   * accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code
   * Future} may have previously been set asynchronously, in which case its result may not be known
   * yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param value the value to be used as the result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setException,com.google.common.util.concurrent.AbstractFuture:setException(java.lang.Throwable),512,520,"/**
* Sets failure mask based on Throwable and returns success flag.
* @param throwable the exception to process
*/","* Sets the failed result of this {@code Future} unless this {@code Future} has already been
   * cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this
   * method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b>
   * the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the
   * {@code Future} may have previously been set asynchronously, in which case its result may not be
   * known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param throwable the exception to be used as the failed result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setFuture,com.google.common.util.concurrent.AbstractFuture:setFuture(com.google.common.util.concurrent.ListenableFuture),551,603,"/**
* Completes the listenable future with a value or cancellation event.
* @param future the listenable future to complete
*/","* Sets the result of this {@code Future} to match the supplied input {@code Future} once the
   * supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set
   * (including ""set asynchronously,"" defined below).
   *
   * <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call
   * is accepted, then this future is guaranteed to have been completed with the supplied future by
   * the time this method returns. If the supplied future is not done and the call is accepted, then
   * the future will be <i>set asynchronously</i>. Note that such a result, though not yet known,
   * cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}.
   *
   * <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later
   * cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to
   * {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code
   * Future}.
   *
   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,
   * it will never trigger interruption behavior. In particular, it will not cause this future to
   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not
   * return {@code true}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param future the future to delegate to
   * @return true if the attempt was accepted, indicating that the {@code Future} was not previously
   *     cancelled or set.
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,transform,"com.google.common.util.concurrent.Futures:transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",486,490,"/**
* Transforms input future using the provided function and executes it on the given executor.
* @param input Input future to transform
* @param function Function to apply to input future
* @param executor Executor to run transformation on
* @return Resulting transformed future
*/","* Returns a new {@code Future} whose result is derived from the result of the given {@code
   * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> queryFuture = ...;
   * ListenableFuture<List<Row>> rowsFuture =
   *     transform(queryFuture, QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.
   * @since 9.0 (in 2.0 as {@code compose})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,incrementAndGet,com.google.common.util.concurrent.AtomicLongMap:incrementAndGet(java.lang.Object),91,94,"/**
* Computes the function mask value based on the provided key.
* @param key input key to compute the mask from","* Increments by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,decrementAndGet,com.google.common.util.concurrent.AtomicLongMap:decrementAndGet(java.lang.Object),99,102,"/**
* Calculates a function mask using provided key.
* @param key input key value
*/","* Decrements by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndIncrement,com.google.common.util.concurrent.AtomicLongMap:getAndIncrement(java.lang.Object),116,119,"/**
* Calculates the functional mask value based on the given key.
* @param key input key value
*/","* Increments by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndDecrement,com.google.common.util.concurrent.AtomicLongMap:getAndDecrement(java.lang.Object),124,127,"/**
* Returns a unique mask value based on the given key.
* @param key input key to compute mask from","* Decrements by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(java.util.Map),74,78,"/**
* Creates an AtomicLongMap instance from a given map.
* @param m input map to initialize the AtomicLongMap
*/",Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractGraph:incidentEdgeOrder(),101,104,"/**
* Returns an element order with mask value 1.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph:incidentEdgeOrder(),101,104,"/**
* Returns an ElementOrder instance with mask value 1.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,<init>,com.google.common.graph.GraphBuilder:<init>(boolean),77,79,"/**
 * Initializes a new graph builder with optional directionality.
 * @param directed true to create an undirected graph, false otherwise
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,<init>,com.google.common.graph.NetworkBuilder:<init>(boolean),82,84,"/**
 * Constructs a new network builder with specified graph direction.
 * @param directed true to create an undirected network, false otherwise
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,<init>,com.google.common.graph.ValueGraphBuilder:<init>(boolean),79,81,"/**
* Initializes a new instance of the ValueGraphBuilder class with directionality.
* @param directed true to create an undirected graph, false otherwise
*/",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,addListener,"com.google.common.util.concurrent.AbstractService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)",510,513,"/**
* Delegates execution of Listener's m1 method to an external Executor.
* @param listener instance of Listener interface
* @param executor custom thread pool or executor service
*/",* @since 13.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",579,581,"/**
* Delegates listener registration to internal listeners manager.
* @param listener listener object to register
* @param executor executor instance for asynchronous tasks
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,apply,com.google.common.base.Converter:apply(java.lang.Object),447,470,"/**
* Converts input value using internal conversion logic.
* @param a input value to convert
*/",* @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,create,com.google.common.collect.CompactHashMap:create(),97,100,"/**
* Creates an empty instance of CompactHashMap.
*/",Creates an empty {@code CompactHashMap} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,createWithExpectedSize,com.google.common.collect.CompactHashMap:createWithExpectedSize(int),111,114,"/**
* Creates a compact HashMap with estimated size.
* @param expectedSize estimated map size
*/","* Creates a {@code CompactHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,"com.google.common.collect.CompactLinkedHashMap:<init>(int,boolean)",110,113,"/**
* Creates a compact linked hash map with specified capacity and ordering.
* @param expectedSize estimated number of elements
* @param accessOrder true for access-order iteration, false for insertion-order iteration
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(),85,87,"/**
* Creates an empty CompactHashSet instance.
*/",Creates an empty {@code CompactHashSet} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(),126,126,"/**
* Creates an empty compact linked hash set. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,createWithExpectedSize,com.google.common.collect.CompactHashSet:createWithExpectedSize(int),126,129,"/**
* Creates a compact hash set with specified expected size.
* @param expectedSize estimated number of elements in the set
*/","* Creates a {@code CompactHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(int),128,130,"/**
* Initializes a compact linked hash set with a specified capacity. 
* @param expectedSize expected number of elements in the set
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newListMultimap,"com.google.common.collect.Multimaps:newListMultimap(java.util.Map,com.google.common.base.Supplier)",330,334,"/**
* Creates a custom list multimap from the provided map and list factory.
* @param map input map with key-value pairs
* @param factory supplier for creating lists of values
*/","* Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code
   * removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory
   * does. However, the multimap's {@code get} method returns instances of a different class than
   * does {@code factory.get()}.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedListMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link
   * LinkedListMultimap#create()} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by
   * {@code factory}. Those objects should not be manually updated, they should be empty when
   * provided, and they should not use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty lists that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedKeySortedSetMultimap:<init>(java.util.SortedMap),39,41,"/**
 * Constructs an instance from a sorted map of keys to values.
 * @param map sorted map containing key-value pairs to initialize this multimap
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSortedSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",535,539,"/**
* Initializes a custom sorted multimap with a given supplier for sorted set values.
* @param map underlying map
* @param factory supplier of sorted sets to use as values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSetMultimap,"com.google.common.collect.Multimaps:newSetMultimap(java.util.Map,com.google.common.base.Supplier)",416,420,"/**
* Creates a custom set multimap from the given map and supplier.
* @param map input map with key-value collections
* @param factory supplier for creating value sets
*/","* Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link
   * LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sets that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMultiset,"com.google.common.collect.CollectCollectors:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",152,165,"/**
* Creates a collector for aggregating elements into an immutable multiset.
* @param elementFunction function to extract the element from each input
* @param countFunction function to get the count of each element in each input
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(),483,485,"/**
* Initializes the Builder with an empty multiset.
* @param none 
* Creates a new instance of Builder with an internal LinkedHashMultiset.","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultiset#builder}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,spliterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:spliterator(),67,70,"/**
* Returns a spliterator over the mapping of key-value pairs.
* @return Spliterator containing Entry objects.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:spliterator(),611,614,"/**
* Returns a spliterator over the elements of the collection.
* @return Spliterator object with specified characteristics and getter function.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,spliterator,com.google.common.collect.RegularImmutableSortedSet:spliterator(),80,83,"/**
* Delegates to m1() and returns its spliterator.
* @return Spliterator of E elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,newHasher,com.google.common.hash.Crc32cHashFunction:newHasher(),35,38,"/**
* Returns a CRC-32C hasher instance.
* @return Crc32cHasher object for hashing data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,newHasher,com.google.common.hash.Murmur3_128HashFunction:newHasher(),63,66,"/**
* Returns a hasher instance with a fixed seed value.
* @return Murmur3_128Hasher object with predefined seed.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,newHasher,com.google.common.hash.SipHashFunction:newHasher(),71,74,"/**
 * Creates a SipHasher instance with fixed constants c, d, k0, and k1. 
 * @return A Hasher object initialized with precomputed values for secure hash generation.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toString,com.google.common.math.Stats:toString(),445,458,"/**
* Calculates and formats statistical metrics for a dataset.
* @return Formatted string containing statistics or null if invalid
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,andThen,com.google.common.base.Converter:andThen(com.google.common.base.Converter),376,378,"/**
* Combines two converters into one using {@code m1}.
* @param secondConverter converter to be combined
* @return merged Converter instance
*/","* Returns a converter whose {@code convert} method applies {@code secondConverter} to the result
   * of this converter. Its {@code reverse} method applies the converters in reverse order.
   *
   * <p>The returned converter is serializable if {@code this} converter and {@code secondConverter}
   * are.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$CartesianSet:equals(java.lang.Object),1611,1624,"/**
* Compares this CartesianSet with another set for equality.
* @param object set to compare with
* @return true if sets are equal, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$TypeVariableImpl:equals(java.lang.Object),438,462,"/**
* Checks if the provided object represents a valid type variable.
* @param obj Object to check
* @return true if the object is a valid type variable, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$WildcardTypeImpl:equals(java.lang.Object),487,495,"/**
* Evaluates the wildcard type using bounds.
* @param obj object to evaluate, may be null
* @return true if valid, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Object[])",168,173,"/**
* Converts array of optional parts to a list and passes it to the recursive StringBuilder construction.
* @param builder initial StringBuilder object
* @param parts array of optional parts to be appended
*/","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Iterable),193,233,"/**
* Concatenates Iterable parts into a single string using separator.
* @param parts iterable parts to concatenate
* @return concatenated string or empty string if empty input
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,create,com.google.common.collect.MapMakerInternalMap:create(com.google.common.collect.MapMaker),205,223,"/**
* Creates a MapMakerInternalMap instance based on the specified key and value strength.
* @param builder MapMaker configuration
*/",Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,createWithDummyValues,com.google.common.collect.MapMakerInternalMap:createWithDummyValues(com.google.common.collect.MapMaker),235,250,"/**
* Creates a MapMakerInternalMap with the specified strength settings.
* @param builder MapMaker configuration
*/","* Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as
   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be
   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store
   * any values at all. Because of this optimization, {@code build.getValueStrength()} must be
   * {@link Strength#STRONG}.
   *
   * <p>This method is intended to only be used by the internal implementation of {@link Interners},
   * since a map of dummy values is the exact use case there.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,concat,com.google.common.collect.FluentIterable:concat(java.lang.Iterable),252,256,"/**
* Merges and processes multiple input iterables into a single result.
* @param inputs variable-length array of input iterables to process
*/","* Returns a fluent iterable that combines several iterables. The returned iterable has an
   * iterator that traverses the elements of each iterable in {@code inputs}. The input iterators
   * are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code
   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code
   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.
   *
   * @throws NullPointerException if any of the provided iterables is {@code null}
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,toString,com.google.common.util.concurrent.AbstractFuture:toString(),859,877,"/**
* Constructs a status string by fetching and formatting user profile data.
*@return constructed status string
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,get,com.google.common.collect.FluentIterable:get(int),835,838,"/**
* Returns an element from a collection using a two-based index.
* @param position index of desired element (1-based)
*/","* Returns the element at the specified position in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note
   * that this throws different exception types, and throws an exception if {@code null} would be
   * returned).
   *
   * @param position position of the element to return
   * @return the element at the specified position in this fluent iterable
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of this fluent iterable",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,of,com.google.common.graph.DirectedMultiNetworkConnections:of(),49,54,"/**
* Creates a directed multi-network connections instance with default capacity and load factor.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,newConnections,com.google.common.graph.StandardMutableValueGraph:newConnections(),187,191,"/**
* Returns a graph connections object based on the result of m1().
* @return GraphConnections object for directed or undirected graph
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(),288,291,"/**
* Calls m1 with default parameter value 1.
* @return result of m1(1)
*/","* Acquires a single permit from this {@code RateLimiter}, blocking until the request can be
   * granted. Tells the amount of time slept, if any.
   *
   * <p>This method is equivalent to {@code acquire(1)}.
   *
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,com.google.common.util.concurrent.Monitor:enter(java.time.Duration),391,393,"/**
* Converts duration to nanoseconds and processes it using m1().","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",709,726,"/**
* Checks if the guard satisfies a condition at a given time.
* @param guard Guard object to check
* @param time Time value to evaluate
* @param unit TimeUnit for the time value
* @return true if satisfied, false otherwise
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(com.google.common.cache.CacheBuilderSpec),329,332,"/**
* Creates a CacheBuilder with functional mask applied.
* @param spec CacheBuilder specification","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newStrongInterner,com.google.common.collect.Interners:newStrongInterner(),103,105,"/**
* Returns an instance of Interner with default settings.
*/","* Returns a new thread-safe interner which retains a strong reference to each instance it has
   * interned, thus preventing these instances from being garbage-collected. If this retention is
   * acceptable, this implementation may perform better than {@link #newWeakInterner}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newWeakInterner,com.google.common.collect.Interners:newWeakInterner(),113,116,"/**
* Creates an Interner instance with default configuration.
*/","* Returns a new thread-safe interner which retains a weak reference to each instance it has
   * interned, and so does not prevent these instances from being garbage-collected. This most
   * likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when
   * the memory usage of that implementation is unacceptable.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entrySpliterator,com.google.common.collect.ArrayTable$ArrayMap:entrySpliterator(),256,259,"/**
* Returns a spliterator to iterate over entries in the map.
* @return Spliterator of Entry objects for map iteration.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Column:getValue(int),628,631,"/**
* Returns the function mask at the specified index.
* @param index position of the mask in the collection
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Row:getValue(int),720,723,"/**
* Retrieves a mask value based on index.
* @param index position within the mask array
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,get,"com.google.common.collect.ArrayTable:get(java.lang.Object,java.lang.Object)",436,441,"/**
* Resolves row and column keys to indices and delegates to m2.
* @param rowKey unique row identifier or null
* @param columnKey unique column identifier or null
* @return V object or null if either key is invalid
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable:getValue(int),587,591,"/**
* Calculates the mask value at a specified position in a 2D grid.
* @param index unique identifier for the position
* @return Masked value or null if out of bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Column:setValue(int,java.lang.Object)",633,636,"/**
* Updates the mask at the specified index with the provided new value.
* @param index index of the mask to update
* @param newValue new value for the mask (may be null)
* @return updated mask value or null if unchanged
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Row:setValue(int,java.lang.Object)",725,728,"/**
* Updates functional mask at specified index with new value.
* @param index index of functional mask to update
* @param newValue new value for functional mask (null to clear)
* @return updated functional mask value or null if cleared
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",457,467,"/**
* Updates a matrix cell with the given value.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value new value to store (may be null)
*/","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code
   *     columnKey} is not in {@link #columnKeySet()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,erase,"com.google.common.collect.ArrayTable:erase(java.lang.Object,java.lang.Object)",516,524,"/**
* Retrieves a value from the data matrix using row and column keys.
* @param rowKey unique identifier for the row
* @param columnKey unique identifier for the column
* @return Value object or null if either key is invalid
*/","* Associates the value {@code null} with the specified keys, assuming both keys are valid. If
   * either key is null or isn't among the keys provided during construction, this method has no
   * effect.
   *
   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys
   * are valid.
   *
   * @param rowKey row key of mapping to be erased
   * @param columnKey column key of mapping to be erased
   * @return the value previously associated with the keys, or {@code null} if no mapping existed
   *     for the keys",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,remove,com.google.common.collect.Lists$ReverseList:remove(int),896,900,"/**
* Recursively accesses element at specified index in forward list.
* @param index position of desired element in forward list
* @return element at given index or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,set,"com.google.common.collect.Lists$ReverseList:set(int,java.lang.Object)",907,911,"/**
* Inserts an element at a specified index in a forward list.
* @param index the position to insert the element
* @param element the item to be inserted
* @return the new element at the specified index
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$ReverseList:get(int),913,917,"/**
* Evaluates the nth element of the forward list using the given index.
* @param index position to evaluate (0-based)
* @return result of evaluation or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray$AsList:get(int),499,502,"/**
* Calls the parent's m1 method with the given index.
* @param index input parameter passed to parent's m1 method
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray:equals(java.lang.Object),570,588,"/**
* Compares two ImmutableDoubleArray objects.
* @param object the other array to compare
* @return true if arrays are equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same
   * values as this one, in the same order. Values are compared as if by {@link Double#equals}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray$AsList:get(int),494,497,"/**
* Delegates call to parent class's m1 method.
* @param index input parameter forwarded to parent
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray:equals(java.lang.Object),565,583,"/**
* Checks if the object is a deep equal of this instance.
* @param object Object to compare with
*/","* Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray$AsList:get(int),496,499,"/**
* Delegates call to parent's m1 method.
* @param index integer index (purpose unclear)
* @return Long value or null (assumed by parent method)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray:equals(java.lang.Object),567,585,"/**
* Compares two ImmutableLongArray instances for equality.
* @param object the other array to compare with
* @return true if arrays are equal, false otherwise
*/","* Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Formats a string into the specified case format, applying masks and separators.
* @param format CaseFormat to apply
* @param s input string
*/",Enum values can override for performance reasons.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence),544,546,"/**
* Returns the length of the given character sequence.
* @param sequence input sequence to measure
*/","* Returns the index of the first matching BMP character in a character sequence, or {@code -1} if
   * no matching character is present.
   *
   * <p>The default implementation iterates over the sequence in forward order calling {@link
   * #matches} for each character.
   *
   * @param sequence the character sequence to examine from the beginning
   * @return an index, or {@code -1} if no character matches",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeTokenIfPresent,com.google.common.net.MediaType$Tokenizer:consumeTokenIfPresent(com.google.common.base.CharMatcher),1152,1158,"/**
* Applies a custom character filter and extracts a substring from the input.
* @param matcher custom character matcher instance
* @return filtered substring or null if filtering failed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,com.google.common.collect.AbstractIndexedListIterator:<init>(int),50,52,"/**
* Initializes an iterator for an indexed list of specified size.
* @param size the size of the indexed list
*/","* Constructs an iterator across a sequence of the given size whose initial position is 0. That
   * is, the first call to {@link #next()} will return the first element (or throw {@link
   * NoSuchElementException} if {@code size} is zero).
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(java.lang.Object),147,151,"/**
* Calls m1 with default values and always returns true.
* @param v object to process (purpose unclear due to lack of context)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(java.util.Collection),159,163,"/**
* Recursively processes elements in the given collection.
* @param collection Collection to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,add,"com.google.common.collect.Lists$ReverseList:add(int,java.lang.Object)",886,889,"/**
* Calls forward list function with result of m1 and provided element.
* @param index index to be used in m1
* @param element element to be passed to forward list function
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIterator,com.google.common.collect.Lists$ReverseList:listIterator(int),935,1003,"/**
* Creates a filtered iterator that wraps the given index.
* @param index starting position in the list
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getTeredoInfo,com.google.common.net.InetAddresses:getTeredoInfo(java.net.Inet6Address),823,842,"/**
* Extracts TeredoInfo from a given IPv6 address.
* @param ip the IPv6 address to parse
* @return TeredoInfo object with server IP, client IP, port, and flags or null if not valid
*/","* Returns the Teredo information embedded in a Teredo address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded Teredo information
   * @return extracted {@code TeredoInfo}
   * @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,com.google.common.base.Utf8:isWellFormed(byte[]),110,112,"/**
 * Triggers the main processing function.
 * @param bytes input byte array to process
 */","* Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to
   * Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be
   * decoded. For example, some versions of the JDK decoder will accept ""non-shortest form"" byte
   * sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered
   * well-formed.
   *
   * <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new
   * String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(java.lang.Object[]),713,727,"/**
* Recursively fetches and returns an array of type T from the underlying data structure.
* @param a input array to be processed
* @return Array of type T or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(java.lang.Object[]),1035,1049,"/**
* Invokes the nested {@code m6()} method on the provided array or delegates to another implementation.
* @param a input array of type T
* @return an array of type T or a fallback implementation if necessary
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(java.lang.Object[]),635,649,"/**
* Executes method m5 on the given array, with optional delegation to another set.
*@param a input array to modify or pass to delegate
*@return modified array if executed directly, or result from delegate
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(),702,711,"/**
* Returns an array of objects based on the result of m1 and m5 calls.
* @return non-null array if m1 returns true, otherwise a new array or null if m2 fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(),1024,1033,"/**
* Recursively fetches and returns an array of objects from the delegate.
* @return An empty object array if m1() is true; otherwise, a populated array
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(byte[]),63,67,"/**
* Returns a Hasher instance for the given byte array.
* @param bytes input data to hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(java.nio.ByteBuffer),79,91,"/**
* Initializes hasher with data from ByteBuffer.
* @param b input buffer containing hash initialization data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.Hasher:putBytes(byte[],int,int)",66,68,"/**
* Computes hash code using provided bytes.
* @param bytes byte array to process
* @param off offset within array (inclusive)
* @param len length of bytes to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,makeHash,com.google.common.hash.Hashing$ConcatenatedHashFunction:makeHash(com.google.common.hash.Hasher[]),798,807,"/**
* Concatenates and hashes multiple hashers into a single hash code.
* @param hashers array of Hasher objects to combine
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)",683,690,"/**
* Encodes byte array into target using custom algorithms.
* @param target output stream
* @param bytes input byte array
* @param off starting offset in the array
* @param len number of bytes to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,com.google.common.io.BaseEncoding:encode(byte[]),146,148,"/**
 * Extracts string from given byte array.
 * @param bytes input byte array containing encoded string
 */","Encodes the specified byte array, and returns the encoded {@code String}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,toString,com.google.common.io.ByteSource$ByteArrayByteSource:toString(),640,645,"/**
* Returns a function mask string in the format of ByteSource.wrap().
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[],int,int)",813,819,"/**
* Reads and validates specified length from input stream.
* @param in InputStream to read from
* @param b byte array to store the result
* @param off starting offset in the array
* @param len number of bytes to expect and validate
*/","* Attempts to read {@code len} bytes from the stream into the given array starting at {@code
   * off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close
   * the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @param off an int specifying the offset into the data.
   * @param len an int specifying the number of bytes to read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,com.google.common.primitives.Booleans:reverse(boolean[]),539,542,"/**
* Recursively processes boolean array.
* @param array input boolean array
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int,int,int)",590,612,"/**
* Masks a range of elements in the array with a specified distance.
* @param array input boolean array
* @param distance offset value for masking
* @param fromIndex start index of masked range (inclusive)
* @param toIndex end index of masked range (exclusive)
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,com.google.common.primitives.Bytes:reverse(byte[]),390,393,"/**
 * Recursively processes the entire byte array using m1 and m2.
 * @param array the input byte array to process
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int,int,int)",441,463,"/**
* Shifts and masks specified portion of byte array.
* @param array input byte array
* @param distance shift distance
* @param fromIndex start index
* @param toIndex end index
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat
   * faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,"com.google.common.primitives.SignedBytes:sortDescending(byte[],int,int)",211,216,"/**
* Applies various byte array operations (masks).
* @param array input byte array
* @param fromIndex starting index of operation range
* @param toIndex ending index of operation range
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,"com.google.common.primitives.Chars:sortDescending(char[],int,int)",467,472,"/**
* Applies a series of operations to the specified array segment.
* @param array input character array
* @param fromIndex starting index of the segment (inclusive)
* @param toIndex ending index of the segment (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,com.google.common.primitives.Chars:reverse(char[]),480,483,"/**
* Recursively processes and updates the input character array.
* @param array input character array to process
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int,int,int)",531,553,"/**
* Shifts and masks the given character array within the specified range.
* @param array input character array
* @param distance shift distance
* @param fromIndex starting index of the range
* @param toIndex ending index of the range
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,"com.google.common.primitives.Doubles:sortDescending(double[],int,int)",441,446,"/**
* Applies mask operations on a double array within specified indices.
* @param array the input double array
* @param fromIndex start index of operation (inclusive)
* @param toIndex end index of operation (exclusive) 
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,com.google.common.primitives.Doubles:reverse(double[]),454,457,"/**
* Recursively sorts an array of doubles using helper function m1.
* @param array array to be sorted
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int,int,int)",505,527,"/**
* Applies circular mask to specified subarray within the given array.
* @param array input array
* @param distance offset for circular shift
* @param fromIndex start index of subarray
* @param toIndex end index of subarray
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,"com.google.common.primitives.Floats:sortDescending(float[],int,int)",438,443,"/**
* Applies a series of transformations to the specified range of an array.
* @param array input float array
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,com.google.common.primitives.Floats:reverse(float[]),451,454,"/**
* Recursively traverses and processes float array.
* @param array input array of floats
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int,int,int)",502,524,"/**
* Masks specified section of array using distance-based shifting.
* @param array the input array
* @param distance shift distance
* @param fromIndex start index of mask region
* @param toIndex end index of mask region
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subList,"com.google.common.primitives.ImmutableDoubleArray$AsList:subList(int,int)",519,522,"/**
* Retrieves result range between specified indices.
* @param fromIndex starting index of range (inclusive)
* @param toIndex ending index of range (inclusive)
* @return List of Double values for the specified range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subList,"com.google.common.primitives.ImmutableIntArray$AsList:subList(int,int)",514,517,"/**
* Retrieves a list of mask values within the specified range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (inclusive)
* @return List of Integer values representing masks
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subList,"com.google.common.primitives.ImmutableLongArray$AsList:subList(int,int)",516,519,"/**
* Retrieves a list of Long values between two indices in the masked range.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return List of Long values or an empty list if no data exists
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,"com.google.common.primitives.Ints:sortDescending(int[],int,int)",500,505,"/**
* Applies a series of mask operations on the specified array segment.
* @param array input array
* @param fromIndex starting index of the array segment
* @param toIndex ending index of the array segment
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,com.google.common.primitives.Ints:reverse(int[]),513,516,"/**
* Recursively sorts and merges sub-arrays of the given array.
* @param array input array to be sorted
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int,int,int)",564,612,"/**
* Shifts and masks elements in the specified array within the given range.
* @param array input array
* @param distance shift distance
* @param fromIndex start index of range (inclusive)
* @param toIndex end index of range (exclusive)
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,"com.google.common.primitives.Longs:sortDescending(long[],int,int)",578,583,"/**
* Applies mask operations on a long array within the specified range.
* @param array input array
* @param fromIndex starting index of the range (inclusive)
* @param toIndex ending index of the range (exclusive)","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,com.google.common.primitives.Longs:reverse(long[]),591,594,"/**
* Recursively processes the given long array using m1 and m2 helper methods.
* @param array input array to process
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int,int,int)",642,664,"/**
* Masks elements in the array within a specified distance range.
* @param array input array
* @param distance distance between masked elements
* @param fromIndex start index of masking window
* @param toIndex end index of masking window
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,"com.google.common.primitives.Shorts:sortDescending(short[],int,int)",490,495,"/**
* Applies mask operations on a short array within specified indices.
* @param array the input array
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,com.google.common.primitives.Shorts:reverse(short[]),503,506,"/**
* Recursively traverses and processes short array elements.
* @param array input array of shorts
*/","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int,int,int)",554,576,"/**
* Masks a portion of the array using circular shift.
* @param array input short array
* @param distance number of positions to shift
* @param fromIndex start index of mask operation
* @param toIndex end index of mask operation
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,com.google.common.primitives.UnsignedBytes:sort(byte[]),516,519,"/**
* Recursively processes and updates the given byte array.
* @param array input byte array
*/","* Sorts the array, treating its elements as unsigned bytes.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,com.google.common.primitives.UnsignedBytes:sortDescending(byte[]),545,548,"/**
* Recursively processes byte array and calls m1.
* @param array input byte array
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,com.google.common.primitives.UnsignedInts:sort(int[]),224,227,"/**
* Recursively processes and sorts an integer array.
* @param array input array to sort
*/","* Sorts the array, treating its elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,com.google.common.primitives.UnsignedInts:sortDescending(int[]),253,256,"/**
* Recursively traverses and processes the given integer array.
* @param array input array to process
*/","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,com.google.common.primitives.UnsignedLongs:sort(long[]),188,191,"/**
* Recursively processes and updates the input array.
* @param array long array to process
*/","* Sorts the array, treating its elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,com.google.common.primitives.UnsignedLongs:sortDescending(long[]),217,220,"/**
 * Recursively calls m1 and then itself with specified subarray bounds.
 * @param array input array to process
 */","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,delegate,com.google.common.collect.FilteredKeyMultimap$Entries:delegate(),192,195,"/**
* Returns filtered collection of entries based on conditions from unfiltered and m2(). 
* @return Collection of Entry objects or empty if none match.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,toString,com.google.common.util.concurrent.ServiceManager:toString(),437,442,"/**
* Retrieves services configuration from ServiceManager.
* @return JSON string representation of service configuration
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.lang.String),166,195,"/**
* Creates a Splitter instance for the given separator.
* @param separator string to split on, non-empty and single-character separators are optimized
*/","* Returns a splitter that uses the given fixed string as a separator. For example, {@code
   * Splitter.on("", "").split(""foo, bar,baz"")} returns an iterable containing {@code [""foo"",
   * ""bar,baz""]}.
   *
   * @param separator the literal, nonempty string to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(char),442,444,"/**
* Wraps m1() output in a map splitter. 
* @param separator character to split on
*/","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ComputingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3628,3630,"/**
* Initializes ValueReference with provided old value.
* @param oldValue previous ValueReference instance to inherit from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(),3496,3498,"/**
 * Initializes LoadingValueReference with no initial value.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,createFromSystemTimer,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:createFromSystemTimer(),474,490,"/**
* Returns a SleepingStopwatch instance with a stopwatch initialized to measure time in microseconds. 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,startFinalizer,"com.google.common.base.internal.Finalizer:startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",62,110,"/**
* Creates and starts a finalization thread for the given PhantomReference.
* @param finalizableReferenceClass class of the finalizable object
* @param queue ReferenceQueue for the finalizable object
* @param frqReference PhantomReference to finalize
*/","* Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.
   *
   * @param finalizableReferenceClass FinalizableReference.class.
   * @param queue a reference queue that the thread will poll.
   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued
   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its
   *     close() method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,builder,com.google.common.collect.ImmutableListMultimap:builder(),193,195,"/**
* Creates an instance of Builder with default settings. 
* @return A new Builder instance
*/","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,builder,com.google.common.collect.ImmutableSetMultimap:builder(),221,223,"/**
* Creates a new instance of Builder with default settings.
* @return Builder object with empty configuration
*/",Returns a new {@link Builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingSerializationProxy:<init>(com.google.common.cache.LocalCache),4795,4797,"/**
 * Initializes the proxy with a provided local cache instance.
 * @param cache Local cache used to store and retrieve serialized data
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalManualCache:writeReplace(),4926,4928,"/**
* Returns a manual serialization proxy instance.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.Multiset),106,114,"/**
* Creates a read-only view of the given multiset, or returns an unmodifiable copy if it's already immutable.
* @param multiset input multiset to transform
* @return Multiset object with modified elements (if original was mutable) or null if not found
*/","* Returns an unmodifiable view of the specified multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param multiset the multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,<init>,com.google.common.collect.UnmodifiableSortedMultiset:<init>(com.google.common.collect.SortedMultiset),40,42,"/**
* Wraps an existing SortedMultiset instance as an unmodifiable view. 
* @param delegate the underlying multiset to wrap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,create,com.google.common.collect.EvictingQueue:create(int),66,68,"/**
* Creates an EvictingQueue with specified maximum size.
* @param maxSize maximum number of elements in the queue
*/","* Creates and returns a new evicting queue that will hold up to {@code maxSize} elements.
   *
   * <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the
   * queue.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,<init>,com.google.common.collect.ForwardingBlockingDeque:<init>(),56,56,"/**
* Constructs an empty forwarding blocking deque. 
* No parameters are used in this constructor.
*/",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,<init>,com.google.common.util.concurrent.ForwardingBlockingDeque:<init>(),54,54,"/**
* Constructs an empty BlockingDeque with default settings. 
* @see java.util.concurrent.BlockingDeque#BlockingDeque() */",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,get,com.google.common.collect.FilteredKeyMultimap:get(java.lang.Object),103,112,"/**
* Returns a filtered collection of values by applying the key predicate.
* @param key unique key value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,<init>,com.google.common.collect.ForwardingNavigableSet:<init>(),56,56,"/**
* Constructor for an empty forwarding navigable set.",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$UnmodifiableNavigableSet:<init>(java.util.NavigableSet),1963,1966,"/**
* Creates an unmodifiable NavigableSet view of a given sorted set.
* @param delegate the underlying navigable set to wrap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntrySet,com.google.common.collect.Maps:unmodifiableEntrySet(java.util.Set),1482,1485,"/**
* Returns an unmodifiable set view of the provided entries.
* @param entrySet original set of key-value pairs
*/","* Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}, as do any operations that would
   * modify the returned set.
   *
   * @param entrySet the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$SerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2883,2892,"/**
* Constructs a serialization proxy with specified strength and equivalence for keys/values.
* @param keyStrength strength of key serialization
* @param valueStrength strength of value serialization
* @param keyEquivalence equivalence strategy for keys
* @param valueEquivalence equivalence strategy for values
* @param concurrencyLevel concurrency level for the map
* @param delegate underlying concurrent map",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableNavigableMap,com.google.common.collect.Maps:unmodifiableNavigableMap(java.util.NavigableMap),3432,3443,"/**
* Converts a navigable map to an unmodifiable version.
* @param map the original map
* @return an unmodifiable copy of the map or null if already unmodifiable
*/","* Returns an unmodifiable view of the specified navigable map. Query operations on the returned
   * map read through to the specified map, and attempts to modify the returned map, whether direct
   * or via its views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K,
   * V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code
   * comparator()} method might return a {@code Comparator<? extends K>}, which works only on a
   * particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which
   * must work on any type of {@code K}.
   *
   * @param map the navigable map for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable map
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingMap(),3584,3590,"/**
* Returns a navigable map view of the underlying delegate's map,
* or creates and returns a new unmodifiable map if the current one is null.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,readResolve,com.google.common.collect.MutableClassToInstanceMap$SerializedForm:readResolve(),202,204,"/**
* Returns a mask object from the backing map.
* @param backingMap underlying data structure
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ListMultimap),1007,1013,"/**
* Wraps a mutable ListMultimap in an unmodifiable view.
* @param delegate the multimap to wrap
* @return a read-only view of the input multimap
*/","* Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap),864,866,"/**
* Wraps a SortedSetMultimap instance as an unmodifiable collection.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.SetMultimap),923,929,"/**
* Returns an unmodifiable view of the provided set multimap.
* @param delegate original set multimap
*/","* Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableRowSortedTable,com.google.common.collect.Tables:unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable),632,641,"/**
* Returns an unmodifiable view of the input table.
* @param table input table to convert
*/","* Returns an unmodifiable view of the specified row-sorted table. This method allows modules to
   * provide users with ""read-only"" access to internal tables. Query operations on the returned
   * table ""read through"" to the specified table, and attempts to modify the returned table, whether
   * direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the row-sorted table for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified table
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:<init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture)",587,591,"/**
* Initializes a ListenableScheduledTask with a delegate and a scheduled future.
* @param listenableDelegate the task's underlying asynchronous operation
* @param scheduledDelegate the scheduled execution of the task",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future),56,62,"/**
* Adapts a Future to a ListenableFuture, allowing it to be cancelled and listened to.
* @param future the underlying Future to adapt
* @return a ListenableFuture wrapping the original Future
*/","* Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an
   * internal, unbounded pool at the first call to {@code addListener} and holding it until the
   * future is {@linkplain Future#isDone() done}.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset$EntrySet:hashCode(),401,404,"/**
* Invokes delegate's implementation of m1().
* @return result from delegate's m1()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,addCallback,"com.google.common.util.concurrent.Futures:addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",1095,1099,"/**
* Invokes a future with a custom listener and executor.
* @param future ListenableFuture to be invoked
* @param callback FutureCallback to handle result or exception
* @param executor Executor to run the listener on
*/","* Registers separate success and failure callbacks to be run when the {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception
   * thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an
   * exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught
   * and logged.
   *
   * <p>Example:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> future = ...;
   * Executor e = ...
   * addCallback(future,
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, e);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link
   * ListenableFuture#addListener addListener}.
   *
   * @param future The future attach the callback to.
   * @param callback The callback to invoke when {@code future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.
   * @since 10.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",246,322,"/**
* Initializes a new LocalCache instance with specified configuration.
* @param builder CacheBuilder instance
* @param loader CacheLoader instance for loading values (optional)
*/","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractGraph:inDegree(java.lang.Object),147,150,"/**
* Evaluates function mask value based on conditions and node properties.
* @param node Node object to evaluate against
* @return int function mask value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph:inDegree(java.lang.Object),147,150,"/**
* Evaluates mask value based on node type.
* @param node Node object to determine mask value from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractGraph:outDegree(java.lang.Object),152,155,"/**
* Evaluates and returns the mask value based on the node's properties.
* @param node Node object to evaluate
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph:outDegree(java.lang.Object),152,155,"/**
* Computes function mask value based on node properties.
* @param node input node object
* @return function mask integer value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph$1:degree(java.lang.Object),136,145,"/**
* Calculates the FUNC_MASK value for a given node.
* @param node Node object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,read,com.google.common.io.MoreFiles$PathByteSource:read(),160,165,"/**
* Reads and returns function mask data from the specified file.
* @throws IOException if I/O error occurs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,<init>,"com.google.common.collect.EnumBiMap:<init>(java.lang.Class,java.lang.Class)",90,95,"/**
* Initializes a bi-directional map between two enum types.
* @param keyTypeOrObjectUnderJ2cl the type of enum keys
* @param valueTypeOrObjectUnderJ2cl the type of enum values",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,<init>,com.google.common.collect.EnumHashBiMap:<init>(java.lang.Class),78,82,"/**
* Initializes an EnumHashBiMap with a specific key type.
* @param keyType the class of the enumeration being mapped
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(),77,80,"/**
* Creates a TreeMultiset instance with m1 ordering.
*/","* Creates a new, empty multiset, sorted according to the elements' natural order. All elements
   * inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all
   * such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a
   * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the
   * user attempts to add an element to the multiset that violates this constraint (for example, the
   * user attempts to add a string element to a set whose elements are integers), the {@code
   * add(Object)} call will throw a {@code ClassCastException}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.util.Comparator),93,99,"/**
* Creates a TreeMultiset instance with optional custom comparator.
* @param comparator null for default ordering, or custom comparator
*/","* Creates a new, empty multiset, sorted according to the specified comparator. All elements
   * inserted into the multiset must be <i>mutually comparable</i> by the specified comparator:
   * {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements
   * {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the
   * multiset that violates this constraint, the {@code add(Object)} call will throw a {@code
   * ClassCastException}.
   *
   * @param comparator the comparator that will be used to sort this multiset. A null value
   *     indicates that the elements' <i>natural ordering</i> should be used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.AbstractBiMap:putAll(java.util.Map),187,192,"/**
* Iterates over the provided map and applies mask operation to each key-value pair.
* @param map a map of keys (K) to values (V)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.EnumBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
* Retrieves and sets a function mask with the specified key-value pair.
* @param key unique identifier for the function mask
* @param value new value to be associated with the key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.EnumBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
* Sets a function mask with the given key and value.
* @param key unique identifier for the function mask
* @param value associated data for the function mask
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,navigableKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:navigableKeySet(),1644,1647,"/**
* Returns a navigable set of keys.
* @return Set of keys or null if not initialized 
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,replaceValues,"com.google.common.collect.AbstractListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",105,109,"/**
* Calls superclass's m1 method with key and values.
* @param key unique identifier
* @param values iterable of values
* @return List of values or null if not found
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",114,118,"/**
* Calls superclass's m1 method with key and values.
* @param key unique identifier for the collection
* @param values collection of values to be processed
* @return Set of values or null if not found
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,removeAll,com.google.common.collect.AbstractSortedSetMultimap:removeAll(java.lang.Object),102,106,"/**
* Calls superclass's version of m1 with the provided key.
* @param key object to use in the method invocation
* @return sorted set of type V or null if not found
*/","* Removes all values associated with a given key. The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollLast(),1095,1098,"/**
* Calculates the mask value using iterative algorithm.
* @return The calculated mask value or null if invalid.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toString,com.google.common.collect.ImmutableRangeMap:toString(),418,421,"/**
* Calls the m2() method on the result of m1(), returning its output.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(),575,578,"/**
* Calls m1(), then calls m2() on its result.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(java.lang.Object[]),580,584,"/**
* Calls secondary operation on provided array and returns result.
* @param array input array to process
* @return processed array of type T, or null if not possible
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(int),50,52,"/**
* Creates a HashMultiset with a specified number of distinct elements.
* @param distinctElements number of unique elements to initialize set with
*/","* Creates a new, empty {@code HashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,"com.google.common.collect.ArrayListMultimap:<init>(int,int)",118,122,"/**
* Initializes a multimap with expected key count and values per key.
* @param expectedKeys number of keys
* @param expectedValuesPerKey average number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,"com.google.common.collect.HashMultimap:<init>(int,int)",109,113,"/**
* Initializes a HashMultimap with expected keys and values per key.
* @param expectedKeys number of unique keys
* @param expectedValuesPerKey average number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(com.google.common.collect.Multimap),115,118,"/**
* Constructs a HashMultimap from an existing Multimap.
* @param multimap the original Multimap to copy
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,readObject,com.google.common.collect.HashMultimap:readObject(java.io.ObjectInputStream),143,152,"/**
* Processes masked data from input stream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(int),184,186,"/**
* Initializes a new Multimap with an empty map of keys to lists,
* pre-allocating space for the specified number of expected keys.
* @param expectedKeys number of keys to pre-allocate space for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Network),88,97,"/**
* Recursively checks network conditions and returns true if met.
* @param network Network object to evaluate
*/","* Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty
   * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)
   * starting and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(int),58,60,"/**
* Creates a LinkedHashMultiset with the specified number of distinct elements.
* @param distinctElements target count of unique elements in the multiset
*/","* Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,<init>,"com.google.common.collect.LinkedHashMultimap:<init>(int,int)",264,271,"/**
* Initializes a LinkedHashMultimap with specified key and value capacities.
* @param keyCapacity initial capacity for key map
* @param valueSetCapacity expected number of values per key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,readObject,com.google.common.collect.LinkedHashMultimap:readObject(java.io.ObjectInputStream),633,660,"/**
* Deserializes multimap from ObjectInputStream.
* @throws IOException on serialization error
* @throws ClassNotFoundException if object not found in stream
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder),65,71,"/**
* Constructs a StandardNetwork instance using the provided builder.
* @param builder NetworkBuilder object containing network configuration
*/",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),56,62,"/**
* Constructs a StandardValueGraph instance with the given graph builder.
* @param builder AbstractGraphBuilder to use for node ordering and expected count
*/",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forceJdk,com.google.common.collect.ImmutableSet$Builder:forceJdk(),497,501,"/**
* Initializes set builder with JDK-backed implementation.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:copy(),964,967,"/**
* Creates a SetBuilder with JDK-based implementation.
* @return SetBuilder instance
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,createCollection,com.google.common.collect.HashMultimap:createCollection(),127,130,"/**
* Returns a set of valid values for each key in m1 configuration.
* @return Set of unique values or null if not initialized
*/","* {@inheritDoc}
   *
   * <p>Creates an empty {@code HashSet} for a collection of values for one key.
   *
   * @return a new {@code HashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$HashSetSupplier:get(),221,224,"/**
* Returns a set of values for the 'FUNC' mask.
* @return Set of V values or null if not available
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,createCollection,com.google.common.collect.LinkedHashMultimap:createCollection(),280,283,"/**
* Returns a set of function masks based on platform-specific capacity.
* @return Set of V values or null if not applicable
*/","* {@inheritDoc}
   *
   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.
   *
   * @return a new {@code LinkedHashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:get(),235,238,"/**
* Returns a set of valid values per key.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.TreeMultiset:pollFirstEntry(),78,88,"/**
* Computes the functional mask for the given entry.
* @return Functional mask or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.TreeMultiset:pollLastEntry(),90,100,"/**
* Computes and returns a masked Entry object.
* @return Entry object or null if computation fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,firstEntry,com.google.common.collect.RegularImmutableSortedMultiset:firstEntry(),79,82,"/**
* Returns an Entry object or null based on the result of m1(). 
* If m1() is true, returns null; otherwise calls m2(0) to determine the actual entry.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,lastEntry,com.google.common.collect.RegularImmutableSortedMultiset:lastEntry(),84,87,"/**
* Returns the entry at index <code>length - 1</code>, or null if condition m1() is true.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(),168,171,"/**
* Calls m1() and delegates to its m2() implementation.
* @return Array of objects as returned by m1().m2()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(java.lang.Object[]),173,177,"/**
* Calls m1() and delegates to its m2() method with the provided array. 
* @param array input array of type T, where T is nullable object
* @return array result from m1()'s m2() method, or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,createDescendingSet,com.google.common.collect.ContiguousSet:createDescendingSet(),243,247,"/**
* Returns an immutable sorted set of elements with descending order.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,createDescendingSet,com.google.common.collect.ImmutableRangeSet$AsSet:createDescendingSet(),696,699,"/**
* Returns an immutable sorted set of function masks in descending order.
* @return ImmutableSortedSet containing function mask values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$DescendingMap:comparator(),4285,4297,"/**
* Returns a Comparator instance for type K, either from local cache or by delegating to forwardCmp and caching the result.
* @return Comparator<? super K> instance or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,comparator,com.google.common.collect.Sets$DescendingSet:comparator(),2234,2243,"/**
* Returns a comparator for the given type, either from an existing forward comparison or a fallback ordering. 
* @return Comparator object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,"com.google.common.collect.ImmutableTable$Builder:put(java.lang.Object,java.lang.Object,java.lang.Object)",220,224,"/**
* Adds cell data with specified keys and value.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value cell value to be stored
* @return updated Builder instance for method chaining
*/","* Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built
     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,size,com.google.common.collect.ImmutableMultiset$EntrySet:size(),383,386,"/**
* Calls m1() to fetch and returns its result's m2 value.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,"com.google.common.collect.ImmutableBiMap$Builder:put(java.lang.Object,java.lang.Object)",355,360,"/**
* Sets a key-value pair and returns this builder instance.
* @param key unique key identifier
* @param value associated value
*/","* Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are
     * not allowed, and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,put,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",105,109,"/**
* Sets a mapping from the given key to the specified value.
* @param key type of the key (must be a subclass of B)
* @param value associated value
* @return this Builder instance for method chaining
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,putAll,com.google.common.collect.ImmutableClassToInstanceMap$Builder:putAll(java.util.Map),118,126,"/**
* Applies transformations from the provided map to the builder.
* @param map Map of class-value pairs to apply as transforms
* @return This Builder instance for method chaining
*/","* Associates all of {@code map's} keys and values in the built map. Duplicate keys are not
     * allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null
     * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,com.google.common.collect.ImmutableMap$Builder:put(java.util.Map$Entry),467,470,"/**
* Creates a new builder instance with key and value from given entry.
* @param entry Entry object containing key-value pair
*/","* Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is
     * put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will
     * keep the last value put for that key.
     *
     * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,"com.google.common.collect.ImmutableSortedMap$Builder:put(java.lang.Object,java.lang.Object)",628,633,"/**
* Adds a new entry to the map with the given key-value pair.
* @param key unique identifier for the entry
* @param value associated value for the entry
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the
     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link
     * #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",70,74,"/**
* Adds a key-value pair to the builder.
* @param key class representing the type of value
* @param value actual value associated with the key
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(com.google.common.reflect.TypeToken,java.lang.Object)",80,84,"/**
* Adds a mapping to the builder using the provided TypeToken and value.
* @param key TypeToken representing the key type
* @param value value to be mapped
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Iterable),277,282,"/**
* Adds multiple entries to the builder.
* @param entries iterable of key-value pairs to add
* @return updated builder instance for method chaining
*/","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Iterable),326,331,"/**
* Adds multiple entries to the builder.
* @param entries collection of key-value pairs to add
* @return updated Builder instance
*/","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.NavigableSet,com.google.common.base.Predicate)",1266,1278,"/**
* Combines a navigable set with an additional filtering criterion.
* @param unfiltered original set
* @param predicate filter condition
* @return filtered navigable set or null if not found
*/","* Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate.
   * The returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.Set,com.google.common.base.Predicate)",1189,1203,"/**
* Filters a set of objects based on the given predicate.
* @param unfiltered input set
* @param predicate filtering condition
* @return filtered set or null if no elements match
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$KeySetView:forEach(java.util.function.Consumer),754,765,"/**
* Performs actions on elements matching a key range, either by delegating to another map or iterating over the current one.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$ValuesView:forEach(java.util.function.Consumer),1000,1011,"/**
* Iterates over collection, executing an action on each element.
* @param action Consumer to process each item
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashMap:convertToHashFloodingResistantImplementation(),296,308,"/**
* Reinitializes and returns a new map instance.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap:forEach(java.util.function.BiConsumer),782,793,"/**
* Performs an action on each entry in the map.
* @param action BiConsumer to apply to key-value pairs
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashSet:convertToHashFloodingResistantImplementation(),260,271,"/**
* Initializes and returns a new delegate set with updated mask.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,forEach,com.google.common.collect.CompactHashSet:forEach(java.util.function.Consumer),602,613,"/**
* Iterates over elements using a Consumer, delegating to internal iteration if necessary.
* @param action consumer function to apply to each element
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,insertEntry,"com.google.common.collect.CompactLinkedHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",181,187,"/**
* Calls superclass method and updates adjacent entries in the map.
* @param entryIndex current entry index
* @param key key to be updated
* @param value new value for the key
* @param hash hash code of the key
* @param mask bitmask for the entry
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,accessEntry,com.google.common.collect.CompactLinkedHashMap:accessEntry(int),189,199,"/**
* Updates mask value for the given index based on access order.
* @param index position to update in mask sequence
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashMap:moveLastEntry(int,int)",201,212,"/**
* Performs a complex data transfer operation with indexing and masking.
* @param dstIndex destination index for data transfer
* @param mask additional transfer mask
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,"com.google.common.collect.ImmutableSetMultimap:<init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)",513,519,"/**
* Constructs a multimap with the specified key-value mappings and comparator.
* @param map key-value mappings
* @param size initial capacity
* @param valueComparator optional comparator for values (null if not used)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,buildOrThrow,com.google.common.collect.ImmutableSortedMap$Builder:buildOrThrow(),727,739,"/**
* Generates a sorted map based on the current data structure.
* @return ImmutableSortedMap object
*/","* Returns a newly-created immutable sorted map, or throws an exception if any two keys are
     * equal.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)
     * @since 31.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,emptyMultiset,com.google.common.collect.ImmutableSortedMultiset:emptyMultiset(java.util.Comparator),317,324,"/**
* Creates an immutable sorted multiset with the given comparator.
* @param comparator comparison function for elements
* @return ImmutableSortedMultiset instance or a natural empty set if comparator is null or equivalent to natural ordering
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap:get(java.lang.Comparable),120,124,"/**
* Retrieves value associated with given key using FUNC_MASK operation.
* @param key input key to search for
* @return associated value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,put,"com.google.common.collect.ImmutableRangeMap$Builder:put(com.google.common.collect.Range,java.lang.Object)",123,130,"/**
* Configures function mask with specified range and value.
* @param range Range of keys to apply the mask to
* @param value Value to assign to the function mask
*/","* Associates the specified range with the specified value.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,add,com.google.common.collect.ImmutableRangeSet$Builder:add(com.google.common.collect.Range),772,777,"/**
* Adds a non-empty range to the builder.
* @param range non-empty range
*/","* Add the specified range to this builder. Adjacent ranges are permitted and will be merged,
     * but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,entryIterator,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entryIterator(),768,793,"/**
* Returns an iterator over entries in the range [subRange].
* @return Iterator of RangeMapEntry objects
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:entryIterator(),773,813,"/**
* Generates iterator for entries of cut and range pairs based on mask.
* @return Iterator over Entry<Cut<C>, Range<C>> objects
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:descendingEntryIterator(),815,849,"/**
* Iterates over entries of cut ranges based on lower bound restriction.
* @return Iterator of Cut-Range pairs or null if no matches found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,replaceRangeWithSameLowerBound,com.google.common.collect.TreeRangeSet:replaceRangeWithSameLowerBound(com.google.common.collect.Range),267,273,"/**
* Inserts or updates a range in the lower bound map.
* @param range Range object to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,complement,com.google.common.collect.ImmutableRangeSet:complement(),384,398,"/**
* Computes the complement range set for this object.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,readResolve,com.google.common.collect.Range:readResolve(),704,710,"/**
* Returns a mask object based on the result of m1(ALL).
* If m1(ALL) returns true, calls m2(); otherwise, returns this.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$AsMapOfRanges:get(java.lang.Object),361,371,"/**
* Retrieves value associated with the given key, or a Range's lower bound.
* @param key unique identifier or Range object
* @return Value object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap:subRangeMap(com.google.common.collect.Range),384,391,"/**
* Creates a range map for the specified sub-range.
* @param subRange Range object defining the sub-range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$RangesByUpperBound:size(),433,439,"/**
* Resolves upper bound range by recursively querying lower bounds.
*@return lower bound index or -1 if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet$RangesByUpperBound:isEmpty(),441,446,"/**
* Determines whether to use lower bound window or not.
* @return true if using lower bound, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet:subRangeSet(com.google.common.collect.Range),857,860,"/**
* Returns a RangeSet containing the intersection of this set and the given view.
* @param view input range to intersect with
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$RangesByUpperBound:containsKey(java.lang.Object),337,340,"/**
* Checks if a mask exists for the given key.
* @param key unique identifier or data object
* @return true if mask found, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,span,com.google.common.collect.ImmutableRangeMap:span(),215,223,"/**
* Computes the range mask based on the provided ranges.
* @return Range object representing the mask
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,get,com.google.common.collect.ImmutableRangeSet$ComplementRanges:get(int),349,368,"/**
* Computes a range for the given index.
* @param index position in the sequence
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,span,com.google.common.collect.ImmutableRangeSet:span(),212,218,"/**
* Returns the functional mask range for this object.
* @return Functional mask range as a Range object
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,intersection,com.google.common.collect.Range:intersection(com.google.common.collect.Range),536,557,"/**
* Merges two ranges into a single range with common bounds.
* @param connectedRange the other range to merge
* @return merged Range object or original if disconnected
*/","* Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code
   * connectedRange}, if such a range exists.
   *
   * <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The
   * resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}
   * yields the empty range {@code [5..5)}.
   *
   * <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected
   * connected}.
   *
   * <p>The intersection operation is commutative, associative and idempotent, and its identity
   * element is {@link Range#all}).
   *
   * @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,gap,com.google.common.collect.Range:gap(com.google.common.collect.Range),576,597,"/**
* Computes the range of values not overlapping with another.
* @param otherRange the non-overlapping range to compute
* @return a new Range object representing the result
*/","* Returns the maximal range lying between this range and {@code otherRange}, if such a range
   * exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping.
   *
   * <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting
   * range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty
   * range {@code [5..5)}.
   *
   * <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent
   * (any intersection must be an empty range).
   *
   * <p>The gap operation is commutative.
   *
   * @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty
   *     intersection
   * @since 27.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,span,com.google.common.collect.Range:span(com.google.common.collect.Range),610,622,"/**
* Merges two ranges into a single range.
* @param other the range to merge with
* @return merged Range object or self if no overlap
*/","* Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code
   * other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}.
   *
   * <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can
   * also be called their <i>union</i>. If they are not, note that the span might contain values
   * that are not contained in either input range.
   *
   * <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative
   * and idempotent. Unlike it, it is always well-defined for any two input ranges.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,canonical,com.google.common.collect.Range:canonical(com.google.common.collect.DiscreteDomain),648,653,"/**
* Returns the range of values for the given discrete domain.
* @param domain DiscreteDomain object to compute range for
*/","* Returns the canonical form of this range in the given domain. The canonical form has the
   * following properties:
   *
   * <ul>
   *   <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in
   *       other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(
   *       ContiguousSet.create(a, domain))}
   *   <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a,
   *       domain).equals(ContiguousSet.create(b, domain))} implies {@code
   *       a.canonical(domain).equals(b.canonical(domain))}
   *   <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}
   * </ul>
   *
   * <p>Furthermore, this method guarantees that the range returned will be one of the following
   * canonical forms:
   *
   * <ul>
   *   <li>[start..end)
   *   <li>[start..+∞)
   *   <li>(-∞..end) (only if type {@code C} is unbounded below)
   *   <li>(-∞..+∞) (only if type {@code C} is unbounded below)
   * </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,"com.google.common.collect.RegularContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)",216,221,"/**
* Calculates a range with masked bounds based on the given lower and upper bound types.
* @param lowerBoundType type of lower bound
* @param upperBoundType type of upper bound
* @return Range object with masked bounds or null if invalid
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,"com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",99,101,"/**
* Creates a new range map entry with specified bounds and value.
* @param lowerBound the exclusive lower bound of the range
* @param upperBound the inclusive upper bound of the range
* @param value the associated value for this range",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap$SubRangeMap:span(),500,526,"/**
* Computes the range mask for a given sub-range.
* @param subRange Sub-range to compute mask for
* @return Range object representing the mask
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap:span(),195,205,"/**
* Returns the range of keys in this map.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,span,com.google.common.collect.TreeRangeSet:span(),163,175,"/**
* Returns the range of values for which the function mask is non-zero.
* @return Range object containing lower and upper bounds
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getCount,com.google.common.collect.TreeMultiset$1:getCount(),1037,1039,"/**
* Returns element count as function mask value.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,forEachEntry,com.google.common.collect.TreeMultiset:forEachEntry(java.util.function.ObjIntConsumer),532,540,"/**
* Traverses AVL tree nodes and applies a consumer to each element within the specified range.
* @param action Consumer function to be applied to each element
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(),66,68,"/**
* Creates an instance of HashBiMap with default capacity.
* @return a new HashBiMap instance
*/","Returns a new, empty {@code HashBiMap} with the default initial capacity (16).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(java.util.Map),85,90,"/**
* Converts a Map to a BiMap.
* @param map input map to convert
* @return populated BiMap or null if map is null
*/","* Constructs a new bimap containing initial values from {@code map}. The bimap is created with an
   * initial capacity sufficient to hold the mappings in the specified map.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,of,com.google.common.graph.DirectedNetworkConnections:of(),41,44,"/**
* Creates a directed network connections with expected degree.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,of,com.google.common.graph.UndirectedNetworkConnections:of(),41,43,"/**
* Creates an instance of UndirectedNetworkConnections with a functional mask.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap:remove(java.lang.Object),522,532,"/**
* Retrieves a value from the internal map or external storage, 
* using the provided key. Returns null if not found in either.
* @param key object to search for
* @return V object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap:replaceAll(java.util.function.BiFunction),580,588,"/**
* Applies a transformation function to each map entry.
* @param function BiFunction to apply to each key-value pair
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,builder,com.google.common.collect.ImmutableClassToInstanceMap:builder(),74,76,"/**
* Creates a new instance of Builder with default settings.
* @return Builder object ready to configure.","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,of,"com.google.common.collect.ImmutableClassToInstanceMap:of(java.lang.Class,java.lang.Object)",65,68,"/**
* Creates an instance of ImmutableClassToInstanceMap from a given class and object.
* @param type Class to be mapped
* @param value Object to be associated with the class
* @return Immutable map instance or null if not created
*/","* Returns an {@code ImmutableClassToInstanceMap} containing a single entry.
   *
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,asImmutable,com.google.common.collect.ImmutableEnumMap:asImmutable(java.util.EnumMap),42,52,"/**
* Converts EnumMap to ImmutableMap.
* @param map EnumMap instance
* @return ImmutableMap instance or a basic map if conversion fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,column,com.google.common.collect.SingletonImmutableTable:column(java.lang.Object),47,53,"/**
* Creates an immutable map for the given column key.
* @param columnKey unique column identifier
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,columnMap,com.google.common.collect.SingletonImmutableTable:columnMap(),55,58,"/**
* Returns a map of column-value pairs to maps of row-values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,rowMap,com.google.common.collect.SingletonImmutableTable:rowMap(),60,63,"/**
* Builds a map of maps with masked values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,values,com.google.common.collect.ImmutableBiMap:values(),589,592,"/**
* Returns an immutable set of function masks.
* @return ImmutableSet containing function mask values
*/","* Returns an immutable set of the values in this map, in the same order they appear in {@link
   * #entrySet}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,readResolve,com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:readResolve(),335,337,"/**
* Returns the function mask value from the forward pointer.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,getEntry,com.google.common.collect.DescendingImmutableSortedMultiset:getEntry(int),60,63,"/**
* Retrieves an Entry object based on the given index.
* @param index integer identifier of the entry to fetch
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap:asDescendingMapOfRanges(),317,325,"/**
* Returns an immutable map of ranges to values.
* @return Map of unique ranges to corresponding values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asDescendingSetOfRanges,com.google.common.collect.ImmutableRangeSet:asDescendingSetOfRanges(),311,317,"/**
* Returns a set of function masks.
* @return Set of Range objects or empty set if condition is met
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,descendingMap,com.google.common.collect.ImmutableSortedMap:descendingMap(),1109,1126,"/**
* Returns a sorted map of function masks, either from cache or by computation.
* @return Sorted map of function masks
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverse,com.google.common.collect.Lists:reverse(java.util.List),847,861,"/**
* Reverses or optimizes the given list based on its type.
* @param list input list to process
* @return reversed or optimized list of same type T
*/","* Returns a reversed view of the specified list. For example, {@code
   * Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned
   * list is backed by this list, so changes in the returned list are reflected in this list, and
   * vice-versa. The returned list supports all of the optional list operations supported by this
   * list.
   *
   * <p>The returned list is random-access if the specified list is random access.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,descendingIterator,com.google.common.collect.RegularImmutableSortedSet:descendingIterator(),74,78,"/**
* Returns an unmodifiable iterator over function mask elements.
* @return UnmodifiableIterator containing function mask values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createDescendingSet,com.google.common.collect.RegularImmutableSortedSet:createDescendingSet(),319,325,"/**
* Returns an ImmutableSortedSet with the elements sorted in reverse order.
* @return Sorted set or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$StringAsImmutableList:subList(int,int)",785,789,"/**
* Extracts and returns a list of characters within a specified range.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
* @return List of characters or empty list if range is invalid
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Object[]),291,300,"/**
* Creates an immutable list from a flexible input array.
* @param elements input array of elements, can be empty or contain one element
*/","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,"com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[],int)",368,390,"/**
* Creates an immutable list from a varargs array or subset of elements.
* @param elements object array containing list elements
* @param length number of non-null elements in the list
* @return ImmutableList instance or null if input is invalid
*/","* Views the array as an immutable list. Copies if the specified range does not cover the complete
   * array. Does not check for nulls.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList:subList(int,int)",453,466,"/**
* Returns a sublist of elements from index {@code fromIndex} to {@code toIndex}.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
* @return ImmutableList of length {@code toIndex - fromIndex} or this if equal
*/","* Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,
   * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty
   * immutable list is returned.)
   *
   * <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a
   * strong reference to {@code this}, which may prevent the original list from being garbage
   * collected. If you want the original list to be eligible for garbage collection, you should
   * create and use a copy of the sub list (e.g., {@code
   * ImmutableList.copyOf(originalList.subList(...))}).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,of,"com.google.common.collect.ImmutableRangeMap:of(com.google.common.collect.Range,java.lang.Object)",80,82,"/**
* Creates an immutable range map with the given range and value.
* @param range Range object defining key bounds
* @param value Value to be associated with the range
*/",Returns an immutable range map mapping a single range to a single value.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$SerializedForm:readResolve(),855,863,"/**
* Returns a mask object based on the current range state.
* @return An object representing the current functional mask.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,of,com.google.common.collect.ImmutableRangeSet:of(com.google.common.collect.Range),92,101,"/**
* Recursively constructs an immutable range set from a given range.
* @param range input range to process
* @return ImmutableRangeSet instance or default value if applicable
*/","* Returns an immutable range set containing the specified single range. If {@link Range#isEmpty()
   * range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,of,"com.google.common.collect.ImmutableSortedMap:of(java.util.Comparator,java.lang.Object,java.lang.Object)",146,150,"/**
* Creates an ImmutableSortedMap with a single key-value pair.
* @param comparator key comparator
* @param k1 the single key
* @param v1 the corresponding value
*/",Returns an immutable map containing a single entry.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,asList,com.google.common.collect.SingletonImmutableSet:asList(),60,63,"/**
* Returns an immutable list of elements filtered by mask.
* @return List of elements matching the filter criteria
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,userPermissions,com.google.common.io.TempFileCreator$JavaNioCreator:userPermissions(),166,199,"/**
* Creates a permission supplier for the ACL mask.
* @return Supplier of Permission object or throws IOException if failed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object),1376,1378,"/**
* Recursively wraps a single element in an immutable list.
* @param type the single element to wrap
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,asImmutable,com.google.common.collect.ImmutableEnumSet:asImmutable(java.util.EnumSet),42,51,"/**
* Converts an EnumSet to an ImmutableSet, handling special cases.
* @param set input EnumSet
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,get,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:get(java.lang.Object),1146,1150,"/**
* Retrieves a set of values using the provided key.
* @param key object to use for retrieval
* @return Set of values or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:build(),801,825,"/**
* Generates an immutable set of elements based on the distinct flag.
* @return ImmutableSet containing deduplicated elements
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Object[]),253,255,"/**
* Creates an immutable set from an array of elements.
* @param elements input array of type E
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source array.
   *
   * @throws NullPointerException if any of {@code elements} is null
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createEntrySet,com.google.common.collect.SingletonImmutableBiMap:createEntrySet(),87,90,"/**
* Returns an immutable set of key-value pairs where each entry represents a mask value.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createKeySet,com.google.common.collect.SingletonImmutableBiMap:createKeySet(),92,95,"/**
* Returns an immutable set containing single key mask.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createCellSet,com.google.common.collect.SingletonImmutableTable:createCellSet(),70,73,"/**
* Creates an immutable set of cells with specific mask values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createValues,com.google.common.collect.SingletonImmutableTable:createValues(),75,78,"/**
* Returns an immutable set containing a single value.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,adjacentEdges,com.google.common.graph.AbstractNetwork:adjacentEdges(java.lang.Object),163,170,"/**
* Computes the function mask for a given edge.
* @param edge incident edge
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$CachingAsList:iterator(),338,341,"/**
* Calls m1 and returns its iterator result.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,containsAll,com.google.common.collect.RegularImmutableSortedSet:containsAll(java.util.Collection),104,154,"/**
* Compares the sorted elements of this and given collection.
* @param targets Collection to compare with
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,isAnnotationPresent,com.google.common.reflect.Parameter:isAnnotationPresent(java.lang.Class),72,75,"/**
* Checks if annotation of given type is present.
* @param annotationType class of annotation to check
* @return true if annotation exists, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builder,com.google.common.collect.ImmutableSet:builder(),433,435,"/**
* Creates a new instance of Builder with default settings.
* @return Builder instance ready for configuration.","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valuesBuilder,com.google.common.collect.ImmutableSetMultimap:valuesBuilder(java.util.Comparator),654,659,"/**
* Creates an immutable set builder with optional sorting.
* @param valueComparator comparator for sorted set, or null for unsorted
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIfNecessary,com.google.common.collect.ImmutableSet$Builder:copyIfNecessary(),503,508,"/**
 * Forces a mask operation by calling m1(), resetting forceCopy flag.
 * @param none
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(com.google.common.collect.Multimap),298,303,"/**
* Merges the given multimap into this builder.
* @param multimap Multimap to merge (key-value pairs are added)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,combine,com.google.common.collect.ImmutableListMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),305,310,"/**
* Merges another ImmutableMultimap into this builder.
* @param other the other multimap to merge
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,combine,com.google.common.collect.ImmutableSetMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),356,361,"/**
* Merges another ImmutableMultimap builder into this one.
* @param other the builder to merge from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(com.google.common.collect.Multimap),346,354,"/**
* Merges the given Multimap into this Builder.
* @param multimap Multimap to merge
* @return This Builder instance for method chaining
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator)",502,507,"/**
* Merges two iterators into one.
* @param a first iterator
* @param b second iterator
* @return merged iterator or null if both are null
*/","* Combines two iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator)",517,523,"/**
* Merges three sorted iterators into one.
* @param a first iterator
* @param b second iterator
* @param c third iterator
* @return merged iterator of type T
*/","* Combines three iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator)",534,544,"/**
* Combines four sorted iterators into a single iterator.
* @param a first iterator
* @param b second iterator
* @param c third iterator
* @param d fourth iterator
* @return merged iterator of type T
*/","* Combines four iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}, followed by the elements in {@code d}. The source iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribers,com.google.common.eventbus.SubscriberRegistry:getSubscribers(java.lang.Object),125,140,"/**
* Returns an iterator of subscribers for a given event.
* @param event Event object
* @return Iterator<Subscriber> or empty iterator if no subscribers found
*/","* Gets an iterator representing an immutable snapshot of all subscribers to the given event at
   * the time this method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList$ReverseImmutableList:contains(java.lang.Object),657,660,"/**
* Delegates object processing to forward list.
* @param object object to process (may be null)
* @return true if processed successfully, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,getDone,com.google.common.util.concurrent.ClosingFuture$Peeker:getDone(com.google.common.util.concurrent.ClosingFuture),1151,1157,"/**
* Returns the result of a future, potentially blocking until complete.
* @param closingFuture future to await
*/","* Returns the value of {@code closingFuture}.
     *
     * @throws ExecutionException if {@code closingFuture} is a failed step
     * @throws CancellationException if the {@code closingFuture}'s future was cancelled
     * @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to
     *     {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)}
     * @throws IllegalStateException if called outside of a call to {@link
     *     CombiningCallable#call(DeferredCloser, Peeker)} or {@link
     *     AsyncCombiningCallable#call(DeferredCloser, Peeker)}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap:put(java.lang.Object,java.lang.Object)",2423,2430,"/**
* Computes and caches a secondary result for the given key-value pair.
* @param key unique identifier
* @param value associated data
* @return cached V object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putIfAbsent,"com.google.common.collect.MapMakerInternalMap:putIfAbsent(java.lang.Object,java.lang.Object)",2432,2439,"/**
* Computes and applies a function mask for the given key-value pair.
* @param key unique identifier
* @param value associated data
* @return transformed value or null if computation fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",2468,2478,"/**
* Updates the map with new value and returns true if old value was present.
* @param key unique key identifier
* @param oldValue current value (null to indicate absence)
* @param newValue new value to replace old one
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object)",2480,2487,"/**
* Computes and stores a cached result for the given key-value pair.
* @param key unique identifier
* @param value associated data
* @return V object or null if not found/created
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object),2448,2456,"/**
* Computes and caches a value using M1 and M2 methods.
* @param key cache key
* @return cached value or null if key is null
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object,java.lang.Object)",2458,2466,"/**
* Computes and stores hash code for the given key.
* @param key object to compute hash code from
* @return true if successful, false otherwise (if null input)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,"com.google.common.collect.MapMakerInternalMap$Segment:get(java.lang.Object,int)",1439,1454,"/**
* Retrieves a value for the given key, performing necessary cleanup.
* @param key object to search
* @param hash hash code of the key
* @return associated value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,"com.google.common.collect.MapMakerInternalMap$Segment:containsKey(java.lang.Object,int)",1456,1467,"/**
* Checks if a key exists in the map and has a non-null value.
* @param key Object to search for
* @param hash hash code of the object (not used in this implementation)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap$Segment:containsValue(java.lang.Object),1473,1496,"/**
* Checks if the given value matches any entry in the map.
* @param value object to search for
*/","* This method is a convenience for testing. Code should call {@link
     * MapMakerInternalMap#containsValue} directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",940,956,"/**
* Updates or inserts a weak key value entry into the given segment.
* @param segment WeakKeyWeakValueSegment to update
* @param entry Entry to update or insert
* @param newNext New next entry in linked list (may be null)
* @return Updated or inserted WeakKeyWeakValueEntry, or null if removed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,put,"com.google.common.collect.MutableClassToInstanceMap:put(java.lang.Class,java.lang.Object)",153,158,"/**
* Calls superclass's m2 with provided parameters and returns result.
* @param key Class of type B to use for lookup
* @param value Value of type B to store or retrieve
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putAll,com.google.common.collect.MutableClassToInstanceMap:putAll(java.util.Map),160,167,"/**
* Recursively processes the input map and delegates to superclass.
* @param map a map of classes to objects
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardRemove,com.google.common.collect.ForwardingMap:standardRemove(java.lang.Object),160,171,"/**
* Retrieves a value from the map by matching a given key.
* @param key Object to search for in the map
* @return Value associated with the key, or null if not found
*/","* A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator}
   * method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming
   * that approach would not lead to an infinite loop.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardClear,com.google.common.collect.ForwardingMap:standardClear(),180,182,"/**
* Invokes m3 iterator on m2 result of m1 operation.
*/","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardIsEmpty,com.google.common.collect.ForwardingMap:standardIsEmpty(),264,266,"/**
* Evaluates a functional mask condition.
* @return true if m3 is false; otherwise, false
*/","* A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardHashCode,com.google.common.collect.ForwardingMap:standardHashCode(),286,288,"/**
* Calculates and returns the function mask value.
*/","* A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,entrySet,com.google.common.reflect.MutableTypeToInstanceMap:entrySet(),96,99,"/**
* Returns an unmodifiable set of entries mapping type tokens to values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map)",502,511,"/**
* Recursively computes map difference between two maps.
* @param left first map
* @param right second map
*/","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code
   * left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(),165,167,"/**
* Initializes an instance of EventBus with default configuration.
* @param name default event bus identifier (optional)","Creates a new EventBus named ""default"".",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOver,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOver(int,java.lang.Object)",702,712,"/**
* Reorders elements in the queue based on custom ordering.
* @param index current queue position
* @param x element to insert or replace
* @return new index of inserted/replaced element
*/","* Crosses an element over to the opposite heap by moving it one level down (or up if there are
     * no elements below it).
     *
     * <p>Returns the new position of the element.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHoleAt,com.google.common.collect.MinMaxPriorityQueue$Heap:fillHoleAt(int),721,728,"/**
* Recursively fetches and processes minimum grandchild index, updating queue value.
* @param index current index for processing
* @return minimum grandchild index or original index if none found
*/","* Fills the hole at {@code index} by moving in the least of its grandchildren to this position,
     * then recursively filling the new hole created.
     *
     * @return the position of the new hole (where the lowest grandchild moved from, that had no
     *     grandchild to replace it)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,writeReplace,com.google.common.collect.ImmutableCollection:writeReplace(),392,397,"/**
* Returns a serialized form of immutable mask values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.Maps$5:headSet(java.lang.Object),81,84,"/**
* Calls m1() and delegates to its m2() method with the provided element.
* @param toElement object to pass as parameter to m2() in m1()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.Maps$5:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
* Calls m1() and delegates execution of m2() with specified range.
* @param fromElement starting element for the query
* @param toElement ending element for the query
* @return SortedSet containing elements within the provided range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardContains,com.google.common.collect.ForwardingSortedSet:standardContains(java.lang.Object),109,120,"/**
* Checks if the given object is within a sorted set.
* @param object Object to search for
* @return true if found, false otherwise
*/","* A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardRemove,com.google.common.collect.ForwardingSortedSet:standardRemove(java.lang.Object),129,147,"/**
* Checks if the given object matches any element in this set.
* @param object Object to search for
*/","* A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardSubSet,"com.google.common.collect.ForwardingSortedSet:standardSubSet(java.lang.Object,java.lang.Object)",156,159,"/**
* Retrieves a sorted set of elements within a specified range.
* @param fromElement the start element (inclusive)
* @param toElement the end element (exclusive)
*/","* A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link
   * #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override
   * {@link #subSet(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.Maps$5:tailSet(java.lang.Object),97,100,"/**
* Calls m1() and delegates to its m2() method with provided fromElement.
* @param fromElement element to pass to m2()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.TreeBasedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of function masks.
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet),1582,1585,"/**
* Wraps the provided NavigableSet in a new instance. 
* @param navigableSet set to be wrapped
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addFirst,com.google.common.collect.Synchronized$SynchronizedDeque:addFirst(java.lang.Object),1911,1916,"/**
* Calls m2 on an instance of E, synchronizing access via mutex.
* @param e object to operate on
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addLast,com.google.common.collect.Synchronized$SynchronizedDeque:addLast(java.lang.Object),1918,1923,"/**
 * Calls nested method m2 on an object fetched by calling m1,
 * while synchronizing access to shared resources.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerFirst,com.google.common.collect.Synchronized$SynchronizedDeque:offerFirst(java.lang.Object),1925,1930,"/**
 * Calls the recursive function m2 on the result of m1, synchronizing access to shared resources. 
 * @param e input object for m2 method
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerLast,com.google.common.collect.Synchronized$SynchronizedDeque:offerLast(java.lang.Object),1932,1937,"/**
* Calls m2 on the result of m1, synchronizing access to shared resources. 
* @param e input object for m2 call
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirst,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirst(),1939,1944,"/**
* Recursively fetches and returns an object of type E.
* @return E object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLast,com.google.common.collect.Synchronized$SynchronizedDeque:removeLast(),1946,1951,"/**
* Recursively retrieves value of type E by executing m1().m2(), 
* ensuring thread safety via synchronization on mutex.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedDeque:pollFirst(),1953,1958,"/**
 * Recursively calls m1() and returns its result from m2(), 
 * synchronized to ensure thread safety.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedDeque:pollLast(),1960,1965,"/**
* Recursively fetches and returns an object of type E.
* @return E object or null if not found, wrapped in a nullable result
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getFirst,com.google.common.collect.Synchronized$SynchronizedDeque:getFirst(),1967,1972,"/**
* Recursively fetches M2 value by synchronizing on mutex and delegating to m1().",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getLast,com.google.common.collect.Synchronized$SynchronizedDeque:getLast(),1974,1979,"/**
* Recursively fetches and returns an object of type E.
* @return E object or null if not found, wrapped in a recursive call to m1()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekFirst,com.google.common.collect.Synchronized$SynchronizedDeque:peekFirst(),1981,1986,"/**
* Delegates to m1() and recursively calls its m2() method.
* @return result of m1().m2() or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekLast,com.google.common.collect.Synchronized$SynchronizedDeque:peekLast(),1988,1993,"/**
* Recursively fetches nested object 'E' by invoking 'm1()' and its own 'm2()' method.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirstOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirstOccurrence(java.lang.Object),1995,2000,"/**
* Calls m1() and delegates to its m2() method with provided object.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLastOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeLastOccurrence(java.lang.Object),2002,2007,"/**
* Recursively calls m2() on the result of m1(), synchronizing access. 
* @param o Object to pass to recursive call
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,push,com.google.common.collect.Synchronized$SynchronizedDeque:push(java.lang.Object),2009,2014,"/**
* Invokes m2 on the result of m1, synchronized on mutex.
* @param e object to pass to m2
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pop,com.google.common.collect.Synchronized$SynchronizedDeque:pop(),2016,2021,"/**
* Recursively calls m1(), which synchronizes on mutex, and returns its result.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedDeque:descendingIterator(),2023,2028,"/**
* Returns an iterator over elements in this collection, 
* synchronizing on mutex to ensure thread safety.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableSet:delegate(),1469,1472,"/**
* Returns a NavigableSet of elements using superclass implementation.
* @return A NavigableSet containing all elements.",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedSet:comparator(),318,323,"/**
* Returns a comparator instance by synchronizing on mutex and delegating to m1().
* @return Comparator instance or null if creation fails
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedSortedSet:subSet(java.lang.Object,java.lang.Object)",325,330,"/**
* Computes and returns a sorted set of elements within the specified range.
* @param fromElement start element
* @param toElement end element
* @return SortedSet containing elements in the given range
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:headSet(java.lang.Object),332,337,"/**
* Recursively fetches elements up to the specified target element.
* @param toElement target element for recursion
* @return a SortedSet of elements from m1() and recursively up to toElement
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:tailSet(java.lang.Object),339,344,"/**
* Recursively fetches and synchronizes a sorted set of elements.
* @param fromElement starting element for the recursion
* @return SortedSet of E objects
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,first,com.google.common.collect.Synchronized$SynchronizedSortedSet:first(),346,351,"/**
* Recursively calls m1 to retrieve m2 result.
* @return Result of type E from m1's m2 call
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,last,com.google.common.collect.Synchronized$SynchronizedSortedSet:last(),353,358,"/**
* Recursively executes m1() and returns its result.
* @return Result of m1()'s m2() execution or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingEntry(java.lang.Object),1614,1619,"/**
* Retrieves map entry associated with given key.
* @param key unique identifier for the entry to fetch
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingKey(java.lang.Object),1621,1626,"/**
* Delegates to underlying cache with synchronization.
* @param key unique identifier
* @return cached value or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingKeySet(),1630,1638,"/**
* Returns a synchronized NavigableSet of keys in descending order.
* @return NavigableSet<K> or cached if previously computed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:firstEntry(),1652,1657,"/**
* Retrieves and synchronizes entry from map m1.
* @return Entry object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorEntry(java.lang.Object),1659,1664,"/**
* Retrieves cached entry for given key and synchronizes access.
* @param key unique identifier to look up
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorKey(java.lang.Object),1666,1671,"/**
* Calls nested function m1() to retrieve an object, then calls its m2() method.
* @param key input parameter for m2() method in the returned object
* @return result of calling m2() on the object retrieved by m1()
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherEntry(java.lang.Object),1685,1690,"/**
* Retrieves entry from cache using provided key.
* @param key unique identifier for cached data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherKey(java.lang.Object),1692,1697,"/**
* Delegates call to m1() and executes its m2() method in a synchronized block. 
* @param key input parameter for m2() method
* @return result of m2() or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lastEntry(),1699,1704,"/**
* Recursively fetches and synchronizes map entries.
* @return map entry or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerEntry(java.lang.Object),1706,1711,"/**
* Retrieves map entry by key using a synchronized approach.
* @param key the unique key to search for
* @return Map.Entry object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerKey(java.lang.Object),1713,1718,"/**
* Calls M2 on the cached object returned by M1.
* @param key unique cache key
* @return result of M2 or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:navigableKeySet(),1727,1735,"/**
* Returns a synchronized NavigableSet of keys, initializing it lazily.
* @return NavigableSet of keys or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollFirstEntry(),1737,1742,"/**
* Retrieves and synchronizes entry from cache using m3().",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollLastEntry(),1744,1749,"/**
* Recursively fetches user profile by ID, synchronizing access to shared resources.
* @return UserProfile object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,removeAll,com.google.common.collect.SetMultimap:removeAll(java.lang.Object),73,75,"/**
* Retrieves a set of function masks associated with the given key.
* @param key unique identifier or null if not applicable
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:get(java.lang.Object),902,907,"/**
* Retrieves a sorted set of values associated with the given key.
* @param key unique identifier for which to fetch values
* @return SortedSet of V objects or an empty set if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:removeAll(java.lang.Object),909,914,"/**
* Calls M1's m2 method with given key while synchronizing on mutex.
* @param key object to search in the data structure
* @return sorted set of matching values or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",916,921,"/**
* Synchronized wrapper to invoke m2() on a shared instance.
* @param key unique identifier
* @param values collection of associated values
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,valueComparator,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:valueComparator(),923,928,"/**
* Returns a comparator instance by synchronizing and delegating to m1().",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,subMap,"com.google.common.collect.TreeBasedTable$TreeRow:subMap(java.lang.Object,java.lang.Object)",225,229,"/**
* Computes and returns a sorted map of values for the given key range.
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,headMap,com.google.common.collect.TreeBasedTable$TreeRow:headMap(java.lang.Object),231,235,"/**
* Computes and returns a sorted map of values associated with the given key.
* @param toKey unique identifier to fetch data for
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,tailMap,com.google.common.collect.TreeBasedTable$TreeRow:tailMap(java.lang.Object),237,241,"/**
* Creates a sorted map of values associated with keys in the specified range.
* @param fromKey starting key for the map
* @return SortedMap object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,containsKey,com.google.common.collect.TreeBasedTable$TreeRow:containsKey(java.lang.Object),296,299,"/**
* Combines results of local and superclass lookups.
* @param key object to search for (may be null)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,put,"com.google.common.collect.TreeBasedTable$TreeRow:put(java.lang.Object,java.lang.Object)",301,305,"/**
* Calls customized m4() implementation on child object and returns result.
* @param key custom key to process
* @param value associated value for processing
* @return processed V object or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rebalance,com.google.common.collect.TreeMultiset$AvlNode:rebalance(),950,970,"/**
* Recursively rebalances the AVL tree based on node values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,size,com.google.common.collect.TreeMultiset:size(),228,231,"/**
* Calculates functional mask value.
* @return integer value representing functional mask
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,distinctElements,com.google.common.collect.TreeMultiset:distinctElements(),233,236,"/**
 * Calculates the functional mask using m1 and m2 algorithms.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.StandardNetwork:incidentEdges(java.lang.Object),130,133,"/**
* Recursively computes and returns set of elements E from given node.
* @param node Node to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.StandardNetwork:adjacentNodes(java.lang.Object),143,146,"/**
* Recursively fetches and combines neighbor sets from a given node.
* @param node Node object to start traversal from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.StandardNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
* Retrieves connections between two network nodes.
* @param nodeU first node
* @param nodeV second node
* @return Set of edges connecting the nodes
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.StandardNetwork:inEdges(java.lang.Object),158,161,"/**
 * Recursively fetches all entities in the graph starting from the given node.
 * @param node starting node of the graph traversal
 * @return Set of E objects representing traversed entities
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.StandardNetwork:outEdges(java.lang.Object),163,166,"/**
* Computes E set from N node using recursive approach.
* @param node input graph node
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,predecessors,com.google.common.graph.StandardNetwork:predecessors(java.lang.Object),168,171,"/**
* Recursively fetches and combines child nodes.
* @param node Node object to process
* @return Set of N objects containing child data
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.StandardNetwork:successors(java.lang.Object),173,176,"/**
* Recursively fetches all nodes in the same tree as the input node.
* @param node starting node of the tree
* @return set of nodes in the same tree
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.StandardValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
* Recursively fetches and merges child nodes from the given node.
* @param node the starting node to process
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.StandardValueGraph:predecessors(java.lang.Object),108,111,"/**
* Recursively fetches and merges child nodes from the given node.
* @param node Node to start the traversal from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.StandardValueGraph:successors(java.lang.Object),113,116,"/**
* Recursively fetches neighbors of the given node.
* @param node Node object to start from
* @return Set of neighboring nodes
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.StandardValueGraph:incidentEdges(java.lang.Object),118,129,"/**
* Computes a set of endpoint pairs for the given node.
* @param node node identifier
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.StandardValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
* Computes the functional mask between two nodes.
* @param nodeU first node in comparison
* @param nodeV second node in comparison
* @return true if both nodes have the same properties, false otherwise
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.StandardValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
* Evaluates endpoint pair against function mask criteria.
* @param endpoints EndpointPair object with input and output endpoints
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
* Computes functional mask value between two nodes.
* @param nodeU first node
* @param nodeV second node
* @param defaultValue default mask value if not computed (optional)
* @return calculated mask value or null if not computed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
* Evaluates function mask using endpoint values and returns result or default value.
* @param endpoints pair of endpoint values
* @param defaultValue optional default value to return if not found
* @return V value or null if not found, or default value if specified
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,"com.google.common.hash.AbstractStreamingHasher:putBytes(byte[],int,int)",92,96,"/**
* Creates a Hasher instance from the provided byte array.
* @param bytes input byte array
* @param off offset into the array
* @param len length of data in the array
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,com.google.common.hash.AbstractStreamingHasher:putBytes(java.nio.ByteBuffer),98,108,"/**
* Creates a new Hasher instance from the provided ByteBuffer.
* @param readBuffer input buffer containing data to hash
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashBytes,"com.google.common.hash.FarmHashFingerprint64:hashBytes(byte[],int,int)",49,53,"/**
* Computes hash code using mask-based algorithm.
* @param input byte array to process
* @param off starting offset within the array
* @param len length of data to include in hash calculation
* @return resulting hash code value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashBytes,"com.google.common.hash.Fingerprint2011:hashBytes(byte[],int,int)",40,44,"/**
* Computes hash code for a byte array segment.
* @param input the byte array
* @param off offset into the array
* @param len length of the segment
* @return computed hash code
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashInt,com.google.common.hash.Murmur3_32HashFunction:hashInt(int),108,114,"/**
* Computes hash code using multi-round hashing function.
* @param input input value to be hashed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashLong,com.google.common.hash.Murmur3_32HashFunction:hashLong(long),116,128,"/**
* Computes hash code for input using FNV-1a hashing algorithm.
* @param input input value to be hashed
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashUnencodedChars,com.google.common.hash.Murmur3_32HashFunction:hashUnencodedChars(java.lang.CharSequence),130,149,"/**
* Calculates hash code for given CharSequence using FNV-1a algorithm.
* @param input input string to hash
* @return hash code value
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashString,"com.google.common.hash.Murmur3_32HashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)",151,220,"/**
* Calculates hash code for the given CharSequence using the specified charset.
* @param input input string to calculate hash code for
* @param charset charset to use for encoding and decoding
* @return 32-bit hash code as an integer
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashBytes,"com.google.common.hash.Murmur3_32HashFunction:hashBytes(byte[],int,int)",222,238,"/**
* Computes a hash code for the given byte array using the FUNC_MASK algorithm.
* @param input the byte array to hash
* @param off starting offset into the array
* @param len length of the array segment to hash
* @return 32-bit hash value as an integer
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double)",433,436,"/**
* Creates a Bloom filter with specified strategy.
* @param funnel input data funnel
* @param expectedInsertions estimated number of insertions
* @param fpp target false positive probability
*/","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToInt,"com.google.common.math.DoubleMath:roundToInt(double,java.math.RoundingMode)",127,135,"/**
* Computes a function value with rounding to the nearest integer.
* @param x input value
* @param mode RoundingMode used for rounding
* @return rounded integer result or MIN_INT if too small or MAX_INT if too large
*/","* Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code
   *           Integer.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToLong,"com.google.common.math.DoubleMath:roundToLong(double,java.math.RoundingMode)",154,162,"/**
* Calculates a long value from a double using rounding and masking.
* @param x input double value
* @param mode rounding mode to apply
*/","* Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Long.MIN_VALUE} or greater than {@code
   *           Long.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToBigInteger,"com.google.common.math.DoubleMath:roundToBigInteger(double,java.math.RoundingMode)",183,195,"/**
* Converts a double value to a BigInteger, handling rounding and exponentiation.
* @param x input double value
* @param mode RoundingMode to apply
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,insertInHashTable,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:insertInHashTable(java.lang.Object),760,780,"/**
* Finds or inserts a SetBuilderImpl instance for the given element.
* @param e the element to find or insert
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,review,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:review(),787,799,"/**
* Calculates and applies optimal hash table configuration.
* @return SetBuilderImpl instance with updated configuration
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,combine,com.google.common.collect.TopKSelector:combine(com.google.common.collect.TopKSelector),242,248,"/**
* Merges another TopKSelector instance into this one.
* @param other TopKSelector to merge from
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.util.Iterator),269,273,"/**
* Iterates over input iterator, applying mask operation to each element.
* @param elements input iterator of type T
*/","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}. The iterator is
   * consumed after this operation completes.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer
   * {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base16Encoding:<init>(java.lang.String,java.lang.String)",954,956,"/**
* Initializes a new Base16 encoding with the specified name and alphabet characters.
* @param name unique identifier for the encoding
* @param alphabetChars string containing hexadecimal digits (0-9, A-F)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",999,1001,"/**
* Initializes new Base64 encoding instance with custom alphabet.
* @param name human-readable name of the encoding scheme
* @param alphabetChars characters used in the encoding scheme
* @param paddingChar optional character to use for padding (null if not applicable)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",619,621,"/**
* Initializes standard base encoding with specified alphabet and padding character.
* @param name encoding scheme name
* @param alphabetChars characters in the alphabet
* @param paddingChar optional padding character (null for no padding)
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$Alphabet:upperCase(),564,575,"/**
* Returns an uppercase alphabet instance, ignoring case if enabled.
* @return Uppercase Alphabet object or this instance if already uppercase
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$Alphabet:lowerCase(),577,588,"/**
* Converts alphabet to lowercase.
* @return Lowercase alphabet or this instance if already lowercase
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:ignoreCase(),907,915,"/**
* Returns the BaseEncoding instance to use for encoding.
* @return BaseEncoding instance or null if not initialized
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,com.google.common.collect.TopKSelector:least(int),69,71,"/**
* Creates a new TopKSelector instance with the specified top-K value.
* @param k the number of top elements to select
*/","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,com.google.common.collect.TopKSelector:greatest(int),91,93,"/**
* Creates a new TopKSelector instance with the specified K value.
* @param k the number of top elements to select
*/","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,isPrime,com.google.common.math.IntMath:isPrime(int),725,728,"/**
* Converts an int to a 32-bit signed long using Math library. 
* @param n input integer value","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,binomial,"com.google.common.math.BigIntegerMath:binomial(int,int)",465,511,"/**
* Computes and returns the m3 value for given n and k.
* @param n input parameter
* @param k input parameter
*/","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, that is, {@code n! / (k! (n - k)!)}.
   *
   * <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.lang.Iterable),103,107,"/**
* Calculates statistical summary of an iterable of numbers.
* @param values collection of numerical values
* @return calculated statistics or null if empty
*/","* Returns statistics over a dataset containing the given values.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.Iterator),116,120,"/**
* Calculates statistics (Stats object) from an iterator of numbers.
* @param values iterator of numeric values to process
* @return Stats object containing calculated statistics or null if empty
*/","* Returns statistics over a dataset containing the given values. The iterator will be completely
   * consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,addAll,com.google.common.math.PairedStatsAccumulator:addAll(com.google.common.math.PairedStats),73,92,"/**
* Updates paired statistics and computes sum of products of deltas.
* @param values PairedStats object containing required data
*/","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.DoubleStream),166,170,"/**
* Aggregates DoubleStream into Stats object.
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.IntStream),182,186,"/**
* Accumulates statistics from an IntStream of values.
* @param values stream of integers to process
* @return aggregated Stats object
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.LongStream),199,203,"/**
* Accumulates statistics from an iterable of Long values.
* @param values stream of numbers to process
* @return aggregated Stats object
*/","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the
   * values using {@link #toStats()} instead.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.DoubleStream),142,144,"/**
* Processes DoubleStream values using StatsAccumulator.
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.IntStream),152,154,"/**
* Processes stream of values using StatsAccumulator.
* @param values IntStream to process
*/","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.LongStream),163,165,"/**
* Accumulates statistics using provided aggregation functions.","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectAllInPlace,"com.google.common.math.Quantiles:selectAllInPlace(int[],int,int,double[],int,int)",627,653,"/**
* Recursively processes required values in the specified range.
* @param allRequired sorted array of required values
* @param requiredFrom starting index for current recursion level
* @param requiredTo ending index for current recursion level
* @param array target array to modify
* @param from starting index for processing
* @param to ending index for processing","* Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code
   * allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These
   * indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.lang.Iterable),164,169,"/**
* Recursively processes an iterable of doubles, delegating to a collection-specific method or a chain of map and reduce operations. 
* @param values input iterable of double values
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.lang.Iterable),161,166,"/**
* Recursively transforms an iterable of integers into an immutable integer array.
* @param values input iterable of integers
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.lang.Iterable),163,168,"/**
* Recursively processes iterable of Long values, using optimized methods for collections.
* @param values iterable of Long values
*/","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(int),262,264,"/**
* Converts unsigned long to string in specified base.
* @param radix target base (e.g. 2 for binary, 10 for decimal)
*/","* Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,com.google.common.primitives.UnsignedLongs:toString(long),444,446,"/**
* Wraps the call to m1 with default max iterations (10).","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,equals,com.google.common.reflect.Parameter:equals(java.lang.Object),139,146,"/**
* Checks if the given object matches the current parameter's state.
* @param obj Object to compare with this parameter
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,java.time.Duration)",658,669,"/**
* Executes a collection of tasks with optional timing and timeout.
* @param executorService ListeningExecutorService instance
* @param tasks Collection of Callable tasks to execute
* @param timed Whether to execute with timing
* @param timeout Timeout duration in nanoseconds
* @return Result of the first task that completes or null if all fail
*/","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,"com.google.common.util.concurrent.Futures$FutureCombiner:run(java.lang.Runnable,java.util.concurrent.Executor)",765,775,"/**
* Executes a Runnable using the provided Executor and returns a ListenableFuture.
* @param combiner Runnable to execute
* @param executor Execution context
*/","* Creates the {@link ListenableFuture} which will return the result of running {@code combiner}
     * when all Futures complete. {@code combiner} will run using {@code executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>Canceling this Future will attempt to cancel all the component futures.
     *
     * @since 23.6
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even though the future never produces a value other than {@code null},
     *     you should typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,decrementCountAndMaybeComplete,com.google.common.util.concurrent.AggregateFuture:decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection),292,300,"/**
* Collects and handles futures when all are completed.
* @param futuresIfNeedToCollectAtCompletion collection of input Future objects
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLocks,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List)",608,612,"/**
* Applies function mask to each lock graph node.
* @param policy Policy object
* @param acquiredLocks list of LockGraphNode objects
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,from,com.google.common.util.concurrent.ClosingFuture:from(com.google.common.util.concurrent.ListenableFuture),450,452,"/**
* Wraps a ListenableFuture with a ClosingFuture.
* @param future ListenableFuture to be wrapped
*/","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V}
   * implements {@link Closeable}. In order to start a pipeline with a value that will be closed
   * when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,derive,com.google.common.util.concurrent.ClosingFuture:derive(com.google.common.util.concurrent.FluentFuture),1115,1119,"/**
* Wraps a FluentFuture with a ClosingFuture, executing closeables on completion.
* @param future input FluentFuture
* @return wrapped ClosingFuture or null if not found
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPoll,com.google.common.collect.ForwardingQueue:standardPoll(),121,127,"/**
* Returns a value of type E or null if NoSuchElementException is thrown.","* A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link
   * #remove}, you may wish to override {@link #poll} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPeek,com.google.common.collect.ForwardingQueue:standardPeek(),107,113,"/**
* Returns user profile by ID or null if not found.
* @param userId unique user identifier
* @return UserProfile object or null if not found
*/","* A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link
   * #element}, you may wish to override {@link #peek} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submit,"com.google.common.util.concurrent.ExecutionSequencer:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",149,166,"/**
* Executes a callable task asynchronously using the provided executor.
* @param callable Callable task to execute
* @param executor Executor service for asynchronous execution
* @return ListenableFuture object representing the result of the task
*/","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to a callable that has begun to
   * execute, but if the output future is cancelled before {@link Callable#call()} is invoked,
   * {@link Callable#call()} will not be invoked.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class)",44,49,"/**
* Wraps a Future in a new exception-throwing call.
* @param future the original Future to wrap
* @param exceptionClass the class of exceptions to throw
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",1324,1332,"/**
* Retrieves the result of a Future with checked exceptions.
* @param future asynchronous computation
* @param exceptionClass class of potential exceptions
* @param timeout maximum wait time in specified TimeUnit
* @param unit time unit for timeout value
* @return result value or throws an exception if failed","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}) and calling the constructor via
   * reflection. If the exception did not already have a cause, one is set by calling {@link
   * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code
   * IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get} and with different parameter order)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,validateClass,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:validateClass(java.lang.Class),159,183,"/**
* Updates the set of known good exceptions with a new class.
* @param exceptionClass Class of the exception to add
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStopped,com.google.common.util.concurrent.AbstractService:notifyStopped(),436,456,"/**
* Updates the service state and notifies listeners of termination.
* @throws IllegalStateException if service is not in a terminating state
*/","* Implementing classes should invoke this method once their service has stopped. It will cause
   * the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link
   * State#TERMINATED}.
   *
   * @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link
   *     State#STARTING}, or {@link State#RUNNING}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyFailed,com.google.common.util.concurrent.AbstractService:notifyFailed(java.lang.Throwable),463,487,"/**
* Handles function masking due to an exception.
* @param cause the underlying Throwable cause
*/","* Invoke this method to transition the service to the {@link State#FAILED}. The service will
   * <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically
   * or otherwise cannot be started nor stopped.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,tryStartTiming,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:tryStartTiming(com.google.common.util.concurrent.Service),539,549,"/**
* Records service execution time and monitors its lifecycle.
* @param service the Service instance to be monitored
*/","* Attempts to start the timer immediately prior to the service being started via {@link
     * Service#startAsync()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,transitionService,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State)",673,726,"/**
* Transitions a service from one state to another.
* @param service Service instance
* @param from Initial state
* @param to Target state
*/","* Updates the state with the given service transition.
     *
     * <p>This method performs the main logic of ServiceManager in the following steps.
     *
     * <ol>
     *   <li>Update the {@link #servicesByState()}
     *   <li>Update the {@link #startupTimers}
     *   <li>Based on the new state queue listeners to run
     *   <li>Run the listeners (outside of the lock)
     * </ol>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard),472,491,"/**
* Waits for guard condition to be met or times out.
* @param guard Guard object to monitor
*/","* Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard),823,830,"/**
* Executes mask function on the given Guard object.
* @param guard Guard object to execute mask function on
*/","* Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called
   * only by a thread currently occupying this monitor.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),570,589,"/**
* Releases monitor and performs guarded action.
* @param guard object containing monitor and condition
*/",Enters this monitor when the guard is satisfied. Blocks indefinitely.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),870,877,"/**
* Updates functional mask for the given Guard.
* @param guard Guard object to update
*/","* Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread
   * currently occupying this monitor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",514,567,"/**
* Checks whether a guard's condition is met within the specified time frame.
* @param guard Guard object to monitor
* @param time timeout duration in specified unit
* @param unit TimeUnit (e.g. seconds, milliseconds)
* @return true if condition satisfied, false otherwise
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",608,667,"/**
* Waits for a Guard condition to be satisfied or a specified timeout.
* @param guard the Guard object to monitor
* @param time the timeout duration
* @param unit the TimeUnit of the timeout
* @return true if the condition is satisfied, false otherwise
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",851,864,"/**
* Waits for the guard to be in a valid state or times out.
* @param guard Guard object
* @param time Timeout duration
* @param unit TimeUnit (e.g. seconds, milliseconds)
* @return True if the guard is valid, false otherwise
*/","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",896,926,"/**
* Waits on guard with optional timeout.
* @param guard monitor to wait on
* @param time timeout duration
* @param unit TimeUnit for timeout duration
* @return true if timed out or signaled, false otherwise
*/","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",289,295,"/**
* Executes asynchronous computation with a specified timeout.
* @param timeout maximum duration to wait
* @param unit time unit for the timeout
* @param scheduledExecutor executor service for scheduling
* @return Future object representing the result or an exception
*/","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",384,389,"/**
* Wraps a ListenableFuture with an additional timeout.
* @param delegate the original future to wrap
* @param time timeout duration
* @param scheduledExecutor executor service for scheduling
* @return wrapped ListenableFuture with timeout
*/","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,firstMatch,com.google.common.collect.FluentIterable:firstMatch(com.google.common.base.Predicate),464,467,"/**
* Filters Iterable of elements using provided predicate.
*@param predicate function to filter elements
*@return Optional containing filtered element or empty if none found
*/","* Returns an {@link Optional} containing the first element in this fluent iterable that satisfies
   * the given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in this fluent iterable, a {@link NullPointerException} will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedInternal,com.google.common.base.CharMatcher:precomputedInternal(),417,442,"/**
* Creates a CharMatcher that matches any character except those in the specified set.
* @return CharMatcher instance
*/","* This is the actual implementation of {@link #precomputed}, but we bounce calls through a method
   * on {@link Platform} so that we can have different behavior in GWT.
   *
   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the
   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables
   * for matchers that only match a few characters, and so on. In the worst-case scenario, it
   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a
   * matcher which is faster to query than the original.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class)",177,186,"/**
* Wraps a Throwable into a RuntimeException with multiple exception types.
* @param e original Throwable to be wrapped
* @throws IOException if thrown from method m2
* @throws X1 if thrown from method m2 (declaredType1)
* @throws X2 if thrown from method m2 (declaredType2)
*/","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the
   * given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>
   * Be sure to declare all of the checked exception types your try block can throw when calling an
   * overload of this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X1 when the given throwable is of the declared type X1
   * @throws X2 when the given throwable is of the declared type X2",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,write,com.google.common.io.ByteSink:write(byte[]),98,104,"/**
* Writes byte array to output stream using helper methods.
*@param bytes input data
*/","* Writes all the given bytes to this sink.
   *
   * @throws IOException if an I/O occurs while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,writeFrom,com.google.common.io.ByteSink:writeFrom(java.io.InputStream),113,120,"/**
* Processes InputStream to produce a unique identifier.
* @param input InputStream containing data to process
*/","* Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code
   * input}.
   *
   * @return the number of bytes written
   * @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sliceStream,com.google.common.io.ByteSource$SlicedByteSource:sliceStream(java.io.InputStream),505,527,"/**
* Skips or returns a masked InputStream.
* @param in input stream to mask
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource:isEmpty(),151,165,"/**
* Checks if the input stream has reached its end.
* @throws IOException on read error
*/","* Returns whether the source has zero bytes. The default implementation first checks {@link
   * #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero.
   * If the size is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes
   * are actually available for reading. (For example, some special files may return a size of 0
   * despite actually having content when read.) This means that a source may return {@code true}
   * from {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource:size(),204,229,"/**
* Fetches and parses file size, returning the known value or reading from a file if unknown.
* @throws IOException on read errors
*/","* Returns the size of this source in bytes, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.
   *
   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link
   * InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number
   * of bytes that were read.
   *
   * <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of bytes
   * than would be returned by reading all of the bytes (for example, some special files may return
   * a size of 0 despite actually having content when read).
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the size of this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(java.io.OutputStream),249,262,"/**
* Writes data to OutputStream and returns a unique identifier.
* @param output target output stream
*/","* Copies the contents of this byte source to the given {@code OutputStream}. Does not close
   * {@code output}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     output}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(com.google.common.io.ByteSink),271,285,"/**
* Writes binary data to a sink and returns a mask value.
* @param sink output stream for writing binary data
*/","* Copies the contents of this byte source to the given {@code ByteSink}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(),292,305,"/**
* Retrieves byte array by fetching and processing stream data.
* @throws IOException if input/output operations fail
*/","* Reads the full contents of this byte source as a byte array.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(com.google.common.io.ByteProcessor),316,330,"/**
* Reads and processes bytes from an input stream using the provided ByteProcessor.
* @param processor ByteProcessor instance for data processing
* @return processed result of type T, or null if not found
*/","* Reads the contents of this byte source using the given {@code processor} to process bytes as
   * they are read. Stops when all bytes have been read or the consumer returns {@code false}.
   * Returns the result produced by the processor.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,contentEquals,com.google.common.io.ByteSource:contentEquals(com.google.common.io.ByteSource),349,361,"/**
* Compares byte sources for equality.
* @param other the ByteSource to compare
* @return true if equal, false otherwise
*/","* Checks that the contents of this byte source are equal to the contents of the given byte
   * source.
   *
   * @throws IOException if an I/O error occurs while reading from this source or {@code other}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,write,com.google.common.io.CharSink:write(java.lang.CharSequence),94,100,"/**
* Writes CharSequence to output stream using two-phase processing.
* @param charSequence input sequence to process
*/","* Writes the given character sequence to this sink.
   *
   * @throws IOException if an I/O error while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeFrom,com.google.common.io.CharSink:writeFrom(java.lang.Readable),167,174,"/**
* Fetches and writes function mask data from a Readable source.
* @param readable input data stream
* @return long value of the function mask or throws IOException if failed.","* Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink.
   * Does not close {@code readable} if it is {@code Closeable}.
   *
   * @return the number of characters written
   * @throws IOException if an I/O error occurs while reading from {@code readable} or writing to
   *     this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource$StringCharSource:copyTo(com.google.common.io.CharSink),657,670,"/**
* Generates a function mask value.
* @param sink CharSink object for writing
* @return long function mask value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource:length(),213,228,"/**
* Fetches and returns the function mask length, or throws an exception if unknown.
*/","* Returns the length of this source in chars, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.
   *
   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, {@link
   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that
   * were skipped.
   *
   * <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of chars
   * than would be returned by reading all of the chars.
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of chars if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the length of this source
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(java.lang.Appendable),247,260,"/**
* Reads and appends binary data from a resource to the provided Appendable.
* @param appendable target output stream
* @return a unique identifier for the appended data
*/","* Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).
   * Does not close {@code appendable} if it is {@code Closeable}.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     appendable}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(com.google.common.io.CharSink),269,283,"/**
* Reads and writes character streams to/from a sink.
* @param sink destination character stream
*/","* Copies the contents of this source to the given sink.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource:readFirstLine(),312,322,"/**
* Retrieves the mask value from a file.
* @return String representation of the mask or null on failure
*/","* Reads the first line of this source as a string. Returns {@code null} if this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(com.google.common.io.LineProcessor),366,380,"/**
* Reads and processes a file using the given LineProcessor.
* @param processor line processing callback
* @return processed result or null if an error occurs
*/","* Reads lines of text from this source, processing each line as it is read using the given {@link
   * LineProcessor processor}. Stops when all lines have been processed or the processor returns
   * {@code false} and returns the result produced by the processor.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource:isEmpty(),416,430,"/**
* Checks if the input stream has reached EOF.
* @throws IOException on I/O errors
*/","* Returns whether the source has zero chars. The default implementation first checks {@link
   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be
   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that
   * chars are actually available for reading. This means that a source may return {@code true} from
   * {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,read,com.google.common.io.Files$FileByteSource:read(),151,162,"/**
* Loads byte array from file using Closer utility.
* @throws IOException if file access fails
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,mapInternal,"com.google.common.io.Files:mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)",696,712,"/**
* Creates a mapped byte buffer from the given file.
* @param file source file
* @param mode file access mode
* @param size buffer size or -1 for entire file
* @return MappedByteBuffer object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors$Application:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",263,283,"/**
* Configures a shutdown hook with delayed execution and timeout.
* @param service ExecutorService to configure
* @param terminationTimeout timeout duration in specified unit
* @param timeUnit TimeUnit for timeout duration
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expand,com.google.common.cache.LocalCache$Segment:expand(),2865,2932,"/**
* Rehashes the map to a larger capacity when necessary.
* @GuardedBy(""this"")
*/",Expands the table if possible.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntryFromChain,"com.google.common.cache.LocalCache$Segment:removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",3261,3277,"/**
* Rebuilds the reference entry linked list by removing entries not masked.
* @param first head of original list
* @return new head of filtered list or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate)",1980,1996,"/**
* Filters a multimap based on the provided predicate.
* @param unfiltered original multimap
* @param keyPredicate predicate to filter keys by
* @return filtered multimap or null if all entries are removed
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,checkHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:checkHealthy(),759,771,"/**
* Verifies system health by checking running services against expected count.
* @throws IllegalStateException if services are not running as expected
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2138,2142,"/**
* Filters a multimap based on a predicate, returning entries where values match.
* @param unfiltered original multimap
* @param valuePredicate filter criteria for values
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2169,2179,"/**
* Filters a multimap based on a predicate.
* @param unfiltered input multimap
* @param entryPredicate filtering condition for entries
* @return filtered multimap or null if empty
*/","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,createColumnKeyIterator,com.google.common.collect.TreeBasedTable:createColumnKeyIterator(),309,338,"/**
* Iterates over a merged collection of unique elements.
* @return Iterator of unique elements, or empty iterator if none found
*/",Overridden column iterator to return columns values in globally sorted order.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:remove(java.lang.Object),198,222,"/**
* Filters collection to include only values matching the given key.
* @param key Object to match against, or null for no filtering
* @return Filtered collection of V objects, or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,com.google.common.collect.CompoundOrdering:<init>(java.lang.Iterable),38,42,"/**
* Initializes compound ordering with a collection of comparators.
* @param comparators iterable of comparators to combine
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.lang.Iterable),556,573,"/**
* Creates an ImmutableBiMap from the given iterable of key-value entries.
* @param entries iterable of key-value pairs to include in the map
* @return ImmutableBiMap containing all provided entries or a default map if empty
*/","* Returns an immutable bimap containing the given entries. The returned bimap iterates over
   * entries in the same order as the original iterable.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.lang.Iterable),713,731,"/**
* Creates an immutable map from a collection of key-value entries.
* @param entries iterable of entries to be mapped
*/","* Returns an immutable map containing the specified entries. The returned map iterates over
   * entries in the same order as the original iterable.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @throws IllegalArgumentException if two entries have the same key
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Class)",287,291,"/**
* Copies elements from an iterable to an array of specified type.
* @param iterable input iterable
* @param type target class type
* @return array of copied objects or null if not applicable
*/","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.lang.Iterable)",296,311,"/**
* Creates an ImmutableSortedSet from the given elements and comparator.
* @param comparator Comparator to order elements
* @param elements Iterable of elements to include in the set
* @return ImmutableSortedSet containing all elements or null if not found
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compare()}, only the
   * first one specified is included. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,sortedCopy,com.google.common.collect.Ordering:sortedCopy(java.lang.Iterable),862,867,"/**
* Processes iterable elements with a custom mask function.
* @param elements iterable of elements to process
* @return List of processed elements
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$OrderedPermutationCollection:iterator(),485,488,"/**
* Returns an iterator over all permutations of input list elements.
* @return Iterator over ordered permutations of E objects.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",237,246,"/**
* Searches list for matching elements based on given key and comparator.
* @param list list to search
* @param keyFunction function to extract key from elements
* @param key target key value
* @param keyComparator comparator for key values
* @param presentBehavior behavior when key is present in element
* @param absentBehavior behavior when key is not present in element
* @return result of secondary search operation
*/","* Binary searches the list for the specified key, using the specified key function.
   *
   * <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior,
   * KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list,
   * keyFunction)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ListMultimap.java,removeAll,com.google.common.collect.ListMultimap:removeAll(java.lang.Object),61,63,"/**
* Retrieves a list of values associated with a given key.
* @param key the key to look up (may be null)
*/","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in
   * the {@link Multimap} interface.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:remove(java.lang.Object,java.lang.Object)",1582,1586,"/**
* Recursively calls m1 and its own m2 with transformed key.
* @param key nullable object to transform and pass as new key
* @param value nullable object to pass as new value in recursive call
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,keySet,com.google.common.collect.AbstractNavigableMap:keySet(),145,148,"/**
* Returns a set of keys representing function mask values.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$DescendingMap:keySet(),4407,4410,"/**
* Returns the set of key masks. 
* @return Set of key values or an empty set if none exist",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingMap(),2290,2293,"/**
* Transforms and returns a navigable map of K to V2.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object,boolean)",2315,2318,"/**
* Transforms map from m1 using transformer and returns a new navigable map.
* @param toKey key to search for in the transformed map
* @param inclusive whether to include the specified key in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",2360,2368,"/**
* Retrieves a key-value range from the underlying map.
* @param fromKey starting key
* @param fromInclusive whether start key is inclusive
* @param toKey ending key
* @param toInclusive whether end key is inclusive
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object,boolean)",2380,2383,"/**
* Retrieves a navigable map subset for the given key range.
* @param fromKey starting key
* @param inclusive whether to include the end key
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.NavigableMap,com.google.common.base.Function)",1903,1910,"/**
* Transforms a navigable map by applying a function to its values.
*@param fromMap original map
*@param function transformation function
*@return new map with transformed values
*/","* Returns a view of a navigable map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Integer> map = Maps.newTreeMap();
   * map.put(""a"", 4);
   * map.put(""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * NavigableMap<String, Double> transformed =
   *      Maps.transformNavigableValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowMap(),656,660,"/**
* Computes and returns a sorted map of results from m1's m2() and Maps.m3().
* @return A SortedMap with unmodifiable maps as values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,put,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",141,150,"/**
* Updates or inserts a value in the table at specified row and column.
* @param row table row index
* @param column table column index
* @param value new value to be inserted or updated
* @param merger binary operator for merging existing and new values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeMapping,"com.google.common.collect.StandardTable:removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)",198,205,"/**
* Checks and updates data based on the provided row, column, and value.
* @param rowKey unique row identifier
* @param columnKey unique column identifier
* @param value new data value
* @return true if update is successful, false otherwise
*/","Remove a row key / column key / value mapping, if present.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:remove(java.lang.Object),941,953,"/**
* Checks if the provided object matches a specific mask condition.
* @param obj Object to check
* @return True if the object matches, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,computeToString,com.google.common.net.MediaType:computeToString(),1236,1250,"/**
* Constructs a function mask string from type, subtype, and parameters.
* @return A formatted string representing the function mask
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,"com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap,java.lang.Object)",1593,1597,"/**
* Creates a synchronized navigable map from the given map and mutex.
* @param navigableMap input map
* @param mutex synchronization lock
* @return synchronized NavigableMap instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:headMap(java.lang.Object),1308,1313,"/**
* Recursively fetches and returns user profile by ID.
* @param toKey unique user identifier
* @return UserProfile object or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedSortedMap:subMap(java.lang.Object,java.lang.Object)",1322,1327,"/**
* Retrieves a sorted map range between two keys.
* @param fromKey starting key
* @param toKey ending key
* @return SortedMap containing the requested range or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:tailMap(java.lang.Object),1329,1334,"/**
* Computes and returns a sorted map by synchronizing access to shared data.
* @param fromKey starting key for the computation
* @return SortedMap object or null if computation fails
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedListMultimap,com.google.common.collect.Multimaps:synchronizedListMultimap(com.google.common.collect.ListMultimap),990,994,"/**
* Returns a synchronized version of the input multimap.
*/","* Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSetMultimap,"com.google.common.collect.Synchronized:sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object)",881,888,"/**
* Wraps a SortedSetMultimap with synchronization for thread safety.
* @param multimap input map to synchronize
* @param mutex lock object or null for default locking
* @return synchronized SortedSetMultimap instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSetMultimap,com.google.common.collect.Multimaps:synchronizedSetMultimap(com.google.common.collect.SetMultimap),906,910,"/**
* Returns a synchronized version of the provided multimap.
* @param multimap input multimap to synchronize
*/","* Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,com.google.common.graph.StandardMutableGraph:removeEdge(com.google.common.graph.EndpointPair),70,74,"/**
* Recursively resolves endpoint pair.
* @param endpoints pair of endpoints to resolve
* @return true if resolved successfully, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.ImmutableNetwork:incidentNodes(java.lang.Object),135,141,"/**
* Creates an endpoint pair by processing the input edge.
* @param edge Edge object to process
* @return EndpointPair object containing processed endpoints
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toString,com.google.common.io.CharStreams:toString(java.lang.Readable),162,164,"/**
* Calls M1 to process readable object and returns result of its M2 method.
* @param r Readable object to be processed
*/","* Reads all characters from a {@link Readable} object into a {@link String}. Does not close the
   * {@code Readable}.
   *
   * @param r the object to read from
   * @return a string containing all the characters
   * @throws IOException if an I/O error occurs",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catching,"com.google.common.util.concurrent.FluentFuture:catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",190,195,"/**
* Wraps the callback method with a fluent future.
* @param exceptionType type of exception to catch
* @param fallback function to execute if an exception occurs
* @param executor thread pool executor
* @return FluentFuture containing result or exception
*/","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the
   * primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an
   * exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catching(FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:cancel(boolean),122,126,"/**
* Calls superclass's interrupt handling with optional flag.
* @param mayInterruptIfRunning whether to interrupt running task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,cancel,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:cancel(boolean),954,970,"/**
* Calls the superclass method and, if successful, executes a follow-up operation.
* @param interruptIfRunning flag to interrupt ongoing operations
* @return true if the superclass method succeeds, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordInputCompletion,"com.google.common.util.concurrent.Futures$InCompletionOrderState:recordInputCompletion(com.google.common.collect.ImmutableList,int)",1019,1040,"/**
* Iterates through future delegates to find a matching input future.
* @param delegates list of AbstractFuture objects
* @param inputFutureIndex index of the input future to match
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadFuture,"com.google.common.cache.LocalCache$LoadingValueReference:loadFuture(java.lang.Object,com.google.common.cache.CacheLoader)",3547,3575,"/**
* Fetches cached or computed value for key, potentially updating cache.
* @param key unique key identifier
* @param loader CacheLoader to compute new value if not found
* @return ListenableFuture containing the fetched value or null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transform,"com.google.common.util.concurrent.FluentFuture:transform(com.google.common.base.Function,java.util.concurrent.Executor)",373,376,"/**
* Wraps a Function in a FluentFuture using the specified Executor.
* @param function function to be executed
* @param executor executor to use for execution
*/","* Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If
   * this input {@code Future} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<List<Row>> rowsFuture =
   *     queryFuture.transform(QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and
   * {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A Function to transform the results of this future to the results of the
   *     returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph$1:incidentEdgeOrder(),101,104,"/**
* Returns the element order mask with a single bit set. 
* @return ElementOrder object representing a single bit position",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,directed,com.google.common.graph.GraphBuilder:directed(),82,84,"/**
* Creates a graph builder with mask enabled.
* @return GraphBuilder instance with mask property set to true
*/",Returns a {@link GraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,undirected,com.google.common.graph.GraphBuilder:undirected(),87,89,"/**
* Creates a GraphBuilder instance with false mask.
* @return GraphBuilder instance with mask set to false
*/",Returns a {@link GraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,from,com.google.common.graph.GraphBuilder:from(com.google.common.graph.Graph),98,103,"/**
* Builds a GraphBuilder instance from the given graph, applying masks.
* @param graph input graph with masked values
*/","* Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Graph} interface,
   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},
   * are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,copy,com.google.common.graph.GraphBuilder:copy(),185,192,"/**
* Creates a new GraphBuilder instance with the same properties.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,directed,com.google.common.graph.NetworkBuilder:directed(),87,89,"/**
* Returns a NetworkBuilder instance with mask enabled.
*/",Returns a {@link NetworkBuilder} for building directed networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,undirected,com.google.common.graph.NetworkBuilder:undirected(),92,94,"/**
* Creates a NetworkBuilder instance with masking disabled. 
* @return NetworkBuilder instance with masking set to false
*/",Returns a {@link NetworkBuilder} for building undirected networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,from,com.google.common.graph.NetworkBuilder:from(com.google.common.graph.Network),104,110,"/**
* Creates a NetworkBuilder instance with function masks from the given network.
* @param network input network to derive masks from
* @return NetworkBuilder instance with derived masks
*/","* Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code
   * network}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Network} interface,
   * such as {@link Network#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,directed,com.google.common.graph.ValueGraphBuilder:directed(),84,86,"/**
* Returns a ValueGraphBuilder instance with masked functionality enabled.
*/",Returns a {@link ValueGraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,undirected,com.google.common.graph.ValueGraphBuilder:undirected(),89,91,"/**
* Returns a ValueGraphBuilder instance with mask set to false.",Returns a {@link ValueGraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,from,com.google.common.graph.ValueGraphBuilder:from(com.google.common.graph.ValueGraph),101,106,"/**
* Creates a ValueGraphBuilder instance with masked functionality.
* @param graph original ValueGraph instance
*/","* Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code
   * graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link ValueGraph}
   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,copy,com.google.common.graph.ValueGraphBuilder:copy(),193,200,"/**
* Creates a copy of the ValueGraphBuilder with specified parameters.
* @return cloned ValueGraphBuilder instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",259,261,"/**
* Invokes listener and executor operations on state.
* @param listener callback listener to invoke
* @param executor executor to execute tasks
*/","* Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given
   * executor. The listener will not have previous state changes replayed, so it is suggested that
   * listeners are added before any of the managed services are {@linkplain Service#startAsync
   * started}.
   *
   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not
   * across calls to multiple listeners. Specifically, a given listener will have its callbacks
   * invoked in the same order as the underlying service enters those states. Additionally, at most
   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks
   * may execute concurrently, and listeners may execute in an order different from the one in which
   * they were registered.
   *
   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown
   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and
   * logged.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.
   *
   * @param listener the listener to run when the manager changes state
   * @param executor the executor in which the listeners callback methods will be run.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(int),106,108,"/**
* Constructs a compact linked hash map with specified initial capacity.
* @param expectedSize expected number of key-value pairs
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(),56,58,"/**
 * Returns an empty instance of CompactLinkedHashSet.
 */",Creates an empty {@code CompactLinkedHashSet} instance.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(java.util.Collection),96,101,"/**
* Creates a compact hash set from the given collection.
* @param collection input collection
* @return CompactHashSet instance or null if collection is null
*/","* Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given
   * collection in unspecified order.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactHashSet} containing those elements (minus duplicates)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashSet:createWithExpectedSize(int),97,100,"/**
* Creates a compact linked hash set with specified expected size.
* @param expectedSize estimated number of elements in the set
*/","* Creates a {@code CompactLinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator)",113,117,"/**
* Initializes a TreeMultimap with custom comparators for keys and values.
* @param keyComparator comparator to order keys
* @param valueComparator comparator to order values in each collection
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSortedSetMultimap,"com.google.common.collect.Multimaps:newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier)",523,527,"/**
* Creates a sorted set multimap from the given map and supplier.
* @param map input map with key-value collections
* @param factory supplier for creating sorted set values
*/","* Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate
   * a multimap based on arbitrary {@link Map} and {@link SortedSet} classes.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSortedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sorted sets that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,com.google.common.collect.ImmutableMultiset:toImmutableMultiset(),69,71,"/**
* Creates a multiset collector with default counting function.
* @return Multiset collector that counts occurrences of each element
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in
   * encounter order.
   *
   * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,"com.google.common.collect.ImmutableMultiset:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",84,89,"/**
* Returns a multiset collector that groups elements based on the given functions.
* @param elementFunction function to extract group elements
* @param countFunction function to determine element counts
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose
   * elements are the result of applying {@code elementFunction} to the inputs, with counts equal to
   * the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,builder,com.google.common.collect.ImmutableMultiset:builder(),453,455,"/**
 * Creates a new instance of Builder with default configurations.
 */","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Object[]),257,261,"/**
* Converts array of objects to list and passes it to recursive implementation.
* @param parts array of objects to convert
*/","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,join,com.google.common.collect.FluentIterable:join(com.google.common.base.Joiner),819,821,"/**
* Invokes Joiner's m1() method with this as an argument.
* @param joiner Joiner instance to use
*/","* Returns a {@link String} containing all of the elements of this fluent iterable joined with
   * {@code joiner}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not
   * using any optional {@code Joiner} features, {@code
   * stream.collect(Collectors.joining(delimiter)}.
   *
   * @since 18.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,simplifyPath,com.google.common.io.Files:simplifyPath(java.lang.String),734,778,"/**
* Normalizes and simplifies a file path.
* @param pathname the input file path
*/","* Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent
   * to the original. The following heuristics are used:
   *
   * <ul>
   *   <li>empty string becomes .
   *   <li>. stays as .
   *   <li>fold out ./
   *   <li>fold out ../ when possible
   *   <li>collapse multiple slashes
   *   <li>delete trailing slashes (unless the path is just ""/"")
   * </ul>
   *
   * <p>These heuristics do not always match the behavior of the filesystem. In particular, consider
   * the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a
   * symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the
   * sibling of {@code a} referred to by {@code b}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$ParameterizedTypeImpl:toString(),281,293,"/**
* Generates a string representation of the type.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,doParseTrieToBuilder,"com.google.thirdparty.publicsuffix.TrieParser:doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)",64,114,"/**
* Parses public suffix from encoded string.
* @param stack Deque for storing intermediate results
* @param encoded encoded string to parse
* @param start starting index of parsing
* @param builder map builder for storing suffixes
* @return length of parsed suffix
*/","* Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,makeMap,com.google.common.collect.MapMaker:makeMap(),283,288,"/**
* Returns a concurrent map instance based on configuration.
* @return ConcurrentHashMap or custom internal map
*/","* Builds a thread-safe map. This method does not alter the state of this {@code MapMaker}
   * instance, so it can be invoked again to create multiple independent maps.
   *
   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to
   * be performed atomically on the returned map. Additionally, {@code size} and {@code
   * containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent
   * writes.
   *
   * @return a serializable concurrent map having the requested features",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerImpl:<init>(com.google.common.collect.MapMaker),123,126,"/**
* Initializes internal map with dummy values and key equivalence.
* @param mapMaker configuration for the internal map
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transformAndConcat,com.google.common.collect.FluentIterable:transformAndConcat(com.google.common.base.Function),497,500,"/**
* Transforms elements using the given function and returns a FluentIterable.
* @param function function to apply to each element
* @return FluentIterable of transformed objects or null if not found
*/","* Applies {@code function} to each element of this fluent iterable and returns a fluent iterable
   * with the concatenated combination of results. {@code function} returns an Iterable of results.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned
   * iterables' iterator does. After a successful {@code remove()} call, the returned fluent
   * iterable no longer contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces
   * streams, not iterables).
   *
   * @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,com.google.common.collect.Iterables:concat(java.lang.Iterable),483,486,"/**
* Concatenates multiple iterable collections into one.
* @param inputs variable-length array of iterables to concatenate
* @return concatenated iterable collection
*/","* Combines multiple iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements of each iterable in {@code inputs}. The input iterators are not polled
   * until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(...)}.
   *
   * @throws NullPointerException if any of the provided iterables is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture:get(long,java.util.concurrent.TimeUnit)",233,239,"/**
* Executes asynchronous operation with specified timeout and time unit.
* @param timeout maximum wait duration in specified time unit
* @param unit time unit for timeout value (e.g. seconds, milliseconds)
* @throws InterruptedException if thread is interrupted while waiting
* @throws TimeoutException if operation times out
* @throws ExecutionException if execution fails","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNodeInternal,com.google.common.graph.StandardMutableValueGraph:addNodeInternal(java.lang.Object),78,83,"/**
* Retrieves graph connections for a given node.
* @param node the node to fetch connections for
* @return GraphConnections object or null if not found
*/","* Adds {@code node} to the graph and returns the associated {@link GraphConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",699,701,"/**
* Converts duration to nanoseconds and calls m2 with result.
* @param guard Guard object
* @param time Duration value
*/","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesSpliterator,com.google.common.collect.ArrayTable:valuesSpliterator(),801,804,"/**
* Creates a spliterator that iterates over values.
* @return Spliterator of nullable values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray$AsList:equals(java.lang.Object),530,552,"/**
* Verifies object's list elements match parent criteria.
* @param object AsList or List to verify
* @return true if all elements match, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray$AsList:equals(java.lang.Object),525,547,"/**
* Verifies whether the given object matches the list criteria.
* @param object Object to verify
* @return True if the object is a valid list, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray$AsList:equals(java.lang.Object),527,549,"/**
* Verifies object integrity by recursively checking list elements against array values.
* @param object Object to verify, may be AsList or List
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$1:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Formats a string into the specified case format.
*@param format CaseFormat to apply
*@param s input string
*@return formatted string or original string if empty
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$2:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Formats a string into the specified case format, applying mask rules.
* @param format CaseFormat enum value
* @param s Input string to be formatted
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$5:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
* Formats a string into the specified mask format.
* @param format CaseFormat to apply
* @param s input string to format
* @return formatted string or original string if no changes made
*/",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,to,"com.google.common.base.CaseFormat:to(com.google.common.base.CaseFormat,java.lang.String)",129,133,"/**
* Formats input string according to given case format.
* @param format CaseFormat enum value
* @param str input string to be formatted
* @return formatted string or original if same as FUNC_MASK's format
*/","* Converts the specified {@code String str} from this format to the specified {@code format}. A
   * ""best effort"" approach is taken; if {@code str} does not conform to the assumed format, then
   * the behavior of this method is undefined but we make a reasonable effort at converting anyway.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher:matchesNoneOf(java.lang.CharSequence),530,532,"/**
* Checks if input CharSequence matches a specific pattern.
* @param sequence input text to check
* @return true if match found, false otherwise
*/","* Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to
   * {@code !matchesAnyOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches no characters in the sequence, including when the
   *     sequence is empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher:removeFrom(java.lang.CharSequence),618,645,"/**
* Replaces repeated characters in the input sequence with a single instance.
* @param sequence input character sequence
*/","* Returns a string containing all non-matching characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').removeFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""bzr""}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,char)",680,694,"/**
* Replaces a specified character and its subsequent occurrences with a mask.
* @param sequence input CharSequence
* @param replacement character to replace with
* @return modified string or original if no replacements found
*/","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""radar"", 'o')
   * }
   *
   * ... returns {@code ""rodor""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the character to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeToken,com.google.common.net.MediaType$Tokenizer:consumeToken(com.google.common.base.CharMatcher),1160,1165,"/**
* Returns string result from applying CharMatcher to input stream.
* @param matcher character matching strategy
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:getEmbeddedIPv4ClientAddress(java.net.Inet6Address),918,932,"/**
* Extracts the embedded Inet4Address from a given Inet6Address.
* @param ip the input IPv6 address
* @return the corresponding Inet4Address or throws exception if not found
*/","* Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an
   * IPv6 address of one of the specified address types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@link Inet4Address} of embedded IPv4 client address
   * @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putString,"com.google.common.hash.AbstractHasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",57,61,"/**
* Returns a Hasher instance based on the provided CharSequence and Charset.
* @param charSequence input string to hash
* @param charset character set for hashing
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.Hasher:putBytes(byte[]),62,64,"/**
* Computes hash value from input byte array.
* @param bytes input data to be hashed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[],int,int)",66,68,"/**
* Computes hash of specified byte array slice.
* @param bytes input byte array
* @param off starting offset in bytes
* @param len length of byte array slice
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,"com.google.common.hash.AbstractHashFunction:hashBytes(byte[],int,int)",64,68,"/**
* Computes hash code from input byte array.
* @param input input data
* @param off starting offset
* @param len length of input to process
* @return computed hash code value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,read,"com.google.common.hash.HashingInputStream:read(byte[],int,int)",64,72,"/**
* Reads and hashes bytes from input stream.
* @param bytes buffer to read into
* @param off offset in buffer
* @param len number of bytes to read
* @return number of bytes read, or -1 on error
*/","* Reads the specified bytes of data from the underlying input stream and updates the hasher with
   * the bytes read.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,write,"com.google.common.hash.HashingOutputStream:write(byte[],int,int)",55,59,"/**
* Processes input data by hashing and writing it to an output stream.
* @param bytes input byte array
* @param off offset into the input array
* @param len length of the input data
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[])",797,799,"/**
* Copies input stream to array starting from specified offset.","* Attempts to read enough bytes from the stream to fill the given byte array, with the same
   * behavior as {@link DataInput#readFully(byte[])}. Does not close the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,"com.google.common.io.LittleEndianDataInputStream:readFully(byte[],int,int)",68,71,"/**
* Delegates byte stream operation to ByteStreams implementation.
* @param b input byte array
* @param off offset into the array
* @param len number of bytes to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int)",574,576,"/**
* Initializes parallel search in boolean array.
* @param array boolean array to search
* @param distance maximum search distance
* @param start starting index (default: 0)
* @param end ending index (default: array length) 
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int)",425,427,"/**
* Initializes the computation for the specified byte array with given distance.
* @param array byte array to process
* @param distance initial distance value
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,com.google.common.primitives.SignedBytes:sortDescending(byte[]),200,203,"/**
 * Recursively processes byte array using m1 and m2 functions.
 * @param array input byte array to process
 */","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,com.google.common.primitives.Chars:sortDescending(char[]),456,459,"/**
* Recursively sorts and swaps elements in the given character array.
* @param array input array to be sorted
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int)",515,517,"/**
 * Initializes the array traversal from multiple points.
 * @param array input character array
 * @param distance maximum number of steps to traverse
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,com.google.common.primitives.Doubles:sortDescending(double[]),427,430,"/**
* Recursively processes the entire double array.
* @param array input array of doubles
*/","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int)",489,491,"/**
 * Initializes recursive processing of array elements with specified distance.
 * @param array input array
 * @param distance recursion depth
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,com.google.common.primitives.Floats:sortDescending(float[]),424,427,"/**
 * Recursively processes the entire float array using m1 and m2 helper methods.","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int)",486,488,"/**
* Recursively processes float array within specified distance.
* @param array input float array
* @param distance maximum processing distance
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,com.google.common.primitives.Ints:sortDescending(int[]),489,492,"/**
 * Recursively calls m1() and then iteratively processes the array.
 * @param array input array to be processed
 */","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int)",548,550,"/**
* Recursively processes array elements within specified distance.
* @param array input array to process
* @param distance maximum distance from current element
* @param start starting index (internal use)
* @param end ending index (internal use)
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,com.google.common.primitives.Longs:sortDescending(long[]),567,570,"/**
 * Recursively sorts an array of long values using helper function m1.
 * @param array input array to be sorted
 */","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int)",626,628,"/**
 * Initializes recursive sorting of an array with given distance.
 * @param array input array to sort
 * @param distance initial recursion depth
 */","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,com.google.common.primitives.Shorts:sortDescending(short[]),479,482,"/**
* Recursively processes array elements.
* @param array input short array
*/","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int)",538,540,"/**
* Initializes recursive processing of short array with specified distance.
* @param array input short array
* @param distance recursion depth
*/","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,delegate,com.google.common.collect.ForwardingCollection:delegate(),56,57,"/**
* Returns a collection of masks for elements of type E.
* @return Collection of masks
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(java.lang.String),432,434,"/**
* Wraps the result of m1() in a MapSplitter object.
* @param separator string to split on
*/","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 10.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,com.google.common.util.concurrent.RateLimiter:create(double),117,132,"/**
* Creates a rate limiter with specified permits per second.
* @param permitsPerSecond rate limit in requests per second
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit)",193,198,"/**
* Creates a RateLimiter instance with specified permits per second and 
* warm-up period.
* @param permitsPerSecond rate limit in units of the given time unit
* @param warmupPeriod time to reach full rate before enforcing limits
*/","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @param unit the time unit of the warmupPeriod argument
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalLoadingCache:writeReplace(),4979,4982,"/**
 * Returns a proxy object for loading serialization data from local cache.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,keys,com.google.common.collect.Multimaps$UnmodifiableMultimap:keys(),732,739,"/**
* Returns a multiset containing the keys from another multiset, 
* or creates a new one if the current keys are null.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableSortedMultiset,com.google.common.collect.Multisets:unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset),244,248,"/**
* Returns an unmodifiable view of a given sorted multiset.
* @param sortedMultiset input multiset to wrap
*/","* Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,descendingMultiset,com.google.common.collect.UnmodifiableSortedMultiset:descendingMultiset(),66,75,"/**
* Returns the unmodifiable sorted multiset, lazily initializing it if necessary.
* @return UnmodifiableSortedMultiset object or null if not initialized
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,get,com.google.common.collect.FilteredKeyListMultimap:get(java.lang.Object),41,44,"/**
* Calls superclass method to retrieve list of objects based on given key.
* @param key unique identifier used to filter results
* @return List of objects of type V or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,get,com.google.common.collect.FilteredKeySetMultimap:get(java.lang.Object),43,46,"/**
* Calls superclass's m1 method to retrieve a set of values associated with the given key.
* @param key unique identifier for values retrieval
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$DescendingSet:<init>(java.util.NavigableSet),2151,2153,"/**
* Initializes a descending set view from an existing navigable set.
* @param forward the underlying forward-set to view as descending
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingSet(),2027,2035,"/**
* Returns a read-only NavigableSet of elements in descending order.
* @return UnmodifiableNavigableSet containing elements or null if not initialized
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,unmodifiableNavigableSet,com.google.common.collect.Sets:unmodifiableNavigableSet(java.util.NavigableSet),1950,1956,"/**
* Wraps a navigable set in an unmodifiable view, or returns the original if already immutable.
* @param set the input navigable set
* @return unmodifiable NavigableSet instance
*/","* Returns an unmodifiable view of the specified navigable set. This method allows modules to
   * provide users with ""read-only"" access to internal navigable sets. Query operations on the
   * returned set ""read through"" to the specified set, and attempts to modify the returned set,
   * whether direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}.
   *
   * @param set the navigable set for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable set
   * @since 12.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entries,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:entries(),843,846,"/**
* Returns an entry set from the result of calling m2 on the object returned by m1.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableEntries,com.google.common.collect.Multimaps:unmodifiableEntries(java.util.Collection),1058,1064,"/**
* Converts a collection of map entries to an unmodifiable map.
* @param entries input collection of key-value pairs
*/","* Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}. If the specified collection is a
   * {@code Set}, the returned collection is also a {@code Set}.
   *
   * @param entries the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,writeReplace,com.google.common.collect.MapMakerInternalMap:writeReplace(),2791,2799,"/**
* Creates and returns a serialization proxy object.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3612,3620,"/**
* Retrieves a navigable map of key-value pairs within the specified range.
* @param fromKey starting key (inclusive if fromInclusive is true)
* @param fromInclusive whether to include the starting key
* @param toKey ending key (inclusive if toInclusive is true)
* @param toInclusive whether to include the ending key",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object,boolean)",3627,3630,"/**
* Fetches a navigable map by key with optional inclusive range.
* @param toKey the key to fetch
* @param inclusive whether to include the key in the range
* @return NavigableMap object or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object,boolean)",3637,3640,"/**
* Returns a navigable map view of keys in the delegate's map.
* @param fromKey starting key (inclusive if true)
* @return NavigableMap object or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSortedSetMultimap,com.google.common.collect.Multimaps:unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap),974,980,"/**
* Wraps a modifiable SortedSetMultimap in an unmodifiable view. 
* @param delegate the underlying multimap to be wrapped
*/","* Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on
   * the returned multimap ""read through"" to the specified multimap, and attempts to modify the
   * returned multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",549,555,"/**
* Schedules a Runnable to execute after a specified delay.
* @param command task to be executed
* @param delay time to wait before execution
* @param unit time unit for the delay
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",557,563,"/**
* Schedules a callable with specified delay and returns a listenable future.
* @param callable task to be executed
* @param delay duration before execution starts
* @param unit time unit for delay
* @return ListenableScheduledFuture object representing the scheduled task
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleAtFixedRate,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",565,571,"/**
* Schedules a one-time or periodic command with customizable delay and interval.
* @param command Runnable to be executed
* @param initialDelay time before first execution (in specified unit)
* @param period time between subsequent executions (in specified unit)
* @param unit TimeUnit for delay and period calculations
* @return ListenableScheduledTask representing scheduled task",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",573,580,"/**
* Schedules a non-blocking task to run at specified intervals.
* @param command the task to execute
* @param initialDelay initial delay before first execution
* @param delay interval between subsequent executions
* @param unit time unit for delay and initialDelay
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClosing,"com.google.common.util.concurrent.ClosingFuture:eventuallyClosing(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor)",475,493,"/**
* Wraps a ListenableFuture with an Executor for closing resources.
* @param future the Future to be wrapped
* @param closingExecutor Executor for closing AutoCloseable resources
* @return ClosingFuture object or null if not found
*/","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when
   * the pipeline is done, even if the pipeline is canceled or fails.
   *
   * <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its
   * value in order to close it.
   *
   * @param future the future to create the {@code ClosingFuture} from. For discussion of the
   *     future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object,
   *     Executor)}.
   * @param closingExecutor the future's result will be closed on this executor
   * @deprecated Creating {@link Future}s of closeable types is dangerous in general because the
   *     underlying value may never be closed if the {@link Future} is canceled after its operation
   *     begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types,
   *     including those that pass them to this method, with {@link #submit(ClosingCallable,
   *     Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a
   *     {@link ListenableFuture} that doesn't create values that should be closed, use {@link
   *     ClosingFuture#from}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,addCallback,"com.google.common.util.concurrent.FluentFuture:addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",415,417,"/**
* Executes asynchronous operation and schedules its result handling.
* @param callback interface to handle the result
* @param executor executor service for scheduling
*/","* Registers separate success and failure callbacks to be run when this {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Example:
   *
   * {@snippet :
   * future.addCallback(
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight callbacks passed to this method.
   *
   * <p>For a more general interface to attach a completion listener, see {@link #addListener}.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and
   * {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case
   * of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link
   * java.util.concurrent.CompletableFuture#thenAcceptAsync}.
   *
   * @param callback The callback to invoke when this {@code Future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$LocalLoadingCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",4938,4941,"/**
* Creates a local loading cache instance.
* @param builder cache configuration
* @param loader function to load values from external source
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.CacheBuilder),4838,4840,"/**
* Constructs a LocalManualCache instance using the provided CacheBuilder.
* @param builder Cache configuration builder
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph$1:inDegree(java.lang.Object),147,150,"/**
* Calculates a mask value based on node properties.
* @param node Node object to evaluate
* @return integer mask value or 0 if conditions not met
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph$1:outDegree(java.lang.Object),152,155,"/**
* Evaluates mask value based on node properties.
* @param node input node to evaluate
* @return calculated mask integer value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,"com.google.common.collect.EnumBiMap:create(java.lang.Class,java.lang.Class)",69,72,"/**
* Creates a bidirectional map for enum types K and V.
* @param keyType type of the enum keys
* @param valueType type of the enum values
*/","* Returns a new, empty {@code EnumBiMap} using the specified key and value types.
   *
   * @param keyType the key type
   * @param valueType the value type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.lang.Class),56,59,"/**
* Creates an EnumHashBiMap instance with a specified key type.","* Returns a new, empty {@code EnumHashBiMap} using the specified key type.
   *
   * @param keyType the key type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.lang.Iterable),110,115,"/**
* Creates a TreeMultiset from an iterable of comparable elements.
* @param elements input collection
* @return populated TreeMultiset instance
*/","* Creates an empty multiset containing the given initial elements, sorted according to the
   * elements' natural order.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,<init>,com.google.common.collect.ImmutableSortedMultiset$Builder:<init>(java.util.Comparator),461,463,"/**
* Initializes the builder with a custom comparator.
* @param comparator user-specified comparison function
*/","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMultiset#orderedBy(Comparator)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumBiMap:putAll(java.util.Map),187,192,"/**
* Iterates through the input map and applies a transformation to each key-value pair.
* @param map Map of type K to V
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumHashBiMap:putAll(java.util.Map),187,192,"/**
* Iterates over the input map and applies a mask operation to each entry.
* @param map map of key-value pairs to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",118,122,"/**
* Delegates to superclass method with key and iterable of values.
* @param key arbitrary key for sorting
* @param values collection of values to be sorted
*/","* Stores a collection of values with the same key, replacing any existing values for that key.
   * The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,replaceValues,"com.google.common.collect.SetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",86,88,"/**
* Creates a set of function masks from the given values.
* @param key the key to use as a mask
* @param values iterable of values to create masks for
* @return Set of function masks or empty set if no values provided
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(java.lang.Iterable),61,66,"/**
* Creates a hash-based multiset from the given iterable of elements.
* @param elements input collection of elements
* @return HashMultiset object representing the aggregated data
*/","* Creates a new {@code HashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,"com.google.common.collect.ArrayListMultimap:create(int,int)",95,98,"/**
* Creates an ArrayListMultimap with specified capacity for keys and values per key.
* @param expectedKeys estimated number of unique keys
* @param expectedValuesPerKey estimated number of values per key
* @return a new ArrayListMultimap instance
*/","* Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified
   * numbers of keys and values without resizing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(),114,116,"/**
 * Initializes a new instance of Multimap with default values per key. 
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(com.google.common.collect.Multimap),124,131,"/**
* Copies data from an existing Multimap into this instance.
* @param multimap source multimap to copy from, can be of the same type
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,"com.google.common.collect.HashMultimap:create(int,int)",84,87,"/**
* Creates a hash-based multimap with estimated capacity.
* @param expectedKeys estimated number of keys
* @param expectedValuesPerKey estimated average values per key
*/","* Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of
   * keys and values without rehashing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(),105,107,"/**
* Initializes a new instance of HashMultimap with default values per key.
* @param initialCapacity initial capacity (default is 12)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(com.google.common.collect.Multimap),100,103,"/**
* Creates a new HashMultimap with the same mappings as the input Multimap.
* @param multimap input Multimap to clone
*/","* Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(int),163,166,"/**
* Creates a new LinkedListMultimap with specified expected keys.
* @param expectedKeys maximum number of key elements allowed
*/","* Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified
   * number of keys without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @throws IllegalArgumentException if {@code expectedKeys} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(),180,182,"/**
* Initializes a new instance of LinkedListMultimap with default capacity. 
* @param initialCapacity initial size of the underlying linked list data structure
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(com.google.common.collect.Multimap),188,191,"/**
* Constructs a new LinkedListMultimap from an existing Multimap.
* @param multimap source Multimap to copy key-value pairs from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(java.lang.Iterable),69,74,"/**
* Creates a multiset from the given iterable of elements.
* @param elements input collection to convert
*/","* Creates a new {@code LinkedHashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(),91,94,"/**
* Creates an instance of LinkedHashMultimap with default capacities.
*/","Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,"com.google.common.collect.LinkedHashMultimap:create(int,int)",105,109,"/**
* Creates a multimap with pre-allocated space for keys and values.
* @param expectedKeys estimated number of unique keys
* @param expectedValuesPerKey estimated average number of values per key
*/","* Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified
   * numbers of keys and values without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,<init>,com.google.common.graph.StandardMutableNetwork:<init>(com.google.common.graph.NetworkBuilder),47,49,"/**
 * Initializes the network with a custom builder.
 * @param builder network configuration builder
 */",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,<init>,com.google.common.graph.StandardMutableValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),50,53,"/**
* Constructs a new value graph using an existing graph builder.
* @param builder Graph builder instance
*/",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,com.google.common.collect.ImmutableTable$Builder:put(com.google.common.collect.Table$Cell),230,243,"/**
* Configures a cell from the provided immutable table cell or individual row/column/value components.
* @param cell immutable table cell, or individual row/column/value components to be used as a fallback
*/","* Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key
     * pairs are not allowed and will cause {@link #build} to fail.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,com.google.common.collect.ImmutableBiMap$Builder:put(java.util.Map$Entry),368,373,"/**
* Configures builder with provided key-value pair.
* @param entry non-null Entry object to add to builder
*/","* Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will
     * cause {@link #build} to fail.
     *
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.lang.Iterable),492,501,"/**
* Initializes builder with key-value pairs from the given iterable.
* @param entries collection of entries to add
*/","* Adds all of the given entries to the built map. If the same key is put more than once, {@link
     * #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for
     * that key.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,com.google.common.collect.ImmutableSortedMap$Builder:put(java.util.Map$Entry),642,647,"/**
* Configures builder with an existing key-value pair.
* @param entry non-null Entry object to initialize the builder
*/","* Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,
     * according to the comparator (which might be the keys' natural order), are not allowed, and
     * will cause {@link #build} to fail.
     *
     * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$FilteredNavigableSet:descendingSet(),1386,1389,"/**
* Returns a navigable set of elements based on the result of m1().m2().
* @return NavigableSet containing filtered elements or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1402,1410,"/**
* Retrieves a navigable set of elements based on the given range and filter.
* @param fromElement starting element or null for no lower bound
* @param fromInclusive whether to include the start element in the result
* @param toElement ending element or null for no upper bound
* @param toInclusive whether to include the end element in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$FilteredNavigableSet:headSet(java.lang.Object,boolean)",1412,1415,"/**
* Retrieves a navigable set of elements matching the given predicate.
* @param toElement null or element to find
* @param inclusive whether to include the target element in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$FilteredNavigableSet:tailSet(java.lang.Object,boolean)",1417,1420,"/**
* Retrieves a navigable set of elements based on a filtered range.
* @param fromElement starting element for the filter
* @param inclusive whether to include the end element in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,filterCollection,"com.google.common.collect.FilteredEntryMultimap:filterCollection(java.util.Collection,com.google.common.base.Predicate)",92,99,"/**
* Applies a predicate to the elements of a collection.
* @param collection input collection
* @param predicate filter condition
* @return filtered collection (or null if all elements removed)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeySet,com.google.common.collect.FilteredKeyMultimap:createKeySet(),98,101,"/**
* Computes set of function masks from unfiltered results and predicate.
* @return Set of K objects representing function masks
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryMap:<init>(java.util.Map,com.google.common.base.Predicate)",3010,3013,"/**
* Filters entries from an unfiltered map based on a given predicate.
* @param unfiltered original map to filter
* @param entryPredicate condition for each entry to be included
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createEntrySet,com.google.common.collect.Maps$FilteredKeyMap:createEntrySet(),2983,2986,"/**
* Returns a set of entries filtered by the given predicate.
* @return Set of key-value pairs that match the predicate",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$FilteredKeyMap:createKeySet(),2988,2991,"/**
* Returns a set of unique function masks.
* @return Set of K objects representing function masks.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createElementSet,com.google.common.collect.Multisets$FilteredMultiset:createElementSet(),343,346,"/**
* Returns a set of elements that match the given predicate.
* @return Set of filtered elements (may be empty or null)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createEntrySet,com.google.common.collect.Multisets$FilteredMultiset:createEntrySet(),353,356,"/**
* Filters entries based on predicate and returns a set of matching entries.
* @return Set of filtered entries.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,"com.google.common.graph.AbstractNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",172,182,"/**
* Computes the functional mask between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Set of edges representing the functional mask
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,put,"com.google.common.collect.CompactHashMap:put(java.lang.Object,java.lang.Object)",334,398,"/**
* Sets a value by key in the map.
* @param key unique identifier
* @param value new value to associate with key
* @return previous value associated with key or null if not present
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashMap:convertToHashFloodingResistantImplementation(),134,140,"/**
* Calls superclass implementation of m1(), clears links, and returns resulting map.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,add,com.google.common.collect.CompactHashSet:add(java.lang.Object),294,352,"/**
* Inserts or updates an element in the compact hashing table.
* @param object the element to insert or update
* @return true if successful, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashSet:convertToHashFloodingResistantImplementation(),147,154,"/**
* Override to reset predecessor and successor, returning a set of elements.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableSetMultimap.java,<init>,com.google.common.collect.EmptyImmutableSetMultimap:<init>(),33,35,"/**
* Initializes an empty immutable multimap.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,asMultimap,com.google.common.collect.ImmutableMap:asMultimap(),1116,1125,"/**
* Returns a multimap view with the specified mask.
* @return ImmutableSetMultimap instance or null if not applicable
*/","* Returns a multimap view of the map.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,build,com.google.common.collect.ImmutableSortedMap$Builder:build(),714,717,"/**
* Returns an immutable sorted map of function masks. 
*/","* Returns a newly-created immutable sorted map.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,descendingMultiset,com.google.common.collect.ImmutableSortedMultiset:descendingMultiset(),338,348,"/**
* Returns the sorted multiset for descending order.
* @return ImmutableSortedMultiset instance or null if not initialized
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap:get(java.lang.Comparable),484,487,"/**
* Determines whether range map contains specified key.
* @param key unique key identifier
* @return true if key is present, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,putAll,com.google.common.collect.ImmutableRangeMap$Builder:putAll(com.google.common.collect.RangeMap),133,139,"/**
 * Updates the builder with entries from a given RangeMap.
 * @param rangeMap source RangeMap to populate the builder
 * @return this Builder instance for method chaining
 */",Copies all associations from the specified range map into this builder.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(java.lang.Iterable),796,802,"/**
* Applies a list of masks to the builder.
* @param ranges iterable of Range objects to apply
*/","* Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be
     * merged, but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if any inserted ranges are empty
     * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:size(),851,854,"/**
* Calls m1() and delegates to Iterators.m2(). 
* @return result of Iterators.m2()
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet:add(com.google.common.collect.Range),177,222,"/**
* Updates the FUNC_MASK using the provided range.
* @param rangeToAdd Range to add
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet:remove(com.google.common.collect.Range),224,265,"/**
* Removes a specified range from the data structure.
* @param rangeToRemove Range to be removed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$AsMapOfRanges:containsKey(java.lang.Object),356,359,"/**
* Checks if a mask exists for the given key.
* @param key unique identifier (may be null)
* @return true if mask found, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersectRanges,com.google.common.collect.ImmutableRangeSet:intersectRanges(com.google.common.collect.Range),445,512,"/**
* Filters ranges based on the given range.
* @param range Range to filter by
* @return filtered list of ranges or empty list if no matches
*/","* Returns a list containing the nonempty intersections of {@code range} with the ranges in this
   * range set.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,create,"com.google.common.collect.ContiguousSet:create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",62,95,"/**
* Creates a contiguous set from the given range and domain.
* @param range specified Range object
* @param domain DiscreteDomain object
* @return ContiguousSet instance or empty/regular set based on effective range
*/","* Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain
   * Range#contains contained} by the range.
   *
   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if
   *     neither has an upper bound
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:get(java.lang.Object),659,690,"/**
* Retrieves RangeMapEntry for given key, if it falls within sub-range.
* @param key object representing range or single value
* @return RangeMapEntry object or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap$SubRangeMap:getEntry(java.lang.Comparable),489,498,"/**
* Retrieves a range-entry for the given key, delegating to sub-range if applicable.
* @param key unique key identifier
* @return Range-Entry object or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$SubRangeMap:subRangeMap(com.google.common.collect.Range),586,593,"/**
* Recursively computes range map for given range.
* @param range input range to compute
* @return RangeMap object or default map if invalid range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Range),472,479,"/**
* Computes the complement of ranges within a given window.
* @param subWindow input range to compute complement for
* @return NavigableMap of complementary ranges or an empty map if invalid
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Range),305,311,"/**
* Generates a navigable map of cuts within the given range.
* @param window Range object defining the bounds
* @return Navigable map of cuts or empty if outside upper bound",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet$SubRangeSet:encloses(com.google.common.collect.Range),872,879,"/**
* Checks if a range is not restricted by the given restriction.
* @param range range to check
* @return true if range is not restricted, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet$SubRangeSet:subRangeSet(com.google.common.collect.Range),917,926,"/**
* Evaluates the range set based on the given view and restriction.
* @param view Range object to evaluate
* @return RangeSet object or a subset/subset of itself 
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Range),704,711,"/**
* Computes navigable map of cuts within a given window.
* @param window Range object defining the window
* @return NavigableMap of Cut objects or empty map if invalid window
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:get(java.lang.Object),744,771,"/**
* Retrieves a Range of type C based on the provided key, considering lower bound window and restriction.
* @param key object to evaluate, must be an instance of Cut
* @return non-null Range if valid, otherwise null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,intersects,com.google.common.collect.TreeRangeSet:intersects(com.google.common.collect.Range),133,146,"/**
* Checks if a range intersects with any mask in the collection.
* @param range Range object to check
* @return true if intersection found, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalesce,"com.google.common.collect.TreeRangeMap:coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry)",173,181,"/**
* Applies mask to Range based on given Entry and value.
* @param range input range
* @param value value to compare with
* @param entry optional Entry object
* @return modified Range or original if no changes needed
*/","Returns the range that spans the given range and entry, if the entry can be coalesced.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asSet,com.google.common.collect.ImmutableRangeSet:asSet(com.google.common.collect.DiscreteDomain),547,568,"/**
* Constructs a sorted set of values based on the given discrete domain.
* @param domain discrete domain to generate set from
* @return ImmutableSortedSet containing domain's elements or throws exception if not bounded
*/","* Returns an {@link ImmutableSortedSet} containing the same values in the given domain
   * {@linkplain RangeSet#contains contained} by this range set.
   *
   * <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For
   * example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty
   * ranges {@code [3..3)} and {@code [4..4)}.
   *
   * <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large
   * range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on
   * such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link
   * Collections#frequency}) can cause major performance problems.
   *
   * <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's
   * contents, such as {@code ""[1..100]}""}.
   *
   * @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if
   *     neither has an upper bound",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,com.google.common.collect.RegularContiguousSet:range(),211,214,"/**
* Returns a range of values from min to max (inclusive) for type C.
* @return Range of values of type C
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putRangeMapEntry,"com.google.common.collect.TreeRangeMap:putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",207,209,"/**
* Inserts a range-based entry into the map with given bounds and value.
* @param lowerBound lower bound of the range
* @param upperBound upper bound of the range
* @param value associated value for the range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,newConnections,com.google.common.graph.StandardMutableNetwork:newConnections(),166,174,"/**
* Returns the appropriate network connections instance based on configuration flags.
* @return NetworkConnections object with type and directionality determined by m1() and m2()
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$Itr:remove(),651,659,"/**
* Performs a series of operations to update the internal state.
* Executes methods m1 and m3, removes an item at specified index,
* updates current index, and resets indexToRemove. 
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,com.google.common.collect.CollectCollectors$EnumMapAccumulator:toImmutableMap(),338,340,"/**
* Returns an immutable map with keys and values from the input enum map.
* @return ImmutableMap containing key-value pairs or a default empty map if none provided
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOfEnumMap,com.google.common.collect.ImmutableMap:copyOfEnumMap(java.util.EnumMap),733,741,"/**
* Creates an immutable map of enum keys to values by processing and transforming the provided map.
* @param original the input map to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,immutableEnumMap,com.google.common.collect.Maps:immutableEnumMap(java.util.Map),157,182,"/**
* Converts a map to an immutable enum map.
*@param map input map
*@returnImmutableMap object or empty if not possible
*/","* Returns an immutable map instance containing the given entries. Internally, the returned map
   * will be backed by an {@link EnumMap}.
   *
   * <p>The iteration order of the returned map follows the enum's iteration order, not the order in
   * which the elements appear in the given map.
   *
   * @param map the map to make an immutable copy of
   * @return an immutable map containing those entries
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowMap,com.google.common.collect.ImmutableTable:rowMap(),380,381,"/**
* Returns an immutable map of aggregated values by key.
* @return A map where keys are type R and values are maps with keys C and values V.","* {@inheritDoc}
   *
   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances
   * as well.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap$2:asDescendingMapOfRanges(),317,325,"/**
* Creates a map of ranges to values based on internal data structures.
*@return Map of immutable ranges to values
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$ReverseList:subList(int,int)",924,928,"/**
* Generates a sublist of elements between specified indices.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,descendingIterator,com.google.common.collect.ImmutableSortedSet:descendingIterator(),845,847,"/**
* Returns an iterator over the elements of this collection.
* The returned iterator is unmodifiable.
*/",* @since 12.0,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,readResolve,com.google.common.collect.ImmutableList$SerializedForm:readResolve(),736,738,"/**
* Returns a mask object based on input elements.
* @param elements collection of data to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,<init>,"com.google.common.reflect.Parameter:<init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.Object)",49,60,"/**
* Initializes a Parameter object from the given components.
* @param declaration method or constructor invocation
* @param position parameter index
* @param type parameter type
* @param annotations parameter annotations
* @param annotatedType raw type of the parameter (may be null)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$TypeVariableImpl:<init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",401,406,"/**
* Initializes a type variable with the given declaration, name, and bounds.
* @param genericDeclaration the enclosing generic declaration
* @param name the name of the type variable
* @param bounds the upper bound(s) for this type variable
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,build,com.google.common.collect.ImmutableList$Builder:build(),922,926,"/**
* Creates an immutable list of elements using m1 factory.
* @return ImmutableList object containing E elements
*/",* Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[]),360,362,"/**
* Creates an immutable list from a variable-length array of elements.
* @param elements array of objects to be converted into an ImmutableList
*/","* Views the array as an immutable list. Does not check for nulls; does not copy.
   *
   * <p>The array must be internally created.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:build(),969,984,"/**
* Returns an immutable set based on the specified distinct flag.
* @return ImmutableSet object with deduplicated elements
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,build,com.google.common.collect.ImmutableSortedSet$Builder:build(),586,596,"/**
* Returns a mask for the sorted set, either directly or after copying elements.
* @return ImmutableSortedSet of E elements
*/","* Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code
     * Builder} and its comparator.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,create,"com.google.common.collect.JdkBackedImmutableBiMap:create(int,java.util.Map$Entry[])",35,53,"/**
* Creates an immutable bi-map from a sorted array of entries.
* @param n size of the input array
* @param entryArray sorted array of key-value pairs to convert
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,create,"com.google.common.collect.JdkBackedImmutableMap:create(int,java.util.Map$Entry[],boolean)",41,86,"/**
* Processes an array of entries to create a map with deduplicated keys.
* @param n size of the entry array
* @param entryArray array of entries to process
* @param throwIfDuplicateKeys whether to throw on duplicate keys
* @return an ImmutableMap with deduplicated keys or null if all keys were duplicates","* Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is
   * detected. This implementation may replace the entries in entryArray with its own entry objects
   * (though they will have the same key/value contents), and will take ownership of entryArray.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$ReverseImmutableList:subList(int,int)",674,678,"/**
* Extracts a sublist of elements from the forward list between specified indices.
* @param fromIndex starting index (inclusive)
* @param toIndex ending index (exclusive)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$SubList:subList(int,int)",496,500,"/**
* Splits the list into a sublist between two indices.
* @param fromIndex starting index of sublist
* @param toIndex ending index of sublist
* @return sub-list of elements within specified range
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap:subRangeMap(com.google.common.collect.Range),327,402,"/**
* Computes the range map for a given range, using a sub-range strategy.
* @param range query range to compute
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,getSubSet,"com.google.common.collect.RegularImmutableSortedSet:getSubSet(int,int)",289,298,"/**
* Creates a subset or reinitializes the set.
* @param newFromIndex starting index of the new range
* @param newToIndex ending index of the new range
* @return subsetted RegularImmutableSortedSet or default set if invalid range.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,findSuffixOfType,com.google.common.net.InternetDomainName:findSuffixOfType(com.google.common.base.Optional),213,239,"/**
* Finds the index of the first matching suffix based on desired type.
* @param desiredType Optional PublicSuffixType to match
*/","* Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value
   * defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or
   * {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code
   * ""nhs.uk""}.
   *
   * <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type.
   * Otherwise, it finds the first suffix of any type.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)",498,561,"/**
* Creates an immutable sorted map from a array of entries.
* @param comparator comparison function for sorting
* @param sameComparator whether the comparator is the same as previous calls
* @param entryArray array of entries to process
* @param size number of entries in the array
* @return ImmutableSortedMap object or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSet,com.google.common.collect.CollectCollectors$EnumSetAccumulator:toImmutableSet(),133,140,"/**
* Returns an immutable set based on the provided set, or a default set if original is null.
* @return ImmutableSet object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOfEnumSet,com.google.common.collect.ImmutableSet:copyOfEnumSet(java.util.EnumSet),272,275,"/**
* Converts EnumSet to ImmutableEnumSet using bitwise operations.
* @param enumSet input EnumSet instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableEnumSet,com.google.common.collect.Sets:immutableEnumSet(java.lang.Iterable),121,141,"/**
* Converts an iterable of enums to an immutable set.
* @param elements iterable of enum values
* @return ImmutableSet containing all enum values or empty set if none found
*/","* Returns an immutable set instance containing the given enum elements. Internally, the returned
   * set will be backed by an {@link EnumSet}.
   *
   * <p>The iteration order of the returned set follows the enum's iteration order, not the order in
   * which the elements appear in the given collection.
   *
   * @param elements the elements, all of the same {@code enum} type, that the set should contain
   * @return an immutable set containing those elements, minus duplicates",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,readResolve,com.google.common.collect.ImmutableSet$SerializedForm:readResolve(),411,413,"/**
* Returns a mask object based on provided elements.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,createValues,com.google.common.collect.ImmutableTable:createValues(),323,324,"/**
* Returns an immutable collection of function mask values. 
* @return Unmodifiable Collection of V objects representing function masks.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,equals,com.google.common.collect.RegularImmutableSortedSet:equals(java.lang.Object),170,205,"/**
* Checks if the given object is functionally equivalent to this set.
* @param object Object to compare, can be null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,combine,com.google.common.collect.ImmutableSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),554,569,"/**
* Merges two builder instances into a single one.
* @param other the Builder instance to merge with
* @return this Builder instance for method chaining
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractBaseGraph$2:iterator(),732,733,"/**
* Returns an unmodifiable iterator over all possible function masks.
* @return Iterator over unique E values or empty iterator if none exist
*/","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.DirectedGraphConnections:incidentEdgeIterator(java.lang.Object),367,411,"/**
* Generates an iterator of endpoint pairs for the given node, 
* including self-loops and considering ordered node connections.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,post,com.google.common.eventbus.EventBus:post(java.lang.Object),259,267,"/**
* Dispatches an event to registered subscribers.
* @param event the event object
*/","* Posts an event to all registered subscribers. This method will return successfully after the
   * event has been posted to all subscribers, and regardless of any exceptions thrown by
   * subscribers.
   *
   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not
   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.
   *
   * @param event event to post.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setValue,com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:setValue(java.lang.Object),2660,2664,"/**
* Calls super's implementation of m3 with updated values.
* @param newValue new value to propagate up the hierarchy
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putAll,com.google.common.collect.MapMakerInternalMap:putAll(java.util.Map),2441,2446,"/**
* Processes entries in the provided map and performs an operation on each key-value pair.
* @param m input map containing key-value pairs to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,intern,com.google.common.collect.Interners$InternerImpl:intern(java.lang.Object),128,157,"/**
* Finds the functional mask of a given sample value.
* @param sample input value to search for
* @return E type result or original sample if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$HashIterator:remove(),2622,2627,"/**
* Updates internal map and resets last returned object.
* @param lastReturned previous return value (may be null)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$KeySet:remove(java.lang.Object),2698,2701,"/**
* Checks if an object is present in the internal map.
* @param o the object to search for
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$EntrySet:remove(java.lang.Object),2761,2769,"/**
* Recursively checks for entry existence in the map.
* @param o object to check (must be an Entry)
* @return true if the entry exists, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,com.google.common.collect.MapMakerInternalMap:get(java.lang.Object),2355,2362,"/**
* Performs M3 operation on the given object key.
* @param key object to perform M3 operation on
* @return result of M3 operation or null if input is null
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,com.google.common.collect.MapMakerInternalMap:containsKey(java.lang.Object),2376,2383,"/**
* Performs a multi-level lookup using provided key.
* @param key the object to search for
* @return true if found, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putInstance,"com.google.common.collect.MutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",169,174,"/**
* Applies a mask function to the given value and returns the result.
* @param type class of the masked value
* @param value input value to be masked
* @return masked value or null if failed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,tryCrossOverAndBubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:tryCrossOverAndBubbleUp(int,int,java.lang.Object)",538,562,"/**
* Creates a MoveDesc object by resolving the trickle operation.
* @param removeIndex index of element to be removed
* @param vacated index where element was previously located
* @param toTrickle element to be moved
* @return MoveDesc object or null if not resolved
*/","* Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved
     * before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rowComparator,com.google.common.collect.TreeBasedTable:rowComparator(),144,154,"/**
* Returns a comparator for the row keys.
*/","* Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()}
   * is returned.
   *
   * @deprecated Use {@code table.rowKeySet().comparator()} instead.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,synchronizedNavigableSet,com.google.common.collect.Sets:synchronizedNavigableSet(java.util.NavigableSet),2112,2117,"/**
* Wraps aNavigableSet in a synchronized implementation.
* @param navigableSet input set to synchronize
* @return synchronized NavigableSet instance
*/","* Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable set is accomplished through the returned navigable set (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned sorted set when
   * iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or
   * {@code tailSet} views.
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   *  ...
   * synchronized (set) {
   *   // Must be in the synchronized block
   *   Iterator<E> it = set.iterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   * NavigableSet<E> set2 = set.descendingSet().headSet(foo);
   *  ...
   * synchronized (set) { // Note: set, not set2!!!
   *   // Must be in the synchronized block
   *   Iterator<E> it = set2.descendingIterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}.
   *
   * @param navigableSet the navigable set to be ""wrapped"" in a synchronized navigable set.
   * @return a synchronized view of the specified navigable set.
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceiling,com.google.common.collect.Synchronized$SynchronizedNavigableSet:ceiling(java.lang.Object),1474,1479,"/**
* Calls m2() on the result of m1(), synchronizing access to ensure thread safety.
* @param e input object for m2()
* @return result of m2() or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingIterator(),1481,1484,"/**
* Delegates to m1() and returns its iterator result.
* @return iterator over elements of type E or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingSet(),1488,1498,"/**
* Returns a synchronized set of elements in reverse order.
* @return NavigableSet containing reversed elements or null if not initialized
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floor,com.google.common.collect.Synchronized$SynchronizedNavigableSet:floor(java.lang.Object),1500,1505,"/**
* Calls secondary operation on input object after synchronizing with mutex.
* @param e input object of type E
* @return result of secondary operation or null if failed
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object,boolean)",1507,1512,"/**
* Retrieves a navigable set of elements from the underlying data structure.
* @param toElement element to search for
* @param inclusive whether to include the specified element in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higher,com.google.common.collect.Synchronized$SynchronizedNavigableSet:higher(java.lang.Object),1519,1524,"/**
* Calls m2 on the result of m1, synchronizing access to shared resources.
* @param e input element for m2 method
* @return result of m2 or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lower,com.google.common.collect.Synchronized$SynchronizedNavigableSet:lower(java.lang.Object),1526,1531,"/**
* Calls m2() on a synchronized instance of m1(), passing through input.
* @param e input object to pass to m2()
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollFirst(),1533,1538,"/**
 * Invokes recursive method m2() on result of m1(), synchronized by mutex. 
 * @return result of m2() or null if m1() returns null
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollLast(),1540,1545,"/**
* Recursively fetches entity value using m1(), synchronized on mutex.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1547,1554,"/**
* Retrieves a navigable set of elements within the specified range.
* @param fromElement start element
* @param fromInclusive whether to include the start element in the result
* @param toElement end element
* @param toInclusive whether to include the end element in the result
* @return NavigableSet containing matching elements or null if empty
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object,boolean)",1561,1566,"/**
* Retrieves a synchronized navigable set of elements based on the given criteria.
* @param fromElement element to start searching from
* @param inclusive whether to include the fromElement in the result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:keySet(),1720,1723,"/**
* Returns a set of key masks.
*/
 
or 

 /**
* Fetches and returns a collection of key masks.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,removeAll,com.google.common.collect.ForwardingSetMultimap:removeAll(java.lang.Object),56,60,"/**
* Delegate to underlying map to fetch values by key. 
* @param key object key (can be null)
* @return set of values or empty set if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset$AvlNode:add(java.util.Comparator,java.lang.Object,int,int[])",675,719,"/**
* Recursively updates AVL tree with new elements, maintaining balance.
* @param comparator comparison function for element ordering
* @param e new element to insert
* @param count number of elements in the update batch
* @param result status array (0=update successful, -1=update failed)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMin,com.google.common.collect.TreeMultiset$AvlNode:removeMin(com.google.common.collect.TreeMultiset$AvlNode),912,921,"/**
* Recursively updates the AVL tree by propagating a given node.
* @param node Node to propagate
* @return Updated AvlNode or null if replaced
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMax,com.google.common.collect.TreeMultiset$AvlNode:removeMax(com.google.common.collect.TreeMultiset$AvlNode),924,933,"/**
* Recursively updates Avl tree by removing a given node and its descendants.
* @param node the node to remove
* @return updated AvlNode or null if removed (and left child is null)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.ImmutableNetwork:incidentEdges(java.lang.Object),130,133,"/**
* Recursively fetches and combines subsets of elements E from the given tree node N.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.ImmutableNetwork:adjacentNodes(java.lang.Object),143,146,"/**
* Recursively fetches all nodes in the graph reachable from the given node.
* @param node starting node to traverse from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.ImmutableNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
* Finds common connections between two network nodes.
* @param nodeU first node to compare
* @param nodeV second node to compare
* @return Set of shared edges (E) or empty set if none
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.ImmutableNetwork:inEdges(java.lang.Object),158,161,"/**
* Recursively fetches a set of elements E from a tree-like structure N.
* @param node root node of the structure
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.ImmutableNetwork:outEdges(java.lang.Object),163,166,"/**
* Recursively computes the set of elements E associated with the given node.
* @param node Node to process
* @return Set of elements E or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.ImmutableNetwork:successors(java.lang.Object),173,176,"/**
* Recursively fetches neighbor nodes and combines them with the current node's neighbors. 
* @param node current graph node
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.ImmutableValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
* Recursively computes and returns a set of nodes using m1() and m3(). 
* @param node Node object to start computation from
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.ImmutableValueGraph:predecessors(java.lang.Object),108,111,"/**
* Recursively fetches and merges child nodes from a given node.
* @param node Node to start fetching children from
* @return Set of child nodes
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.ImmutableValueGraph:successors(java.lang.Object),113,116,"/**
* Recursively fetches and combines child nodes from the given node.
* @param node Node to start traversal from
* @return Set of child nodes or empty set if none found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.ImmutableValueGraph:incidentEdges(java.lang.Object),118,129,"/**
* Computes and returns a set of endpoint pairs for the given node.
* @param node graph node identifier
* @return Set of EndpointPair objects or empty set if no matches found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
* Computes functional mask value by combining two nodes' masks.
* @param nodeU first node to combine
* @param nodeV second node to combine
* @return combined functional mask value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
* Evaluates endpoint mask based on provided pair.
* @param endpoints EndpointPair object containing relevant data
* @return true if mask is valid, false otherwise
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
* Computes mask value using input nodes and optional default value.
* @param nodeU first input node
* @param nodeV second input node
* @param defaultValue fallback value if computation fails
* @return computed mask value or defaultValue if not available
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
* Retrieves and returns a value from a pair of endpoint values.
* @param endpoints pair of endpoint values
* @param defaultValue default value to return if not found
* @return V value or null if not found
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int,double)",407,410,"/**
* Creates a Bloom filter with specified expected insertions and false positive probability.
* @param funnel data conversion function
* @param expectedInsertions estimated number of inserts
* @param fpp target false positive rate
*/","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long)",509,512,"/**
* Creates a Bloom filter with default false positive probability (3%).
* @param funnel data input funnel
* @param expectedInsertions estimated number of insertions
*/","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,approximateElementCount,com.google.common.hash.BloomFilter:approximateElementCount(),221,234,"/**
* Calculates the function mask based on bits and hash functions.
* @return long value representing the function mask
*/","* Returns an estimate for the total number of distinct elements that have been added to this
   * Bloom filter. This approximation is reasonably accurate if it does not exceed the value of
   * {@code expectedInsertions} that was used when constructing the filter.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,toX,"com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:toX(double,java.math.RoundingMode)",344,347,"/**
* Computes one's complement of the given double value.
* @param d input double value
* @param mode rounding mode to apply to intermediate calculations
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtApproxWithDoubles,com.google.common.math.BigIntegerMath:sqrtApproxWithDoubles(java.math.BigInteger),297,300,"/**
* Computes a mask from input number using Mersenne Twister algorithm.
* @param x input number
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:add(java.lang.Object),743,758,"/**
* Recursively builds SetBuilderImpl instance with given element.
* @param e the element to process
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$Builder:build(),571,577,"/**
* Recursively fetches and returns an immutable set of elements using m1 and m2 methods.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,least,"com.google.common.collect.Comparators:least(int,java.util.Comparator)",132,142,"/**
* Creates a collector for top K elements based on the provided comparator.
* @param k number of top elements to select
* @param comparator comparison function for sorting elements
*/","* Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified
   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(least(2, comparingInt(String::length)))
   * // returns {""foo"", ""quux""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n
   * log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.util.Iterator,int)",781,802,"/**
* Selects top K elements from an iterator.
* @param iterator input iterator
* @param k number of top elements to select
* @return List of selected elements or empty list if none found
*/","* Returns the {@code k} least elements from the given iterator according to this ordering, in
   * order from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.lang.Iterable),257,259,"/**
* Recursively processes iterable elements.
* @param elements Iterable of elements to process
*/","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer
   * {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:upperCase(),887,895,"/**
* Retrieves or initializes the base encoding with uppercase characters.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:lowerCase(),897,905,"/**
* Returns the base encoding instance or generates a new one.
* @return BaseEncoding object
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(),252,255,"/**
* Converts unsigned long value to string representation.
* @return string representation of the value or an exception message if error occurs.","Returns a string representation of the {@code UnsignedLong} value, in base 10.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,aboutToAcquire,com.google.common.util.concurrent.CycleDetectingLockFactory:aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock),713,721,"/**
* Updates the lock graph node for a CycleDetectingLock instance.
* @param lock target lock object
*/",* CycleDetectingLock implementations must call this method before attempting to acquire the lock.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transform,"com.google.common.util.concurrent.ClosingFuture:transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",688,705,"/**
* Executes a ClosingFunction asynchronously using the provided Executor.
* @param function ClosingFunction to execute
* @param executor Executor service for asynchronous execution
* @return ClosingFuture containing result or null if failed
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its value. The function can use a {@link DeferredCloser} to capture objects to be closed
   * when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transform((closer, result) -> result.getRows(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to the value of the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transformAsync,"com.google.common.util.concurrent.ClosingFuture:transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",782,798,"/**
* Executes an asynchronous closing function and returns a ClosingFuture.
* @param function AsyncClosingFunction to execute
* @param executor Executor to run the function on
* @return ClosingFuture containing result or null if not found
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * that returns a {@code ClosingFuture} to its value. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
   * captured by the returned {@link ClosingFuture}).
   *
   * <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one
   * returned by the function.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code
   * ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be
   * closed.
   *
   * <p>Usage guidelines for this method:
   *
   * <ul>
   *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
   *       {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction,
   *       Executor)} instead, with a function that returns the next value directly.
   *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
   *       for every closeable object this step creates in order to capture it for later closing.
   *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
   *       ClosingFuture} call {@link #from(ListenableFuture)}.
   *   <li>In case this step doesn't create new closeables, you can adapt an API that returns a
   *       {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to
   *       {@link #withoutCloser(AsyncFunction)}
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsClosingFuture() returns a ClosingFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor);
   *
   * // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the
   * // number of written rows. openOutputFile() returns a FileOutputStream (which implements
   * // Closeable).
   * ClosingFuture<Integer> rowsFuture2 =
   *     queryFuture.transformAsync(
   *         (closer, result) -> {
   *           FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor);
   *           return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos));
   *      },
   *      executor);
   *
   * // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created).
   * ClosingFuture<List<Row>> rowsFuture3 =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   *
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   * (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside
   * {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads
   * responsible for completing the returned {@code ClosingFuture}.)
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to a {@code ClosingFuture} with the value of
   *     the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",879,896,"/**
* Executes a closing function with fallback on exception.
* @param exceptionType Class of potential exceptions
* @param fallback ClosingFunction to execute if no exception occurs
* @param executor Executor for asynchronous execution
* @return ClosingFuture containing result or fallback value
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsyncMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",975,991,"/**
* Executes an asynchronous closing function with a fallback and returns the result.
* @param exceptionType Class of exceptions to handle
* @param fallback Fallback function in case of failure
* @param executor Executor for asynchronous tasks
* @return ClosingFuture object representing the execution result
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class)",1220,1227,"/**
* Retrieves a value from a Future, throwing an exception if it fails.
* @param future asynchronous result to retrieve
* @param exceptionClass class of exception to throw on failure
* @throws X thrown exception type
*/","* Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the
   * given checked exception type. This reduces boilerplate for a common use of {@code Future} in
   * which it is unnecessary to programmatically distinguish between exception types or to extract
   * other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get})",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration)",1272,1279,"/**
* Retrieves the result of a Future with optional timeout and exception handling.
* @param future asynchronous computation to retrieve
* @param exceptionClass class of exceptions to throw on timeout or failure
* @param timeout maximum wait time in nanoseconds
* @throws X thrown if timeout is exceeded or future fails
*/","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,reschedule,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:reschedule(),607,648,"/**
* Retrieves a cancellable schedule and executes the task.
* @return Cancellable future or new FutureAsCancellable with default value
*/","* Atomically reschedules this task and assigns the new future to {@link
       * #cancellationDelegate}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,startAsync,com.google.common.util.concurrent.AbstractService:startAsync(),244,263,"/**
* Returns the service mask, performing startup logic if not already started.
* @return This service instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,stopAsync,com.google.common.util.concurrent.AbstractService:stopAsync(),265,301,"/**
* Returns the Service instance with its state masked.
* @return the current Service instance
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStarted,com.google.common.util.concurrent.AbstractService:notifyStarted(),400,426,"/**
* Transitions service state to RUNNING or STOPPING based on shutdown flag.
* @throws IllegalStateException if service is not in STARTING state
*/","* Implementing classes should invoke this method once their service has started. It will cause
   * the service to transition from {@link State#STARTING} to {@link State#RUNNING}.
   *
   * @throws IllegalStateException if the service is not {@link State#STARTING}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startAsync,com.google.common.util.concurrent.ServiceManager:startAsync(),271,289,"/**
* Starts all services and updates their states.
*@return the updated ServiceManager instance
*/","* Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It
   * is only valid to call this method if all of the services are {@linkplain State#NEW new}.
   *
   * @return this
   * @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the
   *     method is called.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,starting,com.google.common.util.concurrent.ServiceManager$ServiceListener:starting(),790,799,"/**
* Starts the service with a specified state and logging.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,running,com.google.common.util.concurrent.ServiceManager$ServiceListener:running(),801,807,"/**
* Updates service manager state to starting or running based on service status.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopping,com.google.common.util.concurrent.ServiceManager$ServiceListener:stopping(com.google.common.util.concurrent.Service$State),809,815,"/**
* Transitions service to stopping state.
* @param from current state of the service
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,terminated,com.google.common.util.concurrent.ServiceManager$ServiceListener:terminated(com.google.common.util.concurrent.Service$State),817,831,"/**
* Handles service termination and updates its state.
* @param from previous state of the service
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,failed,"com.google.common.util.concurrent.ServiceManager$ServiceListener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",833,855,"/**
* Logs and updates service state on failure.
* @param from current service state
* @param failure Throwable instance of failure
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(),303,311,"/**
* Executes running state logic and updates monitor accordingly.
* @throws Exception if an error occurs during execution.",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(),338,346,"/**
* Signals termination and releases resources.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(),607,610,"/**
* Executes specific system operations in sequence.
* @param stoppedGuard unused parameter (legacy code)
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",502,504,"/**
* Converts duration to nanoseconds and calls m2 with the result.
* @param guard Guard object
* @param time Duration to convert
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,"com.google.common.util.concurrent.AbstractService:awaitRunning(long,java.util.concurrent.TimeUnit)",321,336,"/**
* Waits until the monitored component reaches the RUNNING state or times out.
* @param timeout maximum wait time
* @param unit time unit (e.g. seconds, milliseconds)
* @throws TimeoutException if timed out waiting for RUNNING state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,"com.google.common.util.concurrent.AbstractService:awaitTerminated(long,java.util.concurrent.TimeUnit)",356,376,"/**
* Waits up to the specified timeout for the object to reach a terminal state.
* @param timeout maximum time to wait in the specified unit
* @param unit TimeUnit of the timeout value
* @throws TimeoutException if timed out waiting for terminal state
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",598,600,"/**
* Converts duration to nanoseconds and calls m2 with result.
* @param guard Guard object
* @param time Duration to convert
*/","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",840,842,"/**
* Converts duration to nanoseconds and calls m2 with result. 
* @param guard Guard object
* @param time Duration value
*/","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",886,888,"/**
* Converts and compares duration with guard's threshold.
* @param guard Guard object
* @param time Duration to be compared
*/","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(long,java.util.concurrent.TimeUnit)",612,624,"/**
* Waits for services to stop or time out, throwing TimeoutException if timed out.
* @throws TimeoutException if timeout occurs
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService)",272,277,"/**
* Executes asynchronous operation with a specified timeout.
* @param timeout maximum time to wait for result
* @param scheduledExecutor executor service for scheduling
* @return FluentFuture representing the asynchronous operation
*/","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,precomputeCharMatcher,com.google.common.base.Platform:precomputeCharMatcher(com.google.common.base.CharMatcher),37,39,"/**
* Returns a CharMatcher with a specific mask function applied.
* @param matcher input CharMatcher to modify
* @return modified CharMatcher instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(byte[],java.io.File)",268,270,"/**
* Copies binary data from array to file.
*@param from binary data in byte array
*@param to target file destination
*/","* Overwrites a file with the contents of a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.
   *
   * @param from the bytes to write
   * @param to the destination file
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$SlicedByteSource:openStream(),495,498,"/**
* Wraps input stream from a byte source.
* @throws IOException if an I/O error occurs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$SlicedByteSource:openBufferedStream(),500,503,"/**
* Wraps input stream from ByteSource into an InputStream.
* @throws IOException if underlying operation fails
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$ConcatenatedByteSource:isEmpty(),686,694,"/**
* Verifies all ByteSources, returning false on any failure.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$SlicedByteSource:isEmpty(),539,542,"/**
 * Checks if this file is empty or if its parent directory contains any files.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource$ConcatenatedByteSource:size(),725,740,"/**
* Calculates cumulative sum of values from all ByteSources.
* @return total sum or Long.MAX_VALUE if any individual value is negative
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,hash,com.google.common.io.ByteSource:hash(com.google.common.hash.HashFunction),337,341,"/**
* Computes hash code using provided hash function and updates internal state.
* @param hashFunction hash function to use for computation
* @return computed hash code value
*/","* Hashes the contents of this byte source using the given hash function.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.OutputStream)",300,302,"/**
* Copies file contents using custom stream manipulation.
* @param from input file
* @param to output stream
*/","* Copies all bytes from a file to an output stream.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.
   *
   * @param from the source file
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,copy,"com.google.common.io.Resources:copy(java.net.URL,java.io.OutputStream)",171,173,"/**
 * Streams URL content through mask operations.
 * @param from input URL stream
 * @param to output stream destination
 */","* Copies all bytes from a URL to an output stream.
   *
   * @param from the URL to read from
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.File)",323,326,"/**
* Copies file contents from 'from' to 'to', ensuring they are distinct. 
* @param from source file
* @param to target file","* Copies all the bytes from one file to another.
   *
   * <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process
   * termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you
   * need to guard against those conditions, you should employ other file-level synchronization.
   *
   * <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten
   * with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i>
   * file, the contents of that file will be deleted.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource$AsCharSource:read(),464,474,"/**
* Converts internal byte source to string using specified charset.
* @return String representation of internal data or null on failure
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toByteArray,com.google.common.io.Files:toByteArray(java.io.File),236,238,"/**
 * Computes and returns a function-specific mask value from the given File object.
 * @param file input file
 */","* Reads all bytes from a file into a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.
   *
   * @param file the file to read from
   * @return a byte array containing all the bytes from file
   * @throws IllegalArgumentException if the file is bigger than the largest possible byte array
   *     (2^31 - 1)
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toByteArray,com.google.common.io.Resources:toByteArray(java.net.URL),94,96,"/**
* Computes and returns a byte array representing a mask from the provided URL.
* @param url input URL
*/","* Reads all bytes from a URL into a byte array.
   *
   * @param url the URL to read from
   * @return a byte array containing all the bytes from the URL
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readBytes,"com.google.common.io.Files:readBytes(java.io.File,com.google.common.io.ByteProcessor)",600,610,"/**
* Reads a file using the specified byte processor.
* @param file the file to read
* @param processor the byte processor to use
* @return the processed result or null if an error occurs
*/","* Process the bytes of a file.
   *
   * <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)
   *
   * @param file the file to read
   * @param processor the object to which the bytes of the file are passed.
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asByteSource(file).read(processor)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,equal,"com.google.common.io.Files:equal(java.io.File,java.io.File)",372,390,"/**
* Determines whether two files have matching contents.
* @param file1 first file to compare
* @param file2 second file to compare
* @return true if files are identical, false otherwise
*/","* Returns true if the given files exist, are not directories, and contain the same bytes.
   *
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,equal,"com.google.common.io.MoreFiles:equal(java.nio.file.Path,java.nio.file.Path)",363,383,"/**
* Compares two file paths for equality.
* @param path1 first file path
* @param path2 second file path
* @return true if paths are equal, false otherwise
*/","* Returns true if the files located by the given paths exist, are not directories, and contain
   * the same bytes.
   *
   * @throws IOException if an I/O error occurs
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",282,288,"/**
* Redirects input stream to output file with specified charset.
* @param from input stream
* @param to output file
* @param charset character encoding scheme
*/","* Writes a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to write
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,append,"com.google.common.io.Files:append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",358,365,"/**
* Writes a CharSequence to a file with specified charset and mode.
* @param from CharSequence to write
* @param to target file path
* @param charset character encoding for writing
*/","* Appends a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to append
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This
   *     method is scheduled to be removed in October 2019.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource$ConcatenatedCharSource:length(),723,730,"/**
* Sums up values from multiple CharSources.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)",338,345,"/**
* Copies a file's content to an appendable stream.
* @param from source file
* @param charset character set for encoding/decoding
* @param to destination appendable stream
*/","* Copies all characters from a file to an appendable object, using the given character set.
   *
   * @param from the source file
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param to the appendable object
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readFirstLine,"com.google.common.io.Files:readFirstLine(java.io.File,java.nio.charset.Charset)",519,526,"/**
* Wraps legacy file reading into a modern Files API call.
* @param file the input file to read from
* @param charset the character encoding of the file content
*/","* Reads the first line from a file. The line does not include line-termination characters, but
   * does include other leading and trailing whitespace.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the first line, or null if the file is empty
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset)",544,563,"/**
* Processes file content into a list of strings.
* @param file source file to process
* @param charset character encoding for file reading
*/","* Reads all of the lines from a file. The lines do not include line-termination characters, but
   * do include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Files.asCharSource(file, charset).readLines()}.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)",577,587,"/**
* Wraps Files.asCharSource-based line reading.
* @param file input file
* @param charset character set to use
* @param callback processor for each read line
* @return result of the processing or null if empty
*/","* Streams lines from a {@link File}, stopping when our callback returns false, or we have read
   * all of the lines.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the {@link LineProcessor} to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)",122,127,"/**
* Processes a URL with the specified charset and executes a callback for each line.
* @param url URL to process
* @param charset character encoding of the URL content
* @param callback LineProcessor callback to execute on each line
* @return processed result or null if not supported
*/","* Streams lines from a URL, stopping when our callback returns false, or we have read all of the
   * lines.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the LineProcessor to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource$ConcatenatedCharSource:isEmpty(),700,708,"/**
* Checks all CharSources for validity.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode)",668,670,"/**
* Creates a mapped byte buffer from a file.
* @param file File to map
* @param mode Memory map mode (e.g. read-only, read-write)
*/","* Fully maps a file in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link
   * MapMode}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode,long)",691,694,"/**
* Creates a mapped byte buffer for the given file with specified size and mode.
* @param file file to create buffer from
* @param mode memory mapping mode (e.g. READ_ONLY, READ_WRITE)
* @param size buffer size in bytes, may not be negative
* @return MappedByteBuffer instance or null on failure
*/","* Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode,
   * long, long)} using the requested {@link MapMode}.
   *
   * <p>Files are mapped from offset 0 to {@code size}.
   *
   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created
   * with the requested {@code size}. Thus this method is useful for creating memory mapped files
   * which do not yet exist.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",238,244,"/**
* Creates and configures an ExecutorService instance.
* @param executor underlying ThreadPoolExecutor
* @param terminationTimeout timeout in specified unit for shutting down the service
* @return configured ExecutorService instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",250,256,"/**
* Returns a scheduled executor service with configured timeout.
* @param executor initial executor
* @param terminationTimeout timeout value in the specified unit
* @param timeUnit time unit for the timeout (e.g. seconds, minutes)
* @return ScheduledExecutorService instance or null if failed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",224,230,"/**
* Executes application-level operation with provided timeout.
* @param service ExecutorService instance
* @param terminationTimeout timeout duration in specified unit
* @param timeUnit TimeUnit for timeout duration
*/","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeValueFromChain,"com.google.common.cache.LocalCache$Segment:removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause)",3240,3259,"/**
* Updates reference entry in hash table and writes to queues.
* @param first current head of hash table
* @param entry updated reference entry
* @param key associated key
* @param hash hash value
* @param value new value
* @param valueReference value reference object
* @param cause removal cause
* @return new head of hash table or null if removed",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeLoadingValue,"com.google.common.cache.LocalCache$Segment:removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference)",3372,3404,"/**
* Updates or removes a value reference in the map.
* @param key key to update/remove
* @param hash hash code of the entry
* @param valueReference reference to update/remove
* @return true if updated or removed, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(),583,590,"/**
* Executes health check and subsequent operations with proper cleanup.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(long,java.util.concurrent.TimeUnit)",592,605,"/**
* Waits for services to become healthy or times out.
* @param timeout time to wait
* @param unit time unit (e.g. seconds, milliseconds)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2106,2109,"/**
* Filters a multimap by values using the specified predicate.
* @param unfiltered original multimap
* @param valuePredicate predicate to filter values
* @return filtered multimap or null if empty
*/","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.lang.Iterable),508,511,"/**
* Creates a compound ordering from iterable comparators.
* @param comparators iterable of comparators to combine
* @return Ordering instance representing the combined comparison logic
*/","* Returns an ordering which tries each given comparator in order until a non-zero result is
   * found, returning that result, and returning zero only if all comparators return zero. The
   * returned ordering is based on the state of the {@code comparators} iterable at the time it was
   * provided to this method.
   *
   * <p>The returned ordering is equivalent to that produced using {@code
   * Ordering.from(comp1).compound(comp2).compound(comp3) . . .}.
   *
   * <p>The returned object is serializable if each of the {@code comparators} is serializable.
   *
   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link
   * HashSet}, will produce non-deterministic results.
   *
   * <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},
   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the
   * collection might be empty, also provide a default comparator as the {@code identity} parameter
   * to {@code reduce}).
   *
   * @param comparators the comparators to try in order",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.util.Map),534,545,"/**
* Recursively unwraps and filters a Map to an ImmutableBiMap.
* @param map the input map
* @return filtered ImmutableBiMap or null if invalid
*/","* Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet}
   * of the original map.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:startupTimes(),641,659,"/**
* Calculates and returns a map of service load times.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toArray,com.google.common.collect.FluentIterable:toArray(java.lang.Class),779,782,"/**
* Converts collection from m1() to array of specified type.
* @param type Class of elements in the returned array
* @return Array of elements or null if not found
*/","* Returns an array containing all of the elements from this fluent iterable in iteration order.
   *
   * <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code
   * stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code
   * stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[])
   * Array.newInstance(type, len))}.
   *
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of this fluent iterable have been
   *     copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,toArray,"com.google.common.collect.Iterators:toArray(java.util.Iterator,java.lang.Class)",350,355,"/**
* Converts an Iterator to a typed array.
* @param iterator input iterator
* @param type expected element class
* @return array of elements or null if empty
*/","* Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * @param iterator the iterator to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterator have been copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedSet,com.google.common.collect.FluentIterable:toSortedSet(java.util.Comparator),669,672,"/**
* Creates an immutable sorted set of elements using the provided comparator.
* @param comparator comparator to order the elements
* @return ImmutableSortedSet containing ordered elements or null if empty
*/","* Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by
   * {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted
   * by its natural ordering, use {@code toSortedSet(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to
   * {@code stream.collect()}.
   *
   * @param comparator the function by which to sort set elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.lang.Iterable),214,220,"/**
* Creates an immutable sorted set from the given iterable elements.
* @param elements input collection to sort
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Collection)",328,331,"/**
* Creates an ImmutableSortedSet from a collection of elements.
* @param comparator Comparator to use for sorting
* @param elements Iterable of elements to include in the set
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersects,com.google.common.collect.ImmutableRangeSet:intersects(com.google.common.collect.Range),162,180,"/**
* Checks if a given range overlaps with any other range in the collection.
* @param otherRange Range to check for overlap
* @return true if overlapping, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,encloses,com.google.common.collect.ImmutableRangeSet:encloses(com.google.common.collect.Range),182,193,"/**
* Compares the current range with another for equality.
* @param otherRange the Range object to compare with
* @return true if equal, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,rangeContaining,com.google.common.collect.ImmutableRangeSet:rangeContaining(java.lang.Comparable),195,210,"/**
* Finds the first matching range for a given value.
* @param value object to search in ranges
* @return matching Range object or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,removeAll,com.google.common.collect.ForwardingListMultimap:removeAll(java.lang.Object),51,55,"/**
* Delegates call to m1() and retrieves list of V values.
* @param key nullable object used as input for m1()
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedListMultimap:removeAll(java.lang.Object),809,814,"/**
* Delegates to m1() to perform operation 2 with synchronization.
* @param key nullable object key
* @return list of V objects or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object),2310,2313,"/**
* Returns a navigable map for the given key.
* @param toKey unique identifier of type K
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,java.lang.Object)",2370,2373,"/**
* Returns a navigable map of key-value pairs within the specified range.
* @param fromKey start key (inclusive)
* @param toKey end key (exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object),2375,2378,"/**
* Returns a navigable map starting from the given key.
* @param fromKey the starting key
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RowSortedTable.java,rowMap,com.google.common.collect.RowSortedTable:rowMap(),55,56,"/**
* Returns a sorted map of masks with key-value pairs.
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,combine,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator)",157,164,"/**
* Merges values from another collector state into this one.
* @param other Collector state to merge
* @param merger Function to combine values
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,toString,com.google.common.net.MediaType:toString(),1225,1234,"/**
* Returns the function mask string, initializing it if necessary.
*/","* Returns the string representation of this media type in the format described in <a
   * href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingMap(),1642,1650,"/**
* Returns a synchronized map of keys in reverse order.
* @return NavigableMap object or null if not initialized
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object,boolean)",1673,1678,"/**
* Retrieves a navigable map range from the underlying data structure.
* @param toKey key value for the end of the range
* @param inclusive whether to include the end key in the result
* @return NavigableMap containing the specified range, or null if empty",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1751,1757,"/**
* Retrieves a navigable map segment between specified keys.
* @param fromKey starting key
* @param fromInclusive whether to include the start key
* @param toKey ending key
* @param toInclusive whether to include the end key
* @return NavigableMap object or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object,boolean)",1764,1769,"/**
* Returns a navigable map of key-value pairs starting from the given key.
* @param fromKey starting key
* @param inclusive whether to include the start key in the result
* @return NavigableMap object or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap),1587,1591,"/**
* Returns a copy of the input map.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSortedSetMultimap,com.google.common.collect.Multimaps:synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap),957,961,"/**
* Returns a synchronized version of the input multimap.
*/","* Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified
   * multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,read,com.google.common.io.CharSource:read(),290,300,"/**
* Reads and returns a string mask from a file.
*/","* Reads the contents of this source as a string.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAsync,"com.google.common.cache.LocalCache$Segment:loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2307,2324,"/**
* Refreshes cache value for specified key using provided loader.
* @param key unique identifier
* @param hash hash value
* @param loadingValueReference reference to loading value
* @param loader CacheLoader instance
* @return ListenableFuture containing refreshed value or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashMap:createWithExpectedSize(int),76,79,"/**
* Creates a compact linked hash map with estimated size.
* @param expectedSize predicted number of entries
*/","* Creates a {@code CompactLinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(),102,104,"/**
* Creates a new CompactLinkedHashMap with default capacity.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(java.util.Collection),67,72,"/**
* Creates a compact linked hash set from the given collection.
* @param collection input collection to process
* @return CompactLinkedHashSet instance or null if invalid input
*/","* Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the
   * given collection in the order returned by the collection's iterator.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(),84,87,"/**
* Creates a TreeMultimap with default ordering.
*/",* Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,"com.google.common.collect.TreeMultimap:create(java.util.Comparator,java.util.Comparator)",96,99,"/**
* Creates a TreeMultimap instance with custom comparators for keys and values.
* @param keyComparator comparator for sorting keys
* @param valueComparator comparator for sorting values
*/","* Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator
   * may be null; use {@link Ordering#natural()} to specify natural order.
   *
   * @param keyComparator the comparator that determines the key ordering
   * @param valueComparator the comparator that determines the value ordering",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap)",119,125,"/**
* Constructs a TreeMultimap from an existing Multimap.
* @param keyComparator comparator for tree ordering
* @param valueComparator comparator for tree ordering
* @param multimap existing Multimap to populate TreeMultimap
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
* Generates a function mask for the given type bounds.
* @param upperBounds array of upper type bounds
* @return TypeVariable<?> representing the function mask
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readObject,com.google.common.collect.MapMakerInternalMap$SerializationProxy:readObject(java.io.ObjectInputStream),2899,2905,"/**
* Deserializes and initializes the object's internal state from an ObjectInputStream.
* @param in input stream containing serialized data
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:<init>(java.lang.String),600,602,"/**
* Initializes a new LockGraphNode with the specified lock name.
* @param lockName unique identifier of the locked resource
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$LargeLazyStriped:<init>(int,com.google.common.base.Supplier)",480,485,"/**
* Constructs a LargeLazyStriped with specified stripes and supplier.
* @param stripes number of stripes
* @param supplier factory for creating elements in each stripe
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)",99,105,"/**
* Overloads m1 to accept a timeout and unit.
* @param timeout timeout duration in specified unit
* @param unit time unit for timeout (e.g. seconds, milliseconds)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNode,com.google.common.graph.StandardMutableValueGraph:addNode(java.lang.Object),60,71,"/**
* Checks if a node matches the mask criteria.
* @param node Node object to check
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)",85,110,"/**
* Updates edge between nodes U and V with new value.
* @param nodeU target node
* @param nodeV source node
* @param value new edge value
* @return previous value or null if new, or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doForward,com.google.common.base.CaseFormat$StringConverter:doForward(java.lang.String),178,181,"/**
* Formats input string according to target format.
* @param s input string to be formatted
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doBackward,com.google.common.base.CaseFormat$StringConverter:doBackward(java.lang.String),183,186,"/**
* Formats input string according to source and target formats.
* @param s input string to format
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Negated:matchesAllOf(java.lang.CharSequence),1530,1533,"/**
* Checks if input CharSequence matches a specific pattern.
* @param sequence input text to check
* @return true if match found, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAnyOf,com.google.common.base.CharMatcher:matchesAnyOf(java.lang.CharSequence),496,498,"/**
* Checks if input CharSequence does not match pattern m1.
* @param sequence input text to be checked
* @return true if sequence does not match, false otherwise
*/","* Returns {@code true} if a character sequence contains at least one matching BMP character.
   * Equivalent to {@code !matchesNoneOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches at least one character in the sequence
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,retainFrom,com.google.common.base.CharMatcher:retainFrom(java.lang.CharSequence),657,659,"/**
* Masks input CharSequence using m1 and m2 methods.
* @param sequence input text to be masked
*/","* Returns a string containing all matching BMP characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').retainFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""aaa""}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",714,742,"/**
* Replaces a sequence of characters with a replacement string.
* @param sequence original character sequence
* @param replacement new string to insert
*/","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement sequence. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""yaha"", ""oo"")
   * }
   *
   * ... returns {@code ""yoohoo""}.
   *
   * <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better
   * off calling {@link #replaceFrom(CharSequence, char)} directly.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the characters to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCoercedIPv4Address,com.google.common.net.InetAddresses:getCoercedIPv4Address(java.net.InetAddress),997,1039,"/**
* Computes a hash-based Inet4Address from an InetAddress.
* @param ip input InetAddress to convert
*/","* Coerces an IPv6 address into an IPv4 address.
   *
   * <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables,
   * accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses.
   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits
   * into 29 bits):
   *
   * <ul>
   *   <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that.
   *   <li>Otherwise, it hashes the upper 64 bits of the IPv6 address.
   * </ul>
   *
   * <p>A ""coerced"" IPv4 address is equivalent to itself.
   *
   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost
   * (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4
   * address that might permit elevated privileges.
   *
   * @param ip {@link InetAddress} to ""coerce""
   * @return {@link Inet4Address} represented ""coerced"" address
   * @since 7.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putString,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",353,397,"/**
* Encodes input CharSequence using specified charset.
* @param input input string
* @param charset character encoding to use
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[]),62,64,"/**
* Computes hash code for the given byte array.
* @param bytes input data to be hashed
* @return hash value as an integer",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(byte[]),59,62,"/**
 * Computes hash code using the specified byte array.
 * @param input the input byte array to calculate hash from
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,com.google.common.io.LittleEndianDataInputStream:readFully(byte[]),63,66,"/**
 * Invokes byte stream processing using ByteStreams.
 * @param b input byte array
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,iterator,com.google.common.collect.ForwardingCollection:iterator(),59,62,"/**
* Calls m1() to fetch an iterator and delegates its iteration to it.
* @return iterator of type E or null if m1() returns null
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,size,com.google.common.collect.ForwardingCollection:size(),64,67,"/**
 * Calls and returns the result of m2() from the returned value of m1().
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,removeAll,com.google.common.collect.ForwardingCollection:removeAll(java.util.Collection),69,73,"/**
* Calls m1() and delegates its result to perform operation on the given collection.
* @param collection input collection to operate on
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,isEmpty,com.google.common.collect.ForwardingCollection:isEmpty(),75,78,"/**
 * Calls m1() to delegate execution and returns the result of m2() on the returned object.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,contains,com.google.common.collect.ForwardingCollection:contains(java.lang.Object),80,83,"/**
* Calls m1() and delegates execution of m2() to its result.
* @param object input object to pass to m2()
* @return true if m2() returns true, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,add,com.google.common.collect.ForwardingCollection:add(java.lang.Object),85,89,"/**
* Calls m1() and delegates to its m2(E) method with provided element.
* @param element object to be processed by m1()'s m2(E) method
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,remove,com.google.common.collect.ForwardingCollection:remove(java.lang.Object),91,95,"/**
* Delegates call to m1() with provided object.
* @param object object to pass to m1()
* @return result of m1().m2(object)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,containsAll,com.google.common.collect.ForwardingCollection:containsAll(java.util.Collection),97,100,"/**
* Delegates call to internal implementation of Collection operation.
* @param collection input collection to operate on
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,addAll,com.google.common.collect.ForwardingCollection:addAll(java.util.Collection),102,106,"/**
* Delegates invocation of m2() on UserProfile instance fetched by m1().
* @param collection collection to pass to m2()
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,retainAll,com.google.common.collect.ForwardingCollection:retainAll(java.util.Collection),108,112,"/**
* Calls m1() and delegates to its m2() method with provided collection.
* @param collection input collection to pass to m2()
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,clear,com.google.common.collect.ForwardingCollection:clear(),114,117,"/**
 * Calls m2() on the result of invoking m1().
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(),119,122,"/**
* Calls m1() and delegates to its m2() method.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(java.lang.Object[]),124,129,"/**
* Delegate to M1 to perform operation on input array.
* @param array input array of type T (nullable)
* @return array of type T (nullable)",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,java.time.Duration)",165,167,"/**
* Creates a rate limiter with specified permits per second and warm-up period.
* @param permitsPerSecond rate limit in units per second
* @param warmupPeriod duration to warm up the rate limiter before enforcing limits
*/","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,headMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",97,100,"/**
* Creates a new sorted multiset with the specified upper bound.
* @param upperBound upper bound for the set
* @param boundType type of bounds to apply
* @return SortedMultiset object
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,subMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,110,"/**
* Creates a SortedMultiset instance with bounds.
* @param lowerBound the lower bound of the multiset
* @param lowerBoundType type of the lower bound (inclusive or exclusive)
* @param upperBound the upper bound of the multiset
* @param upperBoundType type of the upper bound (inclusive or exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,tailMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",112,115,"/**
* Returns a new sorted multiset based on the result of applying m2 to the
* existing multiset with the specified lower bound and bound type.",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,unmodifiableCollectionSubclass,com.google.common.collect.AbstractSortedSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),59,67,"/**
* Converts a Collection to a SortedSet using either m1 or m2, 
* depending on the type of input. @param collection Collection to convert
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:navigableKeySet(),3597,3600,"/**
* Returns a navigable set of keys using delegate's key set.
* @return NavigableSet of keys
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingKeySet(),3602,3605,"/**
* Returns a navigable set of keys from delegate's mapping.
* @return Set of keys in ascending order",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomMultimap:unmodifiableCollectionSubclass(java.util.Collection),240,254,"/**
* Converts a Collection to a set with optimized mask operations.
* @param collection input collection
* @return set with optimized mask operations or original collection if not applicable
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),447,457,"/**
* Converts a Collection to a Set with optimized masking functionality.
* @param collection input collection
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",2042,2050,"/**
* Retrieves a navigable set of elements within the specified range.
* @param fromElement starting element (inclusive if fromInclusive)
* @param fromInclusive whether start is inclusive
* @param toElement ending element (inclusive if toInclusive)
* @param toInclusive whether end is inclusive
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:headSet(java.lang.Object,boolean)",2052,2055,"/**
* Retrieves a navigable set of elements from the delegate.
* @param toElement element to search for (may be null)
* @param inclusive whether to include the toElement in the result
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:tailSet(java.lang.Object,boolean)",2057,2060,"/**
* Retrieves a navigable set of elements from the delegate collection.
* @param fromElement starting element (inclusive if true)
* @param inclusive whether to include the start element
* @return NavigableSet containing matching elements or an empty set if none found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,createElementSet,com.google.common.collect.UnmodifiableSortedMultiset:createElementSet(),54,57,"/**
* Returns a navigable set of function masks.
* @return NavigableSet of E objects
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,entries,com.google.common.collect.SetMultimap:entries(),97,98,"/**
* Returns a set of entries containing function mask information.
*/","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,java.lang.Object)",3607,3610,"/**
* Returns a sorted map of values within the given key range.
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object),3622,3625,"/**
* Creates a new sorted map with a single entry.
* @param toKey key to be inserted in the map
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object),3632,3635,"/**
* Returns a sorted map view of this map, starting from the given key.
* @param fromKey key to start the map view from
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",43,44,"/**
* Schedules a one-time task to run after a specified delay.
* @param command Runnable task to execute
* @param delay time until execution in given unit
* @param unit time unit for the delay (e.g. seconds, minutes)
* @return scheduled future or null if not successful
*/",* @since 15.0 (previously returned ScheduledFuture),,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(com.google.common.cache.CacheLoader),1029,1033,"/**
* Creates a local loading cache with the given loader.
* @param loader CacheLoader to fetch values
*/","* Builds a cache, which either returns an already-loaded value for a given key or atomically
   * computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently
   * loading the value for this key, simply waits for that thread to finish and returns its loaded
   * value. Note that multiple threads can concurrently load values for distinct keys.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @param loader the cache loader used to obtain new values
   * @return a cache having the requested features",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(),1047,1051,"/**
* Creates and returns a local cache instance with customized type parameters.
* @param none
* @return LocalCache object for custom key-value types
*/","* Builds a cache which does not automatically load values when keys are requested.
   *
   * <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code
   * CacheLoader}.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @return a cache having the requested features
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,orderedBy,com.google.common.collect.ImmutableSortedMultiset:orderedBy(java.util.Comparator),407,409,"/**
* Creates a Builder instance with custom comparison logic.
* @param comparator Comparator to use when building
*/","* Returns a builder that creates immutable sorted multisets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,reverseOrder,com.google.common.collect.ImmutableSortedMultiset:reverseOrder(),419,421,"/**
* Creates a Builder instance with a custom ordering.
*/","* Returns a builder that creates immutable sorted multisets whose elements are ordered by the
   * reverse of their natural ordering.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,naturalOrder,com.google.common.collect.ImmutableSortedMultiset:naturalOrder(),433,435,"/**
* Creates a Builder instance for ordering with mask m1.
* @return Builder instance or null if invalid
*/","* Returns a builder that creates immutable sorted multisets whose elements are ordered by their
   * natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This
   * method provides more type-safety than {@link #builder}, as it can be called only for classes
   * that implement {@link Comparable}.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,com.google.common.collect.EnumBiMap:create(java.util.Map),83,88,"/**
* Creates an Enum-based BiMap from the given Map.
* @param map input map to convert
*/","* Returns a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the
   * specified map must contain at least one mapping, in order to determine the key and value types.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no
   *     mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.util.Map),71,76,"/**
* Creates a bi-directional enum hash map from the given map.
* @param map input map to transform
* @return EnumHashBiMap instance or null if transformation fails
*/","* Constructs a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input
   * bimap. Otherwise, the specified map must contain at least one mapping, in order to determine
   * the key type.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap}
   *     instance and contains no mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedSetMultimap.java,replaceValues,"com.google.common.collect.SortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",88,90,"/**
* Returns a sorted set of values based on the provided key.
* @param key the key used for sorting
* @param values the iterable collection of values to be sorted
*/","* Stores a collection of values with the same key, replacing any existing values for that key.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the
   * {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",62,66,"/**
* Delegates to m1() to fetch a set of values associated with the given key.
* @param key unique identifier
* @param values iterable of values (may be null)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isPermutation,"com.google.common.collect.Collections2:isPermutation(java.util.List,java.util.List)",694,701,"/**
* Compares two lists for functional mask equivalence.
* @param first the first list to compare
* @param second the second list to compare
* @return true if lists have same elements and counts, false otherwise
*/",Returns {@code true} if the second list is a permutation of the first.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:predecessorsMultiset(),69,76,"/**
* Retrieves a multiset of predecessors for the given graph. 
* If not cached, initializes it using edge map data and caches the result.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:successorsMultiset(),85,92,"/**
* Computes and caches multiset of successors for the given reference.
* @return Multiset<N> object representing successors or null if not computed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodesMultiset,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodesMultiset(),65,72,"/**
* Retrieves a multiset of adjacent nodes, lazily initialized and cached.
* @return Multiset<N> of adjacent nodes or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(),77,80,"/**
* Creates an empty multimap with generic key and value types.
*/","* Creates a new, empty {@code ArrayListMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(com.google.common.collect.Multimap),109,112,"/**
* Creates a new ArrayListMultimap instance from an existing Multimap.
*/","* Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(),66,69,"/**
* Creates an empty HashMultimap instance.
*/","* Creates a new, empty {@code HashMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(),151,154,"/**
* Creates an empty LinkedListMultimap instance. 
*/","Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(com.google.common.collect.Multimap),175,178,"/**
* Creates a new linked list Multimap from an existing one.
* @param multimap input Multimap to transform
* @return new LinkedListMultimap instance with same key-value pairs
*/","* Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code
   * Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the
   * input multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(com.google.common.collect.Multimap),119,124,"/**
* Creates a new LinkedHashMultimap from an existing Multimap.
* @param multimap the source Multimap
* @return a new LinkedHashMultimap instance
*/","* Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order
   * as the input multimap, except for excluding duplicate mappings.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,build,com.google.common.graph.NetworkBuilder:build(),194,196,"/**
* Creates a new mutable network instance with updated node and edge types.
*/",Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,<init>,com.google.common.graph.StandardMutableGraph:<init>(com.google.common.graph.AbstractGraphBuilder),35,37,"/**
* Initializes a new graph with the given builder.
* @param builder GraphBuilder instance to set up the graph's structure
*/",Constructs a {@link MutableGraph} with the properties specified in {@code builder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,build,com.google.common.graph.ValueGraphBuilder:build(),189,191,"/**
* Creates a masked mutable value graph.
*/","* Returns an empty {@link MutableValueGraph} with the properties of this {@link
   * ValueGraphBuilder}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,putAll,com.google.common.collect.ImmutableTable$Builder:putAll(com.google.common.collect.Table),251,257,"/**
* Processes each cell in the given table.
* @param table Table to iterate over
* @return The Builder instance for method chaining
*/","* Associates all of the given table's keys and values in the built table. Duplicate row key
     * column key pairs are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code table} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.lang.Iterable),395,400,"/**
* Updates builder with iterable of key-value pairs.
* @param entries collection of entries to add
*/","* Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed,
     * and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.util.Map),479,482,"/**
* Merges an existing map into this builder using its key-value transformation.","* Associates all of the given map's keys and values in the built map. If the same key is put
     * more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep
     * the last value put for that key.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.lang.Iterable),671,676,"/**
* Adds multiple key-value pairs to builder.
* @param entries iterable of entries to add
*/","* Adds all the given entries to the built map. Duplicate keys, according to the comparator
     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to
     * fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap$AsMap:get(java.lang.Object),186,196,"/**
* Retrieves filtered collection of values based on the provided key.
* @param key object to filter by
* @return Collection of values or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap:get(java.lang.Object),124,127,"/**
* Filters unfiltered collection based on the provided key.
* @param key unique identifier to filter by
* @return filtered collection or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createEntries,com.google.common.collect.FilteredEntryMultimap:createEntries(),129,132,"/**
* Returns collection of entries based on unfiltered input and predicate.
* @return Collection of entries (K, V) or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
* Applies predicate to filtered entries and updates them if matched.
* @param predicate filter function for entries
* @return true if any entries were updated, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap)",3377,3381,"/**
* Constructs a filtered entry bi-map with the given delegate and inverse mappings.
* @param delegate underlying bi-map
* @param inverse inverse mapping of values to keys
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryNavigableMap:<init>(java.util.NavigableMap,com.google.common.base.Predicate)",3238,3243,"/**
* Creates a filtered navigable map from an unfiltered one.
* @param unfiltered original NavigableMap to filter
* @param entryPredicate predicate to select entries to include in the filtered map
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntrySortedMap:<init>(java.util.SortedMap,com.google.common.base.Predicate)",3126,3129,"/**
* Constructs a filtered map view of the specified sorted map,
* only including entries that match the given predicate.
* @param unfiltered original sorted map
* @param entryPredicate filter condition for included entries
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)",2803,2807,"/**
* Creates a filtered map with entries that match the given predicate.
* @param map original unfiltered map
* @param entryPredicate predicate to filter entries by
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,degree,com.google.common.graph.AbstractNetwork:degree(java.lang.Object),144,151,"/**
* Calculates the mask value for a given node.
* @param node Node object
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,com.google.common.graph.AbstractNetwork:edgesConnecting(com.google.common.graph.EndpointPair),184,188,"/**
* Recursively fetches and combines endpoint data.
* @param endpoints EndpointPair object containing endpoint IDs
* @return A set of E objects or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,"com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",205,216,"/**
* Determines the functional mask between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return functional mask or null if no edge exists
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,com.google.common.collect.CompactHashMap$MapEntry:setValue(java.lang.Object),934,950,"/**
* Updates or inserts a value into the compact hash map.
* @param value new value to add
* @return previous value at this key or null if not present
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,readObject,com.google.common.collect.CompactHashMap:readObject(java.io.ObjectInputStream),1126,1140,"/**
* Deserializes a map from the given ObjectInputStream.
* @throws IOException if serialization fails
* @throws ClassNotFoundException if class not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,readObject,com.google.common.collect.CompactHashSet:readObject(java.io.ObjectInputStream),707,720,"/**
* Deserializes a collection of elements from the given ObjectInputStream.
* @param stream input stream containing serialized data
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",209,227,"/**
* Creates a collector that groups elements by custom key and value functions.
* @param comparator comparison function for keys
* @param keyFunction function to extract key from each element
* @param valueFunction function to extract value from each element
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",70,73,"/**
* Creates an ImmutableSortedMultiset with a mask based on the given upper bound and bound type.
* @param upperBound element value to set as the upper bound
* @param boundType BoundType enum value (e.g. OPEN, CLOSED) that determines the boundary behavior
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",75,78,"/**
* Creates an immutable sorted multiset from elements greater than or equal to the specified lower bound.
* @param lowerBound minimum value for inclusion in the multiset
* @param boundType type of bounds (inclusive/exclusive) for the lower bound
* @return ImmutableSortedMultiset object containing qualifying elements",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(com.google.common.collect.RangeSet),784,787,"/**
* Converts RangeSet to a collection of values.
* @param ranges input range set
*/","* Add all ranges from the specified range set to this builder. Adjacent ranges are permitted
     * and will be merged, but overlapping ranges will cause an exception when {@link #build()} is
     * called.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,combine,com.google.common.collect.ImmutableRangeSet$Builder:combine(com.google.common.collect.ImmutableRangeSet$Builder),804,808,"/**
* Configures function mask using provided Builder.
* @param builder input builder with ranges to apply",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$Complement:remove(com.google.common.collect.Range),661,664,"/**
* Removes specified range from the tree's range set.
* @param rangeToRemove range to be removed from the set
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$SubRangeSet:add(com.google.common.collect.Range),890,898,"/**
* Adds a range to the tree set and updates subtree.
* @param rangeToAdd Range to be added
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$Complement:add(com.google.common.collect.Range),656,659,"/**
* Adds a new range to the tree range set.
* @param rangeToAdd range to be added 
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$SubRangeSet:remove(com.google.common.collect.Range),900,905,"/**
* Removes specified range from this tree.
* @param rangeToRemove Range to be removed, must contain restriction
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,clear,com.google.common.collect.TreeRangeSet$SubRangeSet:clear(),912,915,"/**
* Applies a mask using the specified restriction.
* @param restriction the restriction to apply as a mask
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subRangeSet,com.google.common.collect.ImmutableRangeSet:subRangeSet(com.google.common.collect.Range),515,526,"/**
* Computes the function mask for a given range.
* @param range input Range object
* @return updated ImmutableRangeSet or original set if unchanged
*/",Returns a view of the intersection of this range set with the given range.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(int,int)",105,107,"/**
* Creates a contiguous set of integers within the specified range.
* @param lower inclusive lower bound
* @param upper exclusive upper bound
*/","* Returns a nonempty contiguous set containing all {@code int} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(long,long)",117,119,"/**
* Creates a contiguous set of integers within the specified range.
* @param lower smallest value (inclusive)
* @param upper largest value (inclusive)
*/","* Returns a nonempty contiguous set containing all {@code long} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(int,int)",129,131,"/**
* Creates a contiguous set of integers within the specified range.
* @param lower lower bound (inclusive)
* @param upper upper bound (inclusive)
*/","* Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(long,long)",141,143,"/**
* Creates a contiguous set of integers within the specified range.
* @param lower inclusive lower bound
* @param upper inclusive upper bound
* @return ContiguousSet containing all integers in the range
*/","* Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,size,com.google.common.collect.ImmutableRangeSet$AsSet:size(),580,595,"/**
* Calculates the size of a range set by summing sub-set sizes and converting to integer.
* @return non-negative integer size or -1 if overflow occurs
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,indexOf,com.google.common.collect.ImmutableRangeSet$AsSet:indexOf(java.lang.Object),678,694,"/**
* Calculates the score for a given target object.
* @param target object to calculate score for
* @return non-negative score or -1 if invalid target
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersectionInCurrentDomain,com.google.common.collect.RegularContiguousSet:intersectionInCurrentDomain(com.google.common.collect.Range),47,51,"/**
* Creates a contiguous set of values based on the given range and another value.
* @param other Range object to compare with
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersection,com.google.common.collect.RegularContiguousSet:intersection(com.google.common.collect.ContiguousSet),195,209,"/**
* Merges two contiguous sets by mask operation.
* @param other the set to merge with
* @return merged ContiguousSet or original if disjoint
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:containsKey(java.lang.Object),654,657,"/**
* Checks if a mask exists based on the provided key.
* @param key unique identifier or object to search by
* @return true if mask exists, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",481,488,"/**
* Creates a navigable map of ranges for the given cut values and inclusivity.
* @param fromKey starting cut value
* @param fromInclusive whether start is inclusive
* @param toKey ending cut value
* @param toInclusive whether end is inclusive
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",490,493,"/**
* Computes and returns a navigable map of ranges for the given cut key.
* @param toKey Cut object defining the range boundaries
* @param inclusive whether the end-point is inclusive or exclusive
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",495,498,"/**
* Returns a navigable map of ranges for the given cut key and inclusivity.
* @param fromKey Cut object defining the range
* @param inclusive true if the end point is inclusive, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",313,320,"/**
* Creates a NavigableMap of cuts within the specified range.
* @param fromKey lower bound cut
* @param fromInclusive whether to include lower bound in map
* @param toKey upper bound cut
* @param toInclusive whether to include upper bound in map
* @return NavigableMap of Cut objects or null if invalid input",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:headMap(com.google.common.collect.Cut,boolean)",322,325,"/**
* Computes a navigable map of ranges from the given cut key.
* @param toKey Cut object defining the upper bound
* @param inclusive whether to include the end point in the range
* @return NavigableMap of Range objects or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:tailMap(com.google.common.collect.Cut,boolean)",327,330,"/**
* Retrieves a navigable map of cuts and ranges based on the given cut key.
* @param fromKey Cut key to query
* @param inclusive whether to include the cut in the result
* @return NavigableMap of cuts and ranges or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",713,722,"/**
* Converts cut-based query parameters to range-based query.
* @param fromKey the lower bound cut
* @param fromInclusive whether the lower bound is inclusive
* @param toKey the upper bound cut
* @param toInclusive whether the upper bound is inclusive
* @return a NavigableMap representing the range-based query
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",724,727,"/**
* Returns a navigable map of cuts and ranges based on the provided cut key.
* @param toKey Cut object representing the key
* @param inclusive Flag indicating whether to include the key in range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",729,732,"/**
* Retrieves a navigable map of ranges for the given cut key.
* @param fromKey Cut object to base ranges on
* @param inclusive whether to include the cut key in the range
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:containsKey(java.lang.Object),739,742,"/**
* Checks if a mask exists by its key.
* @param key unique identifier of the mask
* @return true if the mask is found, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalescedRange,"com.google.common.collect.TreeRangeMap:coalescedRange(com.google.common.collect.Range,java.lang.Object)",159,170,"/**
* Coalesces the given range with adjacent map entries based on lower and upper bounds.
* @param range Range to coalesce
* @param value Value used for coalescing
*/",Computes the coalesced range for the given range+value - does not mutate the map.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:readResolve(),732,734,"/**
* Returns an immutable range set mask.
* @return ImmutableRangeSet object representing the mask
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap:remove(com.google.common.collect.Range),211,259,"/**
* Removes a specified range from the data structure.
* @param rangeToRemove Range to be removed
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,split,com.google.common.collect.TreeRangeMap:split(com.google.common.collect.Cut),261,278,"/**
* Updates the range map entries and cuts based on the given cut.
* @param cut Cut object to process
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNodeInternal,com.google.common.graph.StandardMutableNetwork:addNodeInternal(java.lang.Object),69,74,"/**
* Retrieves network connections for a given node.
* @param node the node to fetch connections for
* @return NetworkConnections object or null if not found
*/","* Adds {@code node} to the graph and returns the associated {@link NetworkConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",257,283,"/**
* Creates a collector that groups input elements into an immutable map.
* @param keyFunction function to extract the enum key from each element
* @param valueFunction function to extract the value for each key
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",285,309,"/**
* Creates a Collector to accumulate Enum-Values into an ImmutableMap.
* @param keyFunction function to extract enum key from input
* @param valueFunction function to extract value for each enum key
* @param mergeFunction binary operator to combine values with same key
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.util.Map),687,703,"/**
* Recursively converts a Map to an immutable form.
* @param map input map to process
* @return ImmutableMap representation or delegated result
*/","* Returns an immutable map containing the same entries as {@code map}. The returned map iterates
   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}
   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,row,com.google.common.collect.ImmutableTable:row(java.lang.Object),362,367,"/**
* Fetches a map of function masks by row key.
* @param rowKey unique row identifier
* @return immutable map of function masks or empty map if not found
*/","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code rowKey} is {@code null}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowKeySet,com.google.common.collect.ImmutableTable:rowKeySet(),369,372,"/**
* Returns an immutable set of function masks.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeRange,"com.google.common.collect.Lists$ReverseList:removeRange(int,int)",902,905,"/**
* Applies mask operation between specified indices.
* @param fromIndex starting index of mask operation
* @param toIndex ending index of mask operation
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,iterator,com.google.common.collect.DescendingImmutableSortedSet:iterator(),47,50,"/**
 * Returns an iterator to iterate over elements with a specified mask.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,lower,com.google.common.collect.ImmutableSortedSet:lower(java.lang.Object),721,725,"/**
* Applies mask to input element using iterators.
* @param e input element to be masked
* @return masked element or null if null input
*/",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,floor,com.google.common.collect.ImmutableSortedSet:floor(java.lang.Object),730,733,"/**
* Applies mask functions to input element and returns result. 
* @param e input element subject to masking operations 
*/",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,last,com.google.common.collect.ImmutableSortedSet:last(),757,760,"/**
* Returns a FUNC_MASK value by invoking nested operations m1 and m2.
* @return E type mask value
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newTypeVariableImpl,"com.google.common.reflect.Types:newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",316,324,"/**
* Creates a TypeVariable instance for the given generic declaration.
* 
* @param genericDeclaration The generic declaration to create the type variable for
* @param name Name of the type variable
* @param bounds Array of bounds for the type variable
* @return A TypeVariable instance or null if creation fails
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Iterator),272,283,"/**
* Creates an immutable list of elements from a filtered iterator.
* @param elements input iterator with filtering method m1()
*/","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,build,com.google.common.collect.ImmutableRangeMap$Builder:build(),153,170,"/**
* Constructs an ImmutableRangeMap from entries, validating and merging overlapping ranges.
* @param entries Entry array containing range-value pairs
*/","* Returns an {@code ImmutableRangeMap} containing the associations previously added to this
     * builder.
     *
     * @throws IllegalArgumentException if any two ranges inserted into this builder overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,copyOf,com.google.common.collect.ImmutableRangeMap:copyOf(com.google.common.collect.RangeMap),84,98,"/**
* Converts a RangeMap to an ImmutableRangeMap.
* @param rangeMap input RangeMap
* @return ImmutableRangeMap or null if not convertible
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,build,com.google.common.collect.ImmutableRangeSet$Builder:build(),815,845,"/**
* Merges overlapping ranges into a single set.
*/","* Returns an {@code ImmutableRangeSet} containing the ranges added to this builder.
     *
     * @throws IllegalArgumentException if any input ranges have nonempty overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSortedEntries,"com.google.common.collect.ImmutableSortedMultiset:copyOfSortedEntries(java.util.Comparator,java.util.Collection)",297,315,"/**
* Creates an ImmutableSortedMultiset from a collection of entries.
* @param comparator comparison function for elements
* @param entries collection of weighted entries to aggregate
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,ofImmutable,"com.google.common.graph.DirectedGraphConnections:ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function)",178,231,"/**
* Builds directed graph connections from incident edges.
* @param thisNode current node
* @param incidentEdges edge pairs between nodes
* @param successorNodeToValueFn function to map successors to values
* @return DirectedGraphConnections object",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,parseJavaClassPath,com.google.common.reflect.ClassPath:parseJavaClassPath(),636,651,"/**
* Constructs immutable list of URLs for Java class path entries.
* @return List of URLs or empty list if none found
*/","* Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain
   * System#getProperty system property}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getParameters,com.google.common.reflect.Invokable:getParameters(),271,284,"/**
* Creates a list of function parameters.
*/","* Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor
   * of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code
   * this} parameter of the enclosing class is excluded from the returned parameters.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getExceptionTypes,com.google.common.reflect.Invokable:getExceptionTypes(),287,297,"/**
* Builds and returns a list of throwable type tokens.
*/",Returns all declared exception types of this {@code Invokable}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector$3:collectTypes(java.lang.Iterable),1380,1387,"/**
* Counts occurrences of each type in the given iterable.
* @param types iterable of elements to count
* @return immutable list of unique types with their counts",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion:usedInGenericType(java.lang.reflect.Type[]),644,650,"/**
* Recursively flattens a nested array of Type objects into a single list.
* @param types nested array of Type objects
* @return flat ImmutableList<Type> or empty if null input
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,wrapTasks,com.google.common.util.concurrent.WrappingExecutorService:wrapTasks(java.util.Collection),83,90,"/**
* Creates an immutable list of callable tasks with added mask functionality.
* @param tasks collection of callable tasks to transform
* @return ImmutableList of Callable tasks with mask applied
*/","* Wraps a collection of tasks.
   *
   * @throws NullPointerException if any element of {@code tasks} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,com.google.common.collect.ImmutableList:sortedCopyOf(java.lang.Iterable),317,323,"/**
* Converts an iterable of comparable elements to a sorted immutable list.
* @param elements input iterable
* @return ImmutableList object in ascending order or null if empty
*/","* Returns an immutable list containing the given elements, sorted according to their natural
   * order. The sorting algorithm used is stable, so elements that compare as equal will stay in the
   * order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code
   * asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,"com.google.common.collect.ImmutableList:sortedCopyOf(java.util.Comparator,java.lang.Iterable)",340,348,"/**
* Sorts and returns an immutable list of elements using the provided comparator.
* @param comparator function to compare elements
* @param elements iterable collection of elements to sort
*/","* Returns an immutable list containing the given elements, in sorted order relative to the
   * specified comparator. The sorting algorithm used is stable, so elements that compare as equal
   * will stay in the order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its
   * {@code asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])",42,44,"/**
* Initializes a regular entry set from an immutable map and array of entries.
* @param map the underlying immutable map
* @param entries the array of entries to initialize the set with
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,create,com.google.common.collect.JdkBackedImmutableMultiset:create(java.util.Collection),40,57,"/**
* Creates an ImmutableMultiset from a collection of Entry objects.
* @param entries collection of entries to convert
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,<init>,"com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])",42,44,"/**
* Wraps an immutable collection with an immutable list.
* @param delegate underlying collection
* @param array elements to add to the list
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedSet,com.google.common.collect.CollectCollectors:toImmutableSortedSet(java.util.Comparator),82,90,"/**
* Creates a collector for an immutable sorted set.
* @param comparator comparison function for sorting elements
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,readResolve,com.google.common.collect.ImmutableSortedSet$SerializedForm:readResolve(),868,871,"/**
* Builds and returns a masked object using provided comparator and elements.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Iterator)",280,283,"/**
* Creates an immutable sorted set from a collection of elements.
* @param comparator comparison function for sorting
* @param elements iterator of elements to include in the set
* @return ImmutableSortedSet instance
*/","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableBiMap:fromEntryArray(int,java.util.Map$Entry[])",68,114,"/**
* Initializes and populates an immutable bi-map from a given array of entries.
* @param n number of elements to process
* @param entryArray array of entries to transform
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildJdkBacked,com.google.common.collect.ImmutableMap$Builder:buildJdkBacked(),629,644,"/**
* Creates an immutable map with a specific internal structure.
* @return ImmutableMap instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableMap:fromEntryArray(int,java.util.Map$Entry[],boolean)",87,102,"/**
* Creates an immutable map from the given array.
* @param n number of buckets
* @param entryArray array of key-value pairs
* @param throwIfDuplicateKeys whether to throw on duplicate keys
* @return ImmutableMap instance or null if failed
*/","* Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace
   * the entries in entryArray with its own entry objects (though they will have the same key/value
   * contents), and may take ownership of entryArray.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap$2:subRangeMap(com.google.common.collect.Range),327,402,"/**
* Creates a new range map for the specified sub-range of ranges.
*@param range sub-range to process
*@return new ImmutableRangeMap instance or null if empty
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,getSubMap,"com.google.common.collect.ImmutableSortedMap:getSubMap(int,int)",919,928,"/**
* Returns a sub-map of this map from the specified range.
* @param fromIndex inclusive start index
* @param toIndex exclusive end index
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getSubMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:getSubMultiset(int,int)",117,128,"/**
* Creates a sorted multiset view of the underlying data.
* @param from start index (inclusive)
* @param to end index (exclusive)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headSetImpl,"com.google.common.collect.RegularImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",247,250,"/**
* Generates an immutable sorted set from a specified element and inclusivity flag.
* @param toElement the target element
* @param inclusive whether the result should include this element
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.RegularImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",267,270,"/**
* Computes an immutable sorted set of elements using masks.
* @param fromElement element to start with
* @param inclusive whether to include the element in the result
* @return ImmutableSortedSet containing filtered elements
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffixIndex,com.google.common.net.InternetDomainName:publicSuffixIndex(),180,187,"/**
* Computes and returns the public suffix index mask.
* @return integer mask value or cached value if initialized
*/","* The index in the {@link #parts()} list at which the public suffix begins. For example, for the
   * domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code
   * blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public
   * suffix was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffixIndex,com.google.common.net.InternetDomainName:registrySuffixIndex(),195,202,"/**
* Calculates the function mask index.
* @return registry suffix index or a default value if not initialized
*/","* The index in the {@link #parts()} list at which the registry suffix begins. For example, for
   * the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code
   * co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix
   * was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.lang.Iterable)",486,496,"/**
* Creates an immutable sorted map from the given entries.
* @param comparator comparison function for keys
* @param sameComparator whether to reuse previous comparator
* @param entries iterable of key-value pairs
*/","* Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed
   * that they do not need to be sorted or checked for dupes.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumSetGeneric,com.google.common.collect.CollectCollectors:toImmutableEnumSetGeneric(),97,105,"/**
* Creates an unordered collector for enums that accumulates into an ImmutableSet.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Collection),175,207,"/**
* Creates an immutable set from a collection.
* @param elements Collection to convert
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$EntrySet:contains(java.lang.Object),2746,2759,"/**
* Checks if an object meets the mask criteria.
* @param o object to check
* @return true if object matches, false otherwise
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$KeySet:contains(java.lang.Object),2693,2696,"/**
* Checks if an object matches a specific mask.
* @param o Object to check
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHole,"com.google.common.collect.MinMaxPriorityQueue:fillHole(int,java.lang.Object)",444,464,"/**
* Fetches move description for given index and trickle.
* @param index unique move identifier
* @param toTrickle value to be moved
* @return MoveDesc object or null if not found
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(com.google.common.collect.TreeBasedTable),122,129,"/**
* Creates a new TreeBasedTable with transformed data from the input table.
* @param table original tree-based table to transform
* @return new TreeBasedTable object with updated data
*/","* Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code
   * TreeBasedTable}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object),1514,1517,"/**
* Returns an empty SortedSet with default comparator.
* @param toElement ignored (default behavior)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,java.lang.Object)",1556,1559,"/**
* Returns elements in the set between 'fromElement' and 'toElement'.
* @param fromElement starting element (inclusive)
* @param fromInclusive whether 'fromElement' is included
* @param toElement ending element (exclusive)
* @param toInclusive whether 'toElement' is included",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object),1568,1571,"/**
* Returns a sorted set of elements starting from the specified element.
* @param fromElement starting element for the set
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset:add(java.lang.Object,int)",257,277,"/**
* Inserts or updates element in the AVL tree with given occurrences.
* @param element item to insert/update
* @param occurrences number of times to insert/update
* @return 0 on successful insertion/update; non-zero on conflict (inserting at position 0)
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,deleteMe,com.google.common.collect.TreeMultiset$AvlNode:deleteMe(),885,909,"/**
* Rebalances AVL tree by rotating nodes.
* @return root node of rebalanced tree
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int)",484,487,"/**
* Creates a Bloom filter with estimated insertions.
* @param funnel input data transformer
* @param expectedInsertions number of elements to be added
*/","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtFloor,com.google.common.math.BigIntegerMath:sqrtFloor(java.math.BigInteger),253,295,"/**
* Computes a square root using the functional composition method.
* @param x input value for which to compute the square root
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$Builder:add(java.lang.Object),515,523,"/**
* Processes an element, updating the internal state.
* @param element input data to process
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:add(java.lang.Object),665,668,"/**
* Creates a set builder with default capacity and initializes it with given element.
* @param e element to add to the set
* @return SetBuilderImpl instance
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawTypes,com.google.common.reflect.TypeToken:getRawTypes(),1093,1125,"/**
* Returns a set of classes that are supersets of the given type.
*@return set of superset classes
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,greatest,"com.google.common.collect.Comparators:greatest(int,java.util.Comparator)",164,167,"/**
* Returns a collector that groups elements using the provided comparator.
* @param k grouping threshold
* @param comparator comparison function for grouping
*/","* Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified
   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(greatest(2, comparingInt(String::length)))
   * // returns {""elephant"", ""banana""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently
   * takes O(n log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.lang.Iterable,int)",745,763,"/**
* Truncates and processes elements from an iterable to a list of type E.
* @param iterable input collection
* @param k maximum element count
* @return List of type E or null if not processed
*/","* Returns the {@code k} least elements of the given iterable according to this ordering, in order
   * from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.util.Iterator,int)",842,844,"/**
* Applies masking operation to iterator elements.
* @param iterator iterator over elements of type E
* @param k integer mask value
* @return list of masked elements of type E
*/","* Returns the {@code k} greatest elements from the given iterator according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catching,"com.google.common.util.concurrent.ClosingFuture:catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",873,876,"/**
* Creates an asynchronous future that will be closed when executed.
* @param exceptionType type of exception to catch
* @param fallback function to invoke on failure
* @param executor thread pool executor for execution
* @return ClosingFuture object representing the asynchronous operation
*/","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its exception if it is an instance of a given exception type. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the
   * function will not be called, and the derived {@code ClosingFuture} will be equivalent to this
   * one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<QueryResult> queryFuture =
   *     queryFuture.catching(
   *         QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against this step's exception. ""This step's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself. To avoid hiding bugs and other unrecoverable errors, callers should
   *     prefer more specific types, avoiding {@code Throwable.class} in particular.
   * @param fallback the function to be called if this step fails with the expected exception type.
   *     The function's argument is this step's exception. ""This step's exception"" means the cause
   *     of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsync,"com.google.common.util.concurrent.ClosingFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",967,972,"/**
 * Returns a closing future with a fallback function in case of an exception.
 * @param exceptionType type of exception to catch
 * @param fallback fallback function to execute on exception
 * @param executor executor service for asynchronous execution
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,call,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:call(),596,601,"/**
* Executes custom initialization logic and returns null.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",721,725,"/**
* Creates a reschedule-able callable task.
* @param service Abstract service instance
* @param executor Executor for scheduling tasks
* @param runnable Task to be executed
* @return Cancellable object or null if not found",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(),353,355,"/**
* Calls the 'm1' method on the associated state object.","* Waits for the all the services to reach a terminal state. After this method returns all
   * services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain
   * Service.State#FAILED failed}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager:awaitStopped(long,java.util.concurrent.TimeUnit)",379,382,"/**
* Calls state-specific timer with specified timeout and time unit.
* @param timeout duration to wait
* @param unit time unit for timeout (e.g. seconds, milliseconds)
*/","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have stopped within the deadline",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputed,com.google.common.base.CharMatcher:precomputed(),401,403,"/**
* Returns a CharMatcher with a specific mask function.","* Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to
   * query than the original; your mileage may vary. Precomputation takes time and requires more
   * memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often.
   *
   * <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a
   * precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem
   * like a worthwhile tradeoff in a browser).",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,hash,"com.google.common.io.Files:hash(java.io.File,com.google.common.hash.HashFunction)",622,629,"/**
* Legacy method to compute file hash; use Files.asByteSource().hash() instead.
*/","* Computes the hash code of the {@code file} using {@code hashFunction}.
   *
   * @param file the file to read
   * @param hashFunction the hash function to use to hash the data
   * @return the {@link HashCode} of all of the bytes in the file
   * @throws IOException if an I/O error occurs
   * @since 12.0
   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,move,"com.google.common.io.Files:move(java.io.File,java.io.File)",492,506,"/**
* Copies source file to destination while ensuring they are distinct.
* @param from source file
* @param to destination file
*/","* Moves a file from one path to another. This method can rename a file and/or move it to a
   * different directory. In either case {@code to} must be the target path for the file itself; not
   * just the new name for the file or the path to the new parent directory.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset)",142,162,"/**
* Reads and processes lines from a URL, returning a list of processed strings.
* @param url URL to read from
* @param charset character encoding for text
*/","* Reads all of the lines from a URL. The lines do not include line-termination characters, but do
   * include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Resources.asCharSource(url, charset).readLines()}.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,com.google.common.io.Files:map(java.io.File),646,649,"/**
* Creates a mapped byte buffer from the specified file.
* @param file input file
*/","* Fully maps a file read-only in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @return a read-only buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),246,248,"/**
* Returns an instance of m1 with a timeout of 2 minutes.
* @param executor ThreadPoolExecutor to use
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",106,112,"/**
* Creates an ExecutorService instance with the specified ThreadPoolExecutor and timeout.
* @param executor The underlying thread pool executor
* @param terminationTimeout Timeout for task execution
* @param timeUnit Unit of time for timeout (e.g. SECONDS)
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),258,261,"/**
* Returns a scheduled executor service with a default timeout of 2 minutes.
* @param executor parent thread pool executor
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",167,174,"/**
* Creates a ScheduledExecutorService instance with the given parameters.
* @param executor scheduled thread pool executor
* @param terminationTimeout timeout for termination in specified unit
* @param timeUnit unit of time for termination timeout
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration)",207,211,"/**
* Wraps ExecutorService with a specified termination timeout.
* @param service Executor service to wrap
* @param terminationTimeout Timeout duration for executor service
*/","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,"com.google.common.cache.LocalCache$Segment:reclaimKey(com.google.common.cache.ReferenceEntry,int)",3292,3325,"/**
* Updates the entry in the hash table.
* @param entry ReferenceEntry to be updated
* @param hash  hash value of the entry
* @return true if update was successful, false otherwise
*/",Removes an entry whose key has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,"com.google.common.cache.LocalCache$Segment:reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference)",3328,3370,"/**
* Removes a value reference from the map.
* @param key key to remove
* @param hash hash code of the key
* @param valueReference ValueReference to update or null for removal
* @return true if removed, false otherwise
*/",Removes an entry whose value has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntry,"com.google.common.cache.LocalCache$Segment:removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause)",3406,3435,"/**
* Updates a ReferenceEntry in the map's internal array.
* @param entry updated entry
* @param hash associated hash code
* @param cause removal reason (if applicable)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(),299,301,"/**
 * Calls m1 on the associated state object.","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager
   * will become healthy after all the component services have reached the {@linkplain State#RUNNING
   * running} state.
   *
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager:awaitHealthy(long,java.util.concurrent.TimeUnit)",329,332,"/**
 * Invokes state machine operation with specified timeout and time unit. 
 * @param timeout duration to wait before timing out
 * @param unit time unit for the timeout (e.g., seconds, milliseconds)
 */","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",46,50,"/**
* Creates a directed network connections object from input edge maps and self-loop count.
* @param inEdges map of incoming edges (key: edge, value: node)
* @param outEdges map of outgoing edges (key: edge, value: node)
* @param selfLoopCount number of self-loops in the network
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedNetworkConnections:ofImmutable(java.util.Map),45,47,"/**
* Creates undirected network connections from a map of incident edges.
* @param incidentEdges map of edge to node mappings
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager:startupTimes(),419,421,"/**
* Retrieves service metrics from the internal state.
* @return map of services to their corresponding metric values
*/","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time in millis, the map entries will be
   *     ordered by startup time.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotationsByType,com.google.common.reflect.Parameter:getDeclaredAnnotationsByType(java.lang.Class),121,128,"/**
* Retrieves annotations of the specified type from the annotations list.
* @param annotationType type of annotation to filter
* @return array of matching annotations or null if none found
*/",* @since 18.0,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Collection),246,252,"/**
* Creates an ordered immutable set from a collection of elements.
* @param elements input collection (may be null or empty)
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code
   * ImmutableSortedSet}, it may be returned instead of a copy.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object),1680,1683,"/**
 * Returns a sorted map view of the data up to a given key.
 * @param toKey the key up to which the map is truncated
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,java.lang.Object)",1759,1762,"/**
* Returns a sorted map of data between two specified keys.
* @param fromKey starting key
* @param toKey ending key
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object),1771,1774,"/**
 * Returns a sorted map starting from the specified key.
 * @param fromKey The key to start the sorted map from
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedNavigableMap,com.google.common.collect.Maps:synchronizedNavigableMap(java.util.NavigableMap),3692,3697,"/**
* Returns a synchronized map from the given navigable map.
* @param navigableMap input map to synchronize
* @return synchronized NavigableMap object
*/","* Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable map is accomplished through the returned navigable map (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned navigable map when
   * iterating over any of its collection views, or the collections views of any of its {@code
   * descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views.
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set = map.navigableKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not set!
   *   Iterator<K> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   * NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set2 = map2.descendingKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not map2 or set2!
   *   Iterator<K> it = set2.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * @param navigableMap the navigable map to be ""wrapped"" in a synchronized navigable map.
   * @return a synchronized view of the specified navigable map.
   * @since 13.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toString,"com.google.common.io.Files:toString(java.io.File,java.nio.charset.Charset)",250,256,"/**
* Reads the contents of a file as a string using a specified charset.
* @param file file to read
* @param charset character encoding
*/","* Reads all characters from a file into a {@link String}, using the given character set.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the file
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).read()}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toString,"com.google.common.io.Resources:toString(java.net.URL,java.nio.charset.Charset)",107,109,"/**
* Fetches and processes URL content with specified character set.
* @param url URL to fetch
* @param charset character encoding to use
* @return processed string or null on failure
*/","* Reads all characters from a URL into a {@link String}, using the given character set.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the URL
   * @throws IOException if an I/O error occurs.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,create,com.google.common.collect.CompactLinkedHashMap:create(),62,65,"/**
* Creates an empty CompactLinkedHashMap instance.
*/",Creates an empty {@code CompactLinkedHashMap} instance.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(com.google.common.collect.Multimap),107,111,"/**
* Creates a TreeMultimap instance from a given Multimap.
* @param multimap input Multimap to transform
* @return TreeMultimap<K, V> instance or null if input is null
*/","* Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with
   * the same mappings as the specified multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer$1:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
* Generates a type variable for capturing wildcard bounds.
* @param upperBounds array of class types representing wildcard bounds
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String,boolean)",244,248,"/**
* Returns a ReentrantLock instance with the specified name and fairness setting.
* @param lockName unique lock identifier
* @param fair whether to use a fair locking policy or not
*/","* Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in
   * the warning or exception output to help identify the locks involved in the detected deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String,boolean)",260,264,"/**
* Creates a ReentrantReadWriteLock instance based on the policy and parameters.
* @param lockName name of the lock
* @param fair fairness mode (true for fair, false for non-fair)
*/","* Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName}
   * is used in the warning or exception output to help identify the locks involved in the detected
   * deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,createNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:createNodes(java.lang.Class),301,322,"/**
* Creates a function mask map for the given enum class.
* @param clazz enum class to create a map for
* @return Map of enum values to LockGraphNode objects
*/","* For a given Enum type, creates an immutable map from each of the Enum's values to a
   * corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code
   * disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the
   * associated Enum values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,addNode,com.google.common.graph.StandardMutableGraph:addNode(java.lang.Object),44,47,"/**
* Delegates depth-first search to the underlying value graph.
* @param node Node object to search from
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,"com.google.common.graph.StandardMutableGraph:putEdge(java.lang.Object,java.lang.Object)",49,52,"/**
* Checks if edge exists between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return true if edge exists, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)",112,117,"/**
* Processes endpoint pair and updates result with the given value.
* @param endpoints EndpointPair object containing two endpoints
* @param value Value to be processed by the method
* @return Result of processing, or null if not applicable
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validatePart,"com.google.common.net.InternetDomainName:validatePart(java.lang.String,boolean)",307,351,"/**
* Validates a domain part based on length and character constraints.
* @param part String to validate
* @param isFinalPart whether this is the final part of a domain name
*/","* Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is
   * valid.
   *
   * @param part The domain name part to be validated
   * @param isFinalPart Is this the final (rightmost) domain part?
   * @return Whether the part is valid",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,coerceToInteger,com.google.common.net.InetAddresses:coerceToInteger(java.net.InetAddress),1059,1061,"/**
* Calculates the function mask from an IP address.
* @param ip InetAddress object representing the IP address
* @return integer function mask value
*/","* Returns an integer representing an IPv4 address regardless of whether the supplied argument is
   * an IPv4 address or not.
   *
   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers.
   *
   * <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and
   * can therefore be converted safely to integers (for whatever purpose) this function can be used
   * to handle IPv6 addresses as well until the application is suitably fixed.
   *
   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as
   * rudimentary identification or indexing into a collection of real {@link InetAddress}es. They
   * cannot be used as real addresses for the purposes of network communication.
   *
   * @param ip {@link InetAddress} to convert
   * @return {@code int}, ""coerced"" if ip is not an IPv4 address
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContains,com.google.common.collect.ForwardingCollection:standardContains(java.lang.Object),138,140,"/**
* Checks if an object matches a specific mask.
* @param object object to be checked
*/","* A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #contains} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemove,com.google.common.collect.ForwardingCollection:standardRemove(java.lang.Object),170,179,"/**
* Checks if the given object matches a condition in an iterable sequence.
* @param object the object to check
* @return true if match found, false otherwise
*/","* A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemoveAll,com.google.common.collect.ForwardingCollection:standardRemoveAll(java.util.Collection),188,190,"/**
* Checks if all elements in the given iterable collection match the mask.
* @param collection iterable collection to check
*/","* A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #removeAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRetainAll,com.google.common.collect.ForwardingCollection:standardRetainAll(java.util.Collection),199,201,"/**
* Checks if any element in the given collection matches the mask.
* @param collection collection of elements to check
*/","* A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #retainAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardClear,com.google.common.collect.ForwardingCollection:standardClear(),210,212,"/**
* Applies mask operation to input data.
* @param m1 input data iterator
*/","* A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #clear} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardIsEmpty,com.google.common.collect.ForwardingCollection:standardIsEmpty(),221,223,"/**
* Checks if mask condition is met by negating m1().m2() result.","* A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override
   * {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation.
   * Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(),243,246,"/**
* Creates and initializes an array of function masks.
* @return Array of function mask objects or null if failed.","* A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you
   * override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractSortedSetMultimap:createUnmodifiableEmptyCollection(),54,57,"/**
* Returns a SortedSet of values based on intermediate computations m1 and m2.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:keySet(),3592,3595,"/**
* Returns a set of keys representing function masks.
* @return Immutable set of K objects.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,createEntries,com.google.common.collect.FilteredEntrySetMultimap:createEntries(),58,61,"/**
 * Returns a set of entries based on specific mask values.
 * @return Set of entries with filtered key-value pairs.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,entries,com.google.common.collect.ForwardingSetMultimap:entries(),46,49,"/**
* Delegates to m1() for retrieving secondary data.
* @return Set of key-value pairs or empty set if none found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,java.time.Duration)",51,54,"/**
* Converts duration to nanoseconds and schedules command execution.
* @param command task to execute
* @param delay time to wait before executing the command
*/","* Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$LoadingSerializationProxy:readObject(java.io.ObjectInputStream),4799,4803,"/**
* Initializes cache with custom configuration.
* @param loader object loader for delegate construction
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$ManualSerializationProxy:readObject(java.io.ObjectInputStream),4765,4769,"/**
* Initializes delegate with cached values from ObjectInputStream.
* @param in input stream containing cached data
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,60,"/**
* Delegates to m1() to perform operation m2 with given key and values.
* @param key unique identifier
* @param values collection of values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessors,com.google.common.graph.DirectedMultiNetworkConnections:predecessors(),64,67,"/**
* Returns a set of function masks based on m1 and m2 results.
* @return Set of N objects representing function masks
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successors,com.google.common.graph.DirectedMultiNetworkConnections:successors(),80,83,"/**
* Returns a set of function masks.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodes,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodes(),60,63,"/**
* Returns a set of function masks.
* @return Set of N objects representing function masks
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,findAllSubscribers,com.google.common.eventbus.SubscriberRegistry:findAllSubscribers(java.lang.Object),156,165,"/**
* Retrieves event handlers for the given listener.
* @param listener object to fetch handlers for
*/",* Returns all subscribers for the given listener grouped by the type of event they subscribe to.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable)",576,594,"/**
* Creates a mutable subnetwork by masking nodes and preserving edges.
* @param network original network
* @param nodes subset of nodes to include in the subnetwork
* @return MutableNetwork object containing the masked subgraph
*/","* Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges}
   * from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are
   * both contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Network),626,640,"/**
* Creates a mutable network copy with filtered nodes and edges.
* @param network original network to replicate
*/",Creates a mutable copy of {@code network} with the same nodes and edges.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork$Builder:<init>(com.google.common.graph.NetworkBuilder),160,162,"/**
 * Initializes the builder with an existing mutable graph.
 * @param networkBuilder NetworkBuilder instance to build the underlying graph
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,build,com.google.common.graph.GraphBuilder:build(),181,183,"/**
* Creates a copy of the current graph with masked edges.
* @return A new mutable graph instance
*/",Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable)",545,566,"/**
* Creates a subgraph containing nodes and their successors from the original graph.
* @param graph original ValueGraph
* @param nodes Iterable of node identifiers to include in the subgraph
* @return MutableValueGraph representing the filtered subgraph
*/","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * (and associated edge values) from {@code graph} for which both nodes are contained by {@code
   * nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.ValueGraph),609,623,"/**
* Creates a mutable value graph copy of the given graph, 
* preserving node and edge data.
* @param graph original ValueGraph instance
* @return MutableValueGraph copy or null if invalid input
*/","Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph$Builder:<init>(com.google.common.graph.ValueGraphBuilder),133,138,"/**
* Copies and configures the given ValueGraphBuilder instance for immutable graphs.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.util.Map),381,386,"/**
* Merges provided map into builder's internal state.
* @param map input key-value pairs to merge
* @return updated Builder instance
*/","* Associates all of the given map's keys and values in the built bimap. Duplicate keys or
     * values are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.util.Map),656,661,"/**
* Merges all entries from provided map into builder.","* Associates all of the given map's keys and values in the built map. Duplicate keys, according
     * to the comparator (which might be the keys' natural order), are not allowed, and will cause
     * {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,containsKey,com.google.common.collect.FilteredEntryMultimap$AsMap:containsKey(java.lang.Object),176,179,"/**
* Checks if a record exists based on the given key.
* @param key unique identifier or search criteria
* @return true if a matching record is found, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,get,com.google.common.collect.FilteredEntrySetMultimap:get(java.lang.Object),43,46,"/**
* Calls superclass's implementation of M1, casting result to Set<V>.
* @param key Key object for M1 operation
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap$Keys$1:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
* Applies predicate to unfiltered map entries, modifying or removing entries that match.
* @param predicate filter condition for map entries
* @return true if any entries were modified or removed, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)",3371,3375,"/**
* Creates a filtered bi-map with the given delegate and filter predicate.
* @param delegate original bi-map to filter
* @param predicate entry filter condition
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)",2824,2831,"/**
* Creates a filtered navigable map from the given unfiltered map and predicate.
* @param map Unfiltered NavigableMap instance
* @param entryPredicate Predicate to filter entries
* @return New FilteredEntryNavigableMap instance or null if invalid input
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * navigable map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$FilteredEntrySortedMap:headMap(java.lang.Object),3208,3211,"/**
* Creates a filtered sorted map by querying the existing map.
* @param toKey key to filter and sort on
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntrySortedMap:subMap(java.lang.Object,java.lang.Object)",3213,3216,"/**
* Returns a filtered sorted map of entries between the specified key range.
* @param fromKey starting key (inclusive)
* @param toKey ending key (inclusive)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$FilteredEntrySortedMap:tailMap(java.lang.Object),3218,3221,"/**
* Returns a filtered sorted map based on the input key.
* @param fromKey unique identifier to filter by
* @return SortedMap object or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)",2813,2818,"/**
* Creates a filtered sorted map from the given map and entry predicate.
* @param map original map to filter
* @param entryPredicate predicate for filtering entries
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * sorted map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.Map,com.google.common.base.Predicate)",2428,2435,"/**
* Filters map entries based on provided predicates.
* @param unfiltered input map
* @param keyPredicate predicate for keys
*/","* Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.Map,com.google.common.base.Predicate)",2684,2690,"/**
* Filters a map based on the given predicate.
* @param entryPredicate filter criteria for map entries
* @return filtered Map instance or original if not supported
*/","* Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,inDegree,com.google.common.graph.AbstractNetwork:inDegree(java.lang.Object),153,156,"/**
* Evaluates MASK value based on node properties.
* @param node Node object to evaluate
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,outDegree,com.google.common.graph.AbstractNetwork:outDegree(java.lang.Object),158,161,"/**
* Evaluates mask value based on node attributes.
* @param node Node object to evaluate
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,"com.google.common.graph.AbstractNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",194,197,"/**
* Computes a mask value between two nodes.
* @param nodeU first node
* @param nodeV second node
* @return Optional mask value or empty if not computed
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),218,222,"/**
* Recursively fetches entity by using the provided endpoint pair.
* @param endpoints EndpointPair containing methods to navigate to entity location
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",80,86,"/**
* Creates a collector to group input elements by the specified key function and map values.
* @param comparator comparison function for keys
* @param keyFunction extracts key from each element
* @param valueFunction extracts value from each element
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements. The generated map is sorted by the specified comparator.
   *
   * <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSet,com.google.common.collect.ImmutableRangeSet$AsSet:subSet(com.google.common.collect.Range),638,640,"/**
* Applies mask operation on given range and returns sorted set result.
* @param range input range to process
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Comparable,boolean)",53,56,"/**
* Creates a contiguous set with a specific mask.
* @param toElement end element of the range
* @param inclusive whether the range is inclusive or exclusive
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",58,70,"/**
* Creates a contiguous set of elements within a specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return ContiguousSet object or EmptyContiguousSet if no range",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Comparable,boolean)",72,75,"/**
* Returns contiguous set of elements based on given range and inclusivity.
* @param fromElement starting element of the range
* @param inclusive whether to include the end element in the range
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:get(java.lang.Object),627,643,"/**
* Retrieves a Range of values for the specified key.
* @param key object to retrieve range for
* @return Range object or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:remove(java.lang.Object),692,703,"/**
* Retrieves a mapped value for the given key, 
* caching results if applicable.
* @param key object to retrieve value for
* @return associated value or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,removeEntryIf,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:removeEntryIf(com.google.common.base.Predicate),710,721,"/**
* Filters and removes entries based on the provided predicate.
* @param predicate filter condition
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap:clear(),561,564,"/**
 * Updates mask in TreeRangeMap. 
 * @param subRange sub-range to apply changes to
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap:remove(com.google.common.collect.Range),566,571,"/**
* Recursively processes sub-ranges based on predicate.
* @param range Range object to process
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
* Updates the index with a new entry for the given range and value.
* @param range range to update
* @param value associated value
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNode,com.google.common.graph.StandardMutableNetwork:addNode(java.lang.Object),51,62,"/**
* Checks if a node matches a specific mask condition.
* @param node Node object to evaluate
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)",76,118,"/**
* Adds a new edge to the network between two nodes.
* @param nodeU first endpoint
* @param nodeV second endpoint
* @param edge edge object
* @return true if successful, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",198,203,"/**
* Creates a collector for grouping elements into an immutable map.
* @param keyFunction function to extract the enum key from each element
* @param valueFunction function to extract the value associated with each element
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when
   * the collection operation is performed. (This differs from the {@code Collector} returned by
   * {@link java.util.stream.Collectors#toMap(java.util.function.Function,
   * java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code
   * IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",216,222,"/**
* Creates a collector to group input elements by enum keys and aggregate values using the provided functions.
* @param keyFunction maps each element to its corresponding enum key
* @param valueFunction extracts the aggregation value from each element
* @param mergeFunction merges values for duplicate keys
* @return Collector that groups elements into an immutable map
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, the values are merged using the specified merging
   * function.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,getAllPresent,com.google.common.cache.AbstractCache:getAllPresent(java.lang.Iterable),67,81,"/**
* Builds an immutable map from the given iterable of keys.
* @param keys iterable of objects to be mapped
* @return ImmutableMap or empty map if no mappings found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getAll,com.google.common.cache.AbstractLoadingCache:getAll(java.lang.Iterable),58,67,"/**
* Computes a function mask by iterating over the provided keys and applying custom operations.
* @param keys iterable of unique keys
* @return immutable map containing computed results or throws ExecutionException if an error occurs.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",198,207,"/**
* Creates a Collector for grouping elements into an immutable map.
* @param keyFunction function to extract keys from input elements
* @param valueFunction function to extract values from input elements
* @param mergeFunction function to merge duplicate values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,columnMap,com.google.common.collect.DenseImmutableTable:columnMap(),283,288,"/**
* Returns a map of columns to maps of row-value pairs.
* @return A map where each key is a column and its value is another map with rows as keys and values as values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,rowMap,com.google.common.collect.DenseImmutableTable:rowMap(),290,295,"/**
* Converts the internal row map to a column-oriented view.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,columnMap,com.google.common.collect.SparseImmutableTable:columnMap(),96,101,"/**
* Returns a map of columns to maps of row values.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,rowMap,com.google.common.collect.SparseImmutableTable:rowMap(),103,108,"/**
* Returns a map of rows to column mappings.
* @return A map where each key is a row identifier and the value is a map of columns to values. 
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedMultiNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",56,60,"/**
* Creates a directed multi-network connections object from edge maps and self-loop count.
* @param inEdges input edges map
* @param outEdges output edges map
* @param selfLoopCount number of self-loops
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,ofImmutable,com.google.common.graph.UndirectedGraphConnections:ofImmutable(java.util.Map),60,62,"/**
* Creates undirected graph connections from a map of adjacent node values.
* @param adjacentNodeValues map of nodes to their adjacent values
* @return UndirectedGraphConnections instance representing the graph
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedMultiNetworkConnections:ofImmutable(java.util.Map),54,56,"/**
* Constructs an undirected multi-network connections from a map of incident edges.
* @param incidentEdges map of edge to node mappings
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,getTypeMappings,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:getTypeMappings(java.lang.reflect.Type),380,385,"/**
* Generates a function mask map based on the provided context type.
* @param contextType the input type to generate the mask for
* @return an immutable map of function masks or null if failed
*/","* Returns type mappings using type parameters and type arguments found in the generic
     * superclass and the super interfaces of {@code contextClass}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,create,"com.google.common.collect.ImmutableTable$SerializedForm:create(com.google.common.collect.ImmutableTable,int[],int[])",472,480,"/**
* Creates a SerializedForm instance for the given table and row/column indices.
* @param table ImmutableTable object
* @param cellRowIndices array of row indices
* @param cellColumnIndices array of column indices
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,iterator,com.google.common.collect.ImmutableSortedSet:iterator(),628,629,"/**
* Returns an iterator over all elements of type E.
* @return unmodifiable iterator over elements of type E
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,higher,com.google.common.collect.DescendingImmutableSortedSet:higher(java.lang.Object),101,104,"/**
* Applies function mask to input element using forward transformation.
* @param element input element to transform
* @return transformed element or null if not applicable
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,ceiling,com.google.common.collect.DescendingImmutableSortedSet:ceiling(java.lang.Object),96,99,"/**
* Applies transformation to input element using the forward model.
* @param element input data of type E
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastKey,com.google.common.collect.ImmutableSortedMap:lastKey(),914,917,"/**
* Returns the functional mask value by calling intermediate methods.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.util.Iterator),396,398,"/**
* Combines multiple ByteSources into one.
* @param sources iterable of ByteSources to merge
* @return merged ByteSource or null if empty
*/","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(),603,606,"/**
* Generates an immutable list of mask values.
* @return List of String mask values
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.util.Iterator),465,467,"/**
* Wraps an iterator of char sources into a single immutable list source.","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableRangeMap,"com.google.common.collect.CollectCollectors:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",343,355,"/**
* Creates a range map collector from given key and value functions.
* @param keyFunction function to generate keys from input elements
* @param valueFunction function to generate values from input elements
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,createRangeMap,com.google.common.collect.ImmutableRangeMap$SerializedForm:createRangeMap(),443,449,"/**
* Builds a mask object from the given map of ranges.
* @return Mask object or null if map is empty
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(java.lang.Iterable),135,137,"/**
* Creates an immutable range set from an iterable of ranges.
* @param ranges collection of ranges to combine
*/","* Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges.
   * Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and
   * will be merged.
   *
   * @throws IllegalArgumentException if any ranges overlap or are empty
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.lang.Iterable)",259,276,"/**
* Creates an ImmutableSortedMultiset from a comparator and iterable.
* @param comparator comparison function
* @param elements input collection
* @return ImmutableSortedMultiset or existing one if already sorted
*/","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSorted,com.google.common.collect.ImmutableSortedMultiset:copyOfSorted(com.google.common.collect.SortedMultiset),292,295,"/**
* Creates an immutable sorted multiset from a given sorted multiset, 
* effectively ""masking"" the original.","* Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by
   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always
   * uses the natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedMultiset} or any of its elements is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassLoaderUrls,com.google.common.reflect.ClassPath:getClassLoaderUrls(java.lang.ClassLoader),622,630,"/**
* Returns a list of URLs for the given ClassLoader.
* @param classloader the ClassLoader to fetch URLs from
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$ParameterizedTypeImpl:<init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])",257,264,"/**
* Creates a ParameterizedTypeImpl instance for the given type.
* @param ownerType owning Type, or null if none
* @param rawType raw Class<?> instance
* @param typeArguments array of Type arguments
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$WildcardTypeImpl:<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])",470,475,"/**
* Initializes WildcardTypeImpl with lower and upper bounds.
* @param lowerBounds array of type parameters
* @param upperBounds array of type parameters
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection),114,118,"/**
* Executes a collection of asynchronous tasks and returns their futures.
* @param tasks collection of callable tasks to execute
* @return list of task completion futures
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,"com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)",120,125,"/**
* Executes a collection of asynchronous tasks with a specified timeout.
* @param tasks Collection of callable tasks
* @param timeout Timeout duration in the specified time unit
* @param unit Time unit for the timeout (e.g. seconds, milliseconds)
* @return List of futures containing the results or null if timed out",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection),127,131,"/**
* Executes a collection of tasks and returns the result.
* @param tasks collection of callable tasks to execute
* @return result of executed tasks or null if failed
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,"com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)",133,138,"/**
* Executes a collection of callable tasks with a specified time limit.
* @param tasks Collection of tasks to execute
* @param timeout Time limit in the given unit
* @param unit Unit of time for the timeout (e.g. seconds)
* @return The result of the first task that completes or null if none complete within the time limit
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationCollection:<init>(java.lang.Iterable,java.util.Comparator)",439,443,"/**
* Initializes an ordered permutation collection from the given iterable,
* using the specified comparator for sorting and calculating permutations.
* @param input Iterable of elements to process
* @param comparator Comparator for sorting elements
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,immutableSortedCopy,com.google.common.collect.Ordering:immutableSortedCopy(java.lang.Iterable),885,887,"/**
* Maps Iterable to an ImmutableList of specified type E.
* @param elements input iterable
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createEntrySet,com.google.common.collect.RegularImmutableBiMap:createEntrySet(),153,158,"/**
* Returns a set of immutable map entries based on the current state.
* @return Set of immutable entries or empty set if m1() is true.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createEntrySet,com.google.common.collect.RegularImmutableMap:createEntrySet(),307,310,"/**
* Returns an immutable set of map entries. 
* @return Set of key-value pairs in this map.",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,buildJdkBacked,com.google.common.collect.ImmutableMultiset$Builder:buildJdkBacked(),594,600,"/**
* Returns an immutable multiset with a specific mask.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,create,com.google.common.collect.RegularImmutableMultiset:create(java.util.Collection),43,85,"/**
* Builds an ImmutableMultiset from a collection of entries.
* @param entries collection of entries to process
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,asList,com.google.common.collect.ImmutableCollection:asList(),361,370,"/**
* Returns an immutable list based on the current state.
* @return List containing values from various methods
*/","* Returns an {@code ImmutableList} containing the same elements, in the same order, as this
   * collection.
   *
   * <p><b>Performance note:</b> in most cases this method can return quickly without actually
   * copying anything. The exact circumstances under which the copy is performed are undefined and
   * subject to change.
   *
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,createAsList,com.google.common.collect.ImmutableSet$CachingAsList:createAsList(),321,323,"/**
* Returns an immutable list of function masks.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,createAsList,com.google.common.collect.RegularImmutableSet:createAsList(),111,116,"/**
* Returns an immutable list of function masks.
* @return List of function masks or empty list if none found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,toImmutableSortedSet,com.google.common.collect.ImmutableSortedSet:toImmutableSortedSet(java.util.Comparator),81,84,"/**
* Returns a collector that accumulates elements into an immutable sorted set.
* @param comparator comparator to use for sorting
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSortedSet}, ordered by the specified comparator.
   *
   * <p>If the elements contain duplicates (according to the comparator), only the first duplicate
   * in encounter order will appear in the result.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Iterator),265,271,"/**
* Creates an immutable sorted set from an iterator of elements.
* @param elements input iterator
*/","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildOrThrow,com.google.common.collect.ImmutableBiMap$Builder:buildOrThrow(),451,481,"/**
* Creates a bi-map based on the map's current state.
* @return ImmutableBiMap object
*/","* Returns a newly-created immutable bimap, or throws an exception if any key or value was added
     * more than once. The iteration order of the returned bimap is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added
     * @since 31.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildJdkBacked,com.google.common.collect.ImmutableBiMap$Builder:buildJdkBacked(),498,515,"/**
* Creates an Immutable BiMap instance based on the input size and entries.
* @return ImmutableBiMap object or a smaller optimized version
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(boolean),529,580,"/**
* Creates a map with a specific structure based on the current size and comparator.
* @param throwIfDuplicateKeys whether to throw an exception for duplicate keys
* @return a constructed ImmutableMap or null if not found
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,"com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object,boolean)",955,958,"/**
* Creates an immutable sorted map from the range [m1(toKey), keySet.m2(inclusive)].
* @param toKey key to start from
* @param inclusive whether to include the end key in the range
* @return ImmutableSortedMap containing values within the specified range
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than (or equal to, if {@code inclusive}) {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,"com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object,boolean)",1026,1029,"/**
* Returns an immutable sorted map of key-value pairs within a specified range.
* @param fromKey starting key
* @param inclusive whether to include the start key in the result
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",106,109,"/**
* Creates an immutable sorted multiset with a mask for elements up to the specified upper bound.
* @param upperBound the upper bound of the mask
* @param boundType the type of boundary (OPEN or CLOSED)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",111,115,"/**
* Creates an immutable sorted multiset from elements within a specified range.
* @param lowerBound the lower bound of the range
* @param boundType specifies whether the bound is inclusive (CLOSED) or exclusive (OPEN)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,subSetImpl,"com.google.common.collect.RegularImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",261,265,"/**
* Creates a sorted set of elements within the specified range.
* @param fromElement starting element (inclusive/exclusive)
* @param fromInclusive true if start is inclusive
* @param toElement ending element (inclusive/exclusive)
* @param toInclusive true if end is inclusive
* @return ImmutableSortedSet containing elements in the specified range
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isPublicSuffix,com.google.common.net.InternetDomainName:isPublicSuffix(),382,384,"/**
* Checks if a specific condition (m1() == 0) is met.
* @return true if condition is met, false otherwise
*/","* Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla
   * Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A public suffix
   * is one under which Internet users can directly register names, such as {@code com}, {@code
   * co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes
   * include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}.
   *
   * <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}.
   * The list of public suffixes additionally contains privately owned domain names under which
   * Internet users can register subdomains. An example of a public suffix that is not a registry
   * suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i>
   * registry suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasPublicSuffix,com.google.common.net.InternetDomainName:hasPublicSuffix(),398,400,"/**
* Checks for presence of suffix mask.
* @return true if suffix mask is present, false otherwise
*/","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * including if it is a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}. This is the recommended method for determining whether a domain is potentially
   * an addressable host.
   *
   * <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderPublicSuffix,com.google.common.net.InternetDomainName:isUnderPublicSuffix(),424,426,"/**
* Checks if mask value is positive.
* @return true if mask value is greater than zero, false otherwise
*/","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * while not being a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com},
   * {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether it will probably be possible to set cookies on
   * the domain, though even that depends on individual browsers' implementations of cookie
   * controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopPrivateDomain,com.google.common.net.InternetDomainName:isTopPrivateDomain(),440,442,"/**
* Checks if the mask value is set to 1.
* @return true if mask value equals 1, false otherwise
*/","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code
   * google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code
   * www.google.com}, {@code co.uk}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether a domain is probably the highest level for
   * which cookies may be set, though even that depends on individual browsers' implementations of
   * cookie controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isRegistrySuffix,com.google.common.net.InternetDomainName:isRegistrySuffix(),491,493,"/**
* Checks if mask value is zero.","* Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset
   * of the Mozilla Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A
   * registry suffix is one under which Internet users can directly register names via a domain name
   * registrar, and have such registrations lawfully protected by internet-governing bodies such as
   * ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code
   * pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code
   * google.com} and {@code foo.co.uk}.
   *
   * <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The
   * list of public suffixes additionally contains privately owned domain names under which Internet
   * users can register subdomains. An example of a public suffix that is not a registry suffix is
   * {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry
   * suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list as part of
   *     the registry suffix section (labelled ""ICANN"").
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasRegistrySuffix,com.google.common.net.InternetDomainName:hasRegistrySuffix(),506,508,"/**
 * Checks if a specific suffix is present in the data.
 * @return true if suffix found, false otherwise
 */","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * including if it is a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}.
   *
   * <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderRegistrySuffix,com.google.common.net.InternetDomainName:isUnderRegistrySuffix(),528,530,"/**
* Returns true if m1() value is positive.
*/","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * while not being a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code
   * co.uk}, or {@code google.invalid}.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:isTopDomainUnderRegistrySuffix(),543,545,"/**
* Checks if mask value is set to 1.
* @return true if mask equals 1, false otherwise
*/","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code
   * google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com},
   * {@code co.uk}, or {@code myblog.blogspot.com}.
   *
   * <p><b>Warning:</b> This method should not be used to determine the probable highest level
   * parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable,java.util.Comparator)",419,423,"/**
* Creates an immutable sorted map from a collection of key-value pairs.
* @param entries iterable of entries to be mapped
* @param comparator for sorting keys
*/","* Returns an immutable map containing the given entries, with keys sorted by the provided
   * comparator.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfSorted,com.google.common.collect.ImmutableSortedMap:copyOfSorted(java.util.SortedMap),435,453,"/**
* Converts a sorted map to an immutable sorted map.
* @param map input sorted map
* @return ImmutableSortedMap or the original if already immutable and sorted
*/","* Returns an immutable map containing the same entries as the provided sorted map, with the same
   * ordering.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfInternal,"com.google.common.collect.ImmutableSortedMap:copyOfInternal(java.util.Map,java.util.Comparator)",455,475,"/**
* Converts a mutable or immutable sorted map to an immutable sorted map.
* @param map the input map
* @param comparator the comparator for sorting (or null for natural order)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueSet,"com.google.common.collect.ImmutableSetMultimap:valueSet(java.util.Comparator,java.util.Collection)",641,646,"/**
* Creates an immutable set from the given collection, optionally sorted by a comparator.
* @param valueComparator optional comparator to sort values; null for unsorted set
* @param values input collection of values
* @return ImmutableSet or ImmutableSortedSet instance
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,create,com.google.common.collect.Sets$CartesianSet:create(java.util.List),1543,1580,"/**
* Computes a Cartesian set from the given sets of sets.
* @param sets nested sets of elements
* @return CartesianSet object or null if invalid
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableCopy,com.google.common.collect.Sets$SetView:immutableCopy(),602,613,"/**
* Creates an immutable set of masked elements.
* @return Set of transformed elements or empty set if maxSize is 0
*/","* Returns an immutable copy of the current contents of this set view. Does not support null
     * elements.
     *
     * <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a
     * nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator
     * that is inconsistent with {@link Object#equals(Object)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$ClassSet:rawTypes(),786,793,"/**
* Collects and returns a set of supertype classes for type T.
* @return Set of Class objects representing supertypes of T
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$TypeSet:rawTypes(),703,709,"/**
* Collects and returns a set of classes that are supertypes of T.
* @return Set of Class objects representing supertype relationships
*/","Returns the raw types of the types in this set, in the same order.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAt,com.google.common.collect.MinMaxPriorityQueue:removeAt(int),407,442,"/**
* Removes element at specified index and returns move descriptor.
* @param index position of element to remove
* @return MoveDesc object or null if removed from end
*/","* Removes the element at position {@code index}.
   *
   * <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched.
   * Under these circumstances, it returns {@code null}.
   *
   * <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the
   * list with one before {@code index}. Under these circumstances it returns a pair of elements as
   * a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and
   * is now at some position before {@code index}. The second element is the one that was swapped
   * down to replace the element at {@code index}. This fact is used by iterator.remove so as to
   * visit elements during a traversal once and only once.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset$AvlNode:remove(java.util.Comparator,java.lang.Object,int,int[])",721,771,"/**
* Recursively compares the given element to the tree's nodes using the comparator, updating the result and tree statistics accordingly.
* @param comparator comparison function
* @param e element to compare
* @param count maximum number of elements to process
* @param result array to store the result (number of elements matching the query)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int[])",773,820,"/**
* Recursively processes elements using the comparator, updating counts and distinct element count.
* @param comparator comparison function
* @param e current element to compare
* @param count number of elements to process
* @param result array to store result (typically count of matches)
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int,int[])",822,883,"/**
* Recursively updates the node's count and distinct elements based on a comparison.
* @param comparator comparison function
* @param e element to compare
* @param expectedCount expected count of matching elements
* @param newCount new count of elements to add or remove
* @param result array to store updated count in the first element
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrt,"com.google.common.math.BigIntegerMath:sqrt(java.math.BigInteger,java.math.RoundingMode)",218,251,"/**
* Computes the fourth root of a BigInteger using the specified RoundingMode.
* @param x input value
* @param mode rounding behavior in case of ties
* @return result or null if not found
*/","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Iterator),233,244,"/**
* Creates an immutable set from a filtered iterator of elements.
* @param elements filtered iterator of elements
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterator.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJarFile,"com.google.common.reflect.ClassPath$LocationInfo:scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder)",492,501,"/**
* Builds a set of resource info for the given JarFile.
* @param file JarFile to process
* @param builder Builder to add ResourceInfo to
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",521,548,"/**
* Recursively traverses directory and its subdirectories to gather resource info.
* @param directory root directory to traverse
* @param packagePrefix prefix for resource names
* @param currentPath set of visited directories
* @param builder builder for ResourceInfo objects
*/","* Recursively scan the given directory, adding resources for each file encountered. Symlinks
     * which have already been traversed in the current tree path will be skipped to eliminate
     * cycles; otherwise symlinks are traversed.
     *
     * @param directory the root of the directory to scan
     * @param packagePrefix resource path prefix inside {@code classloader} for any files found
     *     under {@code directory}
     * @param currentPath canonical files already visited in the current directory tree path, for
     *     cycle elimination",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathFromManifest,"com.google.common.reflect.ClassPath:getClassPathFromManifest(java.io.File,java.util.jar.Manifest)",577,601,"/**
* Builds a set of files from the JAR's Class-Path attribute.
* @param jarFile JAR file to scan
* @param manifest optional Manifest object (null if not present)
* @return ImmutableSet of File objects or empty set if no files found
*/","* Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according
   * to <a
   * href=""http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes"">JAR
   * File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and
   * an empty set will be returned.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawType,com.google.common.reflect.TypeToken:getRawType(),193,199,"/**
* Returns a Class representing the upper bound of type parameter T.
* @return Class of the upper bound, or the runtime type if not found
*/","* Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link
   * java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link
   * java.lang.reflect.Method#getReturnType} of the same method object. Specifically:
   *
   * <ul>
   *   <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.
   *   <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is
   *       returned.
   *   <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array
   *       class. For example: {@code List<Integer>[] => List[]}.
   *   <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound
   *       is returned. For example: {@code <X extends Foo> => Foo}.
   * </ul>",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,someRawTypeIsSubclassOf,com.google.common.reflect.TypeToken:someRawTypeIsSubclassOf(java.lang.Class),885,892,"/**
* Checks if superclass is a subclass of any type in the collection.
* @param superclass class to check
* @return true if found, false otherwise
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.lang.Iterable,int)",820,824,"/**
* Masks elements in an iterable using a specified filter.
* @param iterable input collection of type E
* @param k filter parameter
* @return filtered list of type E or empty if all elements are masked
*/","* Returns the {@code k} greatest elements of the given iterable according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(java.time.Duration),366,368,"/**
* Converts duration to time unit and passes to lower-level m2 function.
* @param timeout duration to be converted
*/","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have stopped within the deadline
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),127,131,"/**
* Wraps ThreadPoolExecutor in an ExecutorService.
* @param executor thread pool executor to wrap
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration)",85,91,"/**
* Creates an ExecutorService instance with specified termination timeout.
* @param executor ThreadPoolExecutor instance
* @param terminationTimeout duration to wait for task completion
*/","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),189,194,"/**
* Wraps a ScheduledThreadPoolExecutor in an Application's m1 implementation. 
* @param executor scheduled thread pool executor to wrap","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration)",146,152,"/**
* Wraps a ScheduledThreadPoolExecutor with a ScheduledExecutorService.
* @param executor underlying executor
* @param terminationTimeout timeout duration to pass to m1()
*/","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,com.google.common.cache.LocalCache:reclaimKey(com.google.common.cache.ReferenceEntry),1737,1740,"/**
* Processes a reference entry by computing its hash and delegating to another method.
* @param entry ReferenceEntry object containing key-value pair
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,com.google.common.cache.LocalCache:reclaimValue(com.google.common.cache.LocalCache$ValueReference),1731,1735,"/**
* Processes a reference entry and delegates further processing to another method.
* @param valueReference ValueReference object containing the entry
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expireEntries,com.google.common.cache.LocalCache$Segment:expireEntries(long),2606,2621,"/**
* Updates the cache with expired entries based on current time.
* @param now current timestamp
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,evictEntries,com.google.common.cache.LocalCache$Segment:evictEntries(com.google.common.cache.ReferenceEntry),2644,2666,"/**
* Removes excess segments to maintain weight under maxSegmentWeight.
* @param newest newest segment entry
*/","* Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the
     * newest entry exceeds the maximum weight all on its own.
     *
     * @param newest the most recently added entry",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(java.time.Duration),314,316,"/**
* Converts duration to nanoseconds and passes it to m1.
* @param timeout duration to convert
*/","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupDurations,com.google.common.util.concurrent.ServiceManager:startupDurations(),431,435,"/**
* Creates an immutable map of service durations.
*/","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time, the map entries will be ordered
   *     by startup time.
   * @since 31.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotationsByType,com.google.common.reflect.Parameter:getAnnotationsByType(java.lang.Class),96,99,"/**
* Retrieves annotation array from underlying storage.
*@param annotationType specific annotation type to fetch
*/",* @since 18.0,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String),236,238,"/**
* Initializes a reentrant lock with the given name.
* @param lockName unique identifier for the lock
*/","Equivalent to {@code newReentrantLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String),251,253,"/**
* Returns an instance of ReentrantReadWriteLock with the specified name.
* @param lockName unique identifier for the lock
*/","Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,getOrCreateNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:getOrCreateNodes(java.lang.Class),283,293,"/**
* Retrieves or creates a map of enum values to LockGraphNode instances.
* @param clazz the Enum class
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,com.google.common.graph.StandardMutableGraph:putEdge(com.google.common.graph.EndpointPair),54,58,"/**
* Recursively calls m4 with updated endpoint values.
* @param endpoints pair of endpoints to process
* @return true if processing completed, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validateSyntax,com.google.common.net.InternetDomainName:validateSyntax(java.util.List),270,287,"/**
* Validates a list of string parts against the m3 function.
* @param parts List of string parts to validate
* @return True if all parts are valid, False otherwise
*/","* Validation method used by {@code from} to ensure that the domain name is syntactically valid
   * according to RFC 1035.
   *
   * @return Is the domain name syntactically valid?",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,register,com.google.common.eventbus.SubscriberRegistry:register(java.lang.Object),74,91,"/**
* Adds and updates subscriber methods for the given listener.
* @param listener object implementing event listeners
*/",Registers all subscriber methods on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,unregister,com.google.common.eventbus.SubscriberRegistry:unregister(java.lang.Object),94,114,"/**
* Verifies registration of event subscribers for annotated methods.
* @param listener Object to check registration status
*/",Unregisters all subscribers on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,immutable,com.google.common.graph.NetworkBuilder:immutable(),119,122,"/**
* Creates a builder for an immutable network with a specific mask.
* @return Builder instance for the new immutable network
*/","* Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableNetwork}.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable)",519,535,"/**
* Creates a mutable subgraph containing the specified nodes and their successors.
* @param graph parent graph
* @param nodes subset of graph nodes to include in the subgraph
* @return MutableGraph object containing the specified nodes and successors
*/","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * from {@code graph} for which both nodes are contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Graph),597,606,"/**
* Creates a deep mutable copy of the input graph.
*@param graph source graph to be copied
*@return MutableGraph object with identical structure and data as the input graph
*/",Creates a mutable copy of {@code graph} with the same nodes and edges.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,<init>,com.google.common.graph.ImmutableGraph$Builder:<init>(com.google.common.graph.GraphBuilder),136,140,"/**
* Copies the given graph and sets its incident edge order to stable for immutable graphs. 
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,immutable,com.google.common.graph.ValueGraphBuilder:immutable(),119,122,"/**
* Creates an immutable value graph builder with a specified mask.
*/","* Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link
   * ValueGraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableValueGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)",2837,2842,"/**
* Creates a filtered bi-map from the given map and entry predicate.
* @param map original bi-map
* @param entryPredicate predicate to filter entries
*/","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)",2753,2761,"/**
* Creates a filtered navigable map with entries matching the predicate.
* @param entryPredicate filter criterion for map entries
* @return NavigableMap instance or existing map if already filtered
*/","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:headSet(java.lang.Object),3158,3161,"/**
* Returns a sorted set of keys containing the specified element.
* @param toElement key object to search for
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3152,3156,"/**
* Retrieves a sorted set of elements within the specified range.
* @param fromElement starting element
* @param toElement ending element
* @return SortedSet containing elements in the range or null if empty
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:tailSet(java.lang.Object),3163,3166,"/**
* Retrieves a sorted set of elements starting from the given 'fromElement'.
* @param fromElement element to start retrieving from
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.SortedMap,com.google.common.base.Predicate)",2718,2725,"/**
* Filters a sorted map based on the provided predicate.
* @param entryPredicate filter criteria for entries
* @return filtered SortedMap instance or null if not found
*/","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createAsMap,com.google.common.collect.FilteredKeyMultimap:createAsMap(),217,220,"/**
* Returns a map of keys to collections of values based on the unfiltered data and key predicate.
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.Map,com.google.common.base.Predicate)",2558,2561,"/**
* Filters map entries based on the given predicate.
* @param unfiltered input map
* @param valuePredicate predicate to filter values by
* @return filtered map or original if no matches found
*/","* Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,com.google.common.graph.AbstractNetwork:edgeConnecting(com.google.common.graph.EndpointPair),199,203,"/**
* Recursively resolves endpoint pair to an entity of type E.
* @param endpoints pair of endpoints to resolve
* @return Optional E object or empty if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Comparable,boolean)",642,645,"/**
* Returns an immutable sorted set of values within a specific range.
* @param toElement the upper bound element (inclusive if true)
* @param inclusive whether the end is inclusive
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",647,657,"/**
* Creates an immutable sorted set of elements within a specified range.
* @param fromElement the starting element
* @param fromInclusive whether start is inclusive (true) or exclusive (false)
* @param toElement the ending element
* @param toInclusive whether end is inclusive (true) or exclusive (false)
* @return an ImmutableSortedSet containing elements in the specified range, or empty set if no elements exist.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Comparable,boolean)",659,662,"/**
* Generates an immutable sorted set of elements based on a range.
* @param fromElement the starting element (inclusive or exclusive)
* @param inclusive true for inclusive range, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Object,boolean)",53,56,"/**
* Creates a contiguous set from a specified element with optional inclusivity.
* @param toElement the element to create the set from
* @param inclusive whether the set includes its endpoint
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",58,70,"/**
* Creates a contiguous set of elements within the specified range.
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return ContiguousSet object or EmptyContiguousSet if empty",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Object,boolean)",72,75,"/**
* Creates a contiguous set of elements starting from the given element.
* @param fromElement starting element to include in the set
* @param inclusive whether the starting element is included or not
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:containsKey(java.lang.Object),645,648,"/**
* Checks if a matching entry exists in the data structure.
* @param key arbitrary object to search for
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:remove(java.lang.Object),692,703,"/**
* Retrieves a value from the map using the provided key and updates the associated range.
* @param key object key
* @return value associated with the key or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:clear(),705,708,"/**
* Calls parent class's m1() method.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$SubRangeMap:put(com.google.common.collect.Range,java.lang.Object)",528,533,"/**
* Processes the given range and value using the specified sub-range map.
* @param range Range to process
* @param value Value associated with the range
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
* Updates entries in the index for a given range and value.
* @param range range to update
* @param value value to associate with the range
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap:putAll(com.google.common.collect.RangeMap),183,188,"/**
* Iterates over the given RangeMap and applies a mask operation to each entry.
*@param rangeMap map of ranges to values
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)",120,125,"/**
* Processes an edge within a pair of endpoints.
* @param endpoints endpoint pair to process
* @param edge the edge to evaluate
* @return true if processed successfully, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",108,114,"/**
* Creates a collector that maps elements to an ImmutableMap using provided functions.
* @param keyFunction function to extract keys from input
* @param valueFunction function to extract values from input
* @param mergeFunction function to merge duplicate keys
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the
   * values are merged using the specified merging function. If the merging function returns {@code
   * null}, then the collector removes the value that has been computed for the key thus far (though
   * future occurrences of the key would reinsert it).
   *
   * <p>Entries will appear in the encounter order of the first occurrence of the key.
   *
   * @since 21.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,connectionsOf,"com.google.common.graph.ImmutableGraph:connectionsOf(com.google.common.graph.Graph,java.lang.Object)",96,104,"/**
* Computes GraphConnections for a given node in the graph.
* @param graph the graph containing the node
* @param node the node to compute connections for
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,connectionsOf,"com.google.common.graph.ImmutableValueGraph:connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object)",96,106,"/**
* Creates GraphConnections for a given node, using the underlying value graph.
* @param graph ValueGraph instance
* @param node Node identifier
* @return GraphConnections object or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,connectionsOf,"com.google.common.graph.ImmutableNetwork:connectionsOf(com.google.common.graph.Network,java.lang.Object)",104,119,"/**
* Computes NetworkConnections for a given node in the specified network.
* @param network graph structure
* @param node  identifier of the node to compute connections for
* @return NetworkConnections object representing the computed connections
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,descendingIterator,com.google.common.collect.DescendingImmutableSortedSet:descendingIterator(),74,78,"/**
* Returns an unmodifiable iterator for the underlying set.
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,first,com.google.common.collect.ImmutableSortedSet:first(),752,755,"/**
* Returns the functional mask value by chaining calls to m1() and m2().
* @return E object representing functional mask
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toImmutableRangeMap,"com.google.common.collect.ImmutableRangeMap:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",62,67,"/**
* Creates a range map collector using the provided key and value functions.
* @param keyFunction function to generate keys from input objects
* @param valueFunction function to generate values from input objects
*/","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted.
   *
   * @since 23.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,readResolve,com.google.common.collect.ImmutableRangeMap$SerializedForm:readResolve(),435,441,"/**
* Returns a mask object based on map of ranges conditions.
* @return Mask object from either m3 or m2, depending on the condition.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.lang.Iterable),211,217,"/**
* Creates an immutable sorted multiset from the given iterable of elements.
* @param elements iterable containing elements to be included in the multiset
*/","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call
   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code
   * ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>}
   * containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)}
   * returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given
   * multiset itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,build,com.google.common.collect.ImmutableSortedMultiset$Builder:build(),560,563,"/**
* Returns an immutable sorted multiset representation of contents.
*/","* Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code
     * Builder}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathEntries,com.google.common.reflect.ClassPath:getClassPathEntries(java.lang.ClassLoader),603,620,"/**
* Builds an immutable map of files to their respective ClassLoaders.
* @param classloader the starting ClassLoader
* @return a map of files to their ClassLoaders or null if empty
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveWildcardType,com.google.common.reflect.TypeResolver:resolveWildcardType(java.lang.reflect.WildcardType),245,249,"/**
* Creates a wildcard type with bounds modified by the FUNC_MASK operation.
* @param type WildcardType to be transformed
* @return resulting WildcardType object
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardType,"com.google.common.reflect.TypeToken:canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)",1031,1041,"/**
* Calculates the functional mask for a given wildcard type.
* @param declaration the type variable to compare against
* @param type the wildcard type to evaluate
* @return the resulting WildcardType or null if not applicable
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOf,com.google.common.reflect.Types:subtypeOf(java.lang.reflect.Type),147,150,"/**
* Creates a WildcardType representing a functional interface with a given upper bound. 
* @param upperBound the target type of the functional interface
*/",Returns a new {@link WildcardType} with {@code upperBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,supertypeOf,com.google.common.reflect.Types:supertypeOf(java.lang.reflect.Type),153,156,"/**
* Creates a wildcard type with the given lower bound and upper bound of Object.
* @param lowerBound lower bound of the wildcard type
*/",Returns a new {@link WildcardType} with {@code lowerBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,"com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable,java.util.Comparator)",429,432,"/**
* Generates ordered permutations of elements based on custom comparator.
* @param elements iterable collection of elements to permute
* @param comparator function to compare and order elements
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using
   * the specified {@link Comparator} for establishing the lexicographical ordering.
   *
   * <p>Examples:
   *
   * {@snippet :
   * for (List<String> perm : orderedPermutations(asList(""b"", ""c"", ""a""))) {
   *   println(perm);
   * }
   * // -> [""a"", ""b"", ""c""]
   * // -> [""a"", ""c"", ""b""]
   * // -> [""b"", ""a"", ""c""]
   * // -> [""b"", ""c"", ""a""]
   * // -> [""c"", ""a"", ""b""]
   * // -> [""c"", ""b"", ""a""]
   *
   * for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {
   *   println(perm);
   * }
   * // -> [1, 1, 2, 2]
   * // -> [1, 2, 1, 2]
   * // -> [1, 2, 2, 1]
   * // -> [2, 1, 1, 2]
   * // -> [2, 1, 2, 1]
   * // -> [2, 2, 1, 1]
   * }
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Elements that compare equal are considered equal and no new permutations are created by
   * swapping them.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @param comparator a comparator for the iterable's elements.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException If the specified iterable is null, has any null elements, or if
   *     the specified comparator is null.
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedList,com.google.common.collect.FluentIterable:toSortedList(java.util.Comparator),636,639,"/**
* Creates an ordered list of unique elements from a masked iterable.
* @param comparator Comparator to determine equality and ordering
* @return List of unique elements or null if input is null
*/","* Returns an {@code ImmutableList} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}. To produce an {@code
   * ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.sorted(comparator).collect()}.
   *
   * @param comparator the function by which to sort list elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyFromEntries,com.google.common.collect.ImmutableMultiset:copyFromEntries(java.util.Collection),217,224,"/**
* Converts a collection of entries into an immutable multiset.
* @param entries collection of entries to convert
* @return ImmutableMultiset object or null if empty
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,readResolve,com.google.common.collect.ImmutableAsList$SerializedForm:readResolve(),71,73,"/**
* Returns a mask object from the collection's m1 method. 
* @return Object representing the mask.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Collection),258,265,"/**
* Wraps a collection in an immutable list, or returns the underlying list if it's already immutable.
* @param elements Collection of elements to wrap
*/","* Returns an immutable list containing the given elements, in order.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}
   * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while
   * {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one
   * element (the given list itself).
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getValue,com.google.common.collect.SparseImmutableTable:getValue(int),125,131,"/**
* Retrieves the mask value at a specified index.
* @param index unique row index
* @return Mask value or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,asList,com.google.common.collect.ImmutableSet$CachingAsList:asList(),311,319,"/**
* Returns an immutable list of elements, either cached in the asList variable or generated by calling m1(). 
* @return ImmutableList object containing E elements.",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,build,com.google.common.collect.ImmutableBiMap$Builder:build(),437,440,"/**
* Returns an immutable bi-map of function masks.
* @return ImmutableBiMap object containing function mappings
*/","* Returns a newly-created immutable bimap. The iteration order of the returned bimap is the
     * order in which entries were inserted into the builder, unless {@link #orderEntriesByValue}
     * was called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys or values. The {@code build()} method
     * will soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildOrThrow,com.google.common.collect.ImmutableMap$Builder:buildOrThrow(),606,608,"/**
* Returns an immutable map of function masks.
* @return Function mask map","* Returns a newly-created immutable map, or throws an exception if any key was added more than
     * once. The iteration order of the returned map is the order in which entries were inserted
     * into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are
     * sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys were added
     * @since 31.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildKeepingLast,com.google.common.collect.ImmutableMap$Builder:buildKeepingLast(),625,627,"/**
* Returns an immutable map with function masks.
* @return Map of function masks or null if not applicable
*/","* Returns a newly-created immutable map, using the last value for any key that was added more
     * than once. The iteration order of the returned map is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value. If a key was added more than once, it appears in iteration order
     * based on the first time it was added, again unless {@link #orderEntriesByValue} was called.
     *
     * <p>In the current implementation, all values associated with a given key are stored in the
     * {@code Builder} object, even though only one of them will be used in the built map. If there
     * can be many repeated keys, it may be more space-efficient to use a {@link
     * java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than
     * {@code ImmutableMap.Builder}.
     *
     * @since 31.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object),939,942,"/**
* Returns an immutable sorted map with the specified key.
* @param toKey Key to add to the map
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerEntry,com.google.common.collect.ImmutableSortedMap:lowerEntry(java.lang.Object),1031,1034,"/**
* Retrieves an entry from the map using the given key.
* @param key unique key to search for
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorEntry,com.google.common.collect.ImmutableSortedMap:floorEntry(java.lang.Object),1041,1044,"/**
* Retrieves an entry from the underlying data structure using the provided key.
* @param key unique identifier of the entry to retrieve
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",988,999,"/**
* Creates a sorted map of keys within the specified range.
* @param fromKey starting key
* @param fromInclusive whether to include the start in the range
* @param toKey ending key
* @param toInclusive whether to include the end in the range
* @return ImmutableSortedMap containing keys in the specified range","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean
   * flags.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
   *
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object),1010,1013,"/**
* Truncates immutable sorted map starting from specified key.
* @param fromKey key to truncate from
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than or equals to {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingEntry,com.google.common.collect.ImmutableSortedMap:ceilingEntry(java.lang.Object),1051,1054,"/**
* Retrieves an entry from the map using the provided key.
* @param key unique key identifier
* @return associated Entry object or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherEntry,com.google.common.collect.ImmutableSortedMap:higherEntry(java.lang.Object),1061,1064,"/**
* Retrieves an entry by key using the m1 and m2 methods.
* @param key unique identifier of the entry to retrieve
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable),402,409,"/**
* Creates an immutable sorted map from the given iterable of key-value pairs.
* @param entries iterable of entries to include in the map
*/","* Returns an immutable map containing the given entries, with keys sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",229,242,"/**
* Creates a collector for grouping elements into an immutable sorted map.
* @param comparator key comparison function
* @param keyFunction extracts keys from input elements
* @param valueFunction extracts values from input elements
* @param mergeFunction merges duplicate values
* @return Collector that groups elements into ImmutableSortedMap
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map),367,373,"/**
* Creates an immutable sorted map from a given input map.
* @param map the input map to transform
*/","* Returns an immutable map containing the same entries as {@code map}, sorted by the natural
   * ordering of the keys.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the keys in {@code map} are not mutually comparable
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map,java.util.Comparator)",386,389,"/**
* Creates an immutable sorted map from a given map and comparator.
* @param map input map
* @param comparator key comparison function
* @return ImmutableSortedMap object or null if map is empty
*/","* Returns an immutable map containing the same entries as {@code map}, with keys sorted by the
   * provided comparator.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,cartesianProduct,com.google.common.collect.Sets:cartesianProduct(java.util.List),1476,1478,"/**
* Computes the Cartesian product of multiple sets.
* @param sets collection of sets to combine
*/","* Returns every possible list that can be formed by choosing one element from each of the given
   * sets in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the sets. For example:
   *
   * {@snippet :
   * Sets.cartesianProduct(ImmutableList.of(
   *     ImmutableSet.of(1, 2),
   *     ImmutableSet.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a set containing six lists:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : sets.get(0)) {
   *   for (B b1 : sets.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at
   * all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a
   * set of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian set is constructed, the input sets are merely copied. Only as the resulting set is
   * iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param sets the sets to choose elements from, in the order that the elements chosen from those
   *     sets should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable set containing immutable lists
   * @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a
   *     provided set is null
   * @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range
   * @since 2.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeExact,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:removeExact(java.lang.Object),849,857,"/**
* Checks if a given object is present in the queue and calls m1() accordingly.
* @param target Object to search for
* @return True if found, False otherwise
*/","Removes only this exact instance, not others that are equals()",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAndGet,com.google.common.collect.MinMaxPriorityQueue:removeAndGet(int),478,482,"/**
 * Calculates functional mask based on index, performing additional computation m2. 
 * @param index input parameter for m1 and m2 functions
 */",Removes and returns the value at {@code index}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset:remove(java.lang.Object,int)",279,301,"/**
* Counts occurrences of a value within an AVL tree.
* @param element the value to count
* @param occurrences initial count value (used as threshold)
* @return actual count or 0 if invalid input
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int)",303,323,"/**
* Inserts or updates an element in the AVL tree.
* @param element element to insert/update
* @param count operation count (insert=1, update=-1)
* @return 1 if successful, otherwise 0
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int,int)",325,347,"/**
* Updates tree by adding/deleting node based on count change.
* @param element node to add/delete
* @param oldCount previous tree size
* @param newCount updated tree size
* @return true if update successful, false otherwise
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Iterable),221,225,"/**
* Recursively converts an iterable to an ImmutableSet.
* @param elements input iterable, may be a collection or another iterable
* @return ImmutableSet containing all elements from the input
*/","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterable. This method iterates over {@code elements} only
   * once.
   *
   * <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
   * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
   * once. This reduces the expense of habitually making defensive copies at API boundaries.
   * However, the precise conditions for skipping the copy operation are undefined.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder)",503,508,"/**
* Recursively scans the given directory and its subdirectories, adding ResourceInfo objects to the provided Builder.
* @param directory root directory to scan
* @param builder set to populate with ResourceInfo objects
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJar,"com.google.common.reflect.ClassPath$LocationInfo:scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",465,490,"/**
* Processes a JAR file and populates the provided builder with resource info.
* @param file JAR file to process
* @param scannedUris set of previously scanned URIs
* @param builder builder for ResourceInfo objects
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundAsSuperclass,com.google.common.reflect.TypeToken:boundAsSuperclass(java.lang.reflect.Type),325,333,"/**
* Fetches the superclass type token for a given bound type.
* @param bound the input type
* @return superclass TypeToken or null if not found
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundsAsInterfaces,com.google.common.reflect.TypeToken:boundsAsInterfaces(java.lang.reflect.Type[]),364,374,"/**
* Creates a list of type tokens for the given bounds, filtered by type compatibility.
* @param bounds array of Type objects
* @return ImmutableList of TypeToken<? super T> or empty list if none compatible
*/",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,constructor,com.google.common.reflect.TypeToken:constructor(java.lang.reflect.Constructor),629,661,"/**
* Creates a ConstructorInvokable for the given constructor.
* @param constructor target constructor to create Invokable for
*/","* Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(java.lang.reflect.Type),487,520,"/**
* Checks for type compatibility between supertype and runtimeType.
* @param supertype Type to check against runtimeType
*/","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,method,com.google.common.reflect.TypeToken:method(java.lang.reflect.Method),590,622,"/**
* Returns an Invokable instance for the given method.
* @param method Method to create Invokable for
*/","* Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainKeyReferenceQueue,com.google.common.cache.LocalCache$Segment:drainKeyReferenceQueue(),2475,2487,"/**
* Drains key references from queue and updates the map.
* @param none
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainValueReferenceQueue,com.google.common.cache.LocalCache$Segment:drainValueReferenceQueue(),2489,2501,"/**
* Drains the value reference queue up to DRAIN_MAX iterations.
* @GuardedBy(""this"") ensures thread safety. 
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryExpireEntries,com.google.common.cache.LocalCache$Segment:tryExpireEntries(long),2595,2604,"/**
* Executes critical task on current timestamp.
* @param now current system time in milliseconds
*/",Cleanup expired entries when the lock is available.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstanceWithExplicitOrdering,"com.google.common.util.concurrent.CycleDetectingLockFactory:newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)",272,281,"/**
* Creates a WithExplicitOrdering instance for the given enum class and policy.
* @param enumClass enumeration type
* @param policy policy object
* @return WithExplicitOrdering instance or null if failed
*/",Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,register,com.google.common.eventbus.EventBus:register(java.lang.Object),235,237,"/**
* Calls subscriber's m1 method with provided object.
* @param object Object to pass to subscriber's m1 method
*/","* Registers all subscriber methods on {@code object} to receive events.
   *
   * @param object object whose subscriber methods should be registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,unregister,com.google.common.eventbus.EventBus:unregister(java.lang.Object),245,247,"/**
* Forwards incoming object to subscribers.
* @param object Object to be processed by subscribers
*/","* Unregisters all subscriber methods on a registered {@code object}.
   *
   * @param object object whose subscriber methods should be unregistered.
   * @throws IllegalArgumentException if the object was not previously registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,immutable,com.google.common.graph.GraphBuilder:immutable(),115,118,"/**
* Creates an ImmutableGraph Builder instance from a GraphBuilder.
*/","* Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2790,2797,"/**
* Filters entries in a BiMap based on the provided predicate.
* @param unfiltered input BiMap
* @param entryPredicate filter criteria for entries
* @return filtered BiMap or original if no filtering applied
*/","* Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's
   * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the existing key and the provided value
   * don't satisfy the predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying bimap and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingMap(),3335,3338,"/**
* Returns a navigable map of key-value pairs filtered by the provided predicate.
* @return A filtered NavigableMap object or null if empty
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3340,3348,"/**
* Retrieves a navigable map of entries within the specified key range.
* @param fromKey starting key
* @param fromInclusive whether to include the start key
* @param toKey ending key
* @param toInclusive whether to include the end key
* @return NavigableMap containing filtered entries or null if empty
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:headMap(java.lang.Object,boolean)",3350,3353,"/**
* Filters the unfiltered map using the provided predicate.
* @param toKey key for filtering
* @param inclusive whether to include or exclude the key
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:tailMap(java.lang.Object,boolean)",3355,3358,"/**
* Retrieves a navigable map view of entries starting from the given key.
* @param fromKey starting key
* @param inclusive whether to include the start key
* @return NavigableMap object or null if not found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.NavigableMap,com.google.common.base.Predicate)",2496,2503,"/**
* Filters a navigable map based on a predicate.
* @param unfiltered original map
* @param keyPredicate function to evaluate keys for inclusion
* @return filtered NavigableMap or null if empty
*/","* Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.NavigableMap,com.google.common.base.Predicate)",2621,2626,"/**
* Filters a navigable map based on a predicate function.
* @param unfiltered original map to filter
* @param valuePredicate condition to apply to each value
* @return filtered NavigableMap or null if empty
*/","* Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.SortedMap,com.google.common.base.Predicate)",2463,2468,"/**
* Filters a sorted map by a predicate function.
* @param unfiltered input map to filter
* @param keyPredicate function to evaluate keys
* @return filtered sorted map or null if empty
*/","* Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.SortedMap,com.google.common.base.Predicate)",2589,2593,"/**
* Filters a sorted map based on a predicate for its values.
* @param unfiltered the input map
* @param valuePredicate a predicate to filter values by
* @return a new sorted map with filtered values
*/","* Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Object,boolean)",642,645,"/**
* Creates an immutable sorted set with a functional mask.
* @param toElement element value for the mask
* @param inclusive whether to include or exclude the element
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",647,657,"/**
* Returns a sorted set of elements in the range [fromElement, toElement].
* @param fromElement starting element
* @param fromInclusive whether start is inclusive
* @param toElement ending element
* @param toInclusive whether end is inclusive
* @return ImmutableSortedSet containing elements or empty if no elements found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Object,boolean)",659,662,"/**
* Returns an immutable sorted set of elements within the specified range.
* @param fromElement start element of the range (inclusive or exclusive)
* @param inclusive true if the end is inclusive, false otherwise
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$SubRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",535,545,"/**
* Updates the mask with a new value within the specified range.
* @param range range to update
* @param value new value to apply
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap$SubRangeMap:putAll(com.google.common.collect.RangeMap),547,559,"/**
* Processes the given RangeMap and recursively calls process on its parent. 
* @param rangeMap input map to be processed
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstKey,com.google.common.collect.ImmutableSortedMap:firstKey(),909,912,"/**
* Returns a mask value by executing nested methods.
* @return A value of type K representing the result of m1().m2()
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,readResolve,com.google.common.collect.ImmutableSortedMultiset$SerializedForm:readResolve(),586,593,"/**
* Builds and returns a FUNC_MASK object from the given elements and counts.
* @return FUNC_MASK object
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.util.Iterator)",243,247,"/**
* Creates an immutable sorted multiset from the given iterator of elements.
* @param comparator Comparator to determine element order
* @param elements Iterator of elements to include in the set
* @return ImmutableSortedMultiset object or null if not found
*/","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,locationsFrom,com.google.common.reflect.ClassPath:locationsFrom(java.lang.ClassLoader),395,401,"/**
* Builds a set of location infos from the given class loader.
* @param classloader ClassLoader instance to process
* @return ImmutableSet of LocationInfo objects or empty if none found
*/","* Returns all locations that {@code classloader} and parent loaders load classes and resources
   * from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively
   * or even in parallel.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOfComponentType,com.google.common.reflect.Types:subtypeOfComponentType(java.lang.reflect.Type[]),198,214,"/**
* Finds a type that satisfies the mask condition in the given bounds array.
* @param bounds array of types to search
* @return matching type or null if not found
*/","* Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null
   * otherwise.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types:newArrayType(java.lang.reflect.Type),61,75,"/**
* Resolves a WildcardType to its corresponding Type.
* @param componentType the WildcardType to resolve
*/",Returns the array type of {@code componentType}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable),378,381,"/**
* Sorts and groups iterable elements by their natural order.
* @param elements input collection of comparable elements
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable}.
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one
   * permutation, instead of two. This is why the elements have to implement {@link Comparable}.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * <p>This method is equivalent to {@code Collections2.orderedPermutations(list,
   * Ordering.natural())}.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException if the specified iterable is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Iterable),182,197,"/**
* Converts input iterable to ImmutableMultiset, applying mask if possible.
* @param elements input collection of elements
* @return ImmutableMultiset instance or null if not applicable
*/","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.util.Iterator),205,209,"/**
* Creates an immutable multiset from the given iterable.
* @param elements input iterator containing elements of type E
* @return ImmutableMultiset object representing the input elements
*/","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,copyHighestCountFirst,com.google.common.collect.Multisets:copyHighestCountFirst(com.google.common.collect.Multiset),1150,1156,"/**
* Converts a Multiset to an ImmutableMultiset while maintaining the same ordering.
* @param multiset input Multiset instance
* @return equivalent ImmutableMultiset instance
*/","* Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts
   * the highest count first, with ties broken by the iteration order of the original multiset.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,create,com.google.common.collect.CartesianList:create(java.util.List),40,50,"/**
* Computes the Cartesian product of a list of lists.
* @param lists list of lists to combine
* @return CartesianList of combined elements or empty if invalid
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$OrderedPermutationIterator:computeNext(),514,522,"/**
* Generates the next permutation of elements in the list.
* @return List of elements or null if no more permutations exist
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$PermutationIterator:computeNext(),646,654,"/**
* Computes and returns a list of elements based on input j.
* If j is less than or equal to 0, uses m1() instead.
* @return List of E elements
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,permutations,com.google.common.collect.Collections2:permutations(java.util.Collection),589,591,"/**
* Generates all possible subset combinations of input collection.
* @param elements input collection to permute
* @return collection of subsets, each as a list
*/","* Returns a {@link Collection} of all the permutations of the specified {@link Collection}.
   *
   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations
   * generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2.
   *
   * <p>If the input list contains equal elements, some of the generated permutations will be equal.
   *
   * <p>An empty collection has only one permutation, which is an empty list.
   *
   * @param elements the original collection whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original collection.
   * @throws NullPointerException if the specified collection is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Iterable),234,239,"/**
* Recursively converts iterable to immutable list.
* @param elements input collection or iterable
* @return ImmutableList object
*/","* Returns an immutable list containing the given elements, in order. If {@code elements} is a
   * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it
   * behaves exactly as {@code copyOf(elements.iterator()}.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(com.google.common.collect.RangeSet),110,125,"/**
* Converts RangeSet to ImmutableRangeSet, optimizing for empty or singleton ranges.
* @param rangeSet input RangeSet to convert
* @return converted ImmutableRangeSet or null if optimized
*/",Returns an immutable copy of the specified {@code RangeSet}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOfSorted,com.google.common.collect.ImmutableSortedSet:copyOfSorted(java.util.SortedSet),347,355,"/**
* Converts a sorted set to an immutable sorted set.
* @param sortedSet input sorted set
* @return ImmutableSortedSet or null if list is empty and comparator returns 0 for all elements
*/","* Returns an immutable sorted set containing the elements of a sorted set, sorted by the same
   * {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the
   * natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedSet} or any of its elements is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethodsNotCached,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethodsNotCached(java.lang.Class),193,225,"/**
* Retrieves a set of subscriber methods from the given class and its supertypes.
* @param clazz class to search for subscriber methods
* @return list of subscriber methods or empty list if none found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeNode,com.google.common.graph.StandardMutableNetwork:removeNode(java.lang.Object),127,144,"/**
* Verifies a network node by checking its connections.
* @param node Network node to validate
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(),335,350,"/**
* Reads and returns a list of strings from a resource.
*/","* Reads all the lines of this source as a list of strings. The returned list will be empty if
   * this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableBiMap,"com.google.common.collect.CollectCollectors:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",244,255,"/**
* Creates a collector for transforming objects into an immutable bi-map.
* @param keyFunction function to extract keys from input objects
* @param valueFunction function to extract values from input objects
* @return collector for converting input objects to ImmutableBiMap<K, V>
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,build,com.google.common.collect.ImmutableClassToInstanceMap$Builder:build(),138,145,"/**
* Creates a mask for class-to-instance mapping.
* @return an empty or populated ImmutableClassToInstanceMap
*/","* Returns a new immutable class-to-instance map containing the entries provided to this
     * builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableListMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",386,410,"/**
* Creates a multimap from a collection of map entries.
* @param mapEntries collection of key-value pairs
* @param valueComparator optional comparator for values; null for natural ordering
* @return ImmutableListMultimap with unique keys and ordered values
*/",Creates an ImmutableListMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,readObject,com.google.common.collect.ImmutableListMultimap:readObject(java.io.ObjectInputStream),519,554,"/**
* Deserializes a map from an ObjectInputStream.
* @throws IOException if I/O error occurs
* @throws InvalidObjectException on invalid data
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(),593,595,"/**
* Returns an immutable map with default values.
*/","* Returns a newly-created immutable map. The iteration order of the returned map is the order
     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was
     * called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,legacyReadResolve,com.google.common.collect.ImmutableMap$SerializedForm:legacyReadResolve(),1283,1294,"/**
* Constructs a hash code from key-value pairs.
* @return unique hash code as an Object
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableSetMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",458,479,"/**
* Constructs an ImmutableSetMultimap from a collection of map entries.
* @param mapEntries Collection of key-value pairs
* @param valueComparator Optional comparator for values (null if not used)
* @return ImmutableSetMultimap instance or empty multimap if input is invalid
*/",Creates an ImmutableSetMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,readObject,com.google.common.collect.ImmutableSetMultimap:readObject(java.io.ObjectInputStream),687,730,"/**
* Deserializes and initializes the object's internal state from a stream.
* @throws IOException if I/O operations fail
* @throws ClassNotFoundException if class not found during deserialization
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function,com.google.common.collect.ImmutableMap$Builder)",1392,1406,"/**
* Creates an immutable map from the given iterator of values and key function.
* @param values iterator of values to be mapped
* @param keyFunction function to generate keys from values
* @return ImmutableMap with generated keys and values or null if not found
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromProperties,com.google.common.collect.Maps:fromProperties(java.util.Properties),1418,1455,"/**
* Builds a map of function masks from given Properties.
* @param properties input Properties object
*/","* Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties
   * normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is
   * awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}.
   *
   * @param properties a {@code Properties} object to be converted
   * @return an immutable map containing all the entries in {@code properties}
   * @throws ClassCastException if any key in {@code properties} is not a {@code String}
   * @throws NullPointerException if any key or value in {@code properties} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,indexMap,com.google.common.collect.Maps:indexMap(java.util.Collection),4471,4478,"/**
* Builds an immutable map of unique elements to their indices from a given collection.
* @param list input collection
* @return ImmutableMap with element-integer pairs or null if empty
*/",Returns a map from the ith element of list to i.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,getNodeConnections,com.google.common.graph.ImmutableGraph:getNodeConnections(com.google.common.graph.Graph),84,94,"/**
* Creates a map of node connections in the graph.
* @param graph the input graph
* @return ImmutableMap of node IDs to their respective GraphConnections
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getNodeConnections,com.google.common.graph.ImmutableNetwork:getNodeConnections(com.google.common.graph.Network),82,91,"/**
* Builds a map of node connections from the given network.
* @param network Network object
* @return Map of nodes to their corresponding connections
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getEdgeToReferenceNode,com.google.common.graph.ImmutableNetwork:getEdgeToReferenceNode(com.google.common.graph.Network),93,102,"/**
* Builds a map of edges to reference nodes from the given network.
* @param network Network object containing edge and node data
* @return Map of edges to corresponding reference nodes
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,getNodeConnections,com.google.common.graph.ImmutableValueGraph:getNodeConnections(com.google.common.graph.ValueGraph),84,94,"/**
* Builds a map of graph connections by node ID.
* @param graph ValueGraph object to extract connections from
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,build,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:build(),91,93,"/**
* Creates an immutable map of type instances using a specific builder configuration.
*/","* Returns a new immutable type-to-instance map containing the entries provided to this builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver$TypeTable:where(java.util.Map),289,299,"/**
* Constructs a TypeTable from the given type mappings.
* @param mappings map of type variables to their corresponding types
*/",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,parseFullString,com.google.thirdparty.publicsuffix.TrieParser:parseFullString(java.lang.String),41,52,"/**
* Builds a map of public suffix types from the given encoded string.
* @param encoded input string to process
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.util.Iterator,com.google.common.base.Function)",1293,1303,"/**
* Creates an immutable map from the given iterator of keys and a function to compute values.
* @param keys iterator of unique keys
* @param valueFunction function to compute values for each key
* @return ImmutableMap object or null if not found
*/","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerKey,com.google.common.collect.ImmutableSortedMap:lowerKey(java.lang.Object),1036,1039,"/**
* Applies two intermediate transformations (m1 and m2) to the input key. 
* @param key input key to be transformed
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorKey,com.google.common.collect.ImmutableSortedMap:floorKey(java.lang.Object),1046,1049,"/**
 * Applies two hash functions to the input key and returns the result.
 * @param key input key to be hashed
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,java.lang.Object)",970,973,"/**
* Returns an immutable sorted map between two keys.
* @param fromKey starting key (inclusive)
* @param toKey ending key (exclusive)
*/","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingKey,com.google.common.collect.ImmutableSortedMap:ceilingKey(java.lang.Object),1056,1059,"/**
* Computes function mask for given key.
* @param key input key to compute mask from
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherKey,com.google.common.collect.ImmutableSortedMap:higherKey(java.lang.Object),1066,1069,"/**
* Applies two intermediate transformations (m1 and m2) to the input key.",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",99,107,"/**
* Creates a collector for grouping elements by composite key.
* @param comparator key comparison function
* @param keyFunction extracts the key from each element
* @param valueFunction extracts the value associated with each key
* @param mergeFunction merges values for identical keys
* @return Collector that produces an ImmutableSortedMap of grouped elements","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>If the mapped keys contain duplicates (according to the comparator), the values are merged
   * using the specified merging function. Entries will appear in the encounter order of the first
   * occurrence of the key.
   *
   * @since 21.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,remove,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:remove(),807,834,"/**
* Updates the data structure by moving elements and adjusting cursors.
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,poll,com.google.common.collect.MinMaxPriorityQueue:poll(),303,307,"/**
* Returns a value based on mask conditions; null if m1() is true, otherwise result of m2(0). 
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollLast,com.google.common.collect.MinMaxPriorityQueue:pollLast(),368,371,"/**
* Returns non-null value from FUNC_MASK computation if successful, or null otherwise.","* Removes and returns the greatest element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeLast,com.google.common.collect.MinMaxPriorityQueue:removeLast(),378,384,"/**
* Returns a functional mask value based on internal state.
* Throws exception if invalid, otherwise returns result of m3 and m2.","* Removes and returns the greatest element of this queue.
   *
   * @throws NoSuchElementException if the queue is empty",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSet,com.google.common.collect.FluentIterable:toSet(),651,654,"/**
* Returns an immutable set of mask values.
* @return Set of unique E objects
*/","* Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with
   * duplicates removed.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSet()}).",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,validate,com.google.common.graph.Traverser:validate(java.lang.Iterable),347,354,"/**
* Computes and returns a set of nodes by applying the successor function to each node in the input iterable.
* @param startNodes initial set of nodes to process
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scan,"com.google.common.reflect.ClassPath$LocationInfo:scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",447,463,"/**
* Processes a file based on its type and updates the resource info builder.
* @param file File to process
* @param scannedUris Set of already scanned URIs (not used in this method)
* @param builder Builder for ResourceInfo objects
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(com.google.common.reflect.TypeToken),451,453,"/**
* Checks if a given TypeToken is a functional mask.
* @param type TypeToken instance to check
*/","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(java.lang.reflect.Type),463,465,"/**
* Evaluates a function mask based on the given type.
* @param type the input Type to evaluate
* @return true if the mask is valid, false otherwise
*/","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(com.google.common.reflect.TypeToken),475,477,"/**
* Recursively resolves TypeToken instance.
* @param type Token to resolve
* @return True if resolved, false otherwise
*/","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isOwnedBySubtypeOf,com.google.common.reflect.TypeToken:isOwnedBySubtypeOf(java.lang.reflect.Type),1127,1135,"/**
* Checks if a given supertype is masked by any subtype.
* @param supertype the Type to check
* @return true if supertype is masked, false otherwise
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainReferenceQueues,com.google.common.cache.LocalCache$Segment:drainReferenceQueues(),2465,2473,"/**
* Executes specific functions based on map conditions.
* @param map underlying data structure
*/","* Drain the key and value reference queues, cleaning up internal entries containing garbage
     * collected keys or values.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2529,2533,"/**
* Filters a bi-map based on the provided key predicate.
* @param keyPredicate function to evaluate each key
* @return filtered BiMap or null if empty
*/","* Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()},
   * {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2655,2658,"/**
* Filters a bi-map based on a predicate for values.
* @param unfiltered original bi-map
* @param valuePredicate condition to filter by
* @return filtered bi-map or null if empty
*/","* Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code
   * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Iterator),229,235,"/**
* Creates an immutable sorted multiset from the given iterator of elements.
* @param elements input iterator of elements to be added
*/","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,capture,com.google.common.reflect.TypeResolver$WildcardCapturer:capture(java.lang.reflect.Type),461,498,"/**
* Recursively resolves type arguments for the given Type.
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveGenericArrayType,com.google.common.reflect.TypeResolver:resolveGenericArrayType(java.lang.reflect.GenericArrayType),251,255,"/**
* Resolves and computes the mask type for a generic array type.
* @param type Generic array type to process
* @return Masked type or null if not applicable
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardsInType,com.google.common.reflect.TypeToken:canonicalizeWildcardsInType(java.lang.reflect.Type),1017,1026,"/**
* Recursively unwraps and processes generic types.
* @param type Type to process
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toGenericType,com.google.common.reflect.TypeToken:toGenericType(java.lang.Class),1158,1184,"/**
* Resolves the TypeToken for a given class.
* @param cls Class to resolve
*/","* Returns the type token representing the generic type declaration of {@code cls}. For example:
   * {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}.
   *
   * <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is
   * returned.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMultiset,com.google.common.collect.FluentIterable:toMultiset(),683,686,"/**
* Returns an immutable multiset of elements using a mask.
* @return ImmutableMultiset object
*/","* Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to
   * {@code stream.collect()}.
   *
   * @throws NullPointerException if any element is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,build,com.google.common.collect.ImmutableMultiset$Builder:build(),589,592,"/**
* Returns an immutable multiset containing all unique elements from the contents.","* Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code
     * Builder}.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$SerializedForm:readResolve(),661,667,"/**
* Creates a mask from the provided elements and counts.
* @return immutable multiset object representing the mask
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parametersAsMap,com.google.common.net.MediaType:parametersAsMap(),845,847,"/**
* Builds a map of function parameter masks.
* @return A map where keys are parameter names and values are multiset counts of each parameter's occurrences
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,cartesianProduct,com.google.common.collect.Lists:cartesianProduct(java.util.List),456,458,"/**
* Computes Cartesian product of input lists.
* @param lists list of lists to combine
* @return 2D list of combined elements or empty list if input is empty
*/","* Returns every possible list that can be formed by choosing one element from each of the given
   * lists in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the lists. For example:
   *
   * {@snippet :
   * Lists.cartesianProduct(ImmutableList.of(
   *     ImmutableList.of(1, 2),
   *     ImmutableList.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a list containing six lists in the following order:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : lists.get(0)) {
   *   for (B b1 : lists.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists
   * at all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a
   * list of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian product is constructed, the input lists are merely copied. Only as the resulting list
   * is iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param lists the lists to choose elements from, in the order that the elements chosen from
   *     those lists should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable list containing immutable lists
   * @throws IllegalArgumentException if the size of the cartesian product would be greater than
   *     {@link Integer#MAX_VALUE}
   * @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of
   *     a provided list is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,com.google.common.cache.CacheBuilderSpec:parse(java.lang.String),141,163,"/**
* Parses cache builder specification and populates CacheBuilderSpec object.
* @param cacheBuilderSpecification input string to parse
* @return populated CacheBuilderSpec object or null if invalid
*/","* Creates a CacheBuilderSpec from a string.
   *
   * @param cacheBuilderSpecification the string form",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,immutableSortedCopy,com.google.common.collect.AllEqualOrdering:immutableSortedCopy(java.lang.Iterable),46,49,"/**
* Converts an iterable to an immutable list. 
* @param iterable input collection to convert
* @return ImmutableList object or null if input is null
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toList,com.google.common.collect.FluentIterable:toList(),619,622,"/**
* Returns an immutable list of elements.
*/","* Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in
   * proper sequence.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableList()}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,listFiles,com.google.common.io.MoreFiles:listFiles(java.nio.file.Path),263,269,"/**
* Retrieves a list of files in the specified directory.
* @param dir directory path to fetch file list from
* @return immutable list of Path objects or empty if no files found
*/","* Returns an immutable list of paths to the files contained in the given directory.
   *
   * @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i>
   * @throws NotDirectoryException if the file could not be opened because it is not a directory
   *     <i>(optional specific exception)</i>
   * @throws IOException if an I/O error occurs",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,<init>,com.google.common.net.InternetDomainName:<init>(java.lang.String),144,162,"/**
* Constructs an InternetDomainName object from a given string.
* @param name the input domain name string
*/","Constructor used to implement {@link #from(String)}, and from subclasses.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner:<init>(boolean,java.lang.Iterable)",1259,1265,"/**
* Initializes Combiner with specified conditions and subsumes inputs into closeables.
* @param allMustSucceed true if all inputs must succeed
* @param inputs iterable of ClosingFuture objects to combine
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,allAsList,com.google.common.util.concurrent.Futures:allAsList(java.lang.Iterable),600,608,"/**
* Combines multiple listenable futures into a single future containing their results.
* @param futures iterable of listenable futures to combine
* @return ListenableFuture containing the combined results or null if any input is null
*/","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * input futures, if all succeed.
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future
   * if any of the items fails.
   *
   * <p>Canceling this future will attempt to cancel all the component futures, and if any of the
   * provided futures fails or is canceled, this one is, too.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllComplete,com.google.common.util.concurrent.Futures:whenAllComplete(java.lang.Iterable),632,635,"/**
* Combines a collection of ListenableFutures into a single FutureCombiner.
* @param futures iterable of ListenableFutures to combine
*/","* Creates a {@link FutureCombiner} that processes the completed futures whether or not they're
   * successful.
   *
   * <p>Any failures from the input futures will not be propagated to the returned future.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllSucceed,com.google.common.util.concurrent.Futures:whenAllSucceed(java.lang.Iterable),657,660,"/**
* Combines multiple futures into a single future using the first non-null result.
* @param futures iterable of ListenableFutures to combine
*/","* Creates a {@link FutureCombiner} requiring that all passed in futures are successful.
   *
   * <p>If any input fails, the returned future fails immediately.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,successfulAsList,com.google.common.util.concurrent.Futures:successfulAsList(java.lang.Iterable),883,886,"/**
* Combines multiple asynchronous operations into a single future.
* @param futures iterable of futures to combine
* @return combined future containing results or nulls
*/","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * successful input futures. The list of results is in the same order as the input list, and if
   * any of the provided futures fails or is canceled, its corresponding position will contain
   * {@code null} (which is indistinguishable from the future having a successful value of {@code
   * null}).
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for
   * any of the items, representing them as {@code null} in the result list.
   *
   * <p>Canceling this future will attempt to cancel all the component futures.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,gwtCompatibleToArray,com.google.common.util.concurrent.Futures:gwtCompatibleToArray(java.lang.Iterable),931,941,"/**
* Converts iterable of ListenableFutures to array, preserving null values.
*@param futures iterable of ListenableFutures
*@return array of ListenableFutures or nulls
*/",Can't use Iterables.toArray because it's not gwt compatible,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,unionOf,com.google.common.collect.ImmutableRangeSet:unionOf(java.lang.Iterable),147,149,"/**
* Converts an iterable of ranges to an immutable range set.
* @param ranges iterable of ranges
* @return ImmutableRangeSet object
*/","* Returns an {@code ImmutableRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate
   * or connected ranges are permitted, and will be coalesced in the result.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersection,com.google.common.collect.ImmutableRangeSet:intersection(com.google.common.collect.RangeSet),421,425,"/**
* Merges this range set with another using the mask operation.
* @param other the range set to merge
* @return a new merged range set
*/","* Returns a new range set consisting of the intersection of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code
   * TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code
   * ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,difference,com.google.common.collect.ImmutableRangeSet:difference(com.google.common.collect.RangeSet),435,439,"/**
* Computes intersection of this range set with another.
* @param other RangeSet to intersect with
* @return ImmutableRangeSet representing the intersection
*/","* Returns a new range set consisting of the difference of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,toImmutableBiMap,"com.google.common.collect.ImmutableBiMap:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",63,68,"/**
* Maps elements to a BiMap using provided functions.
* @param keyFunction maps element to key
* @param valueFunction maps element to value
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableBiMap} in encounter order.
   *
   * <p>If the mapped keys or values contain duplicates (according to {@link
   * Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection
   * operation is performed. (This differs from the {@code Collector} returned by {@link
   * Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,copyOf,com.google.common.collect.ImmutableClassToInstanceMap:copyOf(java.util.Map),159,169,"/**
* Converts a map of classes to instances into an immutable map.
* @param map input map of classes to instances
* @return ImmutableClassToInstanceMap or newly created instance
*/","* Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code
   * ImmutableClassToInstanceMap}, no copy will actually be performed.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(com.google.common.collect.Multimap),354,370,"/**
* Converts a Multimap to an ImmutableListMultimap.
* @param multimap input map
* @return converted ImmutableListMultimap or original if unchanged
*/","* Returns an immutable multimap containing the same mappings as {@code multimap}. The generated
   * multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,build,com.google.common.collect.ImmutableMultimap$Builder:build(),364,373,"/**
* Creates an ImmutableMultimap from the current builder state.
*/",Returns a newly-created immutable multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function)",186,196,"/**
* Creates a collector that maps elements to an immutable map.
* @param keyFunction function to extract keys
* @param valueFunction function to extract values
* @return Collector for immutable map construction
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
* Merges and updates range map entries within the given range.
* @param range range to process
* @param value new value to insert or update existing entries with (null for no change)
* @param remappingFunction function to apply to existing values when updating or inserting new ones
*/",* @since 28.1,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,readResolve,com.google.common.collect.ImmutableMap$SerializedForm:readResolve(),1262,1281,"/**
* Builds an unmodifiable map from existing keys and values.
* @return Map object or fallback result if keys not immutable
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,build,com.google.common.collect.ImmutableSetMultimap$Builder:build(),394,404,"/**
* Creates a multimap with entries from the builder map.
* @return ImmutableSetMultimap object
*/",Returns a newly-created immutable set multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,"com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap,java.util.Comparator)",424,441,"/**
* Creates an ImmutableSetMultimap from a given Multimap, applying mask operations.
* @param multimap input Multimap to transform
* @param valueComparator optional comparator for values; if null, specific behavior applies
* @return resulting ImmutableSetMultimap or null if not applicable
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function)",1386,1390,"/**
* Creates an immutable map from the given iterator of values and a function to derive keys.
* @param values iterator over value objects
* @param keyFunction function to generate keys from values
*/","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();
   *
   * Map<String, Color> colorForName =
   *     uniqueIndex(allColors, toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterator, Function) Multimaps.index}.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,"com.google.common.collect.ArrayTable:<init>(java.lang.Iterable,java.lang.Iterable)",150,169,"/**
* Initializes an ArrayTable from row and column keys, ensuring both are non-empty.
* @param rowKeys iterable of row identifiers
* @param columnKeys iterable of column identifiers
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,<init>,"com.google.common.collect.DenseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",55,87,"/**
* Initializes a dense, immutable table from an indexed list of cells and their row/column spaces.
* @param cellList indexed list of cells
* @param rowSpace set of unique row keys
* @param columnSpace set of unique column keys
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(java.util.List),31,33,"/**
* Initializes explicit ordering from provided sorted list.
* @param valuesInOrder sorted list of elements
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$PowerSet:<init>(java.util.Set),1724,1728,"/**
* Creates power set from the given input set.
* @param input set of elements (size should not exceed 30)
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,combinations,"com.google.common.collect.Sets:combinations(java.util.Set,int)",1808,1904,"/**
* Generates combinations of sets from a given set.
* @param set the input set to generate combinations from
* @param size the number of elements per combination
*/","* Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code
   * combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When
   * the result set is constructed, the input set is merely copied. Only as the result set is
   * iterated are the individual subsets created. Each of these subsets occupies an additional O(n)
   * memory but only for as long as the user retains a reference to it. That is, the set returned by
   * {@code combinations} does not retain the individual subsets.
   *
   * @param set the set of elements to take combinations of
   * @param size the number of elements per combination
   * @return the set of all combinations of {@code size} elements from {@code set}
   * @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()}
   *     inclusive
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @since 23.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,<init>,"com.google.common.collect.SparseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",47,94,"/**
* Constructs a sparse immutable table from cell list and key spaces.
* @param cellList list of cells to populate the table
* @param rowSpace set of unique row keys
* @param columnSpace set of unique column keys
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.Graph),58,64,"/**
* Creates an immutable graph from a given graph.
* @param graph input graph
* @return ImmutableGraph object or the original graph if already immutable
*/",Returns an immutable copy of {@code graph}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork:<init>(com.google.common.graph.Network),52,55,"/**
* Constructs an ImmutableNetwork object from a given Network.
* @param network input Network to be made immutable
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph:<init>(com.google.common.graph.ValueGraph),50,52,"/**
* Constructs an immutable value graph from a given value graph.
* @param graph input value graph to be converted
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver:where(java.util.Map),119,121,"/**
* Resolves types based on provided mappings.
* @param mappings map of variable keys to type mappings
* @return a new TypeResolver instance with resolved types
*/",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.lang.Iterable,com.google.common.base.Function)",1275,1278,"/**
* Creates an immutable map from an iterable of keys and a mapping function.
* @param keys iterable of unique key values
* @param valueFunction mapping function to compute values for each key
*/","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link
   * Maps#asMap(Set, Function)}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<Color, String> colorNames =
   *     allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString()));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollFirst,com.google.common.collect.MinMaxPriorityQueue:pollFirst(),341,344,"/**
* Returns a functional mask value using m1 method. 
* @return result of m1 method or null if not applicable","* Removes and returns the least element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,offer,com.google.common.collect.MinMaxPriorityQueue:offer(java.lang.Object),288,301,"/**
* Adds an element to the collection while respecting mask functionality.
* @param element element to be added
*/","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getAllClasses,com.google.common.reflect.ClassPath:getAllClasses(),154,156,"/**
* Retrieves a set of ClassInfo objects from resources.","* Returns all classes loadable from the current class path.
   *
   * @since 16.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(),162,167,"/**
* Retrieves all top-level ClassInfo objects from resources.
*/","* Returns all top level classes loadable from the current class path. Note that ""top-level-ness""
   * is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$ClassSet:delegate(),764,779,"/**
* Returns a set of type tokens for the generic type T, considering subclass types.
* @return Set of TypeToken objects or null if not found
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$InterfaceSet:delegate(),723,732,"/**
* Returns a set of type tokens for the functional interface(s).
* @return Set of TypeToken objects representing interfaces
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$InterfaceSet:rawTypes(),739,746,"/**
* Returns a set of interface types that match the raw type.
* @return Set of Class objects representing interfaces
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$TypeSet:delegate(),685,700,"/**
* Collects and filters type tokens for the class.
* @return Set of TypeTokens, potentially initialized by TypeCollector
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Iterable),240,243,"/**
* Processes nodes through validation and recursive iteration.
* @param startNodes initial iterable of nodes
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first
   * traversal of a graph with an additional root node whose successors are the listed {@code
   * startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #breadthFirst(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Iterable),290,293,"/**
* Processes input iterable of nodes, filtering and transforming them.
* @param startNodes input iterable to process
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a
   * depth-first pre-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPreOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Iterable),340,343,"/**
* Processes input nodes and returns a stream of filtered results.
* @param startNodes initial iterable of nodes to process
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a
   * depth-first post-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPostOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(java.util.Set),440,445,"/**
* Builds a set of ResourceInfo objects from scanned files.
* @param scannedFiles set of File objects to process
* @return ImmutableSet of ResourceInfo objects or empty set if none found
*/","* Scans this location and returns all scanned resources.
     *
     * <p>This file and jar files from ""Class-Path"" entry in the scanned manifest files will be
     * added to {@code scannedFiles}.
     *
     * <p>A file will be scanned at most once even if specified multiple times by one or multiple
     * jar files' ""Class-Path"" manifest entries. Particularly, if a jar file from the ""Class-Path""
     * manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or
     * it was intentionally added to the set by the caller, it will not be scanned again.
     *
     * <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will
     * always be scanned even if {@code scannedFiles} already contains it.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(com.google.common.reflect.TypeToken),312,320,"/**
* Specializes Invokable for given return type.
* @param returnType TypeToken representing the desired return type
* @return Invokable instance with specialized return type or throws exception if incompatible
*/",Explicitly specifies the return type of this {@code Invokable}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryDrainReferenceQueues,com.google.common.cache.LocalCache$Segment:tryDrainReferenceQueues(),2451,2459,"/**
* Executes m3() with m2() cleanup on success of m1().
*/",Cleanup collected entries when the lock is available.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runLockedCleanup,com.google.common.cache.LocalCache$Segment:runLockedCleanup(long),3469,3479,"/**
* Performs complex operation with masked functionality.
* @param now current timestamp
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveType,com.google.common.reflect.TypeResolver:resolveType(java.lang.reflect.Type),213,227,"/**
* Resolves function type mask for the given type.
* @param type Type object to resolve
* @return Function type mask or original type if not applicable
*/","* Resolves all type variables in {@code type} and all downstream types and returns a
   * corresponding type with type variables resolved.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,is,"com.google.common.reflect.TypeToken:is(java.lang.reflect.Type,java.lang.reflect.TypeVariable)",976,991,"/**
* Checks if the formal type matches the runtime type.
* @param formalType the expected type
* @param declaration the variable declaration
* @return true if types match, false otherwise
*/","* {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}.
   *
   * <p>Specifically, returns true if any of the following conditions is met:
   *
   * <ol>
   *   <li>'this' and {@code formalType} are equal.
   *   <li>'this' and {@code formalType} have equal canonical form.
   *   <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}.
   *   <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}.
   * </ol>
   *
   * Note that condition 2 isn't technically accurate under the context of a recursively bounded
   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}
   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's
   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code
   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.
   *
   * <p>It appears that properly handling recursive type bounds in the presence of implicit type
   * bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real
   * code.
   *
   * @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}?
   * @param declaration The type variable in the context of a parameterized type. Used to infer type
   *     bound when {@code formalType} is a wildcard with implicit upper bound.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeTypeArg,"com.google.common.reflect.TypeToken:canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type)",1011,1015,"/**
* Computes functional mask for given type argument.
* @param declaration TypeVariable declaration
* @param typeArg Type to compute mask from
*/","* In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo
   * is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)}
   * will return false. To mitigate, we canonicalize wildcards by enforcing the following
   * invariants:
   *
   * <ol>
   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For
   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code
   *       Enum<? extends Enum<E>}.
   *   <li>{@code canonicalize(t)} produces a ""literal"" supertype of t. For example: {@code Enum<?
   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard
   *       the upper bound is implicitly an Enum too).
   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}
   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.
   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.
   * </ol>",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,equals,com.google.common.net.MediaType:equals(java.lang.Object),1193,1206,"/**
* Compares two MediaType objects recursively.
* @param obj Object to compare with (can be any type)
* @return true if the object is equal to this, or both types/subtypes are equal
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,hashCode,com.google.common.net.MediaType:hashCode(),1208,1217,"/**
* Calculates and returns a unique function mask based on object properties.
* @return integer value representing the function mask
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(java.lang.String),341,344,"/**
* Returns a new cache builder instance with specified configuration.
* @param spec CacheBuilder specification string
*/","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   * This is especially useful for command-line configuration of a {@code CacheBuilder}.
   *
   * @param spec a String in the format specified by {@link CacheBuilderSpec}
   * @since 12.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,disableCaching,com.google.common.cache.CacheBuilderSpec:disableCaching(),166,169,"/**
* Returns a CacheBuilderSpec instance with maximum size mask.
* @return CacheBuilderSpec object with specified configuration
*/",Returns a CacheBuilderSpec that will prevent caching.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,inputFutures,com.google.common.util.concurrent.ClosingFuture$Combiner:inputFutures(),1363,1367,"/**
* Creates an immutable list of futures from input iterable.
* @return List of futures or empty list if inputs are null
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTreeChildren,com.google.common.io.MoreFiles:fileTreeChildren(java.nio.file.Path),298,308,"/**
* Returns an iterable of file paths in the specified directory.
* @param dir directory path
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,from,com.google.common.net.InternetDomainName:from(java.lang.String),259,262,"/**
* Converts a string domain to an InternetDomainName object with mask applied. 
* @param domain String representation of internet domain name 
*/","* Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,
   * validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped, while validation against <a
   * href=""http://www.ietf.org/rfc/rfc1035.txt"">RFC 1035</a> is relaxed in the following ways:
   *
   * <ul>
   *   <li>Any part containing non-ASCII characters is considered valid.
   *   <li>Underscores ('_') are permitted wherever dashes ('-') are permitted.
   *   <li>Parts other than the final part may start with a digit, as mandated by <a
   *       href=""https://tools.ietf.org/html/rfc1123#section-2"">RFC 1123</a>.
   * </ul>
   *
   * @param domain A domain name (not IP address)
   * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to
   *     {@link #isValid}
   * @since 10.0 (previously named {@code fromLenient})",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,inCompletionOrder,com.google.common.util.concurrent.Futures:inCompletionOrder(java.lang.Iterable),909,928,"/**
* Combines and transforms a collection of ListenableFutures into an ordered list.
* @param futures iterable of futures to be combined
* @return ImmutableList of transformed futures
*/","* Returns a list of delegate futures that correspond to the futures received in the order that
   * they complete. Delegate futures return the same value or throw the same exception as the
   * corresponding input future returns/throws.
   *
   * <p>""In the order that they complete"" means, for practical purposes, about what you would
   * expect, but there are some subtleties. First, we do guarantee that, if the output future at
   * index n is done, the output future at index n-1 is also done. (But as usual with futures, some
   * listeners for future n may complete before some for future n-1.) However, it is possible, if
   * one input completes with result X and another later with result Y, for Y to come before X in
   * the output future list. (Such races are impossible to solve without global synchronization of
   * all future completions. And they should have little practical impact.)
   *
   * <p>Cancelling a delegate future propagates to input futures once all the delegates complete,
   * either from cancellation or because an input future has completed. If N futures are passed in,
   * and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of
   * the input futures complete. If all the delegates are cancelled, all the input futures will be
   * too.
   *
   * @since 17.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,union,com.google.common.collect.ImmutableRangeSet:union(com.google.common.collect.RangeSet),408,410,"/**
* Computes the symmetric difference of two RangeSets.
* @param other RangeSet to compute difference with
*/","* Returns a new range set consisting of the union of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableListMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",372,384,"/**
* Creates a multimap collector for grouping elements by key and value.
* @param keyFunction maps each input element to a unique key
* @param valuesFunction maps each input element to a stream of values
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(com.google.common.collect.Multimap),386,395,"/**
* Converts a Multimap to an ImmutableMultimap.
* @param multimap input multimap
* @return converted ImmutableMultimap or null if m1() fails
*/","* Returns an immutable multimap containing the same mappings as {@code multimap}, in the
   * ""key-grouped"" iteration order described in the class documentation.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,build,com.google.common.collect.ImmutableListMultimap$Builder:build(),337,340,"/**
* Delegates to superclass to retrieve multimap, casting result to correct type.",Returns a newly-created immutable list multimap.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function)",88,93,"/**
* Creates a collector to map elements of type T to an immutable map.
* @param keyFunction maps element T to key K
* @param valueFunction maps element T to value V
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableMap} in encounter order.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$SubRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",573,584,"/**
* Merges and updates the sub-range map with new values.
* @param range Range to be merged
* @param value New value to update the map
* @param remappingFunction Function to re-map existing values
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSetMultimap,"com.google.common.collect.CollectCollectors:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",386,397,"/**
* Creates a collector to group input elements by key and value functions.
* @param keyFunction function to extract key from each element
* @param valueFunction function to extract value from each element
* @return Collector for grouping elements into an ImmutableSetMultimap
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object)",160,164,"/**
* Creates an ImmutableSetMultimap with a single entry.
* @param k1 key
* @param v1 value
* @return ImmutableSetMultimap instance
*/",Returns an immutable multimap containing a single entry.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,175,"/**
* Creates a multimap with two key-value pairs.
* @param k1 first key
* @param v1 value associated with k1
* @param k2 second key
* @param v2 value associated with k2
* @return ImmutableSetMultimap instance containing the specified entries
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",181,187,"/**
* Creates a multimap with three key-value pairs.
* @param k1 first key
* @param v1 value associated with k1
* @param k2 second key
* @param v2 value associated with k2
* @param k3 third key
* @param v3 value associated with k3
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",193,201,"/**
* Creates an immutable multimap from four key-value pairs.
* @param k1,k2,k3,k4 keys
* @param v1,v2,v3,v4 values
* @return ImmutableSetMultimap object
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",207,216,"/**
* Creates an ImmutableSetMultimap with the specified key-value pairs.
* @param k1 k2 k3 k4 k5 unique keys
* @param v1 v2 v3 v4 v5 corresponding values
*/","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(java.lang.Iterable),452,455,"/**
* Constructs an ImmutableSetMultimap from a collection of key-value pairs.
* @param entries Iterable of Entry objects containing the multimap data
* @return ImmutableSetMultimap instance representing the multimap data
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered. If two values for the same key are {@linkplain
   * Object#equals equal}, the first value encountered is used.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,invert,com.google.common.collect.ImmutableSetMultimap:invert(),550,558,"/**
* Creates an inverted multimap with specified key-value pairs.
* @return ImmutableSetMultimap instance with inverted keys and values
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:servicesByState(),626,639,"/**
* Creates a multimap of services by state, excluding NoOpServices.
* @return ImmutableSetMultimap with filtered service entries
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap),419,422,"/**
* Wraps a mutable multimap into an immutable multimap.
* @param multimap Multimap to be converted
*/","* Returns an immutable set multimap containing the same mappings as {@code multimap}. The
   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are
   * ignored.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.lang.Iterable,com.google.common.base.Function)",1345,1355,"/**
* Creates an immutable map from the given iterable of values and a function to derive keys.
* @param values Iterable of values
* @param keyFunction Function to generate keys from values
* @return ImmutableMap with derived keys and corresponding values
*/","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);
   *
   * ImmutableMap<String, Color> colorForName =
   *     uniqueIndex(allColors, c -> c.toString());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterable, Function) Multimaps.index}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<String, Color> colorForName =
   *     allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,"com.google.common.collect.ArrayTable:create(java.lang.Iterable,java.lang.Iterable)",106,109,"/**
* Creates an ArrayTable instance with specified row and column keys.
* @param rowKeys iterable of unique row identifiers
* @param columnKeys iterable of unique column identifiers
*/","* Creates an {@code ArrayTable} filled with {@code null}.
   *
   * @param rowKeys row keys that may be stored in the generated table
   * @param columnKeys column keys that may be stored in the generated table
   * @throws NullPointerException if any of the provided keys is null
   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates
   *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,com.google.common.collect.ArrayTable:<init>(com.google.common.collect.Table),171,174,"/**
* Constructs an ArrayTable from an existing Table instance.
* @param table source Table with row and column keys
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,explicit,com.google.common.collect.Ordering:explicit(java.util.List),231,233,"/**
* Creates an explicit ordering from a list of elements.
* @param valuesInOrder list of elements in order
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,powerSet,com.google.common.collect.Sets:powerSet(java.util.Set),1673,1675,"/**
* Generates power set of input collection.
* @param set input set to compute power set from
* @return Set of all possible subsets of the original set
*/","* Returns the set of all possible subsets of {@code set}. For example, {@code
   * powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined. Note that the power
   * set of the empty set is not the empty set, but a one-element set containing the empty set.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code
   * 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set
   * is merely copied. Only as the power set is iterated are the individual subsets created, and
   * these subsets themselves occupy only a small constant amount of memory.
   *
   * @param set the set of elements to construct a power set from
   * @return the power set, as an immutable set of immutable sets
   * @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the
   *     power set size to exceed the {@code int} range)
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @see <a href=""http://en.wikipedia.org/wiki/Power_set"">Power set article at Wikipedia</a>
   * @since 4.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forOrderedComponents,"com.google.common.collect.RegularImmutableTable:forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",178,187,"/**
* Determines table type (dense or sparse) based on cell count and row/column space.
* @param cellList list of table cells
* @param rowSpace set of unique row identifiers
* @param columnSpace set of unique column identifiers
* @return RegularImmutableTable instance or null
*/",A factory that chooses the most space-efficient representation of the table.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,build,com.google.common.graph.ImmutableGraph$Builder:build(),200,202,"/**
* Creates an immutable graph from the current mutable graph.
* @return ImmutableGraph object representing the graph data
*/",* Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.Network),58,62,"/**
* Converts a Network to an ImmutableNetwork, or returns the original if already immutable.
* @param network the input graph
* @return ImmutableNetwork instance or original Network if unchanged
*/",Returns an immutable copy of {@code network}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ValueGraph),55,59,"/**
* Converts a ValueGraph to an ImmutableValueGraph if possible, otherwise creates a new ImmutableValueGraph.
* @param graph the input ValueGraph
* @return the converted or newly created ImmutableValueGraph
*/",Returns an immutable copy of {@code graph}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,covariantly,com.google.common.reflect.TypeResolver:covariantly(java.lang.reflect.Type),73,75,"/**
* Resolves type based on a given context.
* @param contextType input type to resolve
*/","* Returns a resolver that resolves types ""covariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is
   * {@code <?>}.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,invariantly,com.google.common.reflect.TypeResolver:invariantly(java.lang.reflect.Type),88,91,"/**
* Resolves function mask type based on provided context type.
* @param contextType the input type to resolve
*/","* Returns a resolver that resolves types ""invariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of
   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into
   * {@code ArrayList<?>::set}.
   *
   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code
   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,"com.google.common.reflect.TypeResolver:where(java.lang.reflect.Type,java.lang.reflect.Type)",112,116,"/**
* Resolves type conflicts between formal and actual types.
* @param formal expected type
* @param actual provided type
* @return resolved Type object or null if failed
*/","* Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in
   * {@code actual}.
   *
   * <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code
   * String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain
   * #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve
   * {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and
   * {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they
   * can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination
   * thereof.
   *
   * @param formal The type whose type variables or itself is mapped to other type(s). It's almost
   *     always a bug if {@code formal} isn't a type variable and contains no type variable. Make
   *     sure you are passing the two parameters in the right order.
   * @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet
   *     other type variables, in which case these type variables will be further resolved if
   *     corresponding mappings exist in the current {@code TypeResolver} instance.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMap,com.google.common.collect.FluentIterable:toMap(com.google.common.base.Function),704,707,"/**
* Creates an immutable map from the result of {@link #m1()} and a given function.
* @param valueFunction a function to compute values for each key in the map
* @return an immutable map with keys from {@link #m1()} and computed values
*/","* Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}
   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order
   * is the order of the first appearance of each key in this iterable.
   *
   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether
   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,
   * which result will be mapped to that key in the returned map.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k,
   * valueFunction))}.
   *
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(java.lang.Iterable),218,226,"/**
* Initializes a Min-Max priority queue with the given contents.
* @param initialContents iterable of elements to populate the queue
* @return initialized MinMaxPriorityQueue instance
*/","* Builds a new min-max priority queue using the previously specified options, and having the
     * given initial elements.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,add,com.google.common.collect.MinMaxPriorityQueue:add(java.lang.Object),265,270,"/**
* Marks an element as having a specific mask.
* @param element element to mark
*/","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.
   *
   * @return {@code true} always",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,addAll,com.google.common.collect.MinMaxPriorityQueue:addAll(java.util.Collection),272,281,"/**
* Applies transformation to all new elements in the collection.
* @param newElements Collection of elements to transform
* @return True if any elements were transformed, false otherwise
*/",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(java.lang.String),170,179,"/**
* Retrieves and filters ClassInfo objects based on the provided package name.
* @param packageName the package to filter by
* @return an immutable set of matching ClassInfo objects
*/",Returns all top level classes whose package name is {@code packageName}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClassesRecursive,com.google.common.reflect.ClassPath:getTopLevelClassesRecursive(java.lang.String),185,195,"/**
* Retrieves a set of ClassInfo objects filtered by package name.
* @param packageName the package to filter by
* @return an immutable set of matching ClassInfo objects
*/","* Returns all top level classes whose package name is {@code packageName} or starts with {@code
   * packageName} followed by a '.'.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Object),226,228,"/**
* Returns an iterable of nodes starting from the given node.
* @param startNode initial node to traverse
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then
   * depth 1, then 2, and so on.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abcdef} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Breadth-first_search"">Wikipedia</a> for more
   * info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Object),276,278,"/**
* Returns an iterable collection of nodes starting from the given node.
* @param startNode initial node to traverse
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first pre-order traversal. ""Pre-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are first visited.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abecfd} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Object),326,328,"/**
* Returns an iterable of nodes reachable from the given start node.
* @param startNode starting node identifier
*/","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first post-order traversal. ""Post-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are visited for the last time.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code fcebda} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(),422,424,"/**
* Retrieves a set of resource information.
* @return Set of ResourceInfo objects or empty set if none found
*/",Scans this location and returns all scanned resources.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,from,com.google.common.reflect.ClassPath:from(java.lang.ClassLoader),123,139,"/**
* Retrieves a ClassPath instance from the given classloader, considering function masks.
* @param classloader ClassLoader to fetch data from
* @return ClassPath object or null if failed
*/","* Returns a {@code ClassPath} representing all classes and resources loadable from {@code
   * classloader} and its ancestor class loaders.
   *
   * <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from:
   *
   * <ul>
   *   <li>{@link URLClassLoader} instances' {@code file:} URLs
   *   <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the
   *       system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code
   *       ClassPath} searches the files from the {@code java.class.path} system property.
   * </ul>
   *
   * @throws IOException if the attempt to read class path resources (jar files or directories)
   *     failed.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(java.lang.Class),307,309,"/**
* Returns an Invokable instance with specified return type.
* @param returnType class of the returned value
*/","* Explicitly specifies the return type of this {@code Invokable}. For example:
   *
   * {@snippet :
   * Method factoryMethod = Person.class.getMethod(""create"");
   * Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class);
   * }",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,"com.google.common.cache.LocalCache$Segment:getEntry(java.lang.Object,int)",2689,2707,"/**
* Finds and returns the ReferenceEntry with matching key hash and equivalence.
* @param key object to compare against entries
* @param hash hash value of the key
* @return matching ReferenceEntry or null if not found
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache$Segment:getLiveValue(com.google.common.cache.ReferenceEntry,long)",2724,2740,"/**
* Retrieves a cached value from the map, handling cache invalidation and expiration.
* @param entry ReferenceEntry object
* @param now current timestamp in milliseconds
* @return cached value or null if invalidated/expired
*/","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
     * loading, or expired.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,preWriteCleanup,com.google.common.cache.LocalCache$Segment:preWriteCleanup(long),3453,3456,"/**
* Updates internal state with current time.
* @param now system timestamp in milliseconds
*/","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.
     *
     * <p>Post-condition: expireEntries has been run.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$Segment:cleanUp(),3463,3467,"/**
* Updates internal state based on current time.
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
* Resolves type variable to its functional representation.
* @param var the type variable to resolve
* @param forDependants type table for dependant types
*/","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveTypesInPlace,com.google.common.reflect.TypeResolver:resolveTypesInPlace(java.lang.reflect.Type[]),229,235,"/**
* Applies transformation to each type in the array.
* @param types input array of Type objects
* @return transformed array of Type objects
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveParameterizedType,com.google.common.reflect.TypeResolver:resolveParameterizedType(java.lang.reflect.ParameterizedType),257,266,"/**
* Resolves a ParameterizedType by fetching its owner and raw type.
* @param type the original ParameterizedType to resolve
* @return the resolved ParameterizedType or null if failed
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$1:getGenericReturnType(),371,374,"/**
* Calls overridden method from subclass.",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$2:getGenericReturnType(),443,452,"/**
* Resolves function mask by analyzing class and its type parameters.
*@return Type object representing the function mask
*/","* If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns
     * {@code ArrayList<E>}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)",235,243,"/**
* Resolves a TypeToken for the given TypeParameter and TypeArgument.
* @param typeParam TypeParameter to resolve
* @param typeArg TypeArgument to use in resolution
* @return resolved TypeToken or null if not found
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,writeReplace,com.google.common.reflect.TypeToken:writeReplace(),846,850,"/**
* Resolves function type from runtime context.
* @return FunctionType object or null if not resolved
*/",Implemented to support serialization of subclasses.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,futureCombiner,com.google.common.util.concurrent.ClosingFuture$Combiner:futureCombiner(),1357,1361,"/**
* Returns a combiner function based on whether all futures must succeed.
* @return Combiner function, either m3 or m2, depending on allMustSucceed flag
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTraverser,com.google.common.io.MoreFiles:fileTraverser(),294,296,"/**
* Returns a Traverser instance for traversing file system tree children.
*/","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link Path} and will return all files and directories it encounters.
   *
   * <p>The returned traverser attempts to avoid following symbolic links to directories. However,
   * the traverser cannot guarantee that it will not follow symbolic links to directories as it is
   * possible for a directory to be replaced with a symbolic link between checking if the file is a
   * directory and actually reading the contents of that directory.
   *
   * <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a
   * directory, no exception will be thrown and the returned {@link Iterable} will contain a single
   * element: that path.
   *
   * <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances
   * created by this traverser if an {@link IOException} is thrown by a call to {@link
   * #listFiles(Path)}.
   *
   * <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get(""/""))} may return the
   * following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"", ""/home/alice"",
   * ...]}
   *
   * @since 23.5",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,fromValid,com.google.common.net.HostSpecifier:fromValid(java.lang.String),71,104,"/**
* Parses and validates host specifier, returning HostSpecifier object.
* @param specifier string representation of host
*/","* Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already
   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}
   * instead.
   *
   * <p>The specifier must be in one of these formats:
   *
   * <ul>
   *   <li>A domain name, like {@code google.com}
   *   <li>A IPv4 address string, like {@code 127.0.0.1}
   *   <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code
   *       2001:db8::1}
   * </ul>
   *
   * @throws IllegalArgumentException if the specifier is not valid.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,ancestor,com.google.common.net.InternetDomainName:ancestor(int),594,606,"/**
* Constructs an InternetDomainName for a specified ancestor level.
* @param levels number of ancestor levels to consider
*/","* Returns the ancestor of the current domain at the given number of levels ""higher"" (rightward)
   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},
   * where {@code N} is the number of parts in the domain.
   *
   * <p>TODO: Reasonable candidate for addition to public API.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,child,com.google.common.net.InternetDomainName:child(java.lang.String),617,619,"/**
* Constructs an Internet domain name by combining left parts and suffix.
* @param leftParts left parts of the domain name (e.g., ""example"")
*/","* Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to
   * the current name. For example, {@code InternetDomainName.from(""foo.com"").child(""www.bar"")}
   * returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient
   * validation is performed, as described {@link #from(String) here}.
   *
   * @throws NullPointerException if leftParts is null
   * @throws IllegalArgumentException if the resulting name is not valid",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isValid,com.google.common.net.InternetDomainName:isValid(java.lang.String),644,651,"/**
* Validates internet domain name by masking it.
* @param name the string to be masked
* @return true if valid, false otherwise
*/","* Indicates whether the argument is a syntactically valid domain name using lenient validation.
   * Specifically, validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped.
   *
   * <p>The following two code snippets are equivalent:
   *
   * {@snippet :
   * domainName = InternetDomainName.isValid(name)
   *     ? InternetDomainName.from(name)
   *     : DEFAULT_DOMAIN;
   * }
   *
   * {@snippet :
   * try {
   *   domainName = InternetDomainName.from(name);
   * } catch (IllegalArgumentException e) {
   *   domainName = DEFAULT_DOMAIN;
   * }
   * }
   *
   * @since 8.0 (previously named {@code isValidLenient})",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,flatteningToImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",122,127,"/**
* Creates a multimap collector from input data using provided key and value functions.
* @param keyFunction function to extract keys from input elements
* @param valuesFunction function to extract value streams from input elements
*/","* Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableListMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableListMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableListMultimap,"com.google.common.collect.CollectCollectors:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",359,370,"/**
* Creates a collector that groups elements by key and value functions.
* @param keyFunction function to extract the group key
* @param valueFunction function to extract the group values
* @return Collector instance for grouping elements
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object)",141,145,"/**
* Creates a multimap with a single entry for the given key-value pair.
* @param k1 unique key
* @param v1 associated value
* @return Immutable Multimap instance
*/",Returns an immutable multimap containing a single entry.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",148,153,"/**
* Creates a multimap with two entries.
* @param k1 key for first entry
* @param v1 value for first entry
* @param k2 key for second entry
* @param v2 value for second entry
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",156,162,"/**
* Creates a multimap with three key-value pairs.
* @param k1 key type instance
* @param v1 value type instance 1
* @param k2 key type instance 2
* @param v2 value type instance 2
* @param k3 key type instance 3
* @param v3 value type instance 3
* @return ImmutableListMultimap object","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",165,173,"/**
* Creates a multimap with four key-value pairs.
* @param k1 first key
* @param v1 value for k1
* @param k2 second key
* @param v2 value for k2
* @param k3 third key
* @param v3 value for k3
* @param k4 fourth key
* @param v4 value for k4
* @return populated ImmutableListMultimap","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",176,185,"/**
* Creates a multimap with five key-value entries.
* @param k1 k2 k3 k4 k5 keys
* @param v1 v2 v3 v4 v5 associated values
* @return ImmutableListMultimap instance
*/","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(java.lang.Iterable),380,383,"/**
* Creates an immutable multimap from the given iterable of key-value pairs.
* @param entries collection of entries to include in the multimap
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,invert,com.google.common.collect.ImmutableListMultimap:invert(),470,478,"/**
* Creates an inverted multimap from the underlying data structure.
* @return Inverted multimap with key-value pairs reversed.",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.util.Iterator,com.google.common.base.Function)",1719,1729,"/**
* Creates a multimap from an iterator of values and a key-generating function.
* @param values iterator of values to map
* @param keyFunction function to generate keys from values
* @return ImmutableListMultimap with generated keys and values
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterator} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterator. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys.iterator(), stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 10.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,"com.google.common.net.MediaType:withParameters(java.lang.String,java.lang.Iterable)",901,924,"/**
* Constructs a MediaType object from attribute and values.
* @param attribute media type attribute
* @param values iterable of string values
* @return constructed MediaType object or null if invalid
*/","* <em>Replaces</em> all parameters with the given attribute with parameters using the given
   * values. If there are no values, any existing parameters with the given attribute are removed.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid
   * @since 24.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String,com.google.common.collect.Multimap)",1007,1027,"/**
* Creates a MediaType object from type, subtype and parameters.
* @param type the media type
* @param subtype the media subtype
* @param parameters additional attributes
* @return MediaType object or null if invalid
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,toImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",93,98,"/**
* Creates a multimap collector from the given functions.
* @param keyFunction function to extract keys
* @param valueFunction function to extract values
*/","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableSetMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,inverse,com.google.common.collect.ImmutableSetMultimap:inverse(),544,548,"/**
* Returns set multimap from inverse data structure.
* @return SetMultimap instance or initializes it if null
*/","* {@inheritDoc}
   *
   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,markReady,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:markReady(),555,577,"/**
* Enforces synchronization and consistency of service transitions.
* @throws IllegalArgumentException if asynchronous service starts detected
*/","* Marks the {@link State} as ready to receive transitions. Returns true if no transitions have
     * been observed yet.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager:servicesByState(),407,410,"/**
* Delegate to state instance to retrieve multimap.
* @return Multimap of State and Service instances.","* Provides a snapshot of the current state of all the services under management.
   *
   * <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will
   * correspond to a point in time view of the services.
   *
   * @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableSetMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",399,411,"/**
* Creates a multiset map collector from the given key and value functions.
* @param keyFunction function to extract keys from input elements
* @param valuesFunction function to extract values from input elements as a stream
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,uniqueIndex,com.google.common.collect.FluentIterable:uniqueIndex(com.google.common.base.Function),762,765,"/**
* Creates an immutable map with values generated from a function.
* @param keyFunction function to transform values into keys
* @return ImmutableMap of transformed values or null if input is null
*/","* Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed
   * by keys derived from those values. In other words, each input value produces an entry in the
   * map whose key is the result of applying {@code keyFunction} to that value. These entries appear
   * in the same order as they appeared in this fluent iterable. Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));
   *
   * Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link #index(Function)
   * index}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.
   *
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in this fluent iterable to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in this fluent iterable
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,com.google.common.collect.ArrayTable:create(com.google.common.collect.Table),135,140,"/**
* Converts a Table to an ArrayTable.
* @param table the input Table
* @return ArrayTable instance or null if not convertible
*/","* Creates an {@code ArrayTable} with the mappings in the provided table.
   *
   * <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with
   * column key {@code c}, the returned table contains a mapping with row key {@code r} and column
   * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to
   * {@code null} in the generated table.
   *
   * <p>The returned table allows subsequent {@code put} calls with the row keys in {@code
   * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}
   * with other keys leads to an {@code IllegalArgumentException}.
   *
   * <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the
   * row and column iteration ordering of the returned table.
   *
   * @throws NullPointerException if {@code table} has a null key",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,readResolve,com.google.common.collect.ImmutableTable$SerializedForm:readResolve(),482,497,"/**
* Builds a table object from list of cells, using m1 and m2 for single/multi-cell values.
* @return Table object or null if cellValues is empty
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCellsInternal,"com.google.common.collect.RegularImmutableTable:forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)",153,175,"/**
* Creates a regular immutable table from an iterable of cells.
* @param cells iterable of table cells
* @param rowComparator optional row comparator (null for natural ordering)
* @param columnComparator optional column comparator (null for natural ordering)
* @return RegularImmutableTable object
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,build,com.google.common.graph.ImmutableNetwork$Builder:build(),239,241,"/**
* Creates an immutable network from the current mutable network.","* Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,build,com.google.common.graph.ImmutableValueGraph$Builder:build(),204,206,"/**
* Creates an immutable ValueGraph from the mutable graph.
* @return ImmutableValueGraph object
*/","* Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.Class),155,162,"/**
* Captures and resolves type token for the specified class.
* @param declaringClass class that owns the type token
*/","* Constructs a new type token of {@code T} while resolving free type variables in the context of
   * {@code declaringClass}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * abstract class IKnowMyType<T> {
   *   TypeToken<T> getMyType() {
   *     return new TypeToken<T>(getClass()) {};
   *   }
   * }
   *
   * new IKnowMyType<String>() {}.getMyType() => String
   * }",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getCovariantTypeResolver,com.google.common.reflect.TypeToken:getCovariantTypeResolver(),1186,1192,"/**
* Returns a TypeResolver instance for the given runtime type.
* @return TypeResolver object or cached instance if available
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInvariantTypeResolver,com.google.common.reflect.TypeToken:getInvariantTypeResolver(),1194,1200,"/**
* Resolves function type based on runtime type.
* @return TypeResolver object or null if not initialized
*/",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(),210,212,"/**
* Returns an instance of MinMaxPriorityQueue with specified type bound to B.
*/","* Builds a new min-max priority queue using the previously specified options, and having no
     * initial contents.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(java.lang.Iterable),118,121,"/**
* Constructs a Min-Max priority queue from an iterable of elements.
* @param initialContents iterable containing the initial elements
*/","* Creates a new min-max priority queue using natural order, no maximum size, and initially
   * containing the given elements.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,reachableNodes,"com.google.common.graph.Graphs:reachableNodes(com.google.common.graph.Graph,java.lang.Object)",235,238,"/**
* Returns a set of nodes reachable from the given node in the graph.
* @param graph the graph to traverse
* @param node the starting node
*/","* Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable
   * from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A
   * and ending at node B. Note that a node is always reachable from itself via a zero-length path.
   *
   * <p>This is a ""snapshot"" based on the current topology of {@code graph}, rather than a live view
   * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will
   * not be updated after modifications to {@code graph}.
   *
   * @throws IllegalArgumentException if {@code node} is not present in {@code graph}
   * @since 33.1.0 (present with return type {@code Set} since 20.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveEntry,"com.google.common.cache.LocalCache$Segment:getLiveEntry(java.lang.Object,int,long)",2709,2718,"/**
* Retrieves a cached ReferenceEntry based on the given key and hash.
* @param key object to search for
* @param hash hash code of the key
* @param now current timestamp
* @return matching ReferenceEntry or null if not found or expired
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,com.google.common.cache.LocalCache:getEntry(java.lang.Object),4145,4152,"/**
* Searches for a ReferenceEntry by its associated key.
* @param key the key to search for (may be null)
*/","* Returns the internal entry for the specified key. The entry may be loading, expired, or
   * partially collected.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isLive,"com.google.common.cache.LocalCache:isLive(com.google.common.cache.ReferenceEntry,long)",1746,1749,"/**
* Evaluates a reference entry mask based on its cached value and current time.
* @param entry ReferenceEntry object to evaluate
* @param now current timestamp in milliseconds
*/","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache:containsValue(java.lang.Object),4169,4207,"/**
* Checks if the given value matches any existing value in the hash map.
* @param value object to search for
* @return true if found, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,insertLoadingValueReference,"com.google.common.cache.LocalCache$Segment:insertLoadingValueReference(java.lang.Object,int,boolean)",2398,2446,"/**
* Retrieves a loading value reference for the given key and hash.
* @param key unique key identifier
* @param hash computed hash value
* @param checkTime whether to consider time-based expiration
* @return LoadingValueReference object or null if not found
*/","* Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference
     * is already loading.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",2789,2862,"/**
* Updates or inserts value for given key.
* @param key unique identifier
* @param hash hash code of the key
* @param value new value to associate with the key
* @param onlyIfAbsent true if update should only occur if key is absent
* @return existing value if updated, null otherwise",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",2934,2993,"/**
* Updates value of existing key-value pair in the map.
* @param key unique identifier
* @param hash hash code for the key
* @param oldValue previous value associated with the key
* @param newValue new value to be updated
* @return true if update successful, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object)",2995,3047,"/**
* Updates or removes entry with matching key and hash.
* @param key the key to update
* @param hash the hash code of the key
* @param newValue new value for the entry (or null for removal)
* @return old entry value if updated, else null
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int)",3049,3093,"/**
* Retrieves value associated with the given key using hash-based indexing.
* @param key object to look up
* @param hash hash code of the key
* @return associated value or null if not found
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int,java.lang.Object)",3095,3139,"/**
* Removes entry with matching key and value from map.
* @param key the key to remove
* @param hash hash code of the key
* @param value the value to match for removal
* @return true if removed, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,storeLoadedValue,"com.google.common.cache.LocalCache$Segment:storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object)",3141,3200,"/**
* Updates the map with a new value for the given key.
* @param key the key to update
* @param hash the hash code of the key
* @param oldValueReference the old reference to the value (or null if not applicable)
* @param newValue the new value to store
* @return true if the update was successful, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Segment:clear(),3202,3238,"/**
* Evicts and rehashes table, updating access and write queues.
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postReadCleanup,com.google.common.cache.LocalCache$Segment:postReadCleanup(),3441,3445,"/**
* Triggers m2 operation based on read count threshold.
* @param readCount current read count
*/","* Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup
     * is not observed after a sufficient number of reads, try cleaning up from the read thread.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache:cleanUp(),3922,3926,"/**
* Invokes m1() on each Segment instance in the collection.",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable$1:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
* Resolves the type variable with dependencies.
* @param var type variable to resolve
* @param forDependants table of dependent types
*/","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolve,com.google.common.reflect.TypeResolver$TypeTable:resolve(java.lang.reflect.TypeVariable),301,314,"/**
* Recursively resolves a TypeVariable by applying the m3 method with a guarded TypeTable. 
* @param var The TypeVariable to resolve
* @return A resolved Type or null if not found
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$1:getGenericParameterTypes(),376,379,"/**
* Delegates call to method 'm1()' of another object.
* @return array of Type objects
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$1:getGenericExceptionTypes(),391,394,"/**
 * Delegates to a method with the same name in another class.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$2:getGenericParameterTypes(),454,466,"/**
* Filters and returns a subset of Type[] based on m2() and m3() results.
* @return filtered array of Type objects or original array if no filtering occurred
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$2:getGenericExceptionTypes(),478,481,"/**
* Delegates to underlying constructor's m1() method.
* @return array of Type objects",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,java.lang.Class)",267,269,"/**
* Resolves TypeToken with generic type parameter using m1() result.
* @param typeParam TypeParameter instance
* @param typeArg Class of the generic type X
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Combiner:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,java.util.concurrent.Executor)",1281,1299,"/**
* Combines callable and executes it on the specified executor.
* @param combiningCallable combining logic
* @param executor execution context
* @return ClosingFuture object with combined result
*/","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * combining function to their values. The function can use a {@link DeferredCloser} to capture
     * objects to be closed when the pipeline is done.
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Combiner:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,java.util.concurrent.Executor)",1337,1355,"/**
* Combines async callable with closing future using the given executor.
* @param combiningCallable AsyncCombiningCallable to use
* @param executor Executor for asynchronous execution
* @return ClosingFuture object containing combined result and closeables
*/","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * {@code ClosingFuture}-returning function to their values. The function can use a {@link
     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
     * captured by the returned {@link ClosingFuture}).
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.
     *
     * <p>If the combiningCallable throws any other exception, it will be used as the failure of the
     * derived step.
     *
     * <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture},
     * then none of the closeable objects in that {@code ClosingFuture} will be closed.
     *
     * <p>Usage guidelines for this method:
     *
     * <ul>
     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,
     *       Executor)} instead, with a function that returns the next value directly.
     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
     *       for every closeable object this step creates in order to capture it for later closing.
     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
     *       ClosingFuture} call {@link #from(ListenableFuture)}.
     * </ul>
     *
     * <p>The same warnings about doing heavyweight operations within {@link
     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,from,com.google.common.net.HostSpecifier:from(java.lang.String),113,126,"/**
* Parses a host specifier string into a HostSpecifier object.
* @param specifier host specifier string
* @throws ParseException if the input is invalid
*/","* Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if
   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a
   * specifier that is not already known to be valid.
   *
   * @throws ParseException if the specifier is not valid.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,isValid,com.google.common.net.HostSpecifier:isValid(java.lang.String),132,139,"/**
* Validates host specifier by parsing it and checking for errors.
* @param specifier string to be validated
* @return true if valid, false otherwise
*/","* Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in
   * the documentation for {@link #fromValid(String)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffix,com.google.common.net.InternetDomainName:publicSuffix(),408,410,"/**
* Returns an internet domain name based on conditional logic.
* @return InternetDomainName object or null if conditions not met
*/","* Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code
   * null} if no public suffix is present.
   *
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topPrivateDomain,com.google.common.net.InternetDomainName:topPrivateDomain(),460,466,"/**
* Returns an InternetDomainName instance with function mask applied.
* @return InternetDomainName object or null if not found
*/","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns
   * {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code
   * blogspot.com} is a public suffix.
   *
   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.
   *
   * <p>This method can be used to determine the probable highest level parent domain for which
   * cookies may be set, though even that depends on individual browsers' implementations of cookie
   * controls.
   *
   * @throws IllegalStateException if this domain does not end with a public suffix
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffix,com.google.common.net.InternetDomainName:registrySuffix(),516,518,"/**
* Returns an Internet domain name based on specific conditions.
* @return InternetDomainName object or null if conditions are not met.","* Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or
   * {@code null} if no registry suffix is present.
   *
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:topDomainUnderRegistrySuffix(),562,568,"/**
* Computes internet domain name mask value.
* @return Integer value representing the mask or -1 if not valid
*/","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it
   * returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix.
   *
   * <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is
   * returned.
   *
   * <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the
   * highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose.
   *
   * @throws IllegalStateException if this domain does not end with a registry suffix
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,parent,com.google.common.net.InternetDomainName:parent(),582,585,"/**
* Returns an InternetDomainName instance with all bits set.
*/","* Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the
   * current domain with the leftmost part removed. For example, the parent of {@code
   * www.google.com} is {@code google.com}.
   *
   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,toImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",83,88,"/**
* Creates a multimap collector from given functions to extract keys and values.","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableListMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object)",89,91,"/**
* Creates an Immutable Multimap with a single entry.
* @param k1 key
* @param v1 value
*/",Returns an immutable multimap containing a single entry.,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",94,96,"/**
* Creates an immutable multimap with two key-value pairs.
* @param k1 first key
* @param v1 value associated with the first key
* @param k2 second key
* @param v2 value associated with the second key
*/","Returns an immutable multimap containing the given entries, in order.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",102,104,"/**
* Creates an immutable multimap with three key-value pairs.
* @param k1 K-type key
* @param v1 V-type value
* @param k2 K-type key
* @param v2 V-type value
* @param k3 K-type key
* @param v3 V-type value
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",110,112,"/**
* Creates an Immutable Multimap with four key-value pairs.
* @param k1 first key
* @param v1 value associated with k1
* @param k2 second key
* @param v2 value associated with k2
* @param k3 third key
* @param v3 value associated with k3
* @param k4 fourth key
* @param v4 value associated with k4
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",118,121,"/**
* Creates an ImmutableMultimap with the specified key-value pairs.
* @param k1 k2 k3 k4 k5 keys
* @param v1 v2 v3 v4 v5 values
*/","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(java.lang.Iterable),405,408,"/**
* Creates an immutable multimap from a collection of key-value pairs.
* @param entries iterable of entry objects with generic keys and values
*/","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,inverse,com.google.common.collect.ImmutableListMultimap:inverse(),464,468,"/**
* Returns an inverse multimap or computes a new one if not cached.
*/","* {@inheritDoc}
   *
   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.
   *
   * @since 11.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.lang.Iterable,com.google.common.base.Function)",1678,1681,"/**
* Creates a multimap from an iterable of values and a function to map each value to its key.
* @param values Iterable of values
* @param keyFunction Function mapping each value to its key
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterable} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterable. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys, stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameter,"com.google.common.net.MediaType:withParameter(java.lang.String,java.lang.String)",934,936,"/**
* Returns media type based on attribute and exact match of given value.
* @param attribute attribute name
* @param value exact value to match
*/","* <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,com.google.common.net.MediaType:withParameters(com.google.common.collect.Multimap),890,892,"/**
* Returns media type based on function mask and parameters.
* @param parameters map of parameter key-value pairs
*/","* <em>Replaces</em> all parameters with the given parameters.
   *
   * @throws IllegalArgumentException if any parameter or value is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String)",1001,1005,"/**
* Creates a MediaType instance with the given type and subtype.
* @param type the top-level type (e.g. ""text"")
* @param subtype the sub-type (e.g. ""plain"") 
*/","* Creates a new media type with the given type and subtype.
   *
   * @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the
   *     type, but not the subtype.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parse,com.google.common.net.MediaType:parse(java.lang.String),1100,1136,"/**
* Parses the given string into a MediaType object.
* @param input the input string to parse
*/","* Parses a media type from its string representation.
   *
   * @throws IllegalArgumentException if the input is not parsable",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager:<init>(java.lang.Iterable),207,233,"/**
* Initializes ServiceManager with a collection of services.
* @param services iterable of services to manage
*/","* Constructs a new instance for managing the given services.
   *
   * @param services The services to manage
   * @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there
   *     are any duplicate services.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,flatteningToImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",141,146,"/**
* Creates a multimap collector from the given key and value functions.
* @param keyFunction function to extract keys
* @param valuesFunction function to extract values
*/","* Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableSetMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   *
   * // after deduplication, the resulting multimap is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n'))
   *         .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u'))
   *         .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,"com.google.common.collect.RegularImmutableTable:forCells(java.util.List,java.util.Comparator,java.util.Comparator)",118,147,"/**
* Creates a RegularImmutableTable from a list of cells, optionally sorting by row and/or column comparators.
* @param cells list of cells to process
* @param rowComparator comparator for sorting rows (null for no sorting)
* @param columnComparator comparator for sorting columns (null for no sorting)
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,com.google.common.collect.RegularImmutableTable:forCells(java.lang.Iterable),149,151,"/**
* Creates an immutable table from iterable cells.
* @param cells collection of table cells
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveSupertype,com.google.common.reflect.TypeToken:resolveSupertype(java.lang.reflect.Type),287,293,"/**
* Resolves the type token for a given type, creating a new TypeToken instance.
* @param type the input type to resolve
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfParameterizedType,com.google.common.reflect.TypeToken:isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType),894,917,"/**
* Verifies if the given ParameterizedType matches a functional interface type.
* @param supertype ParameterizedType to verify
* @return true if matches, false otherwise
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveType,com.google.common.reflect.TypeToken:resolveType(java.lang.reflect.Type),280,285,"/**
* Wraps and returns the result of recursive token generation.
* @param type input type to be processed
*/","* Resolves the given {@code type} against the type context represented by this type. For example:
   *
   * {@snippet :
   * new TypeToken<List<String>>() {}.resolveType(
   *     List.class.getMethod(""get"", int.class).getGenericReturnType())
   * => String.class
   * }",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(),110,112,"/**
* Creates a Min-Max priority queue with ordering based on Ordering.m1(). 
* @return MinMaxPriorityQueue instance
*/","* Creates a new min-max priority queue with default settings: natural order, no maximum size, no
   * initial contents, and an initial expected size of 11.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transitiveClosure,com.google.common.graph.Graphs:transitiveClosure(com.google.common.graph.Graph),189,221,"/**
* Computes the transitive closure of a graph.
* @param graph input graph
* @return ImmutableGraph object representing the transitive closure
*/",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$Values:contains(java.lang.Object),4616,4619,"/**
* Checks if an object matches a specified mask.
* @param o Object to check
* @return True if object matches mask, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,"com.google.common.cache.LocalCache$Segment:refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean)",2375,2392,"/**
* Retrieves a value from the cache with optional loading.
* @param key unique cache key
* @param hash hash code for the key
* @param loader CacheLoader to use if not cached
* @param checkTime whether to consider time-based eviction
* @return loaded V object or null on failure","* Refreshes the value associated with {@code key}, unless another thread is already doing so.
     * Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or
     * {@code null} if another thread is performing the refresh or if an error occurs during
     * refresh.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache:put(java.lang.Object,java.lang.Object)",4209,4216,"/**
* Computes and caches a cached value for the given key.
* @param key unique cache key
* @param value value to be cached
* @return cached value or null if not available
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putIfAbsent,"com.google.common.cache.LocalCache:putIfAbsent(java.lang.Object,java.lang.Object)",4218,4224,"/**
* Computes and returns a masked result for the given key-value pair.
* @param key unique identifier
* @param value associated data
* @return Masked V object or null if invalid
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object,java.lang.Object)",4287,4297,"/**
* Updates a value in the map with given key and new value.
* @param key unique key identifier
* @param oldValue previous value (can be null)
* @param newValue new value to store
* @return true if update was successful, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object)",4299,4306,"/**
* Computes and caches query result for given key and value.
* @param key unique query identifier
* @param value associated data value
* @return cached result or null if not computed yet
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache:remove(java.lang.Object),4267,4275,"/**
* Computes a secondary value using the provided key and primary value.
* @param key nullable object to compute from
* @return secondary V object or null if key is null
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache:remove(java.lang.Object,java.lang.Object)",4277,4285,"/**
* Performs a secondary database query using the provided key and value.
* @param key unique identifier for the query
* @param value associated data for the query
* @return true if the query is successful, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAndRecordStats,"com.google.common.cache.LocalCache$Segment:getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture)",2327,2349,"/**
* Computes and caches the value for a given key.
* @param key unique key identifier
* @param hash key hash code
* @param loadingValueReference CacheLoader reference
* @param newValue new value to be computed
* @return computed value or null if failed
*/","Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache:clear(),4308,4313,"/**
* Recursively invokes m1() on all child segments.",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advanceTo,com.google.common.cache.LocalCache$HashIterator:advanceTo(com.google.common.cache.ReferenceEntry),4422,4437,"/**
* Checks if a ReferenceEntry is eligible for write-through.
* @param entry the entry to check
* @return true if eligible, false otherwise
*/","* Advances to the given entry. Returns true if the entry was valid, false if it should be
     * skipped.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,"com.google.common.cache.LocalCache$Segment:containsKey(java.lang.Object,int)",2742,2757,"/**
* Checks if a key matches the current function mask.
* @param key Object to check
* @param hash int hash code of key
* @return true if key matches, false otherwise
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache$Segment:containsValue(java.lang.Object),2763,2787,"/**
* Checks if a given value matches any in the map.
* @param value object to search for
*/","* This method is a convenience for testing. Code should call {@link LocalCache#containsValue}
     * directly.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$LocalManualCache:cleanUp(),4917,4920,"/**
* Calls local cache's m1() method to perform some operation.
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken$2:toString(),840,843,"/**
* Returns string representation of runtime type using Type.m1.
* @return string value of runtime type
*/",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,index,com.google.common.collect.FluentIterable:index(com.google.common.base.Function),727,730,"/**
* Creates a multimap with keys generated by the given function.
* @param keyFunction function to generate keys from elements
* @return Multimap with generated keys and original elements as values
*/","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in this {@code FluentIterable} of values. Each element of this
   * iterable will be stored as a value in the resulting multimap, yielding a multimap with the same
   * size as this iterable. The key used to store that value in the multimap will be the result of
   * calling the function on that value. The resulting multimap is created as an immutable snapshot.
   * In the returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}
   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve
   * the order of entries.
   *
   * @param keyFunction the function used to produce the key for each value
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withCharset,com.google.common.net.MediaType:withCharset(java.nio.charset.Charset),947,953,"/**
* Creates a MediaType object with specified Charset.
* @param charset the Charset to associate with the MediaType
*/","* Returns a new instance with the same type and subtype as this instance, with the {@code
   * charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code
   * charset} parameter will be present on the new instance regardless of the number set on this
   * one.
   *
   * <p>If a charset must be specified that is not supported on this JVM (and thus is not
   * representable as a {@link Charset} instance), use {@link #withParameter}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withoutParameters,com.google.common.net.MediaType:withoutParameters(),881,883,"/**
* Returns media type based on parameter mask.
* @return MediaType object or m2 if m1 is false
*/","* Returns a new instance with the same type and subtype as this instance, but without any
   * parameters.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createApplicationType,com.google.common.net.MediaType:createApplicationType(java.lang.String),1034,1036,"/**
* Returns media type with application-specific mask.
* @param subtype specific subtype (e.g., json)
*/","* Creates a media type with the ""application"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createAudioType,com.google.common.net.MediaType:createAudioType(java.lang.String),1043,1045,"/**
* Returns media type with specified subtype and default audio type.
* @param subtype desired subtype (e.g. ""mp3"", ""wav"")
*/","* Creates a media type with the ""audio"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createFontType,com.google.common.net.MediaType:createFontType(java.lang.String),1052,1054,"/**
 * Returns media type with 'application/fmt' prefix.
 */","* Creates a media type with the ""font"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createImageType,com.google.common.net.MediaType:createImageType(java.lang.String),1061,1063,"/**
* Returns media type for image subtypes.
* @param subtype image subtype (e.g. 'jpeg', 'png')
*/","* Creates a media type with the ""image"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createTextType,com.google.common.net.MediaType:createTextType(java.lang.String),1070,1072,"/**
* Returns media type with specified subtype and default text type.
* @param subtype subtype of media type (e.g. ""json"", ""xml"")
*/","* Creates a media type with the ""text"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createVideoType,com.google.common.net.MediaType:createVideoType(java.lang.String),1079,1081,"/**
* Returns media type mask based on video subtype.
* @param subtype video subtype string
* @return MediaType object or null if invalid subtype
*/","* Creates a media type with the ""video"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,buildOrThrow,com.google.common.collect.ImmutableTable$Builder:buildOrThrow(),285,295,"/**
* Creates an ImmutableTable instance based on the number of cells.
* @return Table instance with appropriate implementation (Singleton or Regular) 
*         depending on the cell count and comparators.","* Returns a newly-created immutable table, or throws an exception if duplicate key pairs were
     * added.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added
     * @since 31.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericSuperclass,com.google.common.reflect.TypeToken:getGenericSuperclass(),307,323,"/**
* Resolves the type token for this class to a supertype.
* @return TypeToken of superclass or null if none found
*/","* Returns the generic superclass of this type or {@code null} if the type represents {@link
   * Object} or an interface. This method is similar but different from {@link
   * Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>()
   * {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while
   * {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where
   * {@code E} is the type variable declared by class {@code ArrayList}.
   *
   * <p>If this type is a type variable or wildcard, its first upper bound is examined and returned
   * if the bound is a class or extends from a class. This means that the returned type could be a
   * type variable too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericInterfaces,com.google.common.reflect.TypeToken:getGenericInterfaces(),347,362,"/**
* Resolves and returns a list of type tokens for interfaces implemented by the generic type.
*/","* Returns the generic interfaces that this type directly {@code implements}. This method is
   * similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new
   * TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code
   * new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will
   * return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable
   * declared by interface {@code Iterable}.
   *
   * <p>If this type is a type variable or wildcard, its upper bounds are examined and those that
   * are either an interface or upper-bounded only by interfaces are returned. This means that the
   * returned types could include type variables too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertype,com.google.common.reflect.TypeToken:getSupertype(java.lang.Class),396,415,"/**
* Returns the first matching superclass token from the provided class.
* 
* @param superclass Class to search for a superclass token
* @return TypeToken of the closest superclass or null if not found
*/","* Returns the generic form of {@code superclass}. For example, if this is {@code
   * ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code
   * Iterable.class}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,scheduleRefresh,"com.google.common.cache.LocalCache$Segment:scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader)",2351,2367,"/**
* Calculates a new value based on the given key and returns it only if it's fresher than the existing entry.
* @param entry existing ReferenceEntry
* @param key unique identifier for the entry
* @param hash hash code of the key
* @param oldValue current cached value
* @param now current timestamp
* @param loader CacheLoader instance to fetch new values
* @return fresher value or null if not updated, otherwise oldValue
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache:refresh(java.lang.Object),4154,4157,"/**
* Computes and caches user profile data.
* @param key unique user identifier
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$LocalManualCache:put(java.lang.Object,java.lang.Object)",4871,4874,"/**
 * Delegates cache operation to underlying local cache implementation.
 * @param key unique identifier
 * @param value associated data
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,com.google.common.cache.LocalCache$WriteThroughEntry:setValue(java.lang.Object),4516,4521,"/**
* Returns the old value associated with the given key and new value.
* @param key identifier of the key-value pair
* @return old value or null if not found
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAll,"com.google.common.cache.LocalCache:loadAll(java.util.Set,com.google.common.cache.CacheLoader)",4082,4139,"/**
* Loads all cached entries for the given keys.
* @param keys unique cache key set
* @param loader CacheLoader instance to fetch data
* @return a Map of loaded entries, or null if not found
* @throws ExecutionException on load failure
*/","* Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't
   * implement {@code loadAll}.",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache:putAll(java.util.Map),4260,4265,"/**
* Iterates through the map entries and applies a custom action.
* @param m input map to process
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$HashIterator:remove(),4453,4458,"/**
* Recursively cleans up and updates local cache.
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$KeySet:remove(java.lang.Object),4583,4586,"/**
* Checks if cached result exists for given input.
* @param o input object to check cache for
* @return true if cached result found, false otherwise
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidate,com.google.common.cache.LocalCache$LocalManualCache:invalidate(java.lang.Object),4881,4885,"/**
* Updates mask values in cache and remote storage.
* @param key unique identifier for the update operation
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache:invalidateAll(java.lang.Iterable),4315,4320,"/**
* Applies M1 function to each iterable element.
* @param keys iterable of elements to process
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$EntrySet:remove(java.lang.Object),4650,4658,"/**
* Recursively checks cache entry for validity.
* @param o cached object to validate
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$Segment:compute(java.lang.Object,int,java.util.function.BiFunction)",2211,2293,"/**
* Computes and stores a new value for the given key using the provided function.
* @param key unique key identifier
* @param hash integer representation of the key's hash code
* @param function BiFunction to compute the new value
* @return computed value or null if not created
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadSync,"com.google.common.cache.LocalCache$Segment:loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2297,2305,"/**
* Loads cache value for given key using provided loader.
* @param key the key to load
* @param hash cache hash code
* @param loadingValueReference value reference with caching and loading functionality
* @param loader function to load value if not cached
* @return loaded or cached value, or throws ExecutionException on failure
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AbstractCacheSet:clear(),4548,4551,"/**
 * Calls superclass's implementation of m1().",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(),4892,4895,"/**
* Applies mask to local cache.
* @see #localCache
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Values:clear(),4600,4603,"/**
* Calls local cache's overridden m1() method.",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInChain,com.google.common.cache.LocalCache$HashIterator:nextInChain(),4395,4404,"/**
* Checks if a functional mask is present.
* @return true if found, false otherwise
*/",Finds the next entry in the current chain. Returns true if an entry was found.,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,com.google.common.cache.LocalCache:containsKey(java.lang.Object),4159,4167,"/**
* Recursively checks existence of object with given key.
* @param key object to search for
* @return true if found, false otherwise
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,build,com.google.common.collect.ImmutableTable$Builder:build(),274,276,"/**
* Returns an empty table with default mask.
*/","* Returns a newly-created immutable table.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate key pairs. The {@code build()} method will
     * soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertypeFromUpperBounds,"com.google.common.reflect.TypeToken:getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])",1202,1214,"/**
* Finds the closest supertype of T that is a subclass of given supertype.
* @param supertype Class to check against
* @param upperBounds Array of upper bounds for TypeToken<? super T>
* @return closest matching supertype or null if not found
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveTypeArgsForSubclass,com.google.common.reflect.TypeToken:resolveTypeArgsForSubclass(java.lang.Class),1268,1293,"/**
* Resolves the functional type of a subclass.
* @param subclass subclass to resolve
*/",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int)",2083,2103,"/**
* Retrieves a mapped object by key and hash.
* @param key the key to search for
* @param hash the hash code of the key
* @return the associated value or null if not found
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache$LocalLoadingCache:refresh(java.lang.Object),4965,4968,"/**
* Delegates cache lookup to local cache instance.
* @param key unique identifier (type K)
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache$LocalManualCache:putAll(java.util.Map),4876,4879,"/**
* Delegates cache operation to localCache instance.
* @param m map of key-value pairs (K,V)
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(java.lang.Iterable),4887,4890,"/**
* Delegates cache operation to localCache instance.
* @param keys iterable of cache keys
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache:compute(java.lang.Object,java.util.function.BiFunction)",4226,4233,"/**
* Applies a given function to the user profile associated with the provided key.
* @param key unique identifier for the user
* @param function BiFunction to process the user data
* @return result of applying the function or null if not found
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,lockedGetOrLoad,"com.google.common.cache.LocalCache$Segment:lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader)",2105,2187,"/**
* Retrieves a value from the map using the provided key and hash.
* @param key unique identifier
* @param hash integer hash code
* @param loader CacheLoader instance for loading values if not found
* @return loaded value or null if not found
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInTable,com.google.common.cache.LocalCache$HashIterator:nextInTable(),4407,4416,"/**
* Checks if a mask condition is fulfilled by iterating through tables.
* @return true if the condition is met, false otherwise
*/",Finds the next entry in the current table. Returns true if an entry was found.,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$KeySet:contains(java.lang.Object),4578,4581,"/**
* Checks if an object matches a specific mask.
* @param o Object to check
* @return true if object matches mask, false otherwise
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(java.lang.Iterable),136,143,"/**
* Creates an immutable table from a collection of cells.
* @param cells iterable of cells to include in the table
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",35,49,"/**
* Creates a Collector for aggregating data into an ImmutableTable.
* @param rowFunction function to extract row key
* @param columnFunction function to extract column key
* @param valueFunction function to extract table value
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtype,com.google.common.reflect.TypeToken:getSubtype(java.lang.Class),422,441,"/**
* Resolves subclass type token for the given Class.
* @param subclass subclass Class
* @return TypeToken<? extends T> or null if invalid
*/","* Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is
   * {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is
   * returned.",,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache:get(java.lang.Object),3974,3982,"/**
* Computes and caches key's hash value using m1(), then delegates to m2() for further processing.
* @param key object to compute hash value for
* @return V object or null if input is null
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache:getIfPresent(java.lang.Object),3990,3999,"/**
* Retrieves a value associated with the given key using a custom hashing and retrieval mechanism.
* @param key Object to be used in the retrieval process
* @return Value associated with the key, or null if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfAbsent,"com.google.common.cache.LocalCache:computeIfAbsent(java.lang.Object,java.util.function.Function)",4235,4240,"/**
* Applies a transformation function to the value associated with a key.
* @param key unique identifier
* @param function callback to compute new value or null if unchanged
* @return transformed value or null if original was null
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfPresent,"com.google.common.cache.LocalCache:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",4242,4248,"/**
* Applies a given function to the key and returns result.
* @param key unique identifier
* @param function BiFunction to apply to key and old value
* @return V object or null if not found
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,merge,"com.google.common.cache.LocalCache:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",4250,4258,"/**
* Applies a transformation function to the user's value, masking updates if old and new values are identical.
* @param key unique identifier
* @param newValue new value to apply or replace with if unchanged
* @param function BiFunction to transform old and new values
* @return transformed newValue or original oldValue if unchanged
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int,com.google.common.cache.CacheLoader)",2045,2081,"/**
* Retrieves cached value for the given key, or loads it using the provided loader.
* @param key unique cache key
* @param hash hash code of the key
* @param loader CacheLoader to use if value is not found in cache
* @return cached value or loaded value from the loader
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advance,com.google.common.cache.LocalCache$HashIterator:advance(),4371,4392,"/**
* Iterates through table segments, filtering based on m1(), m2(), and m3().
* @return void
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(com.google.common.collect.Table),125,134,"/**
* Recursively unwraps and returns a parameterized ImmutableTable.
* @param table input Table to unwrap
* @return ImmutableTable with parameterized row/column types
*/","* Returns an immutable copy of the provided table.
   *
   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration
   * ordering of all views in the returned table. Note that some views of the original table and the
   * copied table may have different iteration orders. For more control over the ordering, create a
   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and
   * {@link Builder#putAll}
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,com.google.common.collect.TableCollectors$ImmutableTableCollectorState:toTable(),166,168,"/**
* Creates an immutable table with specified insertion order.
* @return ImmutableTable instance
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",68,74,"/**
* Creates an immutable table collector with custom functions for rows, columns, and values.
* @param rowFunction function to extract row key
* @param columnFunction function to extract column key
* @param valueFunction function to extract table value
*/","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, or value functions return null on any input.
   *
   * @since 21.0",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySubtype,com.google.common.reflect.TypeToken:getArraySubtype(java.lang.Class),1251,1266,"/**
* Creates a TypeToken for subclass type, ensuring it's a subtype of this.
* @param subclass Class<?> to create the token for
*/",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$EntrySet:contains(java.lang.Object),4635,4648,"/**
* Checks if an object matches the function mask.
* @param o object to check
* @return true if object is a valid entry, false otherwise
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrDefault,"com.google.common.cache.LocalCache:getOrDefault(java.lang.Object,java.lang.Object)",4001,4005,"/**
* Returns value associated with given key or default value if not found.
* @param key object to search for
* @param defaultValue value to return if key is null or not found
* @return V object associated with key, or defaultValue if not found
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache:getAllPresent(java.lang.Iterable),4011,4031,"/**
* Creates an immutable map from the provided keys and their associated values.
* @param keys Iterable of keys to include in the resulting map
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache:removeIf(java.util.function.BiPredicate),4554,4569,"/**
* Applies a filter to the cache and returns whether any entries were modified.
* @param filter predicate function to filter cache entries
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache$LocalManualCache:getIfPresent(java.lang.Object),4848,4851,"/**
* Retrieves cached value by key.
* @param key unique identifier (Object)
* @return cached value of type V or null if not found
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache:get(java.lang.Object,com.google.common.cache.CacheLoader)",3984,3988,"/**
* Computes cache entry for the given key using the provided loader.
* @param key unique identifier
* @param loader CacheLoader instance to generate entry value
* @return cached V object or throws ExecutionException if failed
*/",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextEntry,com.google.common.cache.LocalCache$HashIterator:nextEntry(),4444,4451,"/**
* Retrieves the next external entry and returns it as the last returned value.
* @return The retrieved UserProfile object or throws a NoSuchElementException if none available.",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache$LocalManualCache:getAllPresent(java.lang.Iterable),4866,4869,"/**
* Retrieves cached values from local cache using provided keys.
* @param keys iterable of unique key identifiers
* @return an immutable map containing cached values or empty map if not found
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$EntrySet:removeIf(java.util.function.Predicate),4629,4633,"/**
* Applies local cache predicate filtering.
*@param filter predicate to filter entries
*@return true if filtered successfully, false otherwise
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$Values:removeIf(java.util.function.Predicate),4610,4614,"/**
* Applies a predicate to cached values and returns true if all pass.
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$LocalManualCache:get(java.lang.Object,java.util.concurrent.Callable)",4853,4864,"/**
* Loads cache entry by executing a callable for the given key.
* @param key unique cache identifier
* @param valueLoader function to load cache value
* @return cached result or null if not found
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrLoad,com.google.common.cache.LocalCache:getOrLoad(java.lang.Object),4007,4009,"/**
* Retrieves a mask value from storage using the provided key.
* @param key unique identifier to retrieve the mask value for
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache:getAll(java.lang.Iterable),4033,4076,"/**
* Loads user profile values for given keys, handling cache misses and retries.
* @param keys Iterable of unique key identifiers
* @return Immutable map with loaded values or null if not found
*/",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache$LocalLoadingCache:get(java.lang.Object),4945,4948,"/**
* Retrieves cached value by key from local cache.
* @param key unique identifier for cached value
* @return cached value or null if not found
*/",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache$LocalLoadingCache:getAll(java.lang.Iterable),4960,4963,"/**
* Retrieves cached values by key set.
* @param keys iterable of unique keys
* @return map of cached values or empty map if not found
*/",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getUnchecked,com.google.common.cache.LocalCache$LocalLoadingCache:getUnchecked(java.lang.Object),4950,4958,"/**
* Retrieves and returns a value using m2, wrapping execution exceptions. 
* @param key the key to use for retrieval
*/",,,,True,22
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,apply,com.google.common.cache.LocalCache$LocalLoadingCache:apply(java.lang.Object),4970,4973,"/**
* Returns the functional mask value based on the given key.
* @param key unique identifier or input parameter
*/",,,,True,23