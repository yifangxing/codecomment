1 Sets the row comparator for the builder. @param rowComparator Comparator to sort rows by
2 Sets a custom comparator for columns. @param columnComparator comparator to use when sorting columns
3 Flattens and sorts a nested iterable of objects using the provided comparator. @param iterables nested iterable of objects @param comparator sorting comparator for objects @return unmodifiable sorted iterable of objects or empty if input is null
4 Finds the index of the first element matching a predicate in an iterator. @param iterator iterable collection of elements @param predicate condition to match @return index of matching element, or -1 if not found
5 Creates a multimap builder with a sorted set as the value collection. @param comparator key comparison function
6 Creates a SetMultimapBuilder with the given enum value class. @param valueClass Class of enum values
7 Computes the union of two sets, merging their elements. @param set1 first set to merge @param set2 second set to merge @return SetView representing the merged set
8 Returns a SetView containing common elements between two sets. @param set1 first set to compare @param set2 second set to compare
9 Computes the difference between two sets, retaining elements from set1 that are not in set2. @param set1 source set @param set2 set to exclude from set1 @return SetView containing set1 elements not in set2
10 Computes the symmetric difference between two sets. @param set1 first input set @param set2 second input set @return SetView object representing the symmetric difference
11 Finds the first occurrence of a boolean array within another. @param array The search array @param target The target array to find @return Index of the found array or -1 if not found
12 Searches array for first occurrence of target. @param array byte array to search @param target target byte sequence to find @return index of target if found, -1 otherwise
13 Finds the first occurrence of a substring in an array. @param array search array @param target substring to find @return index of match or -1 if not found
14 Finds the first occurrence of a double[] in another array. @param array primary array to search @param target array to find within array @return index of first match or -1 if not found
15 Finds the index of the first occurrence of the target array within the given array. @param array input array to search @param target array to find @return index if found, -1 otherwise
16 Finds the index where array matches target, or returns -1 if no match. @param array input array to search @param target array to find in array @return index of first match, or -1 if not found
17 Finds the first occurrence of a target sub-array in a given array. @param array source array @param target target sub-array to search for @return index of first match (>= 0) or -1 if not found
18 Finds the first occurrence of a short array within another. @param array search array @param target array to find @return index of match or -1 if not found
19 Creates a guard that returns true when the given supplier satisfies its condition. @param isSatisfied supplier of boolean value indicating satisfaction condition
20 Returns a default instance of the specified type, or null if not applicable. @param type Class to fetch default value for
21 Creates a joiner with custom null text for masking. @param nullText text to display when joining null values
22 Initializes the ToStringHelper with the given class name. @param className the name of the class being processed
23 Maps an iterable of Optional values to an iterable of present values. @param optionals Iterable of Optional values @return Iterable of T objects, or empty if all are absent
24 Converts CharSequence to an iterable list of strings, applying custom processing. @param sequence input character sequence
25 Truncates or pads input string to specified minimum length. @param string original string @param minLength target string length @param padChar character used for padding @return padded/truncated string of specified length
26 Pads input string to minimum length with specified character. @param string original string @param minLength minimum desired length @param padChar padding character @return padded string or original if already long enough
27 Wraps and re-throws a Throwable with its original type. @param throwable the exception to be wrapped @param declaredType the target class of the wrapped exception @throws X the wrapped exception with updated type
28 Re-throws the original exception, wrapping it in a RuntimeException or Error as necessary. @param throwable the original exception to re-throw
29 Recursively fetches and aggregates root causes of a Throwable. @return List<Throwable> list of root causes or empty list if none found
30 Wraps a CacheLoader with custom execution logic. @param loader original cache loader to delegate to @param executor executor service for asynchronous operations
31 Wraps a removal listener with an executor to run listener's callback asynchronously. @param listener original removal listener @param executor executor to schedule the callback @return asynchronous removal listener
32 Returns a map of values for the specified column, or an empty map if not found. @param columnKey unique column identifier
33 Fetches a Map of values for the given row key. @param rowKey unique identifier for a data row @return A Map with column keys as C and values as V, or null if not found
34 Maps elements of the input spliterator using the provided function. @param fromSpliterator input spliterator @param function mapping function @return new spliterator with mapped elements
35 Creates a spliterator that filters elements based on the given predicate. @param fromSpliterator initial spliterator @param predicate filter condition
36 Checks if an object belongs to a collection. @param collection the collection to check @param object the object to search for @return true if found, false otherwise
37 Checks if an object is present in a collection. @param collection Collection to search @param object Object to find @return true if found, false otherwise
38 Checks if a sorted iterable is valid based on the provided comparator. @param iterable Iterable to check @param comparator Comparator to use for validation @return True if iterable is valid, false otherwise
39 Determines if the iterable contains a sorted sequence based on the provided comparator. @param iterable Iterable of objects to check @param comparator Comparator function to determine sort order @return True if the iterable is sorted, false otherwise
40 Creates a comparator for Optional values based on the given value comparator. @param valueComparator comparator for non-optional values @return comparator for Optional values or null if not found
41 Creates a comparator for Optional values based on the provided value comparator. @param valueComparator comparator to apply to contained values @return Comparator<Optional<T>> that prioritizes present over absent values
42 Creates a contiguous set of elements up to and including the given element. @param toElement upper bound (inclusive if true) @param inclusive whether to include the upper bound in the set
43 Creates a contiguous set of elements based on the given mask. @param fromElement starting element (inclusive if true, exclusive otherwise) @param inclusive whether to include the starting element in the set @return ContiguousSet containing all relevant elements
44 Triggers m4 method on the delegate and returns true.
45 Wraps an iterable, returning a fluent iterable. @param iterable the input iterable
46 Adds an element to the builder's contents with a specified mask value. @param element the element to add
47 Configures builder with a custom comparator for keys. @param keyComparator Comparator to use when comparing keys
48 Configures the builder to use a custom comparator for value sorting. @param valueComparator Comparator instance to apply when ordering values
49 Processes an element and updates internal state. @param element Element to process @return This builder instance for chaining
50 Adds an element with specified occurrences to the mask. @param element element to add @param occurrences number of times to include the element in the mask
51 Adds multiple instances of the given element to the builder's content. @param element element to add, wrapped by m1() @param count number of times to add the element
52 Creates a collector that groups elements into an immutable sorted multiset. @param comparator comparison function for sorting @param elementFunction maps input to group-by key @param countFunction maps input to count in the group
53 Creates an ordered set of function masks from the given element and inclusivity flag. @param toElement the target element for which to create a mask @param inclusive whether to include the target element in the mask @return ImmutableSortedSet containing the function masks
54 Computes an immutable sorted set of elements based on the given criteria. @param fromElement element to start from (inclusive or exclusive depending on inclusive flag) @param inclusive whether the range includes the end element @return ImmutableSortedSet containing filtered elements
55 Wraps an iterable in an unmodifiable view, or returns the original if it's already immutable. @param iterable input iterable to be wrapped
56 Returns an iterable view of the given collection. @param iterable non-null, immutable collection to view
57 Filters an iterable of objects based on a predicate and returns the first matching element. @param removeFrom iterable to search in @param predicate condition to match elements against @return first matching element or null if none found
58 Creates a cycled iterable from the given collection. @param iterable input iterable to cycle through
59 Filters an iterable of objects based on a predicate, returning the filtered result. @param unfiltered input iterable to be filtered @param retainIfTrue predicate to determine which elements are retained @return filtered Iterable or null if not found
60 Transforms an iterable of objects to another type using a provided function. @param fromIterable input iterable @param function transformation function @return transformed iterable or null if not found
61 Converts an iterable to a consuming iterable. @param iterable input iterable (may be modified)
62 Returns an unmodifiable iterator from the given iterator, wrapping it if necessary. @param iterator existing iterator to wrap or pass through
63 Wraps an existing iterator with a deprecated mask function. @param iterator input iterator to be wrapped
64 Removes elements from a collection based on an iterator's filtering criteria. @param removeFrom Iterator to filter and remove elements @param elementsToRemove Collection of elements to potentially remove @return true if any elements were removed, false otherwise
65 Removes elements from the iterator matching the predicate. @param removeFrom iterator to modify @param predicate filter condition for removal @return true if any elements were removed, false otherwise
66 Removes elements from a collection that do not match the given iterable. @param removeFrom iterator to remove elements from @param elementsToRetain iterable containing elements to retain @return true if any elements were removed, false otherwise
67 Updates a collection with elements from an iterator. @param addTo collection to modify @param iterator source of elements to add @return true if the collection was modified, false otherwise
68 Merges two iterators into a single iterator, combining their elements. @param iterable input iterable to merge with the other iterator @return merged iterator yielding elements from both iterables
69 Filters an iterator, retaining elements that match a predicate. @param unfiltered Iterator to filter @param retainIfTrue Predicate to apply to each element @return Filtered iterator or null if all elements are filtered out
70 Applies a predicate to all elements in an iterator, returning true if all match. @param iterator iterator over elements of type T @param predicate condition to evaluate each element against
71 Iterates over the input iterator, applying the predicate to each element. Returns the first matching element or throws a NoSuchElementException. @param iterator iterable collection of elements @param predicate condition to match elements against @return first matching element or null if not found in Java 8 style
72 Maps iterator values to a different type using the provided function. @param fromIterator source iterator @param function mapping function @return mapped iterator or null if input is null
73 Converts an Iterator to a read-only, consuming iterator. @param iterator original iterator to consume and wrap
74 Iterates through an iterator and performs specific operations on each element. @param iterator the input iterator to process
75 Creates an unmodifiable iterator from a given enumeration. @param enumeration input enumeration to convert
76 Wraps a Peekable Iterator, returning the original iterator.
77 Creates an EnumMap instance with a key type and a function that maps each enum value to null. @param type Class of the enum values @return A pre-initialized EnumMap instance.
78 Creates a new Entry instance with generic types, wrapping the provided entry. @param entry existing Entry to be wrapped
79 Transforms user profile data using the provided EntryTransformer. @param transformer transformation function @param entry existing UserProfile object @return transformed UserProfile object or null if not found
80 Transforms entries by applying a given function to each key-value pair. @param transformer EntryTransformer instance @return Function that transforms entries
81 Retrieves a value from the input map using the provided key. @param map input map @param key unique identifier to fetch value for @return associated value or null if not found or invalid key
82 Checks if a value exists in the given map for the specified key. @param map map to search @param key key to look up @return true if a value exists, false otherwise
83 Retrieves a value from the map using the provided key, handling potential ClassCastException and NullPointerException. @param map Map containing values @param key Key to look up in the map @return Value associated with the key or null on failure
84 Performs action on each map entry. @param action BiConsumer to apply to key-value pairs
85 Creates a MultimapBuilder instance with the given comparator. @param comparator key comparison function for the map
86 Creates a MultimapBuilderWithKeys instance with the specified key class. @param keyClass the Class of keys to be used in the multimap
87 Wraps an ImmutableMultimap with a deprecated function mask. @param delegate underlying multimap instance @return the wrapped multimap instance
88 Wraps an immutable multimap with a deprecated function mask. @param delegate the underlying multimap to be wrapped
89 Wraps a ImmutableListMultimap instance. @param delegate wrapped multimap
90 Iterates over elements and applies consumer to each. @param action callback function for processing
91 Executes the given consumer on each element of a collection, obtained by invoking m5() and processing its elements.
92 Converts an ImmutableMultiset to a regular Multiset. @param multiset the input multiset
93 Merges two multiset instances into a new view multiset. @param multiset1 first multiset instance @param multiset2 second multiset instance @return merged Multiset object
94 Merges two multisets into a new view multiset. @param multiset1 first multiset @param multiset2 second multiset (elements must be compatible) @return merged ViewMultiset object
95 Merges two multisets into a new multiset containing all elements. @param multiset1 first multiset to merge @param multiset2 second multiset to merge @return merged Multiset object
96 Returns a multiset containing elements present in both input multisets. @param multiset1 first input multiset @param multiset2 second input multiset @return Multiset of common elements or empty set if none found
97 Checks if a multiset is a superset of another by comparing their element counts. @param superMultiset the potentially larger multiset @param subMultiset the smaller multiset to check against @return true if superMultiset contains all elements and at least as many, false otherwise
98 Updates the Multiset to modify, removing or reducing elements with zero or insufficient occurrences. @param multisetToModify the Multiset to update @param occurrencesToRetain the Multiset of required occurrences @return true if any modifications were made, false otherwise
99 Removes specified occurrences from a multiset. @param multisetToModify the multiset to modify @param occurrencesToRemove occurrences to remove @return true if any elements were removed, false otherwise
100 Filters the multiset by retaining only specified elements. @param self multiset to filter @param elementsToRetain collection of elements to keep @return true if filtering was successful, false otherwise
101 Returns the input ordering, or throws exception if null. @param ordering input ordering to be returned
102 Adds elements to a collection from a queue, within a timeout. @param q BlockingQueue source @param buffer Collection target @param numElements number of elements to add @param timeout timeout duration @return number of elements successfully added
103 Adds elements from a queue to a collection within a time limit. @param q the blocking queue @param buffer the collection for added elements @param numElements maximum number of elements to add @param timeout time limit in specified unit @return number of elements successfully added
104 Checks if a given value falls within a specific range. @param C value to be evaluated
105 Creates a sorted set with the given comparator. @param comparator comparison function for elements
106 Merges two streams and a function into a new stream, applying the function to each pair of elements. @param streamA first input stream @param streamB second input stream @param function BiFunction to apply to each element pair @return Stream of results or empty if either stream is empty
107 Applies a function with index to each element in the stream. @param stream input stream @param function function to apply @return transformed stream or null if not found
108 Transforms IntStream into a Stream of objects using the provided function. @param stream input IntStream @param function mapping function to apply on each index
109 Creates a stream by applying a function to each element in the input LongStream. @param stream input stream of long values @param function function to apply to each element
110 Transforms DoubleStream using a DoubleFunctionWithIndex to produce a Stream of type R. @param stream input DoubleStream @param function transformation function with index
111 Merges and remaps range map entries within the given range. @param range Range to merge entries in @param value Value to replace existing values with, or null for no replacement @param remappingFunction Function to apply to each entry's value before replacing
112 Creates a TreeTraverser for traversing trees using the given function. @param nodeToChildrenFunction function to fetch children of a tree node
113 Creates a FluentIterable from the specified root object. @param root The root object to iterate over
114 Creates a FluentIterable for the given root object, wrapping its iterable children. @param root root object to create iterable from
115 Returns a breadth-first iterable for the given root object. @param root the root object to traverse
116 Updates mask character and range with the given values. @param c new mask character @param r new range string
117 Builds a new builder instance with a custom mask character and replacement string. @param c the mask character @param replacement the string to replace the mask character with @return this builder instance for method chaining
118 Extracts a code point from the CharSequence, handling surrogate pairs and out-of-range indices. @param seq input string @param index current position @param end end of valid range @return extracted code point or negative for high surrogate
119 Creates a new DeadEvent instance with the specified source and event. @param source the object that triggered the dead event @param event the dead event details
120 Handles a Throwable exception in the context of Subscriber Exception. @param e the original exception @param context SubscriberExceptionContext instance
121 Invokes method m3 with target and masked event argument. @param event Object to be invoked on method m3
122 Constructs a new SubscriberExceptionContext instance. @param eventBus the EventBus instance @param event the event object @param subscriber the subscriber object @param subscriberMethod the subscriber method reference
123 Converts graph to a masked version. @param graph input graph to mask @return masked graph or null if invalid input
124 Returns the input network with its mask applied. @param network Input network to modify
125 Wraps the input graph in a new immutable value graph instance. @param graph input graph to be wrapped
126 Returns a mask of iterators based on the provided horizon. @param horizon deque of iterators to process @return abstract N object or null if not applicable
127 Initializes a new HashingInputStream instance with the given hash function and input stream. @param hashFunction hashing function to apply @param in input stream to wrap
128 Initializes an AppendableWriter instance with the specified target. @param target the appendable target where data will be written to
129 Creates a ByteSink instance from the given CharSink, performing internal processing.
130 Creates a ByteSource from encoded CharSource. @param encodedSource input source with encoded characters
131 Initializes the reader with the given CharSequence. @param seq input text sequence to read from
132 Reads data from a Reader into a StringBuilder and returns the total bytes read. @param from input Reader @param to output StringBuilder @return total bytes read or -1 on IOException
133 Copies data from a Reader to a Writer. @param from input stream @param to output stream @return total bytes written
134 Reads and discards data from the Reader until at least 'n' bytes are masked. @param reader source of input data @param n number of bytes to mask @throws IOException if an I/O error occurs
135 Initializes a CountingInputStream with the given InputStream. @param in input stream to be wrapped and counted
136 Initializes a new instance of CountingOutputStream with the specified output stream. @param out the underlying OutputStream to wrap
137 Creates a BufferedReader instance to read from the specified file. @param file the File object representing the input file @param charset the Charset used for reading the file content
138 Creates a buffered writer to write data to the specified file. @param file target file for writing @param charset character encoding for output
139 Updates file modification mask. @param file File object to update
140 Creates directory masks for the given file and its parent directories. @param file target file
141 Extracts file name from full path using custom string manipulation methods. @param fullName full path to a file @return file name or empty string if no dot found
142 Extracts the filename from a given path without extension. @param file input file path @return filename string (no extension)
143 Initializes a new LittleEndianDataInputStream instance from an input stream. @param in input stream to read from
144 Constructs a new LittleEndianDataOutputStream from an OutputStream. @param out the OutputStream to write to
145 Applies file mask to the specified path. @param path target file or directory
146 Initializes the filter with a regular expression pattern. @param pattern regex pattern to match filenames against
147 Checks if BigInteger meets custom mask criteria. @param x input value to check @return true if it matches the mask, false otherwise
148 Applies a DoubleConsumer to masked array elements. @param consumer callback function to process each double value
149 Applies consumer function to masked array elements. @param consumer callback function to process each element
150 Iterates over an array range and applies a LongConsumer to each element. @param consumer function to process long values
151 Checks if a given class is a primitive type. @param type Class to check @return true if primitive, false otherwise
152 Wraps primitive types with their wrapper equivalents. @param type the input class to be potentially wrapped @return the original type if not a primitive, or its wrapper type
153 Returns the primitive type wrapper class if available, else the input type. @param type input type to check for primitive wrapper
154 Converts a string to a byte value in the specified base. @param string input string to convert @param radix string base (2-36) @return byte representation or throws NumberFormatException if out of range
155 Converts a string to an unsigned integer using specified radix. @param string input string @param radix numeric base of the string (e.g. 10 for decimal) @return unsigned integer value or throws NFE if invalid
156 Constructs a new schedule with specified delay and time unit. @param delay time interval before execution @param unit time unit (e.g. TimeUnit.SECONDS, TimeUnit.MINUTES)
157 Applies a unary operator to the mapped value for a given key. @param key unique identifier @param updaterFunction function to update the value @return updated value or 0 if not found
158 Updates and returns user profile mask by ID using the provided function. @param key unique user identifier @param updaterFunction LongUnaryOperator to compute new mask value @return updated user profile mask or 0L if not found
159 Wraps a Callable in an AsyncCallable using the provided executor service. @param callable target function to execute asynchronously @param executorService executor service used for asynchronous execution
160 Creates a wrapped Callable that executes the original callable with its thread's name modified. @param callable original callable to execute @param nameSupplier supplier of new thread name @return wrapped callable with modified thread name
161 Wraps a Runnable task with thread name management. @param task the task to execute @param nameSupplier supplier of new thread name
162 Wraps an async function with a mask to handle closing logic. @param function the asynchronous function to be masked
163 Wraps a FluentFuture in a deprecated alias. @param future input FluentFuture to be aliased
164 Transforms a future of type I to a future of type O using the provided function. @param input future of type I @param function function to apply to input @return future of type O or null if not found
165 Creates an Executor that wraps the provided executor with a custom function mask. @param executor underlying executor instance @param nameSupplier supplier of string values for function masking
166 Wraps an ExecutorService with functional masking, allowing for named execution of tasks. @param service underlying executor service @param nameSupplier supplier of task names
167 Wraps a ScheduledExecutorService with custom callable and runnable mask. @param service the executor to wrap @param nameSupplier supplies a name for each execution
168 Initializes the SequentialExecutor with an existing Executor instance. @param executor non-null Executor to wrap
169 Submits a task to the worker queue, potentially executing it immediately. @param task the task to submit
170 Sets an uncaught exception handler using the provided function. @param uncaughtExceptionHandler lambda expression to handle exceptions
171 Sets thread factory mask using given backing thread factory. @param backingThreadFactory thread factory to use for masking
172 Waits for the specified thread to join, with a timeout. @param toJoin thread to wait on @param timeout maximum time to wait in given unit @param unit TimeUnit of the timeout
173 Configures cache builder with a ticker. @param ticker ticker object to associate with the cache @return the updated CacheBuilder instance
174 Sets removal listener for cache events. @param listener Removal event handler
175 Calculates and returns the mean value. @return the calculated mean value
176 Calculates minimum value based on non-zero count. @return Minimum value (min)
177 Calculates and returns maximum value. @return max maximum value
178 Calculates and returns the mean value. @return average of all values (mean)
179 Calculates minimum value based on count condition. @return minimum value or NaN (Not a Number) if count is 0
180 Calculates and returns the maximum value based on count condition. @return max value or NaN if count is zero
181 Returns a CountDownLatch that will be closed when the object is closed. @return CountDownLatch instance or 0-count latch if already closed
182 Masks specific characters in a string using a bitwise XOR operation. @param string input string to process @return modified string with masked characters or original string if no matches found
183 Applies case mask to character if it matches specified condition. @param c input character @return modified character or original character if no match
184 Masks specific characters in a string using the given case mask. @param string input string to process
185 Masks case of input character using bitwise XOR operation. @param c input character to be masked
186 Truncates input CharSequence to specified length and appends truncation indicator. @param seq input text @param maxLength maximum allowed characters @param truncationIndicator string to append when truncated @return truncated text or original if not truncated
187 Processes and validates input ByteBuffer for statistical functions. @param buffer input data to process
188 Returns a clamped value within the specified range [min, max]. @param value input value @param min minimum allowed value @param max maximum allowed value @return value if in range; otherwise, nearest boundary value
189 Sets thread factory builder's priority. @param priority the desired thread priority (MIN_PRIORITY <= priority <= MAX_PRIORITY) @return this builder instance
190 Compares two character sequences with a custom mask. @param s1 first sequence @param s2 second sequence @return true if sequences match, false otherwise
191 Initializes CacheStats object with performance metrics. @param hitCount number of cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of failed loads @param totalLoadTime aggregate time for all loads @param evictionCount number of evictions from cache
192 Initializes an empty multimap from a given map. @param map must be empty; otherwise, an exception is thrown
193 Updates internal state with a new collection of key-value pairs. @param map Map containing key-value pairs to process
194 Initializes an empty multiset from a backing map. @param backingMap empty map to store count of each element
195 Creates a contiguous set of elements within the specified range. @param fromElement starting element @param fromInclusive whether start is inclusive @param toElement ending element @param toInclusive whether end is inclusive @return ContiguousSet object or null if invalid range
196 Initializes an EnumMultiset for the given enum class. @param type the enum class to be used in the multiset
197 Constructs a sorted set of elements within the specified range. @param fromElement starting element @param fromInclusive whether start is inclusive (true) or exclusive (false) @param toElement ending element @param toInclusive whether end is inclusive (true) or exclusive (false) @return ImmutableSortedSet of elements in the specified range
198 Partitions the input iterable into sub-lists of fixed size. @param iterable input data to partition @param size maximum number of elements per sublist
199 Generates a stream of lists from the input iterable, with each list containing 'size' elements. @param iterable input iterable to process @param size maximum number of elements per list
200 Sets the expected size and validates it is non-negative. @param expectedSize size in bytes, must be >= 0
201 Configures the maximum size of data that can be processed. @param maximumSize positive integer value for maximum size
202 Initializes streaming hasher with specified chunk and buffer sizes. @param chunkSize size of each processing unit (in bytes) @param bufferSize total buffer capacity (must be a multiple of chunk size)
203 Computes masked function value using m1 and m3 functions. @param value input value
204 Creates a CharMatcher that matches the specified character. @param match the target character to be matched
205 Creates a CharMatcher that matches any character except the specified one. @param match character to exclude from matching
206 Replaces specific characters in a CharSequence with a specified mask. @param sequence input string to process @param replacement character to use for masking @return modified StringBuilder or original string if no replacements were made
207 Initializes the Converter instance with default settings.
208 Checks for equivalence between two objects using the Wrapper's equivalence logic. @param obj object to compare with @return true if equivalent, false otherwise
209 Compares two objects using function mask. @param t first object to compare @param u second object to compare
210 Updates entry in hash table if reference matches. @param key search key @param hash hash value of entry to update @param valueReference weak reference to update @return true if updated, false otherwise
211 Updates the map entry for a given key and hash. @param key the key to update @param hash the hash code of the key @param valueReference the weak reference to update @return true if updated, false otherwise
212 Compares two iterators for equivalence. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators are equivalent, false otherwise
213 Compares the current multiset entry with the given object. @param object object to compare, must be a Multiset.Entry @return true if objects are equal, false otherwise
214 Checks whether a node transition is valid based on the graph's properties and the nodes involved. @param graph the graph being evaluated @param nextNode the node to transition to @param previousNode the node to transition from (may be null)
215 Calculates and returns the FUNC_MASK value based on reference data. @return calculated FUNC_MASK integer value
216 Creates a phantom reference with finalization. @param referent object being referenced @param queue reference queue for cleanup and finalization
217 Initializes a soft reference with a finalizable reference queue. @param referent object being referenced @param queue reference queue for cleanup
218 Creates a weak reference to the given object with cleanup on finalization. @param referent the object being referenced @param queue the reference queue for garbage collection
219 Creates a function that returns the given constant value. @param value The constant value to be returned by the function
220 Parses a bracketed host-port string into host and port components. @param hostPortString input string in the format [host:port]
221 Returns HostAndPort object with func mask set. @return HostAndPort instance or null if not found
222 Masks the least significant bits of an InetAddress. @param address InetAddress to modify @return modified InetAddress object
223 Masks the least significant bits of an InetAddress. @param address input InetAddress @return modified InetAddress with masked bits
224 Dynamically creates and returns an instance of the specified T, implementing the given interface with the provided InvocationHandler. @param interfaceType the interface to be implemented @param handler invocation handler for the created object @return instance of T or null if creation fails
225 Retrieves the first type argument from a parameterized type. @return The first type argument or null if not found
226 Formats string parts into a single line with separator. @param appendable Appendable object to write to @param parts Iterator of string parts @return the same Appendable object
227 Wraps iterable of entries into a StringBuilder. @param builder StringBuilder to append to @param entries iterable of entries to process
228 Concatenates and formats entry data into a string mask. @param entries iterator of entry objects @return formatted string or null if empty
229 Creates a map joiner using the specified key-value separator. @param keyValueSeparator character to separate keys from values
230 Builds a JSON-like snapshot of the object's values. @return String representation or empty string if no values
231 Retrieves an immutable set of values associated with a given key. @param key unique key identifier @return ImmutableSet containing values or emptySet if not found
232 Loads M5 resource by name. @param resourceName unique identifier of the resource @return URL to the loaded resource or null if not found
233 Returns an empty Optional instance.
234 Recursively unwraps and returns the contained value of the given Google Optional. @param googleOptional the input Optional to unwrap @return contained value or null if not found
235 Returns input string if it matches a specific condition (m1), otherwise returns null.
236 Checks if input string matches platform-specific mask criteria. @param string input string to validate @return true if valid, false otherwise
237 Skips the specified number of elements from an iterable. @param iterable input collection @param numberToSkip number of elements to skip @return new iterator skipping the specified elements
238 Truncates iterable to specified size. @param iterable input collection @param limitSize maximum number of elements to include
239 Advances the given iterator by a specified number of elements. @param iterator iterator to advance @param numberToAdvance nonnegative count of steps to advance @return actual number of steps taken, or -1 on failure
240 Limits the number of elements fetched from an iterator. @param iterator input iterator to limit @param limitSize maximum number of elements to fetch @return limited iterator or null if iterator is null
241 Creates a traverser for the given tree, handling invalid graph types. @param tree SuccessorsFunction representing the tree data structure @return Traverser instance or null on failure
242 Calculates a mask from the given number of bits. @param bits number of bits
243 Converts a BigInteger to an InetAddress. @param address BigInteger value @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object or throws exception if invalid
244 Repeats a given string by a specified count. @param string the input string to repeat @param count the number of times to repeat the string @return repeated string or empty string if count is 0
245 Constructs a BloomFilter with the specified parameters. @param bits LockFreeBitArray instance @param numHashFunctions number of hash functions to use @param funnel Funnel instance for hashing elements @param strategy Strategy instance for managing filter state
246 Combines and validates a collection of hash functions. @param hashFunctions iterable of HashFunction objects @return ConcatenatedHashFunction instance or throws exception if invalid
247 Initializes SipHashFunction with parameters for compression and finalization rounds. @param c number of iterations during Compression @param d number of iterations during Finalization @param k0 first long key component @param k1 second long key component
248 Initializes a FileBackedOutputStream with given file threshold and reset on finalize behavior. @param fileThreshold non-negative threshold for switching to file-backed output @param resetOnFinalize whether to reset the stream on finalize
249 Creates an Inet4Address instance from a byte array. @param bytes the byte representation of the IP address
250 Trims or pads input boolean array to specified minimum length with optional padding. @param array input boolean array @param minLength required array length @param padding additional elements to append if array is shorter than minLength @return trimmed or padded boolean array, or original array if sufficient
251 Pads or truncates input byte array to specified length and padding. @param array input byte array @param minLength minimum required length @param padding additional bytes to append if minLength is exceeded @return padded or truncated byte array
252 Truncates or pads input array to specified minimum length with given padding. @param array input character array @param minLength minimum required length @param padding amount of padding to add if necessary
253 Pads or truncates input array to specified minimum length with additional padding. @param array input data @param minLength minimum required length @param padding amount of padding to add
254 Pads or truncates input array to specified length with optional padding. @param array input float array @param minLength minimum required array length @param padding additional elements to append (if minLength not reached) @return padded or truncated float array
255 Truncates or pads input array to meet length requirements. @param array input data @param minLength minimum required length @param padding value to add if array is too short @return modified array or original if sufficient
256 Truncates or pads input array to specified minimum length with given padding. @param array input array @param minLength minimum required array length @param padding additional elements to add for truncation or padding
257 Pads or truncates input array to minimum length with specified padding. @param array input short array @param minLength minimum desired length @param padding additional bytes to append if minLength exceeds array length @return padded or truncated short array of consistent length
258 Converts long to char and performs out-of-range check. @param value input value
259 Converts long value to int and performs bounds check. @param value input value @return int representation or throws exception if out of range
260 Converts long to short, throwing exception if out of range. @param value long value to convert
261 Converts long value to byte and checks for out-of-range condition. @param value long value to be converted
262 Extracts and returns the lowest byte from a given long integer value. @param value input long integer value
263 Extracts the lower 32 bits from a long value. @param value input value @return int representation or throws exception if out of range
264 Creates a scheduler with customizable delays and time units. @param initialDelay initial delay before first execution @param delay interval between subsequent executions @param unit time unit for delays (e.g. TimeUnit.SECONDS)
265 Creates a Scheduler instance with specified delay and period. @param initialDelay time to wait before executing the task @param period interval between subsequent executions @return Scheduler object for scheduling tasks
266 Returns a value clamped between min and max. @param value input character @param min minimum allowed value @param max maximum allowed value @return value constrained within min and max range
267 Clamps a value within a specified range. @param value the input value @param min minimum allowed value @param max maximum allowed value @return clamped value between min and max
268 Resolves resource URL for the given class and name. @param contextClass Class used as base for resolving resources @param resourceName Name of the resource to resolve @return Resource URL or null if not found
269 Starts or resumes stopwatch and returns the instance.
270 Stops and updates the running time of the stopwatch. @return This stopwatch instance for method chaining
271 Enables or disables removal functionality based on the provided flag. @param canRemove true to allow removal, false otherwise
272 Sets a custom comparator for values. @param valueComparator Comparator to use when comparing values
273 Sets the initial cache capacity and validates the input value. @param initialCapacity positive integer capacity @return CacheBuilder instance for chaining
274 Sets the maximum allowed concurrent updates. @param concurrencyLevel positive integer value
275 Configures the map maker with an initial capacity. @param initialCapacity minimum number of entries in the map @return this MapMaker instance for chaining
276 Configures map maker with specified concurrency level. @param concurrencyLevel positive integer concurrency level
277 Sets the maximum cache size. @param maximumSize positive integer value
278 Sets the maximum weight for the cache. @param maximumWeight non-negative weight limit
279 Sets the weigher function for this cache builder. @param weigher function to calculate key weights
280 Sets the time-to-live for cache entries written by this builder. @param duration positive time duration @param unit time unit (e.g. seconds, milliseconds)
281 Sets cache expiration time after access. @param duration time to live in specified unit @param unit time unit (e.g. seconds, minutes) @return this CacheBuilder instance
282 Configures cache refresh interval in the given time unit. @param duration cache refresh interval @param unit time unit (e.g. TimeUnit.SECONDS)
283 Sets the equivalence function for cache keys. @param equivalence key equivalence function
284 Configures the cache builder with an equivalence function. @param equivalence equivalence function for key comparison
285 Configures the map maker with custom equivalence. @param equivalence custom equivalence strategy @return MapMaker instance for chaining calls
286 Initializes TypeToken with captured runtime type and checks if it's a type variable.
287 Returns a Throwable with a failure mask. @return Throwable object representing the failure
288 Calculates a mask value from the given index and size. @param index position in the sequence @param size total count of elements @return mask value or throws IndexOutOfBoundsException if invalid
289 Returns the index within the given size range. @param index position to validate @param size maximum allowed value @return validated index or throws exception if invalid
290 Returns a predicate that always evaluates to true. @return A predicate function that matches all elements of type T.
291 Returns a predicate that always evaluates to false.
292 Returns a predicate that checks for null values. @return A predicate that returns true if the input is null, false otherwise.
293 Returns a predicate that filters out non-null values. @return A Predicate that always returns true for non-null objects and false otherwise
294 Combines two predicates with a logical AND operation. @param first first predicate to evaluate @param second second predicate to evaluate @return combined predicate that returns true if both individual predicates return true
295 Combines two predicates using logical OR. @param first first predicate @param second second predicate @return a new predicate that returns true if either of the input predicates is true
296 Creates a Splitter instance with default settings. @return Splitter object configured for function masking
297 Creates a Splitter instance with the specified maximum items. @param maxItems maximum number of split items
298 Extracts and returns a list of masked strings from the input sequence. @param sequence input character sequence to process
299 Combines two function masks into a single string. @return concatenated string: result of m1() and m2().
300 Calculates time unit mask from desired unit. @param desiredUnit target TimeUnit to convert from
301 Calculates and returns a duration value using m1() and m2() methods.
302 Converts time duration to human-readable string format. @return formatted string representation of time duration
303 Wraps native platform call to process input string. @param string input string to be processed
304 Calculates the common prefix mask between two strings. @param a first string @param b second string @return masked common prefix as a string
305 Computes the longest common suffix of two strings. @param a first CharSequence to compare @param b second CharSequence to compare @return longest common suffix as a String or empty if not found
306 Creates a supplier that returns the given instance. @param instance the object to be supplied
307 Initializes an empty Ticker instance.
308 Validates boolean expression; throws exception on false result.
309 Validates an expression and throws a VerifyException with a customized error message. @param expression boolean value to be validated @param errorMessageTemplate template for the error message @param p1 placeholder character in the error message template
310 Throws VerifyException with formatted error message if expression is false. @param expression boolean condition to evaluate @param errorMessageTemplate template for error message @param p1 parameter used in error message formatting
311 Throws an exception with error message if given condition is false. @param expression boolean condition to evaluate @param errorMessageTemplate template for error message @param p1 parameter value used in error message generation
312 Validates boolean expression and throws a custom exception if false. @param expression condition to verify @param errorMessageTemplate error message template with placeholders for args @param errorMessageArgs optional arguments for the error message (varies in length)
313 Validates boolean condition and throws exception with formatted error message. @param expression condition to validate @param errorMessageTemplate template for error message with placeholders (p1, p2) @throws VerifyException if expression is false
314 Validates boolean expression and throws exception with formatted error message. @param expression boolean condition to be verified @param errorMessageTemplate template for error message @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting
315 Throws VerifyException if expression is false; otherwise, does nothing. @param expression boolean condition to evaluate @param errorMessageTemplate error message template for exception @param p1 first parameter for error message @param p2 second parameter for error message
316 Throws a VerifyException with parameterized error message when the given expression is false. @param expression boolean condition to verify @param errorMessageTemplate template for customizing the error message @param p1 first variable for error message substitution (may be null) @param p2 second character for error message substitution
317 Validates boolean expression; throws exception with formatted error message otherwise. @param expression condition to be verified @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
318 Validates an expression and throws a VerifyException with formatted error message if false. @param expression boolean condition to validate @param errorMessageTemplate template for error message @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting
319 Verifies expression and throws VerifyException with formatted error message if false. @param expression boolean condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for error message formatting @param p2 second parameter for error message formatting
320 Throws a VerifyException with formatted error message if expression is false. @param expression condition to evaluate @param errorMessageTemplate template for error message @param p1 object used in error message formatting @param p2 integer value used in error message formatting
321 Throws VerifyException if given boolean expression is false. @param expression boolean condition to verify @param errorMessageTemplate error message template with placeholders @param p1 placeholder 1 for errorMessageTemplate @param p2 placeholder 2 for errorMessageTemplate
322 Verifies an expression and throws VerifyException with custom error message if false. @param expression boolean condition to be verified @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
323 Validates an expression and throws exception with parameterized error message if false. @param expression boolean condition to validate @param errorMessageTemplate error message template string @param p1 first parameter for error message @param p2 second parameter for error message
324 Throws VerifyException if given boolean expression is false. @param expression condition to evaluate @param errorMessageTemplate template for error message @param p1 first parameter (optional) @param p2 second parameter
325 Throws a VerifyException with a formatted error message if the given expression is false. @param expression condition to verify @param errorMessageTemplate template for error message with placeholders p1 and p2 @param p1 first placeholder in error message (char) @param p2 second placeholder in error message (Object, may be null)
326 Throws VerifyException with formatted error message if condition is false. @param expression boolean condition to evaluate @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message (may be null)
327 Verifies boolean expression; throws exception with formatted message on failure. @param expression condition to evaluate @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message (may be null)
328 Throws a VerifyException with a custom error message if the given expression is false. @param expression boolean condition to evaluate @param errorMessageTemplate template for error message @param p1 and p2 optional parameters for error message (may be null)
329 Validates the given expression; throws VerifyException with formatted error message if false. @param expression boolean condition to validate @param errorMessageTemplate template for error message (args: p1, p2, p3)
330 Throws a VerifyException with formatted error message when condition is false. @param expression boolean condition to verify @param errorMessageTemplate template for error message @param p1-4 optional parameters for error message formatting
331 Checks if a reference chain can be finalized using the provided method. @param firstReference initial reference to check
332 Initializes a new instance of the SimpleStatsCounter class.
333 Merges statistics from another StatsCounter into this instance. @param other StatsCounter to merge with this instance
334 Initializes an instance of AbstractLoadingCache.
335 Creates an empty map with type parameters K and V.
336 Iterates the input map and applies a transformation to each entry. @param m input map of type <K,V>
337 Iterates over the given iterable of object keys and applies the m1 function to each. @param keys collection of object identifiers
338 Returns a cache builder with default settings. @return CacheBuilder instance for configuration and creation of caches
339 Throws an exception for unsupported loading operation on given key set. @throws Exception if operation is not supported
340 Calculates the function mask value based on hit and miss counts. @return calculated function mask value
341 Calculates combined mask value from success and exception counts. @return combined mask value
342 Calculates the exception rate as a ratio of exceptions to total loads. @return Exception rate as a double value between 0 and 1, or 0 if no loads
343 Calculates average load time. @return Average load time in seconds or 0 if no loads were performed
344 Initializes an empty forwarding cache instance.
345 Creates an empty forwarding collection.
346 Creates an empty iterator that forwards its operations to another iterator.
347 Initializes an empty forwarding map instance.
348 Default constructor for a forwarding map entry.
349 Constructs an empty ForwardingMultimap instance. @throws NullPointerException if any of the input parameters are null
350 Initializes an empty forwarding table. This constructor is typically used when creating a new instance of the ForwardingTable class.
351 Creates an empty executor service instance. @see ExecutorService#shutdown()
352 Constructs an empty Future.
353 Removes and processes entries from the reference queue. @GuardedBy("this") ensures thread safety
354 Creates a new reference entry with the given next and key. @param original existing entry to modify @param newNext new next entry in the map
355 Applies filter to backing map entries and removes matching values. @param predicate filter condition for entries @return true if any entries were removed, false otherwise
356 Handles futures with optional callback. @param allMustSucceed whether all futures must succeed @param collectsValues whether to collect values from completed futures
357 Wraps an Executor with a custom behavior: delegates to the original if possible, otherwise catches and re-executes rejected commands. @param delegate underlying executor @param future future object for handling rejection @return new executor instance or the original if applicable
358 Wraps a Future in a mask, forcing it to complete and extracting its value. @param future the Future to mask @return the masked Future's value or null if not found
359 Wraps a Future in a checked exception, rethrowing any errors as ExecutionErrors. @param future the Future to mask @return the original Future's value or null if not set
360 Evaluates map conditions and triggers corresponding functions.
361 Generates an equivalence function that uses a mask to compare objects. @return An Equivalence instance for masked comparison.
362 Returns an equivalence function using a mask to compare objects. @return Equivalence function implementing custom equality logic.
363 Returns an equivalence function for masking objects. @return Equivalence function to mask objects
364 Returns an equivalence function for Object type. The returned function will be used to compare objects. @return equivalence function for Object type
365 Generates an equivalence function mask for objects. @return An instance of Equivalence representing the mask.
366 Evaluates whether a cache entry has expired based on access and write timestamps. @param entry Cache entry to check @param now Current time in nanoseconds @return True if entry has expired, false otherwise
367 Calculates the sum of all values in the count map and returns it as an integer mask.
368 Counts and returns a hash value from the given iterator. @param iterator iterator to iterate over elements
369 Calculates the function mask value based on the given Multiset. @param multiset input multiset object
370 Calculates the result of bitwise OR operation between two integers. @param a first integer value @param b second integer value @return result of (a | b)
371 Computes the mask value of 'a' relative to 'b'. @param a reference integer @param b target integer @return signed difference between 'a' and 'b'
372 Calculates the product of two integers and returns its bitwise complement. @param a first integer @param b second integer @return product's bitwise complement as an int
373 Returns a set of unique objects using compact hash set implementation. @return Set containing elements from the compact hash set
374 Initializes an iterator instance with no specific implementation.
375 Initializes iterator with an optional initial value. @param firstOrNull the initial value or null if empty
376 Default constructor for an unmodifiable list iterator.
377 Applies two transformation functions (m1 and m2) sequentially to an empty collection. @return transformed collection of type V
378 Returns an Entry instance with a computed mask value. @return Entry object or null if computation fails
379 Computes and returns a functional mask value. @return a Nullable value containing the result or null if failed.
380 Recursively traverses the ancestor chain or updates the delegate based on conditions. @throws ConcurrentModificationException if ancestor's state changes unexpectedly
381 Retrieves a collection of values from the map using the provided key. If no value is found in the map, attempts to retrieve it via alternative method. @param key unique identifier for retrieval @return Collection of values or null if not found and m2 failed
382 Calls superclass implementation of m1().
383 Calls superclass's implementation of m1 and returns result as List<V>.
384 Calls superclass implementation of `m1()` to fetch entries.
385 Calls parent's implementation of m1 and returns result. @return list of entries as per parent class implementation
386 Generates a StringBuilder with a dynamically-sized buffer based on input size. @param size the desired size of the buffer
387 Creates a dynamically-sized ArrayList with an initial capacity. @param initialArraySize the initial size of the array list
388 Calculates a mask value based on the expected size. @param expectedSize size to determine the mask for
389 Creates a ListMultimapBuilder with expected values per key. @param expectedValuesPerKey maximum number of values per key
390 Creates a SetMultimapBuilder with the specified expected values per key. @param expectedValuesPerKey maximum number of values allowed per key
391 Creates a SetMultimapBuilder with specified expected values per key. @param expectedValuesPerKey the number of values to expect per key
392 Creates a multimap builder with expected key count. @param expectedKeys number of keys to expect
393 Creates a multimap builder with expected keys. @param expectedKeys number of expected key-value pairs
394 Updates multiset count for given element. @param self Multiset instance @param element element to update count for @param count new count value @return original count value
395 Updates the multiset count for a given element. @param self Multiset instance @param element element to update count for @param oldCount current count of element in set @param newCount desired count of element in set @return true if count was updated, false otherwise
396 Calculates and returns the mask value using Sets.m1(). @return Mask integer value.
397 Checks if an object matches the function mask. @param object the object to check @return true if the object matches the mask, false otherwise
398 Calls and returns result of m1(), which in turn calls and returns result of this method.
399 Calls m1() to fetch related data and executes m2() on the result.
400 Checks for functional mask based on collection of elements to remove. @param elementsToRemove Collection of elements to consider for mask calculation
401 Checks if an object matches function mask. @param object object to check (may be null)
402 Checks if an object matches the current multisets. @param object object to check @return true if object is in multisets, false otherwise
403 Returns first non-null element from the iterable or a default value if all elements are null. @param iterable collection of objects to search @param defaultValue fallback object if no non-null element is found in the iterable @return first non-null element of type T, or T itself as default value
404 Calls superclass method to retrieve data and returns it as a map. @return A map of key-value pairs where K is... and V is...
405 Calls superclass method to retrieve navigable set of keys.
406 Returns a comparator, either the provided one or a default mask comparator. @param comparator nullable comparator to use; defaults to a mask comparator
407 Calls and returns result of m2() from returned object by m1().
408 Calls m1() and chains its result to call m2() on it.
409 Serializes function mask to OutputStream.
410 Serializes this object's state to the provided ObjectOutputStream.
411 Serializes function mask data to the given output stream.
412 Reads and populates a Multimap with data from an ObjectInputStream. @param multimap the map to populate @param stream input stream containing map data
413 Returns an immutable set of column keys with masks.
414 Returns an immutable set of function masks.
415 Retrieves key set from underlying map.
416 Checks if a column key matches a mask. @param columnKey nullable object representing column key @return true if match found, false otherwise
417 Checks if a given row key matches a valid index. @param rowKey unique identifier of a database record (may be null) @return true if the row key corresponds to an existing index, false otherwise
418 Returns an immutable list of values associated with the given key. If no value is found, returns a default empty list. @param key unique identifier
419 Creates a mask map from the given column key. @param columnKey unique column identifier
420 Adds a value to the collection for the given key. @param key unique key identifier @param value value to add
421 Computes position by applying a mask function 'm2' for the given distance. @param origin initial position @param distance number of iterations to apply m2 @return final position or null if overflowed
422 Creates a flat map spliterator for double values. @param fromSpliterator input spliterator @param function mapping function to apply to each element @param topCharacteristics characteristics of the resulting spliterator @param topSize estimated size of the resulting spliterator
423 Creates a flat map spliterator for integers. @param fromSpliterator source spliterator @param function mapping function @param topCharacteristics characteristics of the resulting spliterator @param topSize estimated size of the resulting spliterator
424 Creates a flat map spliterator for long values. @param fromSpliterator input spliterator @param function transformation function @param topCharacteristics desired spliterator characteristics @param topSize estimated size of output
425 Creates a Spliterator for flat mapping elements. @param fromSpliterator original spliterator @param function transformation function @param topCharacteristics characteristics of the resulting spliterator @param topSize size estimate of the resulting spliterator @return new Spliterator instance
426 Checks if provided collection intersects with internal mask. @param collection Collection to check against internal mask
427 Updates metadata with compact hashing based on provided mask. @param mask bitwise mask value
428 Updates metadata with a compact hash based on the provided mask. @param mask integer representing the mask value
429 Initializes internal arrays with specified capacity. @param newCapacity new size for entries, keys and values arrays
430 Updates internal arrays to accommodate specified capacity. @param newCapacity desired array size
431 Calculates function mask based on expected size. @param expectedSize estimated table size
432 Performs bitwise comparison between two integers using a mask. @param left first integer value @param right second integer value @return Comparison result (e.g. -1, 0, or 1)
433 Compares two values using a custom comparison chain. @param left first value to compare @param right second value to compare @return Comparison result (mask)
434 Compares two boolean values using a chain of comparisons. @param left first boolean value to compare @param right second boolean value to compare
435 Performs comparison between two boolean values and returns a chain of comparisons. @param left left-hand value to compare @param right right-hand value to compare
436 Checks if the lower bound is not equal to m1. @return true if lower bound is not m1, false otherwise
437 Checks if upper bound is set to m1 (minimum value).
438 Initializes DiscreteDomain with default settings. @param useDefault whether to use default domain properties
439 Serializes the object to the given ObjectOutputStream. @throws IOException if serialization fails
440 Serializes object state to output stream. @throws IOException if serialization fails
441 Serializes object state to output stream using custom serialization methods. @throws IOException if serialization fails
442 Validates and casts object to expected type. @param element object to be validated
443 Serializes this object to the given output stream. @throws IOException if serialization fails
444 Serializes this object using ObjectOutputStream. @param stream OutputStream to write serialization data to
445 Serializes this object to the given ObjectOutputStream.
446 Constructor to initialize the builder instance.
447 Wraps an array into a fluent iterable. @param elements input array of elements
448 Creates an empty FluentIterable instance.
449 Negates the result of m3() by inverting m2()'s output from m1().
450 Combines two iterables into a single fluent iterable. @param other The second iterable to combine
451 Merges two iterable collections into one. @param a first collection @param b second collection
452 Combines three iterables into a single iterable. @param a first iterable @param b second iterable @param c third iterable @return a new iterable containing all elements from the input iterables
453 Concatenates four iterables into a single iterable. @param a first iterable to concatenate @param b second iterable to concatenate @param c third iterable to concatenate @param d fourth iterable to concatenate
454 Returns a stream of elements processed by m1().
455 Counts occurrences of specified element in an iterable. @param iterator iterable to search @param element target object to find @return number of matching elements or -1 if not found
456 Checks if a given key is present in the provided map. @param map input map to search @param key object to search for @return true if found, false otherwise
457 Checks if a key-value pair exists in the given map. @param map input map @param value target value to search for @return true if pair is found, false otherwise
458 Checks mask status at specified index. @param index position to check @param elements iterable of elements
459 Returns a sublist of elements within specified range. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List of E objects or empty list if range invalid
460 Calculates function mask value using internal list. @return integer function mask value
461 Merges input map into this map using specified merge strategy. @param map Map to be merged
462 Checks if an object matches the current functional mask. @param object object to be checked @return true if object is a match, false otherwise
463 Creates a table from the given map and factory. @param backingMap data source map @param factory supplier for table columns @return Table instance or null if failed to create
464 Initializes or returns an existing set of functional mask column keys. @return Set of C objects representing the functional mask column keys
465 Creates a column map with the given key. @param columnKey unique column identifier
466 Reads a Map from an ObjectInputStream. @param map the map to populate @param stream the input stream containing the serialized map data
467 Reads distinct element count from input stream and initializes Multiset. @param multiset Multiset instance to initialize @param stream ObjectInputStream for reading data
468 Creates a hash table with the given size, populating it with elements from the provided array up to the specified index. @param newTableSize desired table size @param elements array of objects to populate the table @param n maximum index in elements to use @return populated hash table or null if not created
469 Initializes builder with default initial capacity.
470 Creates a new Builder instance with specified capacity. @param size initial capacity of the builder
471 Creates a Builder instance with specified capacity. @param expectedSize initial size of the builder's data structure
472 Dynamically adjusts the capacity of the dedupedElements array to accommodate at least 'minCapacity' elements. @param minCapacity minimum required capacity for the array
473 Adds iterable of elements to builder. @param elements collection of objects to be added @return the same builder instance for method chaining
474 Adds an iterator of elements to the builder. @param elements iterable collection of items
475 Adds an iterator of elements to the builder. @param elements iterator of elements to add
476 Configures builder with iterable elements and updates internal state. @param elements Iterable of elements to be processed
477 Returns a collector that accumulates elements into an immutable list. @return A collector instance
478 Creates an empty immutable multimap. @return An instance of ImmutableListMultimap with no mappings
479 Returns a collector for immutable range sets of comparable elements.
480 Returns an immutable set collector. @return Collector instance to collect elements into an ImmutableSet
481 Returns a comparator instance by delegating to another comparator. @return Comparator instance or null if source is null
482 Adds an element to the collection and adjusts capacity as needed. @param element item to add @return Builder instance for method chaining
483 Creates a function that applies the m1 operation to interned values. @param interner Interner instance for value interning
484 Converts an iterable to a string representation using the M1 method. @param iterable input iterable
485 Converts an iterable to its minimum value (M2). @param iterable input collection of values @return minimum value or null if empty
486 Recursively fetches the next element from an iterator or returns a default value if exhausted. @param iterator iterable source @param defaultValue fallback value to return when iterator is empty @return T object or defaultValue if no more elements in iterator
487 Merges two arrays of type T into a single array. @param first first array to merge @param second second array to merge @return merged array or null if not found
488 Wraps a generic Iterable in a List, then delegates to the appropriate iterator method. @param iterable input iterable to be wrapped and processed @return first element of the wrapped list or null if not found
489 Recursively fetches the next element from an iterator or returns a default value if exhausted. @param iterator iterable source @param defaultValue fallback object to return when iteration ends @return next element in iterator, or default value if no more elements
490 Returns an iterator over a constant value sequence (null). @return Iterator with a single null element.
491 Serializes user data to the given output stream. @param stream ObjectOutputStream instance
492 Inserts a new node with the given key and value, potentially reordering the existing nodes in the list. @param key unique identifier @param value associated data @param nextSibling optional sibling node to insert before @return the newly inserted Node object
493 Converts input sequence into a list of characters. @param sequence input character sequence
494 Searches for the first occurrence of the specified element in the given list. @param list searchable collection @param element target object to find @return index of found element or -1 if not found
495 Searches for the first occurrence of an element in a list. @param list List to search @param element Element to find (may be null) @return Index of the found element, or -1 if not found
496 Checks for a match based on table entries. @return true if a matching entry is found, false otherwise
497 Rehashes and updates the internal data structure to accommodate growing capacity. @GuardedBy("this")
498 Executes m3() with m2() cleanup in case of failure.
499 Evaluates a mask condition based on internal entry data. @param entry InternalEntry object with associated data
500 Creates an empty set with null-allowed elements.
501 Returns a synchronized version of the input BiMap.
502 Inserts element into a sorted order while maintaining the heap property. @param index current position in the heap @param x element to insert @return updated index of the newly inserted element
503 Retrieves a suitable index for the last element based on its ordering. @param actualLastElement the element to be ordered @return a valid index or size if no suitable position found
504 Updates the next cursor position based on the input mask character count. @param c desired mask character count
505 Creates an iterator that masks elements in a multiset. @param multiset the multiset to iterate over
506 Copies an array of type T to a new array with specified length. @param reference original array @param length desired length of the new array @return new array of type T or null if not found
507 Returns an array of objects based on collection size. @param c input collection
508 Finds the minimum element in an iterator of type E. @param iterator iterator containing elements to compare
509 Finds the maximum element in an iterable sequence. @param iterator iterator over elements of type E @return maximum element or null if empty
510 Computes the range of values from an iterable. @param values input iterable of comparable values @return Range object representing the minimum and maximum values
511 Retrieves a set of elements using platform-specific implementation. @return A set of type E or null if unavailable
512 Delegate to overloaded version with bounds. @param lowerBound lower bound of range (not used in this implementation) @param upperBound upper bound of range (not used in this implementation) @return result of the overloaded method
513 Returns the mask value from the lower bound M1.
514 Returns the upper bound's first element as a function mask.
515 Iterates over hash bucket entries and applies FUNC_MASK to each non-matching value. @param value Object to be masked @param entry Entry object associated with the mask operation @param valueBucketHead Head of the hash bucket entry list
516 Filters and creates a new array of entries based on the provided IdentityHashMap. @param entries original entries array @param n length of original entries array @param newN desired length of new entries array @return filtered Entry[] or null if empty
517 Retrieves an ImmutableMapEntry for the given key, potentially creating a new entry or throwing an exception on duplicate keys. @param key object to search for @param newValue value to associate with found key (if any) @param keyBucketHead head of the bucket to search in @param throwIfDuplicateKeys whether to throw BucketOverflowException if key already exists @return ImmutableMapEntry or null if not found
518 Returns a collector that collects enum values into an immutable set.
519 Merges a collection into an EnumSet. @param collection collection to merge
520 Creates an EnumSet from the given Collection and Enum type. @param collection Collection of enum values @param type Enum class to create set for @return EnumSet instance or null if collection is not a valid EnumSet
521 Extracts and boxes the last integer value from a stream. @param stream input stream of integers @return OptionalInt containing the last value or empty if stream is empty
522 Applies transformation to LongStream, then extracts and wraps last value. @param stream input LongStream @return OptionalLong containing result or empty if not applicable
523 Applies transformations to a DoubleStream, returning an OptionalDouble. @param stream input DoubleStream
524 Reorders elements in the buffer array around a pivot value. @param left start index @param right end index @param pivotIndex index of the pivot element @return new index of the pivot element
525 Serializes object to output stream. @throws IOException if serialization fails
526 Initializes default character escaper instance.
527 Constructor to create an instance of UnicodeEscaper. This constructor is typically used internally by the library and should not be called directly from user code.
528 Escapes special characters in a string and returns the result. @param s input string to be processed @return escaped string or null if processing fails
529 Escapes a single character using the provided CharEscaper. @param escaper Character escaping strategy @param c character to be escaped @return escaped character or null if not applicable
530 Escapes Unicode character with given code point using provided escape strategy. @param escaper Unicode escaping strategy to use @param cp Unicode code point to escape @return escaped string or null if unsuccessful
531 Validates and processes endpoint pairs. @param endpoints pair of endpoints to process
532 Advances to the next node and its successors in a graph traversal.
533 Computes and returns an endpoint pair based on the graph's type. @param graph the input graph object @param nodeU and nodeV the two nodes to consider
534 Resolves endpoint pair for given network and nodes. @param network network instance @param nodeU first node identifier @param nodeV second node identifier @return EndpointPair object or null if not found
535 Returns a set of EndpointPairs, iterating over all pairs in the graph. @return Set of EndpointPairs
536 Returns a set of endpoint pairs with their respective masks.
537 Processes endpoint pairs and handles mismatches. @param endpoints EndpointPair object to process
538 Returns an iterator over edge masks of the graph. @return Iterator over edge masks or null if no edges exist
539 Creates a graph builder with the specified element order. @param nodeOrder Element order to apply
540 Creates a graph builder with the specified element order. @param incidentEdgeOrder specifies how edges are ordered
541 Returns a transposed version of the input graph, or the original graph if it's already transposed. @param graph input graph to be transformed @return TransposedGraph object or the original graph if not needed
542 Converts a Network to its transposed form. @param network original network instance @return the transposed network or the original if not applicable
543 Converts a ValueGraph into its transposed equivalent. @param graph input graph to be transposed @return the transposed ValueGraph or original if not transposable
544 Creates a new NetworkBuilder instance with the specified element order. @param nodeOrder ElementOrder object defining network topology @return A new NetworkBuilder instance with customized settings
545 Configures network builder with specified element order. @param edgeOrder ElementOrder object defining ordering rules
546 Creates a ValueGraphBuilder with specified element order. @param nodeOrder ElementOrder instance to be applied
547 Creates a ValueGraphBuilder instance with the specified incident edge order. @param incidentEdgeOrder element order to use for graph construction
548 Calls m1 with array and offset defaults to 0 and length of array. @param b input byte array
549 Processes ByteBuffer data using recursive or iterative approach based on a condition. @param b input buffer to process
550 Initializes hasher with given byte count. @param bytes number of bytes to hash
551 Initializes and formats the ByteBuffer with FUNC_MASK data. @param bb ByteBuffer to be modified
552 Calls m1() with potentially null input. @param input object to pass to m1() @return result of m1() call
553 Creates a Bloom filter collector with specified false positive probability. @param funnel funnel for collecting data @param expectedInsertions estimated number of unique elements to insert @param fpp target false positive probability (0 < fpp <= 1)
554 Calls underlying m1 method in Bits class. @return result of underlying m1 method
555 Converts a long integer to a byte, clamping it within the valid range. @param value input value
556 Calculates the difference between two 8-bit values after applying a transformation function. @param a first 8-bit value @param b second 8-bit value @return integer result of the difference
557 Converts integer to string representation in given radix. @param x integer value @param radix base of the number system (e.g. 10 for decimal)
558 Merges two LockFreeBitArrays by comparing and copying corresponding bits. @param other the bit array to merge with
559 Sets a flag at the specified bit index using bitwise operations. @param bitIndex target bit index
560 Computes and returns a mask value based on various conditions and byte array operations. @return int representing the computed mask value
561 Converts raw byte array to a hexadecimal string representation.
562 Extracts a 64-bit mask from the given byte array. @param bytes input byte array
563 Computes masked hash using two seeds and outputs two values. @param bytes input byte array @param offset starting position in bytes array @param seedA first seed value @param seedB second seed value @param output array to store computed values (length 2)
564 Computes masked hash values using the provided seeds and byte array. @param bytes input byte array @param offset starting index in the byte array @param seedA first intermediate seed value @param seedB second intermediate seed value @param output two-element long array to store the computed hash values
565 Calculates function mask value using m1() function.
566 Calculates the integer mask by dividing the dividend by the divisor. @param dividend value to be divided @param divisor value to divide by @return result of division as an integer
567 Calculates the mask value as the remainder of dividing two integers. @param dividend number to be divided @param divisor number by which to divide @return non-negative integer mask value
568 Creates a 32-bit hash function with a specified seed. @param seed initial value for the hash function
569 Creates a 32-bit hash function with the specified seed. @param seed initial value for hashing
570 Creates a hash function instance with a specified seed value. @param seed initial seed value
571 Generates a hash mask by iterating through Linear Congruential Generator. @param input seed value for the generator @param buckets maximum number of possible values in the mask @return unique hash mask index (0 <= result < buckets)
572 Extracts a 32-bit mask from the first four bytes of the input array. @param bytes input byte array
573 Copies data from input stream to output stream. @param from InputStream source @param to OutputStream destination @return total bytes copied
574 Calculates the total bytes that can be read from an InputStream. @param in InputStream to calculate total readable bytes for @return Total count of bytes or 0 if unable to read
575 Processes InputStream using ByteProcessor and returns result. @param input InputStream to process @param processor ByteProcessor instance for processing @return T object processed from InputStream or null if not found
576 Creates a ByteArrayDataInputStream from the given ByteArrayInputStream. @param byteArrayInputStream input stream containing binary data
577 Creates a wrapped data output stream with masking functionality. @param byteArrayOutputStream underlying byte array output stream
578 Initializes ReaderInputStream with specified reader, charset encoder, and buffer size. @param reader input stream reader @param encoder charset encoder for encoding/decoding data @param bufferSize minimum buffer size to allocate
579 Handles buffer overflow and updates the byte buffer accordingly. @param overflow flag indicating a potential overflow
580 Copies data from one channel to another, handling both file and non-file channels. @param from input ReadableByteChannel @param to output WritableByteChannel @return number of bytes copied or -1 on failure
581 Reads and returns the next line as a string.
582 Skips or reads up to n bytes from the input stream. @param in InputStream to read from @param n number of bytes to skip or read @return actual number of bytes skipped or read
583 Processes input stream to extract strings. @throws IOException if an I/O error occurs
584 Calculates the total number of characters in a Readable. @param readable source to fetch characters from @return total character count or 0 if error occurs
585 Initializes a new instance of LineReader with the provided Readable source. @param readable input source, can be a Reader or any other type of Readable
586 Wraps input stream with error handling and masking. @param inputStream input stream to mask
587 Wraps the provided Reader in a mask function. @param reader input data source
588 Adjusts internal buffers to prevent exceeding file threshold. @param len new buffer length
589 Cleans up resources and deletes temporary files. @throws IOException if deletion fails
590 Wraps a File with a CharSource interface. @param file input file @param charset character encoding to use
591 Flushes the given output stream. @param flushable output stream to be flushed
592 Validates recursive delete option to prevent insecure deletes. @param path directory path @param options array of recursive delete options @throws InsecureRecursiveDeleteException if ALLOW_INSECURE not set
593 Creates a larger buffer with the same contents as the input buffer. @param buf input buffer to copy and expand @return expanded buffer or null if original was null
594 Processes a character buffer to extract lines and returns. @param cbuf input character array @param off starting offset in the buffer @param len length of data in the buffer
595 Handles mask-related functionality based on return status and line data. @throws IOException if an I/O error occurs
596 Calculates a function mask value from bytes retrieved by m1(). @return integer function mask value
597 Calculates FUNC_MASK value by reading 4 bytes from a source and combining them into an integer. @throws IOException if an I/O error occurs during data read
598 Constructs and returns the FUNC_MASK value as a 64-bit long.
599 Applies mask function to given integer value. @param v input integer value
600 Applies floating-point masking function to input value. @param v input float value @throws IOException if an I/O error occurs during computation
601 Writes long value to output stream using DataOutputStream. @param v long value to be written
602 Retrieves a collection of IOExceptions for the specified file system path. @param path file system path to process
603 Collects IOExceptions from iterating over the directory stream. @param dir Directory stream to iterate over @return Collection of IOExceptions or null if successful
604 Applies mask operation based on input conditions. @throws IOException if an I/O error occurs
605 Updates current state based on mask configuration.
606 Wraps URL with Charset using m1. @param url The input URL to be wrapped @param charset The character set to use for wrapping
607 Computes the result of p / q with specified rounding mode. @param p dividend @param q divisor @param mode RoundingMode to apply @return rounded quotient as a long value
608 Calculates the nth factorial value. @param n input number @return double result of factorial calculation or POSITIVE_INFINITY if too large
609 Computes the functional mask value for a given base and exponent. @param b base value @param k exponent (bit shift)
610 Calculates the bitwise XOR of two integers using the Fast Walsh-Hadamard Transform algorithm. @param a first integer @param b second integer @return result of a ^ b
611 Returns the nth factorial value or MAX_INT if out of bounds. @param n non-negative integer index
612 Calculates the binomial coefficient using dynamic programming. @param n total number of items @param k number of chosen items @return the binomial coefficient or Integer.MAX_VALUE if out of bounds
613 Computes a function mask value based on the input exponent. @param b input value (-2 <= b <= 2) @param k exponent @return computed function mask value
614 Calculates the nth factorial value, returning MAX_VALUE if out of range. @param n input integer index
615 Creates a linear transformation builder with specified input point. @param x1 horizontal coordinate of the point @param y1 vertical coordinate of the point
616 Checks if two floating-point numbers are within a specified tolerance. @param a first number @param b second number @param tolerance maximum difference allowed
617 Rounds a value to the nearest double using the specified rounding mode. @param x the value to round @param mode the rounding mode (e.g. DOWN, UP, CEILING, FLOOR)
618 Calculates the power of two that is just less than or equal to the given value. @param x input value
619 Calculates and returns a mask value from input integer x. @param x input integer @return resulting mask value
620 Computes a mask value based on the input integer and rounding mode. @param x input integer @param mode RoundingMode to apply @return int mask value
621 Calculates the integer square root of a value using specified rounding mode. @param x input value @param mode rounding mode (e.g. UNNECESSARY, FLOOR, CEILING) @return integer square root or result of rounding operation
622 Adds two integers with overflow handling. @param a first integer value @param b second integer value
623 Computes exact difference between two integers. @param a first integer @param b second integer @return result of subtraction or 0 if overflow occurs
624 Multiplies two integers exactly without overflow. @param a first integer @param b second integer
625 Tests whether base is a quadratic nonresidue modulo n. @param base value to test @param n modulus @return true if base is a quadratic nonresidue, false otherwise
626 Calculates the function mask for a given input value. @param x input value
627 Calculates a mask value from an input number. @param x input number
628 Calculates a mask value based on the input long and rounding mode. @param x input long @param mode RoundingMode enum value @return int mask value
629 Computes the FUNC_MASK value using bitwise operations. @param a first long value @param b second long value @return FUNC_MASK result
630 Wraps call to m1 with long and int parameters. @param x input value as long @param m input value as int @return integer result of m1
631 Computes exact sum of two integers. @param a first integer value @param b second integer value
632 Calculates the difference between two 64-bit integers, avoiding overflow. @param a first value @param b second value @return result of subtraction or throws ArithmeticException if overflow occurs
633 Multiplies two long values exactly. @param a first value @param b second value
634 Calls m1() on xStats instance and returns result.
635 Compares this object with the given object for equality. @param obj Object to compare, or null if not equal @return true if objects are equal, false otherwise
636 Initializes a new instance of PairedStatsAccumulator. This constructor is used to create an empty accumulator object.
637 Computes a masked mean value based on input and previous mean. @param previousMean initial mean value @param value new value to consider @return the computed mean value or NaN if invalid
638 Calls m1() on xStats object and returns result.
639 Calculates and returns a scale and index value using the m1 and m2 functions.
640 Returns a Scale instance with mask value of 4. @return Scale instance with specified mask value.
641 Returns a Scale instance with a mask value of 100.
642 Recursively partitions the array into two halves based on the given bounds. @param array input array to partition @param from start index of the range @param to end index of the range
643 Creates a Stats object from the provided ByteBuffer. @param buffer input data stream
644 Creates and returns a Stats object with calculated values. @return Stats object containing count, mean, sum of squares of deltas, min, and max
645 Computes and returns the mask value. @return The final mask value
646 Returns port value based on condition (m1()) or uses default port. @param defaultPort fallback port number
647 Formats host and port into a URL string. @return formatted URL or null
648 Returns a HostAndPort object with the specified default port. Initializes internal state using m1 and m2 methods. If m3 condition is met, returns this instance; otherwise, creates a new HostAndPort object.
649 Generates a mask string for the given IP address. @param ip IP address to process
650 Checks if IP address matches specific mask criteria. @param ip Inet6Address to verify @return true if IP matches mask, false otherwise
651 Checks if IP address matches any of three specific masks. @param ip Inet6Address to check @return true if IP matches a mask, false otherwise
652 Converts a collection of Booleans to a primitive boolean array. @param collection Collection of Boolean values @return Primitive boolean array or null if conversion fails
653 Searches for target value in specified boolean array. @param array boolean array to search @param target desired boolean value
654 Performs binary search on sorted boolean array to find index of target value. @param array sorted boolean array @param target target boolean value
655 Converts a collection of Numbers to a byte array. @param collection Collection of Numbers
656 Searches for target byte in specified array.
657 Searches binary array for specified target byte. @param array input byte array @param target target byte to search for
658 Converts a collection of characters to a character array. @param collection collection of characters
659 Searches for target character in given array. @param array input character array @param target target character to search
660 Searches for target character in given array. @param array input character array @param target character to search for
661 Extracts and returns the function mask from a 2-byte array. @param bytes input byte array containing the function mask @return function mask as a single character or throws if array is too small
662 Calculates a hash value by iterating over an array and applying a hashing function to each element. @return the calculated hash value
663 Converts a Number-based collection to a double array. @param collection Collection of Numbers to convert
664 Recursive helper function to find index of target value in sorted array. @param array input array @param target target value to search for
665 Searches for target value in an array. @param array input array to search @param target value to find
666 Converts a collection of Numbers to a float array. @param collection collection of numeric values
667 Searches for target value in sorted float array. @param array sorted array of floats @param target target value to search for @return index of target value or -1 if not found
668 Finds index of target value in sorted array. @param array sorted float array @param target target value to search for
669 Creates a builder instance with specified initial capacity. @param initialCapacity initial collection size
670 Creates a Builder instance with default mask size (10).
671 Finds index of first element in array that matches the given target value. @param target desired double value @return index of matching element or -1 if not found
672 Finds the first index where a condition is met based on an array and target value. @param target target value to search for @return index offset from start or -1 if not found
673 Builds a string representation of an array slice. @return JSON-like string or "[]" if empty
674 Checks if the given value is within the valid mask range. @param target integer value to be checked @return true if target is a valid mask, false otherwise
675 Constructs a new builder with an initial capacity. @param initialCapacity starting size of the builder's data structure
676 Creates a new builder instance with default mask size (10). @return A new Builder instance.
677 Computes a rolling cumulative hash of array elements between 'start' and 'end' indices. @return the computed hash value
678 Constructs a string representation of an array slice. @return formatted string, or "[]" if m1() returns true
679 Checks if target value falls within valid range. @param target long value to check @return true if target is valid, false otherwise
680 Creates a new builder instance with the specified initial capacity. @param initialCapacity initial size of the builder's internal array
681 Creates a new Builder instance with default mask size. @return Builder instance with initial mask size set to 10.
682 Calculates a hash value from an array of long integers using a rolling hash algorithm. @return the calculated hash value
683 Constructs a string representation of the array from 'start' to 'end'. @return stringified array or "[]" if m1() returns true
684 Converts Collection of Number objects to an integer array. @return Integer array representation of the collection
685 Recursive search for target in sorted array. @param array input array to search @param target value to find @return index of target if found, -1 otherwise
686 Recursive search function to find index of given target in array. @param array input array @param target value to search for @return index of target if found, -1 otherwise
687 Converts a Collection of Numbers to an array of long values. @param collection input collection
688 Searches an array for a target value using recursive helper function. @param array input array to search @param target value to find in the array
689 Searches for target value within specified range of an array. @param array input array to search @param target value to find @return index of target value or -1 if not found
690 Converts string to long integer using specified radix. @param string input string @param radix base of the number (e.g. 10 for decimal) @return long value or null if invalid input
691 Converts a collection of Numbers to a short array. @param collection Collection of numbers
692 Finds index of specified value in sorted array. @param array sorted short array @param target value to search for @return index of target value or -1 if not found
693 Searches for the first occurrence of the target value in the given array. @param array input array to search @param target value to find @return index of the target value or -1 if not found
694 Calculates the function mask from a 2-byte array. @param bytes input byte array (must be at least 2 elements)
695 Returns a comparator for unsigned byte arrays. @return Comparator instance or default if loading fails
696 Creates an unsigned integer from the given bit count. @param bits number of bits in the unsigned integer
697 Converts an unsigned integer to base 'radix' string representation. @param radix target number system (e.g., 2=Binary, 16=Hexadecimal)
698 Overloaded version of m1 that calls base method with default value. @param x input parameter (default value will be used)
699 Computes bitwise XOR of two integers using helper function m1. @param a first integer @param b second integer @return result of XOR operation
700 Creates an UnsignedLong instance from the given bit pattern. @param bits input bit mask value
701 Computes M2 of two numbers using M1 function. @param a first number @param b second number @return result of M2 computation
702 Converts a string to an unsigned long integer with specified radix. @param string the input string @param radix the base of the number in the string @return the converted unsigned long value or throws NFE if invalid
703 Handles dynamic method invocation for a proxy object. @param proxy the proxy object @param method the invoked method @param args array of arguments (may be null)
704 Dynamically invokes m1() method from class with given name.
705 Recursively calls m1() on provided class until it returns non-null result. @param clazz input class to start recursion from
706 Returns a ByteSource instance for the m2 resource. @return ByteSource object representing the m2 resource data
707 Calls m1() and returns true if result is valid (m2())
708 Invokes internal implementation of m2 using result from m1.
709 Invokes nested static method m2 with result of m1 as argument.
710 Calls m1() to determine modifier value and returns result of m2() on that value.
711 Checks result of m1() and returns true if successful.
712 Evaluates the result of m1() using the Modifier.m2() method.
713 Invokes m2() on result of m1(). @return true if successful, false otherwise
714 Calls m1() and checks result with m2().
715 Calls m1() and passes its result to m2() in Modifier. @return result of m2() call
716 Calls m1() to perform some operation and then uses its result in m2().
717 Checks if the given type is a TypeVariable and returns its mask value. @param type the type to check @return true if type is a TypeVariable, false otherwise
718 Creates a TypeToken instance for the given class type. @param type Class type to create a TypeToken for
719 Creates a TypeToken instance for the given type. @param type the input type
720 Converts object to type V, handling cancellation and failure cases. @param obj input object @return object of type V or null if NULL
721 Updates the listener mask with a new runnable and executor. @param listener Runnable to add @param executor Executor to use for execution
722 Sets mask on future based on condition and related future. @param related the future to set mask on, or null for no action
723 Executes a callable task and returns a ListenableFuture result. @param task the task to be executed @return ListenableFuture containing the result or null if failed
724 Schedules a cancellable task to run on a specified executor with a given service. @param service AbstractService object @param executor ScheduledExecutorService instance @param runnable Runnable task to be executed
725 Schedules a cancellable task to run on the provided executor. @param service AbstractService instance (not used in this method) @param executor scheduled execution service @param runnable task to be executed
726 Executes a collection of asynchronous tasks with a specified timeout. @param tasks collection of tasks to be executed @param timeout maximum time to wait for task completion @return list of futures representing task results or null if timed out
727 Executes a collection of asynchronous tasks with a specified timeout. @param tasks Collection of callable tasks to execute @param timeout Time duration for task execution completion @throws InterruptedException if task execution is interrupted @throws ExecutionException if task execution fails @throws TimeoutException if tasks are not completed within the given time
728 Converts duration to nanoseconds and passes to m1() and m2().
729 Converts duration to nanoseconds and schedules execution with provided Callable. @param callable task to execute @param delay time to wait before executing
730 Creates a scheduled future instance. @param command the task to be executed @param initialDelay initial delay before execution starts @param period interval between subsequent executions
731 Creates a scheduled future with customizable delay. @param command the task to execute @param initialDelay initial delay before first execution @param delay subsequent delay between executions
732 Converts duration to nanoseconds and passes it to m1(). @param timeout duration in unspecified unit
733 Converts duration to nanoseconds and passes it to helper function. @param timeout duration to convert
734 Wraps the m2 call with a custom timeout using m1.
735 Invokes a callable with a specified timeout and conversion of timeout to nanoseconds. @param callable function to be executed @param timeout duration for execution @return result of the callable or throws an exception if timed out
736 Invokes a callable with a specified time limit and converts the result to the given type. @param callable function to invoke @param timeout maximum execution duration @return result of callable or throws exceptions if timed out or failed
737 Wraps a Runnable execution with a timeout and retries. @param runnable task to execute @param timeout maximum duration for execution
738 Wraps a Runnable in a timed execution. @param runnable task to be executed @param timeout duration before timing out
739 Creates and configures a scheduled executor service. @return ScheduledExecutorService instance
740 Handles Throwable with optional error masking logic. @param throwable exception to process
741 Computes Mersenne prime value using Mersenne function. @return computed Mersenne prime value as a string
742 Returns a function mask value. @return integer function mask value
743 Returns the function mask value. @return The function mask as a long integer.
744 Calculates the mask value using function m1. @return floating-point mask value
745 Calculates and returns the mask value using the m1 function.
746 Writes custom data to ObjectOutputStream. @param s ObjectOutputStream instance
747 Deserializes and processes data from an ObjectInputStream. @param s input stream containing serialized data
748 Applies binary operator to input value iteratively. @param x initial input value @param accumulatorFunction mathematical function to apply at each iteration @return result of iterative application (double)
749 Computes result of given binary operator applied to input value and accumulated values. @param x input value @param accumulatorFunction binary function to accumulate with x @return result of accumulation as a double
750 Generates a comma-separated list of unique integers up to the specified maximum value. @return formatted string or "[]" if max value is -1
751 Writes masked data to the output stream. @throws IOException if write operation fails
752 Applies a binary operator to the input value and previous result. @param i unused integer parameter @param x input value @return result of applying the operator
753 Applies a binary operator to an initial value and a series of inputs. @param i input index @param x initial value @param accumulatorFunction function to apply to the initial value and each input @return result of applying the accumulator function to all inputs
754 Checks if a mask exists for the given key. @param key unique key to search for
755 Returns cached map of masks or initializes and returns a new one.
756 Updates a value in the map with atomicity. @param key unique identifier @param expectedOldValue current value to check @param newValue new value to update @return true if updated successfully, false otherwise
757 Completes the operation and returns a future representing its result.
758 Completes the value and closer to the given consumer. @param consumer ValueAndCloserConsumer instance
759 Executes a Runnable with optional Executor, handling potential null inputs and concurrent execution. @param runnable the task to be executed @param executor optional thread executor for the task
760 Reverses the linked list of runnables and executes them in reverse order.
761 Creates a fluent future using the specified async function and executor. @param exceptionType type of throwable to be caught @param fallback async function to execute on failure @param executor thread pool executor @return FluentFuture object representing the computation
762 Wraps this instance as the input to an asynchronous computation. @param function async function to apply @param executor executor service for parallel execution
763 Returns a ListenableFuture representing the given value, or NULL if the input is null.
764 Returns an immediately failed future with the specified exception. @param throwable the Throwable to be returned
765 Returns a cancelled immediate future, cast to type V.
766 Retrieves a GetCheckedTypeValidator instance from the class loader.
767 Iterates over listener collection and notifies each listener.
768 Initializes a new Monitor instance with default configuration. @param enabled whether to enable monitoring (default is false)
769 Converts duration to nanoseconds using helper function. @param time Duration object
770 Converts duration to nanoseconds and calls m2 with result. @param guard Guard object @param time Duration value @return boolean result of m2 call
771 Checks if the given Guard has a valid mask value. @param guard the Guard object to check @return true if the mask is valid, false otherwise
772 Delegates call to Guard's m2() and re-throws any exceptions. @param guard object containing the guarded operation
773 Wraps ExecutorService and timeout to invoke m2 with converted timeout. @param service ExecutorService instance @param timeout duration for operation completion
774 Converts duration to nanoseconds and schedules it. @param sleepFor Duration object to be converted and scheduled
775 Sets the permit rate and updates internal state. @param permitsPerSecond positive rate of permits per second
776 Returns a function value based on synchronized access to internal state. @return double value
777 Creates an empty SettableFuture instance. @return A SettableFuture object with no value set.
778 Retrieves result from a Future with specified timeout. @param future the Future to wait for @param timeout maximum time to wait @throws ExecutionException if future failed @throws TimeoutException if timed out
779 Creates striped read-write locks with specified number of stripes. @param stripes number of lock stripes
780 Creates striped lock with specified number of stripes. @param stripes number of stripes to divide lock into
781 Creates striped semaphore with specified number of stripes and permits. @param stripes number of stripes @param permits number of permits per stripe
782 Creates striped read-write locks with specified number of stripes. @param stripes number of stripes to divide locks into
783 Creates and returns a custom thread factory instance.
784 Creates a TrustedListenableFutureTask instance for the given Runnable and result. @param runnable task to be executed @param result expected outcome of the task
785 Converts duration to nanoseconds and calls m2 with the converted value.
786 Converts duration to nanoseconds and calls underlying implementation. @param condition Condition object @param timeout Duration to convert and pass to underlying method
787 Wraps existing implementation with default value of 1. @param semaphore semaphore object @param unit time unit for timeout
788 Converts timeout to nano-seconds and calls m2 with the converted value. @param semaphore Semaphore object @param permits number of permits to acquire @param timeout timeout duration (converted to nano-seconds)
789 Converts timeout to nanoseconds and calls m2 with it.
790 Converts timeout to nanoseconds and delegates to other overloaded method. @param executor thread pool executor service @param timeout duration of wait
791 Retrieves PublicSuffixType enum based on the provided character code. @param code char character code to match
792 Applies transformation to input and returns result as an Optional. @param reference input value to transform
793 Creates and returns a Stopwatch instance tied to the specified Ticker. @param ticker unique timer identifier
794 Performs mutable reduction on an iterable using a given predicate. @param iterable input iterable @param predicate condition for reduction
795 Applies a predicate to an iterator and returns true if successful. @param iterator iterable collection of objects @param predicate condition to apply to each object
796 Returns a new MultimapBuilder instance with Ordering from m1().
797 Creates a table collector for aggregating data into an ImmutableTable. @param rowFunction function to extract row keys @param columnFunction function to extract column keys @param valueFunction function to compute cell values @param mergeFunction function to combine cell values
798 Creates a predicate that matches any value equivalent to the given target. @param target the target value (can be null)
799 Creates a function that maps keys to values with default value for unknown keys. @param map input map @param defaultValue default value to return for unmapped keys
800 Composes two functions to mask input type A with output of function f. @param g target function taking type B @param f function mapping type A to type B @return a new function that takes type A and returns the result of g applied to f's output
801 Creates a function that maps each key in the input map to its corresponding value. @param map the input map @return a function that takes a key and returns its associated value or null if not found
802 Creates a Splitter with a custom pattern mask. @param separatorPattern pattern to split by
803 Creates a Joiner instance with specified separator. @param separator string to join elements with
804 Creates a Joiner instance with the specified character as the delimiter. @param separator single character to separate joined strings
805 Creates a MapJoiner instance with custom null text separator. @param nullText custom text to use when joining map entries
806 Creates a Splitter object with a custom separator pattern mask. @param separatorPattern regular expression to split on
807 Creates a predicate that matches CharSequence instances against a given regular expression pattern. @param pattern the regular expression pattern to match against
808 Inverts the given predicate to its logical complement. @param predicate function to invert
809 Combines multiple predicates into a single AND predicate. @param components iterable of predicates to combine @return combined AND predicate or null if empty
810 Combines multiple predicates into an 'or' condition. @param components iterable of predicate functions @return a single predicate function combining all inputs
811 Parses input sequence into a key-value map. @param sequence input string to parse @return Map of String keys and values or empty if invalid
812 Processes input sequence and returns a stream of strings. @param sequence input CharSequence to be processed
813 Wraps a supplier with memoization, if applicable. @param delegate original supplier to wrap @return wrapped supplier or original if already memoized
814 Composes a function with a supplier to create a supplier of the output type. @param function Function to apply @param supplier Supplier of input data
815 Wraps a supplier in a thread-safe implementation. @param delegate original supplier to be wrapped
816 Handles a throwable of specified type, invoking custom handling logic. @param throwable the exception to handle @param declaredType the expected type of the exception
817 Logs a Throwable instance using m1. @param throwable the exception to log or null for no-op
818 Wraps a Throwable into a Runtime exception. @param throwable the input exception to be wrapped.
819 Decomposes Throwable into a list of StackTraceElements based on specific conditions. @param throwable the input exception to decompose
820 Retrieves a reference entry for the given key from the specified segment. @param key the key to search for @param hash the hash code of the key @param next the next reference entry in the chain (or null)
821 Creates a removal notification with specified key, value and removal cause. @param key the key to be removed @param value the associated value (may be null) @param cause the reason for removal
822 Creates a collector for counting elements with given functions. @param elementFunction function to extract an element from input @param countFunction function to count the occurrences of an element @param multisetSupplier supplier for Multiset used in collection
823 Creates a collector that groups input elements by key and value. @param keyFunction maps each element to its grouping key @param valueFunction maps each element to its grouped value @param multimapSupplier provides the Multimap data structure
824 Creates a collector that groups input elements by key and values. @param keyFunction maps each element to its group key @param valueFunction maps each element to its associated values @param multimapSupplier provides the underlying multimap data structure
825 Applies a transformation to each element in the input collection. @param fromCollection original collection of objects @param function mapping function to apply to each object @return transformed collection with new type T
826 Checks for presence of an element in a collection or iterator. @param iterable collection or iterator to search @param element target object to find @return true if found, false otherwise
827 Creates a contiguous set of elements up to but not including (or including) the specified element. @param toElement upper bound of the set @param inclusive true for inclusive range, false otherwise
828 Generates a contiguous set of elements based on the given element and inclusivity flag. @param fromElement starting element for the set @param inclusive whether to include the start element in the set
829 Applies mask function to input element. @param e input element to be masked
830 Configures the map's key comparator. @param keyComparator comparator to use for keys
831 Configures the map with a custom comparator for keys. @param keyComparator Comparator to compare keys; null for default behavior
832 Sets custom comparator for values. @param valueComparator comparator to use when comparing values
833 Adds an element to the builder's collection. @param element object to be added @return this builder instance for fluent API usage
834 Configures builder with repeated occurrence of specified element. @param element object to configure @param occurrences number of times to repeat the element @return Builder instance for method chaining
835 Configures builder with specified element and quantity. @param element data item to process @param count number of items
836 Returns a collector that accumulates elements into an ImmutableSortedMultiset. @param comparator comparator for sorting the multiset
837 Returns an immutable sorted set of elements up to and including {@code toElement}.
838 Returns an immutable sorted set of elements starting from the specified element. @param fromElement starting element (inclusive)
839 Wraps result of m1() with m3().
840 Filters elements from the underlying iterable using the given predicate. @param predicate function to apply to each element @return filtered iterable or empty if no matches found
841 Filters an iterable by type using a predicate. @param unfiltered input iterable @param desiredType target class type @return filtered iterable of desired type
842 Maps elements from this iterable to a new form using the given function. @param function transformation function
843 Wraps or reuses a given Iterator, converting it to a PeekingIterator. @param iterator input iterator to be converted @return PeekingIterator instance wrapping the original iterator
844 Removes specified elements from the given iterable. @param removeFrom Iterable to remove elements from @param elementsToRemove Elements to be removed @return true if removal was successful, false otherwise
845 Removes elements from an iterable that match a given predicate. @param removeFrom the iterable to remove from @param predicate the condition for which elements to remove
846 Removes specified elements from a collection or iterable. @param removeFrom collection or iterable to modify @param elementsToRetain elements to exclude from removal @return true if any elements were removed, false otherwise
847 Checks if two iterable collections have a common element. @param collection Iterable collection to check against
848 Merges collections of objects into a single collection. @param addTo target collection @param elementsToAdd iterable source to merge @return true if merged successfully, false otherwise
849 Creates a list from an iterator of elements. @param elements iterator containing elements to collect @return ArrayList of collected elements or empty if iterator is exhausted
850 Creates a hash set from an iterator of elements. @param elements iterator over unique elements @return Set containing all unique elements or null if empty
851 Wraps an iterator with the specified type, returning a read-only view. @param unfiltered original iterator @param desiredType target class for filtering @return UnmodifiableIterator of T or throws ClassCastException if not compatible
852 Applies predicate to each element in iterable and returns true if all pass. @param iterable iterable of elements to check @param predicate predicate function to apply to each element
853 Applies a predicate to each element in an iterable and returns the first matching element. @param iterable collection of objects to search @param predicate condition to evaluate elements against @return first T that satisfies the predicate or null if not found
854 Clears the cache entry associated with the given key. @param key unique identifier for the cache entry to clear
855 Returns an iterator over a specified sublist of elements. @param list input list @param index starting index of the sublist
856 Creates a list with an initial element and optional additional elements. @param first the first element @param rest array of optional additional elements
857 Transforms a list of objects into another type using the provided function. @param fromList input list to transform @param function mapping function for each element in the list @return transformed list of objects or null if the input is not random-accessible
858 Creates a list containing the provided elements and any additional items in the array. @param first leading element @param second second element @param rest optional array of additional elements
859 Maps a set to a map using the provided function. @param set input set of unique keys @param function mapping function from key to value
860 Creates a navigable map view from the given set and transformation function. @param set navigable key set @param function mapping function to apply to each key
861 Transform map entries using the provided transformer and return a new map with updated values. @param fromMap original map to transform @param transformer entry transformation function @return new map with transformed entries or null if input is null
862 Checks if a collection contains an entry with the given object as its key or value. @param c Collection of entries to search @param o Object to match (key or value) @return true if found, false otherwise
863 Checks if a collection contains a specific entry. @param c Collection of entries @param o Entry to search for (null indicates absence)
864 Retrieves and returns a functional mask value from the count map. @param element object for which to retrieve the mask @return functional mask value or 0 if not found
865 Checks if a mask element exists with specified occurrences. @param element the object to search for @param occurrences the target occurrence count @return true if found, false otherwise
866 Updates and fetches the FUNC_MASK value for a given element. @param element E object to operate on @param count integer value to update with @return updated int value or 0 if not found
867 Verifies update mask by comparing old and new counts. @param element object to verify @param expectedOldCount expected previous count @param newCount new count value @return true if update is valid, false otherwise
868 Removes the specified key from the map and updates the total size. @param key object to remove or null for no-op
869 Creates an empty MultimapBuilder instance with Comparable keys.
870 Converts a map to a multimap with function mask. @param map input map @return SetMultimap object wrapping the map
871 Transforms a multimap by applying the given entry transformer. @param fromMap original multimap to transform @param transformer function to apply to each entry in the map @return new transformed multimap
872 Merges iterable elements into the set. @param elements collection of elements to merge
873 Updates the multiset with new elements and checks for mask functionality. @param self original multiset instance @param elements new elements to add @return true if mask is enabled, false otherwise
874 Merges two multisets, modifying the first to retain elements of the second. @param multisetToModify The multiset to be modified @param multisetToRetain The multiset whose elements should be retained in the modification
875 Removes specified occurrences from the given multiset. @param multisetToModify multiset to modify @param occurrencesToRemove iterable of elements to remove @return true if any removals occurred, false otherwise
876 Checks if specified elements are present in this collection. @param elementsToRetain Collection of elements to check
877 Retrieves elements from the queue and stores them in the collection within a specified time limit. @param q BlockingQueue to retrieve elements from @param buffer Collection to store retrieved elements @param numElements Number of elements to retrieve @param timeout Time duration for retrieval operation
878 Retrieves up to 'numElements' elements from the queue and adds them to the collection. @param q BlockingQueue to dequeue elements from @param buffer Collection to store dequeued elements @param numElements maximum number of elements to retrieve @param timeout time limit for operation
879 Checks if the collection contains the specified element. @param input element to search for
880 Evaluates a collection of objects against a predicate. @param values iterable collection of objects
881 Merges two streams of objects into a single sequence, applying a bi-consumer to each pair. @param streamA first stream @param streamB second stream @param consumer function to apply to each pair of elements
882 Creates a Collector for mapping and aggregating data into a Table. @param rowFunction maps input element to table row @param columnFunction maps input element to table column @param valueFunction maps input element to table cell value @param mergeFunction merges two table cell values @param tableSupplier creates the underlying Table instance
883 Applies a transformation function to the values of a table. @param fromTable input table @param function mapping function for each value @return transformed table with same schema
884 Returns the original or transposed table based on its type. @param table input table to be returned
885 Creates an escaper map with function-based replacements. @param replacements map of characters to escaped strings
886 Sets replacement characters for specified input array and string. @param cs input character array @param r replacement string
887 Searches for the first non-matching character in a CharSequence. @param csq input string @param start starting search position @param end ending search position @return next potential match position or start if no match found
888 Creates a SubscriberExceptionContext instance with the given parameters. @param bus Event bus instance @param event Object that triggered the exception @param target Target object associated with the exception @param method Method that caused the exception
889 Creates a sequential funnel that wraps the given element funnel, allowing iteration over elements. @param elementFunnel funnel for individual elements
890 Wraps a PrimitiveSink instance as an OutputStream.
891 Creates a string funnel with specified character set. @param charset target character encoding
892 Converts an Appendable to a Writer, or wraps it in a custom writer. @param target the Appendable to convert or wrap @return a Writer instance suitable for writing to the target
893 Processes input CharSequence to produce a byte array. @param chars input string
894 Creates a Closer instance with a suppressing suppressor. @return Closer object
895 Initializes filter with compiled regular expression. @param patternStr string representation of regex pattern
896 Calculates the mask value for a given BigInteger and rounding mode. @param x BigInteger value @param mode RoundingMode to apply @return int mask value
897 Returns a byte value based on the given string, using default buffer size. @param string input string to process
898 Calls m1 with default max length of 10. @param s input string
899 Returns a type variable key if the input is a type variable, otherwise returns null. @param t the input type to check
900 Transforms a ListenableFuture into a consistent object representation. @param future the input future to transform
901 Initializes Schedule with specified time duration. @param delay Duration to schedule (converted internally to nanoseconds)
902 Creates an instance of AtomicLongMap with a ConcurrentHashMap as backing map. @return AtomicLongMap instance
903 Computes an accumulation value using the provided function and initial value. @param key arbitrary key @param x update value @param accumulatorFunction binary operator for accumulation @return accumulated value as a long integer
904 Applies the given accumulator function to the initial value and input. @param key arbitrary key @param x input value @param accumulatorFunction binary operator for accumulation @return result of computation as a long value
905 Updates function mask with new value and returns the updated mask. @param key unique key identifier @param newValue new function mask value
906 Executes a closure on the given object and returns it. @param closeable object to be closed @param closingExecutor executor for closing operations @return original object or null if not provided
907 Creates a CycleDetectingLockFactory instance based on the given policy. @param policy policy object governing lock factory behavior
908 Wraps an executor in a sequential executor. @param delegate original executor to be wrapped
909 Creates a SimpleTimeLimiter instance with the given ExecutorService. @param executor ExecutorService to associate with the time limiter
910 Converts duration to nanoseconds and delegates to overloaded m2. @param toJoin thread to join @param timeout duration to wait before joining
911 Creates an unordered element order with no mask. @return ElementOrder object representing unordered elements
912 Creates an element order with stable type and no mask. @return ElementOrder object
913 Creates an ElementOrder instance with INSERTION type and no mask.
914 Creates an ordered element with sorted type and default ordering. @return ElementOrder object
915 Creates an ElementOrder instance with a sorted type and a custom mask function. @param comparator a Comparator to generate the mask function @return ElementOrder object with a sorted type and the generated mask function
916 Returns CountDownLatch from closeables.
917 Recursively flattens CharSequence into a single-level character array. @param chars input CharSequence @return flattened character array as string
918 Recursively converts CharSequence to a String. @param chars input character sequence
919 Computes and returns a byte array containing mask values.
920 Generates and returns a byte array mask.
921 Initializes metadata mask based on expected size. @param expectedSize the expected size of data
922 Initializes metadata mask based on expected data size. @param expectedSize minimum size of data to store
923 Combines this matcher with another using logical AND.
924 Wraps a predicate into a CharMatcher instance or creates a new ForPredicate if necessary. @param predicate a predicate to wrap, can be null
925 Combines this matcher with another using an OR operation. @param other another CharMatcher to combine with
926 Creates a character matcher that matches any characters within the specified range. @param startInclusive starting character (inclusive) @param endInclusive ending character (inclusive)
927 Merges CacheStats from this instance with the given stats. @param other CacheStats to combine
928 Merges two CacheStats objects into a new instance. @param other the second CacheStats object to merge @return a new CacheStats object with combined stats
929 Constructs an AbstractListMultimap from a Map of key to value collections. @param map input multimap data in map form
930 Constructs an empty multimap backed by the specified map. @param map map containing key-value pairs to initialize the multimap
931 Creates a contiguous set of elements within the specified range. @param fromElement starting element @param fromInclusive whether start is inclusive @param toElement ending element @param toInclusive whether end is inclusive @return ContiguousSet containing elements in the given range
932 Creates an EnumMultiset instance for the specified enum type. @param type the enum class to create a multiset for
933 Returns an immutable sorted set of elements within the range [fromElement, toElement].
934 Creates an unmodifiable iterator of lists from the given iterator. @param iterator input iterator to process @param size target list size
935 Creates an unmodifiable iterator that wraps a given iterator, returning lists of a specified size. @param iterator the input iterator to wrap @param size the list size to use for iteration
936 Creates a Builder instance with Ordering initialized to sort Comparable values. @param expectedSize expected size of the collection
937 Creates a new Builder instance with default ordering and specified maximum size. @param maximumSize the maximum size for the builder
938 Initializes streaming hasher with specified chunk size. @param chunkSize number of bytes to process in each chunk
939 Calculates a value based on count and sum of squares of deltas. @return calculated double value or NaN
940 Calculates a value based on count and sum of squares of deltas. @return result or NaN if invalid input
941 Calculates a function value based on deltas and count. @return double result or NaN if invalid input
942 Calculates a function value based on count and sum of squares of deltas. @return double value or NaN if invalid data
943 Returns a CharMatcher instance based on the input sequence type. @param sequence input character sequence
944 Replaces a contiguous substring in the sequence with a replacement character. @param sequence input CharSequence @param replacement character to replace with
945 Creates an equivalence relation based on the given function. @param function a Function to derive the equivalence relation from
946 Creates an equivalence relation for iterable collections of objects.
947 Compares two iterables as collections. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables are equal, false otherwise
948 Compares two lists for equality. @param thisList list to compare @param other potentially different list @return true if equal, false otherwise
949 Creates a new instance of ConcurrentHashMultiset with a ConcurrentHashMap-based map.
950 Creates a multiset from a map of element counts. @param countMap map of elements to their respective counts
951 Invokes m2 with preprocessed string from m1. @param appendable target to write result to @param parts input iterable @return same type as appendable or null if I/O error occurs
952 Flattens an iterator of Appendables into a StringBuilder. @param builder StringBuilder to accumulate output @param parts Iterator of Appendables to be appended @return the modified StringBuilder instance
953 Recursively appends key-value pairs from the provided map to the StringBuilder. @param builder StringBuilder instance to append to @param map Map containing key-value pairs to be appended
954 Recursively fetches and returns a string representation of the first entry in the iterable. @param entries iterable of entries
955 Returns a mask from the given value. @param value object to derive mask from
956 Adds a masked field to the string builder. @param name field name @param value field value (can be null)
957 Converts boolean value to string mask representation. @param value true or false value to convert
958 Converts a single character into a mask. @param value character to convert
959 Converts double value to string format using internal helper functions. @param value input numeric value
960 Converts float to mask representation. @param value floating-point value to convert
961 Converts integer to mask string representation. @param value input integer value @return String representation of mask or null if invalid
962 Converts a long value to a mask string representation. @param value long integer value to convert
963 Creates a mask with a specified name and boolean value. @param name unique identifier for the mask @param value whether the mask is enabled or disabled
964 Constructs a mask with specified name and value. @param name name of the mask @param value character representing the mask type
965 Creates a MaskedValue expression with the given name and value. @param name unique identifier for the masked value @param value numeric value to be masked
966 Formats a floating-point value as a string with specified name. @param name name of the value @param value the value to format
967 Constructs and returns a mask with the given name and value. @param name name of the mask @param value value of the mask
968 Adds a mask to the builder with the given name and value. @param name name of the mask @param value mask value as a long integer
969 Wraps a reference in an Optional, returning empty if null. @param nullableReference the input reference @return Optional containing the input reference or empty if null
970 Initializes FluentIterable with an absent iterable delegate. @see #iterableDelegate
971 Returns an optional Long value representing a default mask.
972 Returns the default mask value as an optional long. @return Optional containing the default mask value (Long.MIN_VALUE) or empty if null.
973 Calls native platform function to perform operation 'm1' on input string. @param string input string to be processed (may be null)
974 Parses a string into a HostAndPort object. @param hostPortString input string in the format [host]:port or host:port
975 Returns an iterable of elements, skipping 'numberToSkip' initial ones.
976 Returns an iterable of up to {@code maxSize} elements from the result of {@link #m1()}.
977 Retrieves an element from the specified iterable at the given position. @param iterable iterable collection (e.g. list or iterator) @param position index of desired element @param defaultValue value to return if position is out of bounds @return T element at specified position or defaultValue
978 Returns the element at specified position from an iterable. @param iterator Iterable object @param position index to retrieve an element @return Element type T or null if not found
979 Retrieves an element from the iterator at specified position or returns default value if not found. @param iterator iterator containing elements of type T @param position index of desired element @param defaultValue value to return if element is missing @return element at specified position or defaultValue
980 Returns a traverser instance to iterate over file system structure.
981 Limits input stream to specified size. @param in original input stream @param limit maximum allowed size
982 Calculates and returns the subnet mask from an IPv4 address. @param address IPv4 address in BigInteger form @return Inet4Address object representing the subnet mask
983 Masks an IPv6 address with a given value. @param address BigInteger representation of IPv6 address
984 Creates a SipHash function with masking keys. @param k0 first masking key @param k1 second masking key @return HashFunction instance
985 Constructs a FileBackedOutputStream with the specified threshold. @param fileThreshold minimum size before switching to disk-backed storage
986 Masks an IPv4 address using bitwise operations. @param address 32-bit integer representation of an IP address
987 Computes and returns a unique function ID based on input permits. @param permits number of permitted access @return unique long value representing the function ID
988 Waits for permits with optional timeout. @param permits number of permits to wait for @param timeout maximum time to wait in specified unit @param unit TimeUnit object (e.g. seconds, milliseconds) @return true if permits are available within timeout
989 Writes strategy and configuration data to output stream. @param out OutputStream to write data to
990 Creates a Scheduler instance with specified initial and periodic delays. @param initialDelay initial delay duration @param delay periodic delay duration
991 Creates a Scheduler instance with custom time delay and interval. @param initialDelay time to wait before first execution @param period time between subsequent executions
992 Calculates a mask value based on the given time and unit. @param time timestamp in specified unit @param unit TimeUnit enum value @return masked timeout value as long
993 Creates and starts a stopwatch instance. @param ticker Ticker object to be used in stopwatch
994 Configures the map's value comparator. @param valueComparator comparison function for values @return this builder instance for chaining
995 Configures map maker with specified concurrency level. @param concurrencyLevel number of threads to use
996 Returns a new CacheBuilder instance with the specified time-to-live duration in nanoseconds.
997 Creates a cache with specified expiration time. @param duration time to live in Duration format
998 Returns a CacheBuilder instance with specified time-to-idle duration. @param duration time-to-idle duration
999 Returns a cache builder with weak function references.
1000 Returns a cache builder with weak key and value references. @return CacheBuilder instance with WEAK strength
1001 Returns a cache builder with soft mask strength.
1002 Returns a map maker with weak consistency.
1003 Returns a MapMaker instance with weak function references.
1004 Returns a Throwable from the associated snapshot. @return Throwable object from the snapshot
1005 Recursively calculates an index within bounds. @param index current index value @param size maximum allowed index value
1006 Calculates the valid range of an array or collection. @param index initial index value @param size total size of the array or collection
1007 Validates range interval against array bounds. @param start inclusive lower bound @param end exclusive upper bound @param size total array size
1008 Creates a predicate that matches the specified target object or returns false for any other value. @param target the target object to match
1009 Creates a filtered multimap by applying the given predicate to entries. @param multimap input multimap @param entryPredicate filter criteria for entries @return filtered multimap with matching entries
1010 Combines a multiset with a filter and an additional predicate. @param unfiltered the original multiset @param predicate the predicate to apply @return a filtered multiset with the combined predicates
1011 Creates a Splitter instance with custom mask behavior. @param separatorMatcher CharMatcher to determine mask positions
1012 Creates a Splitter with a fixed chunk size. @param length the minimum chunk length (must be > 0)
1013 Creates a new splitter with the specified matcher. @param matcher Character matcher to split on
1014 Creates and returns a new instance of Stopwatch.
1015 Creates and initializes a stopwatch instance with m1() method invocation. @return Stopwatch object initialized to track elapsed time.
1016 Calculates the UTF-8 length of a CharSequence. @param sequence input string @return UTF-8 length as an integer, or throws exception if too large
1017 Submits a task to the executor with an infinite timeout. @param executor Executor service to execute the task in
1018 Continuously executes the masked function until it returns false.
1019 Initializes a new instance of the Builder class.
1020 Converts a Function to a CacheLoader. @param function input function to be converted
1021 Creates a cache loader from a supplier function. @param supplier function to execute when data is not cached
1022 Throws exception when attempting to process iterable of keys. @throws UnsupportedLoadingOperationException always thrown
1023 Calculates the function mask based on request and hit counts. @return function mask value as a double
1024 Calculates the miss ratio by dividing miss count by total request count. @return Miss ratio as a double, or 0.0 if no requests made
1025 Creates an instance of ForwardingLoadingCache with default settings.
1026 Initializes an empty forwarding list. This constructor is used to create a new instance of a forwarding list.
1027 Constructs an empty ForwardingMultiset instance. This constructor is used to create a new multiset with default settings.
1028 Initializes an empty ForwardingQueue instance. @throws IllegalStateException if this queue is being constructed by one of its own iterators (in other words, recursively)
1029 Initializes an empty set that forwards operations to another set.
1030 Creates an empty ForwardingListIterator instance. @implSpec This constructor is intended to be used by subclasses when implementing their own constructors. It provides a no-arg constructor that simply calls the superclass's default constructor, effectively creating an empty iterator.
1031 Creates an instance of AbstractBiMap from existing backward and forward maps. @param backward map with keys of type K @param forward map with keys of type V and values of type K
1032 Creates an empty ForwardingConcurrentMap instance. This constructor does not initialize any data; it simply creates an empty map.
1033 Creates an empty forwarding sorted map. @see ForwardingSortedMap#ForwardingSortedMap()
1034 Initializes an empty MutableTypeToInstanceMap instance.
1035 Initializes an empty forwarding multimap.
1036 Initializes an empty multimap with default settings.
1037 Initializes a new instance of ForwardingListeningExecutorService.
1038 Creates an empty ForwardingListenableFuture instance.
1039 Retrieves a reference entry from the given segment based on the provided key and hash. @param segment segment to search in @param key key to match with existing entries @param hash hash code of the key for efficient lookup @param next potential next entry in the linked list
1040 Retrieves a reference entry based on a given key and hash value. @param segment the segment to search in @param key the key to look up @param hash the hash value of the key @param next the next entry to consider (null for initial search) @return the matching ReferenceEntry or null if not found
1041 Returns a mask value. @throws ExecutionException if an execution error occurs
1042 Initializes function mask. Calls m1() function.
1043 Computes and returns a ValueReference based on the given segment, reference entry, value, and weight. @param segment Segment object @param entry ReferenceEntry object @param value Value to be processed @param weight Weight factor @return ValueReference object or null if not applicable
1044 Computes and returns a ValueReference object based on the given parameters. @param segment Segment reference @param entry Entry reference @param value Value to be referenced @param weight Weighting factor @return ValueReference object or null if computation fails
1045 Calculates a weighted reference mask from a segment and entry. @param segment Segment object @param entry ReferenceEntry object @param value Value to be masked @param weight Weight for the calculation @return ValueReference object or null if not found
1046 Updates reference entry and adds to recency queue based on map's state. @param entry ReferenceEntry object @param now current timestamp
1047 Updates mask of a reference entry and notifies access queue. @param entry the reference entry to update @param now current timestamp
1048 Updates the given ReferenceEntry with the provided weight and current time. @param entry ReferenceEntry to update @param weight new weight value @param now current timestamp
1049 Calculates a mask value for the given reference entry. @param entry ReferenceEntry object @param now current time in milliseconds @return calculated mask value or null if invalid
1050 Recursively calculates a value from an iterable. @param iterable input collection or iterator @return calculated integer value
1051 Calculates a function mask based on internal state. @return integer function mask value
1052 Fetches data from InputStream into a Queue of byte arrays. @param in input stream @param bufs queue for storing partial byte arrays @param totalLen total length of data to be fetched
1053 Initializes and sets the forward and inverse mappings. @param forward mapping from K to V @param backward mapping from V to K
1054 Creates a GeneralRange with specified comparator and flags. @param comparator comparison function for range elements
1055 Creates a GeneralRange instance with the specified comparator and endpoint. @param comparator comparator to use for ordering @param endpoint single endpoint value @param boundType type of bounds (e.g. inclusive, exclusive)
1056 Creates a GeneralRange instance with specified parameters and comparator. @param comparator comparison function for range elements @param endpoint endpoint of the range (inclusive) @param boundType indicates whether the range is bounded or not
1057 Creates a GeneralRange instance with specified bounds and comparator. @param comparator comparison function for range @param lower lower bound of the range @param lowerType type of lower bound (inclusive/exclusive) @param upper upper bound of the range @param upperType type of upper bound (inclusive/exclusive)
1058 Merges two GeneralRange objects into one. @param other the range to merge with
1059 Returns a mask value based on the current state. @throws NoSuchElementException if not in valid state
1060 Retrieves a collection of values from the map using the provided key. @param key unique identifier or null to fetch all entries @return Collection of V objects or null if key is invalid
1061 Validates delegate consistency and throws exception if modified. @throws ConcurrentModificationException when delegate is inconsistent
1062 Calls superclass's m1 method to store or update the given key-value pair. @param key unique identifier for the entry @param value associated data for the entry
1063 Calls superclass's m1 method with provided key and value. @param key arbitrary object used as a key @param value arbitrary object used as a value
1064 Calls superclass method to retrieve list of values associated with the given key. @param key unique identifier @return List of V objects or null if not found
1065 Calls superclass's m1 method with given key. @param key unique identifier
1066 Delegates to superclass method to retrieve entries. @return Set of key-value pairs or null if empty
1067 Writes user data to the specified output stream. @throws IOException if I/O error occurs
1068 Concatenates unique identifiers from the given collection into a comma-separated string. @param collection input collection of objects
1069 Converts a Map to a formatted string in the form of "{key=value, key2=value2}". @param map input map @return formatted string or null if map is empty
1070 Creates an ArrayList with an initial capacity based on the estimated size. @param estimatedSize The expected number of elements in the list
1071 Creates a new HashMap with initial capacity based on provided size. @param expectedSize estimated number of key-value pairs
1072 Creates a linked hash map with pre-allocated space. @param expectedSize estimated size of the map
1073 Creates a HashSet with an initial capacity based on the provided size. @param expectedSize estimated number of elements to store @return pre-sized HashSet instance
1074 Creates a LinkedHashSet of type E with an initial capacity based on the provided expected size. @param expectedSize estimated number of elements in the set
1075 Creates a new MultimapBuilder instance with default expected values per key.
1076 Creates a multimap builder with default expected values per key.
1077 Creates a multimap builder with default expected values per key.
1078 Creates a new MultimapBuilder instance with default expected keys.
1079 Creates a MultimapBuilder instance with default expected keys.
1080 Creates an immutable multiset entry with the given element and count. @param e the element (may be null) @param n the count
1081 Retrieves the mask value from the multiset by counting occurrences of an element. @param element element to search for @param count maximum number of occurrences to consider
1082 Checks if adding/removing an element affects set cardinality. @param element the element to add/remove @param oldCount initial count of elements @param newCount final count of elements after operation
1083 Calls and returns the result of m2() from the returned value of m1().
1084 Calls m1(), then calls m2() on its result.
1085 Calls superclass implementation of m1 to retrieve multiset entries. @return Set of Multiset.Entry objects
1086 Recursively calls m1 to fetch and then retrieve m2 value. @return result of m2 from UserProfile object returned by m1
1087 Calls m1(), then delegates to its result's m2() method.
1088 Returns an entry from a filtered iterable or null if not found.
1089 Applies mask to input element using m1 and returns result. @param e input element of type E @return masked element or null if not applicable
1090 Computes functional mask value from input element. @param e input element to process @return functional mask value or null if not applicable
1091 Constructs an empty TreeRangeSet instance with a comparator-based range map. @return new TreeRangeSet instance
1092 Checks if a value falls within a specific range (lower/upper bounds). @param value input value to check
1093 Verifies if a custom comparator is compatible with an iterable's sorting. @param comparator custom comparator to test @param elements iterable to check compatibility with @return true if compatible, false otherwise
1094 Calls superclass's m1() method with specified table.
1095 Delegates to superclass to retrieve a set of cells.
1096 Delegates cell set retrieval to superclass. @return Set of Cells or null if not found in subclasses.
1097 Delegates to superclass implementation of data retrieval. @return Collection of values or empty collection if not found
1098 Calls superclass implementation of m1. @return collection of V objects from superclass
1099 Creates an ordering based on a given function. @param function function to determine ordering
1100 Creates an Ordering instance from a Comparator, or wraps it if already Ordering. @param comparator the input comparator to convert @return Ordering instance wrapping the comparator
1101 Creates a compound ordering with this comparator and a masked secondary comparator. @param secondaryComparator comparator to be masked (e.g., by bitwise AND)
1102 Creates a cell with the specified value and keys. @param rowKey unique row identifier @param columnKey unique column identifier @param value cell value
1103 Checks if both row and column keys are valid. @param rowKey unique row identifier or null if not set @param columnKey unique column identifier or null if not set @return true if both keys are valid, false otherwise
1104 Creates an immutable map entry with the given key and value. @param key unique key @param value associated value
1105 Creates an immutable map entry from the given entry or a new one if not reusable. @param entry existing entry to reuse @param key new key for non-reusable entries @param value new value for non-reusable entries @return ImmutableMapEntry object
1106 Creates a new builder instance from an existing Entry. @param entry Entry object to create the builder from
1107 Adds a new entry to the cache with the given key and value. @param key unique cache key @param value associated cache value @return this Builder instance for method chaining
1108 Updates internal hash table capacity and size to accommodate new number of entries. @param newSize desired number of entries
1109 Initializes entry at specified index with provided key and value. @param entryIndex entry index @param key unique identifier or null for unset @param value associated data or null for unset @param hash computed hash code @param mask bitmask for compact hashing
1110 Updates internal data structure capacity to accommodate the specified new size. @param newSize desired number of entries
1111 Updates and stores user profile data. @param entryIndex unique index @param object UserProfile object to store @param hash hashed value @param mask bitmask value
1112 Initializes internal data structures for compact hashing. @return expected table size
1113 Initializes internal tables and arrays for a hash map. @return expected size of the map
1114 Checks if two ranges overlap. @param other Range object to compare with @return true if the ranges intersect, false otherwise
1115 Checks if two ranges have disjoint intervals. @param other Range object to compare with
1116 Serializes this object to the given output stream. @throws IOException if serialization fails
1117 Creates a new builder instance with default settings.
1118 Creates a new Builder instance with default settings. @return Builder object for constructing objects of type C
1119 Creates a new instance of the Builder class. @return Builder object with default configuration
1120 Returns an unmodifiable iterator over elements of type E.
1121 Returns count of given element in the specified iterable. @param iterable collection to search @param element target object to find
1122 Checks if a key is present in this map. @param key object to search for @return true if found, false otherwise
1123 Checks if the given object matches the function's mask. @param value object to check
1124 Applies mask function to provided key. @param key input value to be masked @return transformed value or null if not found
1125 Applies function chain to input key. @param key unique identifier or null if not found @return result of function chain or null if key is null
1126 Applies function m2 to the result of applying function m1 to the input key. @param key input value to be transformed by functions m1 and m2 @return transformed value or null if not applicable
1127 Computes a mask value based on the given key. @param key unique identifier or key to compute mask from
1128 Retrieves and returns a key from the cache using a custom retrieval function. @throws NoSuchElementException if no matching entry is found
1129 Retrieves and returns the mask value from an existing entry. @return The mask value or throws NoSuchElementException if not found
1130 Retrieves an entry with a specific mask value.
1131 Creates an Entry instance using iterator pipeline.
1132 Returns a navigable set of keys. @return Set of keys or null if not initialized
1133 Returns a sorted map of key-value pairs within the specified range. @param fromKey starting key @param toKey ending key
1134 Retrieves an entry from the data structure using the given key. @param key unique identifier for the desired entry @return Entry object or null if not found
1135 Retrieves and processes an entry based on the given key. @param key unique identifier to fetch the entry for @return Entry object or null if not found
1136 Returns a sorted map with the specified key. @param toKey unique key to be added
1137 Retrieves an entry from the map using the provided key. @param key unique map key
1138 Retrieves an entry from the underlying data structure using the provided key. @param key unique identifier of the desired entry @return The Entry object associated with the key, or null if not found
1139 Retrieves a sorted map of key-value pairs starting from the given key. @param fromKey the starting key
1140 Creates a SortedMultiset with bounds for the specified range. @param lowerBound lower bound value @param lowerBoundType type of lower bound (inclusive or exclusive) @param upperBound upper bound value @param upperBoundType type of upper bound (inclusive or exclusive)
1141 Creates a new instance of HashBasedTable with default factory.
1142 Deserializes object from InputStream and updates internal state. @throws IOException if serialization fails @throws ClassNotFoundException if enum constants are invalid
1143 Replaces entry at dstIndex with entry from srcIndex and updates hash table accordingly. @param dstIndex index to replace @param mask hash value mask
1144 Swaps and updates hash table entry at dstIndex with the one at srcIndex. @param dstIndex index to update @param mask hash mask value
1145 Applies two masks (m1 and m2) to the given value and returns true if the result is non-null.
1146 Creates a new builder instance with specified expected size. @param expectedSize the expected size of the data
1147 Initializes a new instance of the Builder class.
1148 Creates a new instance of the builder with default settings. @return newly created Builder instance
1149 Initializes the builder with a custom key comparator. @param comparator comparator to use when comparing keys
1150 Creates an immutable bi-map with a single key-value entry. @param k1 unique key @param v1 associated value
1151 Adds an element to the set while maintaining distinct elements. @param e element to be added
1152 Initializes builder with default capacity. @param initialCapacity starting size of the collection
1153 Creates a builder with a fixed size mask. @param expectedSize initial capacity of the list
1154 Adds an iterable of elements to the builder. @param elements Iterable of elements to add @return This builder instance for method chaining
1155 Adds an iterator of elements to the builder. @param elements iterable collection of elements to process
1156 Adds an iterable of elements to the builder. @param elements iterator over elements to add
1157 Returns serialized form of current object. @return SerializedForm object containing this instance's data.
1158 Creates a new immutable table with a single entry. @param rowKey unique row identifier @param columnKey unique column identifier @param value value to store in the table
1159 Returns a string representation of m1()'s result. @return String value or null if m1() returns null
1160 Adds a key-value pair to the map with masked values. @param key unique key @param values iterable of values to mask
1161 Retrieves a parameter of type T from the first iterable element or returns default value. @param iterable Iterable containing potentially null elements @param defaultValue Default value to return if no valid element found
1162 Retrieves a value from the given iterable, returning the default value if empty. @param iterable input iterable @param defaultValue value to return if iterable is empty @return first non-empty element or default value
1163 Sets or updates a function mask entry. @param key unique key identifier @param value associated value
1164 Partitions the input list into sublists of a specified size. @param list input list to partition @param size maximum number of elements in each sublist @return List of sublists or null if invalid parameters
1165 Returns a function mask based on the provided element. @param element object to determine the mask value
1166 Computes a mask value based on the given element using m1 algorithm. @param element input object to process
1167 Invokes m1() function.
1168 Creates an empty TreeRangeMap instance. @return a new, empty TreeRangeMap object
1169 Finds the minimum index satisfying FUNC_MASK conditions. @param index starting index @param len length of search range @return minimum index or -1 if not found
1170 Calculates the function mask based on size. @return integer value indicating function type
1171 Returns functional mask value using m1() function. @return Functional mask as type E or null if unavailable.
1172 Reorders elements in the queue based on custom ordering. @param index current position to reorder from @param x element to insert and reorder around @return final reordered index
1173 Returns an iterator over all elements in this multiset.
1174 Merges an element into a sorted array while maintaining the sorted order. @param element the new element to insert @param array the pre-sorted array @return the updated array with the element inserted at its correct position
1175 Converts collection to specified array type. @param c Collection to convert @param array Array of type T, must be large enough to hold all elements @return Array of type T containing converted elements, or null if not found
1176 Recursively unwraps and returns the first element of an iterable. @param iterable input collection to unwrap @return first element of type E, or null if empty
1177 Recursively applies transformation from Iterable to target type E. @param iterable input collection of elements to transform @return transformed result or null if iterable is empty
1178 Calls inner m2() method via outer m1() method. @return result of m2() method call on the returned object from m1()
1179 Creates a GeneralRange instance from the given Range. @param range input range to transform
1180 Trims and navigates the specified map within the given range. @param map NavigableMap to trim @param range Range to apply @return trimmed NavigableMap or null if not found
1181 Retrieves a subset of elements from the navigable set within a given range. @param set input set @param range query bounds @return filtered NavigableSet or result of m14() if no filtering is performed
1182 Invokes superclass implementation of m1(), returning a sorted map of maps.
1183 Returns synchronized version of input queue. @param queue original queue to synchronize
1184 Initializes ArrayBasedCharEscaper with escaper map and character range. @param escaperMap Escaper map for replacement array @param safeMin Minimum safe character value @param safeMax Maximum safe character value
1185 Initializes ArrayBasedUnicodeEscaper with given parameters. @param escaperMap Escaper map to use @param safeMin minimum safe code point value @param safeMax maximum safe code point value @param unsafeReplacement replacement string for unsafe characters (may be null)
1186 Creates a PercentEscaper with specified safe characters and plus-for-space behavior. @param safeChars string of allowed characters @param plusForSpace whether to replace spaces with '+'
1187 Performs a recursive search on the input string. @param string input string to process
1188 Creates a subscriber instance based on the event method's properties. @param bus EventBus object @param listener listener object @param method event method to subscribe to @return Subscriber or SynchronizedSubscriber instance
1189 Returns a string representation of the graph's characteristics.
1190 Returns a set of EndpointPairs, iterating over all pairs in the graph. @return Set<EndpointPair<N>> containing all valid pairs
1191 Returns a set of EndpointPair objects representing all pairs in the graph. @return Set<EndpointPair<N>> containing all pairs or an empty set if none exist
1192 Calculates and returns a hash code based on the double value. @param d input double value to be hashed
1193 Creates a collector for generating a Bloom filter with the specified expected insertions. @param funnel transformation function to apply to input elements @param expectedInsertions estimated number of unique elements to be inserted
1194 Calculates the function mask value. @return double representing the function mask
1195 Checks if two Bloom filters are equivalent based on their hash functions and strategies. @param that the other Bloom filter to compare with @return true if masks match, false otherwise
1196 Default implementation of m1 with a default max value of 10. @param x input byte value
1197 Combines two Bloom filters with the same parameters. @param that another BloomFilter to combine
1198 Creates hash code from byte array using BytesHashCode. @param bytes input byte array
1199 Returns a hash code from an integer value. @param hash input integer to be hashed
1200 Generates a hash code using FUNC_MASK algorithm. @param hash input value to be hashed @return LongHashCode object representing the hashed value
1201 Calculates the functional mask value using m1().
1202 Calculates function mask value.
1203 Calculates and returns a BigInteger mask value.
1204 Generates a concatenated hash function based on the specified minimum bits. @param minimumBits minimum number of bits required for hashing @return A concatenated hash function object
1205 Invokes m2 with hash code result from m1. @param hashCode instance containing hash code @param buckets number of hash buckets
1206 Generates an HMAC-MD5 hash function instance. @param key encryption key
1207 Creates a hash function using HMAC-SHA1 with the given key. @param key encryption key
1208 Generates a hash function using HMAC-SHA-256 with custom key and initialization vector. @param key unique key for the hash function
1209 Generates an HMAC-SHA-512 hash function using the provided key. @param key cryptographic key
1210 Concatenates multiple byte sources into one. @param sources iterable of byte sources to concatenate @return concatenated ByteSource object
1211 Concatenates multiple CharSources into one. @param sources iterable of CharSources to combine
1212 Wraps byte array as ByteArrayInputStream for further processing. @param bytes input byte array
1213 Creates a new Byte Array Data Output instance. @return initialized ByteArrayDataOutput object
1214 Creates a ByteArrayOutputStream with the specified size. @param size buffer size in bytes
1215 Initializes a new ReaderInputStream instance with the specified Reader, Charset, and buffer size. Malformed input and unmappable characters are replaced.
1216 Calculates the total number of bytes skipped by a function. @param in InputStream to read from @return total byte count or throws IOException if an error occurs
1217 Skips up to 'n' bytes from the InputStream. @param in input stream @param n number of bytes to skip @throws IOException if an I/O error occurs or end-of-stream is reached prematurely
1218 Calls overloaded version of m2 with iterator's contents and separator.
1219 Wraps existing stream into itself to allow recursive processing.
1220 Applies a consumer function to each line of the model output. @param action Consumer function to apply to each line
1221 Processes a Readable input to extract masked values. @param r input source (e.g. file, stream) @return list of extracted strings or empty if no data
1222 Processes readable content using a LineProcessor. @param readable input to process @param processor callback for each processed line @return result from the processor or null on failure
1223 Reads input characters and performs mask-related operations. @throws IOException on read errors
1224 Returns the function mask value. @return 16-bit integer representing the function mask
1225 Returns a character representing the function mask. @return a single character value or throws IOException if error occurs
1226 Calculates and returns a floating-point mask value. @return The computed mask value as a float.
1227 Computes function mask value as a double. @return double representation of the function mask value
1228 Iterates over a string's characters, invoking m2() for each. @param s input string
1229 Applies mask to double value. @param v input double value @throws IOException if operation fails
1230 Accumulates IOExceptions from iterating over a directory stream. @param dir directory to iterate over @return Collection of caught IOExceptions or null if successful iteration
1231 Fetches and processes exceptions from a directory stream. @param dir SecureDirectoryStream containing the directory @param path Path to process within the directory @return Collection of IOExceptions or null if no issues found
1232 Initializes the MultiInputStream from an iterator of ByteSources. @param it iterator of ByteSources to be concatenated
1233 Returns a CharSource from the m2 resource with the specified Charset. @param charset the character set to use
1234 Calculates the number of permutations in a sorted list using the given comparator. @param sortedInputList sorted input list @param comparator comparison function @return total permutations or Integer.MAX_VALUE if overflow occurs
1235 Calculates the weighted average of a sequence of numbers. @param values iterator over numerical values @return weighted average as double or NaN if invalid input
1236 Checks if the given double value is a power of 2. @param x input value @return true if x is a power of 2, false otherwise
1237 Evaluates a double value against a mask condition. @param x the input double value
1238 Rounds a long value to the nearest double using the specified RoundingMode. @param x the value to be rounded @param mode the rounding mode to apply
1239 Determines the comparison result of two values within a tolerance. @param a first value @param b second value @param tolerance maximum allowed difference @return -1 if a < b, 0 if equal, 1 if a > b
1240 Calculates a mask value based on the given table size using the M1 function.
1241 Performs binary search to find a valid pivot for FUNC_MASK. @param left initial left index @param right initial right index
1242 Calculates the power of 10 that is just below or above the given value. @param x input value @param mode RoundingMode to determine whether to return floor, ceiling, etc. @return integer power of 10 (or its half) corresponding to the rounded value.
1243 Computes cube root of a number with specified rounding mode. @param x input value @param mode RoundingMode to apply @return cube root or nearest integer approximation
1244 Calculates the function mask for resizing a queue. @return new capacity value
1245 Computes and returns a linear transformation with zero slope.
1246 Creates a LinearTransformation object based on the given slope. @param slope The slope of the linear transformation @return A LinearTransformation object representing the line (Regular or Vertical) depending on whether the slope is valid and finite.
1247 Applies linear transformation to input value x and returns result as VerticalLinearTransformation.
1248 Computes the FUNC_MASK value for a given integer n. @param n input integer @return BigInteger representing the computed mask value
1249 Calculates the exponent of a number in base 10. @param x input value @return integer power or result of rounding operation
1250 Calculates a function mask using the formula: x * (numerator / denominator). @param x input value @param numerator dividend @param denominator divisor @return calculated function mask
1251 Computes the result of a power operation using a combination of precomputed values and iterative squaring. @param b base value @param k exponent
1252 Calculates and returns the mask value based on m1() result. @return calculated mask value
1253 Calculates function mask value based on m1 result. @return Function mask value
1254 Calculates a value based on various intermediate results. @return calculated double value or NaN if invalid
1255 Calculates the weighted average of a stream of numbers. @param values iterator over Number objects @return estimated mean or NaN if invalid values encountered
1256 Updates moving window statistics (mean, min, max) and sum of squares of deltas. @param value new data point to incorporate
1257 Calculates and returns the function mask value. @return function mask value as a double
1258 Calculates function value using m1 and sum of products of deltas. @return function value
1259 Calculates a masked function value based on statistical deltas. @return function value or NaN if invalid
1260 Partitions the given array around a pivot element. @param array input array to be partitioned @param from starting index of partition range @param to ending index of partition range @return index of pivot element in its final position
1261 Computes paired statistics from a byte array. @param byteArray input data @return PairedStats object containing x and y statistics and sum of products of deltas
1262 Parses byte array into Stats object. @param byteArray input data as a byte array @return Stats object or null on parsing error
1263 Creates PairedStats object from individual statistics and product of deltas. @return PairedStats object containing calculated values
1264 Returns stats with specific mask applied. @return Stats object with applied mask
1265 Returns statistical data with specific mask applied. @return Statistical data object
1266 Aggregates Number values into Stats using the M4 collector. @return Stats object with aggregated data
1267 Formats IP address as IPv4 or IPv6 string. @param ip InetAddress object to format
1268 Extracts the IPv4 address from a given IPv6 address. @param ip IPv6 address @return Inet4Address object or null if not IPv4-compatible
1269 Extracts the 32-bit IPv4 address from a given IPv6 address. @param ip IPv6 address to extract mask from
1270 Masks the given IPv6 address to its IPv4 equivalent using ISATAP. @param ip IPv6 address to mask @return Inet4Address object or throws exception if invalid
1271 Calculates the mean squared error (MSE) of a numerical dataset. @param dataset collection of numbers to process
1272 Computes mask values from the given numerical dataset. @param dataset collection of numbers to process
1273 Sets function mask value and adds it to the data array. @param value double representing function mask value
1274 Initializes builder with mask values. @param values double array of mask values
1275 Sets function mask from a collection of double values. @param values collection of double values to set
1276 Configures the builder with a mask from an array of doubles. @param values array of double values to create a mask from @return this Builder instance for chaining
1277 Creates an immutable array of doubles containing a single value. @param e0 the double value to include in the array
1278 Creates an ImmutableDoubleArray instance with two elements. @param e0 first element @param e1 second element
1279 Creates an immutable array of doubles from three input values. @param e0 first value @param e1 second value @param e2 third value @return ImmutableDoubleArray object containing the three values
1280 Creates an immutable array of doubles from four input values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value
1281 Creates an immutable array of doubles from the given function mask values. @param e0 first function value @param e1 second function value @param e2 third function value @param e3 fourth function value @param e4 fifth function value
1282 Creates an immutable array of doubles from 6 input values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @param e4 fifth value @param e5 sixth value
1283 Creates an ImmutableDoubleArray from a double array. @param values input array of doubles
1284 Creates an immutable double array from a collection of doubles. @param values collection of double values @return ImmutableDoubleArray or EMPTY if collection is empty
1285 Converts DoubleStream to an ImmutableDoubleArray. @param stream input DoubleStream @return ImmutableDoubleArray or EMPTY if input is empty
1286 Returns an immutable double array based on the result of m1() and m2(). If m1() is true, returns a new ImmutableDoubleArray instance; otherwise, returns this.
1287 Checks if input value is within valid range based on function m1. @param target input value to check @return true if within valid range, false otherwise
1288 Sets function mask with specified integer value. @param value function mask value to set in the builder
1289 Builds mask builder from an array of boolean values. @param values array of boolean flags
1290 Configures the builder with a collection of integer values. @param values Collection of integers to be masked
1291 Initializes builder with mask values from the given array. @param values ImmutableIntArray containing mask values
1292 Creates an immutable array containing a single element. @param e0 the element to be included in the array
1293 Creates an immutable array containing two elements. @param e0 first element value @param e1 second element value
1294 Creates an immutable array with three elements. @param e0 first element value @param e1 second element value @param e2 third element value
1295 Creates an immutable integer array from four given values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @return ImmutableIntArray object containing the four values
1296 Creates an immutable array from five integer elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element
1297 Creates an immutable integer array with specified values. @param e0 first value (index 0) @param e1 second value (index 1) @param e2 third value (index 2) @param e3 fourth value (index 3) @param e4 fifth value (index 4) @param e5 sixth value (index 5)
1298 Creates an immutable integer array from the provided values. @param values input array of integers
1299 Converts an IntStream to an ImmutableIntArray. @param stream input stream of integers @return ImmutableIntArray containing stream elements or empty if stream is empty
1300 Returns an immutable array based on a condition. @return ImmutableIntArray instance or this if condition is true
1301 Sets function mask to specified value. @param value new function mask value
1302 Updates builder with a long array of function mask values. @param values array of function mask values
1303 Sets mask values from a collection. @param values collection of Long values to set as masks
1304 Builds a mask from the given immutable long array. @param values input long array
1305 Creates an immutable array of function masks from a single long value. @param e0 input long value
1306 Creates an immutable array of two long values representing function mask bits. @param e0 first bit value @param e1 second bit value
1307 Creates an immutable array of function masks from three input values. @param e0 first function mask value @param e1 second function mask value @param e2 third function mask value
1308 Creates an ImmutableLongArray instance with the given four 64-bit elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element
1309 Creates an immutable array with the given five 64-bit integers. @param e0 first integer value @param e1 second integer value @param e2 third integer value @param e3 fourth integer value @param e4 fifth integer value
1310 Creates an ImmutableLongArray instance from six primitive long values. @param e0 first value @param e1 second value @param e2 third value @param e3 fourth value @param e4 fifth value @param e5 sixth value
1311 Creates an ImmutableLongArray from a long array. @param values input array of long values
1312 Converts LongStream to ImmutableLongArray. @param stream input stream of long values @return ImmutableLongArray or EMPTY if input is empty
1313 Returns an immutable long array based on function mask evaluation. @return ImmutableLongArray instance or existing array if condition is met
1314 Creates ScaleAndIndexes object from collection of indexes. @param indexes collection of integer values
1315 Converts collection of integers to immutable array, or returns empty array if collection is empty. @param values Collection of integers @return ImmutableIntArray object or EMPTY if input was empty
1316 Creates an immutable array of function masks from a collection of long values. @param values Collection of long values @return ImmutableLongArray object or EMPTY if input is empty
1317 Converts string to integer using specified radix. @param string input string @param radix base of the number to convert to (e.g. 10 for decimal) @return Integer value or null if conversion failed or inconsistent
1318 Returns a Long value based on input String and default value 10. @param string input String to process
1319 Converts string to integer mask using ParseRequest and custom radix. @param stringValue input string to be converted
1320 Extracts 32-bit unsigned integer from given long value. @param value input value to extract from
1321 Converts a BigInteger to an UnsignedInteger. @param value input BigInteger value
1322 Calculates the mask value from a string representation in a given radix. @param string string representation of an unsigned integer @param radix base of the number (e.g., 10 for decimal)
1323 Computes mask value by combining input and internal values. @param val input unsigned integer value
1324 Computes mask value using bitwise operations. @param val input unsigned integer @return computed UnsignedInteger result
1325 Calculates the function mask value. @param val input unsigned integer value @return resulting unsigned integer mask value
1326 Calculates function mask value based on input unsigned integer. @param val input unsigned integer value @return calculated function mask value as an UnsignedInteger object
1327 Computes the mask for an unsigned integer value. @param val input value @return computed mask as an unsigned integer
1328 Calls m1(int) with default value 10.
1329 Calculates and returns a function mask based on the given UnsignedInteger. @param other UnsignedInteger to compare with
1330 Converts a signed long to an unsigned long by discarding the sign bit. @param value input long value @return UnsignedLong representation of the input value
1331 Converts BigInteger to UnsignedLong. @param value input big integer value
1332 Calculates the function mask by combining input value with result of m1 operation. @param val input unsigned long value
1333 Computes functional mask value using bitwise operation. @param val input value
1334 Calculates the function mask value by multiplying and applying M1 result. @param val input value
1335 Computes the remainder of a division using the Funky's Algorithm. @param dividend input number to be divided @param divisor non-negative divisor value @return quotient or 0 if negative divisor and odd dividend
1336 Computes the remainder of a division operation. @param dividend number to be divided @param divisor divisor value @return remainder of the division as a long integer
1337 Computes mask value from string representation using specified radix. @param string input string to process @param radix base number system (e.g. 10 for decimal) @return UnsignedLong result or null if invalid input
1338 Returns value from m1 with default offset of 10. @param string input string to process
1339 Parses a string into an integer mask using ParseRequest. @param stringValue input string to parse @return integer mask or throws NumberFormatException if invalid
1340 Evaluates mask condition based on m1(), m2(), and m3() results. @return true if all conditions are false, false otherwise
1341 Returns a TypeToken instance for the current type, or this instance if m1() fails.
1342 Returns a TypeToken instance for the current type, or itself if m1() returns false.
1343 Retrieves the component type of the runtime type, or null if not found. @return TypeToken object representing the component type, or null.
1344 Calls platform-specific function to perform operation. @throws InterruptedException if interrupted while waiting @throws ExecutionException if execution failed.
1345 Submits a callable task to the specified executor service and returns its ListenableFuture. @param executorService ListeningExecutorService instance @param task Callable task to execute @param queue BlockingQueue of Future objects @return ListenableFuture result or null if not found
1346 Delegates service operation with custom timeout. @param timeout maximum duration to wait for response
1347 Calls superclass service with specified timeout. @param timeout maximum duration to wait before timing out
1348 Calls superclass service with given timeout. @param timeout maximum time to wait before timeout
1349 Calls superclass's m1 with specified timeout. @param timeout maximum time to wait for service completion
1350 Invokes service method 1 with specified timeout.
1351 Invokes service operation with provided timeout. @param timeout maximum allowed duration
1352 Calls superclass service method with given timeout. @param timeout time to wait before throwing TimeoutException
1353 Executes service operation with specified timeout.
1354 Executes a masked operation on the given input with the specified index. @param index input index @param future Input object to be processed, returns null if not found
1355 Calculates a value using the function m1 and summing operator. @param delta input value to be processed
1356 Computes FUNC_MASK value based on input delta. @param delta input value used in calculation
1357 Calculates function mask value using m1 function with sum aggregation. @param i input integer value @param delta input double value
1358 Calculates mask value using the sum of two functions. @param i input parameter @param delta difference factor
1359 Cancels the asynchronous task. @param mayInterruptIfRunning whether to interrupt running tasks @return true if cancellation was successful, false otherwise
1360 Recursively builds example stack trace by traversing allowed prior locks. @param node current lock graph node @param seen set of previously visited nodes @return ExampleStackTrace object or null if not found
1361 Creates a ListenableFutureTask from a Callable. @param callable function to be executed
1362 Wraps a Runnable into a ListenableFutureTask with the provided result. @param runnable task to execute @param result initial result value
1363 Executes mask-related business logic. @see executionList.m1() for specific implementation details
1364 Creates a new instance of ExecutionSequencer. @return ExecutionSequencer object
1365 Converts a ListenableFuture to a FluentFuture, or wraps it if necessary. @param future the input future @return the converted or wrapped FluentFuture
1366 Wraps a given ListenableFuture with a NonCancellationPropagatingFuture. @param future input ListenableFuture to be wrapped @return the wrapped ListenableFuture
1367 Performs asynchronous operation based on input key and value. @param key unique identifier for the operation @param oldValue legacy data to be updated or replaced @return ListenableFuture representing the outcome of the operation
1368 Applies mask function to event and itself. @param event Event object containing data to process
1369 Calls m1 function with given event and label parameters. @param event Event object of type L @param label Input string label
1370 Triggers listener event if monitor condition is false. @param monitor monitor object
1371 Executes listener operations while releasing the monitor. @param monitor monitor object
1372 Checks and updates each active guard based on a custom condition. @param activeGuards linked list of currently active guards
1373 Executes an asynchronous callable on a specified executor. @param callable asynchronous operation to execute @param executor thread pool for executing the operation @return ListenableFuture representing the operation's result
1374 Schedules an asynchronous callable with a specified delay and returns the result as a ListenableFuture. @param callable asynchronous operation to execute @param delay duration to wait before executing the callable @param timeUnit unit of time for the delay @param executorService service scheduling the task @return ListenableFuture containing the result or null if not found
1375 Wraps a Callable in a RunnableFuture, enabling asynchronous execution. @param callable the input Callable to be wrapped
1376 Executes a Callable on the specified Executor and returns its result as a ListenableFuture. @param callable function to execute @param executor thread pool to run the function in @return ListenableFuture containing the result or null if the function throws an exception
1377 Creates a future that wraps the given runnable and value. @param runnable task to be executed @param value associated data @return RunnableFuture containing result or null if not set
1378 Executes a Runnable on a specified Executor. @param runnable the task to execute @param executor the executor service to use @return a ListenableFuture representing the asynchronous execution
1379 Converts duration to nanoseconds and delegates to internal implementation. @param semaphore synchronization object @param timeout time limit for operation
1380 Returns an Optional of the first element from iterator, if present; otherwise returns empty Optional.
1381 Retrieves the first element from an iterable, or returns a default value. @return The first element, or null if not found
1382 Filters an iterator of elements using a predicate and returns the first matching element. @param iterator iterable source @param predicate condition to match @return first matching element or empty if none found
1383 Sets expected node count and returns this builder instance. @param expectedNodeCount the anticipated number of nodes in the graph
1384 Sets the expected node count and returns this builder instance. @param expectedNodeCount desired number of nodes in the network
1385 Configures network builder with an expected edge count. @param expectedEdgeCount target number of edges in the graph @return NetworkBuilder instance for method chaining
1386 Configures graph builder to expect a specific node count. @param expectedNodeCount predicted number of nodes
1387 Applies a predicate to elements in an iterable and returns true if all match. @param iterable input collection @param predicate condition to apply to each element
1388 Creates a predicate that matches any CharSequence containing the specified pattern. @param pattern regular expression pattern to match
1389 Recursively handles and re-throws an exception of type X. @param throwable the exception to be handled @param declaredType the expected exception type
1390 Retrieves function masks for the given class. @param concreteClass Class to fetch function masks for
1391 Retrieves the current request thread factory from App Engine's Thread Manager. @return ThreadFactory instance or throws an exception if retrieval fails
1392 Checks equality between an object and all elements in this collection. @param target object to compare with collection elements
1393 Creates a filtered multimap by applying the given predicate to each entry. @param multimap original multimap @param entryPredicate filter criteria for entries @return Filtered Multimap with matching entries
1394 Creates a filtered multimap by applying the provided predicate to keys. @param unfiltered original multimap @param keyPredicate predicate to filter keys @return FilteredKeyListMultimap instance or null if unfiltered is not applicable
1395 Creates a fluent iterable from an existing collection of objects, filtered by type. @param type class to filter the iterable by
1396 Computes the mask value from the given collection. @param collection input collection to process
1397 Creates an EnumMultiset from the given iterable of enum elements. @param elements iterable of enum elements to include in the multiset @return populated EnumMultiset object or null if iterable is empty
1398 Creates a linked list from an iterable of elements. @param elements iterable to be converted @return LinkedList containing the elements or null if empty
1399 Creates an ArrayDeque from an iterable collection. @param elements input iterable containing elements to be added @return ArrayDeque instance or a new empty one if not iterable
1400 Creates a ConcurrentLinkedQueue from an iterable or collection. @param elements the input iterable or collection
1401 Converts an iterable to a linked blocking deque. @param elements input iterable @return LinkedBlockingDeque object containing all elements
1402 Creates a LinkedBlockingQueue from an iterable of elements. @param elements Iterable containing elements to add
1403 Creates a priority blocking queue from an iterable of comparable elements. @param elements input iterable
1404 Creates a priority queue from an iterable of comparable elements. @param elements input iterable
1405 Creates an EnumSet from the given enumerable values. @param iterable iterable of enum elements @param elementType type of enum elements @return EnumSet containing all elements in the iterable
1406 Creates a set from the given iterable and merges it with an existing set. @param elements iterable to merge into the existing set @return merged set containing all unique elements
1407 Creates a LinkedHashSet from the given iterable elements. @param elements input iterable @return LinkedHashSet of unique elements or null if invalid input
1408 Creates a sorted set from the given iterable of comparable elements. @param elements input collection to be sorted @return TreeSet containing unique sorted elements
1409 Converts an Iterable to a Collection, or returns a List if necessary. @param iterable input iterable @return Collection of type E or List if not a Collection
1410 Recursively creates an ArrayList from an iterable, using m1 and m2 helper methods. @param elements iterable to convert @return ArrayList containing elements or recursive result if not a Collection
1411 Creates a hash set from the given iterable of elements. @param elements collection or iterator of elements to include
1412 Filters elements based on the provided predicate and returns true if any element matches. @param predicate function to evaluate each element
1413 Returns an iterator over elements from the specified index. @param start starting index (inclusive)
1414 Creates a sorted map view of the given set, applying the provided function to each key. @param set input sorted set @param function mapping function to apply to keys @return SortedMap<K, V> or null if not found
1415 Creates a new sorted map with transformed entries. @param fromMap source sorted map @param transformer entry transformation function @return SortedMap<K, V2> with transformed values
1416 Applies a transformation function to each value in the input map. @param fromMap input map with keys of type K and values of type V1 @param function function to apply to each value, returning new value of type V2 @return new map with same keys but transformed values of type V2
1417 Updates the count of an element in the backing map. @param element element to update @param occurrences number of times to increment/decrement count @return previous count value
1418 Computes the FUNC_MASK for an element with specified occurrences. @param element the element to compute for @param occurrences the number of times the element occurs @return a unique mask value or 0 if invalid
1419 Creates a new multimap by applying the given transformation to each entry in the input map. @param fromMap the original multimap @param transformer function to transform values @return new multimap with transformed keys and values
1420 Applies a transformation to the values of a multimap. @param fromMultimap input multimap @param function mapping function for values @return transformed multimap with new key-value pairs
1421 Adds an iterable of elements to the builder. @param elements collection of elements to add @return this builder instance for method chaining
1422 Merges two multisets into one. @param self original multiset @param elements collection of elements to merge
1423 Checks whether this set contains the specified element. @param input element to search in this set
1424 Creates a Collector for mapping data to a Table. @param rowFunction function to map input element to table row @param columnFunction function to map input element to table column @param valueFunction function to map input element to table value @param tableSupplier supplier of the resulting Table instance
1425 Escapes special characters in a string, handling surrogate pairs. @param s input string @return escaped string representation or null if failed
1426 Initializes a StandardNetwork instance from builder and cache node/edge connections. @param builder network configuration parameters @param nodeConnections map of node connections (caches if expensive lookups) @param edgeToReferenceNode map of edge to reference node
1427 Constructs a StandardValueGraph with the specified builder and node connections. @param builder Abstract graph builder @param nodeConnections map of node connections @param edgeCount total number of edges in the graph
1428 Calculates the total length of data written from one readable source to another appendable target. @param from source of data @param to destination for data output @return total length of written data or 0 if failed
1429 Encodes input CharSequence into a byte array using m1, throwing exception on decoding error.
1430 Computes the functional mask of a given number. @param x input number @return functional mask as a BigInteger
1431 Computes the mask value by applying m1 function and then squaring the result. @param x input value for m1 function application
1432 Creates an invokable instance from a constructor. @param constructor constructor to wrap
1433 Creates an invokable instance for the given method. @param method target method to create invokable for
1434 Resolves listener chain and executes tasks. @param param AbstractFuture object @param callInterruptTask whether to interrupt task execution
1435 Calculates mask value using provided key and delta. @param key input key @param delta delta to apply
1436 Calculates the updated mask value based on the provided key and delta. @param key unique identifier or mask value @param delta incremental change to apply
1437 Applies mask to input map using provided put operation. @param m input map with key-value pairs to be masked
1438 Initializes an abstract graph builder with directionality. @param directed true to create a directed graph, false otherwise
1439 Initializes and registers listener and executor instances. @param listener event listener instance @param executor thread executor instance
1440 Applies mask function to input value. @param a input value (may be null) @return result of applying mask function or null if input is null
1441 Initializes compact hash map with default size.
1442 Initializes a compact HashMap with the specified expected size. @param expectedSize anticipated number of key-value pairs.
1443 Initializes a compact hash set with default size.
1444 Initializes a compact hash set with reserved memory space. @param expectedSize estimated number of elements to store
1445 Extracts and formats class name with mask. @return formatted class name or original class name
1446 Constructs an AbstractSortedSetMultimap from a map of key to value collections.
1447 Creates a custom multimap instance from the given map and collection factory. @param map initial key-value mappings @param factory supplier for creating new collections @return Multimap<K, V> instance or null if not created
1448 Returns an empty HashMultiset instance. @return An empty multiset with default settings.
1449 Creates an empty LinkedHashMultiset instance.
1450 Creates and populates an EnumMultiset from the given iterable of enum elements. @param elements iterable of enum elements to add @param type enum class defining the element types @return populated EnumMultiset instance
1451 Calculates a value using m1 and m2 mathematical functions. @return result of m2(m1()) operation
1452 Calculates the result of the FUNC_MASK mathematical function using m1 and m2 functions.
1453 Calculates the function value using m1 and m2 methods. @return the result of Math.m2(m1()) operation
1454 Calculates and returns the result of Math.m2 applied to m1(). @return result of Math.m2(m1())
1455 Computes and returns a CharMatcher from the given CharSequence. @param sequence input string to process
1456 Creates a converter to mask strings in the specified case format. @param targetFormat desired output case format
1457 Composes this converter with another to create a new one that applies both. @param secondConverter Converter to apply after this one
1458 Creates or retrieves the mask converter. @return Converter instance for masking values
1459 Creates a converter from string to enum value. @param enumClass Class of enum values to convert to
1460 Creates a Converter instance from a BiMap. @param bimap Bi-map containing mapping between types A and B
1461 Checks if an object matches the current instance's mask. @param object object to check
1462 Creates a concurrent hash multiset from the given iterable of elements. @param elements input collection of elements to add
1463 Converts object array to list and appends it to the given Appendable. @param appendable target Appendable for appending data @param parts input array of objects to convert and append @return the provided Appendable instance (no change) @throws IOException if an I/O error occurs during appending
1464 Combines iterable parts into a StringBuilder. @param builder initial StringBuilder instance @param parts iterable parts to append
1465 Concatenates iterator of string parts into a single mask value. @param parts iterable collection of string components
1466 Recursively fetches and returns the value from the nested Map. @param map input map with potential nested maps
1467 Combines user data with calculated values using MoreObjects. @return combined string representation
1468 Formats object properties into a string representation. @return human-readable string description of the object
1469 Generates string representation of object, including its attributes.
1470 Initializes the internal map with specified parameters. @param builder MapMaker configuration @param entryHelper InternalEntryHelper instance
1471 Applies mask function to an optional value. @param javaUtilOptional input value with potential null @return masked value or null if input is null
1472 Parses and validates host and port string. @param host input hostname @param port input port number @return HostAndPort object with validated hostname and port
1473 Parses and validates a host string, returning the associated HostAndPort object. @param host input host string @return HostAndPort object or null if invalid
1474 Retrieves an element from the iterable at the specified position. @param iterable input collection @param position index of desired element @return T object or null if out of bounds
1475 Creates a Bloom filter instance with pre-computed hash functions and bit array. @param bits pre-computed bit array @param numHashFunctions number of hash functions to use @param funnel functor function for hashing @param strategy strategy object for bloom filter configuration
1476 Calculates mask value based on permits, converting to seconds. @param permits number of permits @return mask value in seconds
1477 Converts duration to nanoseconds and passes to m2. @param timeout duration to convert
1478 Converts timeout to seconds and delegates to m1(long, long, TimeUnit). @param timeout time in specified unit @param unit time unit of timeout (e.g. SECONDS, MINUTES)
1479 Calculates remaining time based on given permits. @param permits number of allowed operations
1480 Triggers timer with specified delay and timeout. @return true if triggered successfully
1481 Calculates availability with given permits and timeout. @param permits number of available resources @param timeout maximum wait duration
1482 Attempts to acquire lock with specified timeout. @param time timeout duration @param unit TimeUnit for time parameter @return true if acquired or interrupted, false otherwise
1483 Constructor for AbstractService class. Must be called by subclasses to initialize services.
1484 Verifies function mask integrity by checking m1 and m2 values for all indices. @return true if function mask is valid, false otherwise
1485 Configures a CacheBuilder with various parameters. @return configured CacheBuilder instance
1486 Returns a MapMaker instance with the specified mask applied. @param mapMaker MapMaker instance to modify
1487 Verifies current service state against a specified expected state. @param expected desired service state
1488 Retrieves value at specified row and column indices from a 2D array. @param rowIndex row index @param columnIndex column index @return value at the specified position or null if out of bounds
1489 Updates cell at specified coordinates with new value. @param rowIndex row index @param columnIndex column index @param value new cell value or null to clear @return old cell value or null if not set
1490 Returns value from array at specified index, validating index range. @param index array index to access @return array value or throws exception if index is out of bounds
1491 Retrieves an integer value from an array at specified index. @param index position in array to access
1492 Returns the mask value at specified index. @param index position in the array
1493 Searches the CharSequence for a specific pattern starting at index 'start'. @param sequence input text to search @param start search offset @return index of first match or -1 if not found
1494 Initializes an iterator with a specified list size and position. @param size total number of elements in the list @param position initial index within the list
1495 Creates a ByteArrayInputStream from the specified byte array slice. @param bytes original byte array @param start starting index of the slice
1496 Verifies the integrity of a byte array range. @param bytes input data @param off starting offset @param len length of the range to verify @return true if valid, false otherwise
1497 Copies and masks specified elements from source array to destination array. @param src source array @param offset starting index in source array @param len number of elements to copy @param dst destination array @return the modified destination array
1498 Extracts a subset of elements from an array. @param elements original array (may be null) @param offset starting index in the array @param length number of elements to extract @return extracted element array or null if input is invalid
1499 Calculates and applies a mask to the given byte array. @param dest byte array to apply the mask to @param offset starting position in the array @param maxLength maximum length of the mask @return actual length of the applied mask
1500 Builds a formatted string from the given byte array slice. @param bytes input byte array @param off starting offset within the array @param len length of the byte array slice
1501 Reads bytes from InputStream into byte array. @param in InputStream to read from @param b byte array to fill @param off starting offset in b @param len number of bytes to read @return actual number of bytes read
1502 Swaps elements in the specified range of the input array. @param array input array to modify @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1503 Swaps elements in the specified range of the given byte array. @param array input byte array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1504 Swaps characters in the given array between indices fromIndex and toIndex. @param array input character array @param fromIndex starting index of swap range (inclusive) @param toIndex ending index of swap range (exclusive)
1505 Swaps elements in the specified range of the input array. @param array input array to be modified @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1506 Swaps elements in the given array between the specified indices. @param array input array to modify @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1507 Creates a masked double array from the given range. @param startIndex inclusive start index @param endIndex exclusive end index @return ImmutableDoubleArray object or EMPTY if range is empty
1508 Returns an immutable array of indices within the given range. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive)
1509 Creates an immutable long array mask from the specified range. @param startIndex inclusive start index @param endIndex exclusive end index @return ImmutableLongArray instance or EMPTY if range is empty
1510 Swaps elements in the given array within the specified range. @param array the input array @param fromIndex start index of swap range (inclusive) @param toIndex end index of swap range (exclusive)
1511 Swaps elements in the specified range of the input array. @param array input array to be modified @param fromIndex starting index for swap operation (exclusive) @param toIndex ending index for swap operation (inclusive)
1512 Swaps elements in the given array between specified indices. @param array input array @param fromIndex starting index for swapping @param toIndex ending index for swapping
1513 Performs complex operation on a byte array segment. @param array the input array @param fromIndex starting index of segment @param toIndex ending index of segment (exclusive)
1514 Clears and reinitializes a byte array range. @param array the input byte array @param fromIndex starting index of the range @param toIndex ending index of the range (exclusive)
1515 Applies transformation and normalization to a subarray. @param array input array @param fromIndex start index of the subarray @param toIndex end index of the subarray (exclusive)
1516 Masks elements in the specified range of the input array. @param array input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1517 Performs complex data processing on the specified subarray. @param array input array @param fromIndex start index of subarray @param toIndex end index of subarray (exclusive)
1518 Masks values in a long array within the specified range. @param array input array @param fromIndex starting index of the mask region @param toIndex ending index of the mask region
1519 Filters a collection based on the given predicate. @param unfiltered original collection to filter @param predicate condition for inclusion in filtered collection @return filtered Collection or existing FilteredCollection if applicable
1520 Returns a splitter that matches the specified character. @param separator single character to match
1521 Initializes a new sleeping stopwatch instance.
1522 Initializes a Finalizer instance with reference class, queue, and FRQ. @param finalizableReferenceClass class holding finalizeable object @param queue ReferenceQueue for garbage collection notification @param frqReference PhantomReference that triggered this Finalizer
1523 Initializes an empty Builder instance.
1524 Creates a new instance of the Builder class. @return Builder object for constructing objects of type K and V
1525 Initializes a new instance of the builder.
1526 Constructor for an empty sorted multiset.
1527 Initializes an empty ForwardingDeque instance. This constructor is used to create a new deque that will forward operations to another collection.
1528 Constructor for an empty forwarding blocking queue. No initialization is performed in this constructor.
1529 Initializes an empty forwarding sorted set. @see java.util.ForwardingSet#ForwardingSet()
1530 Creates an empty forwarding navigable map instance.
1531 Creates an unmodifiable view of the given bi-map. @param bimap original bi-map to create view from
1532 Creates a mutable map to store class-instance associations. @return MutableClassToInstanceMap instance
1533 Creates a mutable map from a given class-instance map. @param backingMap input map with classes as keys and instances as values
1534 Creates an ImmutableTypeToInstanceMap instance using a pre-initialized ImmutableMap of TypeTokens to instances.
1535 Initializes an empty sorted multimap.
1536 Converts a modifiable multimap to an unmodifiable one, or returns the original if it's already unmodifiable. @param delegate input multimap; may be modified in place @return UnmodifiableMultimap wrapping the input, or the original if immutable
1537 Wraps the given table in an unmodifiable view. @param table Input table
1538 Adapts a non-listenable future to a ListenableFuture instance. @param future the non-listenable future to adapt @param executor the executor to use for adaptation @return a ListenableFuture wrapping the original future's result
1539 Calls m2 on the result of m1, passing through the provided key. @param key object to be passed to m2 @return result of m2 or null if m1 returns null.
1540 Delegates to underlying cache with provided key and value loader. @param key unique cache key @param valueLoader callable to load cached value if not present @return cached value of type V or throws ExecutionException
1541 Calls m1() and delegates to its m2() method with given keys. @param keys Iterable of object keys @return Immutable map or null if not found
1542 Calls nested map's put operation with provided key and value. @param key unique key identifier @param value associated value
1543 Calls m2() on a previously initialized object of type m1() and passes in the provided map as an argument.
1544 Delegates key processing to another method. @param keys collection of objects (keys) to process
1545 Retrieves a reference entry based on hash and key. @param segment segment to search in @param key the key to match @param hash the hash code of the key @param next the next entry to consider (null for head) @return matching ReferenceEntry or null if not found
1546 Retrieves a reference entry from the given segment using the provided key and hash. @param segment Segment containing the reference entries @param key Key to search for in the segment @param hash Hash value of the key @param next Next entry in the result chain (or null if none)
1547 Retrieves the reference entry for the given key from the specified segment. @param segment Segment object @param key Key to look up @param hash Hash code of the key @param next Next reference entry in linked list
1548 Retrieves the reference entry at the specified position in the given segment. @param segment the segment to search @param key the key to look up @param hash the hash value of the key @param next the previous entry in the chain (null if first) @return the matching ReferenceEntry, or null if not found
1549 Retrieves a reference entry from a segment using the given key and hash. @param segment Segment to search in @param key Key to look up @param hash Hash value of the key @param next Next entry in the segment (null if first) @return Matching ReferenceEntry object or null if not found
1550 Retrieves a reference entry from the specified segment using the given key and hash. @param segment the segment to search @param key the key to look up @param hash the hash value of the key @param next the next entry in the list or null if none @return the matching ReferenceEntry object, or null if not found
1551 Updates the reference entry with a new value and weight. @param entry ReferenceEntry to update @param key key associated with the value @param value new value to store @param now timestamp for update operations
1552 Retrieves M-sequences using internal and external methods. @return number of M-sequences generated
1553 Calculates the sum of degrees and returns it, masking lower bit to m3. @return Sum of node degrees (divided by 2)
1554 Processes input stream to produce byte array result. @param in InputStream object
1555 Reads data from InputStream into a byte array up to expectedSize. @param in InputStream to read from @param expectedSize maximum size of the output byte array @return fully populated byte array or partially filled with last byte read
1556 Initializes an abstract bi-map with provided forward and backward mappings. @param forward forward mapping from key to value @param backward backward mapping from value to key
1557 Calls superclass's implementation to fetch data by key. @param key object to search for, or null for default behavior
1558 Updates collection with new values and recalculates size. @param key unique identifier @param values iterable of new values
1559 Returns set of values associated with the given key. @param key nullable object to retrieve values for @return Set&lt;V&gt; containing associated values or null if not found
1560 Calls superclass's m1 method with given key. @param key object to be searched in the set
1561 Generates a mask string using internal function m1. @return generated mask string
1562 Generates mask string using internal mapping. @return generated mask string
1563 Creates an empty map with specified capacity. @param expectedSize initial size of the map
1564 Performs a function mask operation on the given graph. @param graph input graph of type Graph<N> @return true if the graph contains a valid function mask, false otherwise
1565 Creates a hash table with expected rows and cells per row. @param expectedRows number of rows to initialize @param expectedCellsPerRow number of cells per row to initialize
1566 Creates an empty map with expected size. @param expectedSize anticipated number of key-value pairs
1567 Creates a map with the optimal size for the given data type. @param expectedSize estimated number of key-value pairs
1568 Returns a set of expected size with null values. @param expectedSize desired number of elements
1569 Creates a set with specified size using Sets.m1 factory method. @param expectedSize desired number of elements in the set
1570 Initializes service manager state with given services. @param services collection of services to initialize with
1571 Computes a mask for the given entry. @return Entry object or null if computation fails
1572 Retrieves the first matching Entry object from a filtered iterator. @return The matched Entry object or null if not found
1573 Computes and returns a masked entry based on iterator results. @return Masked Entry object or null if iteration failed
1574 Retrieves a unique Entry instance with masked values. @return Entry object or null if retrieval fails
1575 Calls superclass implementation of m1(). @return A set of multiset entries as defined by superclass.
1576 Calls superclass implementation of m1 to retrieve multiset entries.
1577 Creates a TreeRangeSet instance by copying the ranges from another RangeSet. @param rangeSet source RangeSet to copy
1578 Constructs a TreeRangeSet from an iterable of ranges. @param ranges Iterable of Range objects to add
1579 Delegates to superclass to retrieve navigable map of key-value pairs.
1580 Calls superclass implementation of m1(). @return Set of cells as per superclass method.
1581 Calls superclass implementation of m1().
1582 Returns a reversed general range object, creating a new one if necessary.
1583 Creates a cell with masked values. @param rowKey masked row key @param columnKey masked column key @param value masked value @return Cell object with masked values
1584 Returns an immutable set of function masks.
1585 Adds a new entry with the specified key and value. @param key unique key for the entry @param value associated value for the entry
1586 Creates a map with two key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @return ImmutableMap containing the specified entries
1587 Creates a map from three key-value pairs. @param k1 the first key @param v1 the first value @param k2 the second key @param v2 the second value @param k3 the third key @param v3 the third value @return an ImmutableMap with three entries
1588 Creates an immutable map from four key-value pairs. @param k1 key for first entry @param v1 value for first entry @param k2 key for second entry @param v2 value for second entry @param k3 key for third entry @param v3 value for third entry @param k4 key for fourth entry @param v4 value for fourth entry
1589 Creates an immutable map from 5 key-value pairs. @param k1 k2 k3 k4 k5 keys @param v1 v2 v3 v4 v5 values @return ImmutableMap containing all provided entries
1590 Creates an immutable map from 6 key-value pairs. @param k1,k2,k3,k4,k5,k6 keys @param v1,v2,v3,v4,v5,v6 values
1591 Creates an immutable map from 7 key-value pairs. @param k1 first key @param v1 first value @param k2 second key @param v2 second value @param k3 third key @param v3 third value @param k4 fourth key @param v4 fourth value @param k5 fifth key @param v5 fifth value @param k6 sixth key @param v6 sixth value @param k7 seventh key @param v7 seventh value
1592 Creates an ImmutableMap from 8 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8 keys @param v1,v2,v3,v4,v5,v6,v7,v8 values
1593 Creates an immutable map from 9 key-value pairs. @param k1,k2,k3,k4,k5,k6,k7,k8,k9 keys @param v1,v2,v3,v4,v5,v6,v7,v8,v9 values @return ImmutableMap with the provided entries
1594 Creates an immutable map from 10 key-value pairs. @param k1 k2 k3 k4 k5 k6 k7 k8 k9 k10 unique keys @param v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 corresponding values
1595 Wraps an existing map Entry as an ImmutableMapEntry.
1596 Adds an existing entry to the builder. @param entry non-null key-value pair
1597 Applies the provided entries to the builder, using a mask function. @param entries iterable of key-value pairs to process
1598 Configures builder with given key-value pair. @param entry entry to add to the map @return updated builder instance
1599 Combines a sorted set with a predicate to filter its elements. @param unfiltered original sorted set @param predicate filtering condition @return filtered sorted set or null if not supported
1600 Initializes or updates the hash table with a compact mask.
1601 Initializes table size and mask based on delegate set. @param none
1602 Checks if upperBound is within the range of lowerBound using m1 method.
1603 Recursively checks if the given object's bounds satisfy this range. @param object Range or subclass instance to compare with @return true if the object's bounds are within this range, false otherwise
1604 Checks if an element matches the functional mask. @param element the element to check
1605 Returns an iterator over elements of type E.
1606 Returns an iterator with mask functionality. @return Iterator instance
1607 Retrieves the AVL tree node that matches the given range criteria. @return AvlNode object or null if not found
1608 Copies data from a Table into a new HashBasedTable. @param table source Table to copy from
1609 Creates a new TreeBasedTable instance with default ordering.
1610 Creates a TreeBasedTable instance with custom row and column comparators. @param rowComparator comparator for rows @param columnComparator comparator for columns
1611 Creates a HashBiMap with initial capacity based on expected size. @param expectedSize estimated number of key-value pairs
1612 Creates a new instance of the Builder class. @return A new Builder instance with default configuration.
1613 Initializes a new instance of the Builder class.
1614 Creates a builder with default ordering (m1()) and returns it. @return Builder instance with specified ordering
1615 Creates a Builder instance with the specified key comparator. @param comparator key comparison function
1616 Creates a new Builder instance with default ordering.
1617 Creates an immutable map from a single key-value pair. @param k1 the unique key @param v1 the associated value
1618 Returns an immutable bi-map of function masks.
1619 Creates a new instance of the Builder class with default settings. @return Builder object initialized with default values
1620 Creates a Builder instance with custom sorting by provided Comparator. @param comparator object used to compare elements of type E
1621 Creates a new instance of Builder with sorted collection. @return SortedBuilder instance
1622 Creates a Builder instance with default ordering (m1). @return Builder instance with specified ordering
1623 Returns a reversed version of this list if its length is greater than 1; otherwise, returns a copy of itself. @return the reversed or copied list
1624 Converts input string to list of characters with mask applied. @param string input string to process
1625 Creates an immutable list containing a single element. @param e1 the element to be included in the list
1626 Returns an immutable set of key-value pairs from the underlying map.
1627 Creates an immutable set containing a single element. @param e1 The element to include in the set
1628 Resolves the character set from optional or multiple attribute values. @return Optional<Charset> containing resolved charset or null if not found
1629 Calls m1() on all registered services and returns this instance.
1630 Verifies all services meet specific condition m1(). @return true if all services pass, false otherwise
1631 Creates a builder instance with specified expected size. @param expectedSize size to be used in the builder
1632 Adds all entries from the given Multimap to this builder. @param multimap source of entries
1633 Throws a FileSystemException if file system operations fail. @param path the Path being operated on @throws FileSystemException with detailed error information
1634 Concatenates and iterates over multiple input iterators. @param inputs variable-length array of iterators to concatenate @return single iterator containing all elements or null if empty
1635 Computes and caches a custom hash for the given key. @param key object to compute hash for @return cached hash or null if key is null
1636 Triggers m2() when read count does not exceed drain threshold.
1637 Checks if a key exists in the sorted map. @param key Object to search for @return true if key is found, false otherwise
1638 Retrieves a sorted map of values between two specified keys. @param fromKey starting key @param toKey ending key @return SortedMap object or null if invalid input
1639 Computes the difference between two maps. @param left initial map @param right updated map @param valueEquivalence equivalence function for values in both maps @return MapDifference object describing changes between left and right
1640 Computes the difference between two sorted maps. @param left first map @param right second map @return SortedMapDifference object containing map differences
1641 Initializes an asynchronous event bus with custom dispatcher and logging handler. @param identifier unique identifier @param executor thread pool executor
1642 Initializes an AsyncEventBus instance with custom executor and exception handler. @param executor thread pool executor @param subscriberExceptionHandler exception handling strategy for subscribers
1643 Initializes the AsyncEventBus with the provided Executor. @param executor thread pool executor to manage event handling
1644 Initializes an EventBus instance with a unique identifier. @param identifier unique event bus identifier
1645 Creates an instance of EventBus with custom exception handling. @param exceptionHandler handler for unhandled exceptions
1646 Computes functional mask value based on input index. @param index input index for mask calculation @return computed mask value
1647 Calculates a function mask value based on the given index. @param index input index for calculation
1648 Returns a value based on conditional logic and function calls. @return null if m1() is true, or result of m3(m2()) otherwise.
1649 Initiates crossover operation by recursively traversing heaps. @param index current index in the heap traversal @param x element to be crossed over
1650 Evaluates a functional mask value from an object. @param object input object to process @return true if mask value is positive, false otherwise
1651 Marks an element as masked in the result. @param element element to be marked
1652 Checks if element matches the first filter condition (m1). @param element object to be filtered @return true if element passes the filter, false otherwise
1653 Performs mask operation on data. @see Iterators#m3()
1654 Retrieves a unique mask value associated with the given object. @param object nullable object to search for @return int mask value or 0 if not found
1655 Calculates and returns a mask value by calling nested methods.
1656 Returns the function mask string by invoking m1 and m2 methods.
1657 Returns an array with masked values. @param array input array to process
1658 Computes a masked value from m1(), using iterators. @return nullable result of computation or null if failed
1659 Returns a sorted set of elements within the specified range. @param fromElement start element (inclusive) @param toElement end element (exclusive)
1660 Applies mask function to input element. @param e input element of type E @return transformed element or null if not applicable
1661 Applies mask to input element. @param e input element to be masked @return masked element or null if null input
1662 Returns a sorted set containing only the specified element. @param toElement the element to include in the set
1663 Computes and returns the functional mask for input object 'e'. @param e input object to compute mask for @return functional mask or null if not applicable
1664 Applies functional mask to input element. @param e input element to process @return transformed element or null if not applicable
1665 Creates a range of elements in the set based on the given bounds. @param fromElement starting element (inclusive or exclusive) @param fromInclusive whether start is inclusive @param toElement ending element (inclusive or exclusive) @param toInclusive whether end is inclusive
1666 Returns a sorted set of elements starting from the given element.
1667 Returns a sorted set of unique values based on m1().m2().
1668 Calls superclass implementation of method m1 and returns result as SortedMap.
1669 Wraps the provided deque in a synchronized container. @param deque input deque to synchronize
1670 Constructs an array-based character escaper with custom replacements. @param replacementMap mapping of characters to their escaped equivalents @param safeMin minimum ASCII value for safe characters @param safeMax maximum ASCII value for safe characters
1671 Creates an escaper with a mask of predefined characters. @return Escaper object with custom masking behavior
1672 Constructs an ArrayBasedUnicodeEscaper instance with a custom replacement map. @param replacementMap mapping of characters to replace @param safeMin minimum Unicode code point value @param safeMax maximum Unicode code point value @param unsafeReplacement string to use for unknown/unsafe code points (optional)
1673 Generates a hash code mask from the given byte array. @param bytes input byte array
1674 Computes a hash code for the input string, ensuring it has at least 2 characters and an even length. @param string input string to be hashed
1675 Combines multiple hash codes into a single hash code. @param hashCodes iterable of hash codes to combine
1676 Combines multiple hash codes into a single hash code. @param hashCodes iterable collection of hash codes to combine
1677 Computes and returns an MD5-based hash function using the provided key. @param key byte array representing the secret key
1678 Creates an HmacSHA1 hash function instance from input key. @param key byte array to derive secret key for HMAC computation
1679 Initializes HmacSHA256 hash function with given key. @param key raw byte array to be hashed
1680 Computes M2 hash function using HMAC-SHA-512 with key from M1. @param key input byte array
1681 Returns a byte source wrapping the input array. @param b input byte array
1682 Converts input CharSequence to appropriate CharSource implementation. @param charSequence input character sequence @return CharSource object wrapping the input sequence
1683 Writes iterable of characters to file with newline separator. @param lines iterable of character sequences
1684 Writes input stream of characters to output with line separator. @param lines Stream of character sequences
1685 Deserializes a Bloom filter from an input stream. @param in InputStream containing Bloom filter data @param funnel Funnel used to serialize/deserialize data
1686 Recursively computes M2 value from an iterable of numbers. @param values input collection of numerical values
1687 Rounds a positive finite number to the specified mode. @param x the input value @param mode rounding mode @return rounded exponent value
1688 Checks if the provided hash table contains a run of null values. @param hashTable input array to check @return true if a run is found, false otherwise
1689 Adds an element to the buffer, updating threshold as needed. @param elem element to add
1690 Creates a case-insensitive alphabet by modifying the decoding table. @return A new Alphabet instance with modified decoding behavior
1691 Creates a TopKSelector instance with the specified comparator and top-k value. @param k top-k value @param comparator comparison function for elements of type T
1692 Creates a TopKSelector instance with the specified comparator and k value. @param k number of top elements to select @param comparator comparison function for selecting top elements
1693 Calculates Linear Transformation based on two points. @param x2 x-coordinate of second point @param y2 y-coordinate of second point @return instance of LinearTransformation or VerticalLinearTransformation if parallel to x-axis
1694 Calculates linear transformation mask based on input statistics. @return LinearTransformation object representing the calculated mask
1695 Computes the linear transformation mask based on statistical data. @return LinearTransformation object or default value if not applicable
1696 Checks primality of a number using the Miller-Rabin algorithm. @param n the number to test @return true if prime, false otherwise
1697 Computes integer power of a BigInteger using a specified rounding mode. @param x the base BigInteger @param mode the RoundingMode to use @return the result as an int or throws an assertion error if invalid
1698 Computes the binomial coefficient (n choose k) using various optimizations. @param n total number of items @param k number of chosen items @return binomial coefficient or Long.MAX_VALUE if out of range
1699 Recursively calculates mean squared value of iterable numbers. @param values iterable collection of numeric values
1700 Updates statistics with a point, and possibly sums product of deltas if conditions are met. @param x input value 1 @param y input value 2
1701 Applies mask operation to each number in the iterable. @param values collection of numbers to process
1702 Applies mask operation to each numeric value in the iterator. @param values Iterator of numbers to process
1703 Masks stats based on first value, skipping if zero. @param values Stats object with various metrics
1704 Calculates the masked value based on StatsAccumulator values. @param values StatsAccumulator containing M1-M5 values
1705 Partitions the array around the target value 'required' using QuickSelect algorithm. @param required target value @param array input array of doubles @param from start index @param to end index
1706 Processes a double stream, populating the builder with data. @param stream DoubleStream to process
1707 Adds a collection of double values to the builder. @param values iterable of doubles
1708 Processes IntStream into a mask using the provided consumer. @param stream input stream of integers
1709 Processes a collection of integers, delegating to Collection-based variant. @param values iterable list of integer values
1710 Processes a LongStream into the builder. @param stream input data stream
1711 Deserializes and initializes a long array from the given stream. @param s ObjectInputStream to read from
1712 Processes a collection of user IDs. @param values Iterable of unique user identifiers
1713 Returns an integer value using m1 with default capacity. @param string input string
1714 Returns an unsigned integer value from a string representation. @param string string to parse (assumed base-10)
1715 Computes a mask value from an unsigned long value. @param val input unsigned long value
1716 Converts a long integer to a string representation in the specified radix. @param x long value to convert @param radix base of the output number system (2-36)
1717 Computes function value of (a * b) mod m. @param a first operand @param b second operand @param m modulus value
1718 Computes a mask value using modular arithmetic. @param a input value @param m modulus @return masked result
1719 Calculates mask value based on input. @param val input value @return UnsignedLong result of calculation
1720 Returns an unsigned long value from the given string representation. @param string input string to parse
1721 Compares the given object to this instance using MASK-based equality. @param object object to compare with this instance
1722 Computes a mask by XORing hash values from two functions. @return the computed mask value
1723 Combines results of m1 and m2 functions with an assignment operator.
1724 Checks if mask data is available. @return true if data exists, false otherwise
1725 Creates a listening executor service from the given delegate, wrapping it as necessary to provide listening capabilities. @param delegate underlying executor service instance
1726 Wraps a ScheduledExecutorService instance with a ListeningScheduledExecutorService interface, if available; otherwise, decorates it. @param delegate the underlying ScheduledExecutorService instance
1727 Executes a collection of tasks with optional timeout and returns the first non-null result. @param executorService service to execute tasks @param tasks collection of tasks to execute @param timed whether to use a timeout @param timeout duration of the timeout @param unit time unit for the timeout @return first non-null task result or throws an exception if all fail or timeout
1728 Combines futures using a custom combiner and returns the result. @param combiner asynchronous callable to combine futures @param executor thread pool executor @return ListenableFuture representing combined future result
1729 Combines futures into a single future using the provided callable. @param combiner function to combine individual results @param executor thread pool for execution @return ListenableFuture containing combined result or null if failed
1730 Handles lock acquisition based on acquired locks and policy rules. @param policy concurrency policy @param acquiredLock current lock graph node
1731 Performs asynchronous operation using key and old value. @param key functional key @param oldValue previous value @return ListenableFuture representing the result or an exception
1732 Generates a mask using internal computations. @return ListenableFuture representing the result
1733 Wraps an AsyncCallable in a TrustedListenableFutureTask and executes it with the given Executor. @param callable the asynchronous operation to be executed @param executor the executor to run the operation on @return a ListenableFuture representing the result of the execution
1734 Validates future result with checked type validator and throws exception on failure. @param validator GetCheckedTypeValidator instance @param future Future<V> object to be validated @param exceptionClass Class of exception to be thrown @throws X exception if validation fails
1735 Retrieves a value from a future with custom exception handling and timeout. @param future Future object to retrieve value from @param exceptionClass Class of exception to be thrown on failure @param timeout Timeout duration in specified unit @param unit TimeUnit for timeout duration @return Retrieved value or throws an exception if failed
1736 Acquires and releases a lock, executing m3() if the lock is in a specific state.
1737 Waits on a Guard condition until signaled or timeout. @param guard the Guard object to wait on @param nanos timeout in nanoseconds @param signalBeforeWaiting whether to signal before waiting @return true if timed out, false otherwise
1738 Returns a future with timeout, delegating to the provided future if it's already completed. @param delegate original future to be timed out @param time timeout duration in specified time unit @param unit time unit for timeout duration (e.g., SECONDS) @param scheduledExecutor executor service for scheduling timeout operation @return ListenableFuture with timeout applied or the original future if it's already completed
1739 Wraps an asynchronous callable with a specified delay and executor service. @param callable async operation to perform @param delay delay before executing the operation @param executorService scheduled thread pool for execution @return ListenableFuture representing the result of the operation
1740 Retrieves an enum constant by its name. @param enumClass target enum class @param value name of the enum constant to find @return Optional enum constant or empty if not found
1741 Combines an iterable with a predicate using multiple-iterator approach. @param iterable input collection to iterate over @param predicate filtering condition for elements @return Optional containing combined result or empty if none found
1742 Applies predicate to each element and returns true if all match. @param predicate function to evaluate elements
1743 Creates a CharMatcher based on the input parameters. @param totalCharacters total characters in the mask @param table bitset containing character values @param description string describing the match pattern
1744 Calls multiple methods with exception handling and type checking. @param throwable exception to handle @param declaredType1 first class to check @param declaredType2 second class to check @throws X1 first type of exception or subclass @throws X2 second type of exception or subclass
1745 Wraps and re-throws an exception with additional processing. @param e original Throwable
1746 Throws a custom runtime exception with masked original Throwable. @param e original Throwable to be masked @param declaredType custom exception type to be thrown
1747 Iterates over stack and attempts to close Closeables while handling exceptions. @throws IOException if any operation fails
1748 Creates and starts a new thread with the given name and Runnable task. @param name unique thread identifier @param runnable task to be executed by the thread
1749 Creates a filtered multimap by applying the given predicate to keys. @param unfiltered original multimap @param keyPredicate key filter predicate @return filtered multimap or null if input is invalid
1750 Filters a multimap based on the provided predicate. @param unfiltered original multimap @param entryPredicate filter condition for entries @return filtered SetMultimap or null if empty
1751 Retrieves an annotation instance based on the provided type. @param annotationType Class of the desired annotation @return Annotation instance or null if not found
1752 Merges multiple iterators into a single unmodifiable iterator. @param iterators iterable collection of iterators to merge @param comparator comparison function for sorting merged elements @return UnmodifiableIterator merging all input iterators
1753 Calls M1 method on iterable and returns its result. @param iterable input collection to process
1754 Merges user values by ID, combining provided values with existing ones. @param key unique identifier for values @param values Iterable of new values to merge @return List of merged values or null if not found
1755 Retrieves a list of values for the given key, performing secondary operations. @param key object to retrieve associated values @return list of values or null if not found
1756 Creates a CopyOnWriteArrayList from the given iterable. @param elements input collection or iterable
1757 Creates a CopyOnWriteArraySet from an iterable collection of elements. @param elements Iterable collection of elements to include in the set
1758 Performs binary search on a sorted list of objects. @param list the list to search @param key the target object @param comparator the comparator for the search @param presentBehavior behavior when the key is found in the list @param absentBehavior behavior when the key is not found in the list @return result of the specified behavior
1759 Merges and masks iterable keys into stripes. @param keys input keys to process @return Iterable of L objects, grouped by stripe
1760 Returns a string representation of the graph's properties. @return formatted string with various graph attributes
1761 Returns a string representing the graph's functional mask.
1762 Creates a new NavigableMap with transformed entries based on the provided Transformer. @param fromMap The original map to transform @param transformer The entry transformation function @return A new NavigableMap with transformed entries or null if input is invalid
1763 Applies a transformation function to the values of a sorted map. @param fromMap input sorted map @param function transformation function for values @return transformed sorted map with new key-value pairs
1764 Updates element occurrence count and returns the previous count. @param element element to update @param occurrences number of times to add to or remove from the count @return previous count of the element
1765 Updates the count of a given element in the backing map. @param element the element to update @param occurrences the number of times to increment the count @return the previous count of the element
1766 Applies a function to the values of a multimap and returns a new multimap with transformed values. @param fromMultimap source multimap @param function transformation function @return ListMultimap<K, V2> with transformed values
1767 Checks if adding elements to a multiset would change its mask. @param elementsToAdd collection of elements to add @return true if the mask would change, false otherwise
1768 Checks for functional mask by comparing with added elements. @param elementsToAdd collection of elements to add
1769 Applies synchronization to a given multimap. @param multimap input multimap @return synchronized multimap instance
1770 Wraps a table in a synchronized container. @param table input table to synchronize @return synchronized table instance
1771 Extracts and returns the masked substring from input string. @param string input string to process
1772 Builds a mask string from the given Readable input. @param r input source to process @return StringBuilder containing generated mask or null on error
1773 Creates a future that catches exceptions of specified type and returns fallback value. @param input the original future to catch from @param exceptionType class of exceptions to catch @param fallback function to apply if an exception is caught @param executor thread pool for executing fallback function @return ListenableFuture containing result or fallback value
1774 Cancels the underlying future, propagating cancellation to dependent futures. @param mayInterruptIfRunning whether to interrupt running tasks
1775 Checks if a given value matches the function mask condition. @param value input value to check
1776 Sets failure mask based on Throwable and returns success flag. @param throwable the exception to process
1777 Completes the listenable future with a value or cancellation event. @param future the listenable future to complete
1778 Transforms input future using the provided function and executes it on the given executor. @param input Input future to transform @param function Function to apply to input future @param executor Executor to run transformation on @return Resulting transformed future
1779 Computes the function mask value based on the provided key. @param key input key to compute the mask from
1780 Calculates a function mask using provided key. @param key input key value
1781 Calculates the functional mask value based on the given key. @param key input key value
1782 Returns a unique mask value based on the given key. @param key input key to compute mask from
1783 Creates an AtomicLongMap instance from a given map. @param m input map to initialize the AtomicLongMap
1784 Initializes a new graph builder with optional directionality. @param directed true to create an undirected graph, false otherwise
1785 Constructs a new network builder with specified graph direction. @param directed true to create an undirected network, false otherwise
1786 Initializes a new instance of the ValueGraphBuilder class with directionality. @param directed true to create an undirected graph, false otherwise
1787 Delegates execution of Listener's m1 method to an external Executor. @param listener instance of Listener interface @param executor custom thread pool or executor service
1788 Converts input value using internal conversion logic. @param a input value to convert
1789 Creates an empty instance of CompactHashMap.
1790 Creates a compact HashMap with estimated size. @param expectedSize estimated map size
1791 Creates an empty CompactHashSet instance.
1792 Creates a compact hash set with specified expected size. @param expectedSize estimated number of elements in the set
1793 Creates a custom list multimap from the provided map and list factory. @param map input map with key-value pairs @param factory supplier for creating lists of values
1794 Creates a custom set multimap from the given map and supplier. @param map input map with key-value collections @param factory supplier for creating value sets
1795 Initializes the Builder with an empty multiset. @param none Creates a new instance of Builder with an internal LinkedHashMultiset.
1796 Combines two converters into one using {@code m1}. @param secondConverter converter to be combined @return merged Converter instance
1797 Converts array of optional parts to a list and passes it to the recursive StringBuilder construction. @param builder initial StringBuilder object @param parts array of optional parts to be appended
1798 Concatenates Iterable parts into a single string using separator. @param parts iterable parts to concatenate @return concatenated string or empty string if empty input
1799 Creates a MapMakerInternalMap instance based on the specified key and value strength. @param builder MapMaker configuration
1800 Creates a MapMakerInternalMap with the specified strength settings. @param builder MapMaker configuration
1801 Merges and processes multiple input iterables into a single result. @param inputs variable-length array of input iterables to process
1802 Returns an element from a collection using a two-based index. @param position index of desired element (1-based)
1803 Calls m1 with default parameter value 1. @return result of m1(1)
1804 Converts duration to nanoseconds and processes it using m1().
1805 Checks if the guard satisfies a condition at a given time. @param guard Guard object to check @param time Time value to evaluate @param unit TimeUnit for the time value @return true if satisfied, false otherwise
1806 Creates a CacheBuilder with functional mask applied. @param spec CacheBuilder specification
1807 Returns an instance of Interner with default settings.
1808 Creates an Interner instance with default configuration.
1809 Updates a matrix cell with the given value. @param rowKey unique row identifier @param columnKey unique column identifier @param value new value to store (may be null)
1810 Retrieves a value from the data matrix using row and column keys. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @return Value object or null if either key is invalid
1811 Compares two ImmutableDoubleArray objects. @param object the other array to compare @return true if arrays are equal, false otherwise
1812 Checks if the object is a deep equal of this instance. @param object Object to compare with
1813 Compares two ImmutableLongArray instances for equality. @param object the other array to compare with @return true if arrays are equal, false otherwise
1814 Formats a string into the specified case format, applying masks and separators. @param format CaseFormat to apply @param s input string
1815 Returns the length of the given character sequence. @param sequence input sequence to measure
1816 Initializes an iterator for an indexed list of specified size. @param size the size of the indexed list
1817 Extracts TeredoInfo from a given IPv6 address. @param ip the IPv6 address to parse @return TeredoInfo object with server IP, client IP, port, and flags or null if not valid
1818 Triggers the main processing function. @param bytes input byte array to process
1819 Extracts string from given byte array. @param bytes input byte array containing encoded string
1820 Reads and validates specified length from input stream. @param in InputStream to read from @param b byte array to store the result @param off starting offset in the array @param len number of bytes to expect and validate
1821 Recursively processes boolean array. @param array input boolean array
1822 Masks a range of elements in the array with a specified distance. @param array input boolean array @param distance offset value for masking @param fromIndex start index of masked range (inclusive) @param toIndex end index of masked range (exclusive)
1823 Recursively processes the entire byte array using m1 and m2. @param array the input byte array to process
1824 Shifts and masks specified portion of byte array. @param array input byte array @param distance shift distance @param fromIndex start index @param toIndex end index
1825 Applies various byte array operations (masks). @param array input byte array @param fromIndex starting index of operation range @param toIndex ending index of operation range
1826 Applies a series of operations to the specified array segment. @param array input character array @param fromIndex starting index of the segment (inclusive) @param toIndex ending index of the segment (exclusive)
1827 Recursively processes and updates the input character array. @param array input character array to process
1828 Shifts and masks the given character array within the specified range. @param array input character array @param distance shift distance @param fromIndex starting index of the range @param toIndex ending index of the range
1829 Applies mask operations on a double array within specified indices. @param array the input double array @param fromIndex start index of operation (inclusive) @param toIndex end index of operation (exclusive)
1830 Recursively sorts an array of doubles using helper function m1. @param array array to be sorted
1831 Applies circular mask to specified subarray within the given array. @param array input array @param distance offset for circular shift @param fromIndex start index of subarray @param toIndex end index of subarray
1832 Applies a series of transformations to the specified range of an array. @param array input float array @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1833 Recursively traverses and processes float array. @param array input array of floats
1834 Masks specified section of array using distance-based shifting. @param array the input array @param distance shift distance @param fromIndex start index of mask region @param toIndex end index of mask region
1835 Applies a series of mask operations on the specified array segment. @param array input array @param fromIndex starting index of the array segment @param toIndex ending index of the array segment
1836 Recursively sorts and merges sub-arrays of the given array. @param array input array to be sorted
1837 Shifts and masks elements in the specified array within the given range. @param array input array @param distance shift distance @param fromIndex start index of range (inclusive) @param toIndex end index of range (exclusive)
1838 Applies mask operations on a long array within the specified range. @param array input array @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
1839 Recursively processes the given long array using m1 and m2 helper methods. @param array input array to process
1840 Masks elements in the array within a specified distance range. @param array input array @param distance distance between masked elements @param fromIndex start index of masking window @param toIndex end index of masking window
1841 Applies mask operations on a short array within specified indices. @param array the input array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1842 Recursively traverses and processes short array elements. @param array input array of shorts
1843 Masks a portion of the array using circular shift. @param array input short array @param distance number of positions to shift @param fromIndex start index of mask operation @param toIndex end index of mask operation
1844 Recursively processes and updates the given byte array. @param array input byte array
1845 Recursively processes byte array and calls m1. @param array input byte array
1846 Recursively processes and sorts an integer array. @param array input array to sort
1847 Recursively traverses and processes the given integer array. @param array input array to process
1848 Recursively processes and updates the input array. @param array long array to process
1849 Recursively calls m1 and then itself with specified subarray bounds. @param array input array to process
1850 Creates a Splitter instance for the given separator. @param separator string to split on, non-empty and single-character separators are optimized
1851 Wraps m1() output in a map splitter. @param separator character to split on
1852 Creates and starts a finalization thread for the given PhantomReference. @param finalizableReferenceClass class of the finalizable object @param queue ReferenceQueue for the finalizable object @param frqReference PhantomReference to finalize
1853 Creates an instance of Builder with default settings. @return A new Builder instance
1854 Creates a new instance of Builder with default settings. @return Builder object with empty configuration
1855 Creates a read-only view of the given multiset, or returns an unmodifiable copy if it's already immutable. @param multiset input multiset to transform @return Multiset object with modified elements (if original was mutable) or null if not found
1856 Creates an EvictingQueue with specified maximum size. @param maxSize maximum number of elements in the queue
1857 Constructs an empty forwarding blocking deque. No parameters are used in this constructor.
1858 Constructs an empty BlockingDeque with default settings. @see java.util.concurrent.BlockingDeque#BlockingDeque()
1859 Constructor for an empty forwarding navigable set.
1860 Returns an unmodifiable set view of the provided entries. @param entrySet original set of key-value pairs
1861 Converts a navigable map to an unmodifiable version. @param map the original map @return an unmodifiable copy of the map or null if already unmodifiable
1862 Wraps a mutable ListMultimap in an unmodifiable view. @param delegate the multimap to wrap @return a read-only view of the input multimap
1863 Returns an unmodifiable view of the provided set multimap. @param delegate original set multimap
1864 Returns an unmodifiable view of the input table. @param table input table to convert
1865 Adapts a Future to a ListenableFuture, allowing it to be cancelled and listened to. @param future the underlying Future to adapt @return a ListenableFuture wrapping the original Future
1866 Invokes a future with a custom listener and executor. @param future ListenableFuture to be invoked @param callback FutureCallback to handle result or exception @param executor Executor to run the listener on
1867 Initializes a new LocalCache instance with specified configuration. @param builder CacheBuilder instance @param loader CacheLoader instance for loading values (optional)
1868 Creates a TreeMultiset instance with m1 ordering.
1869 Creates a TreeMultiset instance with optional custom comparator. @param comparator null for default ordering, or custom comparator
1870 Calls superclass's m1 method with key and values. @param key unique identifier @param values iterable of values @return List of values or null if not found
1871 Calls superclass's m1 method with key and values. @param key unique identifier for the collection @param values collection of values to be processed @return Set of values or null if not found
1872 Calls superclass's version of m1 with the provided key. @param key object to use in the method invocation @return sorted set of type V or null if not found
1873 Creates a HashMultiset with a specified number of distinct elements. @param distinctElements number of unique elements to initialize set with
1874 Recursively checks network conditions and returns true if met. @param network Network object to evaluate
1875 Creates a LinkedHashMultiset with the specified number of distinct elements. @param distinctElements target count of unique elements in the multiset
1876 Constructs a StandardNetwork instance using the provided builder. @param builder NetworkBuilder object containing network configuration
1877 Constructs a StandardValueGraph instance with the given graph builder. @param builder AbstractGraphBuilder to use for node ordering and expected count
1878 Returns a set of valid values for each key in m1 configuration. @return Set of unique values or null if not initialized
1879 Returns a set of function masks based on platform-specific capacity. @return Set of V values or null if not applicable
1880 Adds cell data with specified keys and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value cell value to be stored @return updated Builder instance for method chaining
1881 Sets a key-value pair and returns this builder instance. @param key unique key identifier @param value associated value
1882 Sets a mapping from the given key to the specified value. @param key type of the key (must be a subclass of B) @param value associated value @return this Builder instance for method chaining
1883 Applies transformations from the provided map to the builder. @param map Map of class-value pairs to apply as transforms @return This Builder instance for method chaining
1884 Creates a new builder instance with key and value from given entry. @param entry Entry object containing key-value pair
1885 Adds a new entry to the map with the given key-value pair. @param key unique identifier for the entry @param value associated value for the entry
1886 Adds a key-value pair to the builder. @param key class representing the type of value @param value actual value associated with the key
1887 Adds a mapping to the builder using the provided TypeToken and value. @param key TypeToken representing the key type @param value value to be mapped
1888 Adds multiple entries to the builder. @param entries iterable of key-value pairs to add @return updated builder instance for method chaining
1889 Adds multiple entries to the builder. @param entries collection of key-value pairs to add @return updated Builder instance
1890 Combines a navigable set with an additional filtering criterion. @param unfiltered original set @param predicate filter condition @return filtered navigable set or null if not found
1891 Generates a sorted map based on the current data structure. @return ImmutableSortedMap object
1892 Configures function mask with specified range and value. @param range Range of keys to apply the mask to @param value Value to assign to the function mask
1893 Adds a non-empty range to the builder. @param range non-empty range
1894 Merges two ranges into a single range with common bounds. @param connectedRange the other range to merge @return merged Range object or original if disconnected
1895 Computes the range of values not overlapping with another. @param otherRange the non-overlapping range to compute @return a new Range object representing the result
1896 Merges two ranges into a single range. @param other the range to merge with @return merged Range object or self if no overlap
1897 Returns the range of values for the given discrete domain. @param domain DiscreteDomain object to compute range for
1898 Creates an instance of HashBiMap with default capacity. @return a new HashBiMap instance
1899 Converts a Map to a BiMap. @param map input map to convert @return populated BiMap or null if map is null
1900 Creates a new instance of Builder with default settings. @return Builder object ready to configure.
1901 Creates an instance of ImmutableClassToInstanceMap from a given class and object. @param type Class to be mapped @param value Object to be associated with the class @return Immutable map instance or null if not created
1902 Returns an immutable set of function masks. @return ImmutableSet containing function mask values
1903 Reverses or optimizes the given list based on its type. @param list input list to process @return reversed or optimized list of same type T
1904 Creates an immutable list from a flexible input array. @param elements input array of elements, can be empty or contain one element
1905 Creates an immutable list from a varargs array or subset of elements. @param elements object array containing list elements @param length number of non-null elements in the list @return ImmutableList instance or null if input is invalid
1906 Returns a sublist of elements from index {@code fromIndex} to {@code toIndex}. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return ImmutableList of length {@code toIndex - fromIndex} or this if equal
1907 Creates an immutable range map with the given range and value. @param range Range object defining key bounds @param value Value to be associated with the range
1908 Recursively constructs an immutable range set from a given range. @param range input range to process @return ImmutableRangeSet instance or default value if applicable
1909 Creates an ImmutableSortedMap with a single key-value pair. @param comparator key comparator @param k1 the single key @param v1 the corresponding value
1910 Creates an immutable set from an array of elements. @param elements input array of type E
1911 Creates a new instance of Builder with default settings. @return Builder instance ready for configuration.
1912 Merges two iterators into one. @param a first iterator @param b second iterator @return merged iterator or null if both are null
1913 Merges three sorted iterators into one. @param a first iterator @param b second iterator @param c third iterator @return merged iterator of type T
1914 Combines four sorted iterators into a single iterator. @param a first iterator @param b second iterator @param c third iterator @param d fourth iterator @return merged iterator of type T
1915 Returns an iterator of subscribers for a given event. @param event Event object @return Iterator<Subscriber> or empty iterator if no subscribers found
1916 Returns the result of a future, potentially blocking until complete. @param closingFuture future to await
1917 Checks if the given value matches any entry in the map. @param value object to search for
1918 Retrieves a value from the map by matching a given key. @param key Object to search for in the map @return Value associated with the key, or null if not found
1919 Invokes m3 iterator on m2 result of m1 operation.
1920 Evaluates a functional mask condition. @return true if m3 is false; otherwise, false
1921 Calculates and returns the function mask value.
1922 Recursively computes map difference between two maps. @param left first map @param right second map
1923 Initializes an instance of EventBus with default configuration. @param name default event bus identifier (optional)
1924 Reorders elements in the queue based on custom ordering. @param index current queue position @param x element to insert or replace @return new index of inserted/replaced element
1925 Recursively fetches and processes minimum grandchild index, updating queue value. @param index current index for processing @return minimum grandchild index or original index if none found
1926 Checks if the given object is within a sorted set. @param object Object to search for @return true if found, false otherwise
1927 Checks if the given object matches any element in this set. @param object Object to search for
1928 Retrieves a sorted set of elements within a specified range. @param fromElement the start element (inclusive) @param toElement the end element (exclusive)
1929 Returns a sorted set of function masks.
1930 Retrieves a set of function masks associated with the given key. @param key unique identifier or null if not applicable
1931 Creates a Bloom filter with specified strategy. @param funnel input data funnel @param expectedInsertions estimated number of insertions @param fpp target false positive probability
1932 Computes a function value with rounding to the nearest integer. @param x input value @param mode RoundingMode used for rounding @return rounded integer result or MIN_INT if too small or MAX_INT if too large
1933 Calculates a long value from a double using rounding and masking. @param x input double value @param mode rounding mode to apply
1934 Iterates over input iterator, applying mask operation to each element. @param elements input iterator of type T
1935 Creates a new TopKSelector instance with the specified top-K value. @param k the number of top elements to select
1936 Creates a new TopKSelector instance with the specified K value. @param k the number of top elements to select
1937 Converts an int to a 32-bit signed long using Math library. @param n input integer value
1938 Computes and returns the m3 value for given n and k. @param n input parameter @param k input parameter
1939 Calculates statistical summary of an iterable of numbers. @param values collection of numerical values @return calculated statistics or null if empty
1940 Calculates statistics (Stats object) from an iterator of numbers. @param values iterator of numeric values to process @return Stats object containing calculated statistics or null if empty
1941 Updates paired statistics and computes sum of products of deltas. @param values PairedStats object containing required data
1942 Aggregates DoubleStream into Stats object.
1943 Accumulates statistics from an IntStream of values. @param values stream of integers to process @return aggregated Stats object
1944 Accumulates statistics from an iterable of Long values. @param values stream of numbers to process @return aggregated Stats object
1945 Processes DoubleStream values using StatsAccumulator.
1946 Processes stream of values using StatsAccumulator. @param values IntStream to process
1947 Accumulates statistics using provided aggregation functions.
1948 Recursively processes required values in the specified range. @param allRequired sorted array of required values @param requiredFrom starting index for current recursion level @param requiredTo ending index for current recursion level @param array target array to modify @param from starting index for processing @param to ending index for processing
1949 Recursively processes an iterable of doubles, delegating to a collection-specific method or a chain of map and reduce operations. @param values input iterable of double values
1950 Recursively transforms an iterable of integers into an immutable integer array. @param values input iterable of integers
1951 Recursively processes iterable of Long values, using optimized methods for collections. @param values iterable of Long values
1952 Converts unsigned long to string in specified base. @param radix target base (e.g. 2 for binary, 10 for decimal)
1953 Wraps the call to m1 with default max iterations (10).
1954 Executes a collection of tasks with optional timing and timeout. @param executorService ListeningExecutorService instance @param tasks Collection of Callable tasks to execute @param timed Whether to execute with timing @param timeout Timeout duration in nanoseconds @return Result of the first task that completes or null if all fail
1955 Executes a Runnable using the provided Executor and returns a ListenableFuture. @param combiner Runnable to execute @param executor Execution context
1956 Wraps a ListenableFuture with a ClosingFuture. @param future ListenableFuture to be wrapped
1957 Returns a value of type E or null if NoSuchElementException is thrown.
1958 Returns user profile by ID or null if not found. @param userId unique user identifier @return UserProfile object or null if not found
1959 Executes a callable task asynchronously using the provided executor. @param callable Callable task to execute @param executor Executor service for asynchronous execution @return ListenableFuture object representing the result of the task
1960 Retrieves the result of a Future with checked exceptions. @param future asynchronous computation @param exceptionClass class of potential exceptions @param timeout maximum wait time in specified TimeUnit @param unit time unit for timeout value @return result value or throws an exception if failed
1961 Updates the service state and notifies listeners of termination. @throws IllegalStateException if service is not in a terminating state
1962 Handles function masking due to an exception. @param cause the underlying Throwable cause
1963 Records service execution time and monitors its lifecycle. @param service the Service instance to be monitored
1964 Transitions a service from one state to another. @param service Service instance @param from Initial state @param to Target state
1965 Waits for guard condition to be met or times out. @param guard Guard object to monitor
1966 Executes mask function on the given Guard object. @param guard Guard object to execute mask function on
1967 Releases monitor and performs guarded action. @param guard object containing monitor and condition
1968 Updates functional mask for the given Guard. @param guard Guard object to update
1969 Checks whether a guard's condition is met within the specified time frame. @param guard Guard object to monitor @param time timeout duration in specified unit @param unit TimeUnit (e.g. seconds, milliseconds) @return true if condition satisfied, false otherwise
1970 Waits for a Guard condition to be satisfied or a specified timeout. @param guard the Guard object to monitor @param time the timeout duration @param unit the TimeUnit of the timeout @return true if the condition is satisfied, false otherwise
1971 Waits for the guard to be in a valid state or times out. @param guard Guard object @param time Timeout duration @param unit TimeUnit (e.g. seconds, milliseconds) @return True if the guard is valid, false otherwise
1972 Waits on guard with optional timeout. @param guard monitor to wait on @param time timeout duration @param unit TimeUnit for timeout duration @return true if timed out or signaled, false otherwise
1973 Executes asynchronous computation with a specified timeout. @param timeout maximum duration to wait @param unit time unit for the timeout @param scheduledExecutor executor service for scheduling @return Future object representing the result or an exception
1974 Wraps a ListenableFuture with an additional timeout. @param delegate the original future to wrap @param time timeout duration @param scheduledExecutor executor service for scheduling @return wrapped ListenableFuture with timeout
1975 Filters Iterable of elements using provided predicate. @param predicate function to filter elements @return Optional containing filtered element or empty if none found
1976 Creates a CharMatcher that matches any character except those in the specified set. @return CharMatcher instance
1977 Wraps a Throwable into a RuntimeException with multiple exception types. @param e original Throwable to be wrapped @throws IOException if thrown from method m2 @throws X1 if thrown from method m2 (declaredType1) @throws X2 if thrown from method m2 (declaredType2)
1978 Writes byte array to output stream using helper methods. @param bytes input data
1979 Processes InputStream to produce a unique identifier. @param input InputStream containing data to process
1980 Checks if the input stream has reached its end. @throws IOException on read error
1981 Fetches and parses file size, returning the known value or reading from a file if unknown. @throws IOException on read errors
1982 Writes data to OutputStream and returns a unique identifier. @param output target output stream
1983 Writes binary data to a sink and returns a mask value. @param sink output stream for writing binary data
1984 Retrieves byte array by fetching and processing stream data. @throws IOException if input/output operations fail
1985 Reads and processes bytes from an input stream using the provided ByteProcessor. @param processor ByteProcessor instance for data processing @return processed result of type T, or null if not found
1986 Compares byte sources for equality. @param other the ByteSource to compare @return true if equal, false otherwise
1987 Writes CharSequence to output stream using two-phase processing. @param charSequence input sequence to process
1988 Fetches and writes function mask data from a Readable source. @param readable input data stream @return long value of the function mask or throws IOException if failed.
1989 Fetches and returns the function mask length, or throws an exception if unknown.
1990 Reads and appends binary data from a resource to the provided Appendable. @param appendable target output stream @return a unique identifier for the appended data
1991 Reads and writes character streams to/from a sink. @param sink destination character stream
1992 Retrieves the mask value from a file. @return String representation of the mask or null on failure
1993 Reads and processes a file using the given LineProcessor. @param processor line processing callback @return processed result or null if an error occurs
1994 Checks if the input stream has reached EOF. @throws IOException on I/O errors
1995 Rehashes the map to a larger capacity when necessary. @GuardedBy("this")
1996 Filters a multimap based on the provided predicate. @param unfiltered original multimap @param keyPredicate predicate to filter keys by @return filtered multimap or null if all entries are removed
1997 Filters a multimap based on a predicate, returning entries where values match. @param unfiltered original multimap @param valuePredicate filter criteria for values
1998 Filters a multimap based on a predicate. @param unfiltered input multimap @param entryPredicate filtering condition for entries @return filtered multimap or null if empty
1999 Iterates over a merged collection of unique elements. @return Iterator of unique elements, or empty iterator if none found
2000 Creates an ImmutableBiMap from the given iterable of key-value entries. @param entries iterable of key-value pairs to include in the map @return ImmutableBiMap containing all provided entries or a default map if empty
2001 Creates an immutable map from a collection of key-value entries. @param entries iterable of entries to be mapped
2002 Copies elements from an iterable to an array of specified type. @param iterable input iterable @param type target class type @return array of copied objects or null if not applicable
2003 Creates an ImmutableSortedSet from the given elements and comparator. @param comparator Comparator to order elements @param elements Iterable of elements to include in the set @return ImmutableSortedSet containing all elements or null if not found
2004 Searches list for matching elements based on given key and comparator. @param list list to search @param keyFunction function to extract key from elements @param key target key value @param keyComparator comparator for key values @param presentBehavior behavior when key is present in element @param absentBehavior behavior when key is not present in element @return result of secondary search operation
2005 Retrieves a list of values associated with a given key. @param key the key to look up (may be null)
2006 Transforms a navigable map by applying a function to its values. @param fromMap original map @param function transformation function @return new map with transformed values
2007 Checks and updates data based on the provided row, column, and value. @param rowKey unique row identifier @param columnKey unique column identifier @param value new data value @return true if update is successful, false otherwise
2008 Returns a synchronized version of the input multimap.
2009 Returns a synchronized version of the provided multimap. @param multimap input multimap to synchronize
2010 Calls M1 to process readable object and returns result of its M2 method. @param r Readable object to be processed
2011 Wraps the callback method with a fluent future. @param exceptionType type of exception to catch @param fallback function to execute if an exception occurs @param executor thread pool executor @return FluentFuture containing result or exception
2012 Wraps a Function in a FluentFuture using the specified Executor. @param function function to be executed @param executor executor to use for execution
2013 Creates a graph builder with mask enabled. @return GraphBuilder instance with mask property set to true
2014 Creates a GraphBuilder instance with false mask. @return GraphBuilder instance with mask set to false
2015 Builds a GraphBuilder instance from the given graph, applying masks. @param graph input graph with masked values
2016 Returns a NetworkBuilder instance with mask enabled.
2017 Creates a NetworkBuilder instance with masking disabled. @return NetworkBuilder instance with masking set to false
2018 Creates a NetworkBuilder instance with function masks from the given network. @param network input network to derive masks from @return NetworkBuilder instance with derived masks
2019 Returns a ValueGraphBuilder instance with masked functionality enabled.
2020 Returns a ValueGraphBuilder instance with mask set to false.
2021 Creates a ValueGraphBuilder instance with masked functionality. @param graph original ValueGraph instance
2022 Invokes listener and executor operations on state. @param listener callback listener to invoke @param executor executor to execute tasks
2023 Returns an empty instance of CompactLinkedHashSet.
2024 Creates a compact hash set from the given collection. @param collection input collection @return CompactHashSet instance or null if collection is null
2025 Creates a compact linked hash set with specified expected size. @param expectedSize estimated number of elements in the set
2026 Creates a sorted set multimap from the given map and supplier. @param map input map with key-value collections @param factory supplier for creating sorted set values
2027 Creates a multiset collector with default counting function. @return Multiset collector that counts occurrences of each element
2028 Returns a multiset collector that groups elements based on the given functions. @param elementFunction function to extract group elements @param countFunction function to determine element counts
2029 Creates a new instance of Builder with default configurations.
2030 Converts array of objects to list and passes it to recursive implementation. @param parts array of objects to convert
2031 Invokes Joiner's m1() method with this as an argument. @param joiner Joiner instance to use
2032 Normalizes and simplifies a file path. @param pathname the input file path
2033 Parses public suffix from encoded string. @param stack Deque for storing intermediate results @param encoded encoded string to parse @param start starting index of parsing @param builder map builder for storing suffixes @return length of parsed suffix
2034 Returns a concurrent map instance based on configuration. @return ConcurrentHashMap or custom internal map
2035 Transforms elements using the given function and returns a FluentIterable. @param function function to apply to each element @return FluentIterable of transformed objects or null if not found
2036 Concatenates multiple iterable collections into one. @param inputs variable-length array of iterables to concatenate @return concatenated iterable collection
2037 Executes asynchronous operation with specified timeout and time unit. @param timeout maximum wait duration in specified time unit @param unit time unit for timeout value (e.g. seconds, milliseconds) @throws InterruptedException if thread is interrupted while waiting @throws TimeoutException if operation times out @throws ExecutionException if execution fails
2038 Retrieves graph connections for a given node. @param node the node to fetch connections for @return GraphConnections object or null if not found
2039 Converts duration to nanoseconds and calls m2 with result. @param guard Guard object @param time Duration value
2040 Formats a string into the specified case format. @param format CaseFormat to apply @param s input string @return formatted string or original string if empty
2041 Formats a string into the specified case format, applying mask rules. @param format CaseFormat enum value @param s Input string to be formatted
2042 Formats a string into the specified mask format. @param format CaseFormat to apply @param s input string to format @return formatted string or original string if no changes made
2043 Formats input string according to given case format. @param format CaseFormat enum value @param str input string to be formatted @return formatted string or original if same as FUNC_MASK's format
2044 Checks if input CharSequence matches a specific pattern. @param sequence input text to check @return true if match found, false otherwise
2045 Replaces repeated characters in the input sequence with a single instance. @param sequence input character sequence
2046 Replaces a specified character and its subsequent occurrences with a mask. @param sequence input CharSequence @param replacement character to replace with @return modified string or original if no replacements found
2047 Extracts the embedded Inet4Address from a given Inet6Address. @param ip the input IPv6 address @return the corresponding Inet4Address or throws exception if not found
2048 Reads and hashes bytes from input stream. @param bytes buffer to read into @param off offset in buffer @param len number of bytes to read @return number of bytes read, or -1 on error
2049 Copies input stream to array starting from specified offset.
2050 Initializes parallel search in boolean array. @param array boolean array to search @param distance maximum search distance @param start starting index (default: 0) @param end ending index (default: array length)
2051 Initializes the computation for the specified byte array with given distance. @param array byte array to process @param distance initial distance value
2052 Recursively processes byte array using m1 and m2 functions. @param array input byte array to process
2053 Recursively sorts and swaps elements in the given character array. @param array input array to be sorted
2054 Initializes the array traversal from multiple points. @param array input character array @param distance maximum number of steps to traverse
2055 Recursively processes the entire double array. @param array input array of doubles
2056 Initializes recursive processing of array elements with specified distance. @param array input array @param distance recursion depth
2057 Recursively processes the entire float array using m1 and m2 helper methods.
2058 Recursively processes float array within specified distance. @param array input float array @param distance maximum processing distance
2059 Recursively calls m1() and then iteratively processes the array. @param array input array to be processed
2060 Recursively processes array elements within specified distance. @param array input array to process @param distance maximum distance from current element @param start starting index (internal use) @param end ending index (internal use)
2061 Recursively sorts an array of long values using helper function m1. @param array input array to be sorted
2062 Initializes recursive sorting of an array with given distance. @param array input array to sort @param distance initial recursion depth
2063 Recursively processes array elements. @param array input short array
2064 Initializes recursive processing of short array with specified distance. @param array input short array @param distance recursion depth
2065 Wraps the result of m1() in a MapSplitter object. @param separator string to split on
2066 Creates a RateLimiter instance with specified permits per second and warm-up period. @param permitsPerSecond rate limit in units of the given time unit @param warmupPeriod time to reach full rate before enforcing limits
2067 Returns an unmodifiable view of a given sorted multiset. @param sortedMultiset input multiset to wrap
2068 Wraps a navigable set in an unmodifiable view, or returns the original if already immutable. @param set the input navigable set @return unmodifiable NavigableSet instance
2069 Converts a collection of map entries to an unmodifiable map. @param entries input collection of key-value pairs
2070 Wraps a modifiable SortedSetMultimap in an unmodifiable view. @param delegate the underlying multimap to be wrapped
2071 Wraps a ListenableFuture with an Executor for closing resources. @param future the Future to be wrapped @param closingExecutor Executor for closing AutoCloseable resources @return ClosingFuture object or null if not found
2072 Executes asynchronous operation and schedules its result handling. @param callback interface to handle the result @param executor executor service for scheduling
2073 Creates a bidirectional map for enum types K and V. @param keyType type of the enum keys @param valueType type of the enum values
2074 Creates an EnumHashBiMap instance with a specified key type.
2075 Creates a TreeMultiset from an iterable of comparable elements. @param elements input collection @return populated TreeMultiset instance
2076 Initializes the builder with a custom comparator. @param comparator user-specified comparison function
2077 Delegates to superclass method with key and iterable of values. @param key arbitrary key for sorting @param values collection of values to be sorted
2078 Creates a set of function masks from the given values. @param key the key to use as a mask @param values iterable of values to create masks for @return Set of function masks or empty set if no values provided
2079 Creates a hash-based multiset from the given iterable of elements. @param elements input collection of elements @return HashMultiset object representing the aggregated data
2080 Creates an ArrayListMultimap with specified capacity for keys and values per key. @param expectedKeys estimated number of unique keys @param expectedValuesPerKey estimated number of values per key @return a new ArrayListMultimap instance
2081 Creates a hash-based multimap with estimated capacity. @param expectedKeys estimated number of keys @param expectedValuesPerKey estimated average values per key
2082 Creates a new HashMultimap with the same mappings as the input Multimap. @param multimap input Multimap to clone
2083 Creates a new LinkedListMultimap with specified expected keys. @param expectedKeys maximum number of key elements allowed
2084 Creates a multiset from the given iterable of elements. @param elements input collection to convert
2085 Creates an instance of LinkedHashMultimap with default capacities.
2086 Creates a multimap with pre-allocated space for keys and values. @param expectedKeys estimated number of unique keys @param expectedValuesPerKey estimated average number of values per key
2087 Initializes the network with a custom builder. @param builder network configuration builder
2088 Constructs a new value graph using an existing graph builder. @param builder Graph builder instance
2089 Configures a cell from the provided immutable table cell or individual row/column/value components. @param cell immutable table cell, or individual row/column/value components to be used as a fallback
2090 Configures builder with provided key-value pair. @param entry non-null Entry object to add to builder
2091 Initializes builder with key-value pairs from the given iterable. @param entries collection of entries to add
2092 Configures builder with an existing key-value pair. @param entry non-null Entry object to initialize the builder
2093 Returns a multimap view with the specified mask. @return ImmutableSetMultimap instance or null if not applicable
2094 Returns an immutable sorted map of function masks.
2095 Updates the builder with entries from a given RangeMap. @param rangeMap source RangeMap to populate the builder @return this Builder instance for method chaining
2096 Applies a list of masks to the builder. @param ranges iterable of Range objects to apply
2097 Filters ranges based on the given range. @param range Range to filter by @return filtered list of ranges or empty list if no matches
2098 Creates a contiguous set from the given range and domain. @param range specified Range object @param domain DiscreteDomain object @return ContiguousSet instance or empty/regular set based on effective range
2099 Applies mask to Range based on given Entry and value. @param range input range @param value value to compare with @param entry optional Entry object @return modified Range or original if no changes needed
2100 Constructs a sorted set of values based on the given discrete domain. @param domain discrete domain to generate set from @return ImmutableSortedSet containing domain's elements or throws exception if not bounded
2101 Converts a map to an immutable enum map. @param map input map @returnImmutableMap object or empty if not possible
2102 Returns an immutable map of aggregated values by key. @return A map where keys are type R and values are maps with keys C and values V.
2103 Returns an iterator over the elements of this collection. The returned iterator is unmodifiable.
2104 Creates an immutable list of elements using m1 factory. @return ImmutableList object containing E elements
2105 Creates an immutable list from a variable-length array of elements. @param elements array of objects to be converted into an ImmutableList
2106 Returns a mask for the sorted set, either directly or after copying elements. @return ImmutableSortedSet of E elements
2107 Processes an array of entries to create a map with deduplicated keys. @param n size of the entry array @param entryArray array of entries to process @param throwIfDuplicateKeys whether to throw on duplicate keys @return an ImmutableMap with deduplicated keys or null if all keys were duplicates
2108 Finds the index of the first matching suffix based on desired type. @param desiredType Optional PublicSuffixType to match
2109 Converts an iterable of enums to an immutable set. @param elements iterable of enum values @return ImmutableSet containing all enum values or empty set if none found
2110 Returns an unmodifiable iterator over all possible function masks. @return Iterator over unique E values or empty iterator if none exist
2111 Dispatches an event to registered subscribers. @param event the event object
2112 Creates a MoveDesc object by resolving the trickle operation. @param removeIndex index of element to be removed @param vacated index where element was previously located @param toTrickle element to be moved @return MoveDesc object or null if not resolved
2113 Returns a comparator for the row keys.
2114 Wraps aNavigableSet in a synchronized implementation. @param navigableSet input set to synchronize @return synchronized NavigableSet instance
2115 Creates a Bloom filter with specified expected insertions and false positive probability. @param funnel data conversion function @param expectedInsertions estimated number of inserts @param fpp target false positive rate
2116 Creates a Bloom filter with default false positive probability (3%). @param funnel data input funnel @param expectedInsertions estimated number of insertions
2117 Calculates the function mask based on bits and hash functions. @return long value representing the function mask
2118 Creates a collector for top K elements based on the provided comparator. @param k number of top elements to select @param comparator comparison function for sorting elements
2119 Selects top K elements from an iterator. @param iterator input iterator @param k number of top elements to select @return List of selected elements or empty list if none found
2120 Recursively processes iterable elements. @param elements Iterable of elements to process
2121 Converts unsigned long value to string representation. @return string representation of the value or an exception message if error occurs.
2122 Updates the lock graph node for a CycleDetectingLock instance. @param lock target lock object
2123 Executes a ClosingFunction asynchronously using the provided Executor. @param function ClosingFunction to execute @param executor Executor service for asynchronous execution @return ClosingFuture containing result or null if failed
2124 Executes an asynchronous closing function and returns a ClosingFuture. @param function AsyncClosingFunction to execute @param executor Executor to run the function on @return ClosingFuture containing result or null if not found
2125 Retrieves a value from a Future, throwing an exception if it fails. @param future asynchronous result to retrieve @param exceptionClass class of exception to throw on failure @throws X thrown exception type
2126 Retrieves the result of a Future with optional timeout and exception handling. @param future asynchronous computation to retrieve @param exceptionClass class of exceptions to throw on timeout or failure @param timeout maximum wait time in nanoseconds @throws X thrown if timeout is exceeded or future fails
2127 Retrieves a cancellable schedule and executes the task. @return Cancellable future or new FutureAsCancellable with default value
2128 Transitions service state to RUNNING or STOPPING based on shutdown flag. @throws IllegalStateException if service is not in STARTING state
2129 Starts all services and updates their states. @return the updated ServiceManager instance
2130 Converts duration to nanoseconds and calls m2 with the result. @param guard Guard object @param time Duration to convert
2131 Converts duration to nanoseconds and calls m2 with result. @param guard Guard object @param time Duration to convert
2132 Converts duration to nanoseconds and calls m2 with result. @param guard Guard object @param time Duration value
2133 Converts and compares duration with guard's threshold. @param guard Guard object @param time Duration to be compared
2134 Executes asynchronous operation with a specified timeout. @param timeout maximum time to wait for result @param scheduledExecutor executor service for scheduling @return FluentFuture representing the asynchronous operation
2135 Copies binary data from array to file. @param from binary data in byte array @param to target file destination
2136 Computes hash code using provided hash function and updates internal state. @param hashFunction hash function to use for computation @return computed hash code value
2137 Copies file contents using custom stream manipulation. @param from input file @param to output stream
2138 Streams URL content through mask operations. @param from input URL stream @param to output stream destination
2139 Copies file contents from 'from' to 'to', ensuring they are distinct. @param from source file @param to target file
2140 Computes and returns a function-specific mask value from the given File object. @param file input file
2141 Computes and returns a byte array representing a mask from the provided URL. @param url input URL
2142 Reads a file using the specified byte processor. @param file the file to read @param processor the byte processor to use @return the processed result or null if an error occurs
2143 Determines whether two files have matching contents. @param file1 first file to compare @param file2 second file to compare @return true if files are identical, false otherwise
2144 Compares two file paths for equality. @param path1 first file path @param path2 second file path @return true if paths are equal, false otherwise
2145 Redirects input stream to output file with specified charset. @param from input stream @param to output file @param charset character encoding scheme
2146 Writes a CharSequence to a file with specified charset and mode. @param from CharSequence to write @param to target file path @param charset character encoding for writing
2147 Copies a file's content to an appendable stream. @param from source file @param charset character set for encoding/decoding @param to destination appendable stream
2148 Wraps legacy file reading into a modern Files API call. @param file the input file to read from @param charset the character encoding of the file content
2149 Processes file content into a list of strings. @param file source file to process @param charset character encoding for file reading
2150 Wraps Files.asCharSource-based line reading. @param file input file @param charset character set to use @param callback processor for each read line @return result of the processing or null if empty
2151 Processes a URL with the specified charset and executes a callback for each line. @param url URL to process @param charset character encoding of the URL content @param callback LineProcessor callback to execute on each line @return processed result or null if not supported
2152 Creates a mapped byte buffer from a file. @param file File to map @param mode Memory map mode (e.g. read-only, read-write)
2153 Creates a mapped byte buffer for the given file with specified size and mode. @param file file to create buffer from @param mode memory mapping mode (e.g. READ_ONLY, READ_WRITE) @param size buffer size in bytes, may not be negative @return MappedByteBuffer instance or null on failure
2154 Executes application-level operation with provided timeout. @param service ExecutorService instance @param terminationTimeout timeout duration in specified unit @param timeUnit TimeUnit for timeout duration
2155 Filters a multimap by values using the specified predicate. @param unfiltered original multimap @param valuePredicate predicate to filter values @return filtered multimap or null if empty
2156 Creates a compound ordering from iterable comparators. @param comparators iterable of comparators to combine @return Ordering instance representing the combined comparison logic
2157 Recursively unwraps and filters a Map to an ImmutableBiMap. @param map the input map @return filtered ImmutableBiMap or null if invalid
2158 Converts collection from m1() to array of specified type. @param type Class of elements in the returned array @return Array of elements or null if not found
2159 Converts an Iterator to a typed array. @param iterator input iterator @param type expected element class @return array of elements or null if empty
2160 Creates an immutable sorted set of elements using the provided comparator. @param comparator comparator to order the elements @return ImmutableSortedSet containing ordered elements or null if empty
2161 Creates an immutable sorted set from the given iterable elements. @param elements input collection to sort
2162 Creates an ImmutableSortedSet from a collection of elements. @param comparator Comparator to use for sorting @param elements Iterable of elements to include in the set
2163 Returns a sorted map of masks with key-value pairs.
2164 Returns the function mask string, initializing it if necessary.
2165 Returns a synchronized version of the input multimap.
2166 Reads and returns a string mask from a file.
2167 Creates a compact linked hash map with estimated size. @param expectedSize predicted number of entries
2168 Creates a compact linked hash set from the given collection. @param collection input collection to process @return CompactLinkedHashSet instance or null if invalid input
2169 Creates a TreeMultimap with default ordering.
2170 Creates a TreeMultimap instance with custom comparators for keys and values. @param keyComparator comparator for sorting keys @param valueComparator comparator for sorting values
2171 Checks if input CharSequence does not match pattern m1. @param sequence input text to be checked @return true if sequence does not match, false otherwise
2172 Masks input CharSequence using m1 and m2 methods. @param sequence input text to be masked
2173 Replaces a sequence of characters with a replacement string. @param sequence original character sequence @param replacement new string to insert
2174 Computes a hash-based Inet4Address from an InetAddress. @param ip input InetAddress to convert
2175 Creates a rate limiter with specified permits per second and warm-up period. @param permitsPerSecond rate limit in units per second @param warmupPeriod duration to warm up the rate limiter before enforcing limits
2176 Returns a set of entries containing function mask information.
2177 Schedules a one-time task to run after a specified delay. @param command Runnable task to execute @param delay time until execution in given unit @param unit time unit for the delay (e.g. seconds, minutes) @return scheduled future or null if not successful
2178 Creates a local loading cache with the given loader. @param loader CacheLoader to fetch values
2179 Creates and returns a local cache instance with customized type parameters. @param none @return LocalCache object for custom key-value types
2180 Creates a Builder instance with custom comparison logic. @param comparator Comparator to use when building
2181 Creates a Builder instance with a custom ordering.
2182 Creates a Builder instance for ordering with mask m1. @return Builder instance or null if invalid
2183 Creates an Enum-based BiMap from the given Map. @param map input map to convert
2184 Creates a bi-directional enum hash map from the given map. @param map input map to transform @return EnumHashBiMap instance or null if transformation fails
2185 Returns a sorted set of values based on the provided key. @param key the key used for sorting @param values the iterable collection of values to be sorted
2186 Compares two lists for functional mask equivalence. @param first the first list to compare @param second the second list to compare @return true if lists have same elements and counts, false otherwise
2187 Creates an empty multimap with generic key and value types.
2188 Creates a new ArrayListMultimap instance from an existing Multimap.
2189 Creates an empty HashMultimap instance.
2190 Creates an empty LinkedListMultimap instance.
2191 Creates a new linked list Multimap from an existing one. @param multimap input Multimap to transform @return new LinkedListMultimap instance with same key-value pairs
2192 Creates a new LinkedHashMultimap from an existing Multimap. @param multimap the source Multimap @return a new LinkedHashMultimap instance
2193 Creates a new mutable network instance with updated node and edge types.
2194 Initializes a new graph with the given builder. @param builder GraphBuilder instance to set up the graph's structure
2195 Creates a masked mutable value graph.
2196 Processes each cell in the given table. @param table Table to iterate over @return The Builder instance for method chaining
2197 Updates builder with iterable of key-value pairs. @param entries collection of entries to add
2198 Merges an existing map into this builder using its key-value transformation.
2199 Adds multiple key-value pairs to builder. @param entries iterable of entries to add
2200 Creates a filtered map with entries that match the given predicate. @param map original unfiltered map @param entryPredicate predicate to filter entries by
2201 Converts RangeSet to a collection of values. @param ranges input range set
2202 Computes the function mask for a given range. @param range input Range object @return updated ImmutableRangeSet or original set if unchanged
2203 Creates a contiguous set of integers within the specified range. @param lower inclusive lower bound @param upper exclusive upper bound
2204 Creates a contiguous set of integers within the specified range. @param lower smallest value (inclusive) @param upper largest value (inclusive)
2205 Creates a contiguous set of integers within the specified range. @param lower lower bound (inclusive) @param upper upper bound (inclusive)
2206 Creates a contiguous set of integers within the specified range. @param lower inclusive lower bound @param upper inclusive upper bound @return ContiguousSet containing all integers in the range
2207 Coalesces the given range with adjacent map entries based on lower and upper bounds. @param range Range to coalesce @param value Value used for coalescing
2208 Retrieves network connections for a given node. @param node the node to fetch connections for @return NetworkConnections object or null if not found
2209 Recursively converts a Map to an immutable form. @param map input map to process @return ImmutableMap representation or delegated result
2210 Fetches a map of function masks by row key. @param rowKey unique row identifier @return immutable map of function masks or empty map if not found
2211 Applies mask to input element using iterators. @param e input element to be masked @return masked element or null if null input
2212 Applies mask functions to input element and returns result. @param e input element subject to masking operations
2213 Creates an immutable list of elements from a filtered iterator. @param elements input iterator with filtering method m1()
2214 Constructs an ImmutableRangeMap from entries, validating and merging overlapping ranges. @param entries Entry array containing range-value pairs
2215 Merges overlapping ranges into a single set.
2216 Constructs immutable list of URLs for Java class path entries. @return List of URLs or empty list if none found
2217 Creates a list of function parameters.
2218 Builds and returns a list of throwable type tokens.
2219 Creates an immutable list of callable tasks with added mask functionality. @param tasks collection of callable tasks to transform @return ImmutableList of Callable tasks with mask applied
2220 Converts an iterable of comparable elements to a sorted immutable list. @param elements input iterable @return ImmutableList object in ascending order or null if empty
2221 Sorts and returns an immutable list of elements using the provided comparator. @param comparator function to compare elements @param elements iterable collection of elements to sort
2222 Creates an immutable sorted set from a collection of elements. @param comparator comparison function for sorting @param elements iterator of elements to include in the set @return ImmutableSortedSet instance
2223 Creates an immutable map from the given array. @param n number of buckets @param entryArray array of key-value pairs @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap instance or null if failed
2224 Computes and returns the public suffix index mask. @return integer mask value or cached value if initialized
2225 Calculates the function mask index. @return registry suffix index or a default value if not initialized
2226 Creates an immutable sorted map from the given entries. @param comparator comparison function for keys @param sameComparator whether to reuse previous comparator @param entries iterable of key-value pairs
2227 Creates a new TreeBasedTable with transformed data from the input table. @param table original tree-based table to transform @return new TreeBasedTable object with updated data
2228 Creates a Bloom filter with estimated insertions. @param funnel input data transformer @param expectedInsertions number of elements to be added
2229 Returns a collector that groups elements using the provided comparator. @param k grouping threshold @param comparator comparison function for grouping
2230 Truncates and processes elements from an iterable to a list of type E. @param iterable input collection @param k maximum element count @return List of type E or null if not processed
2231 Applies masking operation to iterator elements. @param iterator iterator over elements of type E @param k integer mask value @return list of masked elements of type E
2232 Creates an asynchronous future that will be closed when executed. @param exceptionType type of exception to catch @param fallback function to invoke on failure @param executor thread pool executor for execution @return ClosingFuture object representing the asynchronous operation
2233 Calls the 'm1' method on the associated state object.
2234 Calls state-specific timer with specified timeout and time unit. @param timeout duration to wait @param unit time unit for timeout (e.g. seconds, milliseconds)
2235 Returns a CharMatcher with a specific mask function.
2236 Legacy method to compute file hash; use Files.asByteSource().hash() instead.
2237 Copies source file to destination while ensuring they are distinct. @param from source file @param to destination file
2238 Reads and processes lines from a URL, returning a list of processed strings. @param url URL to read from @param charset character encoding for text
2239 Creates a mapped byte buffer from the specified file. @param file input file
2240 Creates an ExecutorService instance with the specified ThreadPoolExecutor and timeout. @param executor The underlying thread pool executor @param terminationTimeout Timeout for task execution @param timeUnit Unit of time for timeout (e.g. SECONDS)
2241 Creates a ScheduledExecutorService instance with the given parameters. @param executor scheduled thread pool executor @param terminationTimeout timeout for termination in specified unit @param timeUnit unit of time for termination timeout
2242 Wraps ExecutorService with a specified termination timeout. @param service Executor service to wrap @param terminationTimeout Timeout duration for executor service
2243 Updates the entry in the hash table. @param entry ReferenceEntry to be updated @param hash hash value of the entry @return true if update was successful, false otherwise
2244 Removes a value reference from the map. @param key key to remove @param hash hash code of the key @param valueReference ValueReference to update or null for removal @return true if removed, false otherwise
2245 Calls m1 on the associated state object.
2246 Invokes state machine operation with specified timeout and time unit. @param timeout duration to wait before timing out @param unit time unit for the timeout (e.g., seconds, milliseconds)
2247 Retrieves service metrics from the internal state. @return map of services to their corresponding metric values
2248 Retrieves annotations of the specified type from the annotations list. @param annotationType type of annotation to filter @return array of matching annotations or null if none found
2249 Creates an ordered immutable set from a collection of elements. @param elements input collection (may be null or empty)
2250 Returns a synchronized map from the given navigable map. @param navigableMap input map to synchronize @return synchronized NavigableMap object
2251 Reads the contents of a file as a string using a specified charset. @param file file to read @param charset character encoding
2252 Fetches and processes URL content with specified character set. @param url URL to fetch @param charset character encoding to use @return processed string or null on failure
2253 Creates an empty CompactLinkedHashMap instance.
2254 Creates a TreeMultimap instance from a given Multimap. @param multimap input Multimap to transform @return TreeMultimap<K, V> instance or null if input is null
2255 Returns a ReentrantLock instance with the specified name and fairness setting. @param lockName unique lock identifier @param fair whether to use a fair locking policy or not
2256 Creates a ReentrantReadWriteLock instance based on the policy and parameters. @param lockName name of the lock @param fair fairness mode (true for fair, false for non-fair)
2257 Creates a function mask map for the given enum class. @param clazz enum class to create a map for @return Map of enum values to LockGraphNode objects
2258 Validates a domain part based on length and character constraints. @param part String to validate @param isFinalPart whether this is the final part of a domain name
2259 Calculates the function mask from an IP address. @param ip InetAddress object representing the IP address @return integer function mask value
2260 Checks if an object matches a specific mask. @param object object to be checked
2261 Checks if the given object matches a condition in an iterable sequence. @param object the object to check @return true if match found, false otherwise
2262 Checks if all elements in the given iterable collection match the mask. @param collection iterable collection to check
2263 Checks if any element in the given collection matches the mask. @param collection collection of elements to check
2264 Applies mask operation to input data. @param m1 input data iterator
2265 Checks if mask condition is met by negating m1().m2() result.
2266 Creates and initializes an array of function masks. @return Array of function mask objects or null if failed.
2267 Converts duration to nanoseconds and schedules command execution. @param command task to execute @param delay time to wait before executing the command
2268 Retrieves event handlers for the given listener. @param listener object to fetch handlers for
2269 Creates a mutable subnetwork by masking nodes and preserving edges. @param network original network @param nodes subset of nodes to include in the subnetwork @return MutableNetwork object containing the masked subgraph
2270 Creates a mutable network copy with filtered nodes and edges. @param network original network to replicate
2271 Creates a copy of the current graph with masked edges. @return A new mutable graph instance
2272 Creates a subgraph containing nodes and their successors from the original graph. @param graph original ValueGraph @param nodes Iterable of node identifiers to include in the subgraph @return MutableValueGraph representing the filtered subgraph
2273 Creates a mutable value graph copy of the given graph, preserving node and edge data. @param graph original ValueGraph instance @return MutableValueGraph copy or null if invalid input
2274 Merges provided map into builder's internal state. @param map input key-value pairs to merge @return updated Builder instance
2275 Merges all entries from provided map into builder.
2276 Creates a filtered navigable map from the given unfiltered map and predicate. @param map Unfiltered NavigableMap instance @param entryPredicate Predicate to filter entries @return New FilteredEntryNavigableMap instance or null if invalid input
2277 Creates a filtered sorted map from the given map and entry predicate. @param map original map to filter @param entryPredicate predicate for filtering entries
2278 Filters map entries based on provided predicates. @param unfiltered input map @param keyPredicate predicate for keys
2279 Filters a map based on the given predicate. @param entryPredicate filter criteria for map entries @return filtered Map instance or original if not supported
2280 Creates a collector to group input elements by the specified key function and map values. @param comparator comparison function for keys @param keyFunction extracts key from each element @param valueFunction extracts value from each element
2281 Creates a collector for grouping elements into an immutable map. @param keyFunction function to extract the enum key from each element @param valueFunction function to extract the value associated with each element
2282 Creates a collector to group input elements by enum keys and aggregate values using the provided functions. @param keyFunction maps each element to its corresponding enum key @param valueFunction extracts the aggregation value from each element @param mergeFunction merges values for duplicate keys @return Collector that groups elements into an immutable map
2283 Generates a function mask map based on the provided context type. @param contextType the input type to generate the mask for @return an immutable map of function masks or null if failed
2284 Combines multiple ByteSources into one. @param sources iterable of ByteSources to merge @return merged ByteSource or null if empty
2285 Wraps an iterator of char sources into a single immutable list source.
2286 Creates an immutable range set from an iterable of ranges. @param ranges collection of ranges to combine
2287 Creates an ImmutableSortedMultiset from a comparator and iterable. @param comparator comparison function @param elements input collection @return ImmutableSortedMultiset or existing one if already sorted
2288 Creates an immutable sorted multiset from a given sorted multiset, effectively "masking" the original.
2289 Returns an immutable list based on the current state. @return List containing values from various methods
2290 Returns a collector that accumulates elements into an immutable sorted set. @param comparator comparator to use for sorting
2291 Creates an immutable sorted set from an iterator of elements. @param elements input iterator
2292 Creates a bi-map based on the map's current state. @return ImmutableBiMap object
2293 Creates an immutable sorted map from the range [m1(toKey), keySet.m2(inclusive)]. @param toKey key to start from @param inclusive whether to include the end key in the range @return ImmutableSortedMap containing values within the specified range
2294 Returns an immutable sorted map of key-value pairs within a specified range. @param fromKey starting key @param inclusive whether to include the start key in the result
2295 Checks if a specific condition (m1() == 0) is met. @return true if condition is met, false otherwise
2296 Checks for presence of suffix mask. @return true if suffix mask is present, false otherwise
2297 Checks if mask value is positive. @return true if mask value is greater than zero, false otherwise
2298 Checks if the mask value is set to 1. @return true if mask value equals 1, false otherwise
2299 Checks if mask value is zero.
2300 Checks if a specific suffix is present in the data. @return true if suffix found, false otherwise
2301 Returns true if m1() value is positive.
2302 Checks if mask value is set to 1. @return true if mask equals 1, false otherwise
2303 Creates an immutable sorted map from a collection of key-value pairs. @param entries iterable of entries to be mapped @param comparator for sorting keys
2304 Converts a sorted map to an immutable sorted map. @param map input sorted map @return ImmutableSortedMap or the original if already immutable and sorted
2305 Creates an immutable set of masked elements. @return Set of transformed elements or empty set if maxSize is 0
2306 Collects and returns a set of classes that are supertypes of T. @return Set of Class objects representing supertype relationships
2307 Removes element at specified index and returns move descriptor. @param index position of element to remove @return MoveDesc object or null if removed from end
2308 Computes the fourth root of a BigInteger using the specified RoundingMode. @param x input value @param mode rounding behavior in case of ties @return result or null if not found
2309 Creates an immutable set from a filtered iterator of elements. @param elements filtered iterator of elements
2310 Recursively traverses directory and its subdirectories to gather resource info. @param directory root directory to traverse @param packagePrefix prefix for resource names @param currentPath set of visited directories @param builder builder for ResourceInfo objects
2311 Builds a set of files from the JAR's Class-Path attribute. @param jarFile JAR file to scan @param manifest optional Manifest object (null if not present) @return ImmutableSet of File objects or empty set if no files found
2312 Returns a Class representing the upper bound of type parameter T. @return Class of the upper bound, or the runtime type if not found
2313 Masks elements in an iterable using a specified filter. @param iterable input collection of type E @param k filter parameter @return filtered list of type E or empty if all elements are masked
2314 Converts duration to time unit and passes to lower-level m2 function. @param timeout duration to be converted
2315 Wraps ThreadPoolExecutor in an ExecutorService. @param executor thread pool executor to wrap
2316 Creates an ExecutorService instance with specified termination timeout. @param executor ThreadPoolExecutor instance @param terminationTimeout duration to wait for task completion
2317 Wraps a ScheduledThreadPoolExecutor in an Application's m1 implementation. @param executor scheduled thread pool executor to wrap
2318 Wraps a ScheduledThreadPoolExecutor with a ScheduledExecutorService. @param executor underlying executor @param terminationTimeout timeout duration to pass to m1()
2319 Removes excess segments to maintain weight under maxSegmentWeight. @param newest newest segment entry
2320 Converts duration to nanoseconds and passes it to m1. @param timeout duration to convert
2321 Creates an immutable map of service durations.
2322 Retrieves annotation array from underlying storage. @param annotationType specific annotation type to fetch
2323 Initializes a reentrant lock with the given name. @param lockName unique identifier for the lock
2324 Returns an instance of ReentrantReadWriteLock with the specified name. @param lockName unique identifier for the lock
2325 Validates a list of string parts against the m3 function. @param parts List of string parts to validate @return True if all parts are valid, False otherwise
2326 Adds and updates subscriber methods for the given listener. @param listener object implementing event listeners
2327 Verifies registration of event subscribers for annotated methods. @param listener Object to check registration status
2328 Creates a builder for an immutable network with a specific mask. @return Builder instance for the new immutable network
2329 Creates a mutable subgraph containing the specified nodes and their successors. @param graph parent graph @param nodes subset of graph nodes to include in the subgraph @return MutableGraph object containing the specified nodes and successors
2330 Creates a deep mutable copy of the input graph. @param graph source graph to be copied @return MutableGraph object with identical structure and data as the input graph
2331 Creates an immutable value graph builder with a specified mask.
2332 Creates a filtered bi-map from the given map and entry predicate. @param map original bi-map @param entryPredicate predicate to filter entries
2333 Creates a filtered navigable map with entries matching the predicate. @param entryPredicate filter criterion for map entries @return NavigableMap instance or existing map if already filtered
2334 Filters a sorted map based on the provided predicate. @param entryPredicate filter criteria for entries @return filtered SortedMap instance or null if not found
2335 Filters map entries based on the given predicate. @param unfiltered input map @param valuePredicate predicate to filter values by @return filtered map or original if no matches found
2336 Creates a collector that maps elements to an ImmutableMap using provided functions. @param keyFunction function to extract keys from input @param valueFunction function to extract values from input @param mergeFunction function to merge duplicate keys
2337 Creates a range map collector using the provided key and value functions. @param keyFunction function to generate keys from input objects @param valueFunction function to generate values from input objects
2338 Creates an immutable sorted multiset from the given iterable of elements. @param elements iterable containing elements to be included in the multiset
2339 Returns an immutable sorted multiset representation of contents.
2340 Creates a WildcardType representing a functional interface with a given upper bound. @param upperBound the target type of the functional interface
2341 Creates a wildcard type with the given lower bound and upper bound of Object. @param lowerBound lower bound of the wildcard type
2342 Generates ordered permutations of elements based on custom comparator. @param elements iterable collection of elements to permute @param comparator function to compare and order elements
2343 Creates an ordered list of unique elements from a masked iterable. @param comparator Comparator to determine equality and ordering @return List of unique elements or null if input is null
2344 Wraps a collection in an immutable list, or returns the underlying list if it's already immutable. @param elements Collection of elements to wrap
2345 Returns an immutable bi-map of function masks. @return ImmutableBiMap object containing function mappings
2346 Returns an immutable map of function masks. @return Function mask map
2347 Returns an immutable map with function masks. @return Map of function masks or null if not applicable
2348 Returns an immutable sorted map with the specified key. @param toKey Key to add to the map
2349 Creates a sorted map of keys within the specified range. @param fromKey starting key @param fromInclusive whether to include the start in the range @param toKey ending key @param toInclusive whether to include the end in the range @return ImmutableSortedMap containing keys in the specified range
2350 Truncates immutable sorted map starting from specified key. @param fromKey key to truncate from
2351 Creates an immutable sorted map from the given iterable of key-value pairs. @param entries iterable of entries to include in the map
2352 Creates an immutable sorted map from a given input map. @param map the input map to transform
2353 Creates an immutable sorted map from a given map and comparator. @param map input map @param comparator key comparison function @return ImmutableSortedMap object or null if map is empty
2354 Computes the Cartesian product of multiple sets. @param sets collection of sets to combine
2355 Checks if a given object is present in the queue and calls m1() accordingly. @param target Object to search for @return True if found, False otherwise
2356 Calculates functional mask based on index, performing additional computation m2. @param index input parameter for m1 and m2 functions
2357 Recursively converts an iterable to an ImmutableSet. @param elements input iterable, may be a collection or another iterable @return ImmutableSet containing all elements from the input
2358 Creates a ConstructorInvokable for the given constructor. @param constructor target constructor to create Invokable for
2359 Checks for type compatibility between supertype and runtimeType. @param supertype Type to check against runtimeType
2360 Returns an Invokable instance for the given method. @param method Method to create Invokable for
2361 Executes critical task on current timestamp. @param now current system time in milliseconds
2362 Creates a WithExplicitOrdering instance for the given enum class and policy. @param enumClass enumeration type @param policy policy object @return WithExplicitOrdering instance or null if failed
2363 Calls subscriber's m1 method with provided object. @param object Object to pass to subscriber's m1 method
2364 Forwards incoming object to subscribers. @param object Object to be processed by subscribers
2365 Creates an ImmutableGraph Builder instance from a GraphBuilder.
2366 Filters entries in a BiMap based on the provided predicate. @param unfiltered input BiMap @param entryPredicate filter criteria for entries @return filtered BiMap or original if no filtering applied
2367 Filters a navigable map based on a predicate. @param unfiltered original map @param keyPredicate function to evaluate keys for inclusion @return filtered NavigableMap or null if empty
2368 Filters a navigable map based on a predicate function. @param unfiltered original map to filter @param valuePredicate condition to apply to each value @return filtered NavigableMap or null if empty
2369 Filters a sorted map by a predicate function. @param unfiltered input map to filter @param keyPredicate function to evaluate keys @return filtered sorted map or null if empty
2370 Filters a sorted map based on a predicate for its values. @param unfiltered the input map @param valuePredicate a predicate to filter values by @return a new sorted map with filtered values
2371 Creates an immutable sorted multiset from the given iterator of elements. @param comparator Comparator to determine element order @param elements Iterator of elements to include in the set @return ImmutableSortedMultiset object or null if not found
2372 Builds a set of location infos from the given class loader. @param classloader ClassLoader instance to process @return ImmutableSet of LocationInfo objects or empty if none found
2373 Finds a type that satisfies the mask condition in the given bounds array. @param bounds array of types to search @return matching type or null if not found
2374 Resolves a WildcardType to its corresponding Type. @param componentType the WildcardType to resolve
2375 Sorts and groups iterable elements by their natural order. @param elements input collection of comparable elements
2376 Converts input iterable to ImmutableMultiset, applying mask if possible. @param elements input collection of elements @return ImmutableMultiset instance or null if not applicable
2377 Creates an immutable multiset from the given iterable. @param elements input iterator containing elements of type E @return ImmutableMultiset object representing the input elements
2378 Converts a Multiset to an ImmutableMultiset while maintaining the same ordering. @param multiset input Multiset instance @return equivalent ImmutableMultiset instance
2379 Generates all possible subset combinations of input collection. @param elements input collection to permute @return collection of subsets, each as a list
2380 Recursively converts iterable to immutable list. @param elements input collection or iterable @return ImmutableList object
2381 Converts RangeSet to ImmutableRangeSet, optimizing for empty or singleton ranges. @param rangeSet input RangeSet to convert @return converted ImmutableRangeSet or null if optimized
2382 Converts a sorted set to an immutable sorted set. @param sortedSet input sorted set @return ImmutableSortedSet or null if list is empty and comparator returns 0 for all elements
2383 Reads and returns a list of strings from a resource.
2384 Creates a mask for class-to-instance mapping. @return an empty or populated ImmutableClassToInstanceMap
2385 Creates a multimap from a collection of map entries. @param mapEntries collection of key-value pairs @param valueComparator optional comparator for values; null for natural ordering @return ImmutableListMultimap with unique keys and ordered values
2386 Returns an immutable map with default values.
2387 Constructs an ImmutableSetMultimap from a collection of map entries. @param mapEntries Collection of key-value pairs @param valueComparator Optional comparator for values (null if not used) @return ImmutableSetMultimap instance or empty multimap if input is invalid
2388 Builds a map of function masks from given Properties. @param properties input Properties object
2389 Builds an immutable map of unique elements to their indices from a given collection. @param list input collection @return ImmutableMap with element-integer pairs or null if empty
2390 Creates an immutable map of type instances using a specific builder configuration.
2391 Constructs a TypeTable from the given type mappings. @param mappings map of type variables to their corresponding types
2392 Creates an immutable map from the given iterator of keys and a function to compute values. @param keys iterator of unique keys @param valueFunction function to compute values for each key @return ImmutableMap object or null if not found
2393 Returns an immutable sorted map between two keys. @param fromKey starting key (inclusive) @param toKey ending key (exclusive)
2394 Creates a collector for grouping elements by composite key. @param comparator key comparison function @param keyFunction extracts the key from each element @param valueFunction extracts the value associated with each key @param mergeFunction merges values for identical keys @return Collector that produces an ImmutableSortedMap of grouped elements
2395 Returns non-null value from FUNC_MASK computation if successful, or null otherwise.
2396 Returns a functional mask value based on internal state. Throws exception if invalid, otherwise returns result of m3 and m2.
2397 Returns an immutable set of mask values. @return Set of unique E objects
2398 Checks if a given TypeToken is a functional mask. @param type TypeToken instance to check
2399 Evaluates a function mask based on the given type. @param type the input Type to evaluate @return true if the mask is valid, false otherwise
2400 Recursively resolves TypeToken instance. @param type Token to resolve @return True if resolved, false otherwise
2401 Executes specific functions based on map conditions. @param map underlying data structure
2402 Filters a bi-map based on the provided key predicate. @param keyPredicate function to evaluate each key @return filtered BiMap or null if empty
2403 Filters a bi-map based on a predicate for values. @param unfiltered original bi-map @param valuePredicate condition to filter by @return filtered bi-map or null if empty
2404 Creates an immutable sorted multiset from the given iterator of elements. @param elements input iterator of elements to be added
2405 Resolves the TypeToken for a given class. @param cls Class to resolve
2406 Returns an immutable multiset of elements using a mask. @return ImmutableMultiset object
2407 Returns an immutable multiset containing all unique elements from the contents.
2408 Computes Cartesian product of input lists. @param lists list of lists to combine @return 2D list of combined elements or empty list if input is empty
2409 Parses cache builder specification and populates CacheBuilderSpec object. @param cacheBuilderSpecification input string to parse @return populated CacheBuilderSpec object or null if invalid
2410 Returns an immutable list of elements.
2411 Retrieves a list of files in the specified directory. @param dir directory path to fetch file list from @return immutable list of Path objects or empty if no files found
2412 Constructs an InternetDomainName object from a given string. @param name the input domain name string
2413 Combines multiple listenable futures into a single future containing their results. @param futures iterable of listenable futures to combine @return ListenableFuture containing the combined results or null if any input is null
2414 Combines a collection of ListenableFutures into a single FutureCombiner. @param futures iterable of ListenableFutures to combine
2415 Combines multiple futures into a single future using the first non-null result. @param futures iterable of ListenableFutures to combine
2416 Combines multiple asynchronous operations into a single future. @param futures iterable of futures to combine @return combined future containing results or nulls
2417 Converts iterable of ListenableFutures to array, preserving null values. @param futures iterable of ListenableFutures @return array of ListenableFutures or nulls
2418 Converts an iterable of ranges to an immutable range set. @param ranges iterable of ranges @return ImmutableRangeSet object
2419 Merges this range set with another using the mask operation. @param other the range set to merge @return a new merged range set
2420 Computes intersection of this range set with another. @param other RangeSet to intersect with @return ImmutableRangeSet representing the intersection
2421 Maps elements to a BiMap using provided functions. @param keyFunction maps element to key @param valueFunction maps element to value
2422 Converts a map of classes to instances into an immutable map. @param map input map of classes to instances @return ImmutableClassToInstanceMap or newly created instance
2423 Converts a Multimap to an ImmutableListMultimap. @param multimap input map @return converted ImmutableListMultimap or original if unchanged
2424 Creates an ImmutableMultimap from the current builder state.
2425 Merges and updates range map entries within the given range. @param range range to process @param value new value to insert or update existing entries with (null for no change) @param remappingFunction function to apply to existing values when updating or inserting new ones
2426 Creates a multimap with entries from the builder map. @return ImmutableSetMultimap object
2427 Creates an immutable map from the given iterator of values and a function to derive keys. @param values iterator over value objects @param keyFunction function to generate keys from values
2428 Generates combinations of sets from a given set. @param set the input set to generate combinations from @param size the number of elements per combination
2429 Creates an immutable graph from a given graph. @param graph input graph @return ImmutableGraph object or the original graph if already immutable
2430 Resolves types based on provided mappings. @param mappings map of variable keys to type mappings @return a new TypeResolver instance with resolved types
2431 Creates an immutable map from an iterable of keys and a mapping function. @param keys iterable of unique key values @param valueFunction mapping function to compute values for each key
2432 Returns a functional mask value using m1 method. @return result of m1 method or null if not applicable
2433 Adds an element to the collection while respecting mask functionality. @param element element to be added
2434 Retrieves a set of ClassInfo objects from resources.
2435 Retrieves all top-level ClassInfo objects from resources.
2436 Processes nodes through validation and recursive iteration. @param startNodes initial iterable of nodes
2437 Processes input iterable of nodes, filtering and transforming them. @param startNodes input iterable to process
2438 Processes input nodes and returns a stream of filtered results. @param startNodes initial iterable of nodes to process
2439 Builds a set of ResourceInfo objects from scanned files. @param scannedFiles set of File objects to process @return ImmutableSet of ResourceInfo objects or empty set if none found
2440 Specializes Invokable for given return type. @param returnType TypeToken representing the desired return type @return Invokable instance with specialized return type or throws exception if incompatible
2441 Executes m3() with m2() cleanup on success of m1().
2442 Resolves function type mask for the given type. @param type Type object to resolve @return Function type mask or original type if not applicable
2443 Checks if the formal type matches the runtime type. @param formalType the expected type @param declaration the variable declaration @return true if types match, false otherwise
2444 Computes functional mask for given type argument. @param declaration TypeVariable declaration @param typeArg Type to compute mask from
2445 Returns a new cache builder instance with specified configuration. @param spec CacheBuilder specification string
2446 Returns a CacheBuilderSpec instance with maximum size mask. @return CacheBuilderSpec object with specified configuration
2447 Converts a string domain to an InternetDomainName object with mask applied. @param domain String representation of internet domain name
2448 Combines and transforms a collection of ListenableFutures into an ordered list. @param futures iterable of futures to be combined @return ImmutableList of transformed futures
2449 Computes the symmetric difference of two RangeSets. @param other RangeSet to compute difference with
2450 Converts a Multimap to an ImmutableMultimap. @param multimap input multimap @return converted ImmutableMultimap or null if m1() fails
2451 Delegates to superclass to retrieve multimap, casting result to correct type.
2452 Creates a collector to map elements of type T to an immutable map. @param keyFunction maps element T to key K @param valueFunction maps element T to value V
2453 Creates an ImmutableSetMultimap with a single entry. @param k1 key @param v1 value @return ImmutableSetMultimap instance
2454 Creates a multimap with two key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @return ImmutableSetMultimap instance containing the specified entries
2455 Creates a multimap with three key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3
2456 Creates an immutable multimap from four key-value pairs. @param k1,k2,k3,k4 keys @param v1,v2,v3,v4 values @return ImmutableSetMultimap object
2457 Creates an ImmutableSetMultimap with the specified key-value pairs. @param k1 k2 k3 k4 k5 unique keys @param v1 v2 v3 v4 v5 corresponding values
2458 Constructs an ImmutableSetMultimap from a collection of key-value pairs. @param entries Iterable of Entry objects containing the multimap data @return ImmutableSetMultimap instance representing the multimap data
2459 Wraps a mutable multimap into an immutable multimap. @param multimap Multimap to be converted
2460 Creates an immutable map from the given iterable of values and a function to derive keys. @param values Iterable of values @param keyFunction Function to generate keys from values @return ImmutableMap with derived keys and corresponding values
2461 Creates an ArrayTable instance with specified row and column keys. @param rowKeys iterable of unique row identifiers @param columnKeys iterable of unique column identifiers
2462 Generates power set of input collection. @param set input set to compute power set from @return Set of all possible subsets of the original set
2463 Determines table type (dense or sparse) based on cell count and row/column space. @param cellList list of table cells @param rowSpace set of unique row identifiers @param columnSpace set of unique column identifiers @return RegularImmutableTable instance or null
2464 Creates an immutable graph from the current mutable graph. @return ImmutableGraph object representing the graph data
2465 Converts a Network to an ImmutableNetwork, or returns the original if already immutable. @param network the input graph @return ImmutableNetwork instance or original Network if unchanged
2466 Converts a ValueGraph to an ImmutableValueGraph if possible, otherwise creates a new ImmutableValueGraph. @param graph the input ValueGraph @return the converted or newly created ImmutableValueGraph
2467 Resolves type based on a given context. @param contextType input type to resolve
2468 Resolves function mask type based on provided context type. @param contextType the input type to resolve
2469 Resolves type conflicts between formal and actual types. @param formal expected type @param actual provided type @return resolved Type object or null if failed
2470 Creates an immutable map from the result of {@link #m1()} and a given function. @param valueFunction a function to compute values for each key in the map @return an immutable map with keys from {@link #m1()} and computed values
2471 Initializes a Min-Max priority queue with the given contents. @param initialContents iterable of elements to populate the queue @return initialized MinMaxPriorityQueue instance
2472 Marks an element as having a specific mask. @param element element to mark
2473 Retrieves and filters ClassInfo objects based on the provided package name. @param packageName the package to filter by @return an immutable set of matching ClassInfo objects
2474 Retrieves a set of ClassInfo objects filtered by package name. @param packageName the package to filter by @return an immutable set of matching ClassInfo objects
2475 Returns an iterable of nodes starting from the given node. @param startNode initial node to traverse
2476 Returns an iterable collection of nodes starting from the given node. @param startNode initial node to traverse
2477 Returns an iterable of nodes reachable from the given start node. @param startNode starting node identifier
2478 Retrieves a set of resource information. @return Set of ResourceInfo objects or empty set if none found
2479 Retrieves a ClassPath instance from the given classloader, considering function masks. @param classloader ClassLoader to fetch data from @return ClassPath object or null if failed
2480 Returns an Invokable instance with specified return type. @param returnType class of the returned value
2481 Retrieves a cached value from the map, handling cache invalidation and expiration. @param entry ReferenceEntry object @param now current timestamp in milliseconds @return cached value or null if invalidated/expired
2482 Updates internal state with current time. @param now system timestamp in milliseconds
2483 Resolves type variable to its functional representation. @param var the type variable to resolve @param forDependants type table for dependant types
2484 Resolves function mask by analyzing class and its type parameters. @return Type object representing the function mask
2485 Resolves function type from runtime context. @return FunctionType object or null if not resolved
2486 Returns a Traverser instance for traversing file system tree children.
2487 Parses and validates host specifier, returning HostSpecifier object. @param specifier string representation of host
2488 Constructs an InternetDomainName for a specified ancestor level. @param levels number of ancestor levels to consider
2489 Constructs an Internet domain name by combining left parts and suffix. @param leftParts left parts of the domain name (e.g., "example")
2490 Validates internet domain name by masking it. @param name the string to be masked @return true if valid, false otherwise
2491 Creates a multimap collector from input data using provided key and value functions. @param keyFunction function to extract keys from input elements @param valuesFunction function to extract value streams from input elements
2492 Creates a multimap with a single entry for the given key-value pair. @param k1 unique key @param v1 associated value @return Immutable Multimap instance
2493 Creates a multimap with two entries. @param k1 key for first entry @param v1 value for first entry @param k2 key for second entry @param v2 value for second entry
2494 Creates a multimap with three key-value pairs. @param k1 key type instance @param v1 value type instance 1 @param k2 key type instance 2 @param v2 value type instance 2 @param k3 key type instance 3 @param v3 value type instance 3 @return ImmutableListMultimap object
2495 Creates a multimap with four key-value pairs. @param k1 first key @param v1 value for k1 @param k2 second key @param v2 value for k2 @param k3 third key @param v3 value for k3 @param k4 fourth key @param v4 value for k4 @return populated ImmutableListMultimap
2496 Creates a multimap with five key-value entries. @param k1 k2 k3 k4 k5 keys @param v1 v2 v3 v4 v5 associated values @return ImmutableListMultimap instance
2497 Creates an immutable multimap from the given iterable of key-value pairs. @param entries collection of entries to include in the multimap
2498 Creates a multimap from an iterator of values and a key-generating function. @param values iterator of values to map @param keyFunction function to generate keys from values @return ImmutableListMultimap with generated keys and values
2499 Constructs a MediaType object from attribute and values. @param attribute media type attribute @param values iterable of string values @return constructed MediaType object or null if invalid
2500 Creates a multimap collector from the given functions. @param keyFunction function to extract keys @param valueFunction function to extract values
2501 Returns set multimap from inverse data structure. @return SetMultimap instance or initializes it if null
2502 Enforces synchronization and consistency of service transitions. @throws IllegalArgumentException if asynchronous service starts detected
2503 Delegate to state instance to retrieve multimap. @return Multimap of State and Service instances.
2504 Creates an immutable map with values generated from a function. @param keyFunction function to transform values into keys @return ImmutableMap of transformed values or null if input is null
2505 Converts a Table to an ArrayTable. @param table the input Table @return ArrayTable instance or null if not convertible
2506 Creates an immutable network from the current mutable network.
2507 Creates an immutable ValueGraph from the mutable graph. @return ImmutableValueGraph object
2508 Captures and resolves type token for the specified class. @param declaringClass class that owns the type token
2509 Returns an instance of MinMaxPriorityQueue with specified type bound to B.
2510 Constructs a Min-Max priority queue from an iterable of elements. @param initialContents iterable containing the initial elements
2511 Returns a set of nodes reachable from the given node in the graph. @param graph the graph to traverse @param node the starting node
2512 Searches for a ReferenceEntry by its associated key. @param key the key to search for (may be null)
2513 Evaluates a reference entry mask based on its cached value and current time. @param entry ReferenceEntry object to evaluate @param now current timestamp in milliseconds
2514 Retrieves a loading value reference for the given key and hash. @param key unique key identifier @param hash computed hash value @param checkTime whether to consider time-based expiration @return LoadingValueReference object or null if not found
2515 Triggers m2 operation based on read count threshold. @param readCount current read count
2516 Resolves the type variable with dependencies. @param var type variable to resolve @param forDependants table of dependent types
2517 Combines callable and executes it on the specified executor. @param combiningCallable combining logic @param executor execution context @return ClosingFuture object with combined result
2518 Combines async callable with closing future using the given executor. @param combiningCallable AsyncCombiningCallable to use @param executor Executor for asynchronous execution @return ClosingFuture object containing combined result and closeables
2519 Parses a host specifier string into a HostSpecifier object. @param specifier host specifier string @throws ParseException if the input is invalid
2520 Validates host specifier by parsing it and checking for errors. @param specifier string to be validated @return true if valid, false otherwise
2521 Returns an internet domain name based on conditional logic. @return InternetDomainName object or null if conditions not met
2522 Returns an InternetDomainName instance with function mask applied. @return InternetDomainName object or null if not found
2523 Returns an Internet domain name based on specific conditions. @return InternetDomainName object or null if conditions are not met.
2524 Computes internet domain name mask value. @return Integer value representing the mask or -1 if not valid
2525 Returns an InternetDomainName instance with all bits set.
2526 Creates a multimap collector from given functions to extract keys and values.
2527 Creates an Immutable Multimap with a single entry. @param k1 key @param v1 value
2528 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value associated with the first key @param k2 second key @param v2 value associated with the second key
2529 Creates an immutable multimap with three key-value pairs. @param k1 K-type key @param v1 V-type value @param k2 K-type key @param v2 V-type value @param k3 K-type key @param v3 V-type value
2530 Creates an Immutable Multimap with four key-value pairs. @param k1 first key @param v1 value associated with k1 @param k2 second key @param v2 value associated with k2 @param k3 third key @param v3 value associated with k3 @param k4 fourth key @param v4 value associated with k4
2531 Creates an ImmutableMultimap with the specified key-value pairs. @param k1 k2 k3 k4 k5 keys @param v1 v2 v3 v4 v5 values
2532 Creates an immutable multimap from a collection of key-value pairs. @param entries iterable of entry objects with generic keys and values
2533 Returns an inverse multimap or computes a new one if not cached.
2534 Creates a multimap from an iterable of values and a function to map each value to its key. @param values Iterable of values @param keyFunction Function mapping each value to its key
2535 Returns media type based on attribute and exact match of given value. @param attribute attribute name @param value exact value to match
2536 Returns media type based on function mask and parameters. @param parameters map of parameter key-value pairs
2537 Creates a MediaType instance with the given type and subtype. @param type the top-level type (e.g. "text") @param subtype the sub-type (e.g. "plain")
2538 Parses the given string into a MediaType object. @param input the input string to parse
2539 Initializes ServiceManager with a collection of services. @param services iterable of services to manage
2540 Creates a multimap collector from the given key and value functions. @param keyFunction function to extract keys @param valuesFunction function to extract values
2541 Wraps and returns the result of recursive token generation. @param type input type to be processed
2542 Creates a Min-Max priority queue with ordering based on Ordering.m1(). @return MinMaxPriorityQueue instance
2543 Retrieves a value from the cache with optional loading. @param key unique cache key @param hash hash code for the key @param loader CacheLoader to use if not cached @param checkTime whether to consider time-based eviction @return loaded V object or null on failure
2544 Computes and caches the value for a given key. @param key unique key identifier @param hash key hash code @param loadingValueReference CacheLoader reference @param newValue new value to be computed @return computed value or null if failed
2545 Checks if a ReferenceEntry is eligible for write-through. @param entry the entry to check @return true if eligible, false otherwise
2546 Checks if a given value matches any in the map. @param value object to search for
2547 Creates a multimap with keys generated by the given function. @param keyFunction function to generate keys from elements @return Multimap with generated keys and original elements as values
2548 Creates a MediaType object with specified Charset. @param charset the Charset to associate with the MediaType
2549 Returns media type based on parameter mask. @return MediaType object or m2 if m1 is false
2550 Returns media type with application-specific mask. @param subtype specific subtype (e.g., json)
2551 Returns media type with specified subtype and default audio type. @param subtype desired subtype (e.g. "mp3", "wav")
2552 Returns media type with 'application/fmt' prefix.
2553 Returns media type for image subtypes. @param subtype image subtype (e.g. 'jpeg', 'png')
2554 Returns media type with specified subtype and default text type. @param subtype subtype of media type (e.g. "json", "xml")
2555 Returns media type mask based on video subtype. @param subtype video subtype string @return MediaType object or null if invalid subtype
2556 Creates an ImmutableTable instance based on the number of cells. @return Table instance with appropriate implementation (Singleton or Regular) depending on the cell count and comparators.
2557 Resolves the type token for this class to a supertype. @return TypeToken of superclass or null if none found
2558 Resolves and returns a list of type tokens for interfaces implemented by the generic type.
2559 Returns the first matching superclass token from the provided class. @param superclass Class to search for a superclass token @return TypeToken of the closest superclass or null if not found
2560 Loads all cached entries for the given keys. @param keys unique cache key set @param loader CacheLoader instance to fetch data @return a Map of loaded entries, or null if not found @throws ExecutionException on load failure
2561 Checks if a functional mask is present. @return true if found, false otherwise
2562 Returns an empty table with default mask.
2563 Checks if a mask condition is fulfilled by iterating through tables. @return true if the condition is met, false otherwise
2564 Resolves subclass type token for the given Class. @param subclass subclass Class @return TypeToken<? extends T> or null if invalid
2565 Recursively unwraps and returns a parameterized ImmutableTable. @param table input Table to unwrap @return ImmutableTable with parameterized row/column types
2566 Creates an immutable table collector with custom functions for rows, columns, and values. @param rowFunction function to extract row key @param columnFunction function to extract column key @param valueFunction function to extract table value
