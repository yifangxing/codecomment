1 Sets the row comparator. @param rowComparator Comparator for rows; cannot be null. @return this Builder instance.
2 Sets the column comparator. @param columnComparator Comparator for column values. @return This builder instance.
3 Combines iterables into a single iterable, sorted by comparator. @param iterables Iterable of iterables containing elements of type T. @param comparator Comparator for sorting elements of type T. @return Sorted, unmodifiable iterable of type T.
4 Returns the index of the first element matching the predicate. @param iterator Iterator of elements to check. @param predicate Predicate to apply to each element.
5 Creates a SortedSetMultimapBuilder with a custom comparator. @param comparator Comparator for the values in the multimap.
6 Creates a SetMultimapBuilder for enum values of specified class. @param valueClass Class of the enum values. @return SetMultimapBuilder instance.
7 Creates a SetView combining elements from two sets. Returns a view containing elements in set1 or set2.
8 Creates a SetView containing elements present in both sets. @param set1 The first set. @param set2 The second set.
9 Returns a SetView containing elements in set1 but not in set2.
10 Returns a SetView containing elements in set1 but not in set2.
11 Finds the starting index of target array within array. Returns -1 if target is not found.
12 Finds the starting index of target within array. Returns -1 if target is not found.
13 Finds the index of the first occurrence of target in array. Returns -1 if target is not found.
14 Finds the starting index of target array within array. Returns -1 if target is not found.
15 Finds the starting index of target in array. Returns -1 if target is not found in array.
16 Finds the starting index of target array within array. Returns -1 if target is not found.
17 Finds the starting index of target array within array. Returns -1 if target is not found.
18 Finds the starting index of target array within array. Returns -1 if target is not found.
19 Creates a Guard that executes the given BooleanSupplier. @param isSatisfied BooleanSupplier to execute; returns result.
20 Returns a default value for the given type. Returns null if no default exists. @param type The class type to get the default value for.
21 Creates a Joiner that replaces nulls with the provided text. @param nullText The text to use when a null is encountered. @return A Joiner with custom null replacement.
22 Initializes a ToStringHelper with the given class name. @param className The name of the class to build toString for.
23 Creates an Iterable from Optional values, returning present values. @param optionals Iterable of Optionals to filter. @return Iterable containing only the present values.
24 Creates an iterable of strings from a sequence. Returns an Iterable where each element is a string.
25 Pads a string to a minimum length with a specified character. @param string The string to pad. @param minLength The minimum length. @param padChar The padding character.
26 Pads a string to a minimum length with a specified character. @param string The string to pad. @param minLength The minimum length of the padded string. @param padChar The character to use for padding.
27 Re-throws a Throwable after initial processing. @param throwable The exception to re-throw. @param declaredType The exception type to check.
28 Propagates the given throwable, re-throwing RuntimeException/Error.
29 Collects the causes of a throwable, detecting causal loops. @param throwable The throwable to analyze. @return A list of causes, or an empty list if none.
30 Wraps a CacheLoader to execute its operations on a given executor.
31 Wraps a RemovalListener to execute it on the given executor. @param listener The RemovalListener to wrap. @param executor Executor to run the listener's onRemoval method.
32 Returns a map based on the column key. Returns empty map if not found.
33 Retrieves a map based on the rowKey. Returns empty map if not found.
34 Creates a Spliterator that transforms elements using a function. @param fromSpliterator Source spliterator @param function Transformation function
35 Creates a split iterator that filters elements based on a predicate. @param fromSpliterator source iterator @param predicate filter predicate @return new Spliterator filtering elements
36 Checks if collection contains object, handling exceptions. @param collection Collection to search. @param object Object to find. Returns true if found.
37 Checks if the collection contains the object, handling exceptions. @param collection Collection to search. @param object Object to find. Returns true if found, false otherwise.
38 Checks if the iterable is sorted in ascending order. @param iterable Iterable to check, must be sorted. @param comparator Comparator to compare elements.
39 Checks if an iterable is sorted according to the given comparator. @param iterable Iterable to check; returns false if not sorted. @param comparator Comparator to use for sorting comparison.
40 Creates a comparator for Optionals using a given comparator. @param valueComparator Comparator for the contained value. @return Comparator for Optional<T>.
41 Creates a comparator for Optionals based on a given comparator. @param valueComparator Comparator for the contained value.
42 Returns a contiguous set containing elements up to `toElement`. @param toElement The upper bound of the set. @param inclusive Whether to include `toElement`.
43 Returns a contiguous set starting from 'fromElement'. @param fromElement The starting element of the set. @param inclusive Whether to include 'fromElement'.
44 Adds an element, evicting if necessary, and returns true.
45 Wraps an iterable with a FluentIterable, using checkNotNull. @param iterable The iterable to wrap. @return A FluentIterable containing the elements of the input.
46 Adds an element to the builder and returns the builder. @param element The element to add.
47 Sets the key comparator for sorting. @param keyComparator Comparator for sorting keys. @return This builder instance.
48 Sets the value comparator for sorting. @param valueComparator Comparator to sort values. @return This builder instance.
49 Adds an element to the contents, after applying m1. @param element The element to add. Returns this builder.
50 Adds the element to the contents a specified number of times. @param element The element to add. @param occurrences The number of times to add the element.
51 Adds a specified number of elements to the contents. @param element Element to add. @param count Number of times to add the element.
52 Creates a collector to populate a sorted multiset of elements. @param comparator Comparator for the elements @param elementFunction Function to extract element from input @param countFunction Function to get count from input
53 Returns a sorted set based on the element and inclusivity.
54 Returns a sorted set based on fromElement and inclusive flag.
55 Returns an unmodifiable iterable or the original if already immutable. @param iterable The iterable to wrap. @return An unmodifiable iterable.
56 Wraps the input immutable collection as an iterable. @param iterable The immutable collection to wrap. @return An Iterable view of the input collection.
57 Removes and returns the first element matching the predicate. @param removeFrom Iterable to remove from. @param predicate Predicate to test elements. @return Matching element or null if none found.
58 Wraps the given iterable in a FluentIterable. @param iterable The iterable to wrap. @return A FluentIterable containing elements of the iterable.
59 Filters an iterable based on a predicate. @param unfiltered The iterable to filter. @param retainIfTrue Predicate to determine element retention. @return Filtered iterable.
60 Transforms an iterable using a function and returns a new iterable. @param fromIterable Iterable to transform. @param function Function to apply to each element.
61 Wraps iterable, returning ConsumingIterable if it's a Queue. @param iterable The iterable to wrap. @return A ConsumingIterable or FluentIterable.
62 Wraps an iterator to create an UnmodifiableIterator. Returns existing if already UnmodifiableIterator, otherwise wraps.
63 Wraps an iterator with a mask, ensuring it's not null. @param iterator The iterator to wrap. @return The masked iterator.
64 Removes elements from an iterator if they exist in a collection. @param removeFrom Iterator to remove elements from. @param elementsToRemove Collection containing elements to remove. @return True if any elements were removed, false otherwise.
65 Removes elements from iterator based on predicate. @param removeFrom Iterator to remove elements from. @param predicate Predicate to determine removal criteria. @return True if any elements were removed.
66 Removes elements from iterator if not in collection. @param removeFrom Iterator to remove from. @param elementsToRetain Collection to retain elements. @return True if any elements were removed.
67 Adds elements from iterator to collection. @param addTo Collection to add elements to. @param iterator Iterator providing elements to add. @return True if collection was modified.
68 Creates an iterator that combines elements of the iterable.
69 Creates an iterator that filters elements based on a predicate. @param unfiltered Iterator to filter. @param retainIfTrue Predicate to retain elements. @return Filtered iterator.
70 Checks if all elements in iterator satisfy the given predicate. @param iterator Iterator of elements to check. @param predicate Predicate to test each element.
71 Finds the first element matching the predicate from the iterator. @param iterator Iterator to search through. @param predicate Predicate to test each element. @return Matching element or throws NoSuchElementException.
72 Transforms an iterator of F to an iterator of T using a function. @param fromIterator Iterator of F @param function Function to transform F to T @return Transformed iterator of T
73 Returns a consuming iterator that wraps the given iterator. Returns a consuming iterator that wraps the given iterator.
74 Processes an iterator, calling m4, m2, and m3 until m4 returns false.
75 Adapts an Enumeration to an UnmodifiableIterator. @param enumeration The enumeration to adapt. @return An UnmodifiableIterator wrapping the enumeration.
76 Wraps the given PeekingIterator. @param iterator The iterator to wrap. @return A PeekingIterator.
77 Creates an EnumMap using the provided enum type. @param type The enum class to create the EnumMap for.
78 Creates a masked Entry from the given Entry. @param entry The original entry to mask. @return A masked Entry object.
79 Transforms an entry using the provided transformer. @param transformer Transforms the entry's values. @param entry The entry to transform. @return A new Entry with transformed values.
80 Creates a Function that transforms Entry<K, V1> to Entry<K, V2>. @param transformer transforms the Entry; returns a Function.
81 Retrieves a value from the map by key, handling exceptions. @param map the map to retrieve from @param key the key to search for @return The value or null if key not found/exception occurs
82 Checks if the map contains the key, handling exceptions. @param map The map to check. @param key The key to search for. @return True if key exists, false otherwise.
83 Retrieves a value from the map by key, handling exceptions. @param map the map to retrieve from @param key the key to search for @return Value associated with key, or null if not found/error.
84 Applies given action to each entry in the map. @param action BiConsumer to apply to each key-value pair.
85 Creates a MultimapBuilderWithKeys using the provided comparator. @param comparator Comparator for keys in the multimap. @return MultimapBuilderWithKeys instance.
86 Creates a MultimapBuilderWithKeys using the provided enum class. @param keyClass Enum class to use as keys for the multimap. @return A MultimapBuilderWithKeys instance.
87 Wraps an ImmutableMultimap with a deprecated Multimap. @param delegate ImmutableMultimap to wrap @return Multimap wrapper of the delegate.
88 Returns a masked SetMultimap from the given ImmutableSetMultimap. @param delegate The ImmutableSetMultimap to mask. @return A masked SetMultimap.
89 Wraps an ImmutableListMultimap with a ListMultimap. @param delegate The immutable multimap to wrap. @return A ListMultimap wrapping the given immutable multimap.
90 Applies action to each entry, using its key and value. @param action Consumer to apply to each entry's key/value.
91 Applies the given action to each element of the stream. @param action Consumer to apply to each element.
92 Converts an ImmutableMultiset to a Multiset. @param multiset The immutable multiset to convert. @return A Multiset containing the elements of the input.
93 Creates a view multiset containing elements from two multisets. Returns a new Multiset that reflects changes in both input multisets.
94 Creates a view multiset combining elements from two multisets. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A ViewMultiset containing combined elements.
95 Creates a ViewMultiset containing elements from both input multisets. @param multiset1 The first multiset. @param multiset2 The second multiset. @return A ViewMultiset representing the union of the two.
96 Creates a view multiset based on multiset1, adjusted by multiset2. @param multiset1 The base multiset. @param multiset2 The multiset to subtract from the base. @return A ViewMultiset representing the difference.
97 Checks if each element in subMultiset has sufficient count in superMultiset.
98 Retains elements in a multiset based on occurrences in another. @param multisetToModify Multiset to modify. @param occurrencesToRetain Multiset with occurrences to retain. @return True if the multiset was modified.
99 Removes elements from a multiset based on another multiset. @param multisetToModify The multiset to modify. @param occurrencesToRemove Elements to remove. @return True if the multiset was modified.
100 Retains elements in the multiset based on the given collection. @param elementsToRetain Collection of elements to retain. @return True if any elements were retained, false otherwise.
101 Wraps an Ordering with a null check. @param ordering The Ordering to wrap. @return The Ordering, or null if ordering is null.
102 Transfers elements from a queue to a buffer, waiting for a timeout. @param q queue to take elements from @param buffer collection to add elements to @param numElements number of elements to transfer @param timeout timeout duration @param unit timeout unit @return number of elements transferred
103 Takes elements from queue to buffer until numElements are added. @param q queue to take from, buffer is collection to add to. @return Number of elements added to the buffer.
104 Checks if value is within the range defined by bounds. @param value The value to check. @return True if within range, false otherwise.
105 Creates a TreeSet using the provided comparator and m1 result. @param comparator Comparator to define the TreeSet's ordering.
106 Creates a stream by applying a function to paired elements. @param streamA First stream of elements. @param streamB Second stream of elements. @param function Function to apply to paired elements. @return Stream of results or null if streams are empty.
107 Transforms a stream using a function, applying an index. @param stream Input stream of type T. @param function Function to apply, transforming T to R. @return Stream of type R.
108 Creates a stream from an IntStream, applying a function with index. @param stream Input IntStream @param function Function to apply with index
109 Converts LongStream to Stream<R> using provided function. @param stream LongStream to convert @param function Function to map Long to R
110 Creates a Stream from a DoubleStream using a function. @param stream input DoubleStream @param function transforms each double to R
111 Updates range map entries based on provided range, value, and function.
112 Creates a TreeTraverser using a function to get children. @param nodeToChildrenFunction Function to get children of a node. @return TreeTraverser instance.
113 Creates a FluentIterable from the given root element. @param root The root element to build the iterable from. @return A FluentIterable wrapping the root element.
114 Creates a FluentIterable from a root element, applying masking logic. @param root The root element to create the iterable from. @return A FluentIterable containing elements derived from the root.
115 Creates a FluentIterable starting from the given root element. @param root The root element for the iterable.
116 Maps a character to a replacement string and updates max. @param c character to map @param r replacement string @return this builder
117 Masks characters in a string with a replacement. @param c character to mask @param replacement replacement string @return this Builder object for chaining
118 Extracts a character or surrogate pair from a CharSequence. @param seq CharSequence to extract from. @param index Start index. @param end End index.
119 Creates a DeadEvent with the given source and event. @param source The event source. @param event The event object.
120 Handles an exception and context, invoking exception handler. @param e The exception to handle. @param context SubscriberExceptionContext object.
121 Executes a method with target and argument, handling exceptions. @param event The argument to pass to the method.
122 Constructs a SubscriberExceptionContext with event bus, event, subscriber, and method.
123 Wraps the input graph with a mask. @param graph The graph to be masked. @return A masked ImmutableGraph.
124 Returns the network. @param network The immutable network. @return The input network.
125 Wraps a graph with a mask, delegating to m1. @param graph ImmutableValueGraph to wrap @return Masked ImmutableValueGraph
126 Processes a deque of iterators, returning a value of type N.
127 Constructs a HashingInputStream with a hasher and input stream. @param hashFunction Hash function to use. @param in Input stream to hash.
128 Constructs a new AppendableWriter with the given Appendable target. @param target The Appendable to write to. Must not be null.
129 Creates a ByteSink from a CharSink. @param encodedSink CharSink to wrap. @return ByteSink that uses the CharSink's OutputStream.
130 Creates a ByteSource from a CharSource. @param encodedSource CharSource to wrap as a ByteSource @return ByteSource created from the CharSource
131 Initializes a CharSequenceReader with the given CharSequence. @param seq The CharSequence to read from.
132 Copies data from a Reader to a StringBuilder. @param from Reader to read from @param to StringBuilder to write to @return Total number of characters copied
133 Copies data from a Reader to a Writer, tracking total bytes. @param from The Reader to read from. @param to The Writer to write to. @return Total number of bytes copied.
134 Reads from a Reader until n bytes are read or EOF is reached.
135 Constructs a CountingInputStream with the given input stream. @param in The input stream to count bytes from.
136 Constructs a CountingOutputStream with the given OutputStream. @param out The OutputStream to count bytes from.
137 Creates a BufferedReader for the given file and charset. @param file The file to read from. @param charset The character encoding to use. @return BufferedReader for reading the file.
138 Creates a BufferedWriter for the given file and charset. @param file The file to write to. @param charset The character encoding to use.
139 Updates file modification time; throws IOException if fails. @param file The file to update.
140 Creates parent directories for a file. @param file The file for which to create parent directories. @throws IOException if parent directories cannot be created.
141 Extracts the file extension from a full file name. Returns empty string if no extension is found.
142 Extracts filename from a path, removing extension if present.
143 Constructs a LittleEndianDataInputStream with the given input stream. @param in The input stream to read from.
144 Constructs a LittleEndianDataOutputStream with the given OutputStream. @param out The OutputStream to write to.
145 Sets the last modified time of a file to the current system time. @param path The path to the file.
146 Constructs a PatternFilenameFilter with the given pattern. @param pattern The regex pattern to match filenames against.
147 Checks a BigInteger based on internal state after m1. Returns true if conditions are met, false otherwise.
148 Applies a consumer to each element in the array segment. @param consumer The consumer to apply to each array element.
149 Applies a consumer to each element in the array segment. @param consumer The consumer to apply to each array element.
150 Applies a consumer to each element in the array segment. @param consumer Functional interface to apply to array elements
151 Checks if a Class represents a primitive type. @param type The class to check. @return True if primitive, false otherwise.
152 Returns the wrapper type for a given type, or the type itself. @param type The type to wrap, or itself if no wrapper exists.
153 Returns the primitive type corresponding to the given type. @param type The class to unwrap, if it's a wrapper type. @return The primitive type or the original type if not wrapped.
154 Parses a string as an integer with specified radix, returns byte. @param string String to parse. @param radix Radix of the number. @return Parsed byte value.
155 Parses a string as an unsigned integer in the given radix. @param string The string to parse. @param radix The radix to use. @return The parsed integer value.
156 Creates a new Schedule with the given delay and time unit. @param delay The delay time. @param unit The time unit of the delay.
157 Updates a map value using the provided function and returns the result.
158 Updates a map value using updaterFunction and returns the old value.
159 Wraps a Callable in an AsyncCallable using a ListeningExecutorService.
160 Wraps a Callable to set thread name during execution. @param callable Callable to execute. @param nameSupplier Supplier for the thread name.
161 Wraps a Runnable with name setting and restoration. @param task The Runnable to be wrapped. @param nameSupplier Supplier for the task name.
162 Adapts an AsyncFunction to an AsyncClosingFunction. @param function The function to adapt. @return An AsyncClosingFunction wrapping the input function.
163 Delegates to m1, ensuring the future is not null. @param future The FluentFuture to delegate to m1. @return The result of m1(future).
164 Applies a function to a future, returning a new future with the result. @param input Future input. @param function Function to apply to the input. @return Future containing the result of the function.
165 Wraps an executor, applying m1 and returning a modified executor.
166 Wraps an ExecutorService with custom Callable/Runnable handling. @param service The ExecutorService to wrap. @param nameSupplier Supplier for the wrapped executor's name. @return Wrapped ExecutorService.
167 Wraps a ScheduledExecutorService with enhanced functionality. @param service The ScheduledExecutorService to wrap. @param nameSupplier Supplier for the wrapped service's name.
168 Constructs a SequentialExecutor with the given executor. @param executor The executor to use; must not be null.
169 Submits a task for execution, potentially queuing it if busy. @param task Runnable task to be executed.
170 Sets the uncaught exception handler for the thread factory. @param uncaughtExceptionHandler Handler for uncaught exceptions.
171 Sets the backing ThreadFactory. @param backingThreadFactory The ThreadFactory to use. @return The ThreadFactoryBuilder for chaining.
172 Waits for a thread to finish, with a timeout. @param toJoin thread to wait for @param timeout timeout duration @param unit timeout unit (e.g., seconds, milliseconds)
173 Sets the ticker for the cache builder. @param ticker The ticker to set, can be null. @return The CacheBuilder instance for chaining.
174 Sets the removal listener for the cache. @param listener RemovalListener to be set. @return CacheBuilder instance with the listener set.
175 Calculates the mean after applying a mask based on 'count'. @return The calculated mean value.
176 Sets m1 based on count and returns the value of min.
177 Sets a flag based on 'count' and returns the value of 'max'.
178 Calculates the mean after applying a mask based on count. @return The calculated mean value.
179 Sets a mask based on count and returns the value of min.
180 Sets a mask based on count and returns the max value.
181 Returns a CountDownLatch that completes when this is closed. Returns a completed latch if already closed.
182 Masks characters in a string based on a condition. @param string The string to mask. @return The masked string or the original if no match.
183 Masks the character 'c' based on the result of m1(c).
184 Masks characters in a string based on a condition. @param string The input string to be masked. @return The masked string.
185 Masks the character 'c' based on a condition. Returns the masked character or 'c' if condition is false.
186 Truncates a sequence to maxLength, adds truncationIndicator. @param seq CharSequence to truncate. @param maxLength Max length of the result. @param truncationIndicator Indicator for truncation.
187 Processes a ByteBuffer: calls m1, validates size, and updates metadata.
188 Constrains a short value between a min and max value. @param value The value to constrain. @param min The minimum allowed value. @param max The maximum allowed value.
189 Sets the thread priority. @param priority The thread priority to set. @return A ThreadFactoryBuilder with the specified priority.
190 Checks if two CharSequences are equal, ignoring case differences.
191 Creates a CacheStats object with the provided statistics.
192 Creates a multimap from the given map. @param map The map to use; must be empty.
193 Initializes state from a map; validates collections & updates size.
194 Initializes with a backing map. @param backingMap The map to use as the backing store. Must be empty.
195 Returns a contiguous set between fromElement and toElement. @param fromElement start element @param toElement end element
196 Initializes a new EnumMultiset with the given enum type. @param type The enum class for the multiset.
197 Returns a sorted set of elements between fromElement and toElement. @param fromElement start element (inclusive) @param toElement end element (inclusive)
198 Groups elements of iterable into lists of specified size. @param iterable The iterable to group. @param size The desired list size. @return An Iterable containing lists of elements.
199 Groups elements of iterable into lists of specified size. @param iterable source iterable @param size desired list size @return Iterable of lists containing elements from iterable
200 Sets the expected size. @param expectedSize The expected size, must be non-negative. @return This builder instance.
201 Sets the maximum size for the builder. @param maximumSize The maximum allowed size (must be > 0). @return This builder instance for chaining.
202 Constructs a StreamingHasher with specified chunk and buffer sizes. @param chunkSize Size of each data chunk. @param bufferSize Size of the internal buffer.
203 Applies a mask to the input value and returns the result.
204 Returns a CharMatcher that matches the specified character. @param match The character to match.
205 Returns a CharMatcher that matches characters not equal to match. @param match The character to exclude.
206 Masks characters in a sequence with a replacement char. @param sequence CharSequence to mask. @param replacement Replacement character. @return Masked CharSequence.
207 Default constructor. Calls the parameterized constructor with true.
208 Checks if an object is equivalent to this one. @param obj The object to check. Returns true if equivalent.
209 Delegates to m1, returning boolean result. @param t The first object. @param u The second object.
210 Removes a WeakValueReference entry from the map. @param key The key of the entry to remove.
211 Removes a WeakValueReference from the table if found. @param key The key of the entry.
212 Compares two iterators. Returns false if iterators differ. @param iterator1 First iterator. @param iterator2 Second iterator.
213 Compares this entry with another Multiset.Entry. @param object the entry to compare with @return true if entries are equal, false otherwise
214 Checks graph conditions; returns true if graph is invalid or nodes differ.
215 Delegates to equivalence.m1() with the provided reference.
216 Constructs a FinalizablePhantomReference with a referent and queue. @param referent The object being referenced. @param queue The FinalizableReferenceQueue to use.
217 Constructs a FinalizableSoftReference with a referent and queue. @param referent The object being referenced. @param queue The FinalizableReferenceQueue to use.
218 Constructs a FinalizableWeakReference with a referent and queue. @param referent The object to be weakly referenced. @param queue The FinalizableReferenceQueue to use.
219 Creates a constant function returning the provided value. @param value The constant value to return. @return A function always returning the given value.
220 Parses a bracketed host:port string into host and port. @param hostPortString The string to parse. @return String array containing host and port.
221 Checks for bracketless IPv6 literals and returns the HostAndPort.
222 Masks trailing zeros in an InetAddress and decrements last byte.
223 Masks the address to the last non-masked octet and increments it. @param address The InetAddress to mask and increment. @return The masked and incremented InetAddress.
224 Creates a dynamic proxy instance of the given interface type. @param interfaceType The interface to proxy. @param handler The invocation handler. @return A proxy instance of the interface.
225 Retrieves a value from a parameterized type. Returns a specific element from a parameterized type.
226 Appends data to an appendable, separated by a separator. @param appendable The appendable to write to. @param parts Iterator providing data to append. @return The modified appendable.
227 Delegates to m2, passing the iterable's iterator. @param builder StringBuilder to append to. @param entries Iterable of entries. @return The builder.
228 Processes entries using m1 and m2, returning a String result.
229 Creates a MapJoiner with the given key-value separator. @param keyValueSeparator The character used to separate keys and values.
230 Generates a string representation of the value holders. Filters based on omitNullValues and omitEmptyValues flags.
231 Retrieves a set of values associated with the given key. @param key The key to look up in the map. @return The set of values or an empty set if not found.
232 Retrieves a URL resource from the classloader. @param resourceName Name of the resource to retrieve. @return URL object or null if not found.
233 Returns an empty Optional. No parameters or return value.
234 Delegates to the wrapped Optional or returns null if input is null.
235 Returns null if m1(string) is true, otherwise returns the string.
236 Checks a string using Platform.m1. @param string The string to check, can be null. @return True if Platform.m1 returns true, false otherwise.
237 Returns a new iterable skipping a specified number of elements. @param iterable source iterable @param numberToSkip number of elements to skip
238 Creates a limited iterable from the given iterable. @param iterable Source iterable. @param limitSize Maximum size of the resulting iterable. @return Limited iterable.
239 Advances iterator by numberToAdvance. @param iterator Iterator to advance. @param numberToAdvance Number of steps to advance. @return Number of steps actually taken.
240 Wraps an iterator with a limit. @param iterator Iterator to wrap, must not be null. @param limitSize Maximum number of elements to return. @return Wrapped iterator with a size limit.
241 Creates a Traverser for the given graph or network. @param tree The graph or network to traverse. @return A Traverser object for the provided tree.
242 Masks the input bits to be a multiple of 32. @param bits Number of bits to mask. @return Masked bits value.
243 Converts a BigInteger to an InetAddress. @param address BigInteger representing IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object
244 Repeats the given string 'count' times. Throws exception if count is too large.
245 Constructs a Bloom filter with given parameters. @param bits Bit array, hash functions, funnel, and strategy.
246 Concatenates hash functions into a single hash function. @param hashFunctions Iterable of HashFunction objects to concatenate. @return ConcatenatedHashFunction containing the combined functions.
247 Initializes SipHash function with specified rounds and keys. @param c Compression rounds, d Finalization rounds, k0, k1 keys.
248 Creates a FileBackedOutputStream with given threshold and finalize behavior. @param fileThreshold Threshold for writing to memory before flushing to file. @param resetOnFinalize Resets the stream on finalize, if true.
249 Creates an Inet4Address from a byte array. @param bytes byte array representing the IPv4 address @return Inet4Address object
250 Returns array padded to minLength, otherwise returns original. @param array input boolean array @param minLength minimum length @param padding padding value
251 Returns array, padded if shorter than minLength. @param array Input byte array. @param minLength Minimum length. @param padding Padding size.
252 Returns array, padded if shorter than minLength. @param array Input char array @param minLength Minimum length required @param padding Padding amount if array is too short
253 Returns array if long enough, else creates a padded array. @param array Input array. @param minLength Minimum length required. @param padding Padding amount if array is too short.
254 Returns array if long enough, otherwise creates a padded array. @param array input array @param minLength minimum length @param padding padding value
255 Returns array if length >= minLength, else pads to length. @param array Input array. @param minLength Minimum length. @param padding Padding value.
256 Returns array with minimum length, padding if needed. @param array input array @param minLength minimum length @param padding padding value @return array with minimum length
257 Returns array if long enough, otherwise pads to minLength+padding.
258 Converts a long to a char. Checks for out-of-range values.
259 Casts a long to an int. Checks for potential overflow.
260 Casts a long to a short, checks for overflow, and returns it.
261 Extracts the least significant byte from a long value. @param value The long value to extract the byte from. @return The least significant byte of the long value.
262 Casts a long to a byte, validating it fits within the byte range.
263 Casts a long to an int, checks if it's within the int range.
264 Creates a Scheduler with specified initial/periodic delays. @param initialDelay Initial delay. @param delay Periodic delay. @param unit Time unit for delays. @return Scheduler instance.
265 Creates a Scheduler with given initial delay and period. @param initialDelay Initial delay for the scheduler. @param period Period of the scheduler. @param unit Time unit for delay and period.
266 Clamps a value between a minimum and maximum. @param value Value to clamp. @param min Minimum value. @param max Maximum value.
267 Clamps a value between a minimum and maximum. @param value Value to clamp. @param min Minimum value. @param max Maximum value.
268 Retrieves a URL resource. @param contextClass Class to find resource relative to. @param resourceName Name of the resource. @return URL resource or null if not found.
269 Starts the stopwatch, recording the start time. Returns the stopwatch instance for chaining.
270 Stops the stopwatch and updates elapsed time. Returns the stopwatch instance for chaining.
271 Calls m1 with a boolean and a string message. @param canRemove boolean value passed to m1
272 Sets the value comparator for sorting. @param valueComparator Comparator for values; null to clear. @return This builder instance.
273 Sets the initial capacity of the cache builder. @param initialCapacity The initial capacity (must be >= 0). @return CacheBuilder for chaining.
274 Sets the concurrency level for the cache builder. @param concurrencyLevel The desired concurrency level (must be > 0). @return CacheBuilder instance for chaining.
275 Sets the initial capacity and returns the MapMaker instance. @param initialCapacity The initial capacity for the map.
276 Sets the concurrency level for the map maker. @param concurrencyLevel The desired concurrency level (must be > 0). @return A reference to this map maker.
277 Sets the maximum size of the cache. @param maximumSize The maximum number of entries allowed. @return CacheBuilder for chaining.
278 Sets the maximum weight for the cache builder. @param maximumWeight The maximum weight allowed (must be >= 0). @return The CacheBuilder for chaining.
279 Sets the weigher for the cache builder. @param weigher The weigher to use for calculating item weights. @return The cache builder with the weigher set.
280 Sets the expireAfterWrite duration. @param duration Duration after which writes expire. @param unit Time unit of the duration. @return CacheBuilder for chaining.
281 Sets the expire-after-access duration. @param duration Duration after which to expire. @param unit Time unit of the duration. @return CacheBuilder for chaining.
282 Sets the refresh duration for the cache. @param duration Refresh duration. @param unit Time unit of the duration. @return CacheBuilder instance for chaining.
283 Sets the key equivalence function. @param equivalence The equivalence function for keys. @return A reference to this CacheBuilder for chaining.
284 Sets the equivalence function for values. @param equivalence Equivalence function for values. @return The CacheBuilder for chaining.
285 Sets the key equivalence function. @param equivalence Equivalence function for keys. @return The MapMaker instance for chaining.
286 Constructs a TypeToken from a RuntimeType, checking for type variables.
287 Returns a Throwable, likely related to a service failure. Uses 'failure' from the service state, logs if failed.
288 Validates index; throws exception if out of bounds. @param index index to validate @param size array size @param desc error description @return Validated index
289 Validates index within bounds; throws exception if out of range. @param index Index to validate. @param size Maximum valid index. @param desc Error description.
290 Returns a predicate that always returns true. Used as a functional mask for predicate operations.
291 Returns a predicate that always returns false for any object.
292 Returns a predicate that checks if an object is null. Returns a Predicate<T> that checks for null values.
293 Returns a predicate that checks if an object is not null.
294 Combines two predicates using AND logic. @param first The first predicate. @param second The second predicate. @return A new combined predicate.
295 Combines two predicates using an OR operation. @param first The first predicate. @param second The second predicate.
296 Creates a new Splitter instance with the given parameters.
297 Creates a Splitter with a maximum number of items. @param maxItems The maximum number of items in the splitter.
298 Extracts strings from a sequence and returns them as an immutable list.
299 Concatenates the results of m1() and m2() with an equals sign.
300 Converts the internal time value to the desired time unit. @param desiredUnit The time unit to convert to.
301 Returns a Duration object based on the result of m1().
302 Calculates and formats a duration based on nanos. Returns formatted string with value and unit.
303 Delegates to Platform.m1 with the provided string. @param string The string to pass to Platform.m1. @return String returned by Platform.m1.
304 Finds the longest common prefix of two CharSequences. @param a The first CharSequence. @param b The second CharSequence. @return The longest common prefix as a String.
305 Finds the longest common suffix of two CharSequences. Returns the suffix string.
306 Creates a Supplier that provides the given instance. @param instance The instance to be provided by the Supplier. @return A Supplier providing the instance.
307 Protected constructor, prevents direct instantiation.
308 Throws VerifyException if expression is false.
309 Throws VerifyException if expression is false. @param expression boolean expression to evaluate @param errorMessageTemplate error message template @param p1 parameter for error message formatting
310 Throws VerifyException if expression is false. @param expression boolean to check @param errorMessageTemplate Error message template @param p1 Parameter for error message formatting
311 Throws VerifyException if expression is false, with custom message. @param expression boolean to evaluate @param errorMessageTemplate Message template with parameter p1 @param p1 Parameter for message formatting
312 Throws VerifyException if expression is false, with formatted error message.
313 Throws VerifyException if expression is false. @param expression boolean to check @param errorMessageTemplate error message template
314 Throws VerifyException if expression is false, with custom message. @param expression boolean to check @param errorMessageTemplate message template @param p1 integer parameter for message @param p2 char parameter for message
315 Throws VerifyException if expression is false, with custom error. @param expression boolean to check @param errorMessageTemplate error message template @param p1 parameter for error message @param p2 parameter for error message
316 Throws VerifyException if expression is false, with custom message. @param expression boolean to check @param errorMessageTemplate Message template for exception
317 Throws VerifyException if expression is false. @param expression boolean to check @param errorMessageTemplate error message template
318 Throws VerifyException if expression is false. @param expression boolean to check @param errorMessageTemplate error message template @param p1, p2 parameters for error message
319 Throws VerifyException if expression is false, with formatted error. @param expression boolean to check @param errorMessageTemplate error message template @param p1 parameter for message formatting @param p2 parameter for message formatting
320 Throws VerifyException if expression is false. @param expression boolean to check @param errorMessageTemplate error message template
321 Throws VerifyException if expression is false, with custom error. @param expression boolean condition to check @param errorMessageTemplate Error message template
322 Throws VerifyException if expression is false. @param expression boolean to check @param errorMessageTemplate error message template @param p1 int parameter for message @param p2 long parameter for message
323 Throws VerifyException if expression is false, with custom error. @param expression boolean to evaluate @param errorMessageTemplate Error message template @param p1 Parameter 1 for error message @param p2 Parameter 2 for error message
324 Throws VerifyException if expression is false. @param expression boolean expression to check @param errorMessageTemplate Error message template
325 Throws VerifyException if expression is false, with custom error. @param expression boolean to check @param errorMessageTemplate error message template
326 Throws VerifyException if expression is false. @param expression boolean to check. @param errorMessageTemplate Error message template.
327 Throws VerifyException if expression is false, with custom error message. @param expression boolean to check @param errorMessageTemplate error message template @param p1 parameter for error message @param p2 parameter for error message
328 Throws VerifyException if expression is false, with custom message. @param expression boolean to check @param errorMessageTemplate message template @param p1, p2 parameters for message formatting
329 Throws VerifyException if expression is false, with formatted error.
330 Throws VerifyException if expression is false, with formatted error message.
331 Processes references in a queue, returns true if all succeed. @param firstReference The first reference to process.
332 Default constructor for the SimpleStatsCounter class.
333 Updates stats with data from another StatsCounter object.
334 Protected constructor for AbstractLoadingCache. Prevents direct instantiation; subclass must implement.
335 Creates an empty, synchronized LinkedHashMap. Returns a mutable map instance.
336 Iterates through the map and calls m3 for each entry. @param m The map to iterate over.
337 Iterates through keys and applies the m1 method to each. @param keys An iterable of keys to process.
338 Creates a new CacheBuilder instance. Used for cache configuration.
339 Throws an UnsupportedLoadingOperationException. @param keys Iterable of keys, not used. @throws UnsupportedLoadingOperationException if called.
340 Calculates a value based on hit and miss counts. @param hitCount Number of hits. @param missCount Number of misses. @return Calculated value.
341 Calculates a masked value from load success/exception counts.
342 Calculates the load exception rate. @return The ratio of load exceptions to total load count.
343 Calculates the average load time. @return Average load time, 0.0 if no loads.
344 Default constructor for ForwardingCache. No-op implementation.
345 Protected constructor for creating a ForwardingCollection.
346 Default constructor for the ForwardingIterator class.
347 Default constructor for ForwardingMap. No-op implementation.
348 Default constructor for ForwardingMapEntry.
349 Protected constructor for ForwardingMultimap. Disables external instantiation.
350 Protected constructor for ForwardingTable. Prevents external instantiation.
351 Private constructor to prevent direct instantiation.
352 Default constructor for ForwardingFuture.
353 Processes entries in the recency queue based on access queue.
354 Creates a new entry based on original and newNext. @param original The original entry. @param newNext The new next entry. @return New ReferenceEntry or null if original is invalid.
355 Filters entries in the backing map based on the given predicate. @param predicate Predicate to apply to each entry. @return True if any entry was filtered.
356 Processes futures, either all-or-nothing or with listeners.
357 Wraps an Executor, handling rejected executions and future updates.
358 Retrieves the result from a Future, checking if it's done. @param future Future object to retrieve the result from. @return The result of the Future.
359 Retrieves the result from a Future, handling exceptions. @param future The Future to retrieve the result from. @return The result of the Future.
360 Executes m2 if map.m1() is true, then m4 if map.m3() is true.
361 Returns an equivalence relation for functional equality.
362 Returns an equivalence relation for functional masking.
363 Returns an equivalence relation for functional masking.
364 Returns an equivalence relation for functional masking.
365 Returns an equivalence relation for functional equality.
366 Checks if an entry has expired based on access/write times. @param entry The entry to check. @param now Current timestamp in nanoseconds. @return True if the entry has expired.
367 Calculates the sum of all values from countMap and returns it.
368 Counts elements in an iterator and returns the count as an int.
369 Calculates the total count of elements in a multiset. @param multiset The multiset to process. @return The total count as an integer.
370 Calculates the sum of two integers and applies a mask. @param a first integer @param b second integer @return masked sum of a and b
371 Calculates the difference between two integers and takes the absolute value. @param a The first integer. @param b The second integer. @return The absolute difference between a and b.
372 Multiplies two integers and applies a masking operation. @param a First integer. @param b Second integer. @return Masked result of the multiplication.
373 Returns a set created by CompactHashSet.m1().
374 Default constructor for the AbstractIterator class.
375 Constructs an AbstractSequentialIterator with an initial element. @param firstOrNull The first element, or null if empty.
376 Default constructor for UnmodifiableListIterator.
377 Returns a collection resulting from applying m2 to the result of m1.
378 Returns the first entry from the map's values iterator.
379 Returns an iterator masked by m1(). @return An iterator, possibly masked.
380 Delegates m3 to ancestor, validates, or updates the delegate.
381 Retrieves values for a key, using map.m1 then m2, returns m3.
382 Delegates the call to the superclass's m1() method. Returns a Collection of type V.
383 Delegates to the superclass's m1() method and casts the result.
384 Delegates to the superclass's m1() method. Returns a collection of entries.
385 Delegates to the superclass's m1() method and casts the result.
386 Creates a StringBuilder with a specified initial size. @param size Initial capacity of the StringBuilder.
387 Creates an ArrayList with the specified initial size. @param initialArraySize initial capacity of the ArrayList @return An ArrayList with the given initial size.
388 Calculates a masked size based on the input size. Returns Integer.MAX_VALUE if size exceeds max power of 2.
389 Creates a ListMultimapBuilder with a specified initial capacity. @param expectedValuesPerKey initial capacity for values per key
390 Creates a SetMultimapBuilder with a specified expected values per key. @param expectedValuesPerKey The expected number of values per key.
391 Creates a SetMultimapBuilder with a specified initial capacity. @param expectedValuesPerKey Initial capacity for values per key.
392 Creates a MultimapBuilder with a specified expected number of keys. @param expectedKeys The anticipated number of keys in the multimap.
393 Creates a MultimapBuilder with a specified expected number of keys. @param expectedKeys The anticipated number of keys in the multimap.
394 Updates multiset element count. @param element Element to update. @param count New count. Returns old count.
395 Updates multiset element count if initial count matches. @param self The multiset to update. @param element The element to update. @param oldCount Initial count. @param newCount New count. @return True if count updated, false otherwise.
396 Masks data using a static method. @return Masked integer value.
397 Delegates mask functionality to Sets.m1, using the object.
398 Delegates to the result of m1() and returns its m2() value.
399 Delegates to the result of m1() and calls its m2() method.
400 Removes elements from the multiset. @param elementsToRemove elements to remove @return true if elements were removed, false otherwise
401 Delegates to Multisets.m1. @param object The object to delegate to Multisets.m1 with. @return The result of Multisets.m1.
402 Delegates to Multisets.m1, returning a boolean value. @param object The object to be passed to Multisets.m1
403 Transforms an iterable, replacing null elements with defaultValue. @param iterable Iterable to transform. @param defaultValue Value to use for null elements. @return Transformed iterable.
404 Delegates the method call to the superclass implementation.
405 Returns a navigable set of keys, delegating to the superclass.
406 Returns the provided comparator or a default Ordering.m1() if null.
407 Delegates to the result of m1() and calls its m2() method.
408 Delegates to the result of m1() and calls its m2() method.
409 Serializes the object to the given output stream. @param stream The output stream to write the serialized data to.
410 Serializes the object to the provided output stream. @param stream ObjectOutputStream to write the serialized data to
411 Writes the object's state to the given output stream. @param stream The stream to write to.
412 Populates a multimap from an ObjectInputStream. @param multimap Multimap to populate. @param stream Input stream containing data.
413 Returns a set of column keys. Uses internal method `m1()` to obtain the set.
414 Returns the row key to index mapping as an immutable set.
415 Returns the key set of the underlying map. @return ImmutableSet containing the map's keys.
416 Checks if a column key exists, using a mapping. @param columnKey The column key to check. @return True if the key exists, false otherwise.
417 Checks if a row key exists in the index. @param rowKey The row key to check. @return True if the key exists, false otherwise.
418 Retrieves a list of values associated with the given key. @param key The key to look up in the map. @return List of values or an empty list if key not found.
419 Retrieves a map based on the columnKey, combining results. @param columnKey Key used to fetch and combine map entries. @return ImmutableMap containing the combined entries.
420 Adds a value to the collection associated with the given key. @param key The key to associate the value with. @param value The value to add.
421 Calculates offset from origin by given distance. @param origin starting point @param distance distance to offset @return Offsetted point or throws exception on overflow
422 Creates a FlatMapSpliteratorOfDouble from a Spliterator and function. @param fromSpliterator Source Spliterator @param function Maps elements to Spliterator.OfDouble @param topCharacteristics Characteristics of the resulting Spliterator @param topSize Estimated size of the resulting Spliterator @return A FlatMapSpliteratorOfDouble
423 Creates a FlatMapSpliteratorOfInt from a Spliterator and function. @param fromSpliterator Source Spliterator @param function Maps elements to Spliterator.OfInt @param topCharacteristics Characteristics of the resulting Spliterator @param topSize Estimated size of the resulting Spliterator @return A FlatMapSpliteratorOfInt
424 Creates a FlatMapSpliteratorOfLong from a Spliterator and function. @param fromSpliterator Source Spliterator @param function Maps elements to long Spliterator @param topCharacteristics Characteristics of the resulting Spliterator. @param topSize Estimated size of the resulting Spliterator.
425 Creates a FlatMapSpliterator from a Spliterator and Function. @param fromSpliterator Input Spliterator @param function Transforms elements to Spliterator @param topCharacteristics Characteristics of the resulting Spliterator @param topSize Estimated size of the resulting Spliterator
426 Delegates mask operation to Collections2. @param collection The collection to operate on. @return True if the mask is applied successfully.
427 Updates metadata using a mask and hash table bits. @param mask Integer mask used for bit manipulation.
428 Updates metadata using a mask to determine hash table bits.
429 Resizes the internal arrays to the specified new capacity.
430 Resizes the internal arrays to the specified capacity. @param newCapacity The new capacity for the arrays.
431 Calculates a masked size for a hash table. @param expectedSize Expected number of elements. @return Masked size based on expected size.
432 Creates a comparison chain with a mask applied to the values. @param left The left value to compare. @param right The right value to compare.
433 Creates a comparison chain with a functional mask. @param left Left value for comparison. @param right Right value for comparison.
434 Masks boolean values using ComparisonChain.
435 Creates a ComparisonChain with boolean values. @param left The left boolean value. @param right The right boolean value.
436 Checks if the lower bound is not equal to the default Cut value.
437 Checks if upperBound is not equal to Cut.m1().
438 Default constructor for DiscreteDomain. Calls the parameterized constructor with false.
439 Serializes the object to the provided stream. Uses internal stream methods for serialization.
440 Writes the object to the output stream for serialization.
441 Writes the object's state to the output stream. @param stream ObjectOutputStream to write to.
442 Processes an element, validating its type and calling m1. Throws ClassCastException if type validation fails.
443 Serializes the object to the provided output stream. @param stream the output stream to write to
444 Serializes the object to the given output stream. @param stream Output stream for serialization.
445 Writes the object's state to the output stream. Uses internal methods for serialization.
446 Constructs a new Builder instance.
447 Creates a FluentIterable from an array of elements. @param elements array of elements to create iterable from @return FluentIterable containing the array elements
448 Returns an empty FluentIterable. Useful as a mask.
449 Returns the inverse of the result of chained method calls.
450 Combines this iterable with another, using m1() as the base.
451 Combines two iterables. @param a First iterable. @param b Second iterable. @return Combined iterable.
452 Combines three iterables into a single iterable. @param a, b, c Iterables to be combined. @return Combined Iterable.
453 Concatenates four iterables into a single iterable. @param a, b, c, d Iterables to be concatenated. @return A new iterable containing all elements.
454 Returns a stream derived from the result of m1().
455 Counts occurrences of an element in an iterator. @param iterator Iterator to search. @param element Element to count. @return Number of times the element appears.
456 Checks if the map contains a key using an iterator. @param map The map to check. @param key The key to search for. @return True if the key exists, false otherwise.
457 Checks if a map contains a value using a custom iterator. @param map The map to search. @param value The value to check for.
458 Delegates to Lists.m1, using 'this' as the initial list. @param index index into the list @param elements iterable of elements @return boolean
459 Returns a portion of the list, from fromIndex to toIndex (exclusive).
460 Returns a masked value using a Lists utility method.
461 Delegates map processing to Maps.m1. @param map The map to be processed.
462 Delegates mask check to Maps.m1. @param object The object to check. @return True if masked, false otherwise.
463 Creates a Table from a backing map and factory. @param backingMap Initial data for the table. @param factory Supplier for creating a new backing map.
464 Returns the set of column keys. Lazily initializes if null.
465 Creates a Column object with the given key. @param columnKey The key for the new Column. @return A new Column object.
466 Populates a map from an ObjectInputStream. @param map Destination map; @param stream Input stream
467 Populates a Multiset from an ObjectInputStream. @param multiset The Multiset to populate. @param stream Input stream containing Multiset data.
468 Creates a hash table with the given elements and size. @param newTableSize size of the new hash table @param elements elements to be added to the hash table @param n number of elements in the elements array @return hash table containing the elements
469 Constructs a new Builder with the default initial capacity.
470 Creates a new Builder with the specified size. @param size The initial size of the builder. @return A new Builder instance.
471 Creates a Builder with the given expected size. @param expectedSize The expected size of the data structure.
472 Ensures dedupedElements array has at least minCapacity.
473 Adds elements from iterable and returns the builder.
474 Adds elements from an iterator to the builder. @param elements Iterator of elements to add. @return This builder instance for chaining.
475 Adds elements from iterator, calls super, and returns builder.
476 Adds elements from iterable, optimizes if collection/immutable. @param elements Iterable of elements to add. @return This builder instance.
477 Returns a collector that accumulates elements into an ImmutableList.
478 Delegates to ImmutableListMultimap's m1() method. Returns an immutable multimap.
479 Returns a Collector for Range objects, using a default implementation.
480 Returns a collector that accumulates elements into an ImmutableSet.
481 Delegates to the wrapped comparator's m2 method.
482 Adds an element to the collection and returns the builder. @param element The element to add. @return The current builder instance.
483 Creates an interned function. @param interner The interner to use for function creation. @return An InternerFunction wrapping the interned value.
484 Delegates to Iterators.m2, returning a string from the iterable.
485 Returns the first element of the iterable, or null if empty. @param iterable Iterable to extract the first element from. @param <T> Type of elements in the iterable. @return First element or null if the iterable is empty.
486 Returns the next element or defaultValue if iterator is empty. @param iterator Iterator to fetch elements from @param defaultValue Value to return if iterator is empty
487 Combines two arrays of type T into a new array of the same type. @param first First array to combine. @param second Second array to combine. @param type The type of the arrays. @return A new array containing elements from both input arrays.
488 Processes an iterable, returning a value or an iterator. @param iterable Iterable to process; throws exception if empty. @return Processed value or iterator.
489 Recursively calls m2 or returns defaultValue if iterator is empty.
490 Returns an unmodifiable iterator for a masked function.
491 Writes the object's data to the output stream. Uses internal methods 'm1', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8'.
492 Inserts a new node with key-value pair into the linked list. @param key key of the new node @param value value of the new node @param nextSibling next sibling node, or null @return the newly created node
493 Converts a CharSequence to a List of Characters. Uses m1() internally for the conversion process.
494 Finds the index of an element in a list. Returns -1 if the element is not found.
495 Finds the index of an element in a list. Returns -1 if the element is not found.
496 Checks for a condition based on table entries. Returns true if condition met, false otherwise.
497 Resizes the table if capacity is less than the maximum.
498 Executes m3 within a try-finally block, ensuring m2 always runs.
499 Checks if an entry's related object exists. @param entry The InternalEntry to check. @return True if the related object exists, false otherwise.
500 Returns an empty Set. Uses internal helper methods.
501 Wraps a BiMap with synchronization. @param bimap The BiMap to synchronize. @return A synchronized BiMap.
502 Inserts element 'x' into the queue at 'index', maintaining order. Returns the index of the swapped element or 'index'.
503 Moves the last element in the queue to a suitable position. @param actualLastElement The element to be moved. @return The index where the last element was moved.
504 Advances the nextCursor to c, skipping elements as needed.
505 Creates an iterator for the multiset, using provided multipliers. @param multiset The multiset to iterate over.
506 Delegates array creation to Platform.m1. @param reference Array to copy from, can be null @param length Length of the new array @return New array with specified length.
507 Converts a collection to an array using a provided array. @param c Collection to convert. @return Object array containing elements from the collection.
508 Finds the minimum element from the iterator. @param iterator Iterator of elements to find the minimum from. @return The minimum element found in the iterator.
509 Finds the maximum element from the iterator. @param iterator Iterator of elements to find the maximum. @return The maximum element found in the iterator.
510 Creates a Range from the given values, finding the min/max. @param values Iterable of Comparable values to create range from @return Range containing the min and max values.
511 Delegates to Platform.m1() to retrieve a set of elements.
512 Delegates to the overloaded m1 with defined bounds. @return String result of the delegated method.
513 Returns the lower bound value.
514 Returns the result of calling m1() on the upperBound object.
515 Checks values in a bucket, throwing exception if overflow occurs. @param value Value to check. @param entry Entry in the map. @param valueBucketHead Head of the bucket.
516 Filters entries based on a duplicate check. @param entries Input array of entries. @param n Initial size of the input array. @param newN New size of the output array. @param duplicates Map to track duplicate entries.
517 Searches for a key in a bucket. If found, handles duplicates. @param key The key to search for. @return Entry if found, null otherwise.
518 Returns a collector for enums, using CollectCollectors.m1().
519 Creates an EnumSet from a Collection, or returns it if already an EnumSet.
520 Creates an EnumSet from a collection, or wraps if already an EnumSet. @param collection Collection to create EnumSet from. @param type Enum type. @return An EnumSet containing elements from the collection.
521 Returns the last element of the stream as an OptionalInt.
522 Returns the last element of a LongStream as an OptionalLong.
523 Returns the last element of a DoubleStream as an OptionalDouble.
524 Partitions the buffer around a pivot element. @param left left index, @param right right index, @param pivotIndex pivot index
525 Serializes the object to the given stream using internal methods.
526 Protected constructor for subclasses to extend CharEscaper.
527 Default constructor for UnicodeEscaper.
528 Masks characters in a string based on a masking rule. @param s string to mask, @param index starting index @return masked string
529 Escapes a character using the provided CharEscaper and returns.
530 Escapes a Unicode character using the provided escaper. @param escaper The UnicodeEscaper to use. @param cp The Unicode code point to escape.
531 Processes endpoint pairs: calls m1, then m3 with result of m2.
532 Checks node successors and returns true if valid. Uses internal iterators and graph methods.
533 Returns an EndpointPair based on graph state. Uses m3 if graph.m1() is true, otherwise m2.
534 Selects an endpoint pair based on network state. @param network The network object. @param nodeU One node. @param nodeV Another node.
535 Returns a set view of endpoint pairs in the graph.
536 Returns a set view of endpoint pairs in the graph.
537 Processes endpoint pairs: calls m1, then m3 with result of m2.
538 Returns an unmodifiable iterator combining two node iterators.
539 Creates a GraphBuilder with the given node order. @param nodeOrder The desired order of nodes in the graph. @return A new GraphBuilder instance.
540 Creates a GraphBuilder with the given incident edge order. @param incidentEdgeOrder ElementOrder specifying edge order. @return GraphBuilder with configured incident edge order.
541 Returns the transposed graph or original if not transposable.
542 Returns a transposed network or the original if m1() fails. Creates a TransposedNetwork if not already transposed.
543 Returns transposed graph or original if already transposed.
544 Creates a NetworkBuilder with the specified node order. @param nodeOrder The order of nodes in the network. @return A new NetworkBuilder instance.
545 Creates a NetworkBuilder with the specified edge order. @param edgeOrder The desired order of edges. @return A new NetworkBuilder instance.
546 Creates a ValueGraphBuilder with the specified node order. @param nodeOrder ElementOrder defining the node ordering. @return ValueGraphBuilder with the given node order.
547 Creates a ValueGraphBuilder with the provided element order. @param incidentEdgeOrder ElementOrder to use for building the graph. @return ValueGraphBuilder with specified incident edge order.
548 Calls overloaded method with full byte array. @param b The byte array to process.
549 Processes a ByteBuffer recursively based on its contents.
550 Processes bytes using scratch buffer, then resets it. @param bytes Number of bytes to process. @return The Hasher instance.
551 Processes a ByteBuffer, performing several internal operations.
552 Delegates to m1, forwarding the input parameter.
553 Creates a BloomFilter collector with given funnel, expected insertions, and FPP.
554 Delegates to bits.m1() and returns the result.
555 Clamps a long value to the byte range [0, MAX_VALUE].
556 Calculates the difference between the results of m1(a) and m1(b). @param a The first byte value. @param b The second byte value. @return The difference between m1(a) and m1(b).
557 Converts a byte to a string representation with specified radix. @param x The byte to convert. @param radix The radix (base) to use for conversion.
558 Compares this LockFreeBitArray with another, throws if lengths differ. @param other the LockFreeBitArray to compare with
559 Sets a bit at bitIndex, retries if contention occurs. @param bitIndex The index of the bit to set. @return True if successful, false otherwise.
560 Calculates a masked integer value based on m1, m3. Returns the calculated value.
561 Converts byte array to a hexadecimal string representation. @return Hexadecimal string of the byte array.
562 Calculates a value based on the input byte array. @param bytes The byte array to process. @return A long value derived from the byte array.
563 Updates seeds based on byte array data and stores results. @param bytes Input byte array. @param offset Start index. @param output Output array to store updated seeds.
564 Updates seeds based on byte array and stores results in output array.
565 Delegates to m1 with the value of 'value'. @return The result of calling m1 with 'value'.
566 Calculates the division result of two integers. @param dividend The number to be divided. @param divisor The number to divide by.
567 Calculates the masked result of dividend modulo divisor. Uses m1() helper function for calculation.
568 Creates a Murmur3_32HashFunction with the given seed. @param seed The seed value for the hash function.
569 Creates a Murmur3_32HashFunction with the given seed. @param seed Initial seed value for the hash function.
570 Creates a Murmur3_128HashFunction with the given seed. @param seed Seed value for the hash function. @return A new Murmur3_128HashFunction instance.
571 Generates a bucket index based on input and buckets. @param input seed value for the generator @param buckets number of buckets @return bucket index
572 Calculates a value based on the first four bytes of the array. @param bytes Byte array to process. @return An integer value derived from the array's bytes.
573 Copies data from an input stream to an output stream. @param from Input stream to read from. @param to Output stream to write to. @return Total bytes copied.
574 Reads and counts bytes from an InputStream. @param in The input stream to read from. @return Total number of bytes read.
575 Processes input stream data using a ByteProcessor. @param input Input stream to process. @param processor Processor for byte data. @return Processed value from the processor.
576 Wraps a ByteArrayInputStream with ByteArrayDataInputStream. @param byteArrayInputStream Input stream to wrap. @return A ByteArrayDataInputStream object.
577 Creates a ByteArrayDataOutput from a ByteArrayOutputStream. @param byteArrayOutputStream input ByteArrayOutputStream @return ByteArrayDataOutput object
578 Creates a ReaderInputStream, encoding characters to bytes. @param reader The Reader to read characters from. @param encoder CharsetEncoder for converting chars to bytes. @param bufferSize The buffer size.
579 Handles buffer overflow: resizes if needed, otherwise drains. @param overflow flag indicating buffer overflow occurrence
580 Copies data from a ReadableByteChannel to a WritableByteChannel.
581 Reads lines until a valid line is found, then returns it.
582 Skips bytes from an InputStream until n bytes are skipped. @param in Input stream to read from. @param n Number of bytes to skip. @return Total bytes skipped.
583 Reads lines from a resource, processes them, and returns a stream.
584 Reads all characters from a readable and returns the total count. @param readable The readable source to read from. @return Total number of characters read.
585 Constructs a LineReader with the given Readable. @param readable The readable source for line reading.
586 Processes an input stream. @param inputStream The input stream to process. @throws AssertionError if an IOException occurs.
587 Reads from a Reader, calls m1. Rethrows as AssertionError on error.
588 Flushes memory to file if threshold is exceeded. @param len The number of bytes to write. @throws IOException if an I/O error occurs.
589 Releases resources, potentially deletes the file, and resets memory.
590 Reads a file and returns a CharSource. @param file The file to read. @param charset The character encoding to use.
591 Flushes the provided flushable object and logs any IOExceptions.
592 Throws exception if insecure recursive delete is not allowed. @param path Path to delete; used in exception message. @param options Delete options; checks for ALLOW_INSECURE.
593 Creates a CharBuffer with double the capacity and copies content.
594 Processes a char array, extracting lines and handling returns. @param cbuf char array to process @param off start offset @param len length of the array to process
595 Sets a flag based on return status or line value.
596 Combines two bytes using m1() and Ints.m2(). Returns an integer value.
597 Combines four bytes into an integer. @return An integer formed from four bytes read by m1().
598 Combines 8 bytes into a long value. @return long value constructed from 8 bytes.
599 Calls the m1 method with the given integer value. @param v The integer value to pass to m1.
600 Calls m2 with the result of Float.m1(v). @param v The float value to process. @throws IOException if m2 throws an IOException
601 Writes a long value to the underlying DataOutputStream. @param v The long value to write.
602 Collects IOExceptions during directory processing or cleanup. @param path Path to the directory; returns exceptions or null.
603 Processes a secure directory stream, collecting IOExceptions. @param dir SecureDirectoryStream to process. @return Collection of IOExceptions or null if none occurred.
604 Performs setup actions, potentially initializing the input stream.
605 Executes m1, then updates 'current' if it.m2() returns true.
606 Retrieves a CharSource from a URL using the given charset. @param url The URL to fetch. @param charset The character encoding to use.
607 Divides p by q and rounds according to the specified rounding mode. @param p dividend @param q divisor @param mode rounding mode @return rounded quotient
608 Calculates a masked factorial, returning infinity if too large. @param n integer input @return double factorial result, potentially infinity
609 Calculates a value based on input b and k. @param b integer base value @param k integer exponent value @return calculated integer result
610 Performs a bitwise operation on a and b, returning a modified value.
611 Returns the factorial from the array or MAX_VALUE if out of bounds. @param n The index of the factorial to retrieve.
612 Calculates binomial coefficient (n choose k), optimized for speed. @param n Non-negative integer. @param k Non-negative integer, k <= n. @return Binomial coefficient (n choose k).
613 Calculates b^k for specific b values; otherwise, iteratively computes it.
614 Returns factorial from array or Long.MAX_VALUE if out of bounds. @param n Index into the factorials array. @return Factorial of n, or Long.MAX_VALUE if n is out of range.
615 Creates a LinearTransformationBuilder with given x, y values. Applies a mask based on the result of m1(x1) and m1(y1).
616 Checks if two doubles are approximately equal within a tolerance.
617 Rounds a value according to the specified rounding mode. @param x value to round @param mode rounding mode @return rounded value
618 Calculates the ceiling power of two for a given integer x. @param x The integer to find the ceiling power of two for. @return The ceiling power of two as an integer.
619 Calls m1 and returns the result of Integer.m2(x).
620 Rounds an integer based on the provided RoundingMode. @param x the integer to round @param mode the rounding mode to apply @return rounded integer value
621 Calculates the integer square root of x based on the rounding mode. @param x The number to calculate the square root of. @param mode Rounding mode to use. @return Integer square root of x.
622 Adds two integers using Math.addExact. @param a The first integer. @param b The second integer.
623 Subtracts two integers using Math.subtractExact. @param a The minuend. @param b The subtrahend.
624 Multiplies two integers. @param a first integer @param b second integer @return product of a and b
625 Checks a condition based on base, n, and internal calculations.
626 Calculates the ceiling power of two for a given long value. @param x The input long value. @return The ceiling power of two.
627 Masks a long value. @param x The long value to mask. @return A long representing the masked value.
628 Rounds a long value based on the provided RoundingMode. @param x the long value to round @param mode the rounding mode to apply @return rounded long value
629 Calculates a masked value based on input longs a and b.
630 Overloads m1 to accept int m, casting it to long.
631 Adds two long values using Math.addExact. @param a first long value @param b second long value @return sum of a and b
632 Subtracts two longs using Math.subtractExact. @param a The minuend. @param b The subtrahend.
633 Multiplies two longs and returns the exact product. @param a The first long. @param b The second long. @return The product of a and b.
634 Delegates to xStats.m1() and returns the result.
635 Compares this PairedStats object with another. @param obj The object to compare to. Returns true if equal.
636 Constructs a new PairedStatsAccumulator object.
637 Calculates a masked mean based on previousMean and value. Returns value, previousMean, or NaN based on conditions.
638 Delegates to xStats.m1() and returns the result.
639 Returns a ScaleAndIndex object by chaining method calls.
640 Returns a Scale object by calling m1 with the value 4.
641 Returns a Scale object by calling m1 with a value of 100.
642 Recursively partitions array based on comparisons between elements.
643 Parses Stats from a ByteBuffer. @param buffer ByteBuffer containing Stats data. @return A Stats object populated from the buffer.
644 Creates a Stats object with the calculated statistics. @return A Stats object containing count, mean, sum of squares, min, max.
645 Calls m1(), passes result to m2, then returns the value of port.
646 Returns 'port' if m1() is true, otherwise returns defaultPort.
647 Constructs a string representation of the host, optionally with port. @return String representation of the host and port, if applicable.
648 Creates a HostAndPort object. @param defaultPort Default port number. @return A HostAndPort instance.
649 Masks an IP address (IPv4 or IPv6) and returns a string representation.
650 Checks if an Inet6Address matches a specific pattern. @param ip The Inet6Address to check. @return True if the address matches, false otherwise.
651 Checks if an Inet6Address matches any of the defined criteria.
652 Converts a Collection<Boolean> to a boolean array. Handles BooleanArrayAsList for optimized conversion.
653 Searches for target in boolean array. @param array array to search @param target value to search for @return Index of target if found, -1 otherwise.
654 Searches for target in boolean array. @param array array to search @param target value to search for @return index of target, or -1 if not found
655 Converts a collection of Numbers to a byte array. Uses m1() if ByteArrayAsList, otherwise converts each Number.
656 Finds the first occurrence of target in array. @param array byte array to search @param target byte to find @return Index of target or -1 if not found
657 Finds the first occurrence of target in array. @param array byte array to search @param target byte to search for
658 Converts a Collection<Character> to a char array. Handles CharArrayAsList for optimized conversion.
659 Counts occurrences of target char in array. @param array char array to search @param target char to count @return Number of occurrences of target in array
660 Counts occurrences of target char in array. @param array char array to search @param target char to count @return number of occurrences
661 Calculates a char value based on the first two bytes of the array.
662 Calculates a hash code based on a portion of the array. @return The calculated hash code.
663 Converts a collection of Numbers to a double array. Handles DoubleArrayAsList for optimized conversion.
664 Searches for target in array using binary search. @param array sorted array of doubles @param target value to search for @return index of target or -1 if not found
665 Searches for target in array using binary search. @param array sorted array to search @param target value to search for @return index of target or -1 if not found
666 Converts a collection of Numbers to a float array. Uses m1() if collection is a FloatArrayAsList, otherwise boxes.
667 Searches for target in array using binary search. @param array sorted float array @param target value to search for @return index of target or -1 if not found
668 Searches for the target value within the float array. @param array Array to search @param target Value to search for @return Index of target, or -1 if not found.
669 Creates a new Builder with the given initial capacity. @param initialCapacity The initial capacity of the builder.
670 Returns a new Builder instance with a default mask size of 10.
671 Searches for target in array and returns its index relative to start.
672 Finds index relative to start where array[i] satisfies m1(array[i], target). @param target value to compare against @return index relative to start or -1 if not found
673 Converts a portion of the array to a string representation.
674 Checks if the result of m1(target) is non-negative. @param target Input value for m1. @return True if m1(target) >= 0, false otherwise.
675 Creates a new Builder with the given initial capacity. @param initialCapacity The initial capacity of the builder.
676 Creates a new Builder instance with a default mask size of 10. @return A new Builder object.
677 Calculates a hash code based on a portion of the array. @return The calculated hash code.
678 Formats a portion of the array as a string. Returns "[]" if m1() returns true.
679 Checks if the result of m1(target) is non-negative. @param target Input value for m1. @return True if m1(target) >= 0, false otherwise.
680 Creates a new Builder with the given initial capacity. @param initialCapacity The initial capacity of the builder.
681 Creates a new Builder instance with a mask size of 10. @return A new Builder object.
682 Calculates a hash code based on array elements. @return The calculated hash code.
683 Converts a portion of the array to a string representation.
684 Converts a collection of Numbers to an int array. Handles IntArrayAsList specifically; otherwise boxes.
685 Searches for target in array using binary search. @param array sorted array to search @param target value to search for @return index of target or -1 if not found
686 Searches for target in array using binary search. @param array sorted array to search in @param target value to search for @return index of target or -1 if not found
687 Converts a collection of Numbers to a long array. Handles LongArrayAsList for optimized conversion.
688 Calls the recursive helper method to find target in array. @param array array to search @param target value to search for
689 Calls overloaded method with full array range. @param array input array @param target value to search for
690 Parses a string representation of a number to a Long. @param string Number string to parse. @param radix The radix of the number.
691 Converts a collection of Numbers to a short array. Handles ShortArrayAsList; otherwise boxes and converts.
692 Searches for target in array using binary search. @param array sorted short array @param target value to search for @return index of target or -1 if not found
693 Searches for target in array using binary search. @param array sorted short array @param target value to search for @return index of target or -1 if not found
694 Calculates a short value from the first two bytes of the array.
695 Returns a comparator for unsigned byte array comparison. Uses UNSAFE_COMPARATOR_NAME if available, else returns default.
696 Creates an UnsignedInteger object from the given number of bits.
697 Converts the integer value to a string in the given radix. @param radix The base to use for the conversion.
698 Overloaded method, delegates to another method with default value.
699 Calculates a value using m1 on both inputs and Ints.m2. @param a first integer input @param b second integer input
700 Creates an UnsignedLong from a long value. @param bits The long value to wrap. @return An UnsignedLong object.
701 Calculates a value using m1 on a and b, then passes to Longs.m2.
702 Parses a string to a long value with specified radix. @param string String to parse. @param radix Radix of the number to parse. @return Parsed long value.
703 Handles method calls on a proxy, returning appropriate values. @param proxy The proxy object. @param method The invoked method. @param args Method arguments. @return Result of the method call.
704 Delegates to Reflection.m1 with the provided className.
705 Calls m2 with the result of clazz.m1(). @param clazz The class to invoke m1() on.
706 Returns a ByteSource based on the result of m1().
707 Delegates to m1() and returns the result of Modifier.m2().
708 Delegates to m1() and returns the result of Modifier.m2().
709 Delegates to m1() and applies Modifier.m2 to the result.
710 Delegates to m1() and returns the result of Modifier.m2().
711 Delegates to m1() and returns the result of Modifier.m2().
712 Delegates to m1() and applies Modifier.m2 to the result.
713 Returns true if m1() returns a modifier that matches.
714 Delegates to m1() and returns the result of Modifier.m2().
715 Delegates to m1() and returns the result of Modifier.m2().
716 Delegates to m1() and returns the result of Modifier.m2().
717 Checks if the given type is a TypeVariable. @param type The type to check. @return True if type is a TypeVariable, false otherwise.
718 Creates a TypeToken for the given class. @param type The class to create a TypeToken for. @return A TypeToken representing the given class.
719 Creates a TypeToken for the given Type. @param type The Type to create a TypeToken for. @return A TypeToken representing the given Type.
720 Handles task results: cancellation, failure, null, or returns value.
721 Adds a listener to the queue, handling null checks. @param listener The listener to add. @param executor The executor for the listener.
722 Sets a value on a future if it exists and a condition is met. @param related The future object to potentially modify.
723 Creates a ListenableFuture from a Callable task. @param task Callable task to wrap in a future. @return ListenableFuture that executes the task.
724 Creates a cancellable function to be executed on the executor. @param service AbstractService instance @param executor ScheduledExecutorService @param runnable Runnable task @return Cancellable object to cancel execution
725 Creates a cancellable function execution with a service and executor. @param service AbstractService instance @param executor ScheduledExecutorService @param runnable Runnable task to execute @return Cancellable object to cancel execution
726 Executes tasks and returns a list of Futures, with a timeout. @param tasks Collection of Callable tasks. @param timeout Timeout duration. @return List of Futures.
727 Executes tasks and returns the result. @param tasks Collection of Callable tasks. @param timeout Timeout duration for task execution. @return Result of the first completed task.
728 Delegates to m2 with timeout converted to nanoseconds. @param timeout Duration timeout value @return boolean result of the delegated call
729 Schedules a Callable with a delay. @param callable Callable to execute. @param delay Duration of the delay. @return ListenableScheduledFuture object.
730 Creates a ListenableScheduledFuture with initial/period delays. @param command Runnable to execute @param initialDelay Initial delay duration @param period Period duration @return ListenableScheduledFuture object
731 Creates a ListenableScheduledFuture with specified delay. @param command Runnable to execute @param initialDelay Initial delay @param delay Period between executions @return ListenableScheduledFuture
732 Calls m2 with the result of m1(timeout) in nanoseconds. @param timeout Duration timeout value @throws TimeoutException if timeout occurs
733 Calls m1 and passes the result to m2, throwing TimeoutException. @param timeout Duration timeout value. @throws TimeoutException if timeout expires.
734 Delegates to another m2 method with nanosecond time unit. @param target The target object. @param interfaceType The interface type. @param timeout The timeout duration.
735 Executes a Callable with a timeout. @param callable Callable to execute. @param timeout Timeout duration. @return Result of Callable, or throws exception if timeout.
736 Executes a Callable with a timeout. @param callable Callable to execute. @param timeout Timeout duration. @return Result of the Callable. @throws TimeoutException, ExecutionException
737 Executes a Runnable with a timeout, using a derived timeout. @param runnable Runnable to execute @param timeout Timeout duration @throws TimeoutException, InterruptedException
738 Executes a Runnable with a timeout. @param runnable Task to execute. @param timeout Timeout duration. @throws TimeoutException if the task times out.
739 Creates and configures a ScheduledExecutorService. Uses a custom ThreadFactory and listener for shutdown.
740 Handles a throwable, potentially logging and escalating it.
741 Delegates to m1() and applies Double.m2() to the result.
742 Returns the integer value of the result of m1().
743 Returns the result of m1() cast to a long.
744 Returns the result of m1() as a float.
745 Delegates to m1() and returns its result.
746 Writes data to the output stream. Writes a value based on m2() after an initial stream operation.
747 Reads from the input stream, processes the data, and calls m3.
748 Applies accumulator function to initial value and returns result. @param x Value to be used in the accumulator function.
749 Applies accumulator function to initial value and returns result. @param x value to be used in the accumulator function
750 Converts longs array to a string representation. Returns "[]" if the array is empty.
751 Writes data to the output stream. Writes a length, then writes data elements.
752 Applies accumulator to initial value, then returns updated value. @param i index @param x value to accumulate @param accumulatorFunction function to accumulate
753 Applies accumulatorFunction to x, updating state via m2. @param i Index for m3. @param x Value to accumulate. @param accumulatorFunction Function to apply.
754 Delegates to m1 with a fixed value (0). @param key The key to pass to m1. @return Result of m1.
755 Returns the cached map or creates and caches it using m1().
756 Updates value for key if oldValue matches. Returns true if updated.
757 Completes the future, handling closing states and throwing exceptions. @return FluentFuture object representing the completion status.
758 Completes the future with a value and closer, executing asynchronously. @param consumer Consumes the value and closer. @param executor Executor for asynchronous execution.
759 Executes a runnable with an executor, or handles nulls. @param runnable Runnable to execute. @param executor Executor to use.
760 Reverses and executes runnables from the 'runnables' list. Prevents re-execution by setting 'executed' to true.
761 Handles exceptions with a fallback function on a FluentFuture. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for the fallback.
762 Transforms the Future using the given function and executor. @param function Function to apply. @param executor Executor for asynchronous execution. @return Transformed FluentFuture.
763 Creates a ListenableFuture from a value, or NULL future if null. @param value The value to wrap in a future, can be null. @return ListenableFuture containing the value or a null future.
764 Creates a failed future from a throwable. @param throwable The exception to wrap in the future. @return A failed ListenableFuture containing the throwable.
765 Returns an immediately cancelled ListenableFuture. Returns a new instance if the singleton is null.
766 Retrieves a GetCheckedTypeValidator instance. Returns a default validator on failure.
767 Iterates through listeners and calls their m2() method.
768 Default constructor. Initializes the monitor with default settings.
769 Sleeps for the given duration. @param time Duration to sleep for. @throws InterruptedException if interrupted.
770 Calls m2 with guard and time converted to nanoseconds. @param guard Guard object @param time Duration object @throws InterruptedException if interrupted while waiting
771 Checks if a guard is active. @param guard The guard to check. @return True if the guard is active, false otherwise.
772 Delegates to Guard.m2(), handles exceptions, and calls m1().
773 Executes a task with a timeout. @param service ExecutorService to use. @param timeout Duration for task execution. @return True if task completed within timeout, false otherwise.
774 Sleeps for the specified duration using nanoseconds. @param sleepFor The duration to sleep for.
775 Sets the permits per second rate. @param permitsPerSecond The rate of permits per second.
776 Returns a value computed by m1(), synchronized by m2().
777 Creates a new SettableFuture instance. Used as a functional mask.
778 Retrieves the result of a Future within a specified timeout. @param future The Future to retrieve the result from. @param timeout The maximum time to wait. @return The result of the Future.
779 Creates a striped read-write lock with the specified number of stripes. @param stripes the number of stripes for the lock @return Striped object with read-write locks
780 Creates a Striped lock with the specified number of stripes. @param stripes Number of stripes for the lock.
781 Creates a Striped object with specified stripes and permits. @param stripes Number of stripes @param permits Permits for each semaphore @return Striped object
782 Creates a Striped object with the specified number of stripes. @param stripes The number of stripes for the striped object.
783 Returns a ThreadFactory, delegating to m1.
784 Creates a TrustedListenableFutureTask with given runnable and result.
785 Attempts to await latch completion within a duration. @param latch Latch to await. @param timeout Duration to wait. @return True if latch completes within the timeout.
786 Checks a condition with a timeout. @param condition The condition to check. @param timeout Timeout duration. @return True if condition is met within timeout, false otherwise.
787 Acquires the semaphore, waiting up to timeout if necessary. @param semaphore Semaphore to acquire, timeout in specified unit.
788 Acquires permits from a semaphore within a timeout. @param semaphore Semaphore to acquire permits from. @param permits Number of permits to acquire. @param timeout Timeout duration.
789 Attempts to acquire the lock within the specified timeout. @param lock the lock to acquire @param timeout the timeout duration @return true if lock acquired, false otherwise
790 Executes task with timeout. @param executor ExecutorService to use. @param timeout Duration timeout value. @return True if successful, false otherwise.
791 Finds PublicSuffixType by code. @param code The code to search for. @throws IllegalArgumentException if no matching enum is found.
792 Returns an Optional containing the result of m1(reference). @param reference The input reference object. @return An Optional containing the processed reference.
793 Creates a new Stopwatch instance with the given Ticker. @param ticker The Ticker to use for the Stopwatch. @return A new Stopwatch object.
794 Counts elements in iterable matching the predicate. @param iterable Iterable to check. @param predicate Predicate to filter elements.
795 Checks if an element matching the predicate exists in the iterator. @param iterator Iterator of elements to check. @param predicate Predicate to test each element. @return True if an element matches, false otherwise.
796 Creates a SortedSetMultimapBuilder with natural ordering. Returns a builder for SortedSetMultimap.
797 Creates a TableCollector from provided functions and operator. @param rowFunction Maps input to row key. @param columnFunction Maps input to column key. @param valueFunction Maps input to value. @param mergeFunction Merges values for same row/column.
798 Creates a predicate equivalent to the target object. @param target The object to check for equivalence. @return A Predicate checking for equivalence.
799 Creates a Function from a map, using defaultValue if key is absent. @param map The map to adapt. @param defaultValue Default value for missing keys.
800 Composes two functions: g(f(a)). @param g Function to apply to the result of f. @param f Function to apply to the input 'a'. @return A composed function.
801 Creates a Function from a Map. @param map The map to create the function from. @return A Function that maps keys to values in the map.
802 Creates a Splitter using the provided Pattern. @param separatorPattern The regex pattern to use for splitting.
803 Creates a Joiner instance with the given separator. @param separator The string used to join elements. @return A Joiner object.
804 Creates a Joiner instance with the given separator character. @param separator The character used to separate elements. @return A Joiner instance.
805 Creates a MapJoiner with specified null text. @param nullText Text to use as null value representation. @return New MapJoiner instance.
806 Creates a Splitter using the provided separator pattern. @param separatorPattern The regex pattern for splitting.
807 Creates a predicate that checks if a CharSequence contains a pattern. @param pattern The regex pattern to search for. @return A Predicate checking for pattern presence.
808 Returns a predicate that negates the given predicate. @param predicate The predicate to negate. @return A new negated predicate.
809 Combines predicates from an iterable into an AND predicate. @param components Iterable of predicates to combine. @return An AND predicate composed of the input predicates.
810 Combines predicates from an iterable into an OR predicate. @param components Iterable of predicates to combine. @return A Predicate that is the OR of the input predicates.
811 Parses a sequence into a map of string key-value pairs. Returns an immutable map.
812 Converts a CharSequence to a Stream<String> using internal methods.
813 Wraps a Supplier with memoization, Serializable if possible. @param delegate The Supplier to wrap. @return Memoized Supplier.
814 Creates a Supplier by composing a Function and a Supplier. @param function Transforms the Supplier's value. @param supplier Provides the input for the Function. @return A Supplier that applies the Function to the Supplier's value.
815 Wraps a supplier with a ThreadSafeSupplier. @param delegate The supplier to wrap. @return A thread-safe supplier.
816 Masks a throwable, potentially re-throwing it as declaredType. @param throwable The throwable to mask, or null. @param declaredType The type of exception to potentially throw.
817 Handles a throwable, if provided. Calls m1 with it.
818 Wraps a Throwable in a RuntimeException and calls m1.
819 Returns a list of StackTraceElement from a Throwable. Uses m1() to decide which method (m5 or m4) to use.
820 Inserts a reference entry into a segment. @param key The key for the entry. @param hash The hash code. @param next Next reference entry, or null. @return The newly created reference entry.
821 Creates a RemovalNotification with the given key, value, and cause.
822 Creates a collector that accumulates elements into a multiset. @param elementFunction Maps element to multiset element. @param countFunction Maps element to its count. @param multisetSupplier Creates the multiset.
823 Creates a collector that accumulates elements into a Multimap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element. @param multimapSupplier Supplies the initial Multimap.
824 Collects elements into a Multimap based on key/value functions. @param keyFunction Extracts the key from an element. @param valueFunction Extracts a stream of values from an element. @param multimapSupplier Supplies the initial Multimap.
825 Transforms a collection using a provided function. @param fromCollection Source collection of type F. @param function Function to transform elements to type T. @return New collection with transformed elements.
826 Checks if an element exists in an iterable. @param iterable iterable to search @param element element to find @return true if element is found, false otherwise.
827 Returns a contiguous set containing elements up to toElement. @param toElement Upper bound of the contiguous set. @param inclusive Whether to include toElement.
828 Returns a contiguous set starting from 'fromElement'. @param fromElement The starting element of the set. @param inclusive Whether to include 'fromElement'.
829 Delegates to m1 and returns its result. @param e The input element to be processed. @return The result of the m1 method.
830 Sets the key comparator and returns the builder. @param keyComparator Comparator for keys, used for sorting.
831 Sets the key comparator and returns the builder. @param keyComparator Comparator for keys, used for sorting.
832 Sets the value comparator and returns the builder. @param valueComparator Comparator for values, may be null.
833 Adds an element and returns the builder for chaining. @param element The element to add. @return This builder instance.
834 Adds an element with specified occurrences, returns this builder.
835 Adds elements to the builder, calls super's method, returns this.
836 Creates a Collector for ImmutableSortedMultiset. @param comparator Comparator for elements in the multiset.
837 Returns an immutable sorted set up to the specified element. @param toElement The element to stop the set construction.
838 Returns a sorted set containing elements >= fromElement. @param fromElement the element to start the sorted set from @return ImmutableSortedSet containing elements >= fromElement
839 Returns a new iterable containing elements from m1(), filtered.
840 Filters the iterable using the given predicate. @param predicate The predicate to apply to each element. @return A new iterable containing elements matching the predicate.
841 Filters an iterable to a specific type. @param unfiltered Iterable to filter. @param desiredType Target type for filtering. @return Filtered iterable of the desired type.
842 Transforms elements using the provided function. @param function Function to apply to each element. @return A FluentIterable containing transformed elements.
843 Returns a PeekingIterator from the given iterator. If it's a PeekingImpl, returns it; otherwise, creates one.
844 Removes elements from an iterable or collection. @param removeFrom Iterable or Collection to remove from. @param elementsToRemove Elements to remove. @return True if any elements were removed.
845 Removes elements from iterable based on predicate. @param removeFrom Iterable to remove from. @param predicate Predicate to determine removal. @return True if any elements were removed.
846 Retains elements from a collection, filtering based on another collection.
847 Delegates to Iterators.m2 with the collection's iterator.
848 Adds elements from an iterable to a collection. @param addTo Collection to add elements to. @param elementsToAdd Iterable containing elements to add. @return True if any elements were added.
849 Converts an iterator to an ArrayList. @param elements Iterator of elements to add to the list. @return ArrayList containing elements from the iterator.
850 Converts an iterator to a HashSet. @param elements Iterator of elements to add to the set. @return A HashSet containing the elements from the iterator.
851 Wraps an iterator, casting elements to the desired type. @param unfiltered Iterator to wrap; @param desiredType Target type.
852 Checks if any element in the iterable matches the predicate. @param iterable Iterable to check. @param predicate Predicate to test each element. @return True if any element matches, false otherwise.
853 Finds the first element matching the predicate. @param iterable Source iterable. @param predicate Predicate to apply to each element.
854 Iterates over values associated with the given key. @param key The key to iterate over values for.
855 Creates a list iterator for the given list, starting at index. @param list the list to create the iterator for @param index the starting index for the iterator @return A ListIterator for the list.
856 Creates a list from the first element and rest array. @param first The first element of the list. @param rest The rest of the elements as an array.
857 Transforms a list using a function, returning a new list of transformed elements.
858 Creates a list from the given elements. @param first First element. @param second Second element. @param rest Remaining elements. @return A List containing all elements.
859 Creates a Map from a Set and a Function, applying the function to each key.
860 Creates a NavigableAsMapView from a NavigableSet and Function. @param set NavigableSet of keys @param function Function to map keys to values @return NavigableMap with values generated by the function
861 Transforms a map's entries using the provided transformer. @param fromMap The input map. @param transformer Entry transformation function. @return A new map with transformed entries.
862 Checks if collection contains entry matching given entry. @param c Collection of entries. @param o Entry to check for. @return True if found, false otherwise.
863 Checks if collection contains entry matching provided entry. @param c Collection of entries. @param o Entry to check for. @return True if found, false otherwise.
864 Gets the count for an element. @param element The element to count. @return The element's count, or 0 if not found.
865 Decrements counter for element. Returns true if successful. @param element Element to decrement. @param occurrences Amount to decrement.
866 Atomically increments or returns the count for an element. @param element The element to update. @param count The increment value. @return The old count value.
867 Updates element count in map, returns true on success. @param element element to update @param expectedOldCount expected old count @param newCount new count value
868 Removes elements associated with a key from the map. @param key The key to remove elements for.
869 Creates a MultimapBuilderWithKeys using natural ordering. Returns a MultimapBuilderWithKeys instance.
870 Creates a SetMultimap from a given Map. @param map The input Map to create the SetMultimap from. @return A new SetMultimap initialized with the Map's entries.
871 Transforms a Multimap's values using the provided transformer. @param fromMap Source Multimap. @param transformer Transforms values from V1 to V2. @return New Multimap with transformed values.
872 Adds elements from iterable to contents, handling Multisets. @param elements Iterable of elements to add. @return This builder.
873 Adds elements from 'elements' to 'self', returns true on success. @param self The Multiset to add elements to. @param elements Elements to add.
874 Delegates to m1, retaining elements from multisetToRetain.
875 Removes occurrences from a multiset. @param multisetToModify Multiset to modify. @param occurrencesToRemove Iterable of elements to remove. @return True if the multiset was modified.
876 Retains elements from a collection using Multisets.m1. @param elementsToRetain Collection of elements to retain. @return True if retention was successful.
877 Takes elements from queue to buffer, with timeout in nanoseconds. @param q queue to take from, buffer to put to, numElements, timeout @return number of elements taken
878 Takes elements from a queue and adds them to a buffer. @param q queue to take from, buffer is collection to add to.
879 Delegates to m1 to check if the input is contained.
880 Checks if all values satisfy a condition, optimizing for SortedSet. @param values Iterable of values to check. @return True if all values satisfy the condition.
881 Processes two streams using a BiConsumer, handling empty streams.
882 Creates a TableCollector using provided functions and supplier. @param rowFunction Maps T to R (row key) @param columnFunction Maps T to C (column key) @param valueFunction Maps T to V (value) @param mergeFunction Merges values for same row/column @param tableSupplier Creates the Table instance
883 Transforms a table, applying a function to its values. @param fromTable Source table. @param function Transformation function from V1 to V2. @return New table with transformed values.
884 Returns original or transposed table. If table is TransposeTable, returns original. Otherwise, creates and returns a transposed table.
885 Creates an ArrayBasedEscaperMap from the given replacements map.
886 Masks characters in a char array using a provided replacement. @param cs Char array to mask. @param r Replacement string. @return The CharEscaperBuilder instance.
887 Advances an index based on character properties within a range. @param csq CharSequence to process. @param start Start index. @param end End index (exclusive).
888 Creates a SubscriberExceptionContext for the given event.
889 Creates a SequentialFunnel for Iterable elements. @param elementFunnel Funnel for individual elements. @return SequentialFunnel for Iterable.
890 Creates an OutputStream from a PrimitiveSink. @param sink The PrimitiveSink to wrap. @return An OutputStream backed by the sink.
891 Creates a StringCharsetFunnel for the given charset. @param charset Charset to use for funnel encoding @return StringCharsetFunnel instance
892 Returns a Writer, either the target or a wrapper. @param target Appendable to be wrapped as Writer @return Writer instance
893 Converts a CharSequence to a byte array. @param chars CharSequence to convert; throws DecodingException.
894 Creates a Closer instance with the default suppressor. @return A Closer object.
895 Creates a PatternFilenameFilter with the given pattern string. @param patternStr The pattern string to match filenames against.
896 Calculates a rounded log floor based on the provided mode. @param x BigInteger value to round. @param mode RoundingMode to apply. @return Rounded log floor.
897 Calls m1 with a default value of 10 for the second parameter. @param string The input string.
898 Overloads m1 with a default value for the second parameter. @param s The input string.
899 Returns a TypeVariableKey if 't' is a TypeVariable, else null.
900 Extracts a value or failure from a {@link ListenableFuture}. Handles trusted futures, internal failures, and cancellation.
901 Creates a Schedule with the given delay duration. @param delay The duration of the delay.
902 Creates and returns a new AtomicLongMap with a ConcurrentHashMap.
903 Applies accumulator to key, using x. @param key The key to operate on. @param x Value to accumulate. @param accumulatorFunction Accumulates value.
904 Applies accumulator to key, using x. @param key The key to operate on. @param x Value to accumulate. @param accumulatorFunction Accumulation logic.
905 Applies a function to a key and returns the result. @param key The key to apply the function to. @param newValue The new value to apply. @return The result of applying the function.
906 Masks a closeable object, executes a function, and returns it. @param closeable The closeable object to mask, may be null. @param closingExecutor Executor for closing tasks. @return The same closeable object passed as input.
907 Creates a CycleDetectingLockFactory with the given policy. @param policy The policy to use for cycle detection.
908 Wraps an executor with a SequentialExecutor. @param delegate The executor to wrap. @return A SequentialExecutor wrapping the delegate.
909 Creates a new SimpleTimeLimiter using the provided ExecutorService.
910 Joins a thread with a timeout, using nanosecond time units. @param toJoin The thread to join. @param timeout The maximum time to wait, in duration.
911 Creates an ElementOrder with UNORDERED type and no sorting key.
912 Creates and returns a stable ElementOrder instance.
913 Creates an ElementOrder for insertion, with no associated key.
914 Creates an ElementOrder with sorted type and default ordering. @return ElementOrder instance with specified properties.
915 Creates an ElementOrder with a given comparator. @param comparator Comparator used for sorting elements. @return ElementOrder instance.
916 Returns a CountDownLatch from the closeables registry.
917 Processes a CharSequence, recursively handling String and chars.
918 Converts a CharSequence to a String using a recursive process.
919 Creates a byte array containing x/y stats and sum of products.
920 Creates a byte array from a ByteBuffer, setting byte order.
921 Initializes metadata array with given size. @param expectedSize The expected size of the metadata array.
922 Initializes metadata array with a specified size. @param expectedSize The expected size of the metadata array.
923 Returns a new CharMatcher that combines this matcher with another. @param other the other CharMatcher to combine with @return a new CharMatcher that is the conjunction of this and other
924 Returns a CharMatcher from a predicate, or wraps if needed. @param predicate Predicate for character matching. @return CharMatcher instance.
925 Returns a new CharMatcher that combines this matcher with another. @param other the other CharMatcher to combine with @return a new combined CharMatcher
926 Returns a CharMatcher that matches chars in the specified range. @param startInclusive start of the range (inclusive) @param endInclusive end of the range (inclusive)
927 Calculates the difference between two CacheStats objects. @param other The CacheStats object to subtract. @return A new CacheStats representing the difference.
928 Combines CacheStats by subtracting values. @param other The CacheStats to subtract from this one. @return A new CacheStats object with combined stats.
929 Constructs a new AbstractListMultimap from a map. @param map The map to initialize the multimap with.
930 Constructs a new AbstractSetMultimap initialized with the given map.
931 Returns a contiguous set between fromElement and toElement. @param fromElement start element @param toElement end element
932 Creates a new EnumMultiset for the given enum type. @param type The enum type to create the multiset for. @return A new EnumMultiset instance.
933 Creates a sorted set from 'fromElement' to 'toElement'.
934 Creates an UnmodifiableIterator of lists from an iterator. @param iterator Source iterator. @param size Size of each list. @return Iterator of lists.
935 Creates an UnmodifiableIterator of lists from an iterator. @param iterator Iterator to convert to list iterator. @param size Size of the lists to create. @return UnmodifiableIterator of List<T>.
936 Creates a builder with an expected size. @param expectedSize The expected size of the builder. @return A new builder instance.
937 Creates a Builder with a maximum size. @param maximumSize The maximum number of elements. @return A Builder object.
938 Constructs a StreamingHasher with equal chunk and buffer sizes. @param chunkSize Size of each chunk to process.
939 Calculates a value based on conditions and input data. Returns NaN if a condition is met, 0.0 if count is 1, otherwise returns a calculated value.
940 Calculates a value based on conditions and deltas. Returns NaN if m2 is true; otherwise, returns a result.
941 Calculates a value based on conditions and input data. Returns NaN if m2() returns true, 0.0 if count is 1, otherwise calculates a value.
942 Calculates a value based on deltas, count. Returns NaN if m2 is true.
943 Selects a CharMatcher based on the input sequence. @param sequence Sequence used to determine CharMatcher. @return CharMatcher instance.
944 Masks characters in a sequence based on a defined criteria. @param sequence CharSequence to mask. @param replacement Replacement character for masked chars.
945 Creates a FunctionalEquivalence using the provided function. @param function Function to evaluate equivalence. @return FunctionalEquivalence instance.
946 Returns an equivalence for iterable of type S, using this equivalence.
947 Compares two iterables. Returns true if sizes match, then compares elements.
948 Checks if two lists are equal, using optimized methods. @param other The list to compare to. @return True if lists are equal, false otherwise.
949 Creates a ConcurrentHashMultiset with a ConcurrentHashMap backing map. @return A new ConcurrentHashMultiset instance.
950 Creates a ConcurrentHashMultiset from a ConcurrentMap. @param countMap Map used to initialize the multiset. @return A new ConcurrentHashMultiset.
951 Appends parts to the given appendable. @param appendable The target appendable. @param parts Iterable of parts to append. @return The modified appendable.
952 Appends parts from an iterator to a StringBuilder. @param builder StringBuilder to append to @param parts Iterator of parts to append @return The modified StringBuilder
953 Delegates to m2 with the map's result. @param builder StringBuilder to modify @param map Map to extract data from @return The modified StringBuilder
954 Delegates to m2 with the entries from the provided iterable.
955 Delegates to m1, returning a ToStringHelper object. @param value The object to be processed. @return A ToStringHelper object.
956 Delegates to m1, adding name/value to ToStringHelper. @param name Name of the field. @param value Value of the field. @return ToStringHelper object.
957 Delegates to m2 after converting boolean to string. @param value boolean value to convert and delegate @return ToStringHelper object
958 Delegates to m2 with a string representation of the char value.
959 Converts a double to a string and passes it to m2. @param value The double value to convert. @return ToStringHelper object returned by m2.
960 Converts a float to a string and passes it to m2. @param value The float value to convert. @return ToStringHelper object returned by m2.
961 Converts an int to a String and passes it to m2. @param value The integer value to convert. @return ToStringHelper object returned by m2.
962 Masks a long value and returns a ToStringHelper object. @param value The long value to mask. @return A ToStringHelper object containing the masked value.
963 Appends a boolean value to the ToStringHelper. @param name Name of the boolean value. @return The ToStringHelper instance.
964 Creates a ToStringHelper with the given name and char value. @param name Name of the field. @param value Char value to be converted to string. @return ToStringHelper object.
965 Creates a ToStringHelper with the given name and value. @param name The name of the field. @param value The value of the field. @return A ToStringHelper object.
966 Creates a ToStringHelper with name and formatted value. @param name Name to include in the helper @param value Value to format and include @return ToStringHelper instance
967 Creates a ToStringHelper with the given name and value. @param name The name of the field. @param value The value of the field, converted to string. @return The created ToStringHelper.
968 Creates a ToStringHelper with the given name and value. @param name Name to be included in the string representation. @param value Value to be converted to string. @return ToStringHelper object.
969 Converts a nullable reference to an Optional. @param nullableReference The reference to wrap in Optional. @return An Optional containing the reference or empty.
970 Default constructor. Initializes the iterable delegate to absent.
971 Returns an Optional containing a Long value. Implementation detail: uses Optional.m1().
972 Returns a Long wrapped in an Optional. @return Optional containing a Long value.
973 Delegates to Platform.m1, returning a String or null. @param string Input string, may be null. @return String result from Platform.m1, or null.
974 Parses a hostPortString into a HostAndPort object. @param hostPortString String containing host and port @return HostAndPort object representing the parsed string
975 Skips a specified number of elements from the iterable. @param numberToSkip The number of elements to skip. @return A FluentIterable containing the remaining elements.
976 Creates a FluentIterable with a maximum size. @param maxSize The maximum number of elements to include.
977 Retrieves element at position from iterable, or defaultValue. @param iterable Iterable to retrieve from. @param position Index of element to retrieve. @param defaultValue Value if element not found.
978 Retrieves an element from an iterator at a specified position. @param iterator Iterator to retrieve from. @param position Index of the element to retrieve. @return Element at the given position.
979 Retrieves element at position from iterator, or defaultValue. @param iterator Iterator to retrieve from. @param position Index of element to retrieve. @param defaultValue Value if element not found.
980 Returns a Traverser for the FILE_TREE. Uses m1 to create the traverser.
981 Wraps an InputStream with a limit on the number of bytes read. @param in Input stream to wrap. @param limit Maximum number of bytes to read.
982 Converts a BigInteger to an Inet4Address. @param address BigInteger representing the IPv4 address @return Inet4Address object
983 Converts a BigInteger to an Inet6Address. @param address BigInteger representing the IPv6 address @return Inet6Address object
984 Creates a SipHashFunction with provided keys. @param k0 First key for the SipHashFunction. @param k1 Second key for the SipHashFunction.
985 Creates a FileBackedOutputStream with default buffer mode. @param fileThreshold Threshold size for writing to file.
986 Converts an integer to an Inet4Address. @param address Integer representing the IP address. @return Inet4Address object.
987 Calculates a masked value based on permits, synchronizing access. @param permits The number of permits to use in the calculation. @return A long value representing the masked result.
988 Waits for permits to become available within a timeout. @param permits Number of permits to wait for. @param timeout Timeout duration. @param unit Time unit for the timeout. @return True if permits are available within timeout.
989 Writes data to an OutputStream. @param out The OutputStream to write to.
990 Creates a scheduler with given initial and recurring delays. @param initialDelay Initial delay before first execution. @param delay Recurring delay between executions.
991 Creates a Scheduler with initialDelay and period. @param initialDelay Initial delay duration. @param period Period duration. @return A Scheduler object.
992 Calculates a masked timeout value in nanoseconds. @param time Timeout value. @param unit Time unit of the timeout. @return Masked timeout value.
993 Creates and starts a Stopwatch using the provided Ticker. @param ticker The Ticker object to use for timing. @return A newly initialized and started Stopwatch.
994 Sets the value comparator and returns the builder. @param valueComparator Comparator for values. @return The builder instance.
995 Sets the concurrency level for the map maker. @param concurrencyLevel The desired concurrency level. @return This builder instance for chaining.
996 Sets the expiration duration. @param duration Expiration time, e.g., 10.minutes() @return CacheBuilder instance for chaining.
997 Sets the expiration duration for cache entries. @param duration Expiration time; must be non-negative. @return This builder.
998 Sets the expiration duration for cache entries. @param duration Expiration time, e.g., 10.minutes() @return CacheBuilder instance for chaining.
999 Returns a cache builder with weak keys and values.
1000 Returns a cache builder with weak keys and values.
1001 Returns a CacheBuilder with SoftValues strength.
1002 Returns a new MapMaker instance with Weak strength. @return A new MapMaker object.
1003 Returns a MapMaker instance with weak keys. Uses m1 with Strength.WEAK to create the MapMaker.
1004 Delegates the call to m1() to the snapshot object. @return The result of calling m1() on the snapshot.
1005 Calls m1 with a default message "index". @param index The index value. @param size The size value.
1006 Overloaded method to get a value. @param index The index of the value to retrieve. @param size The size of the data structure.
1007 Validates start and end indices for array access. @param start Start index. @param end End index. @param size Array size.
1008 Creates a predicate that matches null or equals to target. @param target The value to compare against. @return A Predicate<T> instance.
1009 Filters a multimap based on the provided predicate. @param multimap The Multimap to filter. @param entryPredicate Predicate for filtering entries. @return Filtered Multimap.
1010 Filters a Multiset based on a predicate, combining with existing filter. @param unfiltered The original Multiset. @param predicate The filter predicate. @return A new filtered Multiset.
1011 Creates a splitter using the provided CharMatcher. @param separatorMatcher CharMatcher used to find separators @return A Splitter object configured with the CharMatcher
1012 Creates a splitter that splits into chunks of specified length. @param length The length of each chunk. Must be greater than 0. @return A Splitter object.
1013 Creates a Splitter with the default character matcher. @return A Splitter instance.
1014 Creates and returns a new Stopwatch instance.
1015 Creates and starts a Stopwatch instance. Returns the initialized Stopwatch object.
1016 Calculates the UTF-8 length of a CharSequence. @param sequence CharSequence to analyze @return UTF-8 length of the sequence
1017 Executes a task using the provided executor. @param executor The executor service to use.
1018 Loops indefinitely, breaking when m2(queue.m1()) returns false.
1019 Constructs a new Builder instance.
1020 Creates a CacheLoader from a Function. @param function Function to wrap in a CacheLoader. @return A CacheLoader that uses the given function.
1021 Creates a CacheLoader from a Supplier. @param supplier Supplier providing the cache value. @return CacheLoader that uses the supplier.
1022 Throws UnsupportedLoadingOperationException for given keys. @param keys Iterable of keys, not actually processed. @throws UnsupportedLoadingOperationException Always thrown.
1023 Calculates the hit rate based on request count. @return Hit rate (double), 1.0 if no requests.
1024 Calculates the miss rate based on request count. @return Miss rate as a double; 0.0 if no requests.
1025 Protected constructor for ForwardingLoadingCache.
1026 Default constructor for ForwardingList. No-op.
1027 Default constructor for ForwardingMultiset.
1028 Protected constructor for ForwardingQueue, prevents external instantiation.
1029 Protected constructor for ForwardingSet, used for subclassing.
1030 Default constructor for ForwardingListIterator. No-op.
1031 Constructs a BiMap with provided backward and forward maps.
1032 Protected constructor for extending ForwardingConcurrentMap.
1033 Default constructor for ForwardingSortedMap. No-op.
1034 Constructs a new, empty MutableTypeToInstanceMap.
1035 Protected constructor for ForwardingListMultimap.
1036 Constructs a new ForwardingSetMultimap.
1037 Private constructor for ForwardingListeningExecutorService.
1038 Default constructor for ForwardingListenableFuture.
1039 Creates a reference entry for a segment, key, hash, and next entry.
1040 Creates a reference entry for a segment, key, hash, and next entry.
1041 Delegates to m1 with the closingFuture's future. @return Result of m1, or throws ExecutionException.
1042 Calls the m1 method.
1043 Creates a ValueReference for a segment, entry, value, and weight.
1044 Creates a ValueReference for a segment, entry, value, and weight.
1045 Creates a ValueReference with a mask for segment updates. @param segment Segment to update. @param entry Reference entry. @param value Value to set. @param weight Weight for the update.
1046 Updates entry recency and adds it to the recency queue. @param entry The entry to update. @param now The current timestamp.
1047 Updates entry timestamp and adds to access queue. @param entry The ReferenceEntry to update. @param now The current timestamp.
1048 Updates entry weight and timestamps, and adds to queues. @param entry Entry to update. @param weight Weight to add. @param now Current timestamp.
1049 Retrieves a value from a reference entry, handling nulls. @param entry The reference entry. @param now Current timestamp. @return The value or null if entry is invalid.
1050 Returns a value based on the type of the iterable. If Collection, uses its m2() method; otherwise uses Iterators.m2().
1051 Returns a masked value using Multisets.m1 on the current object.
1052 Reads data from an InputStream into a byte array, handling buffer sizes.
1053 Initializes the data structures using the provided maps. @param forward Map from K to V. @param backward Map from V to K.
1054 Creates a GeneralRange with the given comparator. @param comparator Comparator for ordering elements in the range.
1055 Creates a GeneralRange with specified comparator, endpoint, and bound type.
1056 Creates a GeneralRange with a given comparator and endpoint. @param comparator Comparator for range elements. @param endpoint Range endpoint value. @param boundType Type of bound for the range.
1057 Creates a GeneralRange with specified bounds and types. @param comparator Comparator for range elements. @param lower Lower bound value. @param upper Upper bound value.
1058 Merges another range, updating bounds and types accordingly. @param other The range to merge with this range. @return A new GeneralRange representing the merged range.
1059 Returns the next element. Throws NoSuchElementException if empty.
1060 Retrieves values for a key, or returns a default collection. @param key The key to retrieve values for. @return Collection of values or a default collection.
1061 Executes m1() and checks for concurrent modification.
1062 Delegates the method call to the superclass implementation. @param key The key. @param value The value. @return The result of the superclass method.
1063 Delegates to the superclass's m1 method with the given key/value.
1064 Delegates to the superclass's m1 method. @param key The key to pass to the superclass method. @return The result of the superclass's m1 method.
1065 Calls super's m1 method and casts the result to Set<V>.
1066 Returns a set of key-value entries, delegating to superclass.
1067 Writes object state to the output stream. Writes internal state and entries from the map.
1068 Converts a collection to a string representation. @param collection The collection to convert. @return A string representation of the collection.
1069 Converts a map to a formatted string representation. @param map The map to format. @return A string representation of the map.
1070 Creates an ArrayList with an estimated initial capacity. @param estimatedSize Initial capacity of the ArrayList.
1071 Creates a HashMap with the specified expected size. @param expectedSize The initial capacity of the HashMap. @return A new HashMap with the given initial capacity.
1072 Creates a LinkedHashMap with the specified expected size. @param expectedSize The initial capacity of the map. @return A new LinkedHashMap.
1073 Creates a HashSet with an initial capacity. @param expectedSize Initial size for the HashSet. @return A new HashSet with the specified capacity.
1074 Creates a LinkedHashSet with an initial capacity. @param expectedSize Initial capacity of the set. @return A new LinkedHashSet.
1075 Creates a MultimapBuilder with default expected values per key. Returns a MultimapBuilder instance.
1076 Creates a new MultimapBuilder with the default expected values per key. @return A new MultimapBuilder instance.
1077 Returns a new multimap builder with default expected values per key. @return A new MultimapBuilder instance.
1078 Creates a MultimapBuilder with the default expected keys. @return MultimapBuilder instance.
1079 Creates a MultimapBuilder with the default expected keys. @return MultimapBuilder with default key expectations.
1080 Creates an immutable entry with the given element and count. @param e the element @param n the count @return A new ImmutableEntry.
1081 Calls Multisets.m1 with the element and count. @param element The element to use. @param count The count to use. @return The result of Multisets.m1.
1082 Delegates to Multisets.m1, updating element count. @param element Element to update. @param oldCount Old count. @param newCount New count.
1083 Delegates to the result of m1() and returns its m2() value.
1084 Delegates to the result of m1().m2(). Returns the string returned by the delegated method.
1085 Delegates to the superclass implementation of m1(). Returns a Set of Multiset entries.
1086 Delegates to the inner object's m2() method and returns the result.
1087 Delegates to the result of m1() and calls its m2() method.
1088 Returns the first entry from the iterable or null if empty.
1089 Applies a function and returns the result or null if empty. @param e The input element. @return The transformed element or null.
1090 Applies a function and returns the result or null if empty. @param e The input element. @return The result of the function or null.
1091 Creates a new, empty TreeRangeSet. Returns an empty TreeRangeSet instance.
1092 Checks if value is within the bounds. m1 processes value; returns true if within bounds.
1093 Compares comparator and elements' comparator, returns true if equal.
1094 Calls the m1 method of the superclass with the given table. @param table The table object to pass to the superclass.
1095 Delegates the call to the parent class's m1 method. Returns a Set of Cell objects.
1096 Delegates the call to the parent class's m1 method.
1097 Delegates the call to the superclass's m1() method. @return Collection of values returned by super.m1()
1098 Delegates the call to the superclass's m1() method. Returns a Collection of type V.
1099 Creates an Ordering based on the provided function. @param function Function to extract values for comparison. @return Ordering instance using the given function.
1100 Returns an Ordering from a Comparator, or wraps if not an Ordering.
1101 Creates a compound ordering using the given secondary comparator. @param secondaryComparator Comparator for secondary ordering. @return CompoundOrdering combining this ordering and secondary.
1102 Creates a new immutable cell with the given row, column, and value.
1103 Checks if both rowKey and columnKey satisfy conditions via m1 & m2.
1104 Creates an immutable map entry with the given key and value.
1105 Returns an ImmutableMapEntry, reusing entry if possible. @param entry The entry to potentially reuse. @param key The key for a new entry if needed. @param value The value for a new entry if needed.
1106 Adds an entry to the builder using its key and value. @param entry The entry to add. @return A reference to this builder.
1107 Sets the key-value pair and returns the builder for chaining.
1108 Resizes the data structure if the new size exceeds current size.
1109 Inserts a key-value pair at the specified entry index. @param entryIndex Index for insertion; key, value are the pair.
1110 Resizes the data structure if the new size exceeds the current size.
1111 Updates the data structure with the given entry and object. @param entryIndex Index of the entry to update. @param object Object to store at the entry.
1112 Initializes the hash table with the specified expected size. @return The expected size of the hash table.
1113 Initializes internal data structures for the hash table. @return The expected size of the hash table.
1114 Checks if this range overlaps with another range. @param other The other range to check for overlap. @return True if the ranges overlap, false otherwise.
1115 Checks if this range intersects with another range. @param other The other range to check for intersection. @return True if the ranges intersect, false otherwise.
1116 Writes the object's state to the stream using internal methods.
1117 Creates a new Builder instance for functional masking. Returns a Builder object, ready for configuration.
1118 Creates a new Builder instance for functional masking. @return A new Builder object.
1119 Creates a new Builder instance for function masking. Returns a Builder object to configure the mask.
1120 Returns an unmodifiable iterator for the elements of this set.
1121 Counts occurrences of element in iterable. Returns count from Multiset or Set, else uses Iterators.
1122 Delegates to Maps.m1 to check if the map contains the key. @param key The key to check. @return True if the key exists, false otherwise.
1123 Delegates mask check to Maps.m1. @param value The value to check. @return True if masked, false otherwise.
1124 Applies transformations m1 and m2 to the key. @param key The key to be transformed. @return The transformed key.
1125 Applies transformations m1 and m2 to the given key. @param key The key to be transformed. @return The transformed key.
1126 Applies m1 and m2 to the key. @param key The key to be processed. @return Processed key or null.
1127 Applies m1 and m2 to the key. @param key The key to be processed. @return Processed key, or null if intermediate result is null.
1128 Retrieves the value associated with the current entry. Throws NoSuchElementException if the entry is null.
1129 Retrieves the value associated with the current key. Throws NoSuchElementException if the key is not present.
1130 Returns the first entry from the map or null if empty.
1131 Returns an entry from the iterator.
1132 Returns a navigable set by chaining m1() and m2().
1133 Returns a sorted map from fromKey to toKey using m1. @param fromKey Start key (inclusive). @param toKey End key (exclusive).
1134 Retrieves an entry based on the provided key. @param key The key to search for. @return An Entry object or null if not found.
1135 Retrieves an entry based on the key, using m1 and m2. @param key The key to search for. @return An Entry object or null if not found.
1136 Delegates to m1 with `false` for the second argument. @param toKey The key to pass to the delegated method.
1137 Retrieves an Entry by key, using m1 and m2. @param key The key to search for. @return Entry or null.
1138 Retrieves an entry based on the provided key. @param key The key to search for. @return An Entry object or null if not found.
1139 Delegates to m1 with the key and a boolean flag. @param fromKey The key to pass to m1. @return A sorted map.
1140 Returns a sorted multiset between the specified bounds. @param lowerBound Lower bound (inclusive). @param upperBound Upper bound (inclusive).
1141 Creates an empty HashBasedTable with default configurations.
1142 Reads type information and initializes internal state from stream.
1143 Moves an entry to a new destination index, potentially re-linking.
1144 Moves an element from srcIndex to dstIndex, updating related data.
1145 Checks if a value is valid based on m1 and m2. @param value The value to check. @return True if valid, false otherwise.
1146 Creates a Builder with the given expected size. @param expectedSize The expected size of the data structure. @return A new Builder instance.
1147 Constructs a new Builder instance.
1148 Creates a new Builder instance for functional masking. @return A new Builder object.
1149 Creates a new Builder with the provided comparator. @param comparator Comparator for sorting keys.
1150 Creates a singleton ImmutableBiMap with the given key-value pair.
1151 Adds an element to the dedupedElements array. @param e The element to add; must be distinct.
1152 Constructs a new Builder with the default initial capacity.
1153 Creates an ImmutableList.Builder with the specified expected size.
1154 Adds elements from iterable and returns the builder. @param elements iterable of elements to add @return this builder instance
1155 Adds elements from an iterator and returns the builder.
1156 Adds elements from iterator and returns the builder. @param elements Iterator containing elements to add.
1157 Returns a SerializedForm object representing this instance.
1158 Creates a single-element immutable table with given row, column, and value.
1159 Delegates to Iterables.m2 with the result of m1(). @return String returned by Iterables.m2
1160 Adds values to the builder for a given key. @param key The key for the values. @param values Iterable of values to add.
1161 Returns the first element of iterable or defaultValue if empty. @param iterable Source iterable. @param defaultValue Value to return if iterable is empty.
1162 Returns default value if iterable is empty; otherwise, delegates. @param iterable Iterable to check, may be null. @param defaultValue Value to return if iterable is empty.
1163 Calls m1 with provided key and value, returns true. @param key The key to pass to m1. @param value The value to pass to m1.
1164 Partitions a list into sublists of specified size. @param list List to partition. @param size Sublist size, must be positive. @return List of sublists.
1165 Delegates to Lists.m1, passing 'this' and the element.
1166 Delegates to Lists.m1, passing 'this' and the element.
1167 Calls method m1.
1168 Creates a new, empty TreeRangeMap. Returns an instance of TreeRangeMap.
1169 Finds the minimum index within a range, considering size and len. @param index starting index @param len range length @return Minimum index within the range, or -1 if out of bounds.
1170 Returns a mask value based on the size and heap condition.
1171 Returns the result of calling m1(). @return The result of m1(), may be null.
1172 Percolates element x up the queue until order is restored. @param index element's index; @param x element to percolate @return index of the percolated element
1173 Returns an iterator for elements in the multiset. Uses internal method m1 for iteration.
1174 Adds an element to the beginning of an array. @param element Element to add. @param array Array to modify. @return Modified array with element prepended.
1175 Copies elements from a collection to an array. @param c collection to copy from @param array array to copy to, resized if needed @return populated array
1176 Delegates to m2 with the iterable's iterator. @param iterable Iterable to process; returns an element.
1177 Delegates to m2 with the iterable's iterator. @param iterable Iterable to process; returns an element.
1178 Delegates to the result of m1() and calls its m2() method.
1179 Creates a GeneralRange from a Range, extracting bounds and types.
1180 Returns a submap of the given map based on the provided range. @param map NavigableMap to extract a submap from. @param range Range defining the submap boundaries. @return Submap or a new map if no submap exists.
1181 Returns a subSet of the set based on the provided range. @param set NavigableSet to filter @param range Range to apply for filtering @return NavigableSet containing elements within the range
1182 Returns the sorted map obtained from the superclass's m1 method.
1183 Wraps a queue with synchronization. @param queue The queue to wrap. @return A synchronized queue.
1184 Initializes the ArrayBasedCharEscaper with a map and safe character range. @param escaperMap Replacement map. @param safeMin Minimum safe character. @param safeMax Maximum safe character.
1185 Constructs an ArrayBasedUnicodeEscaper with replacement mappings and safe range. @param escaperMap Replacement map, safeMin/Max define safe range, unsafeReplacement.
1186 Creates a PercentEscaper with specified safe characters and space handling. @param safeChars Safe characters to escape. @param plusForSpace Whether to use '+' for spaces.
1187 Recursively processes a string, returning a modified string.
1188 Creates a Subscriber or SynchronizedSubscriber based on m1 result. @param bus EventBus instance. @param listener Listener object. @param method Method to be subscribed.
1189 Returns a string describing graph properties.
1190 Returns a set view of endpoint pairs. Implements set operations using an iterator.
1191 Returns a set view of endpoint pairs in the graph. Implements set operations; direct modification is unsupported.
1192 Hashes a double value. @param d The double value to hash. @return A Hasher object.
1193 Creates a BloomFilter collector. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions.
1194 Calculates a masked value based on bits.m1(), m2, and numHashFunctions.
1195 Checks if two Bloom filters are equal. Compares hash functions, m2, strategy, and funnel.
1196 Overloaded method, calls m1 with default value for y. @param x The byte value to process.
1197 Combines this BloomFilter with another, ensuring compatibility. @param that The BloomFilter to combine with.
1198 Creates a HashCode instance based on the provided byte array. @param bytes The byte array to hash. @return A BytesHashCode object.
1199 Creates a HashCode object from an integer hash value. @param hash The integer value to be wrapped in a HashCode. @return A new IntHashCode object.
1200 Creates a LongHashCode object for the given hash value. @param hash The long value to be wrapped in a LongHashCode.
1201 Delegates to m1() and returns its float value.
1202 Delegates to m1() and returns its result.
1203 Calculates a masked BigInteger value based on the result of m1().
1204 Selects/creates a HashFunction based on minimumBits. @param minimumBits minimum bits required for hashing @return HashFunction object
1205 Delegates to the wrapped hashCode's m1() method. @param hashCode The hashCode object to delegate to. @param buckets The number of buckets.
1206 Creates a HashFunction using HmacMD5 with the given key. @param key The key used for the hash function. @return A new MacHashFunction instance.
1207 Creates a HmacSHA1 hash function with the given key. @param key The key to use for the hash function. @return A new HmacSHA1 hash function.
1208 Creates a HmacSHA256 HashFunction using the given key. @param key The key to use for the hash function. @return A new HmacSHA256 HashFunction.
1209 Creates a HmacSHA512 HashFunction using the provided key. @param key The secret key for the hash function. @return A new HmacSHA512 HashFunction.
1210 Concatenates multiple ByteSource objects into a single source. @param sources Iterable of ByteSource objects to concatenate.
1211 Concatenates multiple CharSources into a single CharSource.
1212 Creates a ByteArrayDataInput from a byte array. @param bytes The byte array to wrap in an input stream. @return A ByteArrayDataInput object.
1213 Delegates to overloaded method with provided ByteArrayOutputStream. @return ByteArrayDataOutput populated by the delegated method.
1214 Creates a ByteArrayDataOutput with specified initial size. @param size initial size of the output stream @return ByteArrayDataOutput instance
1215 Creates a ReaderInputStream with custom error handling. @param reader The Reader to read from. @param charset Charset for encoding. @param bufferSize The buffer size.
1216 Calculates the total number of bytes read from the input stream. @param in Input stream to read from. @return Total bytes read.
1217 Skips specified bytes from input stream. @param in Input stream to skip from. @param n Number of bytes to skip. @throws IOException if end of stream is reached prematurely.
1218 Calls m2 with the iterator of the provided lines. @param lines Iterable of character sequences @param lineSeparator Separator between lines @throws IOException if an I/O error occurs
1219 Delegates to m2, using the result of lines.m1(). @param lines Stream of CharSequence, @param lineSeparator separator @throws IOException if an I/O error occurs
1220 Processes lines from a stream using the provided Consumer. @param action Consumer to apply to each line. @throws IOException if an I/O error occurs.
1221 Reads lines from a readable source and returns them as a list. @param r Readable source to read from. @return List of strings, each representing a line.
1222 Processes lines from a readable source using a processor. @param readable Source of lines to process. @param processor Processes each line. @return Processed value from the processor.
1223 Reads data into charBuffer, handling EOF and updating buffer.
1224 Returns the result of m1() cast to a short. @return short value from m1()
1225 Returns a character by casting the result of m1().
1226 Returns a float value derived from m1() and Float.m2().
1227 Calculates a double value by applying m2 to the result of m1.
1228 Processes characters from the input string. Iterates and calls m2 for each character.
1229 Calls m2 with the result of Double.m1(v). @param v The double value to process. @throws IOException if m2 throws an IOException.
1230 Processes directory entries, collecting IOExceptions. @param dir DirectoryStream to process; returns exceptions.
1231 Processes directory entries, handling exceptions and cleanup. @param dir SecureDirectoryStream to process @param path Path of the directory entry @return Collection of IOExceptions, or null if none.
1232 Creates a MultiInputStream from an iterator of ByteSources. @param it Iterator of ByteSources to read from.
1233 Returns a CharSource from the input Charset using m1().
1234 Calculates permutations based on list order using comparator. Returns MAX_VALUE if permutations exceed Integer.MAX_VALUE.
1235 Calculates the mean of a sequence of numbers. @param values Iterator of Number objects to average. @return The calculated mean as a double.
1236 Checks if a double is positive and its significand is a power of 2.
1237 Checks a condition based on input x and internal calculations.
1238 Rounds a long value to the nearest double based on the given mode. @param x long value to round @param mode RoundingMode enum
1239 Compares two doubles, returns 0 if m1 is true, -1 if a<b, 1 if a>b.
1240 Calculates a masked value based on table size. @param tableSize The size of the table. @return Masked integer value.
1241 Finds the threshold value within a sorted buffer. Uses binary search to locate the threshold efficiently.
1242 Calculates the floor log base 10 of x, based on rounding mode. @param x The input integer. @param mode The rounding mode to apply. @return The floor log base 10 of x.
1243 Calculates the integer square root of x with specified rounding. @param x The number to calculate the square root of. @param mode Rounding mode to use.
1244 Calculates a new queue capacity based on the old one. Returns the new capacity, ensuring it respects maxSize.
1245 Creates a RegularLinearTransformation with a slope of 0.0 and given y.
1246 Creates a LinearTransformation based on the given slope. @param slope The slope of the line. @return A LinearTransformation object.
1247 Applies transformations and returns a VerticalLinearTransformation. @param x Input value used in the transformations.
1248 Calculates a BigInteger representing the product of factorials. @param n upper bound for factorial product calculation @return BigInteger representing the product of factorials
1249 Calculates the floor log base 10 of a long value based on rounding mode.
1250 Calculates a value based on input x, numerator, and denominator.
1251 Calculates b^k, handling special cases and using bitwise ops. @param b base value @param k exponent value @return long result of b^k
1252 Calculates a value based on m1() and deltas. Uses m1() to determine a boolean for m2().
1253 Calculates a value based on m1() and deltas. Uses m1() to determine a boolean for m2().
1254 Calculates a value based on several internal method calls.
1255 Calculates a modified mean of a number sequence. @param values Iterator of numbers to calculate mean from. @return The calculated modified mean.
1256 Updates statistics (mean, min, max, sum of squares). @param value The new value to include in the statistics.
1257 Calculates a value based on m1() and m2(), using deltas.
1258 Calculates a value based on m1() and deltas sum. Returns the result of the calculation.
1259 Calculates a value based on statistics, returning NaN if invalid.
1260 Partitions an array segment using a pivot element. @param array The array to partition. @param from Start index of the segment. @param to End index of the segment. @return The new partition point.
1261 Creates PairedStats from a byte array. @param byteArray byte array containing the data. @return PairedStats object containing calculated statistics.
1262 Calculates stats from a byte array. @param byteArray The byte array to analyze. @return Stats object containing calculated statistics.
1263 Calculates paired stats using xStats, yStats, and sumOfProducts. @return PairedStats object containing calculated statistics.
1264 Returns a Stats object from the xStats instance.
1265 Returns the stats object from the yStats instance.
1266 Creates a collector to accumulate statistics for numbers. Returns a Stats object after accumulation.
1267 Masks an InetAddress, IPv6 addresses are enclosed in brackets.
1268 Converts an IPv6 address to an IPv4 address. @param ip The IPv6 address to convert. @return The IPv4 representation of the address.
1269 Extracts the IPv4 address from a 6to4 IPv6 address. @param ip The 6to4 IPv6 address to extract from. @return The extracted IPv4 address.
1270 Extracts the IPv4 address from an ISATAP IPv6 address. @param ip The ISATAP IPv6 address to process. @return The extracted IPv4 address.
1271 Calculates a value from a collection of numbers. @param dataset Collection of numbers to process. @return The calculated value.
1272 Calculates a statistic on a collection of numbers. @param dataset Collection of numbers to process. @return A map containing the calculated statistic.
1273 Sets a value in the array. @param value The value to set. @return This builder instance.
1274 Applies a function to an array of doubles. @param values The array of doubles to process. @return This builder instance.
1275 Sets array elements from a collection. @param values Collection of doubles to set. @return this Builder object.
1276 Applies values to the builder, updating internal state. @param values ImmutableDoubleArray to apply. @return This builder instance.
1277 Creates an ImmutableDoubleArray containing only the given value. @param e0 The double value to be wrapped in the array.
1278 Creates an ImmutableDoubleArray from two double values. @param e0 The first double value. @param e1 The second double value. @return An ImmutableDoubleArray containing e0 and e1.
1279 Creates an ImmutableDoubleArray from the provided double values.
1280 Creates an ImmutableDoubleArray from the given double array.
1281 Creates an ImmutableDoubleArray from the given double array.
1282 Creates an ImmutableDoubleArray from the provided double array.
1283 Creates an ImmutableDoubleArray from a double array. Returns EMPTY if input is empty.
1284 Creates an ImmutableDoubleArray from values, or EMPTY if values is empty.
1285 Converts a DoubleStream to an ImmutableDoubleArray. Returns EMPTY if the stream is empty.
1286 Returns a masked array or the original if m1() is false.
1287 Checks if the target value is non-negative based on m1.
1288 Sets a value at a specific array index. @param value The value to set. @return this Builder object for chaining.
1289 Applies a function mask to an array of integer values. @param values Integer array to apply the mask to. @return This builder object.
1290 Sets values into the array and calls m2 with values.m1(). @param values Collection of integers to be processed. @return this Builder object for chaining.
1291 Applies a function mask using provided values. @param values ImmutableIntArray containing mask values. @return This builder object.
1292 Creates an ImmutableIntArray containing only the given element. @param e0 The integer element to include in the array.
1293 Creates an ImmutableIntArray containing the given two integers.
1294 Creates an ImmutableIntArray from three integer elements.
1295 Creates an ImmutableIntArray from the given integer array.
1296 Creates an ImmutableIntArray from the given integer array.
1297 Creates an ImmutableIntArray from the provided integer array.
1298 Creates an ImmutableIntArray from an int array. Returns EMPTY if input is empty.
1299 Converts an IntStream to an ImmutableIntArray. Returns EMPTY if the stream is empty.
1300 Returns a masked array or the current object based on m1().
1301 Sets the array element at 'count' to the given value. @param value The value to set in the array. @return this Builder object for chaining.
1302 Applies a function mask to an array of long values. @param values Array of long values to apply the mask to. @return This builder instance.
1303 Sets values using a collection and updates the internal array. @param values Collection of Long values to set. @return this Builder object for chaining.
1304 Applies a mask to the array using provided values. @param values ImmutableLongArray containing mask values. @return this Builder object.
1305 Creates an ImmutableLongArray containing only the given element. @param e0 The long value to be included in the array.
1306 Creates an ImmutableLongArray containing the provided long values. @param e0 The first long value. @param e1 The second long value.
1307 Creates an ImmutableLongArray from the given long values. @param e0 The first long value. @param e1 The second long value. @param e2 The third long value.
1308 Creates an ImmutableLongArray from the given long values.
1309 Creates an ImmutableLongArray from the given long array.
1310 Creates an ImmutableLongArray from the provided long values.
1311 Creates an ImmutableLongArray from a long array. Returns EMPTY if array is empty.
1312 Converts a LongStream to an ImmutableLongArray. Returns EMPTY if the stream is empty.
1313 Returns a new ImmutableLongArray or the current object. Uses m1() and m2() to determine the return value.
1314 Creates a ScaleAndIndexes object with given indexes and a fixed scale. @param indexes Collection of integer indexes. @return A ScaleAndIndexes object.
1315 Creates an ImmutableIntArray from a Collection, or returns EMPTY if null.
1316 Creates an ImmutableLongArray from a Collection, or returns EMPTY if null.
1317 Parses a string as a number with given radix, validates, returns Integer.
1318 Calls m1 with default precision. @param string String to process; returns Long or null.
1319 Parses a string value and returns an integer. @param stringValue The string to parse. @return Parsed integer value.
1320 Creates an UnsignedInteger from a long value, validating the range. @param value The long value to convert. @return An UnsignedInteger object.
1321 Converts a BigInteger to an UnsignedInteger, validating its range. @param value BigInteger to convert; must fit within unsigned int range. @return UnsignedInteger representation of the value.
1322 Converts a string to an unsigned integer. @param string String to convert. @param radix The radix of the number in the string.
1323 Calculates a masked value based on input. @param val The UnsignedInteger to mask. @return The masked UnsignedInteger result.
1324 Calculates a masked value based on input. @param val The UnsignedInteger to mask. @return The masked UnsignedInteger value.
1325 Calculates a masked value based on input UnsignedInteger. @param val The UnsignedInteger to mask. @return The masked UnsignedInteger value.
1326 Masks an unsigned integer value using internal helper methods. @param val The unsigned integer to mask. @return The masked UnsignedInteger value.
1327 Masks the UnsignedInteger value using internal methods. @param val The UnsignedInteger to mask. @return The masked UnsignedInteger.
1328 Calls m1 with default value 10 and returns the result.
1329 Calculates a masked value using another UnsignedInteger. Calls m1 and then returns a value based on m2.
1330 Converts a long value to an UnsignedLong. @param value The long value to convert. @return An UnsignedLong representing the value.
1331 Converts a BigInteger to an UnsignedLong, validating its range. @param value The BigInteger to convert. @return An UnsignedLong representation of the value.
1332 Calculates a masked value based on input and internal state. @param val The input UnsignedLong value to be masked. @return The masked UnsignedLong value.
1333 Calculates a masked value based on input and internal state. @param val Input UnsignedLong value. @return Masked UnsignedLong value.
1334 Calculates a masked value based on input. @param val Input UnsignedLong value. @return Masked UnsignedLong value.
1335 Performs a masked division operation on two long values. Returns a masked quotient based on dividend and divisor.
1336 Calculates a masked result from dividend and divisor. Handles negative divisors and dividend signs.
1337 Converts a string to an unsigned long using the given radix. @param string String to convert. @param radix Radix of the number system. @return UnsignedLong representation of the string.
1338 Overloads m1 with a default value for the count parameter. @param string The string to process. @return long value.
1339 Parses a string value into a long, handling NumberFormatExceptions. @param stringValue The string to parse. @return The parsed long value.
1340 Checks if all m1, m2, and m3 return false. Returns true if all are false, false otherwise.
1341 Returns a TypeToken for the type T if m1() is true; otherwise, returns this.
1342 Returns a TypeToken for the type T if m1() is true, else returns this.
1343 Gets the component type. Returns null if component type is null.
1344 Delegates to Platform.m1(this) and returns the result.
1345 Submits a Callable to the executor and adds its Future to a queue. @param executorService Executor service to run the task. @param task Callable task to execute. @param queue Queue to hold the Future. @return ListenableFuture representing the task's execution.
1346 Calls the superclass's m1 method with the given timeout. @param timeout The timeout duration for the operation.
1347 Calls the m1 method of the superclass, potentially throwing TimeoutException.
1348 Calls the superclass's m1 method with the given timeout. @param timeout Timeout duration for the operation.
1349 Calls the superclass's m1 method with the given timeout. @param timeout The timeout duration for the operation.
1350 Calls the superclass's m1 method with the given timeout. @param timeout The timeout duration for the operation.
1351 Calls the superclass's m1 method with the provided timeout. @param timeout The timeout duration for the operation.
1352 Calls the superclass's m1 method with the provided timeout. @param timeout The timeout duration for the operation.
1353 Calls the m1 method of the superclass, potentially throwing TimeoutException.
1354 Processes future input, calls m4 with result, handles exceptions.
1355 Applies a function to delta using m1. @param delta The input double value.
1356 Applies a function to delta using m1. @param delta The input double value. @return The result of applying the function.
1357 Calculates a value using m1 with a sum operation. @param i integer input @param delta double input @return double result of the calculation
1358 Calls m1 with provided arguments and Double::sum as the accumulator. @param i integer value @param delta double value @return Result of the m1 function.
1359 Attempts to cancel the future. @param mayInterruptIfRunning whether to interrupt if running @return True if cancellation was possible.
1360 Finds a stack trace path from a node, returning null if not found.
1361 Creates a ListenableFutureTask from a Callable. @param callable Callable to wrap in a ListenableFutureTask. @return ListenableFutureTask wrapping the given Callable.
1362 Creates a ListenableFutureTask with given runnable and result. @param runnable The task to execute. @param result The result of the task. @return A ListenableFutureTask instance.
1363 Executes the first method (m1) of the executionList.
1364 Creates and returns a new ExecutionSequencer instance.
1365 Wraps a ListenableFuture as a FluentFuture, if not already.
1366 Wraps a ListenableFuture, propagating cancellation if needed. @param future The ListenableFuture to wrap. @return A NonCancellationPropagatingFuture.
1367 Executes operations and returns a ListenableFuture. @param key The key to use in operations. @param oldValue The old value to use in operations. @return A ListenableFuture representing the result.
1368 Calls m1 with the provided event as both arguments. @param event The event to pass to m1.
1369 Processes an event with a label by calling m1. @param event The event to process. @param label A label associated with the event.
1370 Calls listeners if monitor fails; otherwise, does nothing.
1371 Executes listeners, ensuring the monitor is not held.
1372 Iterates through active guards, executes m2 if m1 returns true.
1373 Creates and executes a ListenableFuture from an AsyncCallable. @param callable AsyncCallable to execute @param executor Executor to run the task with @return ListenableFuture representing the callable's execution
1374 Creates a ListenableFuture that executes callable with a delay. @param callable Callable to execute. @param delay Delay in timeUnit. @param executorService Executor for scheduling. @return ListenableFuture wrapping the callable's result.
1375 Creates a TrustedListenableFutureTask from a Callable. @param callable Callable to wrap in a future. @return A TrustedListenableFutureTask.
1376 Creates a ListenableFuture from a Callable, using the given executor. @param callable Callable to execute @param executor Executor to run the Callable @return ListenableFuture wrapping the Callable's result
1377 Creates a listenable future task with the given runnable and value. @param runnable The runnable to execute. @param value The result value of the future. @return A TrustedListenableFutureTask.
1378 Submits a runnable to an executor and returns a ListenableFuture. @param runnable The task to execute. @param executor The executor to run the task on.
1379 Acquires semaphore, timing out after the given duration. @param semaphore the semaphore to acquire @param timeout the timeout duration @return true if acquired, false if timeout occurred
1380 Returns an Optional containing the first element or empty.
1381 Returns an optional element from the iterable, last if list.
1382 Finds the first element matching the predicate in the iterator. @param iterator Iterator to search. @param predicate Predicate to test each element. @return Optional containing the first matching element, or empty.
1383 Sets the expected node count for graph building. @param expectedNodeCount The expected number of nodes. @return This GraphBuilder instance for chaining.
1384 Sets the expected node count for the network. @param expectedNodeCount The expected number of nodes. @return This NetworkBuilder instance.
1385 Sets the expected edge count for the network. @param expectedEdgeCount The expected number of edges. @return This NetworkBuilder instance.
1386 Sets the expected node count for the graph. @param expectedNodeCount The expected number of nodes. @return This builder instance.
1387 Checks if any element in the iterable matches the predicate. @param iterable Iterable to check. @param predicate Predicate to apply to each element.
1388 Returns a predicate that checks if a CharSequence contains pattern. @param pattern The pattern to search for. @return A predicate checking for pattern containment.
1389 Calls m1 and m2 with the provided Throwable and Class. @param throwable The exception to pass. @param declaredType The declared type of the exception.
1390 Retrieves a set of classes from the flattenHierarchyCache. @param concreteClass The class to retrieve the hierarchy for.
1391 Gets the current request thread factory. Returns a ThreadFactory or throws an exception if unavailable.
1392 Checks if target is present in the iterable returned by m1(). @param target The object to search for. @return True if found, false otherwise.
1393 Filters a multimap's entry set based on the provided predicate. @param multimap The multimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered multimap containing matching entries.
1394 Filters a ListMultimap based on a key predicate. @param unfiltered The input ListMultimap to filter. @param keyPredicate Predicate to filter keys. @return A new filtered ListMultimap.
1395 Creates a FluentIterable from an Iterable, specifying the element type. @param type The class of elements in the iterable. @return A FluentIterable of the specified type.
1396 Checks if a collection contains all elements of this set.
1397 Creates an EnumMultiset from an iterable of enum elements. @param elements Iterable of enum elements to build the multiset. @return EnumMultiset containing the elements.
1398 Converts an iterable to a LinkedList. @param elements Iterable to convert. @return LinkedList containing elements from the iterable.
1399 Creates an ArrayDeque from an Iterable. Uses Collection constructor if available, otherwise iterates.
1400 Creates a ConcurrentLinkedQueue from an iterable. @param elements Iterable to populate the queue from. @return ConcurrentLinkedQueue containing elements.
1401 Creates a LinkedBlockingDeque from an Iterable. @param elements Iterable to populate the deque from. @return LinkedBlockingDeque containing elements.
1402 Creates a LinkedBlockingQueue from an iterable. @param elements Iterable to populate the queue with. @return LinkedBlockingQueue containing elements.
1403 Creates a PriorityBlockingQueue from an iterable. @param elements Iterable elements to populate the queue. @return PriorityBlockingQueue containing the elements.
1404 Creates a PriorityQueue from an Iterable or Collection of elements.
1405 Creates an EnumSet from an iterable, adding elements of specified type.
1406 Converts an iterable to a set. @param elements iterable to convert @return A set containing the elements from the iterable.
1407 Converts an iterable to a LinkedHashSet. @param elements Iterable to convert; returns a new LinkedHashSet.
1408 Creates a TreeSet from an Iterable of comparable elements. @param elements Iterable of elements to add to the TreeSet @return A TreeSet containing the elements from the Iterable
1409 Returns a Collection from the given Iterable, or converts it.
1410 Converts an iterable to an ArrayList. Handles Collection types.
1411 Converts an Iterable to a HashSet. Handles Collection and Iterable.
1412 Checks if all elements in the iterable satisfy the predicate. @param predicate Predicate to test each element. @return True if all elements satisfy the predicate.
1413 Returns a list iterator starting at the specified index. @param start the index to start the list iterator
1414 Creates a SortedAsMapView from a SortedSet and a Function. @param set SortedSet of keys. @param function Function to map keys to values.
1415 Transforms a SortedMap's entries using a provided transformer. @param fromMap Input SortedMap. @param transformer Entry transformation function. @return Transformed SortedMap.
1416 Transforms a map's values using a function and returns a new map. @param fromMap Input map with keys K and values V1. @param function Function to apply to each value (V1 to V2). @return New map with the transformed values (V2).
1417 Increments element count in backing map. @param element element to increment, may be null. @param occurrences number of occurrences to add. @return previous count of the element.
1418 Adds occurrences to an element's count in a map. @param element The element to update. @param occurrences The number of occurrences to add. @return The previous count or 0 if unsuccessful.
1419 Transforms values in a ListMultimap using the provided transformer. @param fromMap Source ListMultimap. @param transformer Transforms values from V1 to V2. @return New ListMultimap with transformed values.
1420 Transforms values in a Multimap using a Function. @param fromMultimap Multimap to transform, K is key, V1 is value @param function Function to apply to each value, V1 to V2 @return Transformed Multimap, K is key, V2 is value
1421 Adds elements from an iterable and returns the builder.
1422 Adds elements from a collection to the multiset. @param self the multiset to add to @param elements the collection of elements to add @return true if all elements were added, false otherwise
1423 Delegates to m1 to check if the input is contained.
1424 Creates a TableCollector using provided functions and supplier. @param rowFunction Maps T to R (row key). @param columnFunction Maps T to C (column key). @param valueFunction Maps T to V (value). @param tableSupplier Supplies the Table instance.
1425 Masks characters in a string based on a defined process. @param s input string @param index starting index @return masked string
1426 Constructs a StandardNetwork using the provided builder and connection maps.
1427 Constructs a StandardValueGraph with given builder, connections, and edge count.
1428 Copies data from a Readable to an Appendable, returning the count.
1429 Converts CharSequence to byte array, throws IllegalArgumentException on error.
1430 Masks a BigInteger using CEILING and m1. @param x The BigInteger to mask. @return The masked BigInteger.
1431 Calculates a masked value from the input BigInteger. @param x The input BigInteger to be masked. @return The masked BigInteger value.
1432 Creates an Invokable from a constructor. @param constructor Constructor to wrap. @return An Invokable instance.
1433 Creates an Invokable from a Method. @param method The method to wrap in an Invokable. @return An Invokable instance.
1434 Processes a future, executes listeners, and handles dependencies.
1435 Applies a delta to a key using a summing operation. @param key The key to operate on. @param delta The delta value to apply. @return The result of the operation.
1436 Applies a delta to a key using a summing function. @param key The key to operate on. @param delta The delta value to apply. @return The result of the operation.
1437 Applies a mapping operation to the provided map. @param m The map to be processed.
1438 Constructs a new AbstractGraphBuilder with directed flag. @param directed if true, graph is directed; otherwise, undirected.
1439 Registers a listener and executor with the listeners queue. @param listener The listener to register. @param executor The executor to use.
1440 Applies a transformation to the input 'a' using m1. @param a The input object of type A. @return Transformed object of type B or null.
1441 Constructs a new CompactHashMap with the default initial capacity.
1442 Constructs a CompactHashMap with an expected size. @param expectedSize The initial capacity of the map.
1443 Constructs a new CompactHashSet with the default initial capacity.
1444 Constructs a CompactHashSet with an expected size. @param expectedSize The initial capacity estimate.
1445 Extracts a modified class name based on dollar sign presence. Returns a modified name or the original if no '$' is found.
1446 Constructs a SortedSetMultimap from a Map. @param map A map where keys are keys and values are sorted sets.
1447 Creates a Multimap from a Map and a Collection factory. @param map Source map. @param factory Collection factory.
1448 Creates and returns a new, empty HashMultiset.
1449 Creates and returns an empty LinkedHashMultiset.
1450 Creates an EnumMultiset from elements and a type. @param elements Iterable of enum elements to add. @param type Class of the enum type. @return EnumMultiset containing the elements.
1451 Returns the result of applying Math.m2 to the value of m1().
1452 Returns the result of applying Math.m2 to the value of m1().
1453 Calculates a value by applying Math.m2 to the result of m1().
1454 Calculates a value by applying Math.m2 to the result of m1().
1455 Creates a CharMatcher with the given sequence as a mask. @param sequence The sequence used to create the CharMatcher. @return A CharMatcher instance.
1456 Creates a StringConverter for the specified target format. @param targetFormat The target CaseFormat for conversion.
1457 Composes a converter with another, applying a function. @param secondConverter The second converter to compose. @return A new ConverterComposition.
1458 Returns a converter, caching it if not already cached.
1459 Creates a String to Enum converter for the given enum class. @param enumClass The enum class to create the converter for. @return A String to Enum converter.
1460 Creates a Converter from a BiMap. @param bimap The BiMap to use for conversion. @return A Converter using the provided BiMap.
1461 Delegates to Lists.m1, passing 'this' and the object.
1462 Creates a ConcurrentHashMultiset and adds elements from iterable. @param elements Iterable containing elements to add to multiset. @return ConcurrentHashMultiset containing the added elements.
1463 Appends object array to appendable. @param appendable target appendable @param parts object array to append @return the appendable object
1464 Appends parts from an Iterable to the builder. @param builder StringBuilder to append to @param parts Iterable containing parts to append @return The builder with appended parts
1465 Concatenates parts from an iterator into a string. @param parts Iterator of parts to concatenate @return The concatenated string
1466 Delegates to m2 with the result of map.m1(). Returns the value returned by the delegated call.
1467 Delegates to a chained method call for string manipulation.
1468 Generates a string representation of the object's fields. Includes initialCapacity, concurrencyLevel, key/value strengths.
1469 Generates a string representation of the object's fields. @return String representation of the object.
1470 Initializes the MapMakerInternalMap with provided builder and helper. Sets concurrency, segments, and initializes segment capacities.
1471 Transforms an Optional, returning null if empty. @param javaUtilOptional The Optional to transform. @return Transformed value or null if Optional is empty.
1472 Parses host and port, validating and creating a HostAndPort object.
1473 Parses a host string and returns a HostAndPort object.
1474 Retrieves element at position from iterable. @param iterable Iterable to retrieve from. @param position Index of element to retrieve. @return Element at the specified position.
1475 Creates a Bloom filter with specified parameters. @return A new BloomFilter instance.
1476 Calculates wait time in seconds based on permits. @param permits number of permits; returns wait time in seconds
1477 Calls m2 with a unit time and timeout duration. @param timeout Timeout duration for the operation. @return True if the operation succeeds, false otherwise.
1478 Calls m1 with a fixed retry count. @param timeout Timeout duration. @param unit Time unit for the timeout. @return True if successful, false otherwise.
1479 Checks if permits are available, using default timeout. @param permits The number of permits to check.
1480 Calls m1 with default values for parameters. Returns the result of the call.
1481 Delegates to another m2 call with nanosecond time unit. @param permits The number of permits. @param timeout Duration timeout.
1482 Attempts to acquire the lock within a specified timeout. @param time Timeout duration. @param unit Time unit for the timeout. @return True if lock acquired, false if timeout expires.
1483 Protected constructor to prevent direct instantiation.
1484 Checks if a condition holds true for all elements. Returns false if any element fails the condition.
1485 Creates a CacheBuilder with configured parameters. @return CacheBuilder object configured with specified settings.
1486 Delegates to the MapMaker's m1() method and returns it.
1487 Verifies service state. @param expected The expected state of the service.
1488 Retrieves a value from the array at the given row and column. @param rowIndex Row index. @param columnIndex Column index. @return Value at the specified row and column.
1489 Sets a value at the specified row/column and returns the old value. @param rowIndex Row index. @param columnIndex Column index. @param value New value to set. @return The previous value at the specified location.
1490 Retrieves array element at given index. @param index Index of the element to retrieve. @return The element at the specified index.
1491 Retrieves an element from the array at the given index. @param index Index of the element to retrieve. @return The element at the specified index.
1492 Retrieves an array element at the given index. @param index The index of the element to retrieve. @return The element at the specified index.
1493 Finds first index of a character satisfying predicate. @param sequence CharSequence to search. @param start Start index (inclusive). Returns -1 if not found.
1494 Constructs a new AbstractIndexedListIterator. @param size list size, @param position initial position
1495 Creates a ByteArrayDataInput from a byte array slice. @param bytes byte array @param start start index in the byte array @return ByteArrayDataInput object
1496 Checks if byte array segment contains negative bytes. @param bytes byte array @param off start index @param len length of segment @return true if no negative bytes, otherwise calls m2
1497 Copies elements from src to dst array, handling offset, len. @param src Source array. @param offset Starting offset in src. @param len Number of elements to copy. @param dst Destination array. @return Destination array.
1498 Extracts a portion of an array. @param elements array to extract from, offset, length @return new array with extracted elements
1499 Masks data in byte array. @param dest Destination array, offset, maxLength - data to mask. @return Number of masked bytes.
1500 Converts byte array to String, using internal helper methods. @param bytes byte array to convert @param off start offset in the byte array @param len number of bytes to convert @return String representation of the byte array segment
1501 Reads up to {@code len} bytes from input stream into byte array. @param in input stream @param b byte array @param off offset in byte array @param len number of bytes to read @return number of bytes read
1502 Reverses a portion of the boolean array between fromIndex and toIndex.
1503 Reverses a portion of the byte array between fromIndex and toIndex.
1504 Reverses a portion of the char array between fromIndex and toIndex.
1505 Reverses a portion of the array in place. @param array The array to reverse. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1506 Reverses a portion of the array in place. @param array Array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1507 Creates an immutable double array slice. @param startIndex Start index (inclusive). @param endIndex End index (exclusive).
1508 Creates an immutable int array slice. @param startIndex start index (inclusive) @param endIndex end index (exclusive)
1509 Creates an ImmutableLongArray slice from array. @param startIndex start index (inclusive) @param endIndex end index (exclusive)
1510 Reverses a portion of the array between fromIndex and toIndex.
1511 Reverses a portion of the array in place. @param array The array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1512 Reverses a portion of the array in place. @param array The array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1513 Modifies a byte array segment using m1, m2, m3, and Arrays.m4.
1514 XORs bytes in array[fromIndex, toIndex) with Byte.MAX_VALUE. @param array byte array to modify @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1515 Modifies array elements within a specified range. @param array The array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1516 XORs elements in array[fromIndex, toIndex) with Integer.MAX_VALUE.
1517 Modifies array elements within a range using m3 and Arrays.m4. @param array The array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1518 XORs elements in array[fromIndex, toIndex) with Long.MAX_VALUE. @param array The array to modify. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1519 Filters a collection based on a predicate. @param unfiltered Collection to filter. @param predicate Predicate to apply for filtering. @return Filtered collection.
1520 Creates a Splitter using the given separator character. @param separator The character to use as a separator. @return A Splitter instance.
1521 Default constructor for SleepingStopwatch. No-op.
1522 Constructs a Finalizer with a reference class, queue, and phantom reference.
1523 Constructs a new Builder instance.
1524 Creates a new Builder instance for functional masking. @return A new Builder object.
1525 Constructs a new Builder instance.
1526 Default constructor for ForwardingSortedMultiset.
1527 Protected constructor for ForwardingDeque, used for subclassing.
1528 Default constructor for ForwardingBlockingQueue. No-op.
1529 Protected constructor for ForwardingSortedSet. No-op.
1530 Protected constructor for creating a ForwardingNavigableMap.
1531 Creates an unmodifiable BiMap from the given BiMap. @param bimap The BiMap to wrap in an unmodifiable view. @return An UnmodifiableBiMap.
1532 Creates a new MutableClassToInstanceMap with a HashMap. Returns the created map instance.
1533 Creates a MutableClassToInstanceMap from a backing map. @param backingMap Map of class to instance; cannot be null. @return A MutableClassToInstanceMap.
1534 Creates an ImmutableTypeToInstanceMap from a predefined ImmutableMap. @return An ImmutableTypeToInstanceMap containing the predefined mappings.
1535 Protected constructor for ForwardingSortedSetMultimap.
1536 Returns an unmodifiable view of the given Multimap. Returns delegate if already unmodifiable.
1537 Wraps a table with an unmodifiable wrapper. @param table The table to wrap. @return An UnmodifiableTable instance.
1538 Wraps a Future as a ListenableFuture, or returns it if already one. @param future The Future to wrap. @param executor Executor for asynchronous callbacks. @return ListenableFuture wrapping the given Future.
1539 Delegates to the underlying map's `m2` method. @param key The key to look up. @return The value associated with the key, or null.
1540 Delegates to the underlying m2 method. @param key The key for the value. @param valueLoader Callable to load the value. @return The loaded value of type V.
1541 Delegates to m1().m2() to create an ImmutableMap from keys.
1542 Delegates method call to the underlying m1().m2(key, value).
1543 Delegates the map 'm' to the result of m1(). @param m The map to be delegated.
1544 Delegates key processing to the m1().m2 method. @param keys Iterable of keys to process.
1545 Creates a reference entry for a segment, key, hash, and next entry.
1546 Creates a reference entry for a segment, key, hash, and next entry.
1547 Creates a reference entry for a segment, key, hash, and next entry.
1548 Creates a reference entry for a segment, key, hash, and next entry.
1549 Creates a reference entry for a segment, used in hash table. @param segment Segment to add entry to. @param key Key for the entry. @param hash Hash code of the key. @param next Next entry in the chain.
1550 Creates a reference entry for a segment, key, hash, and next entry.
1551 Updates an entry with a new value and related metadata. @param entry The entry to update.
1552 Returns the first element from the iterable returned by m1().
1553 Calculates a masked degree sum and sets a flag. Returns the degree sum right-shifted by 1.
1554 Processes an input stream and returns a byte array. Uses helper methods m1 and m2 for processing.
1555 Reads bytes from an InputStream into a byte array. @param in InputStream to read from @param expectedSize Expected number of bytes to read @return Byte array containing read bytes
1556 Constructs a new AbstractBiMap with the given forward and backward maps.
1557 Delegates to the superclass's m1 method with the given key. @param key The key to pass to the superclass's m1 method. @return List of values returned by the superclass's m1.
1558 Merges values into a collection, updating size and handling duplicates. @param key Key for the collection. @param values Values to merge. @return Merged collection.
1559 Delegates to the superclass's m1 method and casts the result. @param key The key to pass to the superclass's m1 method. @return Set<V> returned by the superclass's m1 method.
1560 Returns a sorted set associated with the key, from parent. @param key the key to look up @return SortedSet of values for the given key
1561 Returns a masked value using a private helper method.
1562 Returns a masked value using Maps.m1, specific to this object.
1563 Creates a new HashMap with the specified expected size. @param expectedSize The initial capacity of the HashMap.
1564 Checks if graph satisfies a condition based on edge count. @param graph The graph to check. @return True if the condition is met, false otherwise.
1565 Creates a HashBasedTable with specified row/cell expectations. @param expectedRows Expected number of rows. @param expectedCellsPerRow Expected cells per row.
1566 Creates a new HashMap with the specified expected size. @param expectedSize The initial capacity of the HashMap.
1567 Creates a map of specified type and expected size. @param expectedSize The expected size of the map. @return A map instance based on the 'type' field.
1568 Creates a new Set with the specified expected size. @param expectedSize The initial size of the set. @return A new Set with the given expected size.
1569 Creates a new set with the specified expected size. @param expectedSize The initial size of the set. @return A new set with the given expected size.
1570 Initializes ServiceManagerState with a collection of services. @param services Immutable collection of Service objects.
1571 Retrieves an Entry from the iterator, wrapped in Multisets. Returns null if the iterator is empty.
1572 Retrieves an entry from an iterator, returning a new Multisets entry.
1573 Retrieves and updates an entry from the iterator. Returns the entry or null if the iterator is empty.
1574 Retrieves and updates an entry from the iterator. Returns the entry or null if the iterator is empty.
1575 Delegates to the superclass implementation of m1(). Returns a set of multiset entries.
1576 Delegates to the superclass implementation of m1(). Returns a Set of Multiset entries.
1577 Copies range set to a TreeRangeSet and adds all ranges. @param rangeSet The range set to copy and add. @return A new TreeRangeSet containing the ranges.
1578 Builds a TreeRangeSet from an iterable of ranges. @param ranges Iterable of Range objects to add to the set. @return A TreeRangeSet containing the given ranges.
1579 Returns the navigable map from the superclass. Casts the result to the correct type.
1580 Delegates the call to the superclass's m1() method.
1581 Delegates the call to the parent class's m1() method. Returns a Collection of type V.
1582 Returns the reversed range or creates one if it doesn't exist.
1583 Creates a Cell object using provided rowKey, columnKey, and value.
1584 Returns a set of function masks. Abstract method.
1585 Adds a key-value pair to the builder. @param key The key for the entry. @param value The value for the entry. @return This builder instance.
1586 Creates an ImmutableMap from two key-value pairs. @param k1, v1 First key-value pair. @param k2, v2 Second key-value pair. @return ImmutableMap containing the pairs.
1587 Creates an ImmutableMap from three key-value pairs. @param k1, k2, k3 keys @param v1, v2, v3 values @return ImmutableMap containing the provided entries
1588 Creates an ImmutableMap from key-value pairs. @param k1, k2, k3, k4 keys @param v1, v2, v3, v4 values @return ImmutableMap containing the provided key-value pairs
1589 Creates an ImmutableMap from key-value pairs. @param k1, k2, k3, k4, k5 keys @param v1, v2, v3, v4, v5 values @return ImmutableMap containing the provided key-value pairs
1590 Creates an ImmutableMap from six key-value pairs. @param k1, k2, ..., k6 Keys for the map entries. @param v1, v2, ..., v6 Values for the map entries.
1591 Creates an ImmutableMap from key-value pairs. @param k1, k2, ..., k7 keys @param v1, v2, ..., v7 values @return ImmutableMap containing the provided key-value pairs
1592 Creates an ImmutableMap from key-value pairs. @param k1, v1, ..., k8, v8 keys and values for the map @return ImmutableMap containing the provided key-value pairs
1593 Creates an ImmutableMap from nine key-value pairs. @param k1, k2,... key for the map entry @param v1, v2,... value for the map entry @return ImmutableMap containing the provided entries
1594 Creates an ImmutableMap from key-value pairs. @param k1, v1,...k10, v10 key-value pairs to include @return ImmutableMap containing the provided entries
1595 Creates an ImmutableMapEntry from an Entry, using its key/value.
1596 Adds an entry to the builder and returns this builder. @param entry The entry to add. @return This builder instance for chaining.
1597 Applies a function to each entry in the provided iterable. @param entries Iterable of entries to process. @return This builder object for chaining.
1598 Adds an entry to the builder and returns a builder instance.
1599 Filters a sorted set based on a predicate, optimizing if possible. @param unfiltered The original sorted set. @param predicate The filtering predicate. @return A new filtered SortedSet.
1600 Updates the internal table based on delegate and size. Delegates to m1, m2, m3, m4, m5, m6, m7, m8, m9, m10.
1601 Updates the internal table based on size and delegate set.
1602 Checks if lowerBound is less than or equal to upperBound.
1603 Compares this Range with another. Returns true if both bounds match. @param object The object to compare with. @return True if both ranges are equal, false otherwise.
1604 Processes an element using m1 and m2. @param element The element to be processed. @return Always returns true.
1605 Returns an iterator for the elements. @return An iterator over the elements.
1606 Returns a list iterator for the element at index 0.
1607 Retrieves an AvlNode based on range and header conditions.
1608 Copies a table to a HashBasedTable. @param table The table to copy. @return A new HashBasedTable containing the data.
1609 Creates a new TreeBasedTable with natural ordering for rows/cols. @return A new TreeBasedTable instance.
1610 Creates a new TreeBasedTable with specified row/column comparators.
1611 Creates a new HashBiMap with the specified expected size.
1612 Creates a new Builder instance for functional masking. @return A new Builder object.
1613 Default constructor for the Builder class.
1614 Creates a new builder with the default Ordering. @return A new Builder instance.
1615 Creates a new Builder with the given comparator for keys. @param comparator Comparator to order keys. @return A new Builder instance.
1616 Creates a new Builder with a predefined Ordering. @return A Builder instance configured with Ordering.
1617 Creates an immutable map containing the given key-value pair. @param k1 The key. @param v1 The value. @return An immutable map.
1618 Returns an immutable BiMap with masked keys.
1619 Creates a new Builder instance for function masking. @return A new Builder object.
1620 Creates a new Builder instance with the given comparator. @param comparator Comparator used for sorting elements. @return A new Builder object.
1621 Creates a new Builder instance with an empty Comparable collection.
1622 Creates a new Builder with the default Ordering. Returns a Builder object for constructing functional interfaces.
1623 Returns a masked list: returns self if size <= 1, else reversed.
1624 Converts a string to an ImmutableList of characters. Uses m1() internally to process the string.
1625 Creates an immutable list containing only the provided element. @param e1 The element to be the sole element in the list. @return An ImmutableList containing only e1.
1626 Returns the set of entries, creating it if it's null.
1627 Creates a set containing only the provided element. @param e1 The element to be the sole member of the set. @return An ImmutableSet containing only 'e1'.
1628 Retrieves the parsed charset, or determines it from parameters. @return Optional Charset object, or empty if not defined.
1629 Calls m1() on each service in the services list. @return The current ServiceManager instance.
1630 Checks if all services have m1() returning true. Returns false if any service's m1() returns false.
1631 Creates a Builder with the given expected size. @param expectedSize The expected size of the data structure. @return A Builder object initialized with the size.
1632 Adds all entries from a multimap to the builder. @param multimap Multimap to add entries from. @return This builder instance.
1633 Deletes files at the given path, throwing FileSystemException. @param path Path to delete. @param exceptions Collection of IOExceptions during deletion.
1634 Combines multiple iterators into a single iterator. @param inputs Iterators to combine; can be empty. @return A combined iterator.
1635 Retrieves an element. Null key returns null. Uses m1/m2/m3.
1636 Calls m2() if readCount.m1() doesn't meet DRAIN_THRESHOLD.
1637 Checks if key is less than the smallest key >= key. @param key The key to check. Returns true if condition met.
1638 Returns a sorted map containing entries between fromKey and toKey. @param fromKey start key (inclusive) @param toKey end key (inclusive)
1639 Compares two maps and returns a MapDifference object. @param left The left map. @param right The right map. @param valueEquivalence Equivalence for comparing values.
1640 Computes the difference between two sorted maps. @param left Left sorted map. @param right Right map. @return SortedMapDifference representing the difference.
1641 Constructs an AsyncEventBus with identifier and executor. @param identifier Event bus identifier @param executor Executor for asynchronous event handling
1642 Creates an AsyncEventBus with a given executor and exception handler.
1643 Constructs an AsyncEventBus with a provided executor. @param executor Executor for asynchronous event handling.
1644 Constructs an EventBus with a given identifier. @param identifier EventBus identifier.
1645 Constructs an EventBus with default name and dispatchers. @param exceptionHandler Handler for subscriber exceptions.
1646 Applies a transformation to the input index. @param index Input index value. @return Transformed index value.
1647 Calculates a value based on the input index, using helper methods.
1648 Returns null or the result of m3(m2()), based on m1().
1649 Calls m2 on the appropriate heap based on crossOver result. @param index Index to pass to m2. @param x Value to pass to m2.
1650 Checks if an object satisfies a condition based on m1. @param object The object to check. Returns true if m1(object) > 0.
1651 Processes an element using m1 and returns true. @param element The element to be processed. @return True after processing.
1652 Checks if an element satisfies a condition based on m1. @param element The element to check. Returns true if condition met.
1653 Iterates over elements from m1().m2() using Iterators.m3.
1654 Returns value from entry if object matches; otherwise, 0.
1655 Returns the result of calling m1().m2().
1656 Returns a combined string from nested method calls.
1657 Delegates array processing to ObjectArrays.m1. @param array The input array to be processed. @return The processed array.
1658 Returns the masked iterator from m1(). @return Masked iterator or null if m1() returns null.
1659 Returns a sorted set of elements between fromElement and toElement.
1660 Transforms an element using an iterator, returning null if empty. @param e The element to transform. @return Transformed element or null.
1661 Transforms an element using an iterator, returning null if empty. @param e The element to transform. @return Transformed element or null.
1662 Returns a sorted set containing toElement, or an empty set if null.
1663 Transforms an element using Iterators, returning null if empty. @param e The element to transform. @return Transformed element or null.
1664 Masks an element using an iterator, returning null if empty. @param e The element to mask. @return Masked element or null if the iterator is empty.
1665 Returns a navigable set between fromElement and toElement. @param fromElement Start element (inclusive). @param toElement End element (inclusive).
1666 Returns a sorted set starting with fromElement. @param fromElement The starting element for the set. @return A sorted set containing fromElement.
1667 Returns a sorted set derived from the result of m1().m2().
1668 Returns the sorted map from the superclass, casting the result.
1669 Wraps a deque in a synchronized deque. @param deque The deque to wrap. @return A synchronized deque.
1670 Constructs ArrayBasedCharEscaper with a replacement map and safe range. @param replacementMap Map of chars to replacement strings. @param safeMin The lower bound of safe characters. @param safeMax The upper bound of safe characters.
1671 Creates and returns a CharArrayDecorator for m1().
1672 Creates an ArrayBasedUnicodeEscaper with a replacement map. @param replacementMap Character to String replacements @param safeMin Safe minimum character code @param safeMax Safe maximum character code @param unsafeReplacement Replacement for unsafe chars
1673 Calculates a hash code from a byte array. @param bytes The byte array to hash. @return A HashCode object representing the hash.
1674 Converts a string to a byte array using a custom algorithm. Requires input string to have at least 2 even characters.
1675 Combines multiple HashCode objects into a single HashCode. @param hashCodes Iterable of HashCode objects to combine. @return A new HashCode representing the combined values.
1676 Combines multiple HashCode objects into a single HashCode. @param hashCodes Iterable of HashCode objects to combine.
1677 Creates a HashFunction using the derived secret key. @param key The input key used to derive the secret key. @return A HashFunction object.
1678 Creates a HashFunction using a SecretKeySpec derived from the key. @param key byte array key @return HashFunction object
1679 Derives a HashFunction from a key using HMAC-SHA256. @param key the input key as a byte array @return HashFunction derived from the key
1680 Creates a HashFunction using a SecretKeySpec derived from the key. @param key The input byte array key. @return A HashFunction object.
1681 Creates a ByteSource from a byte array. @param b The byte array to wrap. @return A ByteSource instance.
1682 Creates a CharSource based on the input CharSequence type. @param charSequence The CharSequence to create a CharSource from. @return A CharSource implementation.
1683 Calls m2 with provided lines and default line separator. @param lines Iterable of character sequences to process. @throws IOException if an I/O error occurs.
1684 Processes lines from a stream using a default line separator. @param lines Stream of character sequences to process. @throws IOException if an I/O error occurs during processing.
1685 Deserializes a BloomFilter from an InputStream. @param in Input stream containing BloomFilter data. @param funnel Funnel for hashing elements. @return BloomFilter object. @throws IOException if deserialization fails.
1686 Calculates the sum of numbers in an iterable. @param values Iterable of Number objects to sum.
1687 Calculates the exponent of a double based on the rounding mode. @param x double value @param mode RoundingMode to apply @return exponent of the double
1688 Checks a hash table for a specific condition based on its length. @param hashTable The hash table to check. @return True if condition met, false otherwise.
1689 Adds an element to a buffer, updating threshold if necessary.
1690 Creates a new Alphabet instance with ignoreCase enabled. Returns a new Alphabet object with updated decode table.
1691 Creates a TopKSelector to find the top k elements based on comparator. @param k number of top elements to select @param comparator comparator for ordering elements
1692 Creates a TopKSelector to find the top K elements based on comparator. @param k The number of top elements to select. @param comparator Comparator for ordering elements.
1693 Creates a LinearTransformation based on input coordinates. @param x2 x-coordinate of the point @param y2 y-coordinate of the point @return LinearTransformation object
1694 Calculates a LinearTransformation based on statistics. Returns a LinearTransformation object.
1695 Calculates a LinearTransformation based on stats and conditions.
1696 Checks if a number is prime using various optimizations. @param n long number to check for primality @return true if n is prime, false otherwise
1697 Estimates the base-10 logarithm of a BigInteger, rounded. @param x BigInteger value to estimate log of @param mode RoundingMode to apply
1698 Calculates binomial coefficient (n choose k). @param n non-negative integer @param k non-negative integer @return binomial coefficient or Long.MAX_VALUE if overflow
1699 Calculates the sum of numbers in an Iterable. @param values Iterable of Number objects to sum.
1700 Updates sumOfProductsOfDeltas based on x and y values. Returns NaN if m2(x) or m2(y) is false.
1701 Iterates through numbers, applies m1, and calls m2. @param values Iterable of Number objects to process.
1702 Processes numbers from iterator, applying m3 to each. @param values Iterator of Number objects to process.
1703 Calls m6 with values from Stats if values.m1() is not 0.
1704 Processes stats accumulator if m1() is non-zero. @param values StatsAccumulator object containing data.
1705 Partially sorts an array within a specified range. @param required target index; @param array array to sort; @param from start index; @param to end index
1706 Processes a DoubleStream, adding elements to the builder. @param stream The DoubleStream to process. @return This builder instance.
1707 Processes a collection of Double values using m2. @param values Iterable of Double values to process. @return this Builder instance.
1708 Processes an IntStream, adding elements to the builder. @param stream The IntStream to process. @return This builder instance.
1709 Processes an iterable of integers, calling m2 for each value. @param values Iterable of integers to process. @return this Builder object.
1710 Processes a LongStream, adds elements to the builder. @param stream The LongStream to process. @return This builder object.
1711 Reads long values from input stream and populates the longs array.
1712 Processes a collection of Long values using m2. @param values Iterable of Long values to process. @return this Builder object.
1713 Calls m1 with a default count of 10. @param string The string to process. @return Integer result or null if processing fails.
1714 Parses a string to an unsigned integer using base 10. @param string The string to parse. @return The unsigned integer value.
1715 Calculates a masked value based on input and intermediate results. @param val The input UnsignedLong value to be masked. @return The masked UnsignedLong value.
1716 Converts a long to a string in the specified radix. @param x The long value to convert. @param radix The radix (base) to use for conversion.
1717 Masks values 'a' and 'b' using modulus 'm'. Returns the masked value.
1718 Applies a mask to a long value. @param a The long value to mask. @param m The mask value. @return The masked long value.
1719 Calculates a masked value based on input. @param val The input UnsignedLong value. @return A masked UnsignedLong value.
1720 Calls m1 with default precision. @param string The string to process. @return An UnsignedLong value.
1721 Checks if two Entry objects have matching m1 and m3 values. @param object The Entry object to compare. @return True if m1 and m3 match, false otherwise.
1722 Calculates a masked value based on results from m1() and m2().
1723 Concatenates the results of m1() and m2() with an equals sign.
1724 Checks if m1() returns a non-null value.
1725 Wraps an ExecutorService as a ListeningExecutorService. Handles ScheduledExecutorService as well.
1726 Returns a ListeningScheduledExecutorService, or decorates if needed.
1727 Executes tasks on executor, returns first result, or throws exception. @param executorService Executor service to run tasks on. @param tasks Collection of Callable tasks.
1728 Creates a combined future from a callable and executor. @param combiner AsyncCallable to combine results. @param executor Executor for asynchronous execution. @return CombinedFuture object.
1729 Creates a combined future from a callable and executor. @param combiner Callable to execute. @param executor Executor to run the callable. @return CombinedFuture instance.
1730 Checks and potentially reports a deadlock risk when acquiring a lock. @param policy Policy object to report deadlock exceptions. @param acquiredLock The lock being acquired.
1731 Executes operations and returns a ListenableFuture. @param key The key to use in operations. @param oldValue The old value to use in operations. @return A ListenableFuture representing the result.
1732 Transforms a future using helper methods and returns a ListenableFuture.
1733 Creates a ListenableFuture that executes the given callable. @param callable Callable to execute. @param executor Executor for the callable. @return ListenableFuture that wraps the callable's result.
1734 Executes a future, handling exceptions and re-throwing as X. @param validator validator instance @param future future to execute @param exceptionClass exception class to wrap @return Result of the future
1735 Retrieves the result of a Future with a timeout, handling exceptions. @param future Future to retrieve the result from. @param exceptionClass Exception class for re-throwing. @param timeout Timeout value. @param unit Timeout unit. @return The result of the Future.
1736 Executes m3() if lock state is 1, ensuring lock release.
1737 Waits on a guard condition, potentially signaling before waiting. @param guard The guard object. @param nanos Timeout in nanoseconds. @param signalBeforeWaiting Whether to signal before waiting. @return True if the wait was successful, false otherwise.
1738 Wraps a future, applying a timeout if the delegate is not already timed. @param delegate The future to wrap. @param time Timeout duration. @param unit Time unit for the timeout.
1739 Wraps a Callable in a ListenableFuture with a delay. @param callable Callable to wrap. @param delay Delay before execution. @param executorService Executor for delayed execution.
1740 Finds an enum constant by value. @param enumClass Enum class to search. @param value String value to match. @return Enum constant or empty Optional if not found.
1741 Finds the first element matching the predicate in the iterable. @param iterable Iterable to search. @param predicate Predicate to apply to each element.
1742 Checks if all elements in the iterable satisfy the predicate. @param predicate Predicate to apply to each element. @return True if all elements satisfy the predicate.
1743 Selects a CharMatcher based on totalCharacters and a BitSet.
1744 Calls m1, m2, and m3 with provided Throwable and class types. @param throwable Throwable object to pass to m2 and m3 @param declaredType1 Class type for m2 @param declaredType2 Class type for m1 and m3
1745 Wraps a Throwable in a RuntimeException and performs related actions.
1746 Wraps a Throwable as a RuntimeException after additional processing. @param e The exception to wrap. @param declaredType Exception type. @throws IOException, X
1747 Closes resources in a stack, handling exceptions and re-throwing.
1748 Creates a new thread with the given name and runnable. @param name thread name @param runnable runnable to execute @return new Thread object
1749 Filters a SetMultimap based on a key predicate. @param unfiltered The SetMultimap to filter. @param keyPredicate Predicate to filter keys. @return Filtered SetMultimap.
1750 Filters a SetMultimap based on the provided predicate. @param unfiltered The SetMultimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered SetMultimap.
1751 Retrieves an annotation of the specified type. @param annotationType The class of the annotation to retrieve. @return The annotation or null if not found.
1752 Creates a merging iterator from a collection of iterators. @param iterators Iterators to merge, must not be null. @param comparator Comparator for merging elements, must not be null.
1753 Delegates to m1 and returns the result of m2().
1754 Updates list of values associated with a key. @param key The key to update values for. @param values New values to merge with existing values. @return The old list of values associated with the key.
1755 Retrieves and processes values associated with a key. @param key The key to retrieve values for. @return List of values associated with the key.
1756 Creates a CopyOnWriteArrayList from an iterable of elements. @param elements Iterable to create the list from. @return CopyOnWriteArrayList containing the elements.
1757 Creates a CopyOnWriteArraySet from an iterable of elements. @param elements Iterable containing elements for the set. @return A CopyOnWriteArraySet containing the elements.
1758 Searches a list for a key using binary search. @param list List to search, @param key Search key, @return index
1759 Transforms keys into an Iterable of L objects based on stripes.
1760 Returns a string describing graph properties using helper methods.
1761 Returns a string describing the graph's properties.
1762 Transforms a NavigableMap using an EntryTransformer. @param fromMap Source map. @param transformer Transformation function. @return Transformed NavigableMap.
1763 Transforms values in a SortedMap using a Function. @param fromMap Input SortedMap. @param function Function to apply to each value. @return Transformed SortedMap.
1764 Increments element count in the backing map. @param element The element to increment. @param occurrences Number of times to increment. @return The old count of the element.
1765 Increments element count in backing map. @param element element to increment, may be null @param occurrences number of occurrences to add @return previous count of the element
1766 Transforms values in a ListMultimap using a provided function. @param fromMultimap The input multimap. @param function Function to transform V1 to V2. @return A new ListMultimap with transformed values.
1767 Adds elements from the collection to the multiset. @param elementsToAdd elements to add to this multiset @return true if the multiset was modified; false otherwise.
1768 Delegates adding elements to a collection. @param elementsToAdd Collection of elements to add. @return True if elements were added, false otherwise.
1769 Wraps a multimap with synchronization. @param multimap The multimap to synchronize. @return A synchronized Multimap.
1770 Wraps a table with synchronization. @param table The table to synchronize. @return A synchronized Table object.
1771 Processes a string, returning a modified version or the original.
1772 Reads data from a Readable object and appends it to a StringBuilder.
1773 Creates a ListenableFuture with fallback on specified exception. @param input Future to wrap, exceptionType, fallback, executor @return ListenableFuture with fallback functionality.
1774 Attempts to cancel the future. @param mayInterruptIfRunning if true, interrupts running tasks @return true if cancellation successful
1775 Executes m1 and m2 based on the input value. @param value Value to process; can be null. @return True if m1 returns true, false otherwise.
1776 Handles a throwable failure, setting a value if successful. @param throwable The exception to handle. @return True if the value was set, false otherwise.
1777 Handles future completion, potentially setting a value or failure.
1778 Transforms a ListenableFuture using a function and executor. @param input Input future. @param function Transformation function. @param executor Executor for the function. @return Transformed ListenableFuture.
1779 Masks a key using m1. @param key The key to mask. @return The masked key value.
1780 Calls m1 with key and -1 as the second argument. @param key The key to pass to m1. @return The result of calling m1.
1781 Masks a key using a predefined mask value. @param key The key to be masked. @return The masked key.
1782 Calls m1 with key and a default value of -1. @param key The key to pass to m1. @return The result of calling m1.
1783 Creates an AtomicLongMap and populates it from the input map. @param m source map to copy data from @return AtomicLongMap initialized with data from the map
1784 Constructs a GraphBuilder with the specified direction. @param directed true for directed graph, false for undirected.
1785 Constructs a NetworkBuilder with the specified direction. @param directed whether the network is directed
1786 Constructs a ValueGraphBuilder with the specified direction. @param directed Whether the graph is directed.
1787 Delegates m1 call to the listeners collection. @param listener Listener to notify. @param executor Executor for asynchronous operations.
1788 Delegates to m1 to convert an object of type A to B.
1789 Creates and returns a new, empty CompactHashMap instance.
1790 Creates a new CompactHashMap with the specified expected size.
1791 Creates and returns an empty CompactHashSet.
1792 Creates a new CompactHashSet with the specified expected size.
1793 Creates a ListMultimap from a Map, using a provided list factory. @param map Source map; keys are K, values are Collections of V. @param factory Supplier for creating lists to hold values. @return A ListMultimap.
1794 Creates a SetMultimap from a Map and a Set factory. @param map Source map. @param factory Set creation factory.
1795 Constructs a new Builder with a LinkedHashMultiset.
1796 Delegates conversion to m1. @param secondConverter Converter to use for conversion. @return Converter object.
1797 Appends object array parts to StringBuilder builder. @param builder StringBuilder to append to @param parts Object array to append @return StringBuilder with appended parts
1798 Joins elements of an iterable into a string, or recurses. @param parts Iterable of parts to join. @return Joined string, or recurses on the first element.
1799 Creates a MapMakerInternalMap based on builder's strength settings. @param builder MapMaker builder object @return MapMakerInternalMap instance
1800 Creates a MapMakerInternalMap based on builder strengths. Returns null if invalid combination of strengths is provided.
1801 Combines multiple iterables into a single FluentIterable. @param inputs Iterables to combine; can be empty. @return A FluentIterable containing all elements.
1802 Returns the element at the given position in the iterable. @param position the index of the element to retrieve @return the element at the specified position
1803 Calls m1 with default value (1). @return The result of m1(1).
1804 Converts a Duration to nanoseconds using m1, returns boolean.
1805 Checks if a guard is satisfied within a time limit. @param guard The guard to check. @param time The time limit. @param unit The time unit. @return True if satisfied, false otherwise.
1806 Creates a CacheBuilder based on the provided CacheBuilderSpec.
1807 Returns an Interner instance via chained method calls.
1808 Returns a new Interner instance via chained method calls.
1809 Updates a cell value for a given row and column. @param rowKey Row key @param columnKey Column key @param value New value for the cell @return Updated value or null if not found
1810 Retrieves a value from the data structure using row and column keys. @param rowKey Row key. @param columnKey Column key. @return Value at the specified row and column, or null if not found.
1811 Checks if two ImmutableDoubleArray objects are equal. @param object The object to compare with. @return True if objects are equal, false otherwise.
1812 Checks if two ImmutableIntArray objects are equal. @param object The object to compare to. @return True if objects are equal, false otherwise.
1813 Checks if two ImmutableLongArray objects are equal. @param object The object to compare with. @return True if objects are equal, false otherwise.
1814 Masks a string based on the given format. @param format CaseFormat object defining masking rules. @param s The string to be masked. @return The masked string.
1815 Overloads m1 with default start index of 0. @param sequence CharSequence to process
1816 Constructs an AbstractIndexedListIterator with initial size. Delegates to the primary constructor with index 0.
1817 Parses an Inet6Address and extracts Teredo information. @param ip The Inet6Address to parse. @return A TeredoInfo object containing parsed details.
1818 Checks if the byte array is strictly increasing. @param bytes The byte array to check.
1819 Calls overloaded method with entire byte array. @param bytes The byte array to process. @return String representation of the byte array.
1820 Reads len bytes from input stream in, throws EOFException on premature end.
1821 Calls m1 and then calls m2 with the array and its bounds.
1822 Rotates a boolean array segment by a given distance. @param array array to rotate, fromIndex, toIndex, distance
1823 Calls m1 and then m2 with the array and full range.
1824 Rotates a byte array segment. @param array array to rotate, distance is rotation amount @param distance rotation distance @param fromIndex start index @param toIndex end index
1825 Processes a byte array segment. @param array The byte array to process. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1826 Sorts a char array segment. @param array char array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1827 Calls m1 and then recursively processes the char array.
1828 Rotates a character array segment by a given distance. @param array char array to rotate, distance, fromIndex, toIndex
1829 Sorts a portion of the array using helper methods. @param array Array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1830 Calls m1 and then m2 with the array and initial/end indices.
1831 Rotates a portion of the array by a specified distance. @param array The array to be rotated. @param distance The distance to rotate the portion.
1832 Sorts a portion of the array using helper methods. @param array Array to sort. @param fromIndex Start index (inclusive). @param toIndex End index (exclusive).
1833 Calls m1 and then calls m2 with the entire array.
1834 Rotates a portion of a float array by a given distance. @param array The array to rotate. @param distance Rotation distance.
1835 Sorts a portion of the array using helper methods. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1836 Calls m1 and then calls m2 with the array and its bounds.
1837 Rotates a portion of an array by a given distance. @param array The array to rotate. @param distance Rotation distance. @param fromIndex Start index of the portion. @param toIndex End index of the portion.
1838 Sorts a portion of the array using internal methods. @param array array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1839 Calls m1 and then m2 with the array and range [0, length).
1840 Rotates a portion of the array by a given distance. @param array array to rotate, distance, fromIndex, toIndex
1841 Processes a portion of a short array using internal methods.
1842 Calls m1 and then m2 with the given short array and range.
1843 Rotates a short array segment by a distance. @param array Array to rotate. @param distance Rotation distance. @param fromIndex Start index of the segment. @param toIndex End index of the segment.
1844 Calls m1 and then m2 with the array and its full range.
1845 Calls m1 and then m2 with the array and full range.
1846 Calls m1 and then m2 recursively on the input array.
1847 Calls m1 and then calls m2 with the array and its bounds.
1848 Calls m1 and then m2 with the array and start/end indices.
1849 Calls m1 and then calls m2 with the array and length.
1850 Creates a splitter with custom logic for splitting strings. @param separator String used to split the input string.
1851 Splits a string using a specified separator. @param separator Character used to split the string. @return MapSplitter object containing split results.
1852 Creates and starts a finalizer thread for phantom references. @param finalizableReferenceClass Class of the finalizable reference.
1853 Creates a new Builder instance for functional masking. @return A new Builder object.
1854 Creates a new Builder instance for functional masking. @return A new Builder object.
1855 Returns a multiset that is either unmodifiable or a new one. @param multiset The input multiset. @return An unmodifiable multiset or the original if already so.
1856 Creates an EvictingQueue with the specified maximum size. @param maxSize The maximum number of elements in the queue. @return A new EvictingQueue instance.
1857 Protected constructor for ForwardingBlockingDeque.
1858 Default constructor for ForwardingBlockingDeque. No-op.
1859 Default constructor for ForwardingNavigableSet.
1860 Returns an unmodifiable set view of the given entry set.
1861 Returns an unmodifiable NavigableMap view of the input map.
1862 Returns an unmodifiable ListMultimap. Returns delegate if already unmodifiable.
1863 Returns an unmodifiable view of the given SetMultimap. Returns the delegate if already unmodifiable.
1864 Creates an unmodifiable view of the given RowSortedTable.
1865 Adapts a Future to a ListenableFuture. Returns the future if it's already a ListenableFuture.
1866 Attaches a callback to the future, executing on the given executor. @param future The ListenableFuture to attach the callback to. @param callback The FutureCallback to execute. @param executor Executor for callback execution.
1867 Constructs a LocalCache with the given builder and loader. @param builder CacheBuilder configuring cache parameters. @param loader CacheLoader responsible for loading cache values.
1868 Creates a new TreeMultiset with natural ordering. @return A new TreeMultiset instance.
1869 Creates a TreeMultiset with natural or provided order. @param comparator Comparator for ordering elements, or null. @return A new TreeMultiset.
1870 Calls super's m1 method with the given key and values. @param key The key to pass to the super method. @param values Iterable of values to pass. @return List of values returned by the super method.
1871 Calls the superclass's m1 method and casts the result to Set<V>.
1872 Delegates to the superclass's m1 method. @param key The key to use for the delegate call. @return A sorted set of values.
1873 Creates a new HashMultiset with the specified number of distinct elements.
1874 Recursively checks a condition on a network. Returns true if condition met, otherwise checks network.m5().
1875 Creates a LinkedHashMultiset with the specified number of distinct elements.
1876 Constructs a StandardNetwork using the provided builder. @param builder NetworkBuilder used to configure the network.
1877 Constructs a StandardValueGraph with default initial capacity. @param builder Graph builder to initialize the graph from.
1878 Returns a set of values from the expectedValuesPerKey map.
1879 Returns a set with a predefined capacity.
1880 Sets a cell value. @param rowKey Row key of the cell. @param columnKey Column key of the cell. @param value Value to set for the cell. @return This builder.
1881 Sets the key-value pair and returns the Builder instance.
1882 Adds a key-value pair to the map builder. @param key The key to add. @param value The value associated with the key.
1883 Populates the map builder with entries from the provided map. @param map A map of class to object pairs. @return This builder.
1884 Adds an entry to the builder. @param entry Entry to add, using its key and value. @return This builder instance.
1885 Sets the key-value pair and returns the Builder object.
1886 Associates a key-value pair to the map builder. @param key The key to associate. @param value The value associated with the key.
1887 Associates a key with a value using TypeToken. @param key The TypeToken representing the key. @param value The value to associate with the key.
1888 Adds entries from iterable to the map. @param entries iterable of entries to add @return this builder
1889 Adds entries from iterable. @param entries iterable of entries to add @return this Builder instance
1890 Filters a NavigableSet based on a predicate. @param unfiltered The set to filter. @param predicate The filtering predicate. @return A new filtered NavigableSet.
1891 Returns a sorted map based on the size of the entries. Uses different methods based on size (0, 1, or >1).
1892 Sets the value for entries within the given range. @param range Range of keys to update. @param value Value to set for entries in the range.
1893 Adds a range to the builder. @param range The range to add. Returns this builder.
1894 Intersects this range with the given range. @param connectedRange The range to intersect with. @return The intersection range or null if undefined.
1895 Calculates the intersection of two ranges. @param otherRange The other range to intersect with. @return The intersection range, or null if no intersection.
1896 Returns the intersection of this range with another range. @param other The other range to intersect with. @return The intersection range or the other range.
1897 Calculates range based on domain. Returns this or a new Range object. @param domain DiscreteDomain object
1898 Creates a HashBiMap with the default initial capacity. Returns the newly created HashBiMap instance.
1899 Creates a HashBiMap from a map, populating it with the provided map. @param map The map to use for initialization. @return A HashBiMap containing the map's entries.
1900 Creates a new Builder instance for functional masking. @return A new Builder object.
1901 Creates an ImmutableClassToInstanceMap from a type and value. @param <B> Base type. @param <T> Subtype of B. @param type Class of the value. @param value Instance of the type. @return ImmutableClassToInstanceMap.
1902 Returns a set of values by chaining method calls.
1903 Reverses a list, handling ImmutableList, ReverseList, and RandomAccess.
1904 Returns an ImmutableList based on the input array's length. @param elements Array of elements; determines return list.
1905 Creates an ImmutableList based on the input elements and length.
1906 Returns a sublist from fromIndex to toIndex. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1907 Creates an ImmutableRangeMap from a Range and a Value. @param range The range for the map. @param value The value associated with the range. @return An ImmutableRangeMap containing the range and value.
1908 Creates an ImmutableRangeSet from a Range. Returns an existing set or creates a new one.
1909 Creates an ImmutableSortedMap with a single entry. @param comparator Comparator for keys @param k1 Key @param v1 Value @return ImmutableSortedMap containing the key-value pair
1910 Creates an ImmutableSet from an array of elements. @param elements array of elements to create the set from @return ImmutableSet containing the elements
1911 Creates a new Builder instance for functional masking. @return A new Builder object.
1912 Merges two iterators and returns a new iterator. @param a first iterator @param b second iterator @return merged iterator
1913 Combines iterators a, b, c, calls m1 on each, then returns combined iterator.
1914 Combines iterators a, b, c, d, calls m1 on each, then returns combined iterator.
1915 Returns an iterator over subscribers for event types. Retrieves subscriber iterators based on event types.
1916 Executes a future, logs, and returns the result. @param closingFuture Future to execute; returns result. @return Result of the future.
1917 Checks if a value exists in the map based on a given object. Returns true if found, false otherwise.
1918 Finds value by key in the map. @param key The key to search for. @return The associated value or null if not found.
1919 Iterates over elements returned by m1().m2().
1920 Returns true if the chained method calls evaluate to false.
1921 Masks data using a derived value. @return Masked integer value.
1922 Compares two maps and returns a MapDifference object. Handles SortedMap for recursive comparison.
1923 Constructs an EventBus with the default name "default".
1924 Moves element 'x' to a better position in the heap. @param index Current index. @param x Element to move. Returns new index or moves to next.
1925 Traverses a data structure until a non-positive grandchild index is found.
1926 Checks a condition based on the object and internal set operations. @param object The object to check against the sorted set. @return True if the condition is met, false otherwise.
1927 Checks if an object is suitable for insertion. @param object The object to check. Returns true if suitable.
1928 Returns a sorted set of elements between fromElement and toElement.
1929 Returns a sorted set derived from the result of m1().m2().
1930 Retrieves a set of values associated with the given key. @param key The key to look up. Can be null. @return A set of values or an empty set if key is null.
1931 Creates a Bloom filter with given funnel, size, and FPP. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability.
1932 Rounds a double to the nearest integer based on the given mode. @param x the double to round @param mode the rounding mode to use @return the rounded integer value
1933 Rounds a double to a long based on the given rounding mode. @param x double to round @param mode rounding mode @return rounded long value
1934 Processes elements from an iterator, calling m2 for each. @param elements Iterator of elements to process.
1935 Creates a TopKSelector with the default ordering. @param k The number of top elements to select.
1936 Creates a TopKSelector with the default Ordering. @param k The number of top elements to select.
1937 Delegates to LongMath.m1(n). @param n The integer to process. @return Result of LongMath.m1(n).
1938 Calculates binomial coefficient (n choose k) as a BigInteger. @param n non-negative integer @param k non-negative integer @return binomial coefficient (n choose k)
1939 Calculates stats from a collection of numbers. @param values Iterable of Number objects @return Stats object containing calculated statistics
1940 Calculates stats from a number iterator. @param values Iterator of numbers to calculate stats on. @return Stats object containing calculated statistics.
1941 Updates statistics based on provided PairedStats. @param values PairedStats object containing data for update.
1942 Calculates stats (min, max, sum, count) from a DoubleStream. @param values Stream of double values to analyze. @return Stats object containing the calculated statistics.
1943 Calculates stats (sum, count, min, max) from an IntStream. @param values IntStream of numerical values to process. @return Stats object containing calculated statistics.
1944 Calculates stats from a LongStream using an accumulator. @param values Stream of long values to calculate stats from. @return Stats object containing calculated statistics.
1945 Processes a DoubleStream using an accumulator. @param values Stream of double values to process.
1946 Processes IntStream using StatsAccumulator, then calls m2.
1947 Processes a LongStream using a StatsAccumulator. Delegates to another m2 method with the accumulated stats.
1948 Recursively processes array segments based on required values.
1949 Creates an ImmutableDoubleArray from an Iterable of Doubles. @param values Iterable of Double values to create array from.
1950 Creates an ImmutableIntArray from an Iterable of Integers. Handles Collection and Iterable inputs.
1951 Creates an ImmutableLongArray from an Iterable of Long values.
1952 Converts the value to a string in the specified radix. @param radix The base to use for the conversion. @return String representation of the value.
1953 Overloaded method to format long x with default base 10. @param x long value to format @return String representation of x
1954 Submits tasks to executor, with timeout in nanoseconds. @param executorService Executor service to use. @param tasks Callable tasks to submit. @param timed Whether to use a timeout. @param timeout Timeout duration. @return Result of the first completed task.
1955 Executes a runnable in an executor and wraps it in a future. @param combiner Runnable to execute. @param executor Executor to run the runnable. @return ListenableFuture representing the execution.
1956 Wraps a ListenableFuture in a ClosingFuture. @param future The future to wrap. @return A ClosingFuture wrapping the given future.
1957 Attempts to retrieve a value from m1(). Returns null if exception.
1958 Attempts to retrieve a value using m1(), returns null on error.
1959 Creates a ListenableFuture from a Callable, using provided executor. @param callable Callable to execute @param executor Executor to run the Callable @return ListenableFuture that wraps the Callable's result
1960 Gets the value from a Future, throwing an exception if timeout occurs. @param future Future to get the value from @param exceptionClass Exception class to throw on timeout @param timeout Timeout duration @param unit Timeout unit @return The value from the Future
1961 Transitions service to TERMINATED state, handling state validity.
1962 Handles failure by updating state, logging, and notifying. @param cause The Throwable that caused the failure.
1963 Records startup timer for a service, creating if necessary. @param service The service to record the timer for.
1964 Transitions a service to a new state, performing checks and actions.
1965 Waits until a condition is met, ensuring proper lock ownership. @param guard Condition guard object; throws IllegalMonitorStateException.
1966 Executes guarded operation, throws exception if monitor is invalid. @param guard Guard object containing monitor and method checks.
1967 Executes a guarded action, throwing exception if monitor is incorrect. @param guard The guard object to use for the action.
1968 Executes logic if guard conditions are met; otherwise, throws exception. @param guard Guard object containing monitor and method flags.
1969 Attempts to satisfy a guard within a timeout, returning true on success. @param guard The guard to satisfy. @param time Timeout duration. @param unit Timeout unit.
1970 Waits until the guard condition is met or timeout expires. @param guard Guard object to check condition. @param time Timeout duration. @param unit Time unit for the timeout. @return True if guard condition is met, false otherwise.
1971 Attempts to acquire a lock with a timeout. @param guard Guard object. @param time Timeout duration. @param unit Time unit for the timeout. @return True if lock acquired, false if timeout.
1972 Waits with timeout, returns true if signaled, else throws exception. @param guard Guard object. @param time Timeout duration. @param unit Time unit for timeout.
1973 Delegates to Futures.m1, providing timeout, unit, and executor.
1974 Wraps a ListenableFuture with a timeout and executor. @param delegate The future to wrap. @param time Timeout duration.
1975 Filters elements from the iterable based on the given predicate. @param predicate The predicate to apply to each element. @return An Optional containing the first matching element, or empty.
1976 Creates a CharMatcher based on a BitSet, optimizing for size. Returns a NegatedFastMatcher if necessary.
1977 Wraps a Throwable, logs it, and re-throws as a RuntimeException.
1978 Writes byte array to output stream using m1 and m2. @param bytes The byte array to be written. @throws IOException if an I/O error occurs.
1979 Copies input stream to output stream, returns the number of bytes copied.
1980 Checks if input stream has reached end, using size if available. @return True if stream is at end, false otherwise.
1981 Gets the size, or reads from stream. Returns size as long.
1982 Copies data from input stream to output stream, using Closer. @param output Output stream to copy data to. @return Number of bytes copied.
1983 Copies data from an input stream to a sink, using Closer for resource management.
1984 Reads data from an input stream, optionally limiting the size. @return Byte array containing the stream data. @throws IOException if an I/O error occurs.
1985 Processes a stream of bytes using the given processor. @param processor ByteProcessor to process the stream. @return Processed object of type T.
1986 Compares two ByteSource objects. @param other The other ByteSource to compare with. @return True if the sources are equal, false otherwise.
1987 Processes a CharSequence: calls m1 and writes to a Writer.
1988 Copies data from a Readable to a Writer, using m1 and m2. @param readable Source of data to be copied. @return Number of characters copied. @throws IOException If an I/O error occurs.
1989 Reads file length or reads the entire file content. Returns file length as long or file content.
1990 Reads chars from input stream and appends them to the given appendable. @param appendable Destination for the read characters. @return Number of characters read.
1991 Copies data from a Reader to a CharSink, using Closer for resource management.
1992 Reads and returns a string from a file. @throws IOException if an I/O error occurs
1993 Processes a reader using the given processor, closing resources. @param processor LineProcessor to process the reader's lines. @return Processed value of type T. @throws IOException if an I/O error occurs.
1994 Checks if the Reader's next character is EOF. Returns true if EOF, otherwise false.
1995 Resizes the table if capacity is near the maximum. Expands the table and rehashes entries to new slots.
1996 Filters keys in a Multimap based on a predicate. @param unfiltered The Multimap to filter. @param keyPredicate Predicate to filter keys. @return A filtered Multimap.
1997 Filters a SetMultimap based on a predicate applied to values. @param unfiltered The input multimap to filter. @param valuePredicate Predicate to filter values.
1998 Filters a Multimap based on a predicate. @param unfiltered The Multimap to filter. @param entryPredicate Predicate to filter entries. @return Filtered Multimap.
1999 Returns an iterator over distinct elements from the backing map. Uses comparator to ensure uniqueness.
2000 Creates an ImmutableBiMap from an iterable of entries. @param entries Iterable of entries to build the map from. @return ImmutableBiMap created from the entries.
2001 Creates an ImmutableMap from an iterable of entries. Handles empty, single, and multiple entries cases.
2002 Converts an iterable to an array of a specified type. @param iterable Source iterable. @param type Array element type.
2003 Creates an ImmutableSortedSet from elements using the given comparator. @param comparator Comparator for sorting the elements @param elements Iterable of elements to include
2004 Searches a list using a key function, comparator, and behaviors. @param list List to search. @param keyFunction Extracts key from list elements. @param key Key to search for. @param keyComparator Comparator for keys.
2005 Retrieves a list of values associated with the given key. @param key The key to look up; can be null. @return A list of values or an empty list if key is null.
2006 Transforms a NavigableMap using a function and returns a new map. @param fromMap Input map; keys are K, values are V1. @param function Function to transform values of type V1 to V2. @return New NavigableMap with transformed values of type V2.
2007 Executes m1 and m2 if successful. @param rowKey Row key. @param columnKey Column key. @param value Value. @return True if m1 returns true, false otherwise.
2008 Wraps a ListMultimap with synchronization. @param multimap The ListMultimap to synchronize. @return A synchronized ListMultimap.
2009 Wraps a SetMultimap with synchronization. @param multimap The SetMultimap to wrap. @return A synchronized SetMultimap.
2010 Delegates to m1(r) and returns the result of its m2() call.
2011 Handles exceptions with a fallback function on a Future. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for the fallback.
2012 Transforms the Future using the given function and executor. @param function Transformation function from V to T. @param executor Executor for the transformation. @return A FluentFuture containing the transformed result.
2013 Creates a GraphBuilder with masking enabled. @return GraphBuilder instance with masking set to true.
2014 Creates a GraphBuilder with masking disabled. Returns a new GraphBuilder instance.
2015 Creates a GraphBuilder with initial configurations from the graph. @param graph The graph to configure the builder with. @return A GraphBuilder initialized with graph configurations.
2016 Creates a NetworkBuilder with masking enabled. Returns a new NetworkBuilder instance.
2017 Creates a NetworkBuilder with masking disabled. Returns a new NetworkBuilder instance.
2018 Creates a NetworkBuilder from a Network, chaining methods. @param network The input Network object. @return A NetworkBuilder configured with data from the network.
2019 Creates a ValueGraphBuilder with masking enabled. Returns a new ValueGraphBuilder instance.
2020 Creates a ValueGraphBuilder with disabled property support. Returns a new ValueGraphBuilder instance.
2021 Creates a ValueGraphBuilder with chained graph modifications. @param graph The ValueGraph to build upon. @return A ValueGraphBuilder instance.
2022 Delegates m1 call to the state object. @param listener Listener object @param executor Executor object
2023 Creates and returns an empty CompactLinkedHashSet.
2024 Creates a CompactHashSet from a collection. @param collection Collection to create the set from. @return A CompactHashSet containing elements from the collection.
2025 Creates a new CompactLinkedHashSet with the specified expected size.
2026 Creates a SortedSetMultimap from a map and a sorted set factory.
2027 Creates a Collector that accumulates elements into an ImmutableMultiset.
2028 Creates a collector that counts elements by applying functions. @param elementFunction Maps element to a type E. @param countFunction Converts element to an int for counting.
2029 Creates a new Builder instance for functional masking. @return A new Builder object.
2030 Converts an array of objects to a list and calls another method. @param parts Array of objects to convert. @return Result of the called method with the converted list.
2031 Delegates to the Joiner's m1 method with this object. @param joiner The Joiner object to delegate to.
2032 Normalizes a pathname, resolving ".." and simplifying paths.
2033 Parses a portion of the encoded string, adding to stack and builder. @param stack CharSequence stack, encoded string, start index, builder @return Number of characters processed.
2034 Returns a ConcurrentMap, either customized or using internal map.
2035 Applies a function to transform elements into an Iterable. @param function Function to transform elements. @return A FluentIterable containing the transformed elements.
2036 Concatenates multiple iterables into a single iterable. @param inputs Iterable of iterables to concatenate @return A new iterable containing all elements from inputs
2037 Delegates to Platform.m1 with timeout and unit. @param timeout Timeout duration. @param unit Time unit for the timeout. @return Result of Platform.m1. @throws InterruptedException, TimeoutException, ExecutionException
2038 Retrieves graph connections for a node. @param node The node to retrieve connections for. @return GraphConnections object.
2039 Delegates to another m2 method with a nanos time unit. @param guard Guard object @param time Duration object
2040 Masks a string based on the provided format. @param format CaseFormat object defining masking rules @param s The string to be masked @return The masked string
2041 Masks a string based on the provided format. @param format CaseFormat object defining masking rules @param s input string to be masked @return Masked string
2042 Masks a string based on the provided format. @param format CaseFormat object defining masking rules. @param s The string to be masked. @return Masked string.
2043 Processes a string based on the provided format. @param format CaseFormat to apply. @param str The string to process. @return Processed string.
2044 Checks if the sequence does not contain the substring defined by m1. @param sequence CharSequence to check. @return True if m1 is not a substring, false otherwise.
2045 Masks characters in a sequence based on a custom algorithm. @param sequence CharSequence to mask. @return Masked string.
2046 Masks characters in a sequence starting from a given position. @param sequence CharSequence to mask. @param replacement Replacement character. @return Masked string.
2047 Extracts the IPv4 address from an Inet6Address. @param ip the Inet6Address to extract from @throws IllegalArgumentException if no IPv4 address is found
2048 Reads bytes from input, updates hasher, and returns the count.
2049 Calls the overloaded m1 method with a full-length buffer. @param in Input stream to read from. @param b Byte array to read into.
2050 Calls overloaded method with default start and end indices.
2051 Calls m1 with default start and end indices for the array. @param array The byte array to process. @param distance The distance to shift elements.
2052 Calls m1 and then m2 with the given byte array and range.
2053 Calls m1 and then recursively processes the array.
2054 Calls overloaded method with default start and end indices.
2055 Calls m1 and then calls m2 with array and length.
2056 Overloads m1 with default start and end indices for the array.
2057 Calls m1 and then m2 with the array and its bounds.
2058 Overloads m1 with default start and end indices. Uses the provided array and distance.
2059 Calls m1 and then recursively processes the array.
2060 Overloads m1 with default start and end indices for the array.
2061 Calls m1 and then calls m2 with the array and length.
2062 Calls m1 with default start and end indices for the array.
2063 Calls m1 and then calls m2 with the array and its bounds.
2064 Calls overloaded method with default start and end indices.
2065 Splits a string using a separator. @param separator String to use for splitting @return MapSplitter object with split results
2066 Creates a RateLimiter with given permits/second and warmup. @param permitsPerSecond permits per second @param warmupPeriod warmup period in time unit @param unit time unit for warmup period @return RateLimiter instance
2067 Creates an unmodifiable sorted multiset from the input. @param sortedMultiset The sorted multiset to wrap. @return An unmodifiable view of the input sorted multiset.
2068 Returns an unmodifiable NavigableSet view of the input set. Returns the original set if already unmodifiable.
2069 Returns an unmodifiable view of the entries collection. If a Set, returns a mutable view; otherwise, immutable.
2070 Returns an unmodifiable view of the given SortedSetMultimap. Returns the delegate if already unmodifiable.
2071 Creates a ClosingFuture wrapping a ListenableFuture, closing resources on completion. @param future The ListenableFuture to wrap. @param closingExecutor Executor for closing resources. @return A ClosingFuture.
2072 Submits the Future to the executor with the given callback.
2073 Creates a new EnumBiMap with specified key and value types. @param keyType Key enum type. @param valueType Value enum type. @return New EnumBiMap instance.
2074 Creates a new EnumHashBiMap with the given key type. @param keyType The class of the enum keys. @return A new EnumHashBiMap instance.
2075 Creates a new TreeMultiset and populates it with given elements. @param elements Iterable containing elements to add to the multiset.
2076 Constructs a new Builder using the provided comparator. @param comparator Comparator to order elements in the builder.
2077 Calls the superclass's m1 method and casts the result. @param key The key to use. @param values Values to be added. @return SortedSet of values.
2078 Adds values to the set associated with the given key. @param key The key for the set. @param values Values to add to the set.
2079 Creates a HashMultiset from elements, ensuring duplicates are counted.
2080 Creates an ArrayListMultimap with specified key and value capacities.
2081 Creates a HashMultimap with specified expected key/value counts.
2082 Creates a HashMultimap from the given Multimap. @param multimap The Multimap to copy. @return A new HashMultimap containing the same entries.
2083 Creates a LinkedListMultimap with the specified expected keys.
2084 Creates a LinkedHashMultiset from an iterable of elements. @param elements Iterable containing elements to add to multiset. @return A LinkedHashMultiset containing the elements.
2085 Creates a new LinkedHashMultimap with default capacities. Returns the newly created multimap instance.
2086 Creates a LinkedHashMultimap with specified expected keys/values.
2087 Constructs a StandardMutableNetwork using the provided builder.
2088 Constructs a StandardMutableValueGraph using the provided builder. @param builder Graph builder for initializing the graph.
2089 Adds a cell to the builder, handling immutable cells differently. @param cell The cell to add. Returns the builder instance.
2090 Adds an entry to the builder and returns a builder instance.
2091 Processes entries from an iterable, updating internal state. @param entries Iterable of entries to process. @return This builder object for chaining.
2092 Adds an entry to the map and returns the builder. @param entry The entry to add. @return The builder instance for chaining.
2093 Returns the multimap view, creating it if necessary. Returns the multimap or a new ImmutableSetMultimap.
2094 Returns the masked sorted map. Delegates to the m1() method for the actual map.
2095 Iterates through a RangeMap and applies values to the builder. @param rangeMap The RangeMap to iterate over. @return this
2096 Applies a series of ranges using the m1 method. @param ranges Iterable of Range objects to apply. @return this Builder object for chaining.
2097 Filters ranges based on input range; returns an ImmutableList.
2098 Returns a contiguous set over a range, adjusted by domain bounds. @param range Range to operate on. @param domain Discrete domain for the range. @return ContiguousSet within the adjusted range.
2099 Adjusts a range based on an entry's conditions. @param range The range to adjust. @param value Value to check against. @param entry Entry containing range and value info.
2100 Creates an ImmutableSortedSet from a DiscreteDomain. @param domain The DiscreteDomain to create the set from. @return An ImmutableSortedSet containing domain elements.
2101 Returns immutable map if input is ImmutableEnumMap, otherwise creates one. @param map The map to convert; must have Enum keys. @return ImmutableMap containing the map's entries.
2102 Returns a function mask. ImmutableMap<R, Map<C, V>>.
2103 Returns an unmodifiable iterator for the elements of this set.
2104 Returns a masked list. Sets copyOnWrite to true. @return ImmutableList containing masked contents.
2105 Creates an ImmutableList from an array of objects. @param elements array to create the list from @return ImmutableList containing the array elements
2106 Returns a sorted set, either a copy or based on comparator. @return ImmutableSortedSet containing elements.
2107 Creates an ImmutableMap from an array of entries, handling duplicates. @param n size of the array @param entryArray array of entries @param throwIfDuplicateKeys whether to throw on duplicate keys @return ImmutableMap containing the entries
2108 Finds the index of a matching public suffix type. Returns NO_SUFFIX_FOUND if no match is found.
2109 Returns an immutable set from the given iterable of enum elements.
2110 Returns an unmodifiable iterator for the element mask.
2111 Processes an event, notifying subscribers or marking as dead. @param event The event to process.
2112 Calculates a move description based on indices and an element. @param removeIndex Index to remove. @param vacated Vacated index. @param toTrickle Element to trickle. @return MoveDesc object or null if no move is possible.
2113 Returns a comparator for row keys. Uses rowKeySet().comparator().
2114 Returns a synchronized NavigableSet based on the input set. @param navigableSet The NavigableSet to synchronize. @return A synchronized NavigableSet.
2115 Creates a BloomFilter with expected insertions and FPP. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @param fpp False positive probability. @return A new BloomFilter.
2116 Creates a Bloom filter with the given funnel and expected insertions. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions. @return A new BloomFilter.
2117 Calculates a value based on bit counts and hash functions.
2118 Creates a collector to find the top K elements based on comparator. @param k The number of top elements to collect. @param comparator Comparator for ordering elements. @return Collector for finding the top K elements.
2119 Selects top K elements from an iterator, handling edge cases. @param iterator Iterator of elements to select from. @param k Number of elements to select. @return List containing the top K elements.
2120 Delegates iteration to a method using the provided iterable.
2121 Converts the value to a String using UnsignedLongs.m1().
2122 Processes a lock, creating a node and updating lock graph. @param lock Lock object to process.
2123 Applies a function to a value and returns a ClosingFuture. @param function The function to apply. @param executor Executor for asynchronous execution. @return ClosingFuture that wraps the result.
2124 Applies a function to a value and returns a ClosingFuture. @param function Function to apply. @param executor Executor for asynchronous execution. @return ClosingFuture containing the result.
2125 Gets the Future's value, throwing an exception if it's not ready. @param future The Future to get the value from. @param exceptionClass Exception class to check.
2126 Retrieves a value from a Future with a timeout, handling exceptions. @param future Future to retrieve from. @param exceptionClass Exception class to throw. @param timeout Timeout duration. @return Value from Future or throws exception.
2127 Schedules a task and returns a Cancellable. Handles failures gracefully.
2128 Transitions service state, notifies of startup completion. Updates snapshot state to RUNNING/STOPPING and calls callbacks.
2129 Starts all services, handling exceptions and logging warnings. Returns the ServiceManager instance for chaining.
2130 Calls m2 with provided guard and time duration in nanoseconds. @param guard Guard object @param time Duration object @throws InterruptedException if interrupted while waiting
2131 Delegates to another m2 method with nanosecond time unit. @param guard Guard object @param time Duration object
2132 Calls m2 with the given guard and time duration in nanoseconds. @param guard Guard object @param time Duration object @throws InterruptedException if interrupted while waiting
2133 Delegates to another m2 call with nanosecond time units. @param guard Guard object @param time Duration to use
2134 Executes with timeout. @param timeout The timeout duration. @param scheduledExecutor Executor for timeout scheduling. @return A FluentFuture representing the result.
2135 Copies byte array 'from' to a file 'to' using helper method m1.
2136 Computes a hash code using the provided hash function. @param hashFunction Hash function to use for computation. @return HashCode object representing the computed hash.
2137 Copies a file from the given source to the output stream. @param from Source file to copy @param to Output stream to write to
2138 Copies data from a URL to an OutputStream. @param from Source URL. @param to Destination OutputStream.
2139 Copies a file from the source to the destination file. @param from The source file to copy. @param to The destination file.
2140 Reads file data and applies a transformation. @param file Input file to process; throws IOException on error. @return Byte array containing the transformed data.
2141 Retrieves data from a URL. @param url The URL to fetch data from. @return Byte array containing the fetched data.
2142 Reads file content using ByteProcessor. @param file The file to read. @param processor Processes the byte source. @return Processed object of type T.
2143 Compares two files. Returns true if files are same or have same size.
2144 Compares two paths by checking file existence and size. @param path1 The first path to compare. @param path2 The second path to compare. @return True if paths are equal, false otherwise.
2145 Writes a CharSequence to a file using a CharSink. @param from CharSequence to write @param to File to write to @param charset Charset for encoding
2146 Writes a CharSequence to a file using a specified charset. @param from CharSequence to write @param to File to write to @param charset Charset for encoding
2147 Copies a file's content to an Appendable using charset. @param from Source file. @param charset Character encoding. @param to Destination Appendable.
2148 Reads the first line from a file using a given charset. @param file The file to read. @param charset The charset to use. @return The first line as a String, or null if empty.
2149 Reads lines from a file, processes them, and returns a list. @param file Input file to read from. @param charset Character encoding of the file. @return List of processed strings.
2150 Processes file lines using the given callback. @param file File to process. @param charset Charset for file encoding. @param callback Callback for each line. @return Result of the callback.
2151 Processes lines from a URL using a callback. @param url URL to read from. @param charset Charset for decoding. @param callback Callback to process each line. @return Result of the callback.
2152 Maps a file into memory. @param file The file to map. @param mode The mapping mode. @return A mapped byte buffer.
2153 Creates a mapped byte buffer from a file. @param file The file to map. @param mode The mapping mode. @param size The size of the mapping. @return MappedByteBuffer object. @throws IOException if an I/O error occurs.
2154 Delegates method execution to an Application instance. @param service ExecutorService for task execution. @param terminationTimeout Timeout for termination. @param timeUnit TimeUnit for the timeout value.
2155 Filters values in a Multimap based on a predicate. @param unfiltered The input Multimap to filter. @param valuePredicate Predicate to filter values.
2156 Creates a compound ordering from an iterable of comparators. @param comparators Iterable comparators to combine. @return A CompoundOrdering instance.
2157 Creates an ImmutableBiMap from a map, or recursively from its values.
2158 Creates an array of specified type from the iterable. @param type The type of the array to create. @return An array of type 'type' containing elements from iterable.
2159 Converts an iterator to an array of a specified type. @param iterator Iterator to convert. @param type The type of the array elements. @return An array of type T containing elements from iterator.
2160 Creates a sorted set from an iterable, using the given comparator. @param comparator Comparator to sort the elements. @return ImmutableSortedSet containing elements from the iterable.
2161 Creates an ImmutableSortedSet from the given elements, using natural ordering. @param elements Iterable containing elements for the sorted set.
2162 Creates an ImmutableSortedSet from a collection, using the given comparator.
2163 Returns a sorted map of function masks.
2164 Returns the string representation, caching the result.
2165 Wraps a SortedSetMultimap with synchronization. @param multimap The SortedSetMultimap to wrap. @return A synchronized SortedSetMultimap.
2166 Reads and returns the entire content of a Reader. Uses Closer for resource management.
2167 Creates a new CompactLinkedHashMap with the specified expected size.
2168 Creates a CompactLinkedHashSet from a collection. @param collection Collection to create the set from. @return CompactLinkedHashSet containing collection elements.
2169 Creates a TreeMultimap with natural ordering for both keys/values. @return A new TreeMultimap instance.
2170 Creates a TreeMultimap with specified key and value comparators.
2171 Negates the result of m1(sequence). @param sequence CharSequence to be processed. @return True if m1(sequence) returns false, otherwise false.
2172 Applies two transformations to the input sequence. @param sequence The sequence to be transformed. @return The transformed sequence.
2173 Replaces all occurrences of a character sequence with another. @param sequence Sequence to replace. @param replacement Replacement sequence. @return String with replacements made.
2174 Converts an InetAddress to an Inet4Address, handling special cases.
2175 Creates a RateLimiter with given permits/second and warmup. @param permitsPerSecond rate limit in permits per second @param warmupPeriod warmup duration @return RateLimiter instance
2176 Returns an unmodifiable set of map entries.
2177 Creates a listenable scheduled future for a command after a delay. @param command Runnable to execute. @param delay Delay before execution.
2178 Creates a LoadingCache using the provided CacheLoader. @param loader Loads values for the cache. @return A new LoadingCache instance.
2179 Creates and returns a LocalManualCache instance. Initializes cache with m1() and m2() calls.
2180 Creates a new Builder instance with the given comparator. @param comparator Comparator for sorting elements. @return A new Builder object.
2181 Creates a Builder with a predefined Ordering. Returns a new Builder instance.
2182 Creates a new Builder for functional mask with natural ordering.
2183 Creates an EnumBiMap from a map. @param map The map to initialize the EnumBiMap from. @return The newly created EnumBiMap.
2184 Creates a BiMap from a Map, populating and returning it. @param map The input Map to create the BiMap from.
2185 Returns a sorted set of values associated with the key. @param key The key to look up. @param values Iterable of values to add to the set.
2186 Compares two lists for equality based on element counts. @param first The first list to compare. @param second The second list to compare. @return True if lists have the same element counts.
2187 Creates and returns an empty ArrayListMultimap.
2188 Creates an ArrayListMultimap from the given Multimap. @param multimap The Multimap to copy. @return A new ArrayListMultimap.
2189 Creates and returns an empty HashMultimap.
2190 Creates a new, empty LinkedListMultimap. @return A new LinkedListMultimap instance.
2191 Creates a new LinkedListMultimap from the given multimap. @param multimap The multimap to copy. @return A new LinkedListMultimap containing the data.
2192 Copies a multimap to a LinkedHashMultimap. @param multimap The source multimap to copy from. @return A new LinkedHashMultimap containing the copied values.
2193 Creates a mutable network based on the current network. @return MutableNetwork object, a copy of the current network.
2194 Initializes the graph using the provided graph builder. @param builder Graph builder to construct the graph.
2195 Returns a mutable value graph based on this graph. Uses StandardMutableValueGraph implementation.
2196 Applies a function to each cell in the provided table. @param table Table containing cells to process. @return This builder, for chaining.
2197 Adds entries from iterable to the map. @param entries Iterable of entries to add. @return This builder instance for chaining.
2198 Sets values from a map using its m1() method. @param map The map to copy values from. @return This builder with values from the map.
2199 Adds entries from iterable and returns the builder. @param entries iterable of entries to add @return this builder instance
2200 Filters an AbstractFilteredMap based on a predicate. @param map The map to filter. @param entryPredicate Predicate for filtering map entries. @return Filtered map containing matching entries.
2201 Sets ranges using the provided RangeSet's first element. @param ranges RangeSet to extract the first element from. @return This Builder object for chaining.
2202 Returns a range set based on the input range and internal checks. @param range The range to evaluate. @return An ImmutableRangeSet or the result of m6().
2203 Creates a contiguous set of integers within the given range. @param lower The lower bound (inclusive). @param upper The upper bound (inclusive).
2204 Creates a contiguous set of longs within the given range. @param lower The lower bound (inclusive). @param upper The upper bound (inclusive).
2205 Creates a contiguous set of integers within the given range. @param lower The lower bound (inclusive) of the range. @param upper The upper bound (inclusive) of the range.
2206 Creates a contiguous set of longs within the given range. @param lower The lower bound (inclusive). @param upper The upper bound (inclusive). @return A ContiguousSet containing longs in the range.
2207 Adjusts a range based on lower and upper bound entries. @param range The range to adjust. @param value The value to use for adjustment. @return The adjusted range.
2208 Creates and configures network connections for a node. @param node The node to create connections for. @return NetworkConnections object.
2209 Creates an ImmutableMap from the given map, optimizing for specific types.
2210 Retrieves a map based on the rowKey, merging with an empty map. @param rowKey Key used to retrieve the map. @return ImmutableMap containing values associated with the key.
2211 Transforms an element using a function, returning null if empty. @param e The element to transform. @return The transformed element or null.
2212 Applies a mask to an element, returning null if masked out. @param e The element to mask. @return Masked element or null.
2213 Creates an ImmutableList from an Iterator. @param elements Iterator providing elements for the list. @return ImmutableList containing elements from the iterator.
2214 Creates an ImmutableRangeMap from entries, ensuring no overlaps. @return An ImmutableRangeMap containing the provided entries.
2215 Merges overlapping ranges into a non-overlapping range set.
2216 Collects URLs from classpath entries, handling SecurityException. Returns an ImmutableList of URL objects.
2217 Creates a list of Parameter objects from method types and annotations.
2218 Creates an immutable list of exception type tokens. Iterates through types and converts them to exception tokens.
2219 Transforms a collection of Callable tasks into an ImmutableList. @param tasks Collection of Callable tasks to transform. @return ImmutableList of transformed Callable tasks.
2220 Converts an iterable of comparable elements to an ImmutableList.
2221 Creates an ImmutableList from elements, sorted by the given comparator. @param comparator Comparator for sorting elements. @param elements Iterable of elements to sort.
2222 Creates an ImmutableSortedSet from an iterator using a comparator.
2223 Creates an ImmutableMap from an array of entries, handling duplicates. @param n initial capacity, must be > 0. @param entryArray array of entries. @param throwIfDuplicateKeys if true, throws exception on duplicate keys. @return ImmutableMap containing the entries.
2224 Gets the index of the public suffix. Uses cache if available. @return Index of the public suffix.
2225 Retrieves the registry suffix index. Caches the value for reuse.
2226 Creates an ImmutableSortedMap from an iterable of entries. @param comparator Comparator for keys. @param entries Iterable of entries to create the map from.
2227 Creates a new table with the same structure as the input table. @param table The input table to copy the structure from. @return A new TreeBasedTable with the copied structure.
2228 Creates a Bloom filter with the given funnel and expected insertions. @param funnel Funnel for hashing elements. @param expectedInsertions Expected number of insertions.
2229 Creates a collector with a comparator and a mask. @param k mask value, @param comparator comparator for elements @return Collector object
2230 Processes an iterable, potentially returning a limited list. @param iterable Input iterable of elements. @param k Limit for the resulting list size. @return A list based on the iterable, potentially limited.
2231 Returns the first k elements from the iterator as a list. @param iterator Iterator of elements @param k Number of elements to retrieve
2232 Creates a ClosingFuture with a fallback function for exceptions. @param exceptionType Exception type to catch. @param fallback Fallback function. @param executor Executor for the fallback. @return ClosingFuture object.
2233 Delegates the m1 operation to the state object.
2234 Delegates m1 call to the state object, potentially throwing TimeoutException.
2235 Returns a CharMatcher that masks characters. Uses Platform.m1 to create the CharMatcher.
2236 Calculates hash code of a file using a hash function. @param file The file to hash. @param hashFunction The hash function to use.
2237 Copies a file, ensuring source and destination are distinct. Handles deletion errors if files are inaccessible.
2238 Reads lines from a URL, processes them, and returns a list. @param url The URL to read from. @param charset The character encoding to use. @return List of strings extracted from the URL.
2239 Opens a file and returns a read-only mapped byte buffer. @param file The file to open. @return MappedByteBuffer for the file.
2240 Delegates executor shutdown to Application.m1. @param executor ThreadPoolExecutor to shutdown @param terminationTimeout Timeout for termination @param timeUnit Time unit of the timeout
2241 Delegates to Application.m1 to create a ScheduledExecutorService. @param executor Executor to use. @param terminationTimeout Termination timeout. @param timeUnit Time unit for timeout. @return ScheduledExecutorService.
2242 Schedules service termination after a given duration. @param service ExecutorService to terminate. @param terminationTimeout Duration before termination.
2243 Removes an entry from the reference queue if found. @param entry Entry to remove. @param hash Hash code of the entry. @return True if entry was removed, false otherwise.
2244 Removes a key-value entry if the valueReference matches. @param key Key of the entry to remove.
2245 Delegates the m1() call to the state object.
2246 Delegates m1 call to the state object with provided timeout. @param timeout Timeout duration. @param unit Time unit of the timeout.
2247 Delegates to state.m1() and returns the ImmutableMap.
2248 Retrieves annotations of a specific type from the annotations array. @param annotationType The type of annotation to retrieve. @return Array of annotations of the specified type.
2249 Creates an ImmutableSortedSet from a collection, using natural order. @param elements Collection to create the sorted set from. @return ImmutableSortedSet containing the elements.
2250 Returns a synchronized view of the given navigable map. @param navigableMap The navigable map to synchronize. @return A synchronized navigable map.
2251 Reads file content as String using provided charset. @param file File to read. @param charset Charset for decoding. @return String representation of the file content.
2252 Retrieves and processes data from a URL with a specified charset. @param url The URL to fetch. @param charset The character encoding to use. @return Processed data as a String.
2253 Creates and returns a new, empty CompactLinkedHashMap.
2254 Creates a TreeMultimap from a Multimap, using Ordering.m1(). @param multimap The Multimap to convert. @return A new TreeMultimap.
2255 Returns a ReentrantLock, CycleDetectingReentrantLock if policy enabled. @param lockName Lock name. @param fair Whether the lock is fair.
2256 Creates a read/write lock, standard or cycle-detecting. @param lockName Lock name for cycle detection. @param fair Whether the lock is fair. @return ReentrantReadWriteLock instance.
2257 Creates a LockGraphNode map for an enum class, configuring dependencies. @param clazz The enum class to create nodes for. @return A map of enum constants to LockGraphNodes.
2258 Validates a domain part based on length, characters, and position.
2259 Calculates a masked value from an InetAddress. @param ip The InetAddress to process. @return An integer representing the masked value.
2260 Checks if an object is present in the iterator. @param object The object to check for. @return True if present, false otherwise.
2261 Checks if any element in the iterator matches the object. @param object The object to compare with elements. @return True if a match is found, false otherwise.
2262 Checks if the collection contains any elements from the iterator. @param collection Collection to check against the iterator. @return True if intersection exists, false otherwise.
2263 Checks if the collection contains any elements from the iterator. @param collection Collection to check for elements. @return True if any elements are found, false otherwise.
2264 Processes elements from the result of m1() using Iterators.m2.
2265 Returns true if m1().m2() is false; otherwise, returns false.
2266 Creates and populates an Object array using m2(). @return Object array or null if m1() or m2() fails.
2267 Creates a ListenableScheduledFuture with the given command and delay. @param command Runnable to execute @param delay Duration after which to execute @return ListenableScheduledFuture
2268 Extracts subscribers from a listener, mapping event types to subscribers. @param listener Object containing methods to analyze @return Multimap of event types to subscribers
2269 Creates a subgraph containing specified nodes and their edges. @param network The original network. @param nodes Nodes to include in the subgraph. @return A new MutableNetwork subgraph.
2270 Creates a mutable copy of the given network. @param network The network to copy. @return A new MutableNetwork object.
2271 Creates a mutable graph copy of the current graph. @return A new MutableGraph object.
2272 Creates a subgraph containing specified nodes and their edges. @param graph The original graph. @param nodes Nodes to include in the subgraph. @return A new subgraph containing the specified nodes.
2273 Creates a mutable copy of the input ValueGraph. Returns a MutableValueGraph with the same nodes and edges.
2274 Merges a map into the builder and returns the builder instance.
2275 Merges the given map into the builder. @param map The map to merge. @return This builder instance for chaining.
2276 Creates a filtered navigable map based on entry predicate. @param map The original navigable map. @param entryPredicate Filter condition for entries. @return A new filtered navigable map.
2277 Filters a SortedMap based on a combined predicate. @param map Input SortedMap. @param entryPredicate Filtering predicate. @return Filtered SortedMap.
2278 Filters a map based on a key predicate. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to keys. @return Filtered map.
2279 Filters a map based on a predicate. @param unfiltered The map to filter. @param entryPredicate Predicate to filter map entries. @return Filtered map based on the predicate.
2280 Creates a collector to accumulate elements into a sorted map. @param comparator Comparator for keys in the sorted map. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2281 Creates a Collector<T, ?, ImmutableMap<K, V>> using provided functions. @param keyFunction Maps T to K (Enum). @param valueFunction Maps T to V.
2282 Creates a collector that groups elements by key and maps to values. @param keyFunction Maps input to key (Enum). @param valueFunction Maps input to value. @param mergeFunction Merges values for duplicate keys.
2283 Creates a type mapping from a context type. @param contextType The context type for type mapping. @return An ImmutableMap containing the type mappings.
2284 Wraps an iterator of ByteSources into a ByteSource. @param sources Iterator of ByteSource objects. @return A ByteSource representing the combined sources.
2285 Wraps an iterator of CharSources into a CharSource. @param sources Iterator of CharSource objects.
2286 Creates an ImmutableRangeSet from an iterable of ranges. @param ranges iterable collection of ranges to include @return An ImmutableRangeSet containing the ranges.
2287 Creates an ImmutableSortedMultiset from elements, using the given comparator. @param comparator Comparator for sorting elements @param elements Iterable of elements to include @return ImmutableSortedMultiset containing the elements
2288 Creates an ImmutableSortedMultiset from a SortedMultiset. @param sortedMultiset The SortedMultiset to adapt. @return An ImmutableSortedMultiset.
2289 Returns an ImmutableList based on the result of m5(). Returns different lists based on the value returned by m5().
2290 Creates a collector with a custom comparator. @param comparator Comparator for sorting elements. @return Collector instance.
2291 Creates an ImmutableSortedSet from the given iterator. @param elements Iterator of elements to include in the set.
2292 Creates an ImmutableBiMap based on the size of the map. Returns a new map based on size and value comparator.
2293 Returns a sorted map containing keys up to {@code toKey}. @param toKey The upper bound key (inclusive). @param inclusive Whether to include {@code toKey}.
2294 Returns a sorted map containing keys >= fromKey (inclusive). @param fromKey Key to start the range from. @param inclusive Whether to include fromKey.
2295 Checks if m1() returns 0. @return True if m1() is 0, false otherwise.
2296 Checks if m1() returned a value other than NO_SUFFIX_FOUND.
2297 Checks if m1() is greater than 0. @return True if m1() > 0, false otherwise.
2298 Checks if m1() returns 1. @return True if m1() equals 1, false otherwise.
2299 Checks if m1() returns 0. @return True if m1() is 0, false otherwise.
2300 Checks if m1() returned a value other than NO_SUFFIX_FOUND.
2301 Checks if m1() is greater than 0. @return True if m1() > 0, false otherwise.
2302 Checks if m1() returns 1. @return True if m1() equals 1, false otherwise.
2303 Creates an ImmutableSortedMap from entries using the given comparator.
2304 Creates an ImmutableSortedMap from a SortedMap, or uses default comparator. @param map The SortedMap to convert; may be ImmutableSortedMap. @return An ImmutableSortedMap.
2305 Creates an ImmutableSet containing transformed elements of this set. Uses m1() for size, transforms elements with m4().
2306 Collects and returns a set of superclasses of type T.
2307 Removes the last element and returns move information. @param index the index of the element to remove @return MoveDesc object containing replacement details
2308 Calculates the floor of the square root of x with specified rounding. @param x BigInteger value to calculate the floor of its square root. @param mode RoundingMode to use for the calculation.
2309 Creates an ImmutableSet from an iterator. @param elements Iterator of elements to include in the set. @return ImmutableSet containing elements from the iterator.
2310 Recursively processes files in a directory, adding resources. @param directory Directory to process @param packagePrefix Package prefix for resource names
2311 Extracts files from the Class-Path manifest attribute. @param jarFile The JAR file. @param manifest The manifest. @return ImmutableSet of File objects.
2312 Retrieves the raw type. @return The raw type of the class.
2313 Applies m1() and m2() to the iterable, returning a List. @param iterable Source iterable of type E. @param k Integer value used in m2().
2314 Calls m1 and passes the result to m2, using nanosecond time unit.
2315 Delegates executor creation to Application.m1(). @param executor The ThreadPoolExecutor to use. @return An ExecutorService.
2316 Creates an ExecutorService with a given termination timeout. @param executor ThreadPoolExecutor to wrap @param terminationTimeout Duration for termination @return ExecutorService
2317 Delegates ScheduledExecutorService creation to Application.m1(). @param executor Existing executor, may be used by Application. @return A ScheduledExecutorService.
2318 Wraps executor with a ScheduledExecutorService. @param executor Executor to wrap. @param terminationTimeout Termination timeout duration.
2319 Processes a new entry, potentially removing older entries. @param newest The newest ReferenceEntry to process.
2320 Calls m1 and passes the result to m2, using nanosecond time unit. @param timeout Duration timeout value. @throws TimeoutException if timeout occurs.
2321 Returns a map of services to their durations in milliseconds.
2322 Retrieves annotations of the specified type. @param annotationType The class of the annotation to retrieve. @return An array of annotations of the specified type.
2323 Acquires a ReentrantLock with the given name. @param lockName The name of the lock to acquire. @return The ReentrantLock instance.
2324 Returns a ReentrantReadWriteLock with the given name. @param lockName Name of the lock. @return ReentrantReadWriteLock instance.
2325 Checks if all parts satisfy a condition. @param parts List of strings to check. Returns true if all pass.
2326 Registers listeners for events. @param listener The listener object containing event methods.
2327 Validates listener registration; throws exception if incomplete. @param listener The listener object to validate.
2328 Creates a new ImmutableNetwork.Builder using an internal builder. @return ImmutableNetwork.Builder instance.
2329 Creates a subgraph containing specified nodes and their edges. @param graph The original graph. @param nodes Nodes to include in the subgraph. @return A new MutableGraph containing the specified nodes.
2330 Creates a mutable copy of the given graph. @param graph The graph to copy. @return A new MutableGraph containing the same nodes and edges.
2331 Creates an ImmutableValueGraph.Builder with the underlying builder. @return ImmutableValueGraph.Builder instance
2332 Creates a filtered BiMap based on the given predicate. @param map The base BiMap to filter. @param entryPredicate Predicate for filtering entries. @return A new filtered BiMap.
2333 Filters a navigable map based on a predicate. @param unfiltered The map to filter. @param entryPredicate Predicate for filtering entries. @return Filtered NavigableMap.
2334 Filters a SortedMap based on a predicate. @param unfiltered The map to filter. @param entryPredicate Predicate to filter entries. @return Filtered SortedMap.
2335 Filters a map based on a predicate applied to its values. @param unfiltered The input map to filter. @param valuePredicate Predicate to filter values. @return A new filtered map.
2336 Creates a collector to group elements into an ImmutableMap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element. @param mergeFunction Merges values for duplicate keys.
2337 Creates a Collector<T, ?, ImmutableRangeMap<K, V>>. @param keyFunction Extracts the range key from T. @param valueFunction Extracts the value from T.
2338 Creates a sorted multiset from the given elements using natural order. @param elements Iterable containing elements for the multiset.
2339 Returns an immutable sorted multiset view of the contents.
2340 Creates a wildcard type with an upper bound. @param upperBound The upper bound of the wildcard type. @return A WildcardType object.
2341 Creates a wildcard type with the given lower bound. @param lowerBound The lower bound of the wildcard type. @return A WildcardType instance.
2342 Creates an OrderedPermutationCollection from elements and comparator.
2343 Returns a sorted list using the provided comparator. @param comparator Comparator to define the sorting order.
2344 Converts a collection to an ImmutableList, optimizing if possible. @param elements Collection to convert; may be ImmutableCollection. @return ImmutableList containing elements from the collection.
2345 Returns the masked ImmutableBiMap. Delegates to m1().
2346 Returns an immutable map, delegating to m1(true).
2347 Returns an immutable map. Calls m1(false) to populate it.
2348 Returns the ImmutableSortedMap containing the key, or null. @param toKey the key to search for @return ImmutableSortedMap containing the key, or null.
2349 Returns a sorted map of entries between specified keys. @param fromKey start key (inclusive) @param toKey end key (inclusive)
2350 Returns a sorted map containing keys >= fromKey. @param fromKey The key to start the sorted map from. @return ImmutableSortedMap containing keys >= fromKey.
2351 Creates an ImmutableSortedMap from the given entries, using natural ordering. @param entries Iterable of entries to build the map from. @return An ImmutableSortedMap.
2352 Converts a map to an ImmutableSortedMap, using natural ordering. @param map The map to convert. @return An ImmutableSortedMap.
2353 Creates an ImmutableSortedMap from a map, using the given comparator.
2354 Calculates the Cartesian product of a list of sets. @param sets List of sets to compute the Cartesian product. @return Set of lists representing the Cartesian product.
2355 Checks if target exists in the queue and calls m1 if found.
2356 Retrieves a value at the given index, then performs an action. @param index the index of the value to retrieve @return The value retrieved at the specified index.
2357 Creates an ImmutableSet from an iterable of elements. Handles both Collection and Iterable types.
2358 Creates an Invokable from a constructor, ensuring declaration consistency. @param constructor Constructor to wrap; must declare fields correctly. @return An Invokable instance.
2359 Checks type compatibility, handling various type scenarios. Returns true if compatible, false otherwise.
2360 Creates an Invokable object for the given method. @param method The method to create the Invokable for. @return An Invokable object representing the method.
2361 Executes m3 and ensures m2 is called, if m1 returns true. @param now Current timestamp used by m3.
2362 Creates a WithExplicitOrdering object using the provided enum and policy. @param enumClass Enum class for ordering. @param policy Policy to apply. @return WithExplicitOrdering instance.
2363 Delegates the call to the 'm1' method of the 'subscribers' object.
2364 Delegates the object to subscribers' m1 method. @param object The object to be passed to subscribers.
2365 Creates an ImmutableGraph.Builder using the internal GraphBuilder. @return ImmutableGraph.Builder instance
2366 Filters a BiMap based on a predicate. @param unfiltered The BiMap to filter. @param entryPredicate Predicate for filtering entries. @return Filtered BiMap.
2367 Filters a navigable map based on a key predicate. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to keys. @return Filtered navigable map.
2368 Filters a NavigableMap based on a predicate applied to values. @param unfiltered The map to filter. @param valuePredicate Predicate to filter values. @return Filtered NavigableMap.
2369 Filters a sorted map based on a key predicate. @param unfiltered The map to filter. @param keyPredicate Predicate to apply to keys. @return A new filtered SortedMap.
2370 Filters a sorted map based on a predicate applied to its values. @param unfiltered The input sorted map. @param valuePredicate Predicate to filter values. @return A new filtered SortedMap.
2371 Creates an ImmutableSortedMultiset from an iterator using a comparator. @param comparator Comparator for sorting the elements. @param elements Iterator providing the elements.
2372 Collects LocationInfo for each file loaded by the classloader. @param classloader The classloader to inspect. @return ImmutableSet of LocationInfo objects.
2373 Finds a suitable type from bounds, returning it or null. Iterates through bounds, checks m2() on Class types.
2374 Processes a component type, handling WildcardTypes specifically. @param componentType The type to process. @return Processed type.
2375 Groups elements into lists based on natural ordering. @param elements Iterable of elements to group. @return Collection of lists, each containing elements.
2376 Creates an ImmutableMultiset from the given iterable. Returns existing ImmutableMultiset if valid, otherwise creates new one.
2377 Creates an ImmutableMultiset from the given iterator of elements.
2378 Converts a Multiset to an ImmutableMultiset, sorted by count. @param multiset The Multiset to convert. @return An ImmutableMultiset containing the elements.
2379 Creates a collection of all permutations of the input elements. @param elements The collection of elements to permute. @return A collection of lists, each representing a permutation.
2380 Converts an iterable to an ImmutableList. Recursively handles collections.
2381 Converts a RangeSet to an ImmutableRangeSet. Handles empty, single-element, and immutable cases.
2382 Creates an ImmutableSortedSet from a SortedSet. Uses a custom comparator if available, otherwise uses default.
2383 Reads lines from a file and returns them as an ImmutableList. @throws IOException if an I/O error occurs
2384 Creates a map of class to instance, using builder and fallback.
2385 Creates an ImmutableListMultimap from map entries, sorts values if comparator is provided.
2386 Returns the masked map. Delegates to m1() for the actual map.
2387 Creates an ImmutableSetMultimap from map entries, sorts values. @param mapEntries Collection of map entries. @param valueComparator Comparator for values, may be null.
2388 Converts Properties to an ImmutableMap of String key-value pairs. @param properties Properties object to convert @return ImmutableMap containing the properties
2389 Creates an immutable map with elements from the list, mapping each element to its index. @param list Collection of elements to map @return ImmutableMap with element-index mappings
2390 Creates an ImmutableTypeToInstanceMap from the map builder. @return An ImmutableTypeToInstanceMap object.
2391 Creates a TypeTable from mappings, ensuring no type variable is bound to itself. @param mappings Map of TypeVariableKey to Type. @return A new TypeTable.
2392 Creates an immutable map from keys and values generated by a function. @param keys Iterator of keys. @param valueFunction Function to generate values from keys.
2393 Returns a sorted map from `fromKey` to `toKey` (exclusive).
2394 Creates a collector returning an ImmutableSortedMap. @param comparator Comparator for keys. @param keyFunction Extracts key from input. @param valueFunction Extracts value from input. @param mergeFunction Merges values with same key.
2395 Returns null or result of m3(m2()) if m1() is false.
2396 Returns an element. Throws NoSuchElementException if m1() is true.
2397 Returns an immutable set of elements from the internal iterable.
2398 Checks if the type matches the mask. @param type TypeToken to check against the mask. @return True if the type matches, false otherwise.
2399 Delegates to m2, then calls m3 with the result of m1.
2400 Delegates to another method with the type's raw type. @param type The TypeToken to delegate with.
2401 Executes m2 if map.m1() is true, otherwise executes m4.
2402 Filters a BiMap based on a key predicate. @param unfiltered The BiMap to filter. @param keyPredicate Predicate to filter keys. @return Filtered BiMap.
2403 Filters a BiMap based on a predicate applied to its values. @param unfiltered The BiMap to filter. @param valuePredicate Predicate to filter values. @return A new filtered BiMap.
2404 Creates a sorted multiset from an iterator using natural order. @param elements Iterator of elements to add to the multiset.
2405 Resolves a TypeToken for a class, handling generics and owners.
2406 Creates an immutable multiset from the result of m1(). @return ImmutableMultiset containing elements from m1().
2407 Returns a multiset containing the contents of this set. Uses m1 to create the multiset from the contents.
2408 Computes the Cartesian product of lists. @param lists List of lists to compute the product of. @return List of lists representing the Cartesian product.
2409 Parses cache builder spec string and populates CacheBuilderSpec. @param cacheBuilderSpecification The specification string to parse. @return Populated CacheBuilderSpec object.
2410 Returns an immutable list from the result of m1(). m1() provides the elements, list is immutable.
2411 Lists paths within a directory. @param dir The directory to list. @return ImmutableList of paths within the directory.
2412 Parses and validates a domain name, normalizing and splitting it.
2413 Creates a ListenableFuture from an iterable of ListenableFutures. @param futures Iterable of ListenableFutures to combine. @return A ListenableFuture containing a list of results.
2414 Creates a FutureCombiner for a list of futures. @param futures Iterable of ListenableFuture<V> to combine. @return A new FutureCombiner instance.
2415 Creates a FutureCombiner for combining futures into a single result. @param futures Iterable of ListenableFuture objects. @return FutureCombiner instance.
2416 Creates a ListFuture from an iterable of ListenableFutures. @param futures Iterable of ListenableFutures to combine. @return A ListenableFuture representing the combined list.
2417 Converts an iterable of futures to an array of ListenableFuture. @param futures Iterable of ListenableFuture objects. @return Array of ListenableFuture objects.
2418 Creates an ImmutableRangeSet from an iterable of ranges. @param ranges iterable of Range objects to build the set @return ImmutableRangeSet containing the ranges
2419 Adds all elements from another RangeSet to this RangeSet. @param other The RangeSet to add. @return A new RangeSet containing the combined ranges.
2420 Combines this RangeSet with another RangeSet. @param other The RangeSet to combine with. @return A new RangeSet containing the union.
2421 Creates a Collector to build an ImmutableBiMap from elements. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2422 Returns the map if it's an ImmutableClassToInstanceMap, otherwise creates a new one.
2423 Returns a masked ImmutableListMultimap or creates a new one. @param multimap Input multimap to mask or convert. @return Masked ImmutableListMultimap.
2424 Creates an ImmutableMultimap from the internal builder map. Sorts keys if a comparator is provided.
2425 Updates range map entries based on provided range, value, and function.
2426 Creates an ImmutableSetMultimap from the builder map. Returns an empty multimap if builderMap is null.
2427 Creates an ImmutableMap from values and a key function. @param values Iterator of values. @param keyFunction Function to extract key from each value.
2428 Generates combinations of size 'size' from the input set. @param set input set of elements @param size size of combinations to generate @return Set of combination sets
2429 Returns the graph as an ImmutableGraph, or creates one if needed.
2430 Creates a TypeResolver using provided type mappings. @param mappings Type variable mappings to use. @return A new TypeResolver instance.
2431 Creates an ImmutableMap from keys and a function to generate values. @param keys keys for the map @param valueFunction function to map keys to values @return ImmutableMap with generated values
2432 Returns the result of m1(). @return Result of m1(), may be null.
2433 Inserts an element and updates size/modCount. @param element The element to insert. @return True if within maximum size, else false.
2434 Retrieves a set of ClassInfo objects from resources.
2435 Filters resources to get top-level ClassInfo objects.
2436 Returns an iterable of nodes, validated from the start nodes.
2437 Filters and returns a masked iterable from the given start nodes.
2438 Filters and returns a masked iterable from the given start nodes.
2439 Creates an immutable set of ResourceInfo from scanned files. @param scannedFiles Set of File objects to process. @return ImmutableSet of ResourceInfo objects.
2440 Returns a specialized Invokable with the given return type. @param returnType The expected return type of the Invokable. @return A specialized Invokable.
2441 Executes m3 within a try-finally block, ensuring m2 always runs.
2442 Processes a type, delegating to specialized methods based on type.
2443 Checks type compatibility based on formal and runtime types.
2444 Processes a type, handling WildcardType with m2, else m1.
2445 Creates a CacheBuilder from a specification string. @param spec Cache builder specification string. @return CacheBuilder instance.
2446 Returns a CacheBuilderSpec with a maximum size of 0.
2447 Creates an InternetDomainName from the given domain string. @param domain The domain string to create the object from. @return An InternetDomainName object.
2448 Creates a list of ListenableFuture delegates for given futures. @param futures Iterable of ListenableFuture objects. @return ImmutableList of ListenableFuture delegates.
2449 Intersects this RangeSet with another RangeSet. @param other The RangeSet to intersect with. @return A new RangeSet containing the intersection.
2450 Returns the provided multimap if it's an immutable multimap. Otherwise, creates an ImmutableListMultimap from it.
2451 Returns the multimap from the superclass, casting to ImmutableListMultimap.
2452 Creates a collector to collect elements into an ImmutableMap. @param keyFunction Maps element to key. @param valueFunction Maps element to value.
2453 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 The key. @param v1 The value. @return An ImmutableSetMultimap containing the pair.
2454 Creates an ImmutableSetMultimap with two key-value pairs. @param k1, v1 first key-value pair @param k2, v2 second key-value pair @return ImmutableSetMultimap containing the pairs.
2455 Creates an ImmutableSetMultimap from the given key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to add. @return ImmutableSetMultimap containing the provided entries.
2456 Creates an ImmutableSetMultimap from given key-value pairs. @param k1, v1, k2, v2, k3, v3, k4, v4 key-value pairs @return ImmutableSetMultimap containing the provided data
2457 Creates an ImmutableSetMultimap from the given key-value pairs.
2458 Creates an ImmutableSetMultimap from an iterable of entries. @param entries Iterable containing key-value entries. @return An ImmutableSetMultimap containing the entries.
2459 Creates an ImmutableSetMultimap from the given multimap. @param multimap the input multimap @return An ImmutableSetMultimap containing the data.
2460 Creates an ImmutableMap from values and a key function. @param values Iterable of values to map. @param keyFunction Function to extract key from each value.
2461 Creates a new ArrayTable with the provided row and column keys.
2462 Computes the power set of a given set. @param set The input set for which to generate the power set. @return A Set of Sets representing the power set.
2463 Creates an ImmutableTable (Dense or Sparse) based on cell list and row/column spaces.
2464 Creates an immutable graph from the mutable graph. @return ImmutableGraph representation of the mutable graph.
2465 Returns an immutable network, or wraps if mutable. @param network The network to make immutable. @return An ImmutableNetwork.
2466 Returns an ImmutableValueGraph, or wraps the input if needed.
2467 Creates a TypeResolver instance with an initial TypeMapping. @param contextType The context type for type mapping.
2468 Resolves a type, capturing invariants and applying type mapping. @param contextType The type to resolve. @return A TypeResolver instance.
2469 Resolves types using mappings. @param formal The formal type. @param actual The actual type. @return TypeResolver object with resolved types.
2470 Creates a map from elements using the provided value function. @param valueFunction Function to generate values for each element. @return ImmutableMap with elements and their generated values.
2471 Creates a MinMaxPriorityQueue from an iterable. @param initialContents Iterable to initialize the queue. @return A MinMaxPriorityQueue containing the elements.
2472 Processes an element and returns true. @param element The element to process.
2473 Filters ClassInfo objects by package name. @param packageName Package name to filter by. @return Set of ClassInfo objects in the specified package.
2474 Retrieves ClassInfo objects within a specified package. @param packageName Package name to filter ClassInfo objects. @return ImmutableSet of ClassInfo objects in the package.
2475 Returns an iterable from a set containing the startNode.
2476 Returns an iterable from a starting node. @param startNode The starting node for the iterable.
2477 Returns an iterable from a set containing the startNode.
2478 Returns resource info for files in the project. Calls internal method with an empty set.
2479 Creates a ClassPath from a ClassLoader. @param classloader ClassLoader to scan for resources. @return A ClassPath object containing resource information.
2480 Creates an Invokable for the given return type. @param returnType The class of the return type. @return An Invokable object.
2481 Retrieves a value from an entry, handling nulls and expiry. @param entry The ReferenceEntry to retrieve from. @param now Current timestamp. @return Value from the entry, or null if expired/invalid.
2482 Calls method m1 with the provided timestamp. @param now The timestamp to pass to m1.
2483 Resolves a TypeVariable, returning a resolved Type or the original. @param var The TypeVariable to resolve. @param forDependants TypeTable for dependency resolution.
2484 Returns the type of the FUNC_MASK. Returns class if no type params.
2485 Delegates to m2 with a resolved type. @return Resolved object from m2.
2486 Creates a Traverser that visits file tree children. Returns a Traverser using MoreFiles::fileTreeChildren.
2487 Parses a host specifier string. @param specifier Host specifier string to parse. @throws IllegalArgumentException if parsing fails.
2488 Constructs an InternetDomainName from ancestor parts. @param levels Number of ancestor levels to include. @return An InternetDomainName object.
2489 Constructs an InternetDomainName from the left parts and name. @param leftParts String representing the left domain parts @return InternetDomainName object
2490 Checks if the given name is a valid InternetDomainName. @param name The name to validate. @return True if valid, false otherwise.
2491 Creates a Collector to group elements by key and collect values as a list. @param keyFunction Extracts the key from an element. @param valuesFunction Extracts a stream of values from an element.
2492 Creates an ImmutableListMultimap with a single key-value pair. @param k1 The key. @param v1 The value. @return A new ImmutableListMultimap.
2493 Creates an ImmutableListMultimap from two key-value pairs. @param k1, v1 first key-value pair @param k2, v2 second key-value pair @return ImmutableListMultimap containing the pairs
2494 Creates an ImmutableListMultimap from the given key-value pairs. @param k1, v1, k2, v2, k3, v3 Key-value pairs to add. @return ImmutableListMultimap containing the provided entries.
2495 Creates an ImmutableListMultimap from the given key-value pairs.
2496 Creates an ImmutableListMultimap from key-value pairs. @param k1, v1, k2, v2, k3, v3, k4, v4, k5, v5 key-value pairs @return ImmutableListMultimap containing the provided pairs
2497 Creates an ImmutableListMultimap from an iterable of entries. @param entries iterable of key-value entries @return ImmutableListMultimap built from entries
2498 Builds an ImmutableListMultimap from values and a key function. @param values Iterator of values. @param keyFunction Function to extract key from each value.
2499 Creates a MediaType, filtering parameters and adding values. @param attribute Attribute to normalize and use as a key. @param values Values to add to the MediaType. @return The constructed MediaType.
2500 Creates a Collector to build an ImmutableSetMultimap. @param keyFunction Extracts the key from an element. @param valueFunction Extracts the value from an element.
2501 Returns the inverse multimap. Lazily initializes if null.
2502 Transitions state, throws exception if services are not NEW. Monitors state via monitor.m1/m2.
2503 Delegates to the state's m1() method. Returns an ImmutableSetMultimap.
2504 Creates an immutable map from the iterable, using the keyFunction. @param keyFunction Function to extract the key from each element. @return ImmutableMap with keys generated by the function.
2505 Creates an ArrayTable from a given Table, casting if possible. @param table The input Table to create ArrayTable from. @return An ArrayTable instance.
2506 Creates an immutable network from the mutable network. @return ImmutableNetwork representation of the mutable network.
2507 Creates an immutable graph from the mutable graph. @return An ImmutableValueGraph representing the data.
2508 Initializes the TypeToken with the declaring class's type. @param declaringClass The class declaring the type.
2509 Creates a MinMaxPriorityQueue with default initial capacity. Returns the newly created queue.
2510 Creates a MinMaxPriorityQueue from an iterable. @param initialContents iterable to initialize the queue @return A new MinMaxPriorityQueue
2511 Returns the set of all nodes reachable from the given node. @param graph The graph to traverse. @param node The starting node.
2512 Retrieves a reference entry by key. Returns null if key is null.
2513 Checks if an entry is valid based on its associated data. @param entry The reference entry to check. @param now Current timestamp. @return True if the entry is valid, false otherwise.
2514 Retrieves or creates a LoadingValueReference based on key/hash. @param key The key to search for. @param hash Hash code of the key. @param checkTime Whether to check the entry's time. @return LoadingValueReference or null if not found/expired.
2515 Calls m2() if readCount.m1() doesn't meet DRAIN_THRESHOLD.
2516 Resolves a TypeVariable, returning a resolved Type or the original. @param var The TypeVariable to resolve. @param forDependants TypeTable for resolving dependencies.
2517 Creates a ClosingFuture with a Callable, executes it, and adds closeables. @param combiningCallable Callable to execute @param executor Executor to run the Callable with @return ClosingFuture instance
2518 Creates a ClosingFuture using an AsyncCallable and Executor. @param combiningCallable Callable to combine results @param executor Executor for asynchronous execution @return ClosingFuture wrapping the combined result
2519 Parses a host specifier string. @param specifier Host specifier string to parse. @throws ParseException if the specifier is invalid.
2520 Checks if a specifier is valid by attempting to parse it. @param specifier The specifier string to validate. @return True if valid, false otherwise.
2521 Returns an InternetDomainName, or null if m1() is false.
2522 Checks domain validity, logs if invalid, and adjusts the domain.
2523 Returns an InternetDomainName, or null if m1() is false.
2524 Processes the domain name, potentially modifying it. Returns the processed domain name object.
2525 Retrieves a domain name, logs a message if no parent exists.
2526 Creates a Collector to collect values into an ImmutableListMultimap. @param keyFunction Extracts the key from an input element. @param valueFunction Extracts the value from an input element.
2527 Creates an immutable multimap with a single key-value pair. @param k1 The key. @param v1 The value. @return An ImmutableMultimap containing the key-value pair.
2528 Creates an ImmutableMultimap from the given key-value pairs.
2529 Creates an ImmutableMultimap from the given key-value pairs.
2530 Creates an ImmutableMultimap from the given key-value pairs. @param <K> key type @param <V> value type @return ImmutableMultimap containing the provided entries
2531 Creates an ImmutableMultimap from the given key-value pairs.
2532 Creates a Multimap from the given entries. @param entries Iterable of entries to populate the Multimap.
2533 Returns the inverse multimap. Lazily initializes if null.
2534 Creates a multimap from values using the given key function. @param values Iterable of values to map. @param keyFunction Function to extract the key from each value.
2535 Creates a MediaType based on the attribute and value. @param attribute The media type attribute. @param value The media type value.
2536 Constructs a MediaType using provided type, subtype, and parameters. @param parameters Multimap containing additional parameters @return A MediaType object.
2537 Creates a MediaType with the given type and subtype. @param type The media type string. @param subtype The subtype string.
2538 Parses a media type string and returns a MediaType object. @param input The media type string to parse. @return A MediaType object representing the parsed media type.
2539 Constructs a ServiceManager with the provided services. @param services Iterable of services to manage.
2540 Creates a Collector for ImmutableSetMultimap. @param keyFunction Extracts the key from the input. @param valuesFunction Extracts values as a Stream.
2541 Returns a TypeToken for the given Type, using internal helpers. @param type The Type to create a TypeToken for.
2542 Creates a MinMaxPriorityQueue with natural ordering. Returns the created queue.
2543 Retrieves a value from a cache, loading if necessary. @param key Cache key. @param hash Hash of the key. @return Value or null if not found/failed to load.
2544 Loads a value for a key, handling null returns and stats. @param key The key for which to load a value. @return The loaded value.
2545 Attempts to retrieve and process an entry, returning true on success.
2546 Checks if a value exists in the map based on value equivalence.
2547 Creates a multimap with keys derived from elements using keyFunction. @param keyFunction Function to extract the key from each element. @return A new ImmutableListMultimap.
2548 Creates a MediaType with the given charset. @param charset The Charset to associate with the media type. @return The new MediaType instance.
2549 Returns the MediaType based on a parameter flag. Uses m2 if flag is false, otherwise returns this.
2550 Creates a MediaType with the given subtype. @param subtype The subtype of the media type. @return A MediaType object.
2551 Creates a MediaType object with the given subtype. @param subtype The subtype of the media type. @return A MediaType object.
2552 Creates a MediaType object with the given subtype. @param subtype The subtype of the media type. @return A MediaType object.
2553 Creates a MediaType object with the given subtype. @param subtype The subtype of the media type (e.g., "jpeg") @return A MediaType object.
2554 Creates a MediaType with the given subtype. @param subtype The subtype of the media type (e.g., "plain") @return A MediaType object.
2555 Creates a MediaType object with the given subtype. @param subtype The subtype of the media type (e.g., "mp4") @return A MediaType object.
2556 Returns an ImmutableTable based on the number of cells.
2557 Gets the TypeToken for the superclass of the runtime type. Returns null if the superclass is not found.
2558 Resolves type tokens for a given type. Returns a list of resolved TypeToken<? super T> objects.
2559 Resolves the supertype token for a given class. Returns a TypeToken<? super T> representing the supertype.
2560 Loads all values for given keys using the provided loader. @param keys keys to load values for @param loader cache loader to use @return Map containing loaded values or null if not found
2561 Checks if any entry satisfies condition m1. Iterates through entries using m2() until null.
2562 Returns the masked table. Delegates to m1() and returns the result.
2563 Checks for a condition within a table, returning true if found.
2564 Resolves a subtype of the current type, handling wildcards & subclasses.
2565 Returns the immutable table if it's already an ImmutableTable. Otherwise, recursively calls m2 on the table's backing table.
2566 Creates a TableCollector for building ImmutableTables. @param rowFunction Maps T to row key R. @param columnFunction Maps T to column key C. @param valueFunction Maps T to value V.
