1 Sets the row comparator. @param rowComparator comparator for rows @return this builder instance
2 Sets the comparator for columns. @param columnComparator comparator to define column order @return Builder instance for method chaining
3 Merges multiple iterables into a single sorted iterable. @param iterables collection of iterables to merge @param comparator comparator for sorting elements @return unmodifiable, sorted iterable of merged elements
4 Finds the index of the first element matching a predicate. @param iterator source of elements @param predicate condition to test elements against @return index of first matching element or -1 if none found
5 Creates a builder for a sorted set multimap with a custom comparator. @param comparator comparator for sorting values @return SortedSetMultimapBuilder instance
6 Creates a SetMultimapBuilder for enum values. @param valueClass the class of enum type @return SetMultimapBuilder configured with enum set supplier
7 Creates a SetView combining elements from two sets. @param set1 first input set @param set2 second input set @return SetView containing union of both sets
8 Returns a SetView containing elements present in both set1 and set2. @param set1 first set to compare @param set2 second set to compare @return SetView of common elements
9 Returns a SetView of elements in set1 but not in set2. @param set1 the first set @param set2 the second set to exclude from set1 @return SetView containing elements unique to set1
10 Computes symmetric difference between two sets. @param set1 first input set @param set2 second input set @return SetView containing elements in either set but not both
11 Searches for target array within main array. @param array the main boolean array to search in @param target the boolean array to find @return starting index of target in array, or -1 if not found
12 Searches for the first occurrence of target in array. @param array byte array to search within @param target byte array to find @return starting index of target in array or -1 if not found
13 Searches for the first occurrence of a target array within an array. @param array the array to search within @param target the array to search for @return index of the start of the target in the array, or -1 if not found
14 Searches for target array within main array. @param array main array to search in @param target sub-array to find @return starting index of target in array, or -1 if not found
15 Finds the starting index of target array within the main array. @param array the main float array to search in @param target the float array to find within the main array @return the starting index of target in array, or -1 if not found
16 Finds the starting index of target array within the main array. @param array the main array to search within @param target the sub-array to find @return the starting index of target in array, or -1 if not found
17 Finds the starting index of target array in given array. @param array main array to search within @param target sub-array to find @return starting index of target in array, or -1 if not found
18 Searches for target array within array. @param array main array to search in @param target sub-array to find @return starting index of target in array, or -1 if not found
19 Creates a Guard based on a condition. @param isSatisfied BooleanSupplier representing the condition @return Guard object evaluating the condition
20 Masks the value of a given type. @param type class type to mask @return default value for the type or null if not applicable
21 Specifies text for null values in join operations. @param nullText replacement text for nulls @return Joiner configured with null text handling
22 Initializes a new ToStringHelper instance. @param className name of the class being represented
23 Filters and extracts non-empty values from an iterable of Optionals. @param optionals iterable containing Optional objects @return Iterable of non-empty values
24 Masks a character sequence and returns an iterable of strings. @param sequence the input character sequence to mask @return Iterable of masked string representations
25 Masks a string to a minimum length with padding. @param string input string to mask @param minLength desired minimum length of the masked string @param padChar character used for padding if needed @return masked string of at least minLength
26 Masks a string to a minimum length with padding characters. @param string the original input string @param minLength the desired minimum length of the output string @param padChar the character used for padding @return the masked string with minimum length
27 Masks a throwable by rethrowing it as a specified type. @param throwable the original exception to mask @param declaredType the target exception class to throw @throws X if the throwable matches the declared type
28 Handles exceptions by logging and rethrowing. @param throwable the exception to process
29 Masks a throwable by collecting its causes. @param throwable the original throwable @return an immutable list of throwables in the causal chain
30 Wraps a CacheLoader with asynchronous execution for specific methods. @param loader original CacheLoader to delegate most operations @param executor Executor to run asynchronous tasks @return new CacheLoader with async behavior for certain methods
31 Wraps a removal listener with an executor for asynchronous processing. @param listener the original removal listener @param executor the executor to run the listener on @return wrapped RemovalListener that processes notifications asynchronously
32 Retrieves a map of values for the given column key. @param columnKey the key identifying the column @return a map with keys of type R and nullable values of type V
33 Retrieves a map of values for a given row key. @param rowKey the key identifying the row @return Map containing values or an empty map if row not found
34 Transforms elements of a spliterator using a function. @param fromSpliterator the source spliterator @param function the transformation function @return a new spliterator with transformed elements
35 Filters elements of a spliterator using a predicate. @param fromSpliterator the original spliterator to filter @param predicate the predicate to apply to each element @return a new spliterator with filtered elements
36 Checks if collection contains object. @param collection the collection to check @param object the object to look for @return true if object is contained, false otherwise
37 Checks if collection contains object. @param collection the collection to check @param object the object to look for @return true if object is found, false otherwise
38 Checks if elements in iterable are sorted according to comparator. @param <T> type of elements in the iterable @param iterable collection of elements to check @param comparator used to compare elements @return true if sorted, false otherwise
39 Checks if elements in iterable are strictly sorted. @param iterable collection of comparable elements @param comparator defines element order @return true if elements are strictly increasing, false otherwise
40 Creates a comparator for Optional values. @param valueComparator comparator for the wrapped values @return comparator for Optional objects, using the provided value comparator
41 Creates a comparator for Optional values using the provided comparator. @param valueComparator comparator for the type T @return Comparator for Optional<T>
42 Creates a set from the start up to but not including/to Element. @param toElement upper bound element @param inclusive true if the upper bound is included @return ContiguousSet from start to toElement
43 Creates a contiguous set with elements masked. @param fromElement starting element of the set @param inclusive true if the start element is included in the set @return ContiguousSet object representing the masked range
44 Processes element, delegates to other methods based on size. @param e element to process @return always true
45 Checks if the given iterable is not null. @param iterable the iterable to check @return the same iterable if not null, throws exception otherwise
46 Adds an element to the builder. @param element the element to add @return the Builder instance
47 Sets key comparator. @param keyComparator comparator for keys @return Builder instance with updated comparator
48 Sets the comparator for values. @param valueComparator comparator to compare values @return the builder instance
49 Adds an element to the builder. @param element the element to add @return the current builder instance
50 Applies mask to an element in the builder. @param element the element to mask @param occurrences number of times to apply the mask @return the Builder instance for method chaining
51 Adds an element with a specified count to the builder. @param element the element to add @param count the number of times to add the element @return the Builder instance for method chaining
52 Collects elements into an ImmutableSortedMultiset with counts. @param comparator for sorting elements @param elementFunction extracts the element from input @param countFunction determines the count of each element @return ImmutableSortedMultiset with sorted elements and their counts
53 Returns a subset up to a specified element. @param toElement upper bound of the range @param inclusive true if the upper bound is included @return ImmutableSortedSet containing elements up to toElement
54 Returns a subset of elements starting from 'fromElement'. @param fromElement the starting element @param inclusive true if 'fromElement' is included in the result @return ImmutableSortedSet containing elements from 'fromElement'
55 Wraps an iterable to make it unmodifiable. @param iterable the original iterable @return an unmodifiable version of the iterable
56 Checks if the given iterable is not null. @param iterable the iterable to check @return the original iterable @deprecated Use checkNotNull instead
57 Removes and returns the first element matching the predicate. @param removeFrom iterable source of elements @param predicate condition to match elements @return matched element or null if not found
58 Wraps an iterable to provide additional functionality. @param iterable the original iterable @return a new FluentIterable with enhanced features
59 Filters elements of an iterable based on a predicate. @param unfiltered the original iterable to filter @param retainIfTrue predicate to determine which elements to retain @return filtered iterable containing only elements that satisfy the predicate
60 Applies a transformation to elements of an iterable. @param fromIterable source iterable of type F @param function transformation function from F to T @return new iterable with transformed elements of type T
61 Wraps an Iterable to consume elements during iteration. @param iterable the source Iterable to wrap @return a FluentIterable that consumes elements
62 Wraps an iterator to make it unmodifiable. @param iterator the original iterator @return UnmodifiableIterator ensuring the original cannot be modified through it
63 Deprecated method to check and return an unmodifiable iterator. @param iterator the iterator to be checked @return an unmodifiable iterator or throws a NullPointerException if null
64 Removes elements from an iterator that are present in a collection. @param removeFrom the iterator to remove elements from @param elementsToRemove the collection of elements to remove @return true if any element was removed, false otherwise
65 Removes elements from iterator matching predicate. @param removeFrom iterator to modify @param predicate condition for removal @return true if any element was removed
66 Removes elements from the iterator not present in the retain collection. @param removeFrom iterator to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
67 Adds elements from an iterator to a collection. @param addTo collection to add elements to @param iterator source of elements to add @return true if the collection was modified, false otherwise
68 Creates an iterator that combines elements from the given iterable. @param iterable source of elements @return Iterator over combined elements
69 Filters elements from an iterator based on a predicate. @param unfiltered the original iterator @param retainIfTrue predicate to determine which elements to retain @return UnmodifiableIterator with filtered elements
70 Checks if all elements in the iterator satisfy the given predicate. @param iterator source of elements to check @param predicate condition to test each element against @return true if all elements match the predicate, otherwise false
71 Finds first element matching predicate in iterator. @param iterator source of elements @param predicate condition to match elements @return first matching element or throws NoSuchElementException
72 Applies a transformation function to elements of an iterator. @param fromIterator the source iterator @param function the transformation function @return a new iterator with transformed elements
73 Wraps an iterator to consume elements on next call. @param iterator the original iterator @return a new unmodifiable iterator that consumes elements
74 Iterates through elements, calling methods on each. @param iterator source of elements to process
75 Wraps an Enumeration in an UnmodifiableIterator. @param enumeration the Enumeration to wrap @return UnmodifiableIterator over the elements of the Enumeration
76 Deprecated method to check iterator for null values. @param iterator the iterator to check @return the same iterator with null checks
77 Creates an EnumMap with entries from another map. @param type the enum class for keys @return EnumMap containing entries from m1
78 Wraps an entry and delegates method calls. @param <K> key type, nullable @param <V> value type, nullable @param entry the original entry to wrap @return wrapped entry with delegated methods
79 Transforms an entry using a given transformer. @param transformer function to transform the value @param entry original key-value pair @return new entry with transformed value
80 Creates a function to transform map entries. @param transformer converts key-value pairs @return Function that transforms Entry<K, V1> to Entry<K, V2>
81 Retrieves value from map with key, handling exceptions. @param map source map @param key lookup key @return value associated with key or null if not found
82 Checks if a key exists in the map. @param map the map to check @param key the key to look for @return true if key is present, false otherwise
83 Retrieves a value from the map using a key. @param map the source map @param key the key to retrieve the value for @return the value associated with the key or null if not found or an exception occurs
84 Applies an action to entries in a map. @param action consumer for key-value pairs
85 Creates a Multimap builder with keys sorted by comparator. @param comparator key comparator for sorting @return MultimapBuilderWithKeys instance with TreeMap implementation
86 Creates a MultimapBuilderWithKeys using an EnumMap. @param keyClass the Class of the enum keys @return a MultimapBuilderWithKeys configured with EnumMap
87 Deprecated method to wrap an ImmutableMultimap. @param delegate the ImmutableMultimap to wrap @return a wrapped Multimap instance
88 Wraps an ImmutableSetMultimap with a null check. @param delegate the original ImmutableSetMultimap to wrap @return a wrapped SetMultimap ensuring non-null values
89 Deprecated method to mask an immutable list multimap. @param delegate the original ImmutableListMultimap @return a wrapped ListMultimap
90 Applies an action to each entry, invoking methods on consumer and inner objects. @param action the ObjIntConsumer to apply
91 Executes an action on elements with counts. @param action consumer to apply to each element
92 Checks if multiset is not null. @param multiset the multiset to check @return the same multiset if not null
93 Combines two multisets into a new view. @param multiset1 first input multiset @param multiset2 second input multiset @return Multiset containing elements from both inputs
94 Combines two multisets into a new view. @param multiset1 first input multiset @param multiset2 second input multiset @return combined Multiset view
95 Combines two multisets with logical operations. @param multiset1 first input multiset @param multiset2 second input multiset @return combined Multiset view
96 Computes the difference between two multisets. @param multiset1 first input multiset @param multiset2 second input multiset @return Multiset representing elements in multiset1 not in multiset2
97 Checks if a multiset is a superset of another. @param superMultiset the potential superset @param subMultiset the potential subset @return true if superMultiset contains all elements with at least equal frequency as subMultiset
98 Modifies a multiset to retain only specified occurrences. @param multisetToModify the multiset to be modified @param occurrencesToRetain the multiset defining retained occurrences @return true if modification occurred, false otherwise
99 Removes occurrences from one multiset based on another. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset of occurrences to remove @return true if the multiset was modified, false otherwise
100 Retains only the specified elements in the multiset. @param elementsToRetain collection of elements to retain @return true if this multiset was modified as a result of the call
101 Checks if the given Ordering is not null. @param ordering the Ordering to check @return the same Ordering object
102 Transfers elements from a queue to a collection with a timeout. @param q source queue @param buffer destination collection @param numElements number of elements to transfer @param timeout maximum wait time @param unit time unit for timeout @return number of elements transferred @throws InterruptedException if interrupted while waiting
103 Transfers elements from a queue to a buffer with a timeout. @param q the source blocking queue @param buffer the destination collection @param numElements max number of elements to transfer @param timeout max wait time for element retrieval @param unit time unit for timeout @return number of elements transferred
104 Checks if value is within bounds. @param value value to check @return true if value is within bounds, false otherwise
105 Creates a TreeSet with a custom comparator. @param comparator comparison logic for elements @return TreeSet instance using provided comparator
106 Applies a function to elements of two streams. @param streamA first input stream @param streamB second input stream @param function bi-function to apply to elements from both streams @return stream of results from the applied function
107 Applies a function with index to elements of the stream. @param stream input stream of elements @param function function to apply to each element with its index @return transformed stream with applied function results
108 Transforms IntStream using a function with index. @param stream input IntStream @param function mapping function with index @return transformed Stream<R>
109 Applies a function to each element of the stream with its index. @param stream input LongStream @param function LongFunctionWithIndex<R> to apply @return Stream<R> result of applying the function
110 Applies a function to each element of a DoubleStream with its index. @param stream input DoubleStream @param function function that maps double and index to result type R @return Stream of results from applying the function
111 Applies a remapping function to values within a specified range. @param range the range of keys to apply the remapping @param value the new value to use for non-null mappings @param remappingFunction the function to apply for merging existing and new values
112 Creates a tree traverser using a function to get children. @param nodeToChildrenFunction function mapping nodes to their children @return TreeTraverser instance for the given function
113 Deprecated method for creating a FluentIterable. @param root the root element to process @return FluentIterable of type T
114 Deprecated method to create a FluentIterable from a root element. @param root the starting element for iteration @return a FluentIterable instance
115 Deprecated method to create a FluentIterable from a root node. @param root the starting node for iteration @return FluentIterable with breadth-first traversal
116 Maps a character to its replacement string. @param c the character to replace @param r the replacement string @return this builder for method chaining
117 Applies character masking in the builder. @param c character to be masked @param replacement string to replace the character @return current Builder instance for method chaining
118 Masks a character sequence for a given index. @param seq the character sequence to process @param index the current index in the sequence @param end the end index of the sequence @return masked character or throws exception if invalid
119 Constructs a DeadEvent with a source and an event. @param source object that published the event @param event the event that was published
120 Handles exceptions by logging and delegating to a handler. @param e the original throwable @param context additional context about the exception
121 Masks an event by invoking a method on a target. @param event the event object to process @throws InvocationTargetException if method invocation fails
122 Initializes a new exception context for event bus subscribers. @param eventBus the EventBus instance @param event the event object that caused the exception @param subscriber the subscriber object handling the event @param subscriberMethod the method in the subscriber handling the event
123 Checks if graph is null and throws exception if so. @param graph the graph to check @return the original graph if not null
124 Deprecated method to check and return an immutable network. @param network the network to be checked @return the same network if not null
125 Deprecated method to mask a value graph. @param graph the immutable value graph to be masked @return the masked immutable value graph
126 Applies mask function to deque of iterators. @param horizon deque containing iterators over elements of type N @return result of applying mask function or null if applicable
127 Initializes a new HashingInputStream with a specified hash function and input stream. @param hashFunction the hashing algorithm to use @param in the input stream to read data from
128 Initializes an AppendableWriter with a target. @param target the Appendable to write to, must not be null
129 Creates a ByteSink from CharSink with masking. @param encodedSink sink for encoded characters @return ByteSink for byte-level operations
130 Converts character source to byte source using mask function. @param encodedSource input character source @return masked byte source
131 Initializes a new CharSequenceReader with the given sequence. @param seq the character sequence to read from; must not be null
132 Reads data from Reader and appends it to StringBuilder. @param from source reader @param to destination string builder @return total characters read
133 Transfers data from a Reader to a Writer. @param from source Reader @param to destination Writer @return number of characters transferred @throws IOException if an I/O error occurs
134 Reads and processes data from a Reader. @param reader source of the data @param n number of bytes to process @throws IOException if an I/O error occurs
135 Constructs a CountingInputStream. @param in the InputStream to count bytes from
136 Initializes a CountingOutputStream that wraps another OutputStream. @param out the underlying OutputStream to wrap
137 Creates a BufferedReader for the specified file with given charset. @param file the File to read from @param charset the character set to use @return BufferedReader instance @throws FileNotFoundException if file is not found
138 Creates a BufferedWriter for writing to a file with specified charset. @param file the target file to write to @param charset character set for encoding the output @return BufferedWriter instance
139 Masks a file by updating its modification time. @param file the File object to mask @throws IOException if unable to update the modification time
140 Masks a file by processing its parent directory. @param file the file to be masked @throws IOException if unable to create parent directories
141 Masks file extension in full name. @param fullName complete file path @return masked file extension or empty string if no extension
142 Masks the file extension by removing it. @param file full file path @return file name without extension
143 Constructs a LittleEndianDataInputStream. @param in InputStream to read from, must not be null
144 Constructs a LittleEndianDataOutputStream. @param out OutputStream to write little-endian data to
145 Masks a file by setting its last modified time to the current time. @param path the path of the file to mask
146 Initializes a filter with a given regex pattern. @param pattern compiled regex pattern to match filenames
147 Checks condition on BigInteger using helper methods. @param x input BigInteger @return true if conditions met, false otherwise
148 Applies a DoubleConsumer to elements in an array. @param consumer the DoubleConsumer to apply
149 Invokes IntConsumer on each element in a specified range. @param consumer function to apply to each element
150 Applies a function to each element in an array. @param consumer function to apply
151 Checks if a class is a wrapper type. @param type Class to check @return true if the class is a wrapper type, false otherwise
152 Wraps primitive types to their corresponding wrapper classes. @param type input class type @return wrapper class or original type if not a primitive
153 Unwraps primitive types from wrapper classes. @param type generic class type @return unwrapped primitive type or original if not a wrapper
154 Converts a string to a byte using a specified radix. @param string the string to convert @param radix the radix used for conversion @return the converted byte value @throws NumberFormatException if the value is out of range
155 Converts a string to an unsigned integer. @param string the string to convert @param radix the numerical base used for conversion @return the converted unsigned integer
156 Initializes a new schedule with a specified delay and time unit. @param delay the initial delay before execution @param unit the time unit of the delay
157 Updates and retrieves a value in the map. @param key unique key for the map entry @param updaterFunction function to update the value @return updated value after applying the function
158 Updates a key's value using an atomic operation. @param key the key to update @param updaterFunction function to compute new value based on old value @return updated value after applying the function
159 Wraps a Callable in an AsyncCallable using a ListeningExecutorService. @param callable the task to execute asynchronously @param listeningExecutorService the executor service to run the task @return AsyncCallable that executes the given Callable
160 Wraps a callable with thread name management. @param callable the original callable task @param nameSupplier supplies the new thread name @return wrapped callable with updated thread name
161 Wraps a Runnable task with thread name management. @param task the Runnable to execute @param nameSupplier supplies the new thread name @return a wrapped Runnable that sets and restores the thread name
162 Wraps an AsyncFunction with masking and closing functionality. @param function the original asynchronous function to wrap @return a new AsyncClosingFunction with added features
163 Deprecated method to check if a future is not null. Use checkNotNull(future) instead. @param future the FluentFuture object to check @return the same FluentFuture object
164 Transforms a Future's result using a Function. @param input original Future @param function transformation function @return Future with transformed result
165 Creates a masked executor. @param executor original executor to wrap @param nameSupplier supplies the name for commands @return Executor that masks commands with names
166 Wraps an ExecutorService with a name supplier. @param service the original ExecutorService to wrap @param nameSupplier provides names for tasks @return a new ExecutorService with task naming
167 Wraps a ScheduledExecutorService with additional functionality. @param service the original ScheduledExecutorService to wrap @param nameSupplier provides a name for tasks @return a wrapped ScheduledExecutorService
168 Constructs a SequentialExecutor with a given Executor. @param executor the Executor to use for executing tasks sequentially
169 Submits a task for execution. @param task the Runnable task to be executed
170 Sets the uncaught exception handler. @param uncaughtExceptionHandler handler to manage uncaught exceptions @return ThreadFactoryBuilder instance for method chaining
171 Sets the backing thread factory. @param backingThreadFactory the thread factory to use @return this builder instance (for method chaining)
172 Waits for a thread to complete with a timeout. @param toJoin the thread to wait for @param timeout the maximum time to wait @param unit the time unit of the timeout parameter
173 Sets the time source for cache operations. @param ticker time source to use @return current CacheBuilder instance
174 Sets a removal listener for cache entries. @param listener callback to be notified on entry removal @return updated CacheBuilder instance
175 Calculates and returns the mean value. @return calculated mean as a double
176 Calculates minimum value after ensuring count is non-zero. @return minimum value or default if count is zero
177 Returns maximum value after validation. Validates count and returns max.
178 Calculates and returns the mean value. Validates that count is not zero before calculation. @return calculated mean value as a double
179 Returns minimum value after validating count. @return minimum value if count is not zero, otherwise throws an exception
180 Masks function with count check. @param count number of items to process @return maximum value after processing
181 Returns a CountDownLatch that waits for closure. @return CountDownLatch set to 1 if not closed, else 0
182 Masks characters in string based on condition. @param string input string to be masked @return masked string or original if no condition met
183 Masks character case. @param c input character @return masked character if condition met, otherwise original character
184 Masks characters in a string based on a condition. @param string input string to be masked @return masked string or original if no masking is needed
185 Masks character case. @param c character to mask @return masked character if condition met, otherwise original character
186 Masks a sequence by truncating it and appending an indicator. @param seq the original character sequence to mask @param maxLength maximum length of the masked string @param truncationIndicator string appended after truncation @return masked string with truncation indicator if needed
187 Masks buffer data by applying transformations and validations. @param buffer input ByteBuffer containing data to be masked
188 Masks a short value between specified min and max. @param value the value to mask @param min the minimum allowable value @param max the maximum allowable value @return masked value within range [min, max]
189 Sets the thread priority. @param priority thread priority level @return ThreadFactoryBuilder instance
190 Compares two sequences for equality, ignoring case differences. @param s1 first sequence to compare @param s2 second sequence to compare @return true if sequences are equal or differ only by case; false otherwise
191 Initializes cache statistics with given metrics. @param hitCount number of successful cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of exceptions during loads @param totalLoadTime total time spent on loading operations @param evictionCount number of evictions from the cache
192 Constructs a new instance with the given map. @param map initial map that must be empty
193 Initializes the map and calculates total size. @param map input map with keys and collections of values
194 Initializes a multiset with a given backing map. @param backingMap empty map to back the multiset
195 Creates a contiguous set with specified range. @param fromElement start of the range @param fromInclusive include start element in range @param toElement end of the range @param toInclusive include end element in range @return ContiguousSet containing elements within specified range
196 Initializes a new EnumMultiset for the given enum class. @param type the enum class to manage
197 Returns a subset of elements within the specified range. @param fromElement lower bound element @param fromInclusive include lower bound if true @param toElement upper bound element @param toInclusive include upper bound if true @return ImmutableSortedSet containing elements in the range [fromElement, toElement]
198 Splits an iterable into lists of a specified size. @param iterable the source iterable to split @param size the maximum size of each sublist @return an Iterable of Lists containing elements from the source iterable
199 Splits an iterable into chunks of a specified size. @param iterable the source iterable to split @param size the chunk size @return an iterable of lists, each containing up to 'size' elements
200 Sets the expected size. @param expectedSize the expected size to set @return the builder instance
201 Sets the maximum size. @param maximumSize the maximum size to set @return the builder instance
202 Initializes AbstractStreamingHasher with specified chunk and buffer sizes. @param chunkSize size of each data chunk @param bufferSize total buffer size, must be a multiple of chunkSize
203 Applies mask operation to input value. @param value input number to process @return processed value after mask application
204 Creates a CharMatcher that matches a specific character. @param match the character to match @return CharMatcher instance matching the specified character
205 Creates a character matcher that matches any character except the specified one. @param match character to be excluded from matching @return CharMatcher object excluding the specified character
206 Masks characters in a sequence with a replacement character. @param sequence the input CharSequence to process @param replacement the character used for masking @return a new String with masked characters
207 Default constructor initializing with default value.
208 Checks equality based on wrapped objects and equivalence. @param obj object to compare @return true if equal, false otherwise
209 Compares two nullable objects using an equivalent method. @param t first object to compare @param u second object to compare @return result of the comparison
210 Removes a key-value pair from the map. @param key key to be removed @param hash hash code of the key @param valueReference reference to the weak value @return true if removal is successful, false otherwise
211 Removes entry from the map if it matches key and value reference. @param key key to identify the entry @param hash hash of the key @param valueReference reference to the weak value @return true if entry was removed, false otherwise
212 Compares two iterators for equality. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators have the same elements in order, false otherwise
213 Checks equality with another Multiset.Entry. @param object the object to compare @return true if equal, false otherwise
214 Determines if masking is needed for a node in the graph. @param graph the graph to operate on @param nextNode the next node in the traversal @param previousNode the previous node in the traversal (nullable) @return true if masking is required, false otherwise
215 Returns mask value based on equivalence and reference. @return integer mask value
216 Creates a finalizable phantom reference. @param referent object the reference refers to, or null @param queue queue for cleanup
217 Initializes a soft reference with cleanup. @param referent object to be softly referenced @param queue reference queue for finalization
218 Initializes a FinalizableWeakReference. @param referent object to be weakly referenced @param queue FinalizableReferenceQueue for cleanup
219 Creates a constant function returning a fixed value. @param value the constant value to return @return Function that always returns the specified value
220 Parses a bracketed host-port string. @param hostPortString input string in the format [host]:port @return array with host and port, or just host if no port
221 Validates and returns host information. @return HostAndPort object
222 Masks the given InetAddress by decrementing its last non-zero byte. @param address the original InetAddress to be masked @return a new InetAddress with the last non-zero byte decremented
223 Increments the last non-ff byte of an InetAddress. @param address the input IP address @return incremented InetAddress or throws exception if increment wraps
224 Creates a proxy for the given interface. @param interfaceType interface to be proxied @param handler invocation handler for the proxy @return proxy instance of type T
225 Retrieves parameterized type from superclass. @return first generic type argument of the superclass
226 Appends masked parts to an Appendable. @param appendable where the result is appended @param parts iterator of parts to be processed @return the modified Appendable with masked parts @throws IOException if an I/O error occurs
227 Appends entries to StringBuilder. @param builder StringBuilder to append to @param entries iterable of entries to append @return updated StringBuilder
228 Masks entries by converting them to a string. @param entries iterator of key-value pairs @return masked string representation of entries
229 Creates a MapJoiner with specified key-value separator. @param keyValueSeparator character used to separate keys and values @return MapJoiner instance configured with the separator
230 Generates a string representation of the object. @return formatted string with values from ValueHolders
231 Retrieves an immutable set of values associated with a key. @param key the key to look up in the map @return an immutable set of values or an empty set if not found
232 Loads a resource by name. @param resourceName the name of the resource to load @return URL of the resource or throws an exception if not found
233 Returns an empty Optional. @param <T> type parameter @return Optional containing no value
234 Transforms an Optional by calling its method. @param googleOptional input Optional object, can be null @return transformed Optional or null if input is null
235 Masks input string if condition is met. @param string input to be masked or returned as is @return null if condition in m1 is true, otherwise original string
236 Checks if a string is masked. @param string input string to check @return true if string is masked, false otherwise
237 Skips a specified number of elements from the given iterable. @param iterable source of elements to iterate over @param numberToSkip number of elements to skip @return Iterable with skipped elements
238 Limits the size of an iterable. @param iterable source iterable to limit @param limitSize maximum number of elements to include @return new iterable with limited size
239 Advances an iterator by a specified number of steps. @param iterator the iterator to advance @param numberToAdvance nonnegative number of steps to advance @return actual number of steps advanced
240 Limits an iterator to a specified size. @param iterator the original iterator @param limitSize the maximum number of elements to iterate over @return a new iterator with limited size
241 Creates a traverser for a tree structure. @param tree function defining the tree's successors @return Traverser object for navigating the tree
242 Calculates mask for given bit count. @param bits number of bits to mask @return integer mask with bits set
243 Converts BigInteger to InetAddress. @param address BigInteger representation of IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object
244 Repeats a string multiple times. @param string the original string to repeat @param count number of times to repeat the string @return repeated string or throws exception if size exceeds limit
245 Constructs a BloomFilter. @param bits underlying bit array for storage @param numHashFunctions number of hash functions to use, must be 1-255 @param funnel defines how objects are converted to bytes @param strategy determines the hashing strategy
246 Creates a concatenated hash function from an iterable of hash functions. @param hashFunctions collection of hash functions to concatenate @return ConcatenatedHashFunction combining all input hash functions
247 Initializes a SipHash function with specified parameters. @param c number of iterations for compression phase @param d number of iterations for finalization phase @param k0 first key component @param k1 second key component
248 Initializes a FileBackedOutputStream with specified file threshold and reset behavior. @param fileThreshold maximum memory size before writing to disk @param resetOnFinalize whether to reset the stream on finalize
249 Converts byte array to Inet4Address. @param bytes byte array representing IPv4 address @return Inet4Address object
250 Masks boolean array to minimum length with padding. @param array input boolean array @param minLength desired minimum length of the array @param padding number of elements to add if array is shorter than minLength @return masked boolean array
251 Masks input array by padding it to specified minimum length. @param array input byte array @param minLength desired minimum length of the array @param padding number of bytes to add if padding is needed @return masked byte array with at least minLength + padding
252 Masks array by ensuring it meets minimum length with padding. @param array input character array @param minLength minimum required length of the array @param padding additional padding to be added if needed @return masked character array
253 Ensures array length meets minimum requirement by padding if necessary. @param array input array to be checked and padded @param minLength minimum required length of the array @param padding number of elements to add if padding is needed @return adjusted array with sufficient length
254 Ensures array meets minimum length by padding if necessary. @param array input float array @param minLength required minimum length @param padding value to add for padding @return adjusted array with at least minLength elements
255 Masks an array by padding it if its length is less than minLength. @param array the input array to be masked @param minLength minimum required length of the array @param padding number of elements to add for padding @return padded array or original if already long enough
256 Masks input array by extending its length if necessary. @param array the input long array @param minLength minimum desired length of the array @param padding additional padding to add if extension is needed @return extended or original array based on minLength and padding
257 Masks an array by extending its length with padding if it's shorter than minLength. @param array input short array to be masked @param minLength minimum desired length of the array @param padding number of elements to add if array is too short @return new array with extended length or original array if already long enough
258 Converts long to char, checking for overflow. @param value the long value to convert @return char representation of the value
259 Converts long to int with range check. @param value input long value @return converted int value @throws IllegalArgumentException if out of int range
260 Converts long to short and checks for overflow. @param value input long value @return converted short value
261 Masks long value to byte. @param value input long value @return masked byte value or throws error if out of range
262 Masks long value to byte. @param value input long value @return masked byte value
263 Masks long value to int, ensuring it fits. @param value input long value @return masked int value
264 Creates a scheduler with specified delays. @param initialDelay initial delay before first execution @param delay fixed rate between executions @param unit time unit for delays @return Scheduler instance for scheduling tasks
265 Creates a recurring scheduler. @param initialDelay time to wait before first execution @param period interval between subsequent executions @param unit time unit for delay and period @return Scheduler instance that schedules tasks
266 Masks a character within a specified range. @param value the character to mask @param min minimum allowed character value @param max maximum allowed character value @return clamped character value within [min, max]
267 Masks a value to ensure it falls within a specified range. @param value the input value to mask @param min the minimum allowable value @param max the maximum allowable value @return the masked value within the range [min, max]
268 Retrieves a resource URL by name relative to a given class. @param contextClass the class providing the resource context @param resourceName the name of the resource to find @return URL of the resource or null if not found
269 Starts the stopwatch. @return this Stopwatch instance
270 Stops the stopwatch and updates elapsed time. @return current Stopwatch instance
271 Masks function execution based on removal permission. @param canRemove flag indicating removal capability
272 Sets the value comparator for sorting. @param valueComparator comparator for comparing values @return this Builder instance
273 Sets the initial capacity for the cache. @param initialCapacity starting size of the cache @return CacheBuilder instance with updated settings
274 Sets the concurrency level for cache operations. @param concurrencyLevel number of concurrent threads expected @return CacheBuilder instance with updated settings
275 Sets the initial capacity for the map. @param initialCapacity the initial capacity to be set @return this MapMaker instance
276 Sets the concurrency level. @param concurrencyLevel number of concurrent threads @return MapMaker instance for method chaining
277 Sets the maximum size of the cache. @param maximumSize the maximum number of entries in the cache @return the CacheBuilder instance for method chaining
278 Sets the maximum weight for cache entries. @param maximumWeight the maximum allowed weight @return this CacheBuilder instance
279 Sets a weigher for the cache. @param weigher defines how to weigh cache entries @return this CacheBuilder instance with the weigher set
280 Sets cache expiration time. @param duration the duration of time after which entries should expire @param unit the time unit for the duration @return CacheBuilder instance with updated settings
281 Sets cache expiration time after access. @param duration time duration for expiration @param unit time unit for duration @return CacheBuilder instance with updated settings
282 Sets refresh interval for cache entries. @param duration time duration for refresh @param unit time unit for the duration @return CacheBuilder instance with updated settings
283 Sets the key equivalence strategy. @param equivalence custom equivalence comparator @return CacheBuilder instance for chaining
284 Sets the value equivalence for cache entries. @param equivalence Equivalence strategy for values @return This CacheBuilder instance
285 Sets the key equivalence strategy. @param equivalence custom equivalence for keys @return MapMaker instance with updated settings
286 Constructs a TypeToken capturing the generic type. @throws IllegalArgumentException if constructed from a type variable
287 Throws an exception if the service has not failed. @return Throwable object representing the failure cause
288 Validates and returns index. @param index position to validate @param size maximum valid index value @param desc description for error message @return validated index or throws exception if invalid
289 Validates and returns the index. @param index position to validate @param size maximum allowable index value @param desc description for error message @return validated index or throws exception if invalid
290 Returns a predicate that always evaluates to true. @param <T> the type of elements to be matched by this predicate @return a predicate that always returns true
291 Returns a predicate that always evaluates to false. @param <T> the type of elements to be evaluated by this predicate @return a predicate that always returns false
292 Returns a predicate that checks if an object is null. @return Predicate checking for null objects
293 Returns a predicate that checks for non-null objects. @return Predicate checking if an object is not null
294 Combines two predicates with logical AND. @param first the first predicate @param second the second predicate @return a composed predicate that tests if both input predicates are true
295 Combines two predicates with logical OR. @param first the first predicate @param second the second predicate @return a new Predicate that evaluates to true if either of the input predicates is true
296 Creates and returns a new Splitter with specified strategy, trimming, and limit. @return Splitter object configured with given parameters
297 Creates a Splitter with a specified maximum number of items. @param maxItems the maximum number of split items allowed @return a new Splitter instance configured with the given parameters
298 Masks characters in input sequence. @param sequence the input character sequence to mask @return a list of masked strings
299 Concatenates results of two methods with an equals sign. @return string in "m1=m2" format
300 Converts time unit to nanoseconds. @param desiredUnit target time unit for conversion @return time duration in nanoseconds
301 Returns masked duration. @return Duration object with masking applied
302 Converts a time duration to a formatted string. @return formatted time string with unit
303 Delegates to Platform.m1 with the given string. @param string input string, can be null @return result from Platform.m1
304 Masks common prefix of two sequences. @param a first character sequence @param b second character sequence @return masked string with common prefix removed
305 Masks the common suffix of two sequences. @param a first character sequence @param b second character sequence @return masked string with common suffix removed or original if no suffix
306 Creates a Supplier for the given instance. @param instance the object to supply, can be null @return Supplier that provides the given instance
307 Protected constructor for the Ticker class.
308 Throws VerifyException if expression is false. @param expression condition to check
309 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate error message template with one placeholder @param p1 character to replace in the template
310 Throws an exception if the expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 parameter for error message
311 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 parameter for error message
312 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param errorMessageArgs arguments for error message
313 Throws an exception if the expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first character parameter for message @param p2 second character parameter for message
314 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
315 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
316 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
317 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 character parameter for error message @param p2 integer parameter for error message
318 Throws an exception if the expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
319 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
320 Throws a VerifyException with a formatted message if the expression is false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
321 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for the error message @param p2 second parameter for the error message
322 Throws an exception if the expression is false. @param expression boolean condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message
323 Throws an exception with a formatted error message if the condition is false. @param expression the boolean condition to check @param errorMessageTemplate template for the error message @param p1 first parameter for the error message @param p2 second parameter for the error message
324 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for the error message @param p2 second parameter for the error message
325 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting (nullable)
326 Throws a VerifyException with a formatted message if the expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for the error message @param p2 second parameter for the error message (nullable)
327 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message (nullable)
328 Throws a VerifyException if the given expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for the error message @param p2 second parameter for the error message
329 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first parameter for error message @param p2 second parameter for error message @param p3 third parameter for error message
330 Throws a VerifyException with a formatted message if the expression is false. @param expression boolean condition to check @param errorMessageTemplate template for error message @param p1,p2,p3,p4 parameters for message formatting
331 Processes references using a finalize method. @param firstReference initial reference to process @return true if all references are processed successfully, false otherwise
332 Constructs a new instance of SimpleStatsCounter.
333 Merges statistics from another StatsCounter instance. @param other the StatsCounter to merge with
334 Constructs a new instance of AbstractLoadingCache.
335 Creates a new empty LinkedHashMap. @return an empty LinkedHashMap instance
336 Processes entries in a map. @param m the input map containing key-value pairs
337 Masks objects using provided keys. @param keys iterable collection of keys to mask
338 Creates a new instance of CacheBuilder. @return CacheBuilder object configured with default settings
339 Throws an exception as this operation is unsupported. @param keys iterable of keys to mask @throws Exception always thrown due to unsupported operation
340 Masks hit and miss counts. @param hitCount number of successful accesses @param missCount number of failed accesses @return masked result of hit and miss counts
341 Masks success and exception counts. @return masked value combining counts
342 Calculates the exception rate during loading. @return Exception rate as a percentage or 0.0 if no loads occurred
343 Calculates average load time. @return Average load time in seconds or 0 if no loads occurred
344 Constructs a new instance of ForwardingCache.
345 Constructs a new ForwardingCollection instance.
346 Constructs a new instance of ForwardingIterator.
347 Constructs a new ForwardingMap instance.
348 Constructs an empty ForwardingMapEntry.
349 Constructs an empty ForwardingMultimap instance.
350 Constructs a new instance of ForwardingTable.
351 Constructs a new ForwardingExecutorService instance.
352 Constructs a new ForwardingFuture instance.
353 Processes entries in the recency queue. Moves accessed entries to the access queue.
354 Creates a new entry with updated references. @param original the original entry to base the new entry on @param newNext reference to the next entry in the chain @return new ReferenceEntry or null if key or value is invalid
355 Removes entries matching a predicate. @param predicate condition to test each entry @return true if any entry was removed
356 Masks futures processing based on conditions. @param allMustSucceed flag indicating if all futures must succeed
357 Wraps an Executor with error handling. @param delegate original Executor to wrap @param future AbstractFuture to handle exceptions @return Executor that delegates tasks and handles RejectedExecutionException
358 Retrieves result from Future, throwing exception if not done. @param future the Future object to process @return result of the Future @throws ExecutionException if retrieval fails
359 Masks future execution, handling exceptions. @param future the Future to process @return result of future execution or throws masked exception
360 Executes methods based on map conditions. Calls m2() if m1() is true, and m4() if m3() is true.
361 Returns an Equivalence instance for masking operations. @return Equivalence object configured for masking logic
362 Defines an equivalence function for masking operations. @return Equivalence instance for object comparison
363 Returns an equivalence relation for masking operations. @return Equivalence object defining equality checks for masked values
364 Defines an equivalence function for masking operations. @return Equivalence instance for object comparison
365 Returns an equivalence function for masking objects. @return Equivalence instance for object comparison
366 Determines if an entry should be masked based on expiration times. @param entry the ReferenceEntry to check @param now current time in nanoseconds @return true if entry should be masked, false otherwise
367 Calculates the sum of values in countMap and returns as an integer.
368 Counts elements in an iterator using specific methods. @param iterator the Iterator to process @return int count of processed elements
369 Calculates mask value from multiset sizes. @param multiset input collection with entries @return integer mask representing total count
370 Applies mask operation on sum of two integers. @param a first integer @param b second integer @return masked result of a + b
371 Applies bitwise mask to integer difference. @param a first integer operand @param b second integer operand @return masked result of (a - b)
372 Multiplies two integers and applies a mask. @param a first integer @param b second integer @return masked result of multiplication
373 Returns an empty set with null elements allowed. @return CompactHashSet instance initialized with no elements
374 Initializes an AbstractIterator instance.
375 Initializes an iterator with the first element. @param firstOrNull the first element or null if none
376 Constructs an unmodifiable list iterator.
377 Applies two transformations to a collection. @return Transformed collection of type V
378 Retrieves an entry from an iterator. @return Entry object or null if none available
379 Applies mask to elements. @return processed element or null
380 Recursively calls m3 on ancestor, checks m4 consistency. Updates delegate if necessary based on map lookup.
381 Retrieves values for a given key. @param key the key to search for @return collection of values associated with the key
382 Returns collection of values. @return Collection of values from superclass
383 Overrides parent method to return list of type V.
384 Returns entries from the superclass. @return Collection of Entry objects
385 Returns a list of entries by delegating to superclass. @return List of Entry objects
386 Creates a StringBuilder with a masked size. @param size initial capacity for the StringBuilder @return StringBuilder instance with adjusted capacity
387 Creates a new ArrayList with the specified initial capacity. @param initialArraySize initial capacity of the ArrayList @return an ArrayList instance initialized with the given size
388 Calculates a mask value based on the expected size. @param expectedSize the expected size of a collection @return the calculated mask value or adjusted size
389 Creates a ListMultimap builder with expected values per key. @param expectedValuesPerKey expected number of values per key @return ListMultimapBuilder configured with the specified capacity
390 Creates a set multimap builder with expected values per key. @param expectedValuesPerKey estimated number of values per key @return SetMultimapBuilder configured with the given parameters
391 Creates a set multimap builder with expected values per key. @param expectedValuesPerKey estimated number of values per key @return SetMultimapBuilder instance configured with the given parameters
392 Creates a Multimap builder with expected key count. @param expectedKeys number of expected keys @return MultimapBuilderWithKeys instance configured for the given key count
393 Creates a multimap builder with expected keys. @param expectedKeys estimated number of unique keys @return MultimapBuilderWithKeys instance configured for the given key count
394 Adjusts the count of an element in a multiset. @param self the multiset to modify @param element the element whose count is adjusted @param count the new count for the element @return the old count of the element
395 Updates element count in multiset. @param self the multiset to update @param element the element to update @param oldCount expected current count of the element @param newCount new count for the element @return true if update successful, false otherwise
396 Returns mask value using set operation. @return integer mask value
397 Checks if an object is masked. @param object the object to check @return true if object is masked, false otherwise
398 Calls m2 on the result of m1(). @return integer value returned by nested m2()
399 Calls m2 on the result of m1. @return String result from nested m2 call
400 Removes specified elements from this multiset. @param elementsToRemove collection of elements to remove @return true if any element was removed, false otherwise
401 Checks equality considering nulls. @param object the object to compare with @return true if equal, false otherwise
402 Checks if an object is masked. @param object the object to check @return true if object is masked, false otherwise
403 Returns first non-null element from iterable or default value. @param iterable collection of elements @param defaultValue value to return if all elements are null @return first non-null element or default value
404 Returns a map with collections of values. @return Map containing keys and corresponding collections of values
405 Returns a navigable set of keys. @return NavigableSet containing keys
406 Returns the provided comparator or a default comparator if null. @param comparator the comparator to check @return the non-null comparator
407 Calls m2 on the result of m1(). @return Result of calling m2 on the object returned by m1()
408 Calls method m2 on the result of m1(). @return String result from nested m2 call
409 Writes object data to stream. @param stream ObjectOutputStream to write to @throws IOException if an I/O error occurs
410 Writes object to output stream. @param stream ObjectOutputStream to write to @throws IOException if I/O error occurs
411 Writes object state to output stream. @param stream ObjectOutputStream to write to @throws IOException if an I/O error occurs
412 Reads and processes entries from the input stream into the multimap. @param multimap target collection to store processed entries @param stream source of serialized data @throws IOException if an I/O error occurs while reading @throws ClassNotFoundException if a class in the serialization stream cannot be found
413 Returns an immutable set of C. @return ImmutableSet containing elements of type C
414 Returns an immutable set of keys. @return ImmutableSet containing row keys
415 Returns an immutable set of keys. @return ImmutableSet containing keys from the map
416 Checks if a column key exists. @param columnKey the key to check @return true if the key exists, false otherwise
417 Checks if a row key exists in the index. @param rowKey key to check @return true if row key is present, false otherwise
418 Retrieves a list of values by key. @param key unique identifier for the value list @return ImmutableList of values or an empty list if not found
419 Retrieves a masked map for the given column key. @param columnKey the key to mask data by @return an immutable map with masked values
420 Adds a key-value pair to the builder. @param key unique identifier for the value @param value associated with the key @return Builder instance for method chaining
421 Computes a masked value by applying transformations. @param origin initial value to mask @param distance number of transformation steps @return final masked value or throws exception on overflow
422 Applies a flat map transformation to convert elements of one spliterator to double values. @param fromSpliterator the source spliterator @param function mapping function converting each element to a spliterator of doubles @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return Spliterator.OfDouble representing the transformed elements
423 Applies a flat map operation to convert elements to IntStream. @param fromSpliterator source spliterator @param function mapping function to convert elements to IntStream @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return new Spliterator.OfInt with mapped values
424 Applies a flat map transformation to convert elements of one spliterator to another. @param fromSpliterator the source spliterator @param function mapping function converting each element to a Long spliterator @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return new Spliterator.OfLong with transformed elements
425 Applies a flat map transformation to a spliterator. @param fromSpliterator input spliterator @param function mapping function @param topCharacteristics characteristics of the resulting spliterator @param topSize estimated size of the resulting spliterator @return transformed spliterator
426 Checks if this instance is masked by any element in the collection. @param collection elements to check against @return true if masked, false otherwise
427 Adjusts hash table bits based on mask. @param mask bit mask for calculation
428 Updates metadata with new hash table bits based on mask. @param mask used to calculate hash table bits
429 Resizes internal arrays to new capacity. @param newCapacity the new size for arrays
430 Resizes internal arrays to new capacity. @param newCapacity the new size for arrays
431 Calculates mask for hash table size. @param expectedSize estimated number of elements @return mask value for hash table
432 Compares two integers using a custom comparison logic. @param left first integer to compare @param right second integer to compare @return ComparisonChain object representing the result of the comparison
433 Compares two long values using a custom comparison logic. @param left first value to compare @param right second value to compare @return ComparisonChain object representing the result of the comparison
434 Compares two boolean values using a comparison chain. @param left first boolean value to compare @param right second boolean value to compare @return ComparisonChain object representing the comparison result
435 Compares two boolean values using a custom comparison logic. @param left first boolean value to compare @param right second boolean value to compare @return ComparisonChain object representing the comparison result
436 Checks if lowerBound is not equal to m1. @return true if lowerBound != m1, false otherwise
437 Checks if upperBound is greater than the result of Cut.m1(). @return true if upperBound > Cut.m1(), false otherwise
438 Constructs a new DiscreteDomain with default settings.
439 Writes object data to the output stream. @param stream ObjectOutputStream to write data to @throws IOException if an I/O error occurs
440 Writes object to output stream. @param stream ObjectOutputStream for writing @throws IOException if I/O error occurs
441 Writes object to stream. @param stream ObjectOutputStream to write to @throws IOException if I/O error occurs
442 Masks an element by applying two operations. @param element the object to be masked @throws ClassCastException if element does not meet type requirements
443 Writes object data to output stream. @param stream ObjectOutputStream to write to @throws IOException if I/O error occurs
444 Writes object to stream with serialization. @param stream ObjectOutputStream for writing @throws IOException if IO error occurs
445 Writes object data to a stream. @param stream ObjectOutputStream for writing @throws IOException if I/O error occurs
446 Initializes a new Builder instance.
447 Converts an array to a FluentIterable. @param elements array of nullable objects @return FluentIterable containing the elements
448 Returns an empty FluentIterable. @return Empty FluentIterable instance
449 Checks if mask is not set. @return true if mask is not set, false otherwise
450 Combines two iterables using m1 and m2 methods. @param other second iterable to combine @return combined FluentIterable of elements
451 Combines two iterables into one. @param a first iterable @param b second iterable @return combined iterable of elements from both
452 Combines three iterables into one. @param a first iterable @param b second iterable @param c third iterable @return combined Iterable containing elements from a, b, and c
453 Combines multiple iterables into one. @param a first iterable @param b second iterable @param c third iterable @param d fourth iterable @return combined Iterable of elements from all inputs
454 Returns a stream from m2 applied to the result of m1. @return Stream of elements processed by m2
455 Counts occurrences of an element in an iterator. @param iterator the iterator to traverse @param element the element to count (can be null) @return number of times the element appears
456 Checks if a map contains a specific key. @param map the map to search within @param key the key to look for @return true if the key is present, false otherwise
457 Checks if map contains value using custom iterator logic. @param map input map to search @param value value to find in the map @return true if value is found, false otherwise
458 Masks elements at specified index. @param index position to mask @param elements iterable collection of elements @return true if masking successful, false otherwise
459 Returns a sublist of elements from index 'fromIndex' to 'toIndex'. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List containing the specified range of elements
460 Returns mask value using internal list method. @return integer mask value
461 Masks the input map by calling m1 with current instance and map. @param map the map to be masked
462 Checks if an object matches a mask criteria. @param object the object to check @return true if the object matches the mask, false otherwise
463 Creates a Table from a backing map and a factory. @param backingMap the underlying map to store table data @param factory supplier for creating new maps @return a new StandardTable instance
464 Returns the set of column keys. Initializes if not already created. @return Set of column keys
465 Creates a map with a single entry using the specified column key. @param columnKey key for the column in the map @return a map containing the specified column key and value
466 Reads map entries from input stream and populates the given map. @param map target map to populate @param stream input stream containing map data @throws IOException if an I/O error occurs @throws ClassNotFoundException if class of a serialized object cannot be found
467 Reads distinct elements from stream and updates multiset. @param multiset collection to update @param stream source of data @throws IOException if an I/O error occurs @throws ClassNotFoundException if class not found
468 Creates a hash table from elements with a specified size. @param newTableSize desired size of the hash table @param elements array of objects to be hashed @param n number of elements to process @return Object[] representing the hash table
469 Constructs a new Builder with default initial capacity.
470 Creates a new Builder with specified size. @param size initial capacity of the builder @return Builder instance initialized with given size
471 Creates a Builder instance with the specified expected size. @param expectedSize initial capacity for the builder @return Builder object initialized with expected size
472 Increases array capacity if required. @param minCapacity minimum required capacity
473 Adds multiple elements to the builder. @param elements iterable collection of elements to add @return this builder instance for method chaining
474 Adds elements to the builder. @param elements iterator of elements to add @return this builder instance
475 Adds elements to the collection. @param elements iterator of elements to add @return current builder instance
476 Adds elements to the builder. @param elements iterable of elements to add @return this builder instance
477 Returns a collector that accumulates elements into an immutable list. @return Collector to accumulate elements into an ImmutableList
478 Returns an empty immutable multimap. @return An empty ImmutableMultimap instance
479 Creates a collector to merge ranges into an immutable range set. @return Collector that merges Range objects into ImmutableRangeSet
480 Returns a collector that accumulates elements into an immutable set. @return Collector to create an ImmutableSet
481 Returns a comparator using nested method calls. @return Comparator object from nested methods
482 Adds an element to the builder. @param element the element to add @return the builder instance
483 Creates a function to intern objects using provided interner. @param interner object to manage interned instances @return Function that interns input objects
484 Delegates to Iterators.m2 with transformed input. @param iterable source of elements @return result from Iterators.m2
485 Retrieves an element from an iterable. @param iterable source of elements @return first element or null if empty
486 Retrieves next element from iterator or returns default value if no more elements. @param iterator source of elements @param defaultValue value to return if iterator is empty @return next element or default value
487 Merges two arrays of the same type. @param first first array to merge @param second second array to merge @param type class type of the arrays @return merged array containing elements from both input arrays
488 Returns the first non-null element from an iterable. @param iterable source of elements to check @return first non-null element or throws NoSuchElementException if all are null
489 Returns next element from iterator or default value if iterator is empty. @param iterator source of elements @param defaultValue value to return if iterator has no more elements @return next element or default value
490 Returns an unmodifiable iterator. @param <T> generic type extending nullable object @return UnmodifiableIterator instance
491 Writes objects to the output stream. @param stream ObjectOutputStream to write to
492 Creates and inserts a new node with the given key, value, and sibling. @param key key for the new node @param value value for the new node @param nextSibling sibling node to insert after, or null if appending at tail @return newly created node
493 Masks characters in the input sequence. @param sequence input character sequence to be masked @return list of masked characters
494 Masks the index of an element in a list. @param list the list to search within @param element the element to find @return index of the element or -1 if not found
495 Searches for an element in a list and returns its index. @param list the list to search in @param element the element to find @return index of the element if found, otherwise -1
496 Checks entries in the table for a specific condition. @return true if any entry meets the condition, false otherwise
497 Resizes the hash table. Increases capacity and rehashes entries.
498 Executes masked function logic. Calls m3 if m1 returns true, ensuring m2 is called afterward.
499 Checks if an entry matches a filter condition. @param entry the entry to check @return true if the entry matches, false otherwise
500 Creates a set from a map's keys. @param <E> element type extending nullable objects @return set of keys from an empty map
501 Wraps a given BiMap with synchronization. @param bimap the BiMap to be synchronized @return a synchronized version of the input BiMap
502 Inserts element into heap at given index. @param index position to insert element @param x element to be inserted @return new index of the inserted element after potential swaps
503 Adjusts the heap by swapping elements to maintain order. @param actualLastElement the element to be positioned correctly in the heap @return index of the element after adjustment or original size if no swap occurs
504 Updates cursor to the next valid position. @param c current cursor position
505 Returns an iterator over elements in a multiset. @param multiset the input multiset @return Iterator of elements in the multiset
506 Creates an array of specified type and length. @param reference array used as a template for component type @param length desired length of the new array @return new array instance
507 Masks elements in collection. @param c input collection @return array of masked objects
508 Finds the minimum element in an iterator. @param iterator source of elements to compare @return minimum element found or null if no elements
509 Finds the maximum element in an iterator. @param iterator source of elements to compare @return maximum element found or initial if empty
510 Determines the range of values in an iterable. @param values iterable collection of comparable elements @return Range object representing the minimum and maximum values
511 Delegates to Platform.m1 to get a set of elements. @return Set containing elements from Platform.m1
512 Calls overloaded m1 with lower and upper bounds. @return result of m1(lowerBound, upperBound)
513 Returns result of m1 on lowerBound. @return C type result from m1 method
514 Returns the result of m1() from upperBound. @return Result of m1() call
515 Masks values in a bucket and checks for overflow. @param value the object to mask @param entry map entry containing key-value pair @param valueBucketHead head of the value bucket @throws BucketOverflowException if bucket size exceeds maximum limit
516 Filters entries by marking duplicates. @param entries array of map entries to filter @param n number of entries to process @param newN size of the new entries array @param duplicates map tracking entry duplication status @return filtered array of entries
517 Searches for and returns the entry with a matching key in the bucket. @param key the key to search for @param newValue the value associated with the key (not used directly) @param keyBucketHead the head of the bucket linked list @param throwIfDuplicateKeys flag to determine if an exception should be thrown on duplicate keys @return the matching entry or null if not found @throws BucketOverflowException if the bucket exceeds maximum size
518 Returns a collector that collects elements into an immutable set. @return Collector to collect elements into an ImmutableSet
519 Creates an EnumSet from a collection. @param collection source collection of enum elements @return EnumSet containing all elements from the collection
520 Creates an EnumSet from a collection. @param collection elements to include in the set @param type enum type of the set @return EnumSet containing elements from the collection
521 Finds the last element of an IntStream. @param stream input integer stream @return OptionalInt containing the last element or empty if none exists
522 Converts LongStream to OptionalLong, handling empty streams gracefully. @param stream input LongStream @return OptionalLong containing the last element or empty if stream is empty
523 Processes a DoubleStream to find the last element. @param stream input DoubleStream @return OptionalDouble containing the last element or empty if none exists
524 Partitions array around a pivot and returns the new pivot index. @param left starting index of partition range @param right ending index of partition range @param pivotIndex initial pivot index @return final pivot index after partitioning
525 Writes object state to the output stream. @param stream ObjectOutputStream for writing data @throws IOException if I/O error occurs
526 Protected constructor for CharEscaper class.
527 Protected constructor for UnicodeEscaper class.
528 Masks characters in a string starting from a given index. @param s input string to be masked @param index starting index for masking @return masked string with characters replaced
529 Masks character using provided escaper. @param escaper CharEscaper instance for masking @param c character to mask @return masked string or null if input is invalid
530 Masks character using Unicode escaper. @param escaper UnicodeEscaper instance @param cp character code point @return masked string or null if not applicable
531 Masks endpoints by applying validation checks. @param endpoints pair of endpoints to be masked
532 Updates iterators and checks node validity. @return true if node is valid, false otherwise
533 Determines endpoint pair based on graph condition. @param graph the input graph @param nodeU first node @param nodeV second node @return EndpointPair of nodes U and V
534 Determines endpoint pair based on network condition. @param network the network to check @param nodeU first node @param nodeV second node @return EndpointPair of nodes based on network state
535 Returns a set of EndpointPairs representing graph edges. @return Set of EndpointPair objects
536 Returns a set of EndpointPairs. @return Set of EndpointPairs representing connections
537 Processes endpoint pair. @param endpoints pair of endpoints to process
538 Returns an unmodifiable iterator over nodes U and V. @return UnmodifiableIterator containing nodes U and V
539 Creates a new GraphBuilder with specified node order. @param nodeOrder desired ordering for nodes @return GraphBuilder configured with the given node order
540 Sets the incident edge order for the graph builder. @param incidentEdgeOrder order type for incident edges @return new GraphBuilder instance with specified order
541 Transposes the given graph. @param graph input graph to transpose @return transposed graph or original if already transposed
542 Masks the network if not already transposed. @param network the input network @return a masked or original network
543 Transposes a value graph if not already transposed. @param graph the original value graph @return the transposed graph or the original if already transposed
544 Creates a new network builder with specified node order. @param nodeOrder the desired order for nodes @return a new NetworkBuilder instance with the given node order
545 Creates a new network builder with specified edge order. @param edgeOrder the desired order of edges in the network @return a NetworkBuilder instance configured with the given edge order
546 Creates a new ValueGraphBuilder with specified node order. @param nodeOrder the order of nodes in the graph @return a new ValueGraphBuilder instance
547 Sets the incident edge order for graph construction. @param incidentEdgeOrder order of edges connected to nodes @return ValueGraphBuilder with specified edge order
548 Calls overloaded method with full byte array. @param b byte array to process
549 Recursively processes ByteBuffer based on condition. @param b input ByteBuffer
550 Updates hasher with specified number of bytes. @param bytes number of bytes to process @return current Hasher instance
551 Masks data in ByteBuffer using specified chunk size. @param bb ByteBuffer containing data to be masked
552 Checks if input might be contained. @param input the item to check @return true if input might be contained, false otherwise
553 Creates a Bloom filter collector. @param funnel defines how to extract characteristics from items @param expectedInsertions estimated number of insertions @param fpp false positive probability (must be 0.0 < fpp < 1.0) @return Collector for creating a BloomFilter
554 Returns the result of bits.m1(). @return long value from bits.m1()
555 Masks a long value to fit in a byte. @param value the input long value @return masked byte value, clamped between 0 and MAX_VALUE
556 Calculates the difference between two masked byte values. @param a first byte to mask and compare @param b second byte to mask and compare @return integer result of the subtraction of masked values
557 Converts a byte to a string representation in a specified radix. @param x the byte value to convert @param radix the base for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the byte in the given radix
558 Masks this BitArray with another. @param other the BitArray to mask with
559 Sets a bit at the specified index. @param bitIndex index of the bit to set @return true if the bit was successfully set, false otherwise
560 Masks function based on conditions. @return masked integer value
561 Converts byte array to hexadecimal string. @return Hexadecimal representation of the byte array
562 Masks an 8-byte array into a long value. @param bytes input byte array, must be at least 8 bytes long @return masked long value from the first 8 bytes of the array
563 Applies a masking function to byte array. @param bytes input byte array @param offset starting index in the byte array @param seedA first seed value @param seedB second seed value @param output array to store masked results
564 Masks byte array using given seeds and offsets. @param bytes input byte array @param offset starting index in the byte array @param seedA first seed value @param seedB second seed value @param output array to store masked results
565 Applies mask to value. @param value input value to be masked @return masked value as long
566 Applies mask to divide two numbers. @param dividend number to be divided @param divisor number dividing the dividend @return result of masked division
567 Applies mask and returns result of modulo operation. @param dividend number to be divided @param divisor number by which to divide @return result of masked modulo operation
568 Creates a 32-bit Murmur3 hash function with a specified seed. @param seed the initial seed value for the hash function @return a new HashFunction instance
569 Creates a 32-bit Murmur3 hash function with mask. @param seed initial seed value for the hash function @return Murmur3_32HashFunction instance configured with mask
570 Creates a 128-bit hash function using Murmur3 algorithm. @param seed initial seed value for the hash function @return HashFunction instance initialized with the given seed
571 Generates a masked value within bucket range. @param input initial input for the generator @param buckets number of buckets, must be positive @return masked value within [0, buckets)
572 Applies mask to first four bytes of array. @param bytes input byte array @return masked integer value
573 Copies data from InputStream to OutputStream. @param from source InputStream @param to destination OutputStream @return total bytes copied
574 Reads data from InputStream and returns the total bytes read. @param in input stream to read from @return total number of bytes read @throws IOException if an I/O error occurs
575 Processes input stream using a byte processor. @param input the InputStream to process @param processor the ByteProcessor to apply @return result from the processor's finalization method @throws IOException if an I/O error occurs
576 Converts ByteArrayInputStream to ByteArrayDataInput. @param byteArrayInputStream input stream containing byte data @return ByteArrayDataInput for reading bytes
577 Wraps ByteArrayOutputStream in ByteArrayDataOutput. @param byteArrayOutputStream output stream to wrap @return ByteArrayDataOutput instance
578 Constructs a ReaderInputStream. @param reader source character reader @param encoder charset encoder for conversion @param bufferSize size of internal buffers
579 Handles buffer overflow and resizing. @param overflow indicates if an overflow occurred
580 Copies data from a readable channel to a writable channel. @param from source ReadableByteChannel @param to destination WritableByteChannel @return number of bytes copied @throws IOException if an I/O error occurs
581 Masks function to process and return a string. @return masked string or null if no more lines available @throws IOException if an I/O error occurs
582 Skips n bytes in the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
583 Reads and processes lines from a file. @return Stream of processed strings @throws IOException if an I/O error occurs
584 Reads and counts characters from a Readable source. @param readable the source to read from @return total number of characters read @throws IOException if an I/O error occurs
585 Constructs a LineReader from a Readable object. @param readable the source of characters to be read
586 Masks input stream content. @param inputStream data to be masked; can be null
587 Processes input from Reader with masking enabled. @param reader source of data to process
588 Transfers data to a temporary file if memory exceeds threshold. @param len length of data to be added @throws IOException on I/O error during transfer
589 Executes method m3 and handles cleanup. Initializes memory output and deletes file if necessary.
590 Converts File to CharSource using specified Charset. @param file the input file @param charset character set for encoding @return CharSource representation of the file
591 Calls m2 with flushable and true, logs IOException if thrown. @param flushable the Flushable object to process
592 Checks and throws exception if insecure recursive delete is not allowed. @param path file path to be deleted @param options array of RecursiveDeleteOption @throws InsecureRecursiveDeleteException if insecure option is not set
593 Expands and copies a character buffer. @param buf source character buffer @return expanded CharBuffer with copied contents
594 Masks characters in buffer based on newline and carriage return. @param cbuf character buffer to process @param off starting offset in the buffer @param len length of characters to process @throws IOException if an I/O error occurs
595 Handles masking logic based on conditions. @throws IOException if an I/O error occurs
596 Masks function with two bytes. @return masked integer value @throws IOException if I/O error occurs
597 Reads four bytes and returns an integer. @return integer value from the bytes or throws IOException if reading fails
598 Reads 8 bytes and returns them as a long. @return long value from the byte sequence @throws IOException if reading fails
599 Masks value by delegating to another method. @param v value to be masked
600 Masks and processes a float value. @param v input float value to be masked
601 Writes a long value to the output stream. @param v the long value to write @throws IOException if an I/O error occurs
602 Processes directory to find IOExceptions. @param path directory path to process @return collection of IOExceptions or null if none found
603 Processes directory entries, collecting IOExceptions. @param dir secure directory stream to process @return collection of encountered IOExceptions or null if none
604 Calls m1 and conditionally sets 'in' from m4 if m2 returns true. @throws IOException if I/O operations fail
605 Masks data by processing and updating current state. @throws IOException if an I/O error occurs during processing
606 Converts URL to CharSource using specified charset. @param url source URL @param charset character encoding @return CharSource object
607 Applies rounding mode to division of two long numbers. @param p dividend @param q divisor @param mode rounding mode @return rounded quotient
608 Calculates factorial of n, handling large values. @param n number to calculate factorial for @return factorial of n or infinity if too large
609 Computes b^k using bitwise operations. @param b base integer @param k exponent integer @return result of b raised to the power of k
610 Computes the greatest common divisor (GCD) of two integers using bitwise operations. @param a first integer @param b second integer @return GCD of a and b
611 Returns factorial value if within bounds; otherwise, returns max integer. @param n index for factorial lookup @return factorial of n or Integer.MAX_VALUE if out of range
612 Calculates binomial coefficient C(n, k). @param n total number of items @param k number of items to choose @return binomial coefficient or Integer.MAX_VALUE if out of bounds
613 Computes b^k using exponentiation by squaring. @param b base value @param k exponent value @return result of b raised to the power of k
614 Masks an integer using precomputed factorials. @param n input number @return factorial of n if within bounds, otherwise Long.MAX_VALUE
615 Creates a linear transformation builder with given points. @param x1 the first x-coordinate @param y1 the first y-coordinate @return LinearTransformationBuilder instance
616 Compares two doubles with a tolerance. @param a first double value @param b second double value @param tolerance allowed difference @return true if values are equal within tolerance or both NaN
617 Rounds a value using specified rounding mode. @param x the value to round @param mode the rounding mode to use @return the rounded value
618 Calculates the smallest power of two greater than or equal to x. @param x input integer @return smallest power of two as an int
619 Applies mask to integer. @param x input integer @return masked integer result
620 Applies rounding mode to mask integer. @param x input value @param mode rounding mode to apply @return masked integer based on rounding mode
621 Computes the integer square root of x with specified rounding mode. @param x non-negative integer to find the square root of @param mode rounding mode for the result @return rounded integer square root of x
622 Adds two integers with overflow check. @param a first integer @param b second integer @return sum of a and b
623 Subtracts two integers with overflow check. @param a first integer operand @param b second integer operand @return result of subtraction
624 Multiplies two integers with overflow check. @param a first integer @param b second integer @return product of a and b
625 Checks if base is a primitive root modulo n. @param base potential primitive root @param n modulus for checking @return true if base is a primitive root of n, false otherwise
626 Masks the bits of x to isolate the highest set bit. @param x input number @return long with only the highest set bit of x
627 Masks bits of input number. @param x input number @return masked result as a long
628 Applies mask to long value based on rounding mode. @param x input long value @param mode rounding mode to apply @return masked integer result
629 Computes the greatest common divisor of two long numbers. @param a first number @param b second number @return GCD of a and b
630 Calls m1 with long parameters. @param x input value @param m modulus value @return result of m1 as an int
631 Adds two long numbers with overflow check. @param a first number @param b second number @return sum of a and b
632 Subtracts two long values with overflow check. @param a minuend @param b subtrahend @return difference of a and b
633 Multiplies two long values. @param a first multiplicand @param b second multiplicand @return product of a and b
634 Delegates to xStats for m1 calculation. @return result of xStats.m1()
635 Compares this object with another for equality. @param obj the object to compare @return true if equal, false otherwise
636 Constructs a new PairedStatsAccumulator instance.
637 Evaluates and returns a value based on mean comparison. @param previousMean the current mean value @param value the new value to compare @return the value if conditions met, otherwise NaN
638 Delegates to xStats to get a metric value. @return the metric value as a long
639 Creates and returns a ScaleAndIndex with specific mask values. @return ScaleAndIndex object configured with mask 2 and index 1
640 Returns a scale with mask value 4. @return Scale object configured with mask 4
641 Returns a scale with a factor of 100. @return Scale object with factor 100
642 Masks elements in the array based on specific conditions. @param array the input array of doubles @param from starting index of the range @param to ending index of the range
643 Parses and validates stats from ByteBuffer. @param buffer input data buffer @return Stats object containing parsed values
644 Returns statistical data. @return Stats object containing count, mean, sum of squares of deltas, min, and max
645 Applies mask and returns port value. Calls helper methods m1 and m2. @return integer representing port value
646 Returns the port number based on condition. @param defaultPort fallback port if condition is false @return configured port or default port
647 Constructs a formatted string representation of the host and port. @return formatted string with host and optional port
648 Creates a HostAndPort instance with a default port. @param defaultPort the default port number to use @return HostAndPort object configured with the host and port
649 Masks an IP address. @param ip the InetAddress to mask @return masked IP address as a String
650 Checks if an IPv6 address is within a specific subnet. @param ip the Inet6Address to check @return true if IP matches the criteria, false otherwise
651 Checks if an IPv6 address is masked by any of three conditions. @param ip the IPv6 address to check @return true if ip matches any condition, false otherwise
652 Converts a collection of Booleans to a primitive boolean array. @param collection input collection of Boolean objects @return boolean array with converted values
653 Recursive method to count occurrences of target in boolean array. @param array boolean array to search @param target boolean value to count @return number of times target appears in array
654 Helper method to find target in boolean array. @param array boolean array to search @param target boolean value to find @return index of target or -1 if not found
655 Converts a collection of numbers to a byte array. @param collection input collection of Number objects @return byte array representation of the collection
656 Searches for target byte in byte array. @param array byte array to search @param target byte value to find @return index of target or -1 if not found
657 Searches for target byte in byte array. @param array byte array to search @param target byte value to find @return index of first occurrence or -1 if not found
658 Converts collection of Character to char array. @param collection input collection of Characters @return char array representation of the collection
659 Searches for target character in array. @param array character array to search @param target character to find @return index of target or -1 if not found
660 Overloaded method to search for target character in array. @param array the character array to search @param target the character to find @return index of target if found, otherwise -1
661 Applies mask to first two bytes of array. @param bytes input byte array @return masked character result
662 Computes a hash code for an array segment. @return computed hash code as an integer
663 Converts collection of numbers to a double array. @param collection input collection of numbers @return double array representation of the collection
664 Calls helper method to find target in array. @param array input array of doubles @param target value to search for @return index of target or -1 if not found
665 Searches for target in array using recursive binary search. @param array sorted array of doubles @param target value to find @return index of target or -1 if not found
666 Converts collection of numbers to a float array. @param collection input collection of numbers @return float array representation of the input collection
667 Searches for target in array using binary search. @param array sorted float array to search @param target value to find @return index of target or -1 if not found
668 Searches for target in array using recursive binary search. @param array sorted array of floats @param target value to find @return index of target or -1 if not found
669 Creates a new Builder with specified capacity. @param initialCapacity starting capacity for the builder @return a new Builder instance
670 Creates a new Builder instance with mask value 10. @return Builder object configured with mask 10
671 Searches for target in array slice, returns index offset. @param target value to find @return index relative to start or -1 if not found
672 Searches for target in array using custom mask function. @param target value to search for @return index of target relative to start, or -1 if not found
673 Constructs a string representation of an array slice. @return formatted string or "[]" if condition in m1() is true
674 Checks if target is masked by m1. @param target integer to check @return true if target is masked, false otherwise
675 Creates a new Builder with specified initial capacity. @param initialCapacity starting size of the builder @return Builder instance initialized with given capacity
676 Creates a new Builder instance with mask value 10. @return Builder object initialized with mask 10
677 Computes a hash code for an array segment. @return computed hash code
678 Constructs a string representation of an array slice. @return formatted string or "[]" if condition in m1() is true
679 Checks if the mask condition is satisfied for the target value. @param target the value to be checked against the mask @return true if the mask condition is met, false otherwise
680 Creates a new Builder with specified initial capacity. @param initialCapacity starting size for the builder @return Builder instance initialized with the given capacity
681 Creates a new Builder with mask value 10. @return Builder instance initialized with mask 10
682 Computes a hash value using elements from array. @return computed hash value
683 Constructs a string representation of an array segment. @return formatted string of array elements or "[]" if condition met
684 Converts a collection of numbers to an int array. @param collection the input collection of numbers @return int array representation of the collection
685 Searches for target in array using recursive binary search. @param array sorted integer array to search @param target value to find @return index of target or -1 if not found
686 Searches for target in array using recursive binary search. @param array sorted integer array to search @param target value to find @return index of target if found, -1 otherwise
687 Converts a collection of numbers to a long array. @param collection the input collection of numbers @return an array of long values
688 Searches for target in array using recursion. @param array to search within @param target value to find @return index of target or -1 if not found
689 Calls overloaded method to find target in array. @param array the array to search @param target the value to find @return index of target or -1 if not found
690 Converts a string to a long using a specified radix. @param string the string to convert @param radix the base of the number system @return the converted long value or null if conversion fails
691 Converts a collection of numbers to a short array. @param collection input collection of Number objects @return short array containing converted values
692 Searches for target in array using binary search. @param array sorted array of shorts @param target value to find @return index of target or -1 if not found
693 Searches for target in array using binary search. @param array sorted short array to search @param target value to find @return index of target or -1 if not found
694 Masks first two bytes of input array. @param bytes input byte array @return masked short value
695 Returns a comparator for unsigned byte arrays. Uses predefined or dynamically created comparator.
696 Creates an unsigned integer with specified bit mask. @param bits bitmask value @return UnsignedInteger object representing the bitmask
697 Converts an unsigned integer to a string representation. @param radix the base to use in the conversion @return the string representation of the unsigned integer
698 Calls overloaded method with default base value. @param x input integer @return result of m1(x, 10)
699 Applies transformation to two integers and returns the result. @param a first integer value @param b second integer value @return transformed result of applying m1 to both integers and then m2
700 Converts long value to UnsignedLong. @param bits long integer value @return UnsignedLong representation of the input
701 Applies transformation and computes result. @param a first input value @param b second input value @return transformed result as integer
702 Converts a string to an unsigned long using the specified radix. @param string the string to convert @param radix the base of the number system @return the unsigned long value
703 Handles method invocations for a proxy object. @param proxy the proxy instance @param method the method being invoked @param args arguments passed to the method @return result of the method invocation or default handling @throws Throwable if an error occurs during invocation
704 Invokes method m1 on a class specified by className. @param className name of the class to invoke the method on @return result of invoking m1 as a String
705 Recursively calls m2 on the result of clazz.m1(). @param clazz Class object to process @return Result of recursive m2 call
706 Retrieves a byte source from resources. @return ByteSource containing resource data
707 Checks if the current instance is modifiable. @return true if modifiable, false otherwise
708 Checks a condition using Modifier's m2 method with result from m1. @return true if condition met, false otherwise
709 Checks if the current instance is of a specific type. @return true if condition met, false otherwise
710 Calls m1 and passes its result to Modifier.m2. @return Result of Modifier.m2
711 Checks if a condition is met using nested method calls. @return true if condition is satisfied, false otherwise
712 Checks condition using Modifier's m2 method. @return result of Modifier.m2(m1())
713 Checks if a condition is met based on m1's result. @return true if condition is met, false otherwise
714 Checks modifier condition using m1's result. @return true if condition met, false otherwise
715 Checks a condition using Modifier's m2 method. @return result of Modifier.m2 applied to m1()
716 Checks a condition using nested method calls. @return boolean result of the condition check
717 Checks if type is an instance of TypeVariable. @param type the type to check @return true if type is a TypeVariable, false otherwise
718 Creates a TypeToken for the given class. @param type the Class object representing the type @return a TypeToken instance for the specified type
719 Creates a TypeToken for the given type. @param type the class type to create a token for @return a SimpleTypeToken representing the provided type
720 Handles task completion or error. @param obj result of task execution @return casted object if successful, null if NULL @throws ExecutionException for failure cases
721 Adds a listener with an executor to the list. @param listener task to be executed @param executor to run the listener
722 Masks future execution based on condition. @param related associated future task, nullable
723 Executes a callable task asynchronously. @param task the task to execute @return a ListenableFuture representing the pending result of the task
724 Schedules a task with a mask function. @param service the abstract service to use @param executor the scheduled executor service @param runnable the task to run @return Cancellable object for task management
725 Schedules a task with a mask function. @param service abstract service to use @param executor scheduler for executing tasks @param runnable task to run @return Cancellable object to manage the scheduled task
726 Executes a collection of tasks with a specified timeout. @param tasks collection of Callable tasks to execute @param timeout maximum time to wait for task completion @return list of Future objects representing task results @throws InterruptedException if interrupted while waiting
727 Executes a collection of tasks with a specified timeout. @param tasks collection of callable tasks to execute @param timeout maximum time to wait for task completion @return result of the first completed task or null if none complete @throws InterruptedException if execution is interrupted @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within the timeout
728 Checks condition with specified timeout. @param timeout maximum time to wait @return true if condition met, false otherwise @throws InterruptedException if interrupted while waiting
729 Schedules a task with a specified delay. @param callable the task to execute @param delay duration until execution @return ListenableScheduledFuture for the scheduled task
730 Schedules a task with an initial delay and periodic execution. @param command the task to execute @param initialDelay time to wait before first execution @param period time between subsequent executions @return ListenableScheduledFuture for scheduling
731 Schedules a task to run with an initial delay and fixed rate. @param command the task to execute @param initialDelay time before first execution @param delay time between subsequent executions @return ListenableScheduledFuture for task management
732 Calls m2 with converted timeout. @param timeout duration to wait @throws TimeoutException if operation times out
733 Calls another method with timeout in nanoseconds. @param timeout duration before timing out @throws TimeoutException if operation times out
734 Converts duration to nanoseconds and calls overloaded method. @param target object to be processed @param interfaceType class of the interface @param timeout duration for operation @return result of type T
735 Executes a callable with a specified timeout. @param callable the task to execute @param timeout duration for execution before timing out @return result of the callable or null if timed out @throws TimeoutException if execution exceeds timeout @throws InterruptedException if thread is interrupted @throws ExecutionException if callable throws an exception
736 Executes a callable with a specified timeout. @param callable the task to execute @param timeout duration before timing out @return result of the callable or null if timed out @throws TimeoutException if execution times out @throws ExecutionException if an exception occurs during execution
737 Executes a task with a specified timeout. @param runnable task to execute @param timeout duration for the task execution @throws TimeoutException if task exceeds timeout @throws InterruptedException if thread is interrupted
738 Executes a Runnable with a specified timeout. @param runnable task to execute @param timeout maximum time to wait for execution @throws TimeoutException if execution exceeds the timeout
739 Creates and configures a ScheduledExecutorService. @return ScheduledExecutorService instance
740 Handles throwable by logging and possibly rethrowing. @param throwable the error or exception to handle
741 Calls m1 and passes its result to Double's m2 method. @return Result of Double.m2 on m1's output
742 Returns an integer mask value. @return Integer representation of the mask
743 Returns the result of calling m1() cast to long. @return long value from m1()
744 Returns the result of m1 as a float. @return float value from m1 method
745 Returns the result of calling m1(). @return The value returned by m1()
746 Writes data to ObjectOutputStream using specified methods. @param s ObjectOutputStream to write to @throws IOException if an I/O error occurs
747 Deserializes and processes data from input stream. @param s ObjectInputStream to read from
748 Applies an accumulator function to a value. @param x input value @param accumulatorFunction binary operator to apply @return result of the accumulator function
749 Applies an accumulator function to a masked value. @param x input value @param accumulatorFunction binary operator for accumulation @return result of applying the accumulator function
750 Generates a string representation of an array. @return String formatted as an array or "[]" if empty
751 Writes masked data to the output stream. @param s ObjectOutputStream to write to @throws IOException if an I/O error occurs
752 Applies a binary operation to a masked value. @param i index for masking @param x input value for operation @param accumulatorFunction binary operator to apply @return result of the binary operation
753 Applies a binary operation to an accumulated value. @param i index or identifier @param x input value @param accumulatorFunction function to apply @return result of the binary operation
754 Masks a key using function m1 with default mask value. @param key the key to be masked @return true if masking is successful, false otherwise
755 Returns a map of keys to long values. Initializes map if not already created. @return Map containing key-value pairs
756 Updates a key's value if it matches the expected old value. @param key key to update @param expectedOldValue expected current value of the key @param newValue new value to set @return true if update successful, false otherwise
757 Finishes the operation and returns a future. @return FluentFuture object representing the asynchronous operation
758 Masks the function with a consumer and executor. @param consumer handles value and closer @param executor executes the task
759 Masks a runnable with an executor. @param runnable task to be executed @param executor to execute the runnable
760 Executes pending runnables in reverse order. Ensures each runnable is executed only once.
761 Handles exceptions with a fallback function. @param <X> type of the exception @param exceptionType class of the exception to handle @param fallback function to apply if an exception occurs @param executor to execute the fallback @return FluentFuture with result or fallback value
762 Applies a function asynchronously to the result of this future. @param <T> the type of the result returned by the function @param function the function to apply @param executor the executor to use for asynchronous execution @return a FluentFuture representing the result of applying the function
763 Returns a ListenableFuture with the given value or NULL if value is null. @param value the value to wrap in a future @return ListenableFuture containing the value or NULL
764 Handles throwable by logging and returning a failed future. @param throwable the exception to handle @return ListenableFuture that is immediately failed with the given throwable
765 Returns a cancelled ListenableFuture. @return ListenableFuture that is already cancelled
766 Retrieves a validator for checked types. @return GetCheckedTypeValidator instance or default if an exception occurs
767 Iterates over listeners and calls their methods.
768 Constructs a new Monitor with default settings. @param active initial active state (default is false)
769 Converts Duration to nanoseconds and calls another method. @param time duration to convert @return result of the nested method call @throws InterruptedException if thread is interrupted during execution
770 Executes m2 with guard and time converted to nanoseconds. @param guard the Guard object @param time the Duration object representing time @return result of m2 execution @throws InterruptedException if thread is interrupted
771 Checks if permission is granted. @param guard security guard object @return true if permission is granted, false otherwise
772 Calls guard's m2 method with exception handling. @param guard the Guard object to operate on @return result of guard.m2() @throws Throwable any exception thrown by guard.m2() after invoking m1()
773 Checks if a task completes within a given timeout. @param service ExecutorService to run the task @param timeout maximum time to wait for task completion @return true if task completes within timeout, false otherwise
774 Converts Duration to nanoseconds and calls another method. @param sleepFor duration to convert
775 Sets the rate of permits per second. @param permitsPerSecond the new rate; must be positive
776 Returns a value from m1 under synchronization of m2. @return double value from m1
777 Creates and returns a new SettableFuture. @param <V> type of value to be set in the future @return an empty SettableFuture instance
778 Waits for a future to complete within a specified timeout. @param future the Future to wait on @param timeout duration to wait before timing out @return result of the future or throws exception if timed out
779 Creates a striped read-write lock. @param stripes number of stripes @return Striped instance using WeakSafeReadWriteLock
780 Creates a striped lock with padded locks. @param stripes number of stripes @return Striped<Lock> instance
781 Creates a striped semaphore with padding. @param stripes number of stripes (segments) @param permits number of permits per semaphore @return Striped<Semaphore> instance
782 Creates a striped ReadWriteLock. @param stripes number of lock stripes @return Striped instance with specified number of locks
783 Returns a thread factory for creating threads. @return ThreadFactory instance
784 Creates a TrustedListenableFutureTask. @param runnable task to execute @param result initial result value @return TrustedListenableFutureTask instance
785 Awaits countdown latch with specified duration. @param latch to wait on @param timeout duration to wait @return true if latch counted down, false otherwise
786 Checks condition with specified timeout. @param condition condition to check @param timeout duration for the check @return true if condition met within timeout, false otherwise
787 Acquires a permit from semaphore with retries. @param semaphore the semaphore to acquire @param timeout maximum time to wait for a permit @param unit time unit of the timeout @return true if acquired, false otherwise
788 Acquires permits from semaphore with a specified timeout. @param semaphore the semaphore to acquire permits from @param permits number of permits to acquire @param timeout duration to wait for permits @return true if permits acquired, false otherwise
789 Attempts to acquire a lock with a specified timeout. @param lock the Lock object to acquire @param timeout duration to wait for the lock @return true if lock is acquired, false otherwise
790 Checks if executor can complete tasks within given timeout. @param executor service to check @param timeout maximum allowed duration @return true if tasks can complete, false otherwise
791 Returns PublicSuffixType based on character code. @param code character representing the suffix type @return matching PublicSuffixType or throws exception if not found
792 Wraps a value in an Optional. @param reference the value to wrap @return Optional containing the value or empty if null
793 Creates and returns a new Stopwatch instance. @param ticker provides time source for the stopwatch @return Stopwatch object initialized with the given Ticker
794 Counts elements matching a predicate in an iterable. @param iterable the iterable to process @param predicate the condition to apply @return count of elements matching the predicate
795 Checks if any element in the iterator satisfies the predicate. @param iterator source of elements @param predicate condition to test each element @return true if at least one element matches the predicate, false otherwise
796 Creates a SortedSetMultimap builder with natural ordering. @return SortedSetMultimapBuilder configured with natural element order
797 Collects elements into an ImmutableTable using specified functions for rows, columns, and values. @param rowFunction extracts the row key from each element @param columnFunction extracts the column key from each element @param valueFunction extracts the value from each element @param mergeFunction merges values if they conflict @return Collector that groups elements into an ImmutableTable
798 Creates a predicate to check equivalence. @param target the object to compare against @return Predicate checking if input is equivalent to target
799 Creates a function that retrieves values from a map with a default. @param map the source map @param defaultValue value to return if key is not found @return Function that maps keys to values or default
800 Composes two functions into one. @param g second function to apply @param f first function to apply @return composed function A -> C
801 Creates a function that masks a map without default values. @param map the input map to be masked @return a Function that retrieves values from the map
802 Creates a Splitter using a regex pattern. @param separatorPattern regex pattern for splitting strings @return Splitter instance configured with the given pattern
803 Creates a Joiner instance with a specified separator. @param separator string used to separate elements @return Joiner object configured with the given separator
804 Creates a Joiner instance with the specified separator. @param separator character to separate elements @return Joiner object configured with the separator
805 Creates a MapJoiner with specified null text. @param nullText text to use for null values @return MapJoiner instance configured with null text and key-value separator
806 Creates a splitter using a regex pattern. @param separatorPattern regex pattern for splitting @return Splitter instance configured with the pattern
807 Creates a predicate to check if a CharSequence contains a pattern. @param pattern the regex pattern to match @return Predicate that returns true if input contains the pattern
808 Returns a negated version of the given predicate. @param predicate original predicate to negate @return Predicate that returns true for inputs where the original predicate is false
809 Combines multiple predicates into a single AND predicate. @param components iterable of predicates to combine @return Predicate that returns true if all component predicates are true
810 Combines multiple predicates into a single OR predicate. @param components iterable of predicates to be combined @return Predicate that evaluates to true if any component predicate is true
811 Parses a CharSequence into a Map with key-value pairs. @param sequence input string to parse @return Map containing parsed key-value pairs or empty map if invalid
812 Masks characters in input sequence. @param sequence input character sequence to be masked @return stream of masked strings
813 Wraps a supplier to ensure memoization. @param <T> the type of the supplied value @param delegate the original supplier @return a memoizing supplier, preserving serialization if applicable
814 Creates a supplier that applies a function to the result of another supplier. @param <F> input type for the function @param <T> output type of the function and supplier @param function the function to apply @param supplier the supplier providing the input for the function @return a Supplier that returns the function's result applied to the supplier's value
815 Wraps a supplier to make it thread-safe. @param delegate original supplier function @return thread-safe Supplier
816 Masks a throwable by type. @param throwable the original throwable @param declaredType the expected exception class @throws X if the throwable is an instance of declaredType
817 Masks a throwable by passing it to another method. @param throwable the throwable to mask, can be null
818 Throws a RuntimeException wrapping the given Throwable. @param throwable the original exception to wrap
819 Masks stack trace elements of a given Throwable. @param throwable the exception to process @return a list of StackTraceElement objects
820 Creates a new entry in the specified segment. @param key the key for the new entry @param hash the hash of the key @param next reference to the next entry @return the newly created ReferenceEntry object
821 Creates a RemovalNotification instance. @param key the key being removed @param value the value associated with the key @param cause reason for removal @return RemovalNotification object encapsulating removal details
822 Creates a collector to group elements into a multiset. @param elementFunction extracts the element from each input @param countFunction determines the count for each element @param multisetSupplier supplies the type of multiset to use @return Collector that groups elements into a multiset
823 Collects elements into a Multimap using key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @param multimapSupplier provides an instance of the Multimap @return Collector that groups elements into a Multimap
824 Creates a collector that groups elements into a Multimap. @param keyFunction extracts the key from each element @param valueFunction extracts and flattens values from each element @param multimapSupplier provides the Multimap instance @return Collector to group elements into a Multimap
825 Transforms elements of a collection using a given function. @param fromCollection source collection to transform @param function transformation function to apply to each element @return transformed collection of type T
826 Checks if an element exists in an iterable. @param iterable the iterable to search within @param element the element to find @return true if element is found, false otherwise
827 Creates a contiguous set up to an element. @param toElement upper bound element @param inclusive true if the upper bound is inclusive @return ContiguousSet from start to toElement
828 Creates a contiguous set with a mask function. @param fromElement starting element of the set @param inclusive true if the start element is included @return ContiguousSet with applied mask
829 Checks condition on element. @param e element to check @return true if condition is met, false otherwise
830 Sets key comparator. @param keyComparator comparator for keys @return current builder instance
831 Sets the key comparator. @param keyComparator comparator to sort keys @return this builder instance
832 Sets comparator for values. @param valueComparator comparator for value comparison @return this builder instance
833 Adds an element to the builder. @param element the element to add @return the builder instance
834 Adds an element with specified occurrences to the builder. @param element the element to add @param occurrences number of times to add the element @return the Builder instance for method chaining
835 Adds an element with a specified count to the builder. @param element the element to add @param count the number of times to add the element @return the current Builder instance
836 Creates an ImmutableSortedMultiset collector. @param comparator for sorting elements @return Collector to create ImmutableSortedMultiset
837 Returns elements less than toElement. @param toElement upper bound (exclusive) @return ImmutableSortedSet of elements
838 Returns elements greater than or equal to the specified element. @param fromElement the lower bound (inclusive) @return an immutable sorted set of elements
839 Returns a FluentIterable of elements. @return FluentIterable containing processed elements
840 Filters elements using a predicate. @param predicate condition to filter elements @return FluentIterable of filtered elements
841 Filters iterable by type. @param unfiltered source iterable @param desiredType target class type @return filtered iterable of desired type
842 Applies a transformation to elements and returns a FluentIterable. @param function the transformation function @return FluentIterable of transformed elements
843 Wraps an iterator to provide a peeking functionality. @param <T> the type of elements in the iterator @param iterator the original iterator @return a PeekingIterator with peek capability
844 Removes elements from an iterable. @param removeFrom iterable to remove elements from @param elementsToRemove collection of elements to remove @return true if any element was removed, false otherwise
845 Removes elements from iterable matching predicate. @param removeFrom iterable to remove elements from @param predicate condition to match elements for removal @return true if any elements were removed, false otherwise
846 Removes elements from the specified iterable that are not in the retain collection. @param removeFrom iterable to remove elements from @param elementsToRetain collection of elements to retain @return true if any element was removed, false otherwise
847 Checks if this set contains all elements of the given collection. @param collection elements to check @return true if all elements are contained, false otherwise
848 Adds all elements from the iterable to the collection. @param addTo collection to add elements to @param elementsToAdd iterable of elements to add @return true if at least one element was added, false otherwise
849 Converts iterator to ArrayList. @param elements iterator of elements @return ArrayList containing all elements from iterator
850 Converts iterator to a HashSet. @param elements iterator of elements @return HashSet containing all elements from the iterator
851 Filters iterator to match desired type. @param unfiltered input iterator of objects @param desiredType class type to filter by @return UnmodifiableIterator of filtered objects
852 Checks if any element in the iterable matches the given predicate. @param iterable collection of elements to check @param predicate condition to apply to each element @return true if at least one element matches, false otherwise
853 Filters elements in iterable based on predicate. @param iterable collection of elements to filter @param predicate condition to test each element @return first element matching predicate or null if none found
854 Masks the value associated with a given key. @param key the key whose value needs to be masked
855 Provides a list iterator starting from the specified index. @param list the source list to iterate over @param index the starting index for iteration @return ListIterator starting at the given index
856 Creates a list from a single element and an array. @param first the first element of the list @param rest additional elements as an array @return a list containing the first element and all elements from the array
857 Transforms elements of a list using a function. @param fromList source list to transform @param function transformation function @return List with transformed elements
858 Creates a list from the given elements. @param first first element of the list @param second second element of the list @param rest array of additional elements @return List containing all provided elements
859 Creates a view of a map from a set using a mapping function. @param set the source set of keys @param function maps each key to a value @return Map view with keys from set and values computed by function
860 Creates a navigable map from a set using a function to map keys to values. @param set the source navigable set of keys @param function the function to apply to each key to get the value @return a navigable map with keys from the set and values computed by the function
861 Applies a transformer to map entries. @param fromMap original map with keys of type K and values of type V1 @param transformer function to transform values from V1 to V2 @return new map with transformed values of type V2
862 Checks if collection contains entry with matching key. @param c collection of entries @param o object to check @return true if collection contains an entry with the same key as o, false otherwise
863 Checks if collection contains an entry matching a given object. @param c collection of entries to check @param o object to match against entries @return true if matching entry is found, false otherwise
864 Returns a mask value for an element. @param element the object to be masked @return integer mask value or 0 if not present
865 Decreases the count of an element by a specified number of occurrences. @param element the element to decrement @param occurrences the number of times to decrement @return true if successful, false if not enough occurrences or element not found
866 Applies a mask to an element with a specified count. @param element the element to apply the mask to @param count the count value to use in masking @return the old value before masking, or 0 if conditions are met
867 Updates element count in map. @param element the element to update @param expectedOldCount expected current count of the element @param newCount new count for the element @return true if update successful, false otherwise
868 Updates map by removing entries associated with the given key. @param key the key whose entries should be removed
869 Creates a Multimap builder with natural ordering. @return MultimapBuilderWithKeys configured with natural ordering
870 Converts a Map to a SetMultimap. @param map input map with keys and values @return SetMultimap representation of the input map
871 Transforms entries in a multimap. @param fromMap original multimap to transform @param transformer function to apply to each entry @return new multimap with transformed values
872 Adds elements to the builder. @param elements iterable of elements to add @return this Builder instance
873 Checks and adds elements from one multiset to another. @param self the target multiset to add elements to @param elements the source multiset containing elements to add @return true if successful, false if condition m1 is met in elements
874 Modifies the first multiset to retain only elements found in the second. @param multisetToModify the multiset to be modified @param multisetToRetain the multiset whose elements are retained @return true if modifications were made, false otherwise
875 Removes specified elements from a multiset. @param multisetToModify the multiset to be modified @param occurrencesToRemove iterable containing elements to remove @return true if any element was removed, false otherwise
876 Retains only the specified elements in this set. @param elementsToRetain collection of elements to retain @return true if this set was modified as a result of the call
877 Retrieves elements from a queue into a buffer with a specified timeout. @param q the source blocking queue @param buffer the destination collection to store retrieved elements @param numElements number of elements to retrieve @param timeout maximum time to wait for elements @return number of elements successfully retrieved @throws InterruptedException if interrupted while waiting
878 Transfers elements from queue to buffer with a timeout. @param q source BlockingQueue @param buffer destination collection @param numElements number of elements to transfer @param timeout maximum wait time @return number of elements transferred
879 Checks if collection contains the specified element. @param input element to check for presence in the collection @return true if the element is present, false otherwise
880 Checks if all elements in the iterable satisfy a condition. @param values iterable of elements to check @return true if all elements meet the condition, false otherwise
881 Consumes elements from two streams in parallel or sequentially. @param streamA first input stream @param streamB second input stream @param consumer function to consume pairs of elements
882 Collects elements into a table. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @param mergeFunction merges values for duplicate keys @param tableSupplier provides table instance @return Table with collected data
883 Applies a transformation to table values. @param fromTable original table with values of type V1 @param function transformation function converting V1 to V2 @return new table with transformed values of type V2
884 Returns the original table if it's a TransposeTable; otherwise, creates a new TransposeTable. @param table input table to process @return either the original or transposed table
885 Creates an ArrayBasedEscaperMap with specified character replacements. @param replacements map of characters to their replacement strings @return ArrayBasedEscaperMap initialized with given replacements
886 Masks characters in input array using replacement string. @param cs character array to be masked @param r replacement string for masking @return CharEscaperBuilder instance for method chaining
887 Finds the first character not matching a condition in a sequence. @param csq character sequence to search @param start starting index of the search @param end ending index of the search @return index of the first non-matching character or end if all match
888 Creates an exception context for a subscriber. @param event the event object associated with the exception @return SubscriberExceptionContext instance
889 Creates a funnel for iterable elements. @param elementFunnel funnel for individual elements @return SequentialFunnel for processing iterables
890 Converts a PrimitiveSink to an OutputStream. @param sink the PrimitiveSink to be wrapped @return OutputStream wrapping the given PrimitiveSink
891 Creates a funnel for CharSequence using specified Charset. @param charset character encoding to be used @return Funnel instance for processing CharSequences
892 Wraps an Appendable as a Writer. @param target the Appendable to wrap @return a Writer instance
893 Masks characters and returns the result as a byte array. @param chars input character sequence to be masked @return masked byte array representation of the input @throws DecodingException if decoding fails
894 Creates a Closer instance with suppressing suppressor. @return Closer object configured to suppress exceptions
895 Constructs a filename filter using a regex pattern. @param patternStr regular expression string for filtering filenames
896 Computes the floor or ceiling of the base-2 logarithm of a BigInteger. @param x the input BigInteger @param mode rounding mode to apply @return computed logarithm value based on rounding mode
897 Calls overloaded m1 with default radix. @param string input string to process @return processed byte value
898 Calls m1 with default count. @param s input string @return result of m1 with count set to 10
899 Converts a type to a TypeVariableKey if it's a TypeVariable. @param t the type to convert @return TypeVariableKey or null if not a TypeVariable
900 Handles future completion and error scenarios. @param future the ListenableFuture to process @return result or appropriate exception wrapper
901 Constructs a schedule with a specified delay. @param delay initial delay before execution
902 Creates an AtomicLongMap with a ConcurrentHashMap. @return AtomicLongMap instance initialized with ConcurrentHashMap
903 Applies a binary operation to accumulate values. @param key the key for the accumulation @param x the value to accumulate @param accumulatorFunction the function to apply for accumulation @return the result of the accumulation
904 Applies an accumulation function to a value associated with a key. @param key the key to associate with the value @param x the value to accumulate @param accumulatorFunction the binary operator for accumulation @return the accumulated result
905 Applies a mask operation on key with a new value. @param key unique identifier @param newValue value to apply as mask @return result of the mask operation
906 Masks a closeable resource with an executor. @param closeable the resource to mask @param closingExecutor executor for closing operations @return the original closeable resource
907 Creates a CycleDetectingLockFactory with the given policy. @param policy configuration policy for lock detection @return a new CycleDetectingLockFactory instance
908 Wraps an executor with SequentialExecutor. @param delegate original executor to be wrapped @return SequentialExecutor instance
909 Creates a SimpleTimeLimiter with the given ExecutorService. @param executor the ExecutorService to use @return a SimpleTimeLimiter instance
910 Joins a thread with a specified timeout. @param toJoin the thread to join @param timeout the maximum time to wait for joining
911 Creates an unordered element order. @param <S> generic type parameter @return ElementOrder instance with unordered type and null comparator
912 Creates a stable element order with no comparator. @return ElementOrder instance with stable type and null comparator
913 Creates an ElementOrder with insertion type. @param <S> generic type parameter @return ElementOrder instance with insertion order and null comparator
914 Creates an ordered element with natural sorting. @return ElementOrder object configured for sorted elements
915 Creates an ElementOrder with sorted type using provided comparator. @param comparator comparator to define element order @return ElementOrder object configured for sorted elements
916 Returns a CountDownLatch from the closeables instance. @return CountDownLatch object
917 Converts CharSequence to String using custom logic. @param chars input character sequence @return resulting String after conversion
918 Converts CharSequence to String using custom methods. @param chars input character sequence @return resulting string after conversion
919 Generates a byte array for mask data. @return byte array containing stats and sum of products of deltas
920 Masks data using ByteBuffer. @return masked data as byte array
921 Initializes metadata with a given size. @param expectedSize the expected number of elements
922 Initializes metadata with a specified size. @param expectedSize the expected number of elements (must be non-negative)
923 Combines this matcher with another using logical AND. @param other the other CharMatcher to combine with @return a new CharMatcher that matches only if both matchers do
924 Creates a CharMatcher from a Predicate. @param predicate character matching condition @return CharMatcher instance
925 Combines this matcher with another using logical OR. @param other the other CharMatcher to combine with @return a new CharMatcher that matches if either this or the other matcher does
926 Creates a CharMatcher for characters within a specified range. @param startInclusive starting character of the range (inclusive) @param endInclusive ending character of the range (inclusive) @return CharMatcher that matches characters in the given range
927 Masks cache stats with another instance. @param other CacheStats to mask with @return New CacheStats instance with masked values
928 Merges cache statistics with another CacheStats instance. @param other CacheStats to merge with @return New CacheStats object with merged statistics
929 Constructs an AbstractListMultimap from a given map. @param map backing map with keys and collections of values
930 Constructs an AbstractSetMultimap from a given map. @param map backing map with keys and collections of values
931 Creates a contiguous set with specified bounds. @param fromElement starting element of the range @param fromInclusive true if the start is inclusive @param toElement ending element of the range @param toInclusive true if the end is inclusive @return ContiguousSet containing elements within the range
932 Creates an EnumMultiset for the specified enum type. @param type enum class type @return EnumMultiset instance for the given enum type
933 Returns a subset of elements from 'fromElement' to 'toElement'. @param fromElement start element (inclusive) @param toElement end element (exclusive) @return ImmutableSortedSet containing elements in range
934 Wraps an iterator with a fixed-size unmodifiable view. @param iterator original iterator to wrap @param size maximum number of elements per list in the result @return UnmodifiableIterator of lists containing up to 'size' elements each
935 Creates an unmodifiable iterator that groups elements into fixed-size lists. @param iterator source iterator of elements @param size maximum number of elements per list @return UnmodifiableIterator of Lists containing up to 'size' elements each
936 Creates a builder with specified size and natural ordering. @param expectedSize initial capacity of the builder @return Builder instance configured with natural ordering
937 Creates a builder with a specified maximum size. @param maximumSize the maximum number of elements allowed @return Builder instance configured with natural ordering
938 Initializes a streaming hasher with specified chunk size. @param chunkSize size of each data chunk to process
939 Calculates a statistical value based on delta squares and count. @return calculated double value or NaN if conditions are met
940 Calculates variance of a dataset. @return Variance value or NaN if calculation fails
941 Calculates the variance of a dataset. @return Variance value or NaN if invalid data
942 Calculates variance of a dataset. @return Variance value or NaN if calculation fails
943 Creates a CharMatcher based on the input sequence. @param sequence input character sequence @return CharMatcher object based on sequence type
944 Masks characters in a sequence except for leading and trailing non-alphanumeric characters. @param sequence the input character sequence to be masked @param replacement the character used to mask the sequence @return a new string with masked characters
945 Creates an equivalence based on a function. @param function mapping function to apply @return Equivalence instance using the provided function
946 Returns an equivalence relation for iterables based on pairwise element comparison. @return Equivalence object for Iterable of type S
947 Compares two iterables based on custom criteria. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if both iterables meet the criteria, false otherwise
948 Compares two lists for equality. @param thisList the first list to compare @param other the second object to compare with the first list @return true if both lists are equal, false otherwise
949 Creates a concurrent hash multiset with default configuration. @return ConcurrentHashMultiset instance
950 Creates a ConcurrentHashMultiset from a count map. @param countMap map with elements as keys and their counts as values @return ConcurrentHashMultiset instance initialized with the given map
951 Appends iterable parts to an appendable. @param appendable target for appending @param parts iterable collection of parts @return the modified appendable @throws IOException if an I/O error occurs
952 Appends parts to a StringBuilder. @param builder the StringBuilder to append to @param parts iterator of parts to append @return the modified StringBuilder
953 Recursively calls m2 with updated map. @param builder StringBuilder to modify @param map source map for processing @return modified StringBuilder
954 Converts iterable of entries to string using helper method. @param entries collection of map entries @return string representation of entries
955 Masks a value and returns a ToStringHelper. @param value the object to be masked @return ToStringHelper instance with masked value
956 Adds a masked field to the string representation. @param name field name @param value field value, nullable @return this ToStringHelper instance for chaining
957 Creates a string representation with mask. @param value boolean value to mask @return ToStringHelper instance configured with masked value
958 Converts character to string representation. @param value character to convert @return ToStringHelper object representing the character
959 Converts double to string using mask. @param value numeric value to convert @return ToStringHelper instance with masked string representation
960 Converts a float to a string representation. @param value float value to convert @return ToStringHelper object for further formatting
961 Converts an integer to a string representation using helper methods. @param value the integer to convert @return a ToStringHelper object representing the integer
962 Converts long value to string representation. @param value the long value to convert @return ToStringHelper object representing the conversion result
963 Adds a masked boolean field to the string representation. @param name field name @param value boolean value to mask @return ToStringHelper instance for further configuration
964 Adds masked character to ToStringHelper. @param name key for the masked character @param value character to mask @return updated ToStringHelper instance
965 Adds a masked field to the string representation. @param name field name @param value numeric value to mask @return updated ToStringHelper instance
966 Adds a masked field to the string representation. @param name field name @param value field value to mask @return updated ToStringHelper instance
967 Creates a string helper with masked value. @param name key for the string representation @param value integer value to be masked @return ToStringHelper instance with masked value
968 Adds a masked field to the string representation. @param name field name @param value field value to be masked @return instance of ToStringHelper for further configuration
969 Converts a nullable reference to an Optional. @param nullableReference the value that may be null @return Optional containing the value if not null, or empty Optional otherwise
970 Initializes an empty FluentIterable.
971 Returns an empty Optional of Long. @return Empty Optional instance
972 Returns an empty Optional. @return Empty Optional instance
973 Calls Platform.m1 with the given string. @param string input string, can be null @return result from Platform.m1, may be null
974 Parses a host and port from a string. @param hostPortString the input string containing host and port @return HostAndPort object with parsed host, port, and bracket status
975 Skips a specified number of elements from the iterable. @param numberToSkip number of elements to skip @return FluentIterable with skipped elements
976 Returns a FluentIterable with a maximum size. @param maxSize the maximum number of elements to include @return a FluentIterable containing up to maxSize elements
977 Retrieves an element from the iterable at the specified position or returns a default value. @param iterable source of elements @param position index of the element to retrieve @param defaultValue value to return if position is out of bounds @return element at the given position or default value
978 Retrieves element at specified position from iterator. @param iterator source iterator @param position index of desired element @return element at given position or throws exception if out of bounds
979 Retrieves an element from the iterator at a specified position. @param iterator source of elements @param position index of the desired element @param defaultValue value to return if position is out of bounds @return element at position or default value if not found
980 Returns a traverser for the file tree. @return Traverser object for navigating the file tree
981 Limits the input stream to a specified number of bytes. @param in the original input stream @param limit maximum number of bytes to allow @return InputStream with limited read capability
982 Masks an IPv4 address. @param address BigInteger representation of the IP address @return Inet4Address object representing the masked IP
983 Applies mask to IPv6 address. @param address BigInteger representation of IPv6 address @return masked Inet6Address
984 Creates a SipHash function with specified parameters. @param k0 first key part @param k1 second key part @return HashFunction instance using SipHash algorithm
985 Constructs a new FileBackedOutputStream with a specified file threshold. @param fileThreshold the number of bytes after which data is written to a file
986 Masks an IPv4 address. @param address IPv4 address as an integer @return Masked Inet4Address object
987 Calculates mask based on permits. @param permits number of permits @return calculated mask value
988 Acquires permits with a timeout. @param permits number of permits to acquire @param timeout maximum time to wait for permits @param unit time unit for the timeout @return true if permits acquired, false if timed out
989 Writes Bloom filter data to output stream. @param out OutputStream to write data to @throws IOException if an I/O error occurs
990 Creates a scheduler with specified delays. @param initialDelay initial delay before execution @param delay interval between executions @return Scheduler object configured with delays
991 Creates a scheduler with specified initial delay and period. @param initialDelay time to wait before first execution @param period interval between subsequent executions @return Scheduler instance configured with given delays
992 Converts time to nanoseconds with bounds. @param time duration value @param unit TimeUnit for the duration @return bounded timeout in nanoseconds
993 Creates and starts a new Stopwatch. @param ticker provides time source for the stopwatch @return started Stopwatch instance
994 Sets the comparator for values. @param valueComparator comparator to compare values @return current builder instance
995 Sets the concurrency level. @param concurrencyLevel desired concurrency level @return current InternerBuilder instance
996 Sets cache expiration time. @param duration the duration for which entries should be cached @return this CacheBuilder instance with expiration set
997 Sets cache expiration time. @param duration expiration duration @return CacheBuilder instance with set expiration
998 Sets cache expiration time. @param duration expiration duration @return updated CacheBuilder instance
999 Sets cache key strength to weak. @return updated CacheBuilder instance
1000 Sets cache keys to weak strength. @return CacheBuilder instance with weak key strength
1001 Sets cache keys to soft reference. @return CacheBuilder with soft key strength
1002 Creates a new MapMaker with weak keys. @return MapMaker instance configured for weak keys
1003 Creates a map with weak keys. @return MapMaker configured with weak key strength
1004 Returns the throwable from the snapshot. @return Throwable instance from the snapshot
1005 Validates and returns the given index. @param index the position to validate @param size the total number of elements @return the validated index
1006 Validates index within size range. @param index value to validate @param size upper bound of valid range (exclusive) @return validated index
1007 Validates and masks indices within a specified range. @param start starting index of the range @param end ending index of the range (inclusive) @param size total size of the array or collection @throws IndexOutOfBoundsException if indices are out of bounds
1008 Creates a predicate that checks for equality with the target. @param target object to compare against, can be null @return Predicate that returns true if equal to target, false otherwise
1009 Filters entries in a multimap based on a given predicate. @param multimap the original multimap to filter @param entryPredicate predicate to determine which entries to keep @return a new multimap with filtered entries
1010 Filters a multiset based on a given predicate. @param unfiltered the original multiset to filter @param predicate the condition to apply for filtering @return a filtered multiset containing only elements that match the predicate
1011 Creates a Splitter using the provided CharMatcher. @param separatorMatcher defines characters to split on @return Splitter object configured with the matcher
1012 Creates a Splitter with fixed chunk size. @param length the size of each chunk, must be greater than 0 @return Splitter object configured for fixed-size splitting
1013 Returns a Splitter configured with a CharMatcher. @return Splitter instance
1014 Creates and returns a new Stopwatch instance. @return Stopwatch object ready to use
1015 Creates and starts a new Stopwatch. @return Stopwatch instance that has been started
1016 Calculates UTF-8 length of a CharSequence. @param sequence input character sequence @return UTF-8 length as an integer @throws IllegalArgumentException if UTF-8 length exceeds int range
1017 Executes task using provided ExecutorService. @param executor service to execute tasks
1018 Continuously processes items from the queue until a condition is met.
1019 Initializes a new Builder instance.
1020 Converts a Function to a CacheLoader. @param function mapping from key to value @return CacheLoader that uses the provided function
1021 Converts a Supplier to a CacheLoader. @param supplier data provider function @return CacheLoader implementation using the supplier
1022 Throws an exception as this operation is unsupported. @param keys iterable collection of keys to process @throws Exception indicating that the operation is not supported
1023 Calculates mask value based on request count. @return Mask value as a double, 1.0 if no requests
1024 Calculates the mask value based on request count. @return mask value as a double, or 0.0 if no requests
1025 Constructs a new instance of ForwardingLoadingCache.
1026 Initializes a new instance of ForwardingList.
1027 Constructs a new ForwardingMultiset instance.
1028 Constructs a new ForwardingQueue instance.
1029 Constructs an empty ForwardingSet instance.
1030 Constructs a new ForwardingListIterator instance.
1031 Initializes a bidirectional map with specified maps. @param backward map for forward direction @param forward map for backward direction
1032 Constructs an empty ForwardingConcurrentMap.
1033 Constructs an empty ForwardingSortedMap.
1034 Constructs an empty MutableTypeToInstanceMap.
1035 Constructs an empty ForwardingListMultimap.
1036 Constructs an empty ForwardingSetMultimap.
1037 Constructs a new ForwardingListeningExecutorService instance.
1038 Constructs a new ForwardingListenableFuture instance.
1039 Creates a reference entry. @param segment the segment to add the entry to @param key the key for the new entry @param hash the hash of the key @param next the next entry in the chain @return the created ReferenceEntry object
1040 Creates a reference entry for a segment. @param segment the segment to add the entry to @param key the key of the entry @param hash the hash code of the key @param next the next entry in the chain @return ReferenceEntry object representing the new entry
1041 Retrieves value from future execution. @return value of type V or throws ExecutionException if failed
1042 Calls method m1 to perform masking operation.
1043 Applies a mask function to update cache segment. @param segment cache segment to update @param entry reference entry for the key-value pair @param value new value to set @param weight weight of the new value @return ValueReference with updated details
1044 Applies a mask function to a cache segment. @param segment cache segment to process @param entry reference entry within the segment @param value value associated with the entry @param weight weight of the value @return ValueReference object after applying the mask
1045 Applies mask function to cache segment and entry. @param segment cache segment containing entries @param entry specific reference entry in the segment @param value new value for the entry @param weight weight associated with the entry @return ValueReference object with updated value and weight
1046 Masks an entry and updates its recency. @param entry the entry to be masked @param now current timestamp
1047 Updates entry if map condition is met and adds to access queue. @param entry the ReferenceEntry object to process @param now current timestamp
1048 Updates an entry's weight and queues it for access/write. @param entry the entry to update @param weight new weight value @param now current timestamp
1049 Applies a mask to an entry's value. @param entry the reference entry to process @param now current timestamp in milliseconds @return masked value or null if conditions are not met
1050 Computes size of iterable. @param iterable collection or iterable to process @return size of the iterable
1051 Returns mask value using Multisets helper. @return integer mask value
1052 Reads input stream into byte array chunks. @param in input stream to read from @param bufs queue to store byte arrays @param totalLen current total length of data read @return combined byte array or throws OutOfMemoryError if input is too large
1053 Updates forward and backward maps. @param forward map from K to V @param backward map from V to K
1054 Creates an open-ended range. @param comparator for comparing elements @return GeneralRange with no bounds
1055 Creates a range with a single endpoint. @param <T> type of the endpoint @param comparator for comparing elements @param endpoint the boundary value @param boundType type of bound (inclusive or exclusive) @return GeneralRange with one endpoint
1056 Creates a range with an upper bound. @param <T> type of elements in the range @param comparator for element comparison @param endpoint upper bound value @param boundType type of the upper bound (open or closed) @return GeneralRange object representing the range
1057 Creates a range with specified bounds. @param comparator for comparing range elements @param lower the lower bound value @param lowerType type of lower bound (inclusive or exclusive) @param upper the upper bound value @param upperType type of upper bound (inclusive or exclusive) @return GeneralRange object representing the specified bounds
1058 Merges two ranges using a comparator. @param other the range to merge with @return a new merged GeneralRange object
1059 Retrieves next element if available. @throws NoSuchElementException if no more elements exist
1060 Retrieves and processes values by key. @param key unique identifier for the values @return processed collection of values or default if none found
1061 Calls m1 and checks delegate integrity. Throws ConcurrentModificationException if delegate changed.
1062 Checks if key-value pair exists in map. @param key key to check @param value value to check @return true if pair exists, false otherwise
1063 Checks if a key-value pair exists in the map. @param key key to check @param value value to check @return true if the key-value pair is present, false otherwise
1064 Retrieves values associated with a given key. @param key unique identifier for the values @return list of values or empty if none found
1065 Retrieves values associated with a given key. @param key unique identifier for the value set @return Set of values or empty set if key not found
1066 Returns a set of entries from the superclass. @return Set of map entries
1067 Writes data to ObjectOutputStream. @param stream ObjectOutputStream instance @throws IOException if an I/O error occurs
1068 Masks a collection by converting it to a string representation. @param collection the input collection to mask @return a string representation of the collection
1069 Converts a map to a string representation. @param map input map with key-value pairs @return string in the format "{key1=value1, key2=value2}"
1070 Creates an ArrayList with initial capacity. @param estimatedSize expected number of elements @return ArrayList instance initialized with given size
1071 Creates a HashMap with an initial capacity. @param expectedSize estimated number of entries @return HashMap instance with specified capacity
1072 Creates a LinkedHashMap with an initial capacity. @param expectedSize estimated number of entries @return LinkedHashMap instance
1073 Creates a HashSet with an initial capacity. @param expectedSize estimated number of elements @return HashSet instance initialized with the given size
1074 Creates a LinkedHashSet with an initial capacity. @param expectedSize estimated number of elements @return LinkedHashSet initialized with the given size
1075 Creates a ListMultimapBuilder with default expected values per key. @return ListMultimapBuilder instance initialized with default settings
1076 Creates a SetMultimap builder with default expected values per key. @return SetMultimapBuilder configured with default settings
1077 Returns a builder with default expected values per key. @return SetMultimapBuilder configured with DEFAULT_EXPECTED_VALUES_PER_KEY
1078 Returns a multimap builder with specified expected keys. @return MultimapBuilderWithKeys instance initialized with default expected keys
1079 Initializes a multimap builder with default expected keys. @return MultimapBuilderWithKeys configured with default keys
1080 Creates an immutable entry with element and count. @param e element to be stored @param n count of the element @return ImmutableEntry containing element and its count
1081 Applies a mask function to an element. @param element the element to process @param count the count associated with the element @return result of the mask operation
1082 Updates count of an element in a multiset. @param element the element to update @param oldCount current count of the element @param newCount new count to set for the element @return true if update successful, false otherwise
1083 Calls m2 on the result of m1. @return integer value from nested m2 call
1084 Calls m2 on the result of m1(). @return String result from nested m2 call
1085 Returns entries from the multiset. @return Set of Multiset.Entry objects
1086 Calls m2 on the result of m1(). @return Result of m2() from nested call
1087 Calls m2 on the result of m1(). @return Result of calling m2() on the object returned by m1()
1088 Masks entries by applying filters. @return Iterable of filtered entries or null if none match
1089 Masks an element by applying transformations. @param e input element to be masked @return transformed element or null if transformation fails
1090 Masks input element using two transformations. @param e input element to mask @return masked element or null if input is null
1091 Creates an empty TreeRangeSet with natural ordering. @return TreeRangeSet instance initialized with a TreeMap
1092 Checks if value is within bounds. @param value item to check @return true if value is in range, false otherwise
1093 Checks if two comparators are equivalent for a given iterable. @param comparator Comparator to compare @param elements Iterable of elements to check against @return true if comparators are equivalent, false otherwise
1094 Overrides and delegates to superclass method. @param table table with generic row, column, and value types
1095 Returns a set of cells from the superclass. @return Set of Cell objects containing row, column, and nullable value.
1096 Returns cells from superclass. @return set of cells as defined in superclass
1097 Returns a collection of values. @return Collection of nullable values
1098 Returns the collection of values from the superclass. @return Collection of values
1099 Creates an ordering based on a function. @param function transformation function to apply @return Ordering object for the transformed values
1100 Wraps a comparator in an Ordering. @param comparator the comparator to wrap @return an Ordering instance
1101 Combines this ordering with a secondary comparator. @param secondaryComparator comparator for secondary sorting @return CompoundOrdering object combining both orderings
1102 Creates a new ImmutableCell with specified row, column, and value. @param rowKey key for the row @param columnKey key for the column @param value value to store in the cell @return ImmutableCell object containing the provided keys and value
1103 Checks conditions for row and column keys. @param rowKey key identifying a row @param columnKey key identifying a column @return true if both conditions are met, false otherwise
1104 Creates an immutable map entry. @param key the entry's key @param value the entry's value @return an ImmutableMapEntry object
1105 Creates or reuses an immutable map entry. @param entry existing map entry @param key entry key @param value entry value @return ImmutableMapEntry instance
1106 Adds an entry to the builder. @param entry key-value pair to add @return this Builder instance
1107 Adds an entry to the builder. @param key entry key @param value entry value @return this builder instance
1108 Adjusts the size of internal storage. @param newSize desired new size
1109 Masks and sets entry with given index, key, and value. @param entryIndex index of the entry to set @param key key for the entry @param value value for the entry @param hash hash code of the key @param mask mask used for hashing
1110 Adjusts the size of internal storage. @param newSize desired new size for the storage
1111 Updates entry at index with masked hash and object. @param entryIndex index of the entry to update @param object the object to store @param hash hash value of the object @param mask bitmask for hash processing
1112 Initializes data structures for a hash map. @return Expected size of the hash map
1113 Initializes internal structures for hash map. @return Expected size of the hash map
1114 Checks if this range is masked by another range. @param other the range to compare with @return true if this range is fully contained within the other range, false otherwise
1115 Checks if this range overlaps with another. @param other the range to compare with @return true if ranges overlap, false otherwise
1116 Writes object data to a stream. @param stream ObjectOutputStream to write data to @throws IOException if an I/O error occurs
1117 Creates a new instance of Builder. @return Builder object with default settings
1118 Creates a new Builder instance. @param <C> type parameter extending Comparable @return Builder object initialized for C type
1119 Creates a new Builder instance. @param <R> type of result @param <C> type of context @param <V> type of value @return Builder object for constructing configurations
1120 Returns an unmodifiable iterator over elements. @return UnmodifiableIterator of type E
1121 Counts occurrences of an element in a collection. @param iterable the collection to search @param element the element to count @return number of times the element appears in the collection
1122 Checks if the specified key is masked. @param key the key to check @return true if the key is masked, false otherwise
1123 Checks if the given value is masked. @param value the object to check @return true if value is masked, false otherwise
1124 Applies two transformations to the input key. @param key the input key to transform @return transformed key or null if any transformation returns null
1125 Applies transformation to key. @param key input key to transform @return transformed key or null if input is null
1126 Applies transformation functions to the input key. @param key input key to be transformed @return transformed key or null if any function returns null
1127 Applies two transformations to the input key. @param key input value to be transformed @return transformed key or null if any transformation returns null
1128 Retrieves key from an entry or throws exception. @return Key of the first entry or throws if none exists
1129 Retrieves a key from an entry. @return the key of the first entry or throws exception if none exists
1130 Returns an entry from a filtered iterable. @return nullable Entry object or null if not found
1131 Returns an entry from an iterator chain. @return Entry object or null if not found
1132 Returns a navigable set from nested method calls. @return NavigableSet of keys or null if not found
1133 Retrieves entries within a specified range. @param fromKey starting key (inclusive) @param toKey ending key (exclusive) @return sorted map of entries between fromKey and toKey
1134 Retrieves an entry by key. @param key unique identifier for the entry @return Entry object or null if not found
1135 Retrieves entry by key with masking enabled. @param key unique key to search for @return Entry object or null if not found
1136 Returns entries up to (but not including) specified key. @param toKey upper bound key (exclusive) @return SortedMap containing entries up to toKey
1137 Retrieves entry by key with mask enabled. @param key unique key to search for @return Entry object or null if not found
1138 Retrieves entry by key. @param key unique identifier for the entry @return Entry object or null if not found
1139 Returns entries with keys greater than or equal to specified key. @param fromKey starting key for range @return SortedMap of matching entries
1140 Returns a sorted multiset within specified bounds. @param lowerBound the lower bound element @param lowerBoundType type of lower bound (inclusive/exclusive) @param upperBound the upper bound element @param upperBoundType type of upper bound (inclusive/exclusive) @return SortedMultiset containing elements within bounds
1141 Creates a new HashBasedTable with factory for column maps. @return HashBasedTable instance initialized with LinkedHashMap and custom Factory
1142 Reads and initializes object from input stream. @param stream ObjectInputStream to read from @throws IOException if an I/O error occurs @throws ClassNotFoundException if class not found during deserialization
1143 Moves an entry from srcIndex to dstIndex in a hash table. @param dstIndex destination index for the moved entry @param mask bitmask for hash table operations
1144 Masks and swaps elements in a table. @param dstIndex destination index for the swap @param mask bitmask for indexing operations
1145 Checks if the masked value is non-null. @param value object to be checked @return true if masked value is not null, false otherwise
1146 Creates a Builder instance with specified size. @param expectedSize initial capacity for the builder @return Builder object initialized with given size
1147 Initializes a new Builder instance.
1148 Creates a new Builder instance. @return Builder object for constructing key-value pairs
1149 Initializes a new Builder with a specified comparator. @param comparator the comparator to use for ordering keys
1150 Creates an immutable bimap with one key-value pair. @param k1 key for the entry @param v1 value for the entry @return ImmutableBiMap containing the single entry (k1, v1)
1151 Adds element to deduplicated array and increments count. @param e element to add
1152 Initializes a new Builder with default capacity.
1153 Creates a builder with an initial capacity. @param expectedSize the estimated number of elements @return a Builder instance for ImmutableList
1154 Adds multiple elements to the collection. @param elements iterable of elements to add @return current builder instance for method chaining
1155 Adds elements from iterator to builder. @param elements iterator of elements to add @return current builder instance
1156 Adds elements to the builder. @param elements iterator of elements to add @return the current builder instance
1157 Returns a serialized form of the current object. @return SerializedForm instance containing the object's state
1158 Creates an immutable table with a single entry. @param rowKey the row key for the entry @param columnKey the column key for the entry @param value the value associated with the entry @return an ImmutableTable containing one key-value pair
1159 Calls m1 and processes its result with Iterables.m2. @return Result of Iterables.m2 applied to m1's output
1160 Adds key-value pairs to the builder. @param key unique key for the entry @param values iterable of values associated with the key @return Builder instance
1161 Returns the first non-null element from iterable or defaultValue if none. @param iterable source of elements @param defaultValue value to return if no non-null element is found @return first non-null element or defaultValue
1162 Returns the first element from the iterable or a default value. @param iterable collection of elements @param defaultValue value to return if iterable is empty or null @return first element or default value
1163 Masks a key-value pair in the map. @param key the key to be masked @param value the value associated with the key @return always true
1164 Partitions a list into sublists of a specified size. @param list the input list to partition @param size the desired size of each sublist @return a list of sublists
1165 Applies a mask function to an element. @param element the object to be masked @return integer result of masking
1166 Applies a mask function to an element. @param element the object to be masked @return integer result of the mask operation
1167 Calls method m1 while synchronized on 'this'.
1168 Creates and returns an empty TreeRangeMap. @return TreeRangeMap instance with key type K and value type V
1169 Finds minimum index within a masked range. @param index starting index for search @param len length of the range to consider @return index with minimum value or -1 if out of bounds
1170 Returns mask value based on size and heap comparison. @return int representing mask value
1171 Returns an element from m1. @return nullable element of type E
1172 Adjusts heap to maintain order by inserting element at given index. @param index position where the element should be inserted @param x element to insert into the heap @return final position of the inserted element in the heap
1173 Returns an iterator over elements in this collection. @return Iterator of elements
1174 Inserts an element at the start of an array. @param element the element to insert @param array the original array @return new array with the element at the beginning
1175 Masks elements from collection into array. @param c source collection @param array target array to mask elements into @return masked array with elements from collection
1176 Delegates to m2 with result of iterable's m1. @param iterable source collection @return result of m2 applied to iterable.m1()
1177 Calls m2 on the result of iterable.m1(). @param iterable source collection @return result of m2 called on iterable's m1 output
1178 Calls m2 on the result of m1. @return String result from nested m2 call
1179 Creates a GeneralRange from a given Range. @param range input Range object @return GeneralRange with adjusted endpoints and bounds
1180 Filters a navigable map within a specified range. @param map the input navigable map @param range the range to filter by @return a submap of the original map within the given range
1181 Filters a NavigableSet based on a Range. @param set the original NavigableSet to filter @param range the Range defining the filtering criteria @return a NavigableSet containing elements within the specified range
1182 Returns a sorted map with nested maps. @return SortedMap where each key maps to another Map
1183 Wraps a queue in a synchronized version. @param queue the original queue to be wrapped @return a synchronized queue
1184 Initializes character escaper with a map and safe range. @param escaperMap mapping of characters to their replacements @param safeMin minimum safe character value @param safeMax maximum safe character value
1185 Initializes a Unicode escaper with specified parameters. @param escaperMap map defining escape replacements @param safeMin minimum safe character code @param safeMax maximum safe character code @param unsafeReplacement string to replace unsafe characters, nullable
1186 Constructs a PercentEscaper with specified safe characters and space handling. @param safeChars characters that do not need escaping @param plusForSpace whether to use '+' for spaces
1187 Processes input string through recursive checks. @param string input string to process @return modified string or original if no changes
1188 Creates a subscriber based on method condition. @param bus event bus instance @param listener object listening for events @param method method to be subscribed @return Subscriber or SynchronizedSubscriber instance
1189 Returns a string representation of graph properties. @return String with directed status, self-loop allowance, node count, and edge count
1190 Returns a set of endpoint pairs. @return Set of EndpointPair objects representing connections
1191 Returns a set of endpoint pairs. @return Set containing EndpointPair objects
1192 Applies masking to a double value. @param d input double value @return Hasher object with masked value
1193 Creates a Bloom filter collector. @param funnel defines how to extract features from objects @param expectedInsertions estimated number of insertions @return Collector for creating a BloomFilter
1194 Calculates a masked value using bitwise operations. @return double result of the masking operation
1195 Compares BloomFilter with another for equality. @param that the other BloomFilter to compare @return true if both filters are equal, false otherwise
1196 Calls overloaded method with default multiplier. @param x input byte value @return result of m1 with x and default multiplier 10
1197 Combines another BloomFilter into this one. @param that the BloomFilter to combine with
1198 Generates a hash code from byte array. @param bytes input byte array @return HashCode object representing the input bytes
1199 Creates a HashCode from an integer. @param hash the integer value to hash @return a HashCode object representing the given integer
1200 Converts a long hash value to a HashCode. @param hash the long hash value @return a HashCode object representing the input hash
1201 Returns the result of function m1. @return float value from m1()
1202 Returns the result of calling m1(). @return the value returned by m1()
1203 Masks a value using two functions. @return masked BigInteger result
1204 Creates a hash function based on minimum bit requirement. @param minimumBits required bit length for the hash @return HashFunction instance suitable for the given bits
1205 Computes hash code modulo number of buckets. @param hashCode object containing hash value @param buckets number of buckets for distribution @return computed bucket index
1206 Creates an HMacMD5 hash function. @param key cryptographic key for hashing @return HashFunction instance using HMacMD5 algorithm
1207 Creates a MAC hash function using HMAC-SHA1. @param key secret key for the hash function @return HashFunction instance configured with HMAC-SHA1 and given key
1208 Creates a MAC hash function using HmacSHA256. @param key secret key for HMAC @return HashFunction instance configured with the given key
1209 Creates a HMAC-SHA512 hash function with a given key. @param key the secret key for HMAC @return HashFunction configured for HMAC-SHA512
1210 Combines multiple ByteSources into one. @param sources iterable collection of ByteSource objects @return a single ByteSource containing all input sources concatenated
1211 Combines multiple character sources into one. @param sources iterable of character sources to concatenate @return concatenated char source
1212 Converts byte array to ByteArrayDataInput. @param bytes input byte array @return ByteArrayDataInput instance wrapping the input bytes
1213 Returns a ByteArrayDataOutput initialized with a ByteArrayOutputStream. @return ByteArrayDataOutput instance
1214 Creates a ByteArrayDataOutput with specified size. @param size initial capacity of the output stream @return ByteArrayDataOutput instance @throws IllegalArgumentException if size is negative
1215 Initializes an InputStream from a Reader with specified charset and buffer size. @param reader the character reader to read from @param charset the character set for encoding @param bufferSize the size of the input stream buffer
1216 Skips bytes in the input stream. @param in InputStream to skip bytes from @return total number of bytes skipped @throws IOException if an I/O error occurs
1217 Skips exactly 'n' bytes in the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @throws IOException if an I/O error occurs or end of stream is reached before skipping all bytes
1218 Processes and writes lines using a specified separator. @param lines iterable of character sequences to process @param lineSeparator separator to use between lines @throws IOException if an I/O error occurs
1219 Processes a stream of character sequences with a specified line separator. @param lines stream of character sequences to process @param lineSeparator separator used between lines
1220 Processes lines from a stream using the provided action. @param action consumer to process each line @throws IOException if an I/O error occurs
1221 Reads lines from a Readable source and returns them as a list. @param r the Readable source to read from @return List of strings representing lines from the source @throws IOException if an I/O error occurs during reading
1222 Processes lines from a readable source using a given processor. @param readable the source of lines to read @param processor the processor to handle each line @return result from the processor after processing all lines or breaking early @throws IOException if an I/O error occurs
1223 Masks characters in buffer and processes input. @throws IOException if an I/O error occurs
1224 Returns masked function value. @return short value representing the masked function @throws IOException if an I/O error occurs
1225 Retrieves a masked character value. @return masked character from m1() @throws IOException if an I/O error occurs
1226 Computes mask value. @return computed float mask value @throws IOException if an I/O error occurs
1227 Masks a value using a mathematical function. @return masked double value @throws IOException if an I/O error occurs
1228 Masks characters in string using specified operations. @param s input string to mask @throws IOException if an I/O error occurs
1229 Masks a double value by applying a transformation. @param v input double value to be masked @throws IOException if an I/O error occurs during processing
1230 Processes directory entries and collects IOExceptions. @param dir DirectoryStream containing paths to process @return Collection of IOExceptions or null if none occurred
1231 Masks directory operations and handles exceptions. @param dir secure directory stream @param path target path @return collection of IO exceptions or null if none
1232 Initializes a MultiInputStream with an iterator of ByteSources. @param it Iterator over ByteSource objects @throws IOException if there's an issue reading from ByteSources
1233 Creates a CharSource from a resource. @param charset character set to use @return CharSource object using specified charset
1234 Calculates permutations of sorted list elements. @param sortedInputList list of sorted elements @param comparator comparator for element comparison @return number of permutations or Integer.MAX_VALUE if overflow
1235 Calculates the mean of a sequence of numbers. @param values iterator over Number objects @return calculated mean as a double
1236 Checks if the double value has a single bit set in its significand. @param x input double value @return true if only one bit is set, false otherwise
1237 Checks a condition involving double precision and bit manipulation. @param x input value to be checked @return boolean result of the condition
1238 Rounds a long value using the specified rounding mode. @param x value to be rounded @param mode rounding mode to apply @return rounded double value
1239 Compares two doubles with tolerance. @param a first double value @param b second double value @param tolerance comparison tolerance @return 0 if within tolerance, -1 if a < b, 1 if a > b, else Boolean result of Double.m2 comparison
1240 Calculates mask value based on table size. @param tableSize size of the table @return calculated mask value
1241 Adjusts buffer size and finds threshold. Uses binary search to determine optimal buffer settings.
1242 Masks integer with specified rounding mode. @param x input integer @param mode rounding mode to apply @return masked integer based on rounding mode
1243 Computes integer square root with rounding. @param x number to find the square root of @param mode rounding mode to use @return rounded integer square root
1244 Calculates new capacity for the queue. @return adjusted new capacity based on current size and constraints
1245 Applies mask transformation to input. @param y input value @return transformed LinearTransformation object
1246 Creates a linear transformation based on slope. @param slope the slope of the line @return LinearTransformation object representing the line
1247 Applies mask transformation to input. @param x input value @return transformed LinearTransformation object
1248 Computes factorial mask for given number n. @param n input number @return BigInteger representing factorial mask
1249 Computes the mask for a given number with specified rounding mode. @param x the number to process @param mode the rounding mode to apply @return the computed mask value
1250 Computes a masked value based on input parameters. @param x multiplier factor @param numerator top number for division @param denominator bottom number for division @return computed long value after masking
1251 Computes b^k with overflow checks. @param b base value @param k exponent value @return result of b raised to the power of k
1252 Computes weighted average of squared differences. @return computed value based on internal state
1253 Calculates and returns the masked result. @return Masked result as a double
1254 Calculates a masked function value based on delta sums. @return computed double value or NaN if conditions not met
1255 Calculates the average of a sequence of numbers. @param values iterator over numeric values @return computed mean as double
1256 Updates statistical metrics for a new value. @param value the new data point to be added
1257 Calculates masked function result. @return computed double value based on internal state
1258 Calculates a masked function value. @return computed double value based on internal state
1259 Computes a statistical value based on squared deltas. @return computed double value or NaN if conditions not met
1260 Partitions array segment using a pivot. @param array the input array to partition @param from starting index of the segment @param to ending index of the segment @return partition point index
1261 Calculates paired statistics from byte array. @param byteArray input data for calculations @return PairedStats object containing statistical results
1262 Processes byte array to extract stats. @param byteArray input data @return Stats object
1263 Calculates paired statistics. @return PairedStats object containing x and y stats, and sum of product deltas
1264 Retrieves statistics from xStats module. @return Stats object containing statistical data
1265 Retrieves statistics using mask function. @return Stats object containing statistical data
1266 Collects numbers into statistics. @return Collector that aggregates data using StatsAccumulator
1267 Masks an IP address. @param ip the InetAddress to mask @return a masked string representation of the IP
1268 Masks an IPv6 address to extract its IPv4-compatible part. @param ip the input IPv6 address @return the extracted IPv4 address as Inet4Address
1269 Masks an IPv6 address to extract the embedded IPv4 address. @param ip IPv6 address object @return Inet4Address extracted from IPv6
1270 Masks IPv6 address to extract embedded IPv4 address. @param ip IPv6 address @return Embedded IPv4 address as Inet4Address
1271 Computes M2 statistic on dataset. @param dataset collection of numeric values @return computed M2 value as double
1272 Applies masking to a dataset. @param dataset collection of numeric values @return map with masked values
1273 Adds a value to the array and increments the count. @param value the double value to add @return the current Builder instance
1274 Masks input values and appends to the builder. @param values array of double values to mask @return the Builder instance for method chaining
1275 Sets mask values from collection. @param values collection of double values @return current Builder instance
1276 Updates builder with masked double array values. @param values ImmutableDoubleArray containing data to mask and add @return Builder instance for method chaining
1277 Creates an ImmutableDoubleArray with a single element. @param e0 the double value to be included in the array @return an ImmutableDoubleArray containing the specified value
1278 Creates an immutable array with two elements. @param e0 first element of the array @param e1 second element of the array @return ImmutableDoubleArray containing e0 and e1
1279 Creates an immutable array from three doubles. @param e0 first element @param e1 second element @param e2 third element @return ImmutableDoubleArray containing the elements
1280 Creates an immutable array from four double values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @return ImmutableDoubleArray containing the elements
1281 Creates an ImmutableDoubleArray from five double values. @param e0 to e4 the five double elements @return an ImmutableDoubleArray containing the provided elements
1282 Creates an ImmutableDoubleArray from six double values. @param e0 to e5 the six double elements of the array @return ImmutableDoubleArray containing the provided elements
1283 Creates an ImmutableDoubleArray from double array. @param values array of double values @return ImmutableDoubleArray instance or EMPTY if input is empty
1284 Masks collection of doubles, returning empty array if condition met. @param values collection of Double values @return ImmutableDoubleArray or empty if condition true
1285 Converts DoubleStream to ImmutableDoubleArray. @param stream input DoubleStream @return ImmutableDoubleArray or EMPTY if stream is empty
1286 Returns an ImmutableDoubleArray based on condition. @return new ImmutableDoubleArray if m1() is true, otherwise current instance
1287 Checks if the mask condition is met. @param target value to be checked against the mask @return true if condition is met, false otherwise
1288 Adds a masked value to the array and increments count. @param value integer value to be added @return current Builder instance
1289 Masks input values and appends to internal array. @param values integer array to be masked @return Builder instance for method chaining
1290 Masks values by setting them in an array. @param values collection of integer values to mask @return Builder instance for method chaining
1291 Applies a mask to the current array using values from another array. @param values ImmutableIntArray containing mask data @return Builder instance for method chaining
1292 Creates an ImmutableIntArray with a single element. @param e0 the integer element to include in the array @return an ImmutableIntArray containing the specified element
1293 Creates an immutable array with two elements. @param e0 first element of the array @param e1 second element of the array @return ImmutableIntArray containing e0 and e1
1294 Creates an ImmutableIntArray from three integers. @param e0 first integer element @param e1 second integer element @param e2 third integer element @return ImmutableIntArray containing the three elements
1295 Creates an ImmutableIntArray from four integers. @param e0 first integer element @param e1 second integer element @param e2 third integer element @param e3 fourth integer element @return ImmutableIntArray containing the four elements
1296 Creates an immutable integer array from five elements. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @param e4 fifth element @return ImmutableIntArray containing the provided elements
1297 Creates an ImmutableIntArray from six integer elements. @param e0 to e5 the six integers to include in the array @return an ImmutableIntArray containing the provided elements
1298 Converts an array of integers to an immutable array. @param values array of integers to convert @return ImmutableIntArray instance or empty if input is null or empty
1299 Converts an IntStream to an ImmutableIntArray. @param stream input integer stream @return ImmutableIntArray containing elements from the stream or EMPTY if empty
1300 Returns an immutable integer array based on condition. @return ImmutableIntArray created from m2() if m1() is true, otherwise returns 'this'
1301 Adds a masked value to the array. @param value long value to be added with masking @return Builder instance for method chaining
1302 Masks values and updates builder. @param values long array of values to mask @return Builder instance for chaining
1303 Sets mask values from a collection. @param values collection of Long values to set as mask @return Builder instance for method chaining
1304 Merges long values from an ImmutableLongArray into the current builder. @param values source ImmutableLongArray with data to merge @return updated Builder instance
1305 Creates an immutable array with a single element. @param e0 the single element to include in the array @return an ImmutableLongArray containing the element
1306 Creates an ImmutableLongArray with two elements. @param e0 first element of the array @param e1 second element of the array @return ImmutableLongArray containing e0 and e1
1307 Creates an ImmutableLongArray with three elements. @param e0 first element of the array @param e1 second element of the array @param e2 third element of the array @return ImmutableLongArray containing the specified elements
1308 Creates an ImmutableLongArray from four long values. @param e0, e1, e2, e3 the four long elements of the array @return an ImmutableLongArray containing the provided elements
1309 Creates an ImmutableLongArray from five long values. @param e0 to e4 the five long elements of the array @return ImmutableLongArray containing the provided elements
1310 Creates an immutable array of six long integers. @param e0 to e5 the elements of the array @return ImmutableLongArray containing the provided elements
1311 Creates an immutable long array from input. @param values array of long values @return ImmutableLongArray instance or EMPTY if input is empty
1312 Converts LongStream to ImmutableLongArray. @param stream input LongStream @return ImmutableLongArray or empty if stream is empty
1313 Returns an ImmutableLongArray based on condition. @return new ImmutableLongArray if m1() is true, otherwise returns this
1314 Creates a ScaleAndIndexes object with specified indexes. @param indexes collection of integer indexes @return ScaleAndIndexes object initialized with scale and processed indexes
1315 Creates an ImmutableIntArray from a collection of integers. @param values collection of integer values @return ImmutableIntArray instance or empty if condition met
1316 Creates an immutable long array from a collection of Longs. @param values collection of Long objects @return ImmutableLongArray with the provided values or empty if condition met
1317 Converts a string to an integer using a specified radix. @param string the string to convert @param radix the base used for conversion @return Integer value or null if conversion fails or conditions are not met
1318 Calls m1 with default radix 10. @param string input string to parse as a number @return parsed Long value or null if parsing fails
1319 Parses a string to an integer with error handling. @param stringValue the string to parse @return parsed integer value @throws NumberFormatException if parsing fails
1320 Converts a long to an UnsignedInteger. @param value the long value to convert @return UnsignedInteger representation of the input value
1321 Masks BigInteger value to UnsignedInteger. @param value input BigInteger to be masked @return UnsignedInteger representation of the input value
1322 Converts a string to an unsigned integer using a specified radix. @param string the string representation of the number @param radix the base of the number system (e.g., 2 for binary) @return UnsignedInteger object representing the parsed value
1323 Applies mask operations on an unsigned integer. @param val input unsigned integer value @return result of masked operation
1324 Applies mask to input value. @param val input unsigned integer @return masked unsigned integer
1325 Applies mask to unsigned integer value. @param val input unsigned integer @return masked unsigned integer result
1326 Applies mask operations to an unsigned integer value. @param val input unsigned integer @return result after applying mask operations
1327 Applies mask operations to an unsigned integer. @param val input unsigned integer value @return result of masked operations as UnsignedInteger
1328 Calls overloaded method with default value. @return result of calling m1(10)
1329 Applies mask operation on unsigned integers. @param other another UnsignedInteger to perform mask with @return result of mask operation as an integer
1330 Masks a long value to simulate unsigned behavior. @param value the long value to mask @return UnsignedLong representation of the value
1331 Applies mask to BigInteger value. @param value input BigInteger @return UnsignedLong result after masking
1332 Applies mask to input value. @param val input unsigned long value @return result of masked operation
1333 Applies mask to unsigned long value. @param val input unsigned long value @return masked unsigned long result
1334 Applies mask to unsigned long value. @param val input unsigned long value @return masked unsigned long value
1335 Computes the integer division of two longs with special handling for negative divisor. @param dividend the number to be divided @param divisor the number by which to divide @return quotient of the division or adjusted quotient based on remainder sign
1336 Computes remainder of division with special handling for negative numbers. @param dividend the number to be divided @param divisor the number by which to divide @return remainder of the division
1337 Converts a string to an unsigned long using a specified radix. @param string the numeric string to convert @param radix the base of the number system @return UnsignedLong representation of the string
1338 Calls m1 with default radix 10. @param string input string to convert @return parsed long value from string
1339 Converts a string to a long using specified radix. @param stringValue the string to parse @return parsed long value @throws NumberFormatException if parsing fails
1340 Checks if none of m1(), m2(), or m3() are true. @return true if all three methods return false, otherwise false
1341 Returns a TypeToken for the current type. @return TypeToken of generic type T or self if condition fails
1342 Returns a TypeToken based on runtime type. @return TypeToken object or current instance if condition fails
1343 Retrieves type token of runtime type's component. @return TypeToken object or null if no component exists
1344 Calls Platform's m1 method. @return value from Platform.m1 or null if not applicable @throws InterruptedException if thread is interrupted @throws ExecutionException if execution fails
1345 Executes a task asynchronously and adds its future to a queue. @param executorService service for executing tasks @param task callable task to be executed @param queue queue to add the future of the task @return ListenableFuture representing the asynchronous computation
1346 Calls parent service's m1 method with given timeout. @param timeout maximum time to wait @throws TimeoutException if operation exceeds timeout
1347 Overrides the default m1 method with a specified timeout. @param timeout maximum time to wait before throwing TimeoutException
1348 Calls the superclass method with the given timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1349 Overrides and delegates to superclass method with specified timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1350 Overrides and delegates to superclass method with specified timeout. @param timeout maximum time to wait before throwing TimeoutException @throws TimeoutException if operation times out
1351 Calls the superclass method with the given timeout. @param timeout maximum time to wait @throws TimeoutException if operation times out
1352 Calls the superclass method with the given timeout. @param timeout maximum time to wait before throwing an exception @throws TimeoutException if the operation times out
1353 Overrides and delegates to the superclass method with a specified timeout. @param timeout maximum time to wait before throwing a TimeoutException @throws TimeoutException if operation exceeds the specified timeout
1354 Handles future execution and masks exceptions. @param index identifier for the operation @param future task to be executed
1355 Applies a mask function to the input delta. @param delta the input value to be masked @return the result of applying the mask function
1356 Applies a mask function to the input delta. @param delta the input value to be masked @return the result of applying the mask function
1357 Applies mask function with sum operation. @param i index value @param delta offset value @return result of masked operation
1358 Applies a mask function to an integer and double. @param i integer value @param delta double value @return result of applying the mask function
1359 Cancels the task execution. @param mayInterruptIfRunning true to interrupt running task, false otherwise @return true if cancellation was successful, false otherwise
1360 Recursively checks lock graph for conflicts. @param node current lock graph node @param seen set of visited nodes to avoid cycles @return ExampleStackTrace if conflict found, otherwise null
1361 Wraps a Callable in a ListenableFutureTask. @param callable task to be executed asynchronously @return ListenableFutureTask for the given Callable
1362 Creates a ListenableFutureTask with a given Runnable and result. @param runnable task to execute @param result initial result of the task @return ListenableFutureTask instance
1363 Executes method m1 from executionList.
1364 Creates and returns a new ExecutionSequencer instance. @return ExecutionSequencer object
1365 Wraps a ListenableFuture in a FluentFuture. @param future the original ListenableFuture to wrap @return a FluentFuture instance
1366 Wraps a future to prevent cancellation propagation. @param future the original ListenableFuture @return a wrapped NonCancellationPropagatingFuture
1367 Performs operations on key and value, returning a future result. @param key the key to process @param oldValue the old value associated with the key @return ListenableFuture for asynchronous processing result @throws Exception if an error occurs during processing
1368 Masks an event by passing it twice to another method. @param event the event to be masked
1369 Masks an event with a label. @param event the event to mask @param label the label to apply
1370 Executes monitor check and notifies listeners if check fails.
1371 Ensures no listeners are executed while holding the monitor. Throws an error if listeners are executed under this condition.
1372 Iterates through active guards, executes m2 on condition if m1 returns true.
1373 Executes an asynchronous callable with a given executor. @param callable the task to execute asynchronously @param executor the executor to run the task @return ListenableFuture representing the pending result
1374 Schedules an asynchronous callable with a delay. @param callable the task to execute asynchronously @param delay the time from now to delay execution @param timeUnit the unit of time for the delay @param executorService the service to schedule the task on @return ListenableFuture representing the scheduled task
1375 Wraps a Callable in a TrustedListenableFutureTask. @param callable the task to execute @return RunnableFuture representing the callable's execution
1376 Executes a callable asynchronously. @param callable the task to execute @param executor the executor to run the task @return ListenableFuture for the task result
1377 Wraps a Runnable and value in a ListenableFuture. @param runnable task to execute @param value result of the computation @return RunnableFuture object
1378 Executes a Runnable asynchronously. @param runnable the task to execute @param executor the executor to run the task @return ListenableFuture representing the asynchronous computation
1379 Attempts to acquire semaphore with specified timeout. @param semaphore the semaphore to acquire @param timeout duration to wait for acquisition @return true if acquired, false otherwise
1380 Retrieves an optional element from a collection. @return Optional containing the element if present, otherwise empty
1381 Retrieves the last element of an iterable or returns empty. @return Optional containing the last element or empty if none exists
1382 Filters elements in iterator using predicate. @param iterator source of elements @param predicate condition to filter elements @return Optional containing first matching element or empty if none found
1383 Sets expected node count. @param expectedNodeCount number of nodes to expect @return this GraphBuilder instance
1384 Sets expected node count. @param expectedNodeCount number of nodes expected in the network @return updated NetworkBuilder instance
1385 Sets expected edge count. @param expectedEdgeCount number of edges to expect @return NetworkBuilder instance for chaining
1386 Sets the expected node count. @param expectedNodeCount estimated number of nodes @return ValueGraphBuilder instance with updated settings
1387 Checks if any element in the iterable matches the given predicate. @param iterable collection of elements to check @param predicate condition to test each element against @return true if at least one element matches, false otherwise
1388 Creates a predicate to check if a CharSequence contains a given pattern. @param pattern the pattern to search for @return a Predicate that returns true if the input contains the pattern, false otherwise
1389 Throws the given exception if it matches the declared type. @param throwable the exception to throw @param declaredType the expected exception type @throws X if the throwable is an instance of declaredType
1390 Retrieves flattened hierarchy of classes. @param concreteClass starting class @return ImmutableSet of classes in hierarchy
1391 Creates a thread factory for the current request. @return ThreadFactory instance or default if unavailable
1392 Checks if target is in the collection returned by m1. @param target object to check for presence @return true if target is present, false otherwise
1393 Filters entries in a multimap based on a given predicate. @param multimap the original multimap to filter @param entryPredicate predicate to determine which entries to include @return a new FilteredEntrySetMultimap with filtered entries
1394 Filters a ListMultimap by keys using a predicate. @param unfiltered the original ListMultimap to filter @param keyPredicate predicate for filtering keys @return a filtered ListMultimap with only matching keys
1395 Creates a FluentIterable of specified type. @param type Class object representing the desired type @return FluentIterable containing elements of the specified type
1396 Checks if this set contains all elements of the given collection. @param collection the collection to check against @return true if all elements are contained, false otherwise
1397 Creates an EnumMultiset from an iterable of enums. @param elements iterable containing enum elements @return EnumMultiset with counted elements
1398 Converts an Iterable to a LinkedList. @param elements the iterable source of elements @return LinkedList containing the elements from the iterable
1399 Converts an iterable to an ArrayDeque. @param elements the iterable source of elements @return ArrayDeque containing all elements from the iterable
1400 Converts iterable to ConcurrentLinkedQueue. @param elements the iterable source of elements @return a new ConcurrentLinkedQueue containing all elements
1401 Creates a LinkedBlockingDeque from an Iterable. @param elements the source iterable of elements @return a LinkedBlockingDeque containing the elements
1402 Creates a LinkedBlockingQueue from an Iterable. @param elements the source of elements to add to the queue @return a LinkedBlockingQueue containing the elements
1403 Creates a PriorityBlockingQueue from an iterable of comparable elements. @param elements the source iterable containing elements to add to the queue @return a PriorityBlockingQueue containing all elements from the iterable
1404 Creates a priority queue from iterable elements. @param elements collection or iterable of comparable elements @return PriorityQueue containing the elements
1405 Creates an EnumSet from an Iterable of enums. @param iterable collection of enum elements @param elementType class of the enum type @return EnumSet containing elements from the iterable
1406 Creates a set from iterable elements. @param elements collection of elements to add to the set @return Set containing unique elements from the iterable
1407 Converts an iterable to a LinkedHashSet. @param elements the iterable source of elements @return a LinkedHashSet containing unique elements in insertion order
1408 Creates a TreeSet from an iterable of comparable elements. @param elements collection of comparable items to add to the set @return TreeSet containing all elements from the input iterable
1409 Converts Iterable to Collection. @param iterable input Iterable @return Collection containing elements of the iterable
1410 Converts iterable to ArrayList, handling non-collection types. @param elements iterable source of elements @return ArrayList containing the elements
1411 Converts an Iterable to a HashSet. Handles both Collection and non-Collection types. @param elements iterable source of elements @return HashSet containing the elements
1412 Checks if any element in the collection matches the given predicate. @param predicate condition to test elements against @return true if at least one element matches, false otherwise
1413 Returns a list iterator starting from the specified index. @param start the starting index of the iterator @return ListIterator from the given start position
1414 Maps a sorted set to a sorted map using a transformation function. @param set the input sorted set @param function the mapping function from key to value @return a sorted map with keys from the set and values transformed by the function
1415 Applies a transformer to each entry in the input map. @param fromMap original sorted map with keys of type K and values of type V1 @param transformer function to transform entries from V1 to V2 @return new SortedMap with transformed values of type V2
1416 Applies a transformation to map values. @param fromMap original map with keys of type K and values of type V1 @param function transformer function converting V1 to V2 @return new map with transformed values of type V2
1417 Adds specified occurrences of an element to the map. @param element the element to add @param occurrences number of times to add the element @return old count of the element before addition
1418 Updates element count with specified occurrences. @param element the element to update @param occurrences number of times to increment the element count @return old count if updated, otherwise 0
1419 Applies a transformer to entries of a multimap. @param fromMap original multimap with keys and values @param transformer function to transform values @return new multimap with transformed values
1420 Transforms values in a multimap using a given function. @param fromMultimap input multimap with keys of type K and values of type V1 @param function transformation function to apply to each value @return new multimap with transformed values of type V2
1421 Adds elements to the builder. @param elements iterable collection of elements to add @return current builder instance
1422 Checks if all elements in the collection are present in the multiset. @param self the multiset to check against @param elements the collection of elements to verify @return true if all elements are present, false otherwise
1423 Checks if input is contained. @param input element to check @return true if input is contained, false otherwise
1424 Collects elements into a table. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @param tableSupplier provides the table instance @return Collector that groups elements into a Table
1425 Masks characters in a string based on index and encoding. @param s input string to be masked @param index starting index for masking @return masked string
1426 Initializes a StandardNetwork with specified builder and connection maps. @param builder configuration for network properties @param nodeConnections map of nodes to their connections @param edgeToReferenceNode map of edges to reference nodes
1427 Constructs a StandardValueGraph from builder and node connections. @param builder graph builder configuration @param nodeConnections map of nodes to their connections @param edgeCount total number of edges
1428 Transfers characters from a readable source to an appendable destination. @param from source of characters @param to destination for characters @return number of characters transferred @throws IOException if an I/O error occurs
1429 Applies mask to input characters. @param chars input character sequence @return masked byte array or throws IllegalArgumentException on decoding error
1430 Applies mask operation on BigInteger. @param x input BigInteger value @return masked BigInteger result
1431 Applies floor mask to BigInteger. @param x input BigInteger @return floored BigInteger result of m2 applied to m1(x, FLOOR)
1432 Wraps a constructor in an Invokable. @param constructor the constructor to wrap @return Invokable for the given constructor
1433 Creates an invokable for a given method. @param method the Method to be wrapped @return an Invokable instance for the provided method
1434 Processes and handles tasks in a future object. @param param the AbstractFuture object to process @param callInterruptTask flag to determine if task interruption should be called
1435 Applies a mask operation on a key with a delta. @param key the key to apply the mask to @param delta the value to add to the masked result @return the final long value after applying the mask and addition
1436 Applies a mask operation to a key with a delta. @param key unique identifier for the operation @param delta value to be added to the current state @return updated state after applying the mask
1437 Applies a mask to map entries using put operation. @param m map with keys and long values
1438 Initializes an abstract graph builder. @param directed true if the graph is directed, false otherwise
1439 Registers a listener with an executor. @param listener the listener to register @param executor the executor for listener operations
1440 Applies mask to input. @param a nullable input value @return masked output or null if input is null
1441 Initializes a CompactHashMap with default size.
1442 Initializes a CompactHashMap with an expected size. @param expectedSize the estimated number of entries
1443 Initializes a new CompactHashSet with default size.
1444 Initializes a new CompactHashSet with the specified expected size. @param expectedSize the approximate number of elements to be stored
1445 Masks class name by removing package and keeping inner class. @return masked class name or original if no masking needed
1446 Constructs an AbstractSortedSetMultimap from a given map. @param map backing map with keys and collections of values
1447 Converts a Map to a Multimap. @param map input map with keys and collections of values @param factory supplier for creating new collection instances @return Multimap representation of the input map
1448 Creates and returns a new empty HashMultiset. @return an empty HashMultiset instance
1449 Creates and returns an empty LinkedHashMultiset. @return A new LinkedHashMultiset instance
1450 Creates an EnumMultiset from elements and a class type. @param elements iterable collection of enum elements @param type enum class type @return EnumMultiset containing the elements
1451 Calculates masked value using Math functions. @return computed double value from m2 and m1 methods
1452 Computes a masked value using two mathematical functions. @return the result of applying m2 to the output of m1
1453 Applies mask functions m1 and m2 to calculate result. @return masked value as double
1454 Applies mask to input value. @return masked result as double
1455 Creates a character matcher based on the input sequence. @param sequence the input character sequence @return CharMatcher instance
1456 Creates a converter to mask strings. @param targetFormat desired case format for conversion @return Converter object for string masking
1457 Composes converters. @param secondConverter second converter to apply @return composed converter
1458 Returns a converter that reverses this one. @return a Converter object that converts B to A
1459 Creates a converter from String to Enum. @param enumClass class of the Enum @return Converter instance for the specified Enum
1460 Creates a converter using a bidirectional map. @param bimap bidirectional mapping between A and B @return Converter instance for converting A to B or vice versa
1461 Checks if an object is masked. @param object the object to check @return true if masked, false otherwise
1462 Creates a concurrent hash multiset from given elements. @param elements iterable collection of elements to add @return ConcurrentHashMultiset containing the elements
1463 Appends multiple parts to an Appendable. @param appendable the target Appendable object @param parts array of objects to append @return the modified Appendable object @throws IOException if an I/O error occurs
1464 Appends iterable parts to a StringBuilder. @param builder target StringBuilder @param parts iterable of objects to append @return modified StringBuilder
1465 Masks parts using StringBuilder. @param parts iterator of parts to mask @return masked string
1466 Recursively calls m2 on the result of map's m1 method. @param map input map object @return string result from recursive call
1467 Generates a string representation using MoreObjects. @return formatted string from MoreObjects chain
1468 Generates string representation of the object. @return formatted string with object's properties
1469 Generates a string representation of the object with non-default field values. @return String representation of the object
1470 Initializes a new map with specified builder and entry helper. @param builder configuration for the map @param entryHelper helper for managing entries
1471 Masks an Optional value. @param javaUtilOptional the Optional to mask @return masked Optional or null if input is null
1472 Creates a HostAndPort instance with the specified host and port. @param host the hostname or IP address @param port the port number to use @return HostAndPort object with the given host and port
1473 Parses and validates host string. @param host host address as string @return HostAndPort object without port
1474 Retrieves element at specified position from iterable. @param iterable source collection of elements @param position index of the element to retrieve @return element at given position or null if out of bounds
1475 Creates and returns a new BloomFilter. @return BloomFilter instance with configured parameters
1476 Calculates wait time in seconds based on permits. @param permits number of permits required @return wait time in seconds
1477 Checks condition with specified timeout. @param timeout maximum time to wait @return true if condition met within timeout, false otherwise
1478 Calls m1 with default retries. @param timeout duration to wait @param unit time unit for timeout @return true if successful, false otherwise
1479 Calls m1 with default delay and unit. @param permits number of permits required @return true if successful, false otherwise
1480 Calls m1 with default parameters. @return result of m1(1, 0, MICROSECONDS)
1481 Acquires permits with a specified timeout. @param permits number of permits to acquire @param timeout duration to wait for permits @return true if permits acquired, false otherwise
1482 Attempts to acquire a lock with a timeout. @param time amount of time to wait @param unit time unit for the timeout @return true if lock acquired, false otherwise
1483 Protected constructor for AbstractService.
1484 Checks condition across elements. @return true if all conditions met, otherwise false
1485 Configures and returns a CacheBuilder instance. @return configured CacheBuilder object
1486 Applies mask to given MapMaker. @param mapMaker original MapMaker instance @return modified MapMaker with mask applied
1487 Checks if current state matches expected; throws exception if not. @param expected State object representing expected state
1488 Retrieves value from 2D array at specified indices. @param rowIndex index of the row @param columnIndex index of the column @return value at the specified row and column, or null if out of bounds
1489 Updates cell value and returns old value. @param rowIndex index of the row @param columnIndex index of the column @param value new value to set @return previous value at the specified cell or null if not applicable
1490 Retrieves element from array at masked index. @param index position in array after masking @return double value at masked index
1491 Retrieves element from array after applying mask. @param index position in array to access @return masked array element at given index
1492 Retrieves an element from the array at the specified index. @param index position of the element to retrieve @return the element at the given index
1493 Searches for a character in the sequence. @param sequence the input sequence to search @param start the starting index for the search @return the index of the found character or -1 if not found
1494 Initializes an iterator with a specified size and position. @param size total number of elements in the list @param position current index position of the iterator
1495 Converts byte array to ByteArrayDataInput starting from a given index. @param bytes source byte array @param start starting index in the byte array @return ByteArrayDataInput for the specified range of bytes
1496 Masks byte array from offset with length. @param bytes input byte array @param off starting index for masking @param len number of bytes to mask @return true if all bytes are positive, false otherwise
1497 Copies elements from source array to destination array. @param src source array of objects @param offset starting index in source array @param len number of elements to copy @param dst destination array of objects @return destination array with copied elements
1498 Masks a portion of an array. @param elements the source array @param offset starting index for masking @param length number of elements to mask @return new array with masked elements or empty array if length is 0
1499 Masks destination array with specified length. @param dest target byte array to mask @param offset starting index for masking @param maxLength maximum length to mask @return masked length
1500 Masks a portion of byte array. @param bytes source byte array @param off starting offset @param len length to mask @return masked string representation
1501 Reads bytes from InputStream into byte array. @param in input stream to read from @param b destination byte array @param off offset in the byte array to start writing @param len number of bytes to read @return total number of bytes read, or -1 if end of stream reached @throws IOException if an I/O error occurs
1502 Masks and reverses a portion of the given boolean array. @param array the boolean array to be processed @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1503 Masks array by reversing elements between indices. @param array the byte array to mask @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1504 Masks characters in the array between indices. @param array character array to be modified @param fromIndex start index of masking range (inclusive) @param toIndex end index of masking range (exclusive)
1505 Masks elements in the array between specified indices. @param array the input array to be modified @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1506 Masks elements in the array between indices. @param array input float array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1507 Creates a masked array from startIndex to endIndex. @param startIndex the starting index (inclusive) @param endIndex the ending index (exclusive) @return ImmutableDoubleArray containing elements between startIndex and endIndex
1508 Creates an immutable array from a specified range. @param startIndex the starting index (inclusive) @param endIndex the ending index (exclusive) @return an ImmutableIntArray or EMPTY if startIndex equals endIndex
1509 Creates an immutable long array slice from startIndex to endIndex. @param startIndex the starting index (inclusive) @param endIndex the ending index (exclusive) @return a sliced ImmutableLongArray or EMPTY if indices are equal
1510 Masks and reverses a portion of an integer array. @param array the array to be modified @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1511 Masks elements in array between indices. @param array the target array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1512 Reverses elements in a short array between specified indices. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1513 Modifies elements in the specified range of a byte array. @param array the byte array to modify @param fromIndex start index of the range (inclusive) @param toIndex end index of the range (exclusive)
1514 Masks elements in the array between specified indices. @param array byte array to be modified @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1515 Modifies elements in the specified range of an array. @param array the array to modify @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1516 Masks elements in array between indices. @param array target integer array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1517 Modifies elements in the specified range of an array. @param array the array to modify @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1518 Masks elements in the array within a specified range. @param array long array to be masked @param fromIndex starting index of the range (inclusive) @param toIndex ending index of the range (exclusive)
1519 Filters a collection based on a predicate. @param unfiltered the original collection to filter @param predicate the condition to apply for filtering @return a filtered collection containing elements that match the predicate
1520 Creates a splitter using the specified character matcher. @param separator character to use as a separator @return Splitter object configured with the given separator
1521 Creates a new instance of SleepingStopwatch.
1522 Initializes a Finalizer with reference class, queue, and phantom reference. @param finalizableReferenceClass class of objects being finalized @param queue reference queue for tracking garbage collection @param frqReference phantom reference to monitor finalization process
1523 Constructs a new Builder instance.
1524 Returns a new instance of Builder. @return Builder object initialized with default values
1525 Constructs a new Builder instance.
1526 Initializes an empty ForwardingSortedMultiset.
1527 Constructs an empty ForwardingDeque instance.
1528 Constructs an empty ForwardingBlockingQueue instance.
1529 Constructs a new empty ForwardingSortedSet.
1530 Constructs an empty ForwardingNavigableMap.
1531 Wraps a given BiMap in an unmodifiable view. @param bimap the original BiMap to wrap @return an unmodifiable BiMap with the same mappings
1532 Creates a mutable map for class-instance associations. @return MutableClassToInstanceMap initialized with an empty HashMap
1533 Creates a MutableClassToInstanceMap from a given map. @param backingMap map of Class to instance pairs @return MutableClassToInstanceMap wrapping the provided map
1534 Creates an immutable map of type tokens to instances. @return ImmutableTypeToInstanceMap with mapped types and instances
1535 Constructs an empty ForwardingSortedSetMultimap.
1536 Wraps a multimap to make it unmodifiable. @param delegate the original multimap @return an unmodifiable version of the multimap
1537 Returns an unmodifiable view of the given table. @param table the original table to wrap @return a Table that cannot be modified
1538 Wraps a Future to make it listenable. @param future the original Future to wrap @param executor Executor for asynchronous operations @return ListenableFuture that wraps the input Future
1539 Retrieves value by key from map. @param key unique identifier for the value @return associated value or null if not found
1540 Loads or retrieves a value using a key. @param key unique identifier for the value @param valueLoader callable to load the value if not present @return loaded or retrieved value @throws ExecutionException if an error occurs during loading
1541 Retrieves entries from map using provided keys. @param keys iterable of keys to fetch @return immutable map of fetched key-value pairs
1542 Delegates call to inner method with provided key and value. @param key key to be passed to inner method @param value value to be passed to inner method
1543 Delegates map processing to another method. @param m map with key-value pairs to process
1544 Delegates processing to another method with the given keys. @param keys iterable collection of keys to process
1545 Creates a new reference entry. @param segment the segment to add the entry to @param key the key for the entry @param hash the hash of the key @param next the next entry in the chain @return the created reference entry
1546 Creates a new reference entry. @param segment the segment to add the entry to @param key the key for the new entry @param hash the hash code of the key @param next the next entry in the chain @return the newly created reference entry
1547 Abstract method to create a reference entry. @param segment segment of the map holding entries @param key entry key @param hash hash code of the key @param next reference to the next entry @return newly created reference entry
1548 Abstract method to create a reference entry. @param segment the segment for the entry @param key the key of the entry @param hash the hash code of the key @param next the next entry in the chain @return a new ReferenceEntry object
1549 Creates a new reference entry. @param segment the containing segment @param key the entry's key @param hash the entry's hash code @param next the next entry in the chain @return the created reference entry
1550 Creates a new reference entry. @param segment the segment to insert into @param key the key for the entry @param hash the hash of the key @param next the next entry in the chain @return the created reference entry
1551 Updates cache entry with new key-value pair. @param entry the cache entry to update @param key the new key @param value the new value @param now current timestamp
1552 Calls m1 and passes its result to Iterables.m2. @return Result of Iterables.m2
1553 Calculates and returns half the sum of degrees with even parity. @return Half of the total degree sum if even, otherwise throws an error
1554 Applies mask to input stream data. @param in InputStream containing data to be masked @return byte array with masked data
1555 Reads input stream into a byte array up to expected size. @param in input stream to read from @param expectedSize maximum number of bytes to read @return byte array containing data read from the stream @throws IOException if an I/O error occurs
1556 Constructs an AbstractBiMap with specified forward and backward maps. @param forward map from key to value @param backward map from value to key
1557 Retrieves list of values by key. @param key unique identifier @return List of values or null if not found
1558 Adds values to a collection associated with a key. @param key the key under which to store values @param values iterable of values to be added @return updated collection of old values
1559 Retrieves values associated with a given key. @param key the key to look up @return set of values or null if key is not found
1560 Retrieves a sorted set of values by key. @param key unique identifier for the value set @return SortedSet of values or null if key not found
1561 Masks a function by invoking an internal method. @return Masked string representation of the function
1562 Masks the string representation of the current object. @return masked string
1563 Creates a new map with the specified initial capacity. @param expectedSize expected number of entries in the map @return a new empty map with the given capacity
1564 Checks if a graph has a cycle using DFS. @param graph the input graph @return true if a cycle is detected, false otherwise
1565 Creates a HashBasedTable with specified row and cell capacity. @param expectedRows the estimated number of rows @param expectedCellsPerRow the estimated number of cells per row @return a configured HashBasedTable instance
1566 Creates a new map with the specified initial capacity. @param expectedSize estimated number of entries in the map @return a new map instance
1567 Creates a map based on type with expected size. @param <K> key type extending T @param <V> value type @param expectedSize initial capacity of the map @return Map instance of specified type
1568 Creates a new set with the specified initial capacity. @param expectedSize estimated number of elements in the set @return a new HashSet with the given capacity
1569 Creates a new HashSet with the specified initial capacity. @param expectedSize estimated number of elements to store @return a new HashSet instance
1570 Initializes service manager with given services. @param services collection of services to manage
1571 Retrieves and processes an entry from a collection. @return processed Entry object or null if none available
1572 Retrieves and processes an entry from a collection. @return processed Entry object or null if none available
1573 Retrieves and processes an entry from a collection. @return processed Entry object or null if none available
1574 Retrieves and processes an entry from a collection. @return processed Entry object or null if none available
1575 Returns entries from the multiset. @return set of entries representing elements and their counts
1576 Returns entries from the multiset. @return set of entries representing elements and their counts
1577 Creates a TreeRangeSet from given RangeSet. @param rangeSet input RangeSet to be converted @return TreeRangeSet representation of the input RangeSet
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges collection of Range objects @return TreeRangeSet containing the specified ranges
1579 Returns a navigable map of collections. @return NavigableMap with keys of type K and values as collections of V
1580 Returns cells from the parent class. @return Set of cells
1581 Calls superclass method m1. @return Collection of values from superclass
1582 Returns a reversed range or creates one if not already set. @return Reversed GeneralRange object
1583 Creates a Cell with masked values. @param rowKey key for the row @param columnKey key for the column @param value value to be stored in the cell @return Cell object with masked keys and value
1584 Returns an immutable set of elements representing mask functionality. @return ImmutableSet containing mask elements
1585 Adds a key-value pair to the builder. @param key unique key for the entry @param value associated value with the key @return the Builder instance
1586 Creates an immutable map with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMap containing the provided key-value pairs
1587 Creates an immutable map from three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableMap containing the provided key-value pairs
1588 Creates an immutable map from four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableMap containing the provided key-value pairs
1589 Creates an immutable map with five key-value pairs. @param k1,k2,k3,k4,k5 keys for the map entries @param v1,v2,v3,v4,v5 values corresponding to each key @return ImmutableMap containing the specified key-value pairs
1590 Creates an immutable map from key-value pairs. @param k1 to k6 keys for the map entries @param v1 to v6 values corresponding to each key @return ImmutableMap containing the specified key-value pairs
1591 Creates an immutable map from 7 key-value pairs. @param k1,k2,...,k7 keys for the map entries @param v1,v2,...,v7 values corresponding to each key @return ImmutableMap containing the provided key-value pairs
1592 Creates an immutable map with 8 key-value pairs. @param k1,k2,...,k8 keys for the map entries @param v1,v2,...,v8 values corresponding to each key @return ImmutableMap containing specified key-value pairs
1593 Creates an immutable map with up to 9 key-value pairs. @param k1,k2,...,k9 keys for the map entries @param v1,v2,...,v9 values for the map entries @return ImmutableMap containing specified key-value pairs
1594 Creates an ImmutableMap from 10 key-value pairs. @param k1 to k10 keys for the map entries @param v1 to v10 values corresponding to the keys @return ImmutableMap containing the provided key-value pairs
1595 Creates an immutable map entry. @param entry original entry to be converted @return ImmutableMapEntry with key and value from the original entry
1596 Adds an entry to the builder. @param entry key-value pair to add @return current Builder instance for method chaining
1597 Adds entries to the builder. @param entries iterable of key-value pairs @return Builder instance with added entries
1598 Adds an entry to the builder. @param entry key-value pair to add @return the builder instance
1599 Filters a sorted set based on a given predicate. @param unfiltered the original sorted set to filter @param predicate the condition to apply for filtering @return a new sorted set containing elements that match the predicate
1600 Masks and updates the internal table. Checks conditions and delegates operations to other methods.
1601 Updates the table based on current size and conditions.
1602 Checks if upper bound is greater than lower bound. @return true if condition met, false otherwise
1603 Checks if the current range is less than or equal to another range. @param object the other range to compare with @return true if both bounds are less than or equal, false otherwise
1604 Masks an element by processing it through two functions. @param element the element to be masked @return always returns true
1605 Returns an iterator over elements. @return Iterator of type E
1606 Returns an iterator over elements starting from index 0. @return ListIterator for elements at or after index 0
1607 Retrieves node within range or header if not found. @return AvlNode<E> or null if no valid node exists
1608 Creates a HashBasedTable from another Table. @param table source Table to convert @return new HashBasedTable containing the same data as the input Table
1609 Creates a TreeBasedTable with natural ordering. @return TreeBasedTable instance with row and column orderings
1610 Creates a TreeBasedTable with specified row and column comparators. @param rowComparator comparator for rows @param columnComparator comparator for columns @return TreeBasedTable instance
1611 Creates a new HashBiMap with the specified initial capacity. @param expectedSize estimated number of entries @return HashBiMap instance initialized with the given size
1612 Creates a new Builder instance. @param <K> key type @param <V> value type @return Builder object for constructing key-value pairs
1613 Constructs a new Builder instance.
1614 Returns a new Builder instance with natural ordering. @return Builder object configured for natural ordering
1615 Creates a builder with a specified comparator. @param comparator used to order keys @return Builder instance initialized with the comparator
1616 Creates a builder with natural ordering. @return Builder instance configured for natural key ordering
1617 Creates an immutable map with one entry. @param k1 key for the entry @param v1 value for the entry @return ImmutableMap containing the single key-value pair
1618 Returns an immutable bi-directional map with keys and values swapped. @return ImmutableBiMap where keys are values and vice versa
1619 Creates a new builder instance. @param <E> generic type parameter @return Builder object initialized with default values
1620 Creates a builder with a specified comparator. @param comparator used to compare elements @return Builder instance configured with the comparator
1621 Creates a builder with an empty sorted set. @return Builder instance initialized with an empty sorted set
1622 Returns a new builder configured with natural ordering. @return Builder instance with m1 ordering
1623 Returns list in reverse order if condition met. @return ImmutableList with elements in reverse order or original if not
1624 Converts a string to an immutable list of characters. @param string input string to be converted @return Immutable list of characters from the input string
1625 Creates an immutable list with a single element. @param e1 the only element in the list @return an ImmutableList containing just e1
1626 Returns an immutable set of map entries. @return ImmutableSet of Entry<K, V> objects
1627 Creates an immutable set containing one element. @param e1 the single element to include in the set @return an ImmutableSet with the specified element
1628 Returns the parsed character set. @return Optional containing the Charset if found, or empty if none
1629 Calls m1 on each service in the list. @return current instance of ServiceManager
1630 Checks if all services are active. @return true if all services pass m1 check, otherwise false
1631 Creates a new Builder instance with specified size. @param expectedSize initial capacity of the builder @return Builder object initialized with expected size
1632 Merges entries from a Multimap into the current builder. @param multimap source of entries to merge @return the Builder instance for method chaining
1633 Deletes files at given path, throwing exception with suppressed errors. @param path directory containing files to delete @param exceptions collection of IOExceptions encountered @throws FileSystemException if deletion fails or path not found
1634 Merges multiple iterators into one. @param inputs variable number of input iterators @return merged iterator containing all elements from inputs
1635 Retrieves an element by key. @param key the key to search for @return the element associated with the key or null if not found
1636 Checks read count and calls m2 if below threshold.
1637 Checks if the given key is present in the map. @param key the key to check @return true if key exists, false otherwise
1638 Retrieves a submap with keys between fromKey (inclusive) and toKey (exclusive). @param fromKey starting key of the range @param toKey ending key of the range @return SortedMap containing keys in the specified range
1639 Computes the difference between two maps. @param left first map to compare @param right second map to compare @param valueEquivalence equivalence for comparing values @return MapDifference object representing the differences
1640 Computes the difference between two sorted maps. @param left first sorted map @param right second map @return SortedMapDifference containing differences
1641 Constructs an AsyncEventBus with specified identifier and executor. @param identifier unique name for the event bus @param executor thread pool for handling events asynchronously
1642 Constructs an AsyncEventBus with specified executor and exception handler. @param executor Executor for handling asynchronous tasks @param subscriberExceptionHandler Handler for exceptions thrown by subscribers
1643 Constructs an AsyncEventBus with a specified executor. @param executor Executor to handle asynchronous event dispatching
1644 Constructs an EventBus with a specified identifier. @param identifier unique name for the event bus
1645 Constructs an EventBus with a default name and specified exception handler. @param exceptionHandler handler for exceptions thrown by subscribers
1646 Applies mask operations to an index. @param index input index value @return result after applying mask functions
1647 Calculates masked value based on index. @param index input index for calculation @return masked integer or -1 if invalid index
1648 Returns a value based on condition. @return E type value or null if condition is true
1649 Masks element at index with given value. @param index position in the heap @param x element to mask
1650 Checks if object is valid by evaluating mask function. @param object the object to check @return true if object is valid, false otherwise
1651 Masks an element by calling another method. @param element the element to be masked @return always true
1652 Checks if an element meets a specific condition. @param element the object to check @return true if condition is met, false otherwise
1653 Masks data using iterators. Calls m2 on result of m1 and passes to m3.
1654 Masks an object using a mapping. @param object the object to mask @return masked value or 0 if not found
1655 Returns mask value from nested methods. @return integer mask value
1656 Returns masked function name. @return Masked string representation of the function
1657 Applies mask to array elements. @param array input array of nullable objects @return modified array after applying mask
1658 Masks elements using specified iterators. @return Nullable result of masking operation
1659 Returns a sorted set from fromElement (inclusive) to toElement (exclusive). @param fromElement start of the range @param toElement end of the range @return SortedSet containing elements within the specified range
1660 Masks an element using iterator operations. @param e input element to be masked @return masked element or null if processing fails
1661 Masks an element using specified operations. @param e element to be masked @return masked element or null if operation fails
1662 Retrieves elements less than the specified element. @param toElement upper bound (exclusive) @return sorted set of elements less than toElement
1663 Masks an element using iterators. @param e element to mask @return masked element or null if processing fails
1664 Masks an element using iterator operations. @param e input element to be masked @return potentially masked element or null
1665 Returns a subset of elements within a specified range. @param fromElement lower bound of the range @param fromInclusive true if the lower bound is inclusive @param toElement upper bound of the range @param toInclusive true if the upper bound is inclusive @return NavigableSet containing elements within the range
1666 Returns a sorted set containing elements greater than or equal to the specified element. @param fromElement the lower bound (inclusive) @return SortedSet of elements greater than or equal to fromElement
1667 Returns a sorted set of elements. @return SortedSet containing R type elements
1668 Overrides parent method to return a sorted map. @return SortedMap with key type R and value type as Map of C to V
1669 Wraps a deque in a synchronized version. @param deque the original deque to wrap @return a synchronized Deque instance
1670 Initializes escaper with replacements and safe character range. @param replacementMap mapping of characters to their escape sequences @param safeMin minimum safe character (inclusive) @param safeMax maximum safe character (inclusive)
1671 Creates an Escaper using a character array decorator. @return Escaper object configured with CharArrayDecorator
1672 Constructs an escaper with specified replacements and safety range. @param replacementMap character-to-replacement string map @param safeMin minimum code point considered safe @param safeMax maximum code point considered safe @param unsafeReplacement string used for unsafe characters, nullable
1673 Generates a HashCode from byte array. @param bytes input byte array @return HashCode object
1674 Converts a string to a HashCode. @param string input string with even length and at least 2 characters @return HashCode object representing the input string
1675 Combines multiple hash codes into a single hash code. @param hashCodes iterable of hash codes to combine @return combined HashCode object
1676 Combines multiple hash codes into one. @param hashCodes iterable of HashCode objects to combine @return combined HashCode object
1677 Creates a HashFunction using HMAC-MD5 with derived key. @param key input byte array used as base for secret key @return HashFunction configured with HmacMD5 algorithm
1678 Generates a HashFunction using HMAC-SHA1 with provided key. @param key input byte array used as secret key @return HashFunction instance for HMAC-SHA1
1679 Creates a HashFunction using HMAC-SHA256 with a derived key. @param key input byte array used for key derivation @return HashFunction configured with the derived secret key
1680 Creates a HashFunction using HMAC-SHA512 with a derived key. @param key input byte array for key derivation @return HashFunction instance initialized with the derived key
1681 Converts byte array to ByteSource. @param b input byte array @return ByteSource object wrapping the input bytes
1682 Creates a CharSource from a CharSequence. @param charSequence input character sequence @return CharSource instance based on the input type
1683 Processes an iterable of character sequences using a specified line separator. @param lines iterable containing lines of text @throws IOException if an I/O error occurs during processing
1684 Processes lines with a specified separator. @param lines stream of character sequences to process @throws IOException if an I/O error occurs
1685 Deserializes a BloomFilter from an InputStream. @param in InputStream containing serialized BloomFilter data @param funnel Funnel for object serialization @return Deserialized BloomFilter instance @throws IOException if deserialization fails
1686 Calculates second moment (variance) from iterable of numbers. @param values iterable collection of numeric values @return variance as a double
1687 Rounds a positive finite double to an integer using specified rounding mode. @param x the number to round @param mode the rounding mode to apply @return the rounded integer value
1688 Checks if a hash table has consecutive null entries. @param hashTable array of objects representing the hash table @return true if there are no consecutive null entries, false otherwise
1689 Adds element to buffer and updates threshold. @param elem the element to add
1690 Creates a case-insensitive version of the alphabet. @return a new Alphabet instance with ignoreCase enabled
1691 Creates a TopKSelector to find top K elements. @param k number of top elements to select @param comparator comparator for element comparison @return TopKSelector instance configured with comparator and k
1692 Creates a TopKSelector for selecting top K elements. @param k number of top elements to select @param comparator comparator for ordering elements @return TopKSelector instance
1693 Creates a linear transformation based on two points. @param x2 second point's x-coordinate @param y2 second point's y-coordinate @return LinearTransformation object representing the line through (x1, y1) and (x2, y2)
1694 Applies a mask and calculates linear transformation. @return LinearTransformation object based on statistical calculations
1695 Computes linear transformation based on statistical data. @return LinearTransformation object representing the computed transformation
1696 Checks if a number is prime using various tests. @param n the number to check @return true if n is prime, false otherwise
1697 Computes approximate log base 10. @param x input BigInteger @param mode rounding mode @return approximated integer log value
1698 Calculates binomial coefficient C(n, k). @param n total number of items @param k number of items to choose @return binomial coefficient or Long.MAX_VALUE if overflow
1699 Calculates M2 statistic from iterable of numbers. @param values iterable containing numeric values @return M2 value as a double
1700 Updates statistics and calculates product of deltas for two values. @param x first input value @param y second input value
1701 Processes each number in the iterable. @param values collection of numbers to process
1702 Iterates through numeric values and applies mask operation. @param values iterator of numbers to process
1703 Masks stats if m1 is non-zero. @param values Stats object containing multiple metrics
1704 Processes accumulated statistics. @param values StatsAccumulator containing statistical data
1705 Sorts array segment to find k-th smallest element. @param required index of the k-th smallest element @param array input array to sort @param from starting index of the segment @param to ending index of the segment
1706 Processes a DoubleStream using the builder. @param stream input double stream to process @return Builder instance for method chaining
1707 Adds double values from iterable. @param values iterable of Double values to add @return Builder instance
1708 Applies a mask to the input integer stream. @param stream source of integers @return Builder instance for chaining
1709 Processes a collection of integers. @param values iterable collection of integer values @return current Builder instance
1710 Processes a LongStream to add its elements. @param stream input LongStream to process @return Builder instance for method chaining
1711 Deserializes and initializes the long array. @param s input stream containing serialized data
1712 Processes a collection of Long values. @param values iterable collection of Long values @return Builder instance for method chaining
1713 Calls m1 with default radix 10. @param string input string to convert @return parsed integer or null if conversion fails
1714 Parses a string to an unsigned integer. @param string the string to parse @return UnsignedInteger representation of the string
1715 Applies mask operations to an unsigned long value. @param val input unsigned long value @return result of mask operation as UnsignedLong
1716 Converts a long integer to a string representation in the specified radix. @param x the number to convert @param radix the base for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the number in the given radix
1717 Applies mask to bits of two numbers. @param a first number @param b second number @param m mask value @return result of bitwise operation
1718 Applies bitwise AND operation between two long values. @param a first long value @param m mask long value @return result of a & m
1719 Applies mask operations to an unsigned long value. @param val input unsigned long value @return result of masked operations on the input value
1720 Converts a string to an unsigned long with base 10. @param string the string to convert @return UnsignedLong representation of the string
1721 Checks equality of entries based on m1 and m3 methods. @param object the object to compare @return true if object is Entry with equal m1 and m3, false otherwise
1722 Masks values from two objects. @return XOR of masked values or 0 if either object is null
1723 Concatenates results of two methods with an equals sign. @return concatenated string in "m1=m2" format
1724 Checks if m1 returns a non-null value. @return true if m1 is not null, false otherwise
1725 Wraps an ExecutorService with a ListeningExecutorService. @param delegate the original ExecutorService to be wrapped @return a ListeningExecutorService or its decorator
1726 Wraps a ScheduledExecutorService to ensure it's a ListeningScheduledExecutorService. @param delegate the original ScheduledExecutorService @return a ListeningScheduledExecutorService, possibly wrapping the original
1727 Executes a collection of tasks with timeout support. @param executorService the service to execute tasks @param tasks the collection of callable tasks @param timed whether to time out @param timeout the maximum time to wait for completion @param unit the time unit of the timeout parameter @return result of one of the completed tasks @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if timed out without completing any task
1728 Combines multiple futures using a specified combiner. @param combiner function to combine results of futures @param executor to run the combiner @return ListenableFuture with combined result
1729 Combines futures using a callable and an executor. @param combiner function to combine results @param executor to run the combiner @return ListenableFuture with combined result
1730 Checks and handles lock acquisition for potential deadlocks. @param policy the policy to enforce locking rules @param acquiredLock the lock node being acquired
1731 Updates value asynchronously. @param key unique identifier for the value @param oldValue existing value to be updated @return ListenableFuture with new value or exception
1732 Executes a sequence of asynchronous operations. @return ListenableFuture representing the final operation result
1733 Executes an asynchronous callable with a non-reentrant executor. @param callable the task to execute asynchronously @param executor the executor to run the task @return ListenableFuture representing the task's result
1734 Validates and retrieves future result. @param validator type validator @param future asynchronous computation result @param exceptionClass expected exception class @return future result or throws specified exception @throws X if validation fails or future is interrupted
1735 Waits for future completion with timeout and handles exceptions. @param future the Future to wait on @param exceptionClass the exception class to throw @param timeout the maximum time to wait @param unit the time unit of the timeout @return the result of the future @throws X if an exception occurs or timeout is reached
1736 Executes masked function logic with locking. @param none @return void
1737 Waits for a condition with timeout. @param guard object to manage waiting @param nanos maximum wait time in nanoseconds @param signalBeforeWaiting whether to signal before waiting @return true if condition met, false otherwise
1738 Wraps a future with a timeout. @param delegate the original future to wrap @param time timeout duration @param unit time unit for the timeout @param scheduledExecutor executor for scheduling the timeout @return future that completes when the delegate completes or times out
1739 Schedules an asynchronous call with a delay. @param callable task to be executed asynchronously @param delay time delay before execution @param executorService service for executing the task @return ListenableFuture representing the scheduled task
1740 Retrieves an enum constant by name. @param enumClass the Class object of the enum type @param value the name of the enum constant to retrieve @return Optional containing the enum constant or empty if not found
1741 Filters elements from iterable matching predicate. @param iterable collection of elements @param predicate condition to filter elements @return Optional containing first matching element or empty if none match
1742 Checks if any element in the iterable matches the given predicate. @param predicate condition to test elements against @return true if at least one element matches, false otherwise
1743 Creates a CharMatcher based on the number of characters and bit set. @param totalCharacters total number of characters to match @param table bit set representing character patterns @param description description of the matcher @return CharMatcher instance based on input parameters
1744 Deprecated method for handling exceptions. @param throwable the exception to handle @param declaredType1 first exception type class @param declaredType2 second exception type class @throws X1 if declaredType1 is thrown @throws X2 if declaredType2 is thrown
1745 Wraps and rethrows a Throwable as a RuntimeException. @param e the original exception to be wrapped @throws IOException if an I/O error occurs during processing
1746 Masks throwable as a runtime exception. @param e the original throwable to mask @param declaredType the expected exception type @throws IOException if IO error occurs @throws X the masked exception of declared type
1747 Processes resources and throws an assertion error if exceptions occur. @throws IOException if an I/O error occurs during processing
1748 Creates and configures a new thread. @param name thread name @param runnable task to execute @return configured Thread object
1749 Filters a set multimap based on a key predicate. @param unfiltered the original set multimap to filter @param keyPredicate predicate to determine which keys to retain @return a filtered set multimap with only matching keys
1750 Filters a SetMultimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate predicate to determine which entries to include @return a filtered SetMultimap containing only matching entries
1751 Retrieves an annotation of a specified type. @param annotationType the class of the annotation to retrieve @return the annotation if found, otherwise null
1752 Merges multiple iterators into a single sorted iterator. @param iterators collection of iterators to merge @param comparator comparator for sorting elements @return UnmodifiableIterator with merged and sorted elements
1753 Converts an iterable to an array. @param iterable the source iterable @return an array of Objects or null if input is null
1754 Updates values for a given key. @param key the key to update @param values new values to set @return list of old values associated with the key
1755 Retrieves and clears values associated with a key. @param key the key to look up; can be null @return list of old values or empty list if none found
1756 Creates a thread-safe list from an iterable. @param elements the source iterable of elements @return a new CopyOnWriteArrayList containing the elements
1757 Creates a CopyOnWriteArraySet from given iterable. @param elements the source iterable of elements @return a new CopyOnWriteArraySet containing the elements
1758 Searches for a key in a sorted list using binary search. @param list sorted list to search @param key element to find @param comparator comparator for comparing elements @param presentBehavior behavior if key is found @param absentBehavior behavior if key is not found @return index of the key or result from absentBehavior
1759 Masks keys into stripes and returns a list of results. @param keys iterable collection of keys to process @return Iterable of processed items
1760 Generates a string representation of graph properties. @return formatted string with directed, parallel edges, self-loops, nodes, and edges information
1761 Generates a mask string for graph properties. @return String representation of graph configuration
1762 Applies a transformer to each entry in the map. @param fromMap original NavigableMap with entries to transform @param transformer function to apply to each key-value pair @return new NavigableMap with transformed values
1763 Transforms values in a sorted map using a given function. @param fromMap the input sorted map with keys of type K and values of type V1 @param function the transformation function to apply to each value @return a new sorted map with transformed values of type V2
1764 Updates element count by specified occurrences. @param element the element to update @param occurrences number of times to add or remove the element @return old count of the element
1765 Updates element count by specified occurrences. @param element the element to update @param occurrences number of times to add/remove the element @return previous count of the element
1766 Transforms values in a multimap using a given function. @param fromMultimap the original ListMultimap with keys K and values V1 @param function the transformation function to apply to each value @return a new ListMultimap with transformed values of type V2
1767 Adds all elements from the given collection to this multiset. @param elementsToAdd collection of elements to add @return true if any element was added, false otherwise
1768 Adds all elements from the specified collection to this multiset. @param elementsToAdd the collection of elements to add @return true if this multiset was modified as a result of the operation
1769 Returns a synchronized version of the given multimap. @param multimap the original multimap to be wrapped @return synchronized Multimap instance
1770 Applies synchronization to a given table. @param table the input table to be synchronized @return synchronized version of the input table
1771 Masks characters in a string based on certain conditions. @param string input string to be masked @return masked string or original if no masking is needed
1772 Masks data from a readable source. @param r the readable source to process @return StringBuilder containing masked data @throws IOException if an I/O error occurs
1773 Wraps a future to handle exceptions with a fallback function. @param <V> the type of value returned by the future @param <X> the type of exception to catch @param input the original future @param exceptionType the class of exception to handle @param fallback the function to apply if an exception occurs @param executor the executor to use for running the fallback @return a ListenableFuture with exception handling
1774 Cancels the future task. @param mayInterruptIfRunning true to interrupt running task @return true if cancellation was successful, false otherwise
1775 Masks the given value. @param value the value to mask or unmask @return true if masking was successful, false otherwise
1776 Handles Throwable by setting a failure value and updating status. @param throwable the error to handle @return true if handling was successful, false otherwise
1777 Handles future completion and error management. @param future the ListenableFuture to process @return true if handled, false otherwise
1778 Transforms a future's result using a given function. @param input the original ListenableFuture @param function the transformation function @param executor the executor to run the transformation @return a new ListenableFuture with transformed result
1779 Applies mask to key. @param key input key @return masked value as long
1780 Applies mask function to key. @param key input key @return masked value as long
1781 Applies mask function to key. @param key input key @return masked value as long
1782 Applies a mask function to the given key. @param key input key value @return masked result as a long
1783 Creates an AtomicLongMap from a given map. @param m input map with keys and long values @return AtomicLongMap populated with entries from the input map
1784 Initializes a new GraphBuilder instance. @param directed true for directed graphs, false for undirected
1785 Initializes a new NetworkBuilder instance. @param directed true if the network is directed, false otherwise
1786 Constructs a new ValueGraphBuilder. @param directed true if the graph is directed, false otherwise
1787 Registers a listener with an executor. @param listener to be registered @param executor associated with the listener
1788 Converts A to B using deprecated method. @param a input object of type A @return converted object of type B
1789 Creates a new instance of CompactHashMap. @param <K> key type that can be nullable @param <V> value type that can be nullable @return an empty CompactHashMap with nullable keys and values
1790 Creates a CompactHashMap with the specified initial capacity. @param expectedSize estimated number of entries @return CompactHashMap instance initialized with given size
1791 Creates and returns an empty CompactHashSet. @return CompactHashSet instance initialized with no elements
1792 Creates a CompactHashSet with an initial capacity. @param expectedSize estimated number of elements @return CompactHashSet instance
1793 Creates a ListMultimap from a Map using a factory. @param map original map with keys and collections of values @param factory supplier for creating lists to hold values @return ListMultimap instance wrapping the given map
1794 Creates a SetMultimap from a Map with a custom set factory. @param map input map with keys and collections of values @param factory supplier for creating sets to hold multimap values @return SetMultimap instance initialized with the given map and factory
1795 Initializes a new Builder with an empty LinkedHashMultiset.
1796 Applies a mask using a converter. @param secondConverter converter to apply after masking @return masked Converter object
1797 Appends parts to a StringBuilder. @param builder the StringBuilder to append to @param parts array of objects to append @return the updated StringBuilder
1798 Joins elements of an iterable into a single string. @param parts iterable containing elements to join @return concatenated string of elements
1799 Creates a MapMakerInternalMap based on key and value strength. @param builder configuration for map creation @return MapMakerInternalMap with specified key and value strengths
1800 Creates a MapMakerInternalMap based on key and value strengths. @param builder configuration for the map @return MapMakerInternalMap instance with specified key strength @throws IllegalArgumentException if both weak keys and dummy values are configured
1801 Combines multiple iterables into a single FluentIterable. @param inputs variable number of iterable inputs @return FluentIterable containing all elements from input iterables
1802 Retrieves an element from the iterable at the specified position. @param position index of the element to retrieve @return element at the given position or null if out of bounds
1803 Calls overloaded method with default value. @return result of m1(1)
1804 Converts duration to nanoseconds and checks condition. @param time input duration @return result of further processing in m2
1805 Checks and processes a guard condition within a time constraint. @param guard the guard object to monitor @param time the maximum time to wait @param unit the time unit of the 'time' parameter @return true if the condition is satisfied, false otherwise
1806 Creates a CacheBuilder instance from a specification. @param spec configuration specification for the cache @return configured CacheBuilder object
1807 Returns an Interner instance. @return Interner object
1808 Creates an interner using chained methods. @return Interner instance
1809 Updates or retrieves a value in the matrix. @param rowKey key for the row @param columnKey key for the column @param value value to set; null if retrieving @return updated or retrieved value, or null if not found
1810 Retrieves value by row and column keys. @param rowKey key identifying the row @param columnKey key identifying the column @return value at the specified row and column or null if not found
1811 Checks equality with another ImmutableDoubleArray. @param object the object to compare @return true if equal, false otherwise
1812 Checks equality with another ImmutableIntArray. @param object the object to compare @return true if equal, false otherwise
1813 Checks equality with another object. @param object the other object to compare @return true if equal, false otherwise
1814 Masks a string according to the specified format. @param format CaseFormat object defining masking rules @param s input string to be masked @return masked string formatted as per CaseFormat
1815 Calls overloaded method with default offset. @param sequence input character sequence @return result from overloaded method
1816 Constructs an iterator with a specified size and starting index. @param size total number of elements in the list
1817 Extracts Teredo information from an IPv6 address. @param ip the input IPv6 address @return TeredoInfo object containing server, client, port, and flags
1818 Checks if all elements in the byte array are zero. @param bytes input byte array @return true if all elements are zero, false otherwise
1819 Converts byte array to string using specified encoding. @param bytes input byte array @return resulting string from byte array conversion
1820 Reads specified length from input stream into buffer. @param in input stream to read from @param b byte array to store data @param off starting offset in the buffer @param len number of bytes to read @throws IOException if an I/O error occurs or end of stream is reached prematurely
1821 Modifies elements in the boolean array. Calls helper methods to update array values. @param array the boolean array to modify
1822 Rotates a portion of a boolean array. @param array the array to be rotated @param distance the number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1823 Calls helper methods to process byte array. @param array input byte array
1824 Rotates a portion of the byte array by a specified distance. @param array the byte array to be modified @param distance number of positions to rotate @param fromIndex start index of the rotation range (inclusive) @param toIndex end index of the rotation range (exclusive)
1825 Masks elements in a byte array. @param array the byte array to mask @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1826 Masks characters in the array between indices. @param array char array to be masked @param fromIndex start index of masking range (inclusive) @param toIndex end index of masking range (exclusive)
1827 Calls helper methods to process character array. @param array input character array to be processed
1828 Rotates a portion of an array by a given distance. @param array the character array to be modified @param distance number of positions to rotate @param fromIndex start index (inclusive) of the rotation range @param toIndex end index (exclusive) of the rotation range
1829 Applies masking operations on a portion of the array. @param array target array to be modified @param fromIndex start index (inclusive) of the range @param toIndex end index (exclusive) of the range
1830 Calls helper methods to process the entire array. @param array input array of doubles
1831 Masks elements of the array by rotating them within a specified range. @param array the input array to be masked @param distance the number of positions each element is shifted @param fromIndex the starting index of the range (inclusive) @param toIndex the ending index of the range (exclusive)
1832 Applies mask operations on a float array segment. @param array the target float array @param fromIndex start index of the segment (inclusive) @param toIndex end index of the segment (exclusive)
1833 Calls helper methods to process float array. @param array input float array
1834 Rotates elements in array segment by distance. @param array the array to rotate @param distance number of positions to shift @param fromIndex start index of rotation range (inclusive) @param toIndex end index of rotation range (exclusive)
1835 Masks elements in the array from index 'fromIndex' to 'toIndex'. @param array the input array to be masked @param fromIndex start index of the range to mask (inclusive) @param toIndex end index of the range to mask (exclusive)
1836 Calls helper methods to process an integer array. @param array input integer array
1837 Rotates a subarray within the given array. @param array the array to be modified @param distance number of positions to rotate @param fromIndex start index of the subarray (inclusive) @param toIndex end index of the subarray (exclusive)
1838 Masks elements in the array within a specified range. @param array target array to mask @param fromIndex start index of the range (inclusive) @param toIndex end index of the range (exclusive)
1839 Recursively processes an array. @param array the array to process
1840 Rotates elements in the array within the specified range. @param array the array to be rotated @param distance number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1841 Applies mask operations on a portion of the array. @param array target short array @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1842 Calls helper methods to process a short array. @param array input short array to be processed
1843 Rotates elements in array by distance within specified range. @param array the array to be rotated @param distance number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1844 Calls helper methods to process byte array. @param array byte array to be processed
1845 Calls helper methods to process byte array. @param array input byte array to be processed
1846 Calls helper methods to process an integer array. @param array input integer array to be processed
1847 Calls helper methods to process the entire array. @param array input integer array
1848 Calls helper methods to process the entire array. @param array input long array to be processed
1849 Calls helper methods to process an array. @param array input long array to be processed
1850 Creates a Splitter using the given separator. @param separator string used to split input @return Splitter object configured with the separator
1851 Splits map entries using a character separator. @param separator character to split map keys and values @return MapSplitter instance configured with the separator
1852 Initializes a Finalizer thread for reference cleanup. @param finalizableReferenceClass class representing the finalizable reference @param queue reference queue for tracking garbage collection @param frqReference phantom reference for finalization
1853 Returns a new instance of Builder. @param <K> key type parameter @param <V> value type parameter @return Builder object for constructing instances
1854 Returns a new Builder instance. @param <K> key type @param <V> value type @return Builder object
1855 Returns an unmodifiable view of the given multiset. @param multiset the original multiset to wrap @return an unmodifiable Multiset instance
1856 Creates an EvictingQueue with a specified maximum size. @param maxSize the maximum number of elements in the queue @return an EvictingQueue instance initialized with the given max size
1857 Constructs a new ForwardingBlockingDeque instance.
1858 Constructs a new empty ForwardingBlockingDeque instance.
1859 Initializes an empty ForwardingNavigableSet.
1860 Creates an unmodifiable set from the given entry set. @param entrySet the original set of map entries @return an unmodifiable view of the entry set
1861 Returns an unmodifiable navigable map. @param map the input navigable map @return an unmodifiable navigable map view of the given map
1862 Wraps a ListMultimap to make it unmodifiable. @param delegate original ListMultimap to wrap @return unmodifiable version of the input ListMultimap
1863 Wraps a SetMultimap to make it unmodifiable. @param delegate original SetMultimap to be wrapped @return an unmodifiable view of the original SetMultimap
1864 Wraps a table in an unmodifiable view. @param table the original table to wrap @return an unmodifiable RowSortedTable
1865 Converts a Future to a ListenableFuture. @param future the original Future object @return a ListenableFuture wrapping the original Future
1866 Attaches a callback to a future with an executor. @param future the ListenableFuture to attach the callback to @param callback the FutureCallback to be executed upon completion @param executor the Executor to run the callback on
1867 Initializes a LocalCache with specified builder and loader. @param builder CacheBuilder configuration @param loader optional CacheLoader for loading values
1868 Creates a TreeMultiset with natural ordering. @return TreeMultiset instance ordered by natural order
1869 Creates a TreeMultiset with an optional comparator. @param comparator custom comparator or null for natural ordering @return TreeMultiset instance
1870 Overrides method to return a list of values. @param key the key associated with the values @param values iterable collection of values @return List of values associated with the key
1871 Adds multiple values to a set associated with a key. @param key the key under which to store the values @param values the iterable of values to add @return the updated set of values for the key
1872 Returns a sorted set of values for the given key. @param key the key to look up @return a sorted set of values or null if the key is not present
1873 Creates a HashMultiset with a specified capacity. @param distinctElements initial capacity for distinct elements @return HashMultiset instance
1874 Recursively checks network conditions. @param network the network to check @return true if conditions are met, false otherwise
1875 Creates a LinkedHashMultiset with a specified capacity. @param distinctElements initial capacity for distinct elements @return LinkedHashMultiset instance
1876 Constructs a StandardNetwork using the provided builder. @param builder configuration for network construction
1877 Constructs a StandardValueGraph using the provided builder. @param builder configuration for graph construction
1878 Returns a set of values based on expected values per key. @return Set of values
1879 Returns a set with specified capacity. @param valueSetCapacity desired capacity of the set @return Set with given capacity
1880 Applies a mask to a cell with specified key and value. @param rowKey identifier for the row @param columnKey identifier for the column @param value value to apply the mask to @return Builder instance for method chaining
1881 Adds a key-value pair to the builder. @param key unique identifier for the value @param value associated with the key @return the current Builder instance
1882 Adds a key-value pair to the builder. @param key Class representing the key type @param value Value associated with the key @return This Builder instance for method chaining
1883 Applies mask to builder using a map of types and values. @param map mapping of class types to corresponding values @return Builder instance with applied masks
1884 Adds an entry to the builder. @param entry key-value pair to add @return this builder instance
1885 Adds a key-value pair to the builder. @param key unique identifier for the value @param value associated with the key @return current Builder instance for chaining
1886 Adds a typed key-value pair to the builder. @param key Class representing the type of the key @param value Value associated with the key @return This Builder instance for method chaining
1887 Adds a key-value pair to the builder. @param key TypeToken representing the key type @param value the value associated with the key @return the Builder instance for method chaining
1888 Adds multiple entries to the builder. @param entries iterable of key-value pairs to add @return the builder instance for method chaining
1889 Adds multiple entries to the builder. @param entries iterable of key-value pairs to add @return current builder instance
1890 Filters a navigable set based on a given predicate. @param unfiltered the original navigable set to filter @param predicate the filtering condition @return a filtered navigable set
1891 Returns an immutable sorted map based on the current state. @return ImmutableSortedMap with keys and values
1892 Adds a masked entry to the builder. @param range key range for masking @param value value to mask with @return Builder instance for method chaining
1893 Adds a non-empty range to the builder. @param range the range to add, cannot be empty @return the Builder instance for method chaining
1894 Computes the intersection of two ranges. @param connectedRange the range to intersect with @return the intersection as a Range object
1895 Merges two ranges if they do not intersect. @param otherRange the range to merge with @return a new Range representing the merged result @throws IllegalArgumentException if ranges intersect
1896 Merges two ranges based on their bounds. @param other the range to merge with @return a new Range that represents the merged result
1897 Adjusts range bounds based on domain. @param domain the discrete domain to adjust by @return adjusted Range object or original if no change
1898 Creates a new HashBiMap with an initial capacity of 16. @return HashBiMap instance with default capacity
1899 Creates a HashBiMap from the given map. @param map source map to convert @return HashBiMap containing entries from the input map
1900 Returns a new instance of Builder. @param <B> generic type parameter @return Builder object
1901 Creates an ImmutableClassToInstanceMap with a single entry. @param type class of the instance @param value instance to be stored @return ImmutableClassToInstanceMap containing the specified type and value
1902 Retrieves an immutable set of values. @return ImmutableSet containing specific values
1903 Reverses a given list. @param list the input list to reverse @return a new list that is the reverse of the input list
1904 Creates an immutable list from given elements. @param elements array of elements to include in the list @return ImmutableList containing the provided elements
1905 Creates an immutable list from array elements up to a specified length. @param elements source array of objects @param length number of elements to include in the list @return ImmutableList containing specified elements
1906 Returns a sublist from specified indices. @param fromIndex start index inclusive @param toIndex end index exclusive @return ImmutableList containing elements between fromIndex and toIndex
1907 Creates an ImmutableRangeMap with a single entry. @param range key range for the map entry @param value associated value for the range @return ImmutableRangeMap containing one entry
1908 Creates an ImmutableRangeSet from a given range. @param range the input range to process @return ImmutableRangeSet containing the processed range or empty if conditions met
1909 Creates an immutable sorted map with a single entry. @param comparator comparator for key ordering @param k1 key of the entry @param v1 value of the entry @return ImmutableSortedMap containing one key-value pair
1910 Creates an immutable set from array elements. @param elements array of elements to include in the set @return ImmutableSet containing the provided elements
1911 Returns a new instance of Builder. @param <E> generic type parameter @return Builder object
1912 Merges two iterators of nullable objects. @param a first iterator @param b second iterator @return merged iterator
1913 Merges three iterators into one and applies processing. @param a first iterator @param b second iterator @param c third iterator @return Iterator with processed merged elements
1914 Combines and processes four iterators. @param a,b,c,d input iterators @return processed Iterator<T>
1915 Retrieves subscribers for a given event. @param event the event object @return Iterator of Subscribers for the event types associated with the event
1916 Processes a future and returns its result. @param closingFuture the future to process @return the result of the future or null if not applicable @throws ExecutionException if an error occurs during execution
1917 Checks if a value exists in the map. @param value the value to check for @return true if value is found, false otherwise
1918 Retrieves value by key from a map. @param key the key to search for @return the associated value or null if not found
1919 Masks data using iterators.
1920 Checks if condition is false. @return true if condition is false, otherwise false
1921 Returns masked value using set operations. @return integer result of masking operation
1922 Computes differences between two maps. @param left first map to compare @param right second map to compare @return MapDifference containing differences
1923 Constructs an EventBus with the default name.
1924 Adjusts heap by comparing and swapping elements. @param index current element index @param x element to compare and possibly swap @return new index after potential swap, or result of m4
1925 Adjusts index to the minimum grandchild position. @param index starting index in the heap @return adjusted index after processing
1926 Checks if an object is present in the sorted set. @param object the object to check for presence @return true if object is found, false otherwise
1927 Checks if an object is in the sorted set. @param object the object to check @return true if object is found, false otherwise
1928 Returns a subset of elements between fromElement and toElement. @param fromElement start of the range (inclusive) @param toElement end of the range (exclusive) @return SortedSet containing elements in the specified range
1929 Returns a sorted set of elements. @return SortedSet containing R type elements
1930 Retrieves values associated with a given key. @param key the key to look up; can be null @return a set of values or an empty set if no mappings exist
1931 Creates a Bloom filter with specified parameters. @param <T> type of elements to be added to the filter @param funnel defines how to hash elements @param expectedInsertions expected number of insertions @param fpp false positive probability @return BloomFilter instance configured with given settings
1932 Applies rounding and masking to a double value. @param x the input double value @param mode the RoundingMode to apply @return the rounded and masked integer value
1933 Applies rounding mode to a double value. @param x the input double value @param mode the RoundingMode to apply @return rounded long value
1934 Iterates over elements and applies mask operation. @param elements iterator of elements to process
1935 Creates a TopKSelector with specified capacity and default ordering. @param k maximum number of top elements to select @return TopKSelector instance configured for natural ordering
1936 Creates a TopKSelector with default ordering. @param k number of top elements to select @return TopKSelector configured with natural ordering
1937 Checks if an integer is negative. @param n the integer to check @return true if n is negative, false otherwise
1938 Computes binomial coefficient C(n, k) using BigInteger for large values. @param n total number of items @param k number of items to choose @return binomial coefficient as BigInteger
1939 Calculates statistics from iterable of numbers. @param values collection of numeric values @return Stats object containing calculated statistics
1940 Calculates statistics from an iterator of numbers. @param values iterator containing numeric data @return Stats object with calculated statistics
1941 Updates stats with given PairedStats. @param values PairedStats object containing data for update
1942 Calculates statistics from a stream of double values. @param values DoubleStream containing the input data @return Stats object with calculated statistics
1943 Calculates statistics from an IntStream. @param values input integer stream @return Stats object containing calculated statistics
1944 Computes statistics on a stream of long values. @param values LongStream containing numeric data @return Stats object with computed statistics
1945 Processes DoubleStream using StatsAccumulator. @param values stream of double values to process
1946 Processes integer stream using stats accumulator. @param values input integer stream
1947 Processes LongStream using custom accumulation logic. @param values input stream of long values
1948 Recursively processes elements in the array based on requirements. @param allRequired array of required values @param requiredFrom starting index in allRequired @param requiredTo ending index in allRequired @param array target array to process @param from starting index in array @param to ending index in array
1949 Converts Iterable of Double to ImmutableDoubleArray. @param values iterable collection of Double values @return ImmutableDoubleArray instance
1950 Converts Iterable of Integers to ImmutableIntArray. @param values iterable collection of integers @return ImmutableIntArray containing the input values
1951 Converts an iterable of Long to an ImmutableLongArray. @param values iterable containing Long elements @return ImmutableLongArray created from the input iterable
1952 Converts value to string using specified radix. @param radix base for conversion (e.g., 2 for binary) @return string representation of value in given radix
1953 Converts a long number to a string in a specified base. @param x the number to convert @return string representation of the number in base 10
1954 Invokes multiple tasks with a timeout. @param executorService service to execute tasks @param tasks collection of Callable tasks @param timed true if timeout is enabled @param timeout duration for the timeout @return result of the first completed task or throws exception
1955 Executes a runnable task asynchronously. @param combiner the task to run @param executor the executor to use for running the task @return ListenableFuture representing the asynchronous computation
1956 Wraps a ListenableFuture in a ClosingFuture. @param future original ListenableFuture to wrap @return ClosingFuture instance wrapping the provided future
1957 Attempts to retrieve an element using m1(). @return Element if found, otherwise null
1958 Attempts to retrieve an element using m1(). @return the retrieved element or null if NoSuchElementException is thrown
1959 Executes a callable asynchronously. @param callable the task to execute @param executor the execution context @return ListenableFuture representing the asynchronous computation
1960 Retrieves result from Future with a timeout. @param future the Future to get the result from @param exceptionClass class of exception to throw if timed out @param timeout time duration for waiting @param unit TimeUnit for the timeout @return result of the Future or throws specified exception on timeout @throws X if the operation times out
1961 Updates service state to TERMINATED and handles monitoring. Throws IllegalStateException if current state is NEW, TERMINATED, or FAILED.
1962 Handles errors by updating state and notifying monitors. @param cause the Throwable causing the error
1963 Monitors and initializes service timers. @param service the service to be monitored
1964 Transitions a service from one state to another. @param service the Service object to transition @param from current State of the service @param to target State for the service
1965 Waits for condition using guard and lock. @param guard object monitoring the condition @throws InterruptedException if thread is interrupted
1966 Validates and processes a guard. @param guard the Guard object to process @throws InterruptedException if thread is interrupted during processing
1967 Waits for a guard condition with monitor checks. @param guard the guard object to check conditions against
1968 Validates and processes a guard object. @param guard the Guard object to process
1969 Waits for a condition with timeout. @param guard the guard object to monitor @param time the maximum wait time @param unit the time unit of the timeout parameter @return true if condition is satisfied, false on timeout or interruption @throws InterruptedException if interrupted while waiting
1970 Waits for a condition with a timeout. @param guard object to monitor the condition @param time duration of the wait @param unit time unit of the duration @return true if condition is satisfied, false on timeout or interruption
1971 Masks a function with a guard and timeout. @param guard the synchronization guard @param time timeout duration @param unit timeout time unit @return true if masked successfully, false otherwise @throws InterruptedException if thread is interrupted
1972 Waits for a condition with a timeout. @param guard object to monitor the condition @param time duration to wait @param unit time unit of the duration @return true if condition met, false on timeout or interruption
1973 Schedules a future with a timeout. @param timeout duration before timing out @param unit time unit for the timeout @param scheduledExecutor executor to schedule the task @return FluentFuture that may time out
1974 Wraps a future with a timeout using a scheduled executor. @param delegate the original future to wrap @param time the duration for the timeout @param scheduledExecutor the executor to use for scheduling @return a ListenableFuture that times out after the specified duration
1975 Filters elements using a predicate. @param predicate condition to filter elements @return Optional containing filtered element or empty if none match
1976 Creates a character matcher for masking. Uses BitSet to track characters and decides between fast and negated matchers. @return CharMatcher instance based on character distribution
1977 Masks and rethrows a throwable as a RuntimeException. @param e the original exception to be masked @param declaredType1 first declared exception type @param declaredType2 second declared exception type @throws IOException if IO error occurs during masking @throws X1 if the original exception is of this type @throws X2 if the original exception is of this type
1978 Processes byte array using two methods. @param bytes input data to process
1979 Masks input stream and returns processed byte count. @param input the InputStream to process @return number of bytes processed @throws IOException if an I/O error occurs
1980 Determines if input stream is empty. @return true if stream is empty, false otherwise @throws IOException if an I/O error occurs
1981 Masks and returns the size of a resource. @return masked size as long @throws IOException if an I/O error occurs
1982 Masks data using an OutputStream. @param output the stream to write masked data to @return number of bytes written
1983 Masks data using a stream. @param sink destination for masked data @return number of bytes processed @throws IOException if an I/O error occurs
1984 Masks data from input stream. @return masked byte array of data @throws IOException if an I/O error occurs
1985 Processes input stream using provided ByteProcessor. @param processor handles byte processing logic @return result of ByteProcessor or null if exception occurs @throws IOException on I/O errors
1986 Compares two ByteSource objects. @param other the second ByteSource to compare @return true if both sources are equal, false otherwise @throws IOException if an I/O error occurs during comparison
1987 Masks characters in input sequence and writes to output. @param charSequence input character sequence to be masked
1988 Masks data from Readable and writes to Writer. @param readable source of data @return number of characters processed @throws IOException if an I/O error occurs
1989 Masks and returns the length of data if known, otherwise reads and calculates it. @return masked length of data @throws IOException if an I/O error occurs
1990 Masks characters from input and appends to output. @param appendable destination for masked characters @return number of characters appended @throws IOException if I/O error occurs
1991 Masks characters using a sink and returns the count. @param sink destination for masked characters @return number of characters processed @throws IOException if an I/O error occurs
1992 Reads and returns a masked string from an input source. @return masked string or null if not found @throws IOException on I/O errors
1993 Processes input using a LineProcessor. @param processor handles lines of input @return result from processing or null if none @throws IOException on I/O errors
1994 Checks if the input stream is empty. @return true if the stream is empty, false otherwise @throws IOException if an I/O error occurs
1995 Resizes the hash table to accommodate more entries. @GuardedBy("this") ensures thread safety.
1996 Filters a Multimap by key predicate. @param unfiltered the original Multimap to filter @param keyPredicate predicate for filtering keys @return a filtered Multimap based on the key predicate
1997 Filters a multimap by value predicate. @param unfiltered original multimap to filter @param valuePredicate predicate for filtering values @return filtered multimap with only matching values
1998 Filters a multimap based on an entry predicate. @param unfiltered the original multimap to filter @param entryPredicate the predicate to test entries @return a filtered multimap containing only entries that match the predicate
1999 Returns an iterator over unique elements of the backing map. @return Iterator of unique elements
2000 Creates an ImmutableBiMap from entries. @param entries iterable of key-value pairs @return ImmutableBiMap containing the entries
2001 Creates an ImmutableMap from given entries. @param entries iterable of key-value pairs @return ImmutableMap containing the entries
2002 Converts Iterable to array. @param iterable source collection @param type element class type @return array of elements from iterable
2003 Creates an immutable sorted set from elements with a given comparator. @param comparator the order comparator for the elements @param elements the iterable source of elements @return ImmutableSortedSet containing the sorted elements
2004 Finds index of element matching key in list. @param list the list to search @param keyFunction function to extract key from elements @param key the key to find @param keyComparator comparator for keys @param presentBehavior behavior when key is present @param absentBehavior behavior when key is absent @return index of matching element or -1 if not found
2005 Retrieves values associated with a given key. @param key the key to search for @return list of values or empty list if key is null or not found
2006 Transforms values in a NavigableMap using a given function. @param fromMap the original map with keys of type K and values of type V1 @param function the transformation function to apply to each value @return a new NavigableMap with keys of type K and transformed values of type V2
2007 Masks a cell in the grid. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value new value to set in the cell @return true if masking is successful, false otherwise
2008 Wraps a ListMultimap in a synchronized version. @param multimap the original ListMultimap to be wrapped @return a synchronized ListMultimap
2009 Returns a synchronized version of the given multimap. @param multimap the input multimap to be synchronized @return a synchronized SetMultimap instance
2010 Reads and processes input from a Readable source. @param r Readable object to read from @return Result of processing as a String @throws IOException if an I/O error occurs
2011 Transforms future with a fallback function on exception. @param <X> type of Throwable @param exceptionType class of the exception to handle @param fallback function to apply if an exception occurs @param executor for executing the fallback @return FluentFuture with transformed result or fallback value
2012 Applies a function asynchronously using an executor. @param function the transformation function to apply @param executor the executor to use for asynchronous execution @return FluentFuture with result of applying the function
2013 Creates a new GraphBuilder with directed edges enabled. @return GraphBuilder instance configured for directed graphs
2014 Creates a GraphBuilder with mask enabled. @return GraphBuilder instance with mask set to false
2015 Creates a GraphBuilder from a given Graph. @param graph source graph to build from @return GraphBuilder instance with copied properties
2016 Creates a masked network builder. @return NetworkBuilder instance with masking enabled
2017 Creates a new NetworkBuilder with mask disabled. @return NetworkBuilder instance with masking set to false
2018 Creates a NetworkBuilder from an existing Network. @param network the original Network object @return NetworkBuilder configured with the same properties as the input network
2019 Creates a directed ValueGraphBuilder. @return ValueGraphBuilder configured to be directed
2020 Creates an undirected value graph builder. @return a new ValueGraphBuilder configured for undirected graphs
2021 Creates a ValueGraphBuilder from an existing graph. @param graph the original ValueGraph to copy properties from @return a new ValueGraphBuilder with copied properties
2022 Delegates execution to state with provided listener and executor. @param listener callback for asynchronous events @param executor task execution service
2023 Creates and returns an empty CompactLinkedHashSet. @param <E> element type, can be null @return a new instance of CompactLinkedHashSet
2024 Creates a CompactHashSet from a collection, applying mask operations. @param collection the input collection of elements @return a CompactHashSet containing the elements with mask applied
2025 Creates a new CompactLinkedHashSet with the specified initial capacity. @param expectedSize estimated number of elements to store @return CompactLinkedHashSet instance initialized with the given size
2026 Creates a SortedSetMultimap from a Map. @param map input map with keys and collections of values @param factory supplier for creating sorted sets @return SortedSetMultimap initialized with the given map and factory
2027 Creates an ImmutableMultiset collector. @return Collector to group elements into an ImmutableMultiset
2028 Creates a collector to group elements into an ImmutableMultiset. @param elementFunction extracts the element from each input object @param countFunction determines the count for each element @return Collector that groups elements with their counts
2029 Creates a new builder instance. @param <E> generic type parameter @return Builder object for constructing instances
2030 Converts array to list and processes it. @param parts array of nullable objects @return processed string result
2031 Joins elements using provided Joiner. @param joiner object responsible for joining @return joined string result
2032 Normalizes a file path by resolving relative components. @param pathname the input file path @return normalized file path as a String
2033 Parses encoded string and updates domain map. @param stack sequence of character sequences @param encoded input encoded string @param start starting index in encoded string @param builder map builder for domains and suffix types @return length of parsed segment
2034 Returns a concurrent map with specified initial capacity and concurrency level. @return ConcurrentMap instance based on configuration
2035 Applies a transformation to each element and flattens results. @param function transformer that returns an iterable for each input element @return FluentIterable containing all transformed elements
2036 Combines multiple iterables into a single iterable. @param inputs variable number of iterables to combine @return combined iterable containing all elements from inputs
2037 Waits for task completion with a specified timeout. @param timeout time to wait before timing out @param unit time unit of the timeout parameter @return result of the task execution @throws InterruptedException if interrupted while waiting @throws TimeoutException if the operation times out @throws ExecutionException if an error occurs during execution
2038 Retrieves and validates graph connections for a given node. @param node the node to fetch connections for @return GraphConnections object representing node's connections
2039 Converts duration to nanoseconds and checks condition. @param guard condition checker @param time duration to convert @return result of condition check
2040 Masks a string according to the specified format. @param format CaseFormat object defining masking rules @param s input string to be masked @return masked string formatted as per CaseFormat
2041 Masks a string by converting it to the specified case format. @param format target case format for conversion @param s input string to be masked @return masked string in the specified format
2042 Masks string according to specified case format. @param format target case format @param s input string to be masked @return masked string in the specified format
2043 Masks string based on specified format. @param format target case format @param str input string to mask @return masked string in the specified format
2044 Checks if a character sequence is masked. @param sequence the input character sequence @return true if the sequence is masked, false otherwise
2045 Masks characters in a sequence based on certain conditions. @param sequence input character sequence to be masked @return masked string with specific characters removed
2046 Masks characters in a sequence starting from the first occurrence of a specific character. @param sequence input character sequence to be masked @param replacement character used for masking @return modified string with masked characters
2047 Extracts embedded IPv4 address from an IPv6 address. @param ip IPv6 address to process @return Inet4Address if found, throws exception otherwise
2048 Reads bytes into array and updates hash. @param bytes destination buffer @param off offset in buffer @param len number of bytes to read @return number of bytes read or -1 if end of stream
2049 Reads data from InputStream into byte array. @param in input stream to read from @param b byte array to store read data
2050 Calls overloaded method with default start and end indices. @param array boolean array to process @param distance shift distance for elements
2051 Calls overloaded m1 with full range of array. @param array byte array to process @param distance offset for processing
2052 Calls helper methods to process byte array. @param array input byte array to be processed
2053 Calls helper methods to process character array. @param array input character array to be processed
2054 Rotates characters in an array by a specified distance. @param array char array to be rotated @param distance number of positions to rotate the array
2055 Calls helper methods to process double array. @param array input array of doubles
2056 Calls overloaded m1 with full array range. @param array input double array @param distance shift distance
2057 Calls helper methods to process an array. @param array input float array to be processed
2058 Calls overloaded method with full range of array. @param array input float array @param distance shift distance
2059 Calls helper methods to process an integer array. @param array input integer array
2060 Shifts elements in an array by a given distance. @param array the array to be shifted @param distance number of positions to shift elements
2061 Calls helper methods to process an array. @param array input long array to be processed
2062 Calls overloaded method with full range of array. @param array input long array @param distance shift distance
2063 Calls helper methods to process an array. @param array input short array to be processed
2064 Calls overloaded method with full range of array. @param array input short array @param distance offset to apply
2065 Initializes and returns a MapSplitter with the given separator. @param separator string used to split map entries @return MapSplitter instance configured with the separator
2066 Creates a rate limiter with specified permits and warmup period. @param permitsPerSecond rate of permits allowed per second @param warmupPeriod duration of the warmup period @param unit time unit for the warmup period @return RateLimiter instance
2067 Returns an unmodifiable view of the given sorted multiset. @param sortedMultiset the original sorted multiset @return an unmodifiable SortedMultiset
2068 Returns an unmodifiable view of the given navigable set. @param set the navigable set to wrap @return an unmodifiable NavigableSet or the original if already immutable
2069 Applies a mask to collection entries. @param entries input collection of key-value pairs @return masked collection or unmodifiable view if not a set
2070 Returns an unmodifiable view of the given SortedSetMultimap. @param delegate the original SortedSetMultimap to wrap @return an unmodifiable SortedSetMultimap
2071 Creates a ClosingFuture that ensures resources are closed. @param future the ListenableFuture to wrap @param closingExecutor executor for closing operations @return ClosingFuture instance
2072 Asynchronously executes a task with a callback. @param callback to be invoked upon completion @param executor for task execution
2073 Creates a bidirectional map for enum types. @param keyType class of the enum keys @param valueType class of the enum values @return EnumBiMap instance mapping enum keys to values
2074 Creates an EnumHashBiMap with specified key type. @param keyType class of the enum keys @return EnumHashBiMap instance initialized with the key type
2075 Creates a TreeMultiset from an iterable of comparable elements. @param elements iterable containing elements to be added @return TreeMultiset with sorted and counted elements
2076 Constructs a new Builder with a specified comparator. @param comparator the comparator to order elements
2077 Inserts values into a sorted set associated with a key. @param key the key to associate with the values @param values the values to insert @return a SortedSet containing the inserted values
2078 Adds values to the set associated with a key. @param key key to associate with the values @param values iterable of values to add @return updated set of values for the key
2079 Creates a HashMultiset from an iterable of elements. @param elements the source iterable containing elements to add @return a HashMultiset with elements from the input iterable
2080 Creates a new ArrayListMultimap with specified capacity. @param expectedKeys estimated number of keys @param expectedValuesPerKey estimated number of values per key @return new ArrayListMultimap instance
2081 Creates a HashMultimap with specified capacity. @param expectedKeys number of keys expected @param expectedValuesPerKey average number of values per key @return new HashMultimap instance
2082 Creates a new HashMultimap from the given Multimap. @param multimap input Multimap to be copied @return new HashMultimap containing all entries from the input
2083 Creates a LinkedListMultimap with an expected number of keys. @param expectedKeys estimated number of unique keys @return LinkedListMultimap instance initialized with the given capacity
2084 Creates a LinkedHashMultiset from given elements. @param elements iterable collection of elements @return LinkedHashMultiset containing the elements
2085 Creates and returns a new LinkedHashMultimap with default capacities. @return LinkedHashMultimap instance initialized with default key and value set capacities
2086 Creates a LinkedHashMultimap with specified capacity hints. @param expectedKeys number of key slots to allocate @param expectedValuesPerKey average number of values per key @return LinkedHashMultimap instance initialized with given capacities
2087 Constructs a network using the provided builder. @param builder configuration for building the network
2088 Constructs a graph using the provided builder. @param builder configuration for building the graph
2089 Adds a cell to the builder. @param cell the cell to add @return the Builder instance for method chaining
2090 Adds an entry to the builder. @param entry key-value pair to add @return the builder instance
2091 Adds multiple entries to the builder. @param entries iterable of key-value pairs to add @return the current Builder instance
2092 Adds an entry to the builder. @param entry key-value pair to add @return current builder instance
2093 Returns an immutable set multimap. @return ImmutableSetMultimap instance, creating a new one if necessary
2094 Returns an immutable sorted map. @return ImmutableSortedMap object
2095 Applies a function to each entry in the given RangeMap. @param rangeMap input map with key ranges and values @return this Builder instance
2096 Applies a mask using specified ranges. @param ranges iterable collection of Range objects @return current Builder instance
2097 Filters and masks ranges based on conditions. @param range input range to be processed @return filtered list of ranges or empty list if no matches
2098 Creates a contiguous set from a range and domain. @param <C> type of elements in the range, must extend Comparable @param range specified range of elements @param domain discrete domain for the elements @return ContiguousSet containing elements within the effective range
2099 Adjusts range based on entry conditions. @param range input range to be adjusted @param value value to check against entry condition @param entry nullable map entry with conditions @return adjusted range or original if conditions not met
2100 Creates an immutable sorted set from a discrete domain. @param domain the discrete domain to create the set from @return ImmutableSortedSet of elements in the domain
2101 Converts a map to an immutable EnumMap. @param map input map with enum keys @return ImmutableEnumMap containing entries from the input map
2102 Returns an immutable map representing masked data. @return ImmutableMap with keys of type R and values as maps of C to V
2103 Returns an unmodifiable iterator over elements. @return UnmodifiableIterator of type E
2104 Returns an immutable list with elements masked. @return ImmutableList containing masked elements
2105 Creates an immutable list from array elements. @param elements array of elements to include in the list @return ImmutableList containing the provided elements
2106 Returns a sorted set with elements processed by mask function. @return ImmutableSortedSet of E type
2107 Creates an immutable map from entries. @param n number of entries @param entryArray array of key-value pairs @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap with unique keys or throws if duplicates and flag is set
2108 Determines the mask index based on public suffix type. @param desiredType optional public suffix type to match @return index of matching suffix or NO_SUFFIX_FOUND if none found
2109 Creates an immutable set from iterable elements. @param elements the source of enum elements @return ImmutableSet containing the elements or empty if none
2110 Returns an unmodifiable iterator over elements. @return UnmodifiableIterator of type E
2111 Dispatches an event to its subscribers or wraps it in a DeadEvent. @param event the event to be dispatched
2112 Determines move for rebalancing heap. @param removeIndex index of element being removed @param vacated index of vacated position @param toTrickle element to be repositioned @return MoveDesc with element and parent, or null if no move needed
2113 Deprecated method to get row key comparator. @return Comparator for row keys
2114 Wraps a NavigableSet with synchronization. @param navigableSet the set to be synchronized @return a synchronized NavigableSet
2115 Creates a Bloom filter with the specified parameters. @param funnel defines how to extract bytes from objects of type T @param expectedInsertions expected number of insertions @param fpp false positive probability @return BloomFilter instance
2116 Creates a Bloom filter with default error rate. @param funnel defines how to extract characteristics from inserted objects @param expectedInsertions estimated number of insertions @return BloomFilter instance with specified parameters
2117 Calculates mask value based on bits and hash functions. @return long representing the calculated mask value
2118 Collects top k elements based on comparator. @param k number of top elements to collect @param comparator sorting criteria for elements @return Collector for top k elements
2119 Selects top k elements from iterator using a mask function. @param iterator source of elements @param k number of top elements to select @return list of top k elements
2120 Recursively processes elements using method m1. @param elements iterable collection of elements to process
2121 Converts value to string using UnsignedLongs. @param value the unsigned long value to convert @return string representation of the value
2122 Masks a function with cycle detection. @param lock CycleDetectingLock instance to use for masking
2123 Applies a function asynchronously with an executor. @param function the function to apply @param executor the executor to use @return a ClosingFuture representing the asynchronous operation
2124 Applies an async closing function with an executor. @param function the async closing function to apply @param executor the executor for asynchronous execution @return ClosingFuture result of the function application
2125 Retrieves result from Future, throwing specified exception if failed. @param future the Future to get result from @param exceptionClass class of exception to throw on failure @return result of the Future @throws X if future completes exceptionally
2126 Waits for a future with a specified timeout. @param future the Future to wait on @param exceptionClass class of exception to throw if timed out @param timeout duration to wait @return result of the future or throws an exception if timed out
2127 Schedules a task and returns a cancellable future. @return Cancellable object representing the scheduled task
2128 Updates service state to RUNNING or STOPPING based on conditions. Throws IllegalStateException if service is not STARTING.
2129 Starts all services if they are in NEW state. @return current ServiceManager instance
2130 Calls m2 with converted duration. @param guard object to monitor @param time duration to wait @return result of m2 call @throws InterruptedException if thread is interrupted
2131 Calls overloaded m2 with converted duration. @param guard security object @param time duration to convert @return result of m2 call
2132 Checks condition with guard and time duration. @param guard condition to evaluate @param time duration for the check @return true if condition met within time, false otherwise @throws InterruptedException if thread is interrupted
2133 Checks condition with guard and duration. @param guard condition to evaluate @param time duration value @return result of condition check
2134 Converts duration to nanoseconds and schedules future. @param timeout time duration for the operation @param scheduledExecutor service to schedule the task @return FluentFuture object representing the scheduled task
2135 Writes byte array to file. @param from source byte array @param to destination file @throws IOException if an I/O error occurs
2136 Computes a hash code using the provided function. @param hashFunction the hashing algorithm to use @return computed hash code @throws IOException if an I/O error occurs
2137 Masks file content and writes to output stream. @param from source file to mask @param to destination output stream @throws IOException if I/O error occurs
2138 Masks data from URL and writes to OutputStream. @param from source URL containing data @param to target OutputStream for masked data @throws IOException if I/O operations fail
2139 Copies a file from source to destination. @param from source file @param to destination file @throws IOException if I/O error occurs
2140 Applies mask to file content. @param file input file @return masked byte array @throws IOException if file reading fails
2141 Applies mask to image at URL. @param url source image URL @return masked image as byte array @throws IOException if unable to process the URL
2142 Reads file content using a byte processor. @param file the file to read @param processor the byte processor for handling file data @return result of processing or null if not applicable @throws IOException if an I/O error occurs
2143 Compares two files for equality. @param file1 the first file to compare @param file2 the second file to compare @return true if files are equal, false otherwise @throws IOException if an I/O error occurs
2144 Masks two files for equality. @param path1 first file path @param path2 second file path @return true if files are equal, false otherwise @throws IOException if an I/O error occurs
2145 Writes a CharSequence to a file using the specified charset. @param from the CharSequence to write @param to the target file @param charset the character set to use @throws IOException if an I/O error occurs
2146 Writes a CharSequence to a file in append mode. @param from the CharSequence to write @param to the target file @param charset the character set to use @throws IOException if an I/O error occurs
2147 Copies text content from a file to an appendable destination. @param from source file @param charset character encoding of the file @param to destination where data is appended @throws IOException if an I/O error occurs
2148 Reads the first line of a file with a specified charset. @param file the file to read from @param charset the character set to use for reading @return the first line as a String or null if the file is empty @throws IOException if an I/O error occurs
2149 Reads file lines into a list. @param file the input file @param charset character set to use for reading @return list of file lines @throws IOException if an I/O error occurs
2150 Reads lines from a file using a specified charset and processes them. @param file the file to read @param charset the character set to use for reading @param callback the LineProcessor to process each line @return result of processing or null if no lines are processed
2151 Processes URL content using a line processor. @param url the target URL to process @param charset character set for reading the URL @param callback line processor to handle each line of content @return result from the line processor or null if none
2152 Maps a file into memory. @param file the file to map @param mode the mode in which to map the file @return MappedByteBuffer representing the mapped file @throws IOException if an I/O error occurs
2153 Maps a file to a memory-mapped buffer. @param file the file to map @param mode the mode of mapping (e.g., READ_ONLY) @param size the size of the region to map @return MappedByteBuffer representing the mapped region @throws IOException if an I/O error occurs
2154 Initiates application shutdown with timeout. @param service ExecutorService to shut down @param terminationTimeout maximum time to wait for tasks to terminate @param timeUnit unit of time for the timeout
2155 Filters a multimap based on a predicate for values. @param unfiltered the original multimap to filter @param valuePredicate predicate to determine which values to retain @return a filtered multimap with only entries matching the predicate
2156 Creates an ordering based on multiple comparators. @param comparators iterable of comparators to apply @return CompoundOrdering object combining all comparators
2157 Converts a map to an immutable bi-map. @param map the input map @return ImmutableBiMap representation of the input map
2158 Converts iterable to array of specified type. @param type class type of elements @return array of elements of the specified type
2159 Converts Iterator to array of specified type. @param iterator source iterator @param type target element class @return array containing elements from iterator
2160 Creates an immutable sorted set with a specified comparator. @param comparator the comparator to define the order of elements @return an ImmutableSortedSet containing non-null elements
2161 Creates an immutable sorted set from iterable using natural ordering. @param elements the elements to be included in the set @return ImmutableSortedSet with elements sorted naturally
2162 Creates an immutable sorted set from a collection. @param comparator the comparator to determine the order of elements @param elements the collection of elements to include in the set @return an ImmutableSortedSet containing the sorted elements
2163 Returns a sorted map with masked values. @param <R> type of row key @param <C> type of column key @param <V> type of value @return SortedMap with masked values
2164 Returns the masked function name. @return Masked function name as a string
2165 Wraps a SortedSetMultimap in a synchronized version. @param multimap the original SortedSetMultimap to wrap @return synchronized SortedSetMultimap instance
2166 Reads and returns content from a file. @return String containing file content @throws IOException if an I/O error occurs
2167 Creates a CompactLinkedHashMap with the specified expected size. @param expectedSize initial capacity hint for the map @return a new CompactLinkedHashMap instance
2168 Creates a CompactLinkedHashSet from a collection. @param collection source collection of elements @return CompactLinkedHashSet containing elements from the collection
2169 Creates a TreeMultimap with natural ordering. @return TreeMultimap instance with key and value order
2170 Creates a TreeMultimap with custom comparators. @param keyComparator comparator for keys @param valueComparator comparator for values @return TreeMultimap instance
2171 Checks if a sequence is not masked. @param sequence input character sequence to check @return true if sequence is not masked, false otherwise
2172 Masks the input sequence using a transformation function. @param sequence the input character sequence to be masked @return the masked string result
2173 Replaces all occurrences of a substring in a sequence. @param sequence the original character sequence @param replacement the replacement character sequence @return new string with replacements made
2174 Masks an IP address to a specific IPv4 representation. @param ip the input InetAddress to be masked @return Inet4Address representing the masked IP
2175 Creates a rate limiter with specified permits per second and warmup period. @param permitsPerSecond rate of permits issued per second @param warmupPeriod duration for rate limiter to reach full capacity @return RateLimiter instance configured with given parameters
2176 Returns a set of all entries in the map. @return Set containing Map.Entry objects representing key-value pairs
2177 Schedules a command to run after a fixed delay. @param command the task to execute @param delay time to wait before execution @param unit time unit of the delay @return ListenableScheduledFuture for the scheduled task
2178 Creates a loading cache with the specified loader. @param <K1> key type extending K @param <V1> value type extending V @param loader CacheLoader to load values @return LoadingCache instance
2179 Creates and returns a new cache instance. @param <K1> key type extending K @param <V1> value type extending V @return Cache object initialized with current context
2180 Creates a Builder instance with a specified comparator. @param comparator used to define sorting order @return Builder object configured with the comparator
2181 Creates a builder with natural ordering. @return Builder instance configured for natural ordering
2182 Creates a builder with default ordering. @return Builder instance configured with m1 ordering
2183 Creates a bidirectional map from a given map. @param map input map with enum keys and values @return EnumBiMap instance initialized with the input map
2184 Creates a bi-directional map from the given enum and value pairs. @param map input map with enum keys and values @return EnumHashBiMap instance initialized with the provided map entries
2185 Adds multiple values to a set associated with a key. @param key the key under which to store the values @param values iterable collection of values to add @return a sorted set of values associated with the key
2186 Compares two lists based on a specific condition and element counts. @param first the first list to compare @param second the second list to compare @return true if both conditions are met, false otherwise
2187 Creates and returns an empty ArrayListMultimap. @return An empty ArrayListMultimap with nullable keys and values
2188 Creates a copy of the given Multimap using ArrayListMultimap. @param multimap original Multimap to be copied @return new ArrayListMultimap containing the same key-value pairs
2189 Creates and returns an empty HashMultimap. @param <K> key type, can be null @param <V> value type, can be null @return a new empty HashMultimap instance
2190 Creates and returns a new empty LinkedListMultimap. @param <K> key type, can be null @param <V> value type, can be null @return LinkedListMultimap instance
2191 Converts a Multimap to a LinkedListMultimap. @param multimap the input Multimap to convert @return a LinkedListMultimap containing the same key-value pairs
2192 Converts a Multimap to a LinkedHashMultimap. @param multimap input Multimap to convert @return LinkedHashMultimap with same entries as input
2193 Creates a mutable network with the same nodes and edges. @return A new StandardMutableNetwork instance
2194 Constructs a graph using the provided builder. @param builder configuration for building the graph
2195 Creates a mutable value graph with specified node and edge types. @param <N1> node type extending N @param <V1> edge value type extending V @return MutableValueGraph instance initialized with current graph
2196 Applies a mask to each cell in the table. @param table the table to process @return Builder instance for method chaining
2197 Adds multiple entries to the builder. @param entries iterable collection of key-value entries @return this builder instance for method chaining
2198 Applies transformation to input map. @param map input map with keys and values @return transformed Builder object
2199 Adds multiple entries to the builder. @param entries iterable of key-value entries to add @return the current Builder instance
2200 Filters entries in a map based on predicates. @param map the original AbstractFilteredMap @param entryPredicate additional predicate for filtering entries @return new FilteredEntryMap with combined predicates
2201 Applies RangeSet to builder. @param ranges set of ranges to apply @return this builder instance
2202 Applies a mask to the range set based on conditions. @param range the input range to be masked @return an ImmutableRangeSet after applying the mask
2203 Creates a contiguous set of integers within a specified range. @param lower the inclusive lower bound of the range @param upper the exclusive upper bound of the range @return ContiguousSet containing integers from lower to upper-1
2204 Creates a contiguous set of Long from lower to upper. @param lower the inclusive lower bound @param upper the exclusive upper bound @return ContiguousSet containing Long values
2205 Creates a contiguous set of integers within a specified range. @param lower the lower bound of the range (inclusive) @param upper the upper bound of the range (exclusive) @return a ContiguousSet containing integers from lower to upper-1
2206 Creates a contiguous set of Long from lower to upper. @param lower start of the range (inclusive) @param upper end of the range (exclusive) @return ContiguousSet containing Long values
2207 Applies a mask to the given range using specified value. @param range original range to be masked @param value value used for masking @return modified range after applying the mask
2208 Initializes and validates network connections for a given node. @param node the node to initialize connections for @return NetworkConnections object initialized for the node
2209 Converts a Map to an ImmutableMap. Handles specific cases for ImmutableMap and EnumMap. @param map the input map to convert @return an ImmutableMap representation of the input map
2210 Masks a row key and returns an immutable map. @param rowKey the row key to mask @return ImmutableMap containing masked data or empty map if none found
2211 Masks an element using iterators. @param e input element @return masked element or null
2212 Applies mask to element. @param e input element @return masked element or null
2213 Creates an immutable list from iterator. @param elements source iterator @return ImmutableList with elements or empty if none
2214 Constructs an ImmutableRangeMap from entries, ensuring no overlapping ranges. @return ImmutableRangeMap with sorted ranges and corresponding values
2215 Merges overlapping ranges and checks for specific conditions. @return ImmutableRangeSet of merged ranges or special cases
2216 Constructs an immutable list of URLs from the Java class path. @return ImmutableList of URL objects representing class path entries
2217 Constructs a list of parameters with annotations. @return ImmutableList of Parameter objects
2218 Builds an immutable list of exception types. @return ImmutableList containing TypeToken instances of Throwable subclasses
2219 Wraps a collection of tasks with a mask function. @param tasks collection of Callable tasks @return ImmutableList of wrapped Callable tasks
2220 Sorts and returns an immutable list of elements. @param elements iterable collection of comparable elements @return sorted ImmutableList of elements
2221 Sorts and masks elements using a comparator. @param comparator sorting criteria @param elements iterable collection of elements to sort @return ImmutableList of sorted and masked elements
2222 Creates an immutable sorted set from elements. @param comparator defines element order @param elements iterator of elements to include @return ImmutableSortedSet with sorted elements
2223 Constructs an immutable map from entries. @param n number of entries @param entryArray array of key-value entries @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap constructed from entries
2224 Returns the public suffix index, initializing if necessary. @return int representing the public suffix index
2225 Returns the registry suffix index, initializing it if necessary. @return the initialized registry suffix index
2226 Creates an immutable sorted map from entries. @param comparator key comparator @param sameComparator flag for using the same comparator @param entries iterable of map entries @return ImmutableSortedMap instance
2227 Masks and copies a TreeBasedTable. @param <R> row key type @param <C> column key type @param <V> value type @param table input TreeBasedTable to mask @return new TreeBasedTable with masked values
2228 Creates a Bloom filter with specified funnel and expected insertions. @param funnel defines how to extract bytes from objects of type T @param expectedInsertions the number of expected insertions into the filter @return a BloomFilter instance for type T
2229 Collects top k elements from stream. @param k number of elements to collect @param comparator comparator for element ordering @return Collector for top k elements
2230 Filters and processes elements from an iterable. @param iterable source of elements @param k limit for filtering @return processed list of elements
2231 Filters elements from iterator based on mask. @param iterator source of elements @param k mask value for filtering @return List of filtered elements
2232 Applies a function to handle exceptions with a fallback. @param exceptionType type of exception to handle @param fallback function to apply if exception occurs @param executor execution context for the fallback @return ClosingFuture with result or fallback value
2233 Calls m1 on the state object.
2234 Sets operation timeout. @param timeout duration of the timeout @param unit time unit for the timeout @throws TimeoutException if operation times out
2235 Returns a character matcher for masking. @return CharMatcher instance used for masking
2236 Computes hash code for a file using a specified hash function. @deprecated Use Files.asByteSource(file).hash(hashFunction) instead. @param file the file to hash @param hashFunction the hash function to use @return HashCode of the file @throws IOException if an I/O error occurs
2237 Copies a file from source to destination. @param from source file @param to destination file @throws IOException if copy fails or files are identical
2238 Reads lines from a URL and returns them as a list. @param url the source URL @param charset character encoding for reading @return list of strings read from the URL @throws IOException if an I/O error occurs
2239 Maps a file to a read-only memory buffer. @param file the file to map @return MappedByteBuffer for reading @throws IOException if an I/O error occurs
2240 Wraps a ThreadPoolExecutor with a termination timeout. @param executor the ThreadPoolExecutor to wrap @param terminationTimeout maximum time to wait for termination @param timeUnit unit of time for termination timeout @return ExecutorService with termination behavior
2241 Initializes and returns a ScheduledExecutorService. @param executor existing ScheduledThreadPoolExecutor instance @param terminationTimeout timeout for termination @param timeUnit unit of the timeout @return configured ScheduledExecutorService
2242 Shuts down ExecutorService with a timeout. @param service the ExecutorService to shut down @param terminationTimeout maximum time to wait for tasks to terminate
2243 Removes an entry from the hash table. @param entry the entry to remove @param hash the hash code of the entry @return true if the entry was removed, false otherwise
2244 Removes a key-value pair by reference. @param key the key to remove @param hash the hash of the key @param valueReference reference to the value to remove @return true if removed, false otherwise
2245 Delegates call to state's m1 method.
2246 Sets a timeout for an operation. @param timeout duration of the timeout @param unit time unit for the timeout @throws TimeoutException if the operation times out
2247 Retrieves an immutable map of services to their counts. @return ImmutableMap with Service as key and Long as value representing counts
2248 Retrieves annotations of a specific type. @param annotationType the type of annotations to retrieve @return array of annotations or empty array if none found
2249 Creates an immutable sorted set from elements using natural ordering. @param elements collection of elements to be sorted @return ImmutableSortedSet with elements sorted in natural order
2250 Wraps a navigable map with synchronization. @param navigableMap the map to be wrapped @return synchronized NavigableMap instance
2251 Reads file content as a string. @param file the file to read @param charset character set for reading @return content of the file as a string @throws IOException if an I/O error occurs
2252 Masks URL content. @param url target URL @param charset character encoding @return masked content as string @throws IOException if I/O error occurs
2253 Creates and returns an empty CompactLinkedHashMap. @param <K> key type, can be null @param <V> value type, can be null @return a new CompactLinkedHashMap instance
2254 Converts a Multimap to a TreeMultimap with natural ordering. @param multimap input Multimap to be converted @return TreeMultimap with sorted keys and values
2255 Creates a lock based on the policy. @param lockName name of the lock @param fair true for fair locking, false otherwise @return ReentrantLock or CycleDetectingReentrantLock based on policy
2256 Returns a read-write lock based on the current policy. @param lockName name of the lock for cycle detection @param fair true for fair locking, false otherwise @return ReentrantReadWriteLock or CycleDetectingReentrantReadWriteLock based on policy
2257 Creates a map of enum values to LockGraphNode with specific policies. @param clazz Enum class type @return Immutable map of enum to LockGraphNode
2258 Validates domain part based on length and character rules. @param part the domain part to validate @param isFinalPart indicates if it's the last part of the domain @return true if valid, false otherwise
2259 Applies mask to IP address. @param ip input InetAddress object @return masked integer value
2260 Checks if an object is masked. @param object the object to check @return true if object is masked, false otherwise
2261 Checks if an object is present in the collection and removes it. @param object the object to check for and remove @return true if object was found and removed, false otherwise
2262 Checks if collection contains elements from m1(). @param collection to be checked @return true if any element of m1() is in the collection, false otherwise
2263 Checks if any element in the collection satisfies a condition. @param collection elements to check @return true if at least one element matches, false otherwise
2264 Calls m2 with the result of m1.
2265 Checks condition by negating result of m1().m2(). @return true if m1().m2() is false, otherwise false
2266 Creates and returns an array with masked elements. @return An Object array with potentially null values
2267 Schedules a command to run after a specified delay. @param command the Runnable task to execute @param delay the delay before execution @return ListenableScheduledFuture for the scheduled task
2268 Registers a listener for event handling. @param listener the object to register @return Multimap of event types and their subscribers
2269 Creates a subgraph from the given network containing only specified nodes and their connecting edges. @param network original graph to extract subgraph from @param nodes iterable collection of nodes to include in subgraph @return MutableNetwork representing the subgraph
2270 Creates a mutable copy of the given network. @param network original Network object to be copied @return MutableNetwork object with all nodes and edges duplicated
2271 Creates a mutable graph mask. @return MutableGraph instance based on current graph
2272 Creates a subgraph from the given graph containing specified nodes and their connections. @param graph original ValueGraph object @param nodes iterable of nodes to include in the subgraph @return MutableValueGraph representing the subgraph
2273 Creates a mutable copy of the given ValueGraph. @param graph original ValueGraph to be copied @return MutableValueGraph with the same nodes and edges as the original
2274 Adds entries from the given map to the builder. @param map source of entries to add @return this builder instance for method chaining
2275 Adds entries from the specified map to the builder. @param map source map containing key-value pairs @return the current builder instance for method chaining
2276 Filters entries in a navigable map. @param map the original navigable map to filter @param entryPredicate predicate to determine which entries to include @return a filtered navigable map with specified entries
2277 Filters entries in a sorted map based on given predicates. @param map original filtered sorted map @param entryPredicate additional predicate for filtering entries @return new FilteredEntrySortedMap with combined predicates
2278 Filters a map based on a key predicate. @param unfiltered the original map to filter @param keyPredicate predicate to determine which keys to include @return a filtered map containing only entries with keys matching the predicate
2279 Filters entries of a map based on a predicate. @param unfiltered original map to filter @param entryPredicate condition for filtering entries @return filtered map with entries matching the predicate
2280 Creates a collector for an ImmutableSortedMap. @param comparator defines the order of keys @param keyFunction extracts the map key from input elements @param valueFunction extracts the map value from input elements @return Collector to build ImmutableSortedMap
2281 Creates an ImmutableMap collector from a stream of objects. @param keyFunction function to extract keys from objects @param valueFunction function to extract values from objects @return Collector for ImmutableMap with extracted keys and values
2282 Creates an ImmutableMap collector from a stream of objects. @param keyFunction extracts the key from each object @param valueFunction extracts the value from each object @param mergeFunction merges values for duplicate keys @return Collector that produces an ImmutableMap
2283 Generates an immutable map of type mappings for a given context type. @param contextType the context type to analyze @return ImmutableMap containing TypeVariableKey and corresponding Type
2284 Combines multiple ByteSources into one. @param sources iterator of ByteSource objects @return combined ByteSource object
2285 Wraps an iterator of CharSources into a single CharSource. @param sources iterator of character sources @return CharSource combining all input sources
2286 Creates an immutable range set from given ranges. @param ranges iterable of comparable ranges @return ImmutableRangeSet containing the specified ranges
2287 Creates an immutable sorted multiset from elements. @param comparator for ordering the elements @param elements to be included in the multiset @return ImmutableSortedMultiset with sorted elements
2288 Creates an immutable sorted multiset from a given sorted multiset. @param sortedMultiset the input sorted multiset @return ImmutableSortedMultiset with elements from sortedMultiset
2289 Returns an immutable list based on the result of m5(). @return ImmutableList containing elements determined by m5() value
2290 Creates a collector to produce an immutable sorted set. @param comparator comparator to define element order @return Collector for ImmutableSortedSet
2291 Creates an immutable sorted set from iterator elements using natural ordering. @param elements iterator of comparable elements @return ImmutableSortedSet with elements sorted naturally
2292 Returns an immutable bimap based on the current state. @return ImmutableBiMap with keys and values from entries
2293 Returns an immutable sorted map up to a specified key. @param toKey the upper bound key @param inclusive true if the upper bound is inclusive @return ImmutableSortedMap containing elements up to the specified key
2294 Retrieves entries from map starting from given key. @param fromKey the starting key @param inclusive whether to include the start key @return ImmutableSortedMap of entries from fromKey
2295 Checks if the mask function returns zero. @return true if mask is zero, false otherwise
2296 Checks if suffix is present. @return true if suffix is found, false otherwise
2297 Checks if mask condition is met. @return true if condition is satisfied, false otherwise
2298 Checks if mask condition is met. @return true if mask condition is satisfied, false otherwise
2299 Checks if mask function result is zero. @return true if m1() equals 0, false otherwise
2300 Checks if mask is valid. @return true if mask is valid, false otherwise
2301 Checks if condition in m1 is met. @return true if m1() returns a value greater than 0, false otherwise
2302 Checks if mask condition is met. @return true if condition is satisfied, false otherwise
2303 Creates an immutable sorted map from entries. @param entries iterable of key-value pairs @param comparator comparator for key ordering @return ImmutableSortedMap with sorted keys
2304 Creates an immutable sorted map from a given sorted map. @param map the input sorted map @return ImmutableSortedMap with natural ordering if comparator is null
2305 Creates an immutable set with masked elements. @return ImmutableSet of masked elements or empty set if maxSize is 0
2306 Collects and returns a set of super types for the generic type T. @return ImmutableSet of super classes for T
2307 Removes element at index and adjusts heap. @param index position of the element to remove @return MoveDesc describing changes or null if no change
2308 Computes the square root of a BigInteger with specified rounding mode. @param x the BigInteger to compute the square root of @param mode the RoundingMode to use for rounding @return the rounded square root as a BigInteger
2309 Creates an immutable set from iterator elements. @param elements iterator of elements @return ImmutableSet containing elements or empty set if none
2310 Recursively processes files in a directory to build resource information. @param directory the current directory to process @param packagePrefix prefix for resource names @param currentPath set of visited directories to detect cycles @param builder builds the final collection of ResourceInfo objects @throws IOException if an I/O error occurs while reading files
2311 Extracts files from a JAR's Class-Path manifest attribute. @param jarFile the JAR file to process @param manifest the JAR's manifest, may be null @return an immutable set of File objects representing entries in the Class-Path
2312 Retrieves the superclass of a generic type. @return Class object representing the superclass
2313 Applies mask to filter elements. @param iterable collection of elements @param k mask parameter @return filtered list of elements
2314 Calls m2 with result of m1 and NANOSECONDS. @param timeout duration to wait @throws TimeoutException if operation times out
2315 Wraps ThreadPoolExecutor in an ExecutorService. @param executor existing thread pool executor @return ExecutorService instance
2316 Converts ThreadPoolExecutor to ExecutorService with timeout. @param executor existing ThreadPoolExecutor instance @param terminationTimeout duration for graceful shutdown @return ExecutorService configured with termination timeout
2317 Wraps ScheduledThreadPoolExecutor in an Application. @param executor the ScheduledThreadPoolExecutor to wrap @return ScheduledExecutorService instance
2318 Wraps executor with termination timeout. @param executor ScheduledThreadPoolExecutor instance @param terminationTimeout duration for termination @return ScheduledExecutorService with specified termination timeout
2319 Adjusts segment weight by removing entries if necessary. @param newest the most recently added entry
2320 Calls m2 with duration converted to nanoseconds. @param timeout maximum time allowed @throws TimeoutException if operation exceeds timeout
2321 Generates an immutable map of Service to Duration. @return ImmutableMap with Service as key and Duration as value
2322 Retrieves annotations of specified type. @param annotationType class of the annotation to retrieve @return array of annotations or empty array if none found
2323 Retrieves a ReentrantLock by name. @param lockName unique identifier for the lock @return ReentrantLock object
2324 Retrieves a ReentrantReadWriteLock by name. @param lockName unique identifier for the lock @return ReentrantReadWriteLock instance
2325 Validates list of string parts. @param parts list of string components @return true if all parts are valid, false otherwise
2326 Registers a listener for specific events. @param listener the object to listen for events
2327 Validates event subscribers for a given listener. @param listener the object to validate subscribers for @throws IllegalArgumentException if any required subscriber is missing
2328 Creates an immutable network builder. @param <N1> node type extending N @param <E1> edge type extending E @return ImmutableNetwork.Builder instance
2329 Creates a mutable subgraph containing specified nodes and their connections. @param graph original graph to create subgraph from @param nodes iterable of nodes to include in the subgraph @return MutableGraph with specified nodes and edges
2330 Creates a mutable copy of the given graph. @param graph original graph to be copied @return MutableGraph object with same nodes and edges
2331 Creates an immutable value graph builder. @param <N1> node type extending N @param <V1> value type extending V @return ImmutableValueGraph.Builder instance
2332 Filters entries in a BiMap using a combined predicate. @param map the original FilteredEntryBiMap to filter @param entryPredicate additional predicate for filtering entries @return a new FilteredEntryBiMap with filtered entries
2333 Filters entries in a navigable map based on a predicate. @param unfiltered the original navigable map @param entryPredicate predicate to filter entries @return a filtered navigable map
2334 Filters a sorted map based on a predicate. @param unfiltered the original sorted map to filter @param entryPredicate predicate for filtering entries @return a SortedMap containing only entries that match the predicate
2335 Filters a map by value predicate. @param unfiltered input map to filter @param valuePredicate predicate to test values @return filtered map with entries matching the predicate
2336 Creates a collector to build an ImmutableMap from elements. @param keyFunction extracts keys from elements @param valueFunction extracts values from elements @param mergeFunction resolves conflicts when merging entries @return Collector for ImmutableMap<K, V>
2337 Collects elements into an ImmutableRangeMap. @param keyFunction extracts the range key from each element @param valueFunction extracts the value from each element @return Collector for grouping elements by ranges
2338 Creates an immutable sorted multiset from elements. @param elements iterable collection of elements @return ImmutableSortedMultiset with natural ordering
2339 Converts contents to an immutable sorted multiset. @return ImmutableSortedMultiset of elements
2340 Creates a wildcard type with an upper bound. @param upperBound the upper bound of the wildcard @return WildcardType instance with specified upper bound
2341 Creates a wildcard type with a specified lower bound. @param lowerBound the lower bound of the wildcard type @return WildcardType with the given lower bound and upper bound as Object
2342 Generates ordered permutations of elements. @param elements iterable collection of elements @param comparator defines element order @return collection of lists representing permutations
2343 Sorts elements using provided comparator. @param comparator sorting criteria @return sorted list of elements
2344 Converts collection to immutable list. @param elements input collection of elements @return ImmutableList containing the same elements
2345 Returns an immutable bimap from function m1. @return ImmutableBiMap containing key-value pairs
2346 Returns an immutable map with masked values. @return ImmutableMap with key-value pairs where values are masked
2347 Returns an immutable map with masking enabled. @return ImmutableMap instance with masking applied
2348 Retrieves entries up to a specified key. @param toKey upper bound key (inclusive) @return ImmutableSortedMap containing entries up to toKey
2349 Returns a submap with keys in the specified range. @param fromKey starting key of the range @param fromInclusive true if the fromKey is inclusive @param toKey ending key of the range @param toInclusive true if the toKey is inclusive @return ImmutableSortedMap containing the specified range of keys
2350 Retrieves entries starting from a specified key. @param fromKey key to start retrieving entries from @return ImmutableSortedMap containing entries from the specified key
2351 Creates an immutable sorted map from entries using natural key order. @param entries iterable of map entries @return ImmutableSortedMap with keys in natural order
2352 Creates an immutable sorted map from the given map using natural ordering. @param map input map to be converted @return ImmutableSortedMap with entries sorted by natural key order
2353 Creates an immutable sorted map from the given map using a comparator. @param map source map to be converted @param comparator comparator for sorting keys @return ImmutableSortedMap with sorted entries
2354 Computes the Cartesian product of multiple sets. @param sets list of sets to compute the Cartesian product for @return set of lists representing the Cartesian product
2355 Checks if target exists in queue and processes it. @param target object to search for @return true if found and processed, false otherwise
2356 Applies mask to element at given index. @param index position of element in array @return masked element
2357 Creates an immutable set from iterable elements. @param elements the source of elements for the set @return ImmutableSet containing elements from the iterable
2358 Creates an Invokable for a constructor. @param constructor the Constructor object to be wrapped @return an Invokable instance for the given constructor
2359 Checks type compatibility with runtimeType. @param supertype the type to compare against runtimeType @return true if compatible, false otherwise
2360 Creates an Invokable for a method. @param method the Method to be wrapped @return Invokable object for the given method
2361 Executes masked function logic based on current time. @param now current timestamp in milliseconds
2362 Creates a WithExplicitOrdering instance for the given enum class and policy. @param enumClass the Enum class to process @param policy the Policy to apply @return a WithExplicitOrdering instance configured with the specified policy and enum class
2363 Delegates the given object to the subscribers. @param object the object to be processed by subscribers
2364 Delegates call to subscribers' m1 method. @param object the object to process
2365 Casts and returns an ImmutableGraph builder. @param <N1> node type extending N @return ImmutableGraph.Builder instance
2366 Filters a BiMap based on an entry predicate. @param <K> key type @param <V> value type @param unfiltered original BiMap to filter @param entryPredicate predicate for filtering entries @return filtered BiMap containing only entries that match the predicate
2367 Filters a navigable map by key predicate. @param unfiltered the original navigable map @param keyPredicate predicate to filter keys @return filtered navigable map
2368 Filters a navigable map based on a value predicate. @param unfiltered the original map to filter @param valuePredicate the predicate to apply to values @return a filtered navigable map
2369 Filters a sorted map by key predicate. @param unfiltered the original sorted map to filter @param keyPredicate predicate to test keys against @return new SortedMap with entries that match the predicate
2370 Filters a sorted map by value predicate. @param unfiltered input sorted map @param valuePredicate condition to filter values @return filtered sorted map
2371 Creates an immutable sorted multiset from elements. @param comparator for sorting the elements @param elements iterator of elements to include @return ImmutableSortedMultiset instance
2372 Generates a set of location information from class loader. @param classloader the class loader to inspect @return ImmutableSet of LocationInfo objects
2373 Determines the mask type from given bounds. @param bounds array of type bounds @return Class or Type representing the mask, or null if none found
2374 Processes component type, handling wildcards. @param componentType the type to process @return processed Type object
2375 Groups elements by equality. @param elements iterable collection of comparable elements @return collection of lists with grouped equal elements
2376 Creates an immutable multiset from the given iterable. @param elements the source elements to include in the multiset @return an ImmutableMultiset containing the elements
2377 Creates an immutable multiset from iterator elements. @param elements iterator of elements to include @return ImmutableMultiset containing the elements
2378 Creates an immutable multiset from the input with elements sorted by decreasing count. @param multiset the original multiset to process @return an ImmutableMultiset with entries sorted by count in descending order
2379 Generates all permutations of input elements. @param elements collection of elements to permute @return collection containing all permutations as lists
2380 Converts iterable to immutable list. @param elements iterable of elements @return ImmutableList containing the elements
2381 Converts a RangeSet to an ImmutableRangeSet. @param rangeSet the input RangeSet to convert @return an ImmutableRangeSet representation of the input
2382 Converts a SortedSet to an ImmutableSortedSet. @param sortedSet the input SortedSet @return ImmutableSortedSet with elements from sortedSet
2383 Reads lines from a file and returns them as an immutable list. @return ImmutableList of strings read from the file @throws IOException if an I/O error occurs
2384 Returns an immutable map of class to instance. @return ImmutableClassToInstanceMap containing mapped instances
2385 Creates an ImmutableListMultimap from a collection of map entries. @param mapEntries collection of entries with keys and collections of values @param valueComparator optional comparator for sorting values @return ImmutableListMultimap with sorted or unsorted values based on comparator
2386 Returns an immutable map. @return ImmutableMap instance from m1()
2387 Constructs an ImmutableSetMultimap from entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator optional comparator for value ordering @return ImmutableSetMultimap with sorted or unsorted values
2388 Converts Properties to ImmutableMap. @param properties source properties object @return ImmutableMap containing key-value pairs from Properties
2389 Creates an immutable map from a collection with elements as keys and their indices as values. @param list the input collection of elements @return ImmutableMap where each element is mapped to its index in the list
2390 Returns an immutable map of type to instance. @return ImmutableTypeToInstanceMap containing mappings from mapBuilder
2391 Creates a TypeTable from mappings. @param mappings map of TypeVariableKey to Type @return TypeTable instance
2392 Constructs an immutable map from keys and a value function. @param keys iterator of keys @param valueFunction function to compute values for keys @return ImmutableMap with computed key-value pairs
2393 Retrieves entries between specified keys. @param fromKey starting key (inclusive) @param toKey ending key (exclusive) @return ImmutableSortedMap containing entries from fromKey to toKey
2394 Creates a collector for ImmutableSortedMap. @param comparator key comparator @param keyFunction extracts keys from elements @param valueFunction extracts values from elements @param mergeFunction merges duplicate values @return Collector for ImmutableSortedMap
2395 Returns result of m3(m2()) if m1() is false; otherwise returns null. @return E object or null based on condition
2396 Checks condition and throws exception if true; otherwise returns result. @throws NoSuchElementException if condition in m1() is met
2397 Returns an immutable set of non-null elements. @return ImmutableSet containing non-null elements from m1()
2398 Checks if a type is masked. @param type TypeToken to check @return true if type is masked, false otherwise
2399 Checks if a given type is masked. @param type the Type to check @return true if type is masked, false otherwise
2400 Checks if a type is valid using another method. @param type TypeToken object representing the type to check @return true if valid, false otherwise
2401 Executes masked functions based on map conditions.
2402 Filters a BiMap based on a key predicate. @param unfiltered the original BiMap to filter @param keyPredicate predicate to determine which keys to retain @return filtered BiMap with only matching keys
2403 Filters a bi-directional map based on a value predicate. @param unfiltered the original BiMap to filter @param valuePredicate predicate to test values @return filtered BiMap with entries matching the predicate
2404 Creates an immutable sorted multiset from iterator using natural ordering. @param elements iterator of elements to include in the multiset @return ImmutableSortedMultiset with elements sorted naturally
2405 Creates a TypeToken for the given class. @param cls target class @return TypeToken representing the class or its generic type
2406 Creates an immutable multiset from elements. @return ImmutableMultiset containing non-null elements
2407 Returns an immutable multiset of contents. @return ImmutableMultiset containing elements from 'contents'
2408 Computes the Cartesian product of multiple lists. @param lists variable number of lists containing elements of type B @return a list of lists representing the Cartesian product
2409 Parses cache configuration specification. @param cacheBuilderSpecification configuration string @return CacheBuilderSpec object
2410 Returns an immutable list of non-null elements. @return ImmutableList containing non-null elements from m1()
2411 Lists all files in a directory. @param dir directory path to list files from @return immutable list of file paths
2412 Constructs an InternetDomainName from a given string. Normalizes the input by converting to lowercase and replacing dot-like characters. Validates length, number of parts, and syntax. @param name the domain name string
2413 Combines multiple ListenableFutures into a single future of a list. @param futures iterable collection of ListenableFutures @return ListenableFuture containing a list of results from the input futures
2414 Combines multiple listenable futures into a single future. @param futures iterable of listenable futures to combine @return FutureCombiner object containing combined futures
2415 Combines multiple listenable futures into a single future. @param futures iterable of listenable futures to combine @return FutureCombiner object with combined results
2416 Combines multiple listenable futures into a single future. @param futures iterable of listenable futures to combine @return a future that completes when all input futures complete
2417 Converts Iterable of ListenableFutures to an array. @param futures iterable of ListenableFutures @return array of ListenableFutures
2418 Creates an immutable range set from iterable of ranges. @param ranges collection of ranges to be included in the set @return ImmutableRangeSet containing the provided ranges
2419 Masks another range set with this one. @param other the range set to mask with @return ImmutableRangeSet resulting from masking operation
2420 Merges this range set with another. @param other the RangeSet to merge with @return ImmutableRangeSet containing merged ranges
2421 Creates an ImmutableBiMap from a stream of objects. @param keyFunction extracts the key from each object @param valueFunction extracts the value from each object @return ImmutableBiMap with keys and values extracted by functions
2422 Converts a map to an ImmutableClassToInstanceMap. @param map input map with class keys and instances @return ImmutableClassToInstanceMap or new instance built from map
2423 Processes a multimap and returns an immutable list multimap. @param multimap input multimap to process @return processed ImmutableListMultimap or original if conditions met
2424 Constructs an immutable multimap from builders. @return ImmutableMultimap with sorted keys and values if comparators are set
2425 Applies a remapping function to values within a specified range. @param range the range of keys to apply the function to @param value the value to use with the remapping function @param remappingFunction the function that determines the new value for each entry
2426 Returns an immutable set multimap from builders. @return ImmutableSetMultimap with sorted entries if keyComparator is present
2427 Constructs an immutable map from iterator values and a key function. @param values iterator of values to be mapped @param keyFunction function to generate keys from values @return ImmutableMap with keys generated by keyFunction
2428 Generates combinations of a given set size. @param set the input set @param size the combination size @return a set of sets containing all combinations
2429 Converts a Graph to an ImmutableGraph. @param graph the input graph to be converted @return an ImmutableGraph representation of the input graph
2430 Resolves types using provided mappings. @param mappings type variable to resolved type mapping @return TypeResolver instance with applied mappings
2431 Creates an immutable map from keys and a value function. @param keys Iterable of keys to be included in the map @param valueFunction Function to compute values for each key @return ImmutableMap with keys mapped to computed values
2432 Returns an element from m1. @return Element of type E or null if not found
2433 Adds an element to the collection. @param element the element to add @return true if addition is successful or within limits
2434 Returns an immutable set of ClassInfo objects. @return ImmutableSet containing ClassInfo instances
2435 Returns an immutable set of top-level ClassInfo objects. @return ImmutableSet containing ClassInfo instances that are top-level classes
2436 Validates and processes nodes. @param startNodes initial collection of nodes to process @return Iterable of processed nodes
2437 Applies mask to filter nodes. @param startNodes initial collection of nodes @return filtered iterable of nodes
2438 Applies a mask to filter nodes. @param startNodes initial collection of nodes to process @return Iterable of filtered nodes
2439 Processes a set of scanned files to generate resource information. @param scannedFiles collection of files to process @return ImmutableSet of ResourceInfo objects @throws IOException if an I/O error occurs during processing
2440 Specializes the invokable with a specified return type. @param <R1> the new return type, must be a subtype of R @param returnType the desired return type token @return specialized Invokable with the new return type
2441 Executes masked function logic. Calls m1(), m3(), and m2() in specific order.
2442 Applies masking logic to a given type. @param type the input Type object @return masked Type object or original if no special handling is needed
2443 Checks if a type matches or is compatible with another. @param formalType the target type to match against @param declaration the type variable declaration @return true if types match or are compatible, false otherwise
2444 Masks type argument based on declaration. @param declaration type variable declaration @param typeArg actual type argument @return masked type
2445 Creates a cache builder from specification string. @param spec configuration string for cache builder @return CacheBuilder instance configured as per spec
2446 Returns a cache spec with no maximum size. @return CacheBuilderSpec configured for unbounded caching
2447 Masks the given domain. @param domain the original domain name @return masked InternetDomainName object
2448 Wraps futures to process them in completion order. @param futures iterable of ListenableFutures @return ImmutableList of ListenableFutures processed in completion order
2449 Masks this range set with another. @param other RangeSet to mask with @return ImmutableRangeSet representing the masked result
2450 Converts a Multimap to an ImmutableMultimap. @param multimap the input Multimap @return an ImmutableMultimap representation of the input
2451 Returns an immutable multimap from superclass. @return Immutable list multimap of K to V
2452 Creates a collector for an immutable map. @param keyFunction function to extract keys from elements @param valueFunction function to extract values from elements @return Collector for ImmutableMap
2453 Creates an immutable set multimap with a single entry. @param k1 key for the entry @param v1 value for the entry @return ImmutableSetMultimap containing the single key-value pair
2454 Creates an immutable set multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableSetMultimap containing the specified entries
2455 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableSetMultimap containing the specified entries
2456 Creates an immutable multimap with four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableSetMultimap containing the specified entries
2457 Creates an ImmutableSetMultimap from key-value pairs. @param k1,k2,k3,k4,k5 keys @param v1,v2,v3,v4,v5 values associated with keys @return ImmutableSetMultimap containing the key-value pairs
2458 Creates an immutable set multimap from entries. @param entries iterable of key-value pairs @return ImmutableSetMultimap containing the entries
2459 Converts a Multimap to an ImmutableSetMultimap with no duplicates. @param multimap the input Multimap @return an ImmutableSetMultimap representation of the input
2460 Creates an immutable map from iterable values using a key function. @param values iterable of values to be mapped @param keyFunction function to derive keys from values @return ImmutableMap with derived keys and original values
2461 Creates a new ArrayTable with specified row and column keys. @param rowKeys iterable of row keys @param columnKeys iterable of column keys @return ArrayTable initialized with given row and column keys
2462 Generates the power set of a given set. @param set input set for which to generate the power set @return a set containing all subsets of the input set
2463 Creates a RegularImmutableTable based on cell density. @param cellList list of table cells @param rowSpace set of row identifiers @param columnSpace set of column identifiers @return DenseImmutableTable if dense, else SparseImmutableTable
2464 Converts mutable graph to immutable. @return ImmutableGraph representation of mutableGraph
2465 Converts a Network to an ImmutableNetwork. @param network the original network @return an ImmutableNetwork representation of the input network
2466 Converts a ValueGraph to an ImmutableValueGraph. @param graph the original graph to be converted @return an ImmutableValueGraph instance
2467 Creates a TypeResolver with mappings from contextType. @param contextType the type to introspect for mappings @return TypeResolver instance initialized with mappings
2468 Resolves type by applying masking. @param contextType the original context type @return resolved TypeResolver object
2469 Resolves type by comparing formal and actual types. @param formal the expected type @param actual the provided type @return resolved Type object
2470 Creates an immutable map from elements using a value function. @param valueFunction function to compute values for the map entries @return ImmutableMap with non-null keys and computed values
2471 Creates a MinMaxPriorityQueue with initial contents. @param initialContents iterable of elements to initialize the queue @return MinMaxPriorityQueue containing the provided elements
2472 Masks an element by invoking a helper method. @param element the element to be masked @return always returns true
2473 Retrieves classes in the specified package. @param packageName name of the package to search @return ImmutableSet of ClassInfo objects matching the package
2474 Retrieves ClassInfo objects for a given package. @param packageName name of the package to search in @return ImmutableSet of ClassInfo objects from the specified package
2475 Generates an iterable from a starting node. @param startNode the initial node to start iteration @return Iterable of nodes
2476 Starts traversal from a given node. @param startNode initial node to begin traversal @return Iterable of nodes in traversal order
2477 Initiates traversal from a starting node. @param startNode initial node for traversal @return iterable of nodes reachable from startNode
2478 Retrieves resource information. @throws IOException if an I/O error occurs @return Immutable set of ResourceInfo objects
2479 Constructs a ClassPath by scanning class loader locations. @param classloader the ClassLoader to scan @return a ClassPath object representing the scanned resources
2480 Creates an invokable with specified return type. @param returnType Class representing the desired return type @return Invokable object configured for the given return type
2481 Processes cache entry and returns its value. @param entry the cache entry to process @param now current timestamp @return cached value or null if expired or invalid
2482 Masks function execution with timestamp. @param now current timestamp in milliseconds
2483 Resolves type variable bounds using a resolver. @param var the type variable to resolve @param forDependants table of dependent types @return resolved type or original if no change
2484 Returns the generic type or raw class of a method. @return Type representing the generic type or raw class
2485 Masks runtime type using resolver. @return masked object
2486 Creates a traverser for file tree children. @return Traverser instance for navigating file trees
2487 Parses and validates a host specifier. @param specifier host string to parse @return HostSpecifier object with resolved address or domain @throws IllegalArgumentException if parsing fails or domain is invalid
2488 Constructs an ancestor domain name with specified levels. @param levels number of levels to include in the ancestor @return InternetDomainName object representing the ancestor
2489 Constructs an Internet domain name. @param leftParts parts of the domain to be combined @return constructed InternetDomainName object
2490 Validates domain name format. @param name domain name to validate @return true if valid, false otherwise
2491 Collects elements into an ImmutableListMultimap. @param keyFunction extracts the key from each element @param valuesFunction extracts a stream of values for each element @return Collector that groups elements by keys with associated values
2492 Creates an immutable multimap with a single key-value pair. @param <K> key type @param <V> value type @param k1 the key @param v1 the value associated with the key @return an ImmutableListMultimap containing the key-value pair
2493 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableListMultimap containing the key-value pairs
2494 Constructs an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableMultimap containing the specified entries
2495 Creates an immutable multimap with four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return Immutable multimap containing the specified key-value pairs
2496 Creates an immutable multimap with key-value pairs. @param k1,k2,k3,k4,k5 keys for the entries @param v1,v2,v3,v4,v5 values for the entries @return Immutable list multimap containing the specified entries
2497 Creates an immutable multimap from given entries. @param entries iterable of key-value pairs @return ImmutableListMultimap containing the entries
2498 Creates an immutable multimap from iterator values. @param values iterator of values to map @param keyFunction function to derive keys from values @return ImmutableListMultimap with derived keys and original values
2499 Creates a MediaType with specified attribute and values. @param attribute the media type attribute @param values iterable of attribute values @return a new MediaType instance
2500 Creates an ImmutableSetMultimap from a stream of elements. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return ImmutableSetMultimap with keys and associated values
2501 Returns the inverse mapping. @return ImmutableSetMultimap with keys and values swapped
2502 Marks the transition state and checks for services in bad states. Throws an exception if any service is not in the NEW state.
2503 Retrieves a multimap of states to services. @return ImmutableSetMultimap containing state-service mappings
2504 Creates an immutable map from elements using a key function. @param keyFunction extracts keys from elements of type E @return ImmutableMap with keys generated by keyFunction and values of type E
2505 Creates an ArrayTable from the given Table. @param table input table with rows R, columns C, and values V @return new ArrayTable instance initialized with the input table's data
2506 Converts mutable network to immutable. @return ImmutableNetwork instance
2507 Converts mutable value graph to immutable. @return ImmutableValueGraph representation of the mutable graph
2508 Initializes a TypeToken with the specified class. @param declaringClass the class declaring the type
2509 Creates and returns a MinMaxPriorityQueue using default comparator. @return MinMaxPriorityQueue instance
2510 Creates a MinMaxPriorityQueue from iterable with natural ordering. @param initialContents elements to initialize the queue @return MinMaxPriorityQueue instance
2511 Finds neighbors of a node in a graph. @param graph the input graph @param node the target node @return immutable set of neighboring nodes
2512 Retrieves an entry by key. @param key the key to search for @return ReferenceEntry object or null if not found
2513 Checks if an entry should be masked. @param entry the reference entry to check @param now current timestamp @return true if entry should be masked, false otherwise
2514 Creates or retrieves a LoadingValueReference for the given key. @param key the key to look up @param hash the hash of the key @param checkTime whether to check entry freshness @return LoadingValueReference for the key, or null if conditions are met
2515 Checks read count and calls m2 if below threshold.
2516 Resolves type variable with bounds. @param var the type variable to resolve @param forDependants context for dependency resolution @return resolved type or original if no change
2517 Executes a combining callable with an executor. @param combiningCallable the callable to combine results @param executor the executor to run the task @return ClosingFuture with combined result
2518 Executes an asynchronous callable with a given executor. @param combiningCallable the callable to execute @param executor the executor to use @return ClosingFuture of the callable result
2519 Parses and returns a HostSpecifier from the given string. @param specifier the string representation of the host specifier @return HostSpecifier object parsed from the input string @throws ParseException if the input string is invalid
2520 Validates if specifier is a valid host. @param specifier string to validate @return true if valid, false otherwise
2521 Returns an Internet domain name if condition is met. @return InternetDomainName object or null
2522 Checks and returns the domain name if valid. @return InternetDomainName object or throws exception if invalid
2523 Returns an Internet domain name based on condition. @return InternetDomainName object or null if condition not met
2524 Masks the domain name, returning the current instance if valid. @return InternetDomainName instance or throws an exception if invalid
2525 Masks domain by removing its top-level part. @return InternetDomainName with masked top-level domain
2526 Collects elements into an ImmutableListMultimap using key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return Collector that groups elements by keys with corresponding values
2527 Creates an immutable multimap with one entry. @param k1 key for the entry @param v1 value for the entry @return ImmutableMultimap containing the single key-value pair
2528 Creates an immutable multimap with two key-value pairs. @param <K> key type @param <V> value type @param k1 first key @param v1 first value @param k2 second key @param v2 second value @return ImmutableMultimap containing the specified key-value pairs
2529 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableMultimap containing specified key-value pairs
2530 Creates an immutable multimap with four key-value pairs. @param <K> key type @param <V> value type @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableMultimap containing specified key-value pairs
2531 Creates an immutable multimap with five key-value pairs. @param <K> the type of keys @param <V> the type of values @param k1,k2,k3,k4,k5 keys for the entries @param v1,v2,v3,v4,v5 values for the entries @return ImmutableMultimap containing specified key-value pairs
2532 Creates an immutable multimap from iterable entries. @param entries iterable of key-value entry pairs @return ImmutableMultimap containing the entries
2533 Returns the inverted multimap, creating it if necessary. @return Inverted ImmutableListMultimap from m1()
2534 Creates an ImmutableListMultimap from Iterable values using a key function. @param values iterable collection of values to be mapped @param keyFunction function to derive keys from values @return ImmutableListMultimap with derived keys and original values
2535 Masks an attribute with a given value. @param attribute name of the attribute to mask @param value value to apply as a mask @return MediaType object representing the masked attribute
2536 Creates a media type with specified parameters. @param parameters map containing media type parameters @return MediaType object
2537 Creates a MediaType object with specified type and subtype. @param type the primary type of the media @param subtype the subtype of the media @return MediaType object with parsed charset set to Optional.empty()
2538 Parses a media type string. @param input media type string to parse @return MediaType object or throws IllegalArgumentException if parsing fails
2539 Initializes ServiceManager with a list of services. @param services iterable collection of Service instances
2540 Groups elements into an ImmutableSetMultimap. @param keyFunction extracts the key from each element @param valuesFunction extracts a stream of values from each element @return ImmutableSetMultimap with keys and corresponding sets of values
2541 Processes and returns a TypeToken based on input type. @param type input type to process @return processed TypeToken object
2542 Creates a MinMaxPriorityQueue with natural ordering. @return MinMaxPriorityQueue instance configured for min-max operations
2543 Loads value for key using cache loader. @param key the key to load value for @param hash computed hash of the key @param loader function to load value if not present @param checkTime whether to check time expiration @return loaded value or null if loading fails
2544 Processes cache load and updates statistics. @param key the cache key @param hash the hash code of the key @param loadingValueReference reference to the loading value @param newValue future holding the new value @return loaded value or throws ExecutionException if failed
2545 Masks a reference entry by checking its validity and updating the external cache. @param entry the reference entry to mask @return true if masking is successful, false otherwise
2546 Checks if a value exists in the map. @param value the value to search for @return true if value is found, false otherwise
2547 Groups elements by a specified key function. @param keyFunction extracts the key for each element @return ImmutableListMultimap with grouped elements
2548 Creates a MediaType with the specified Charset. @param charset character set to apply @return MediaType object with parsed charset
2549 Returns media type based on parameter condition. @return MediaType object determined by condition
2550 Creates a MediaType with specified application type and subtype. @param subtype media subtype @return MediaType object
2551 Creates a media type with audio base. @param subtype specific audio subtype @return MediaType object with audio type and given subtype
2552 Creates a MediaType with FONT_TYPE as the type. @param subtype specific subtype of the media @return MediaType object with FONT_TYPE and given subtype
2553 Creates a media type with IMAGE_TYPE as the main type. @param subtype specific subtype of the image @return MediaType object representing the image type
2554 Creates a MediaType with specified subtype. @param subtype media subtype @return MediaType object
2555 Creates a media type with VIDEO_TYPE and given subtype. @param subtype specific media subtype @return MediaType object
2556 Returns an ImmutableTable based on cell count. @return ImmutableTable instance created from cells
2557 Retrieves the type token of the superclass. @return TypeToken of the superclass or null if not found
2558 Resolves type tokens from runtime type. @return ImmutableList of resolved TypeToken objects
2559 Returns a TypeToken for the superclass. @param superclass the superclass to check against @return TypeToken representing the superclass or throws an error
2560 Loads entries for given keys using provided loader. @param keys set of keys to load @param loader cache loader to fetch data @return map of loaded key-value pairs @throws ExecutionException if loading fails
2561 Checks entries using mask function. @return true if any entry matches the mask, false otherwise
2562 Returns an immutable table. @return ImmutableTable instance from m1()
2563 Checks conditions in table entries. @return true if any condition met, false otherwise
2564 Retrieves a TypeToken for the specified subclass. @param subclass the subclass to check against @return TypeToken representing the subclass or throws an error if invalid
2565 Converts a Table to an ImmutableTable. @param <R> row key type @param <C> column key type @param <V> value type @param table the input Table @return an ImmutableTable with the same data as the input
2566 Collects elements into an ImmutableTable using specified row, column, and value functions. @param rowFunction extracts the row key from each element @param columnFunction extracts the column key from each element @param valueFunction extracts the value from each element @return Collector that gathers elements into an ImmutableTable
