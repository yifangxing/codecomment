file_path,Name,full_name,Start Line,End Line,Comment,Pre_Comment,child Name,domain,inner_method,node_level
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,<init>,com.google.common.base.Absent:<init>(),36,36,"/**
 * Private constructor to prevent instantiation of the Absent class.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,<init>,com.google.common.base.Present:<init>(java.lang.Object),31,33,"/**
 * Sets the reference for the presenter.
 * @param reference The object to be presented.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(java.lang.Object),48,51,"/**
 * Returns the value or the provided default if absent.
 * @param defaultValue Value to return if the Optional is empty.
 * @return The value or the provided default.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Supplier),59,63,"/**
 * Returns the result of the supplier, or this if it's present.
 * @param supplier Supplier to evaluate if this is absent.
 * @return The value from the supplier or this value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter$IdentityConverter:doAndThen(com.google.common.base.Converter),581,584,"/**
 * Chains this converter with another, applying them sequentially.
 * @param otherConverter The converter to chain with.
 * @return A new Converter that applies both converters.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convertAll,com.google.common.base.Converter:convertAll(java.lang.Iterable),270,291,"/**
 * Converts an iterable of A to an iterable of B.
 * @param fromIterable Iterable of A to convert
 * @return Iterable of converted B objects
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(java.lang.Object),45,49,"/**
 * Returns the value or the provided default if absent.
 * @param defaultValue Value to return if the Optional is empty.
 * @return The contained value or the provided default.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(com.google.common.base.Ticker),145,147,"/**
 * Constructs a Stopwatch with the given Ticker.
 * @param ticker The Ticker to use for timing.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderRowsBy,com.google.common.collect.ImmutableTable$Builder:orderRowsBy(java.util.Comparator),203,207,"/**
 * Orders rows using the provided comparator.
 * @param rowComparator Comparator for row ordering.
 * @return This builder, for chaining.
 */
",Specifies the ordering of the generated table's rows.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,orderColumnsBy,com.google.common.collect.ImmutableTable$Builder:orderColumnsBy(java.util.Comparator),210,214,"/**
 * Orders columns using the provided comparator.
 * @param columnComparator Comparator for column ordering.
 * @return This builder, for chaining.
 */
",Specifies the ordering of the generated table's columns.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,mergeSorted,"com.google.common.collect.Iterables:mergeSorted(java.lang.Iterable,java.util.Comparator)",1070,1083,"/**
 * Merges multiple sorted iterables into a single sorted iterable.
 * @param iterables Iterable of iterables to merge.
 * @param comparator Comparator for sorting the elements.
 * @return A new sorted iterable.
 */
","* Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries
   * will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterables} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterables}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,indexOf,"com.google.common.collect.Iterators:indexOf(java.util.Iterator,com.google.common.base.Predicate)",801,811,"/**
 * Finds the index of the first element matching the predicate.
 * @param iterator Iterator of elements to search.
 * @param predicate Predicate to test each element.
 * @return Index of the first match, or -1 if none found.
 */
","* Returns the index in {@code iterator} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterator has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterators.get(iterator, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * <p>If -1 is returned, the iterator will be left exhausted: its {@code hasNext()} method will
   * return {@code false}. Otherwise, the iterator will be set to the element which satisfies the
   * {@code predicate}.
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(java.util.Comparator),384,394,"/**
 * Creates a SortedSetMultimapBuilder with a custom comparator for values.
 * @param comparator Comparator to sort the values in the sorted sets.
 * @return SortedSetMultimapBuilder for building multimaps.
 */
","* Uses a {@link TreeSet} ordered by the specified comparator to store value collections.
     *
     * <p>Multimaps generated by the resulting builder will not be serializable if {@code
     * comparator} is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:enumSetValues(java.lang.Class),397,409,"/**
* Creates a SetMultimapBuilder for enum values of a given class.
* @param valueClass Class of the enum values to use.
* @return A SetMultimapBuilder configured for enum values.
*/
",Uses an {@link EnumSet} to store value collections.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,union,"com.google.common.collect.Sets:union(java.util.Set,java.util.Set)",830,906,"/**
 * Returns a view of the union of two sets.
 * @param set1 first set
 * @param set2 second set
 * @return SetView containing the union of set1 and set2
 */","* Returns an unmodifiable <b>view</b> of the union of two sets. The returned set contains all
   * elements that are contained in either backing set. Iterating over the returned set iterates
   * first over all the elements of {@code set1}, then over each element of {@code set2}, in order,
   * that is not contained in {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,intersection,"com.google.common.collect.Sets:intersection(java.util.Set,java.util.Set)",935,1004,"/**
 * Returns a view of the intersection of two sets.
 * @param set1 first set
 * @param set2 second set
 * @return SetView containing elements present in both sets
 */
","* Returns an unmodifiable <b>view</b> of the intersection of two sets. The returned set contains
   * all elements that are contained by both backing sets. The iteration order of the returned set
   * matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * <p><b>Note:</b> The returned view performs slightly better when {@code set1} is the smaller of
   * the two sets. If you have reason to believe one of your sets will generally be smaller than the
   * other, pass it first. Unfortunately, since this method sets the generic type of the returned
   * set based on the type of the first set passed, this could in rare cases force you to make a
   * cast, for example:
   *
   * {@snippet :
   * Set<Object> aFewBadObjects = ...
   * Set<String> manyBadStrings = ...
   *
   * // impossible for a non-String to be in the intersection
   * SuppressWarnings(""unchecked"")
   * Set<String> badStrings = (Set) Sets.intersection(
   *     aFewBadObjects, manyBadStrings);
   * }
   *
   * <p>This is unfortunate, but should come up only very rarely.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,difference,"com.google.common.collect.Sets:difference(java.util.Set,java.util.Set)",1016,1080,"/**
 * Returns a view of elements in set1 that are not in set2.
 * @param set1 the first set
 * @param set2 the second set
 * @return A SetView containing elements in set1 but not set2
 */
","* Returns an unmodifiable <b>view</b> of the difference of two sets. The returned set contains
   * all elements that are contained by {@code set1} and not contained by {@code set2}. {@code set2}
   * may also contain elements not present in {@code set1}; these are simply ignored. The iteration
   * order of the returned set matches that of {@code set1}.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,symmetricDifference,"com.google.common.collect.Sets:symmetricDifference(java.util.Set,java.util.Set)",1093,1160,"/**
 * Returns a symmetric difference view of two sets.
 * @param set1 The first set.
 * @param set2 The second set.
 */
","* Returns an unmodifiable <b>view</b> of the symmetric difference of two sets. The returned set
   * contains all elements that are contained in either {@code set1} or {@code set2} but not in
   * both. The iteration order of the returned set is undefined.
   *
   * <p>Results are undefined if {@code set1} and {@code set2} are sets based on different
   * equivalence relations, for example if {@code set1} is a {@link HashSet} and {@code set2} is a
   * {@link TreeSet} or the {@link Map#keySet} of an {@code IdentityHashMap}.
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,merge,"com.google.common.collect.TableCollectors$MutableCell:merge(java.lang.Object,java.util.function.BinaryOperator)",197,200,"/**
 * Merges the given value into the current value using mergeFunction.
 * @param value The value to merge.
 * @param mergeFunction The function to merge the values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",51,79,"/**
 * Converts a stream to an ImmutableTable using provided functions.
 * @param rowFunction Maps input to row key.
 * @param columnFunction Maps input to column key.
 * @param valueFunction Maps input to value.
 * @param mergeFunction Merges values for duplicate keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean[])",186,203,"/**
 * Finds the index of the target array within the given array.
 * @param array array to search within
 * @param target array to search for
 * @return Index of target array, or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte[])",116,133,"/**
 * Finds the first index of target array within the given array.
 * @param array byte array to search within
 * @param target byte array to search for
 * @return First index of target or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char[])",174,191,"/**
 * Finds the index of the first occurrence of target in array.
 * @param array char array to search within
 * @param target char array to search for
 * @return Index of target or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double[])",160,177,"/**
 * Finds the index of the target array within the given array.
 * @param array The array to search within.
 * @param target The array to search for. Returns -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float[])",157,174,"/**
 * Finds the first index of target array within array.
 * @param array array to search in
 * @param target array to search for
 * @return First index or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * <p>Note that this always returns {@code -1} when {@code target} contains {@code NaN}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int[])",184,201,"/**
 * Finds the first index of target array within array.
 * @param array array to search within
 * @param target array to search for
 * @return First index or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long[])",145,162,"/**
 * Finds the index of the target array within the given array.
 * @param array array to search within
 * @param target array to search for
 * @return Index of target, or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short[])",178,195,"/**
 * Finds the index of the target array within the given array.
 * @param array array to search
 * @param target array to find
 * @return Index of target or -1 if not found.
 */
","* Returns the start position of the first occurrence of the specified {@code target} within
   * {@code array}, or {@code -1} if there is no such occurrence.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code Arrays.copyOfRange(array,
   * i, i + target.length)} contains exactly the same elements as {@code target}.
   *
   * @param array the array to search for the sequence {@code target}
   * @param target the array to search for as a sub-sequence of {@code array}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,addListener,"com.google.common.util.concurrent.ImmediateFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",41,60,"/**
 * Adds a listener to be executed by the given executor.
 * @param listener Runnable to execute.
 * @param executor Executor to run the listener on.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor$Guard:<init>(com.google.common.util.concurrent.Monitor),318,321,"/**
 * Constructs a Guard associated with the given Monitor.
 * @param monitor The Monitor this Guard is associated with.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,newGuard,com.google.common.util.concurrent.Monitor:newGuard(java.util.function.BooleanSupplier),370,378,"/**
 * Creates a new Guard with the provided BooleanSupplier for satisfaction.
 * @param isSatisfied Supplier that provides boolean satisfaction.
 */
","* Creates a new {@linkplain Guard guard} for this monitor.
   *
   * @param isSatisfied the new guard's boolean condition (see {@link Guard#isSatisfied
   *     isSatisfied()})
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,or,com.google.common.base.Absent:or(com.google.common.base.Optional),53,57,"/**
 * Returns the second choice if the first is empty.
 * @param secondChoice Optional value to return if first is empty
 * @return The second choice Optional, cast to T.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Any:matchesAllOf(java.lang.CharSequence),1063,1067,"/**
 * Checks if the sequence matches all criteria.
 * @param sequence CharSequence to check. Always returns true.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher$Any:removeFrom(java.lang.CharSequence),1074,1078,"/**
 * Removes from the given sequence. Always returns an empty string.
 * @param sequence The sequence to remove from.
 * @return An empty string.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimFrom,com.google.common.base.CharMatcher$Any:trimFrom(java.lang.CharSequence),1101,1105,"/**
 * Trims the input sequence. Always returns an empty string.
 * @param sequence The sequence to trim.
 * @return An empty string.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$Any:and(com.google.common.base.CharMatcher),1112,1115,"/**
 * Returns a new CharMatcher that combines this with another.
 * @param other The other CharMatcher to combine with.
 * @return A new combined CharMatcher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$Any:or(com.google.common.base.CharMatcher),1117,1121,"/**
 * Returns a new CharMatcher that combines this matcher with another.
 * @param other The other CharMatcher to combine with.
 * @return A new CharMatcher that is the logical or of the two.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NamedFastMatcher:<init>(java.lang.String),981,983,"/**
 * Constructs a NamedFastMatcher with the given description.
 * @param description The description for this matcher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence),1143,1147,"/**
 * Returns -1, indicating the element is not found in the sequence.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,lastIndexIn,com.google.common.base.CharMatcher$None:lastIndexIn(java.lang.CharSequence),1156,1160,"/**
* Returns -1, indicating the last index is not found.
* @param sequence CharSequence to search within.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$None:matchesNoneOf(java.lang.CharSequence),1167,1171,"/**
 * Always returns true, effectively matching none of the sequence.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher$None:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",1183,1187,"/**
 * Returns the original sequence as a string.
 * @param sequence The sequence to return.
 * @param replacement Unused replacement sequence.
 * @return The original sequence as a string.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$None:countIn(java.lang.CharSequence),1209,1213,"/**
 * Counts occurrences (currently always returns 0).
 * @param sequence CharSequence to search within.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher$None:and(com.google.common.base.CharMatcher),1215,1219,"/**
 * Combines this matcher with another, returning this matcher.
 * @param other The other CharMatcher to combine with.
 * @return This CharMatcher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher$None:or(com.google.common.base.CharMatcher),1221,1224,"/**
 * Returns a new CharMatcher that combines this matcher with another.
 * @param other The other CharMatcher to combine with.
 * @return A new CharMatcher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Defaults.java,defaultValue,com.google.common.base.Defaults:defaultValue(java.lang.Class),42,65,"/**
 * Returns the default value for a given class type.
 * @param type The class type to get the default value for.
 * @return The default value or null if not a primitive.
 */
","* Returns the default value of {@code type} as defined by JLS --- {@code 0} for numbers, {@code
   * false} for {@code boolean} and {@code '\0'} for {@code char}. For non-primitive types and
   * {@code void}, {@code null} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$EquivalentToPredicate:<init>(com.google.common.base.Equivalence,java.lang.Object)",318,321,"/**
 * Constructor for EquivalentToPredicate.
 * @param equivalence Equivalence function to use.
 * @param target Target value for equivalence check.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,<init>,"com.google.common.base.Equivalence$Wrapper:<init>(com.google.common.base.Equivalence,java.lang.Object)",228,231,"/**
 * Constructs a Wrapper with given equivalence and reference.
 * @param equivalence Equivalence function for object comparison.
 * @param reference The reference object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$ForMapWithDefault:<init>(java.util.Map,java.lang.Object)",198,201,"/**
 * Constructor for a MapWithDefault.
 * @param map The map to wrap; must not be null.
 * @param defaultValue Default value if key is not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,"com.google.common.base.Functions$FunctionComposition:<init>(com.google.common.base.Function,com.google.common.base.Function)",260,263,"/**
 * Constructs a FunctionComposition with given functions f and g.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$FunctionForMapNoDefault:<init>(java.util.Map),157,159,"/**
 * Initializes the map with the provided map.
 * @param map The map to initialize with; must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$PredicateFunction:<init>(com.google.common.base.Predicate),316,318,"/**
 * Constructs a PredicateFunction with the given predicate.
 * @param predicate The predicate to use for filtering.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,<init>,com.google.common.base.Functions$SupplierFunction:<init>(com.google.common.base.Supplier),421,423,"/**
 * Constructs a SupplierFunction with the given supplier.
 * @param supplier The supplier of type T.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ToStringFunction:apply(java.lang.Object),74,78,"/**
 * Converts an object to its string representation.
 * @param o The object to convert.
 * @return The string representation of the object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern$JdkMatcher:<init>(java.util.regex.Matcher),55,57,"/**
* Initializes JdkMatcher with a provided Matcher.
* @param matcher The Matcher to be used by this JdkMatcher.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,<init>,com.google.common.base.JdkPattern:<init>(java.util.regex.Pattern),28,30,"/**
* Constructor for JdkPattern.
* @param pattern The Pattern to be used. Must not be null.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,"com.google.common.base.Joiner$MapJoiner:<init>(com.google.common.base.Joiner,java.lang.String)",381,384,"/**
 * Constructs a MapJoiner with a Joiner and key-value separator.
 * @param joiner The Joiner to use.
 * @param keyValueSeparator Separator between key-value pairs.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,<init>,com.google.common.base.Joiner:<init>(java.lang.String),80,82,"/**
 * Constructs a Joiner with the specified separator.
 * @param separator Separator string used to join elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner:useForNull(java.lang.String),276,294,"/**
 * Creates a Joiner that replaces nulls with the specified text.
 * @param nullText The text to use for null values.
 * @return A Joiner that handles null values.
 */
","* Returns a joiner with the same behavior as this one, except automatically substituting {@code
   * nullText} for any provided null elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,iterable,"com.google.common.base.Joiner:iterable(java.lang.Object,java.lang.Object,java.lang.Object[])",532,553,"/**
 * Creates an iterable from first, second, and rest elements.
 * @param first The first element.
 * @param second The second element.
 * @param rest The rest of the elements as an array.
 * @return An Iterable containing the elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,<init>,com.google.common.base.MoreObjects$ToStringHelper:<init>(java.lang.String),157,159,"/**
 * Constructs a ToStringHelper with the given class name.
 * @param className The name of the class to build the toString for.
 */
",Use {@link MoreObjects#toStringHelper(Object)} to create an instance.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,presentInstances,com.google.common.base.Optional:presentInstances(java.lang.Iterable),341,360,"/**
 * Returns an Iterable containing present instances from Optionals.
 * @param optionals Iterable of Optionals to filter.
 * @return Iterable of present values.
 */
","* Returns the value of each present instance from the supplied {@code optionals}, in order,
   * skipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are
   * evaluated lazily.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's
   * {@code Optional} class; use {@code
   * optionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.
   *
   * <p><b>Java 9 users:</b> use {@code optionals.stream().flatMap(Optional::stream)} instead.
   *
   * @since 11.0 (generics widened in 13.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compilePattern,com.google.common.base.Platform:compilePattern(java.lang.String),92,95,"/**
 * Compiles a pattern string into a CommonPattern object.
 * @param pattern The pattern string to compile.
 * @return A CommonPattern object representing the compiled pattern.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,"com.google.common.base.Predicates$CompositionPredicate:<init>(com.google.common.base.Predicate,com.google.common.base.Function)",694,697,"/**
* Constructs a CompositionPredicate with given predicate and function.
* @param p Predicate on B.
* @param f Function from A to B.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternPredicate:<init>(com.google.common.base.CommonPattern),734,736,"/**
 * Constructor.
 * @param pattern The pattern to use for filtering. Must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InPredicate:<init>(java.util.Collection),644,646,"/**
 * Constructs an InPredicate with the given target collection.
 * @param target Collection to check membership against.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$InstanceOfPredicate:<init>(java.lang.Class),567,569,"/**
 * Constructs an InstanceOfPredicate for the given class.
 * @param clazz The class to check against.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$NotPredicate:<init>(com.google.common.base.Predicate),382,384,"/**
 * Constructs a NotPredicate wrapping the given predicate.
 * @param predicate The predicate to invert.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$SubtypeOfPredicate:<init>(java.lang.Class),606,608,"/**
* Constructs a SubtypeOfPredicate for the given class.
* @param clazz The class to check against.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,defensiveCopy,com.google.common.base.Predicates:defensiveCopy(java.lang.Iterable),804,810,"/**
 * Creates a defensive copy of an iterable.
 * @param iterable The iterable to copy.
 * @return A new List containing the elements of the iterable.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Optional),51,55,"/**
 * Returns this Optional if present, otherwise returns secondChoice.
 * @param secondChoice Optional to return if this is absent.
 * @return this Optional if present, otherwise secondChoice.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,or,com.google.common.base.Present:or(com.google.common.base.Supplier),57,61,"/**
 * Returns the reference value, or evaluates the supplier if null.
 * @param supplier Supplier to use if reference is null.
 * @return The reference value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$MapSplitter:<init>(com.google.common.base.Splitter,com.google.common.base.Splitter)",482,485,"/**
* Constructs a MapSplitter with given splitters.
* @param outerSplitter Outer splitter for map keys.
* @param entrySplitter Splitter for map values.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter:split(java.lang.CharSequence),368,385,"/**
 * Splits a CharSequence into an Iterable of strings.
 * Returns an Iterable that yields substrings of the sequence.
 */
","* Splits {@code sequence} into string components and makes them available through an {@link
   * Iterator}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}. Java 8+ users may prefer {@link #splitToStream} instead.
   *
   * @param sequence the sequence of characters to split
   * @return an iteration over the segments split from the parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padStart,"com.google.common.base.Strings:padStart(java.lang.String,int,char)",92,103,"/**
 * Pads a string with a character to reach a minimum length.
 * @param string String to pad.
 * @param minLength Minimum length.
 * @param padChar Padding character.
 */
","* Returns a string, of length at least {@code minLength}, consisting of {@code string} prepended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padStart(""7"", 3, '0')} returns {@code ""007""}
   *   <li>{@code padStart(""2010"", 3, '0')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the end of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to insert at the beginning of the result until the minimum length
   *     is reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,padEnd,"com.google.common.base.Strings:padEnd(java.lang.String,int,char)",123,134,"/**
 * Pads a string to a minimum length with a specified padding character.
 * @param string The string to pad.
 * @param minLength The minimum length.
 * @param padChar The padding character.
 */
","* Returns a string, of length at least {@code minLength}, consisting of {@code string} appended
   * with as many copies of {@code padChar} as are necessary to reach that length. For example,
   *
   * <ul>
   *   <li>{@code padEnd(""4."", 5, '0')} returns {@code ""4.000""}
   *   <li>{@code padEnd(""2010"", 3, '!')} returns {@code ""2010""}
   * </ul>
   *
   * <p>See {@link java.util.Formatter} for a richer set of formatting capabilities.
   *
   * @param string the string which should appear at the beginning of the result
   * @param minLength the minimum length the resulting string must have. Can be zero or negative, in
   *     which case the input string is always returned.
   * @param padChar the character to append to the end of the result until the minimum length is
   *     reached
   * @return the padded string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$MemoizingSupplier:<init>(com.google.common.base.Supplier),133,135,"/**
 * Constructs a MemoizingSupplier with the given delegate supplier.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:<init>(com.google.common.base.Supplier),188,190,"/**
 * Constructs a NonSerializableMemoizingSupplier with the given delegate.
 * @param delegate The supplier to memoize.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,"com.google.common.base.Suppliers$SupplierComposition:<init>(com.google.common.base.Function,com.google.common.base.Supplier)",64,67,"/**
 * Constructs a SupplierComposition with a function and supplier.
 * @param function Function to apply to the supplier's result.
 * @param supplier Supplier providing the input for the function.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,<init>,com.google.common.base.Suppliers$ThreadSafeSupplier:<init>(com.google.common.base.Supplier),410,412,"/**
* Constructs a ThreadSafeSupplier with the given delegate supplier.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfInstanceOf,"com.google.common.base.Throwables:throwIfInstanceOf(java.lang.Throwable,java.lang.Class)",72,79,"/**
 * Throws the throwable if it's an instance of declaredType.
 * @param throwable The throwable to check.
 * @param declaredType The class to check against.
 */
","* Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (BarException | RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfInstanceOf(failure, BarException.class);
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,throwIfUnchecked,com.google.common.base.Throwables:throwIfUnchecked(java.lang.Throwable),129,137,"/**
 * Re-throws the throwable if it's a RuntimeException or Error.
 */
","* Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage:
   *
   * <pre>
   * for (Foo foo : foos) {
   *   try {
   *     foo.bar();
   *   } catch (RuntimeException | Error t) {
   *     failure = t;
   *   }
   * }
   * if (failure != null) {
   *   throwIfUnchecked(failure);
   *   throw new AssertionError(failure);
   * }
   * </pre>
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,getCausalChain,com.google.common.base.Throwables:getCausalChain(java.lang.Throwable),284,308,"/**
 * Returns a list of the causal chain of the given throwable.
 */","* Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code
   * throwable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and
   * will not reflect any subsequent changes to the cause chain.
   *
   * <p>Here's an example of how it can be used to find specific types of exceptions in the cause
   * chain:
   *
   * <pre>
   * Iterables.filter(Throwables.getCausalChain(e), IOException.class));
   * </pre>
   *
   * @param throwable the non-null {@code Throwable} to extract causes from
   * @return an unmodifiable list containing the cause chain starting with {@code throwable}
   * @throws IllegalArgumentException if there is a loop in the causal chain",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,jlaStackTrace,com.google.common.base.Throwables:jlaStackTrace(java.lang.Throwable),401,430,"/**
 * Returns a list of StackTraceElement objects from a Throwable.
 * @param t The Throwable to extract the stack trace from.
 * @return A List of StackTraceElement objects.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$FunctionToCacheLoader:load(java.lang.Object),167,170,"/**
 * Loads a value for the given key using the computing function.
 * @param key The key to look up.
 * @return The computed value for the key.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,load,com.google.common.cache.CacheLoader$SupplierToCacheLoader:load(java.lang.Object),218,222,"/**
* Loads a value based on the key, using a computing supplier.
* @param key The key to load (must not be null)
* @return The computed value.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,asyncReloading,"com.google.common.cache.CacheLoader:asyncReloading(com.google.common.cache.CacheLoader,java.util.concurrent.Executor)",184,208,"/**
 * Creates an async CacheLoader that uses the given executor.
 * @param loader The CacheLoader to wrap.
 * @param executor Executor for asynchronous reloading.
 * @return A new CacheLoader.
 */
","* Returns a {@code CacheLoader} which wraps {@code loader}, executing calls to {@link
   * CacheLoader#reload} using {@code executor}.
   *
   * <p>This method is useful only when {@code loader.reload} has a synchronous implementation, such
   * as {@linkplain #reload the default implementation}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$Segment:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1999,2002,"/**
 * Creates a new entry for the map.
 * @param key The key for the entry.
 * @param hash The hash code for the key.
 * @param next The next entry in the chain.
 * @return A new ReferenceEntry object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalListeners.java,asynchronous,"com.google.common.cache.RemovalListeners:asynchronous(com.google.common.cache.RemovalListener,java.util.concurrent.Executor)",40,46,"/**
 * Wraps a listener to execute removal notifications asynchronously.
 * @param listener Listener to wrap; @param executor Executor to use.
 */
","* Returns a {@code RemovalListener} which processes all eviction notifications using {@code
   * executor}.
   *
   * @param listener the backing listener
   * @param executor the executor with which removal notifications are asynchronously executed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,<init>,"com.google.common.cache.RemovalNotification:<init>(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",53,56,"/**
 * Constructs a RemovalNotification with a key, value, and cause.
 * @param key The key involved in the removal.
 * @param value The value involved in the removal.
 * @param cause The reason for the removal.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,forEach,com.google.common.collect.AbstractMapBasedMultimap:forEach(java.util.function.BiConsumer),1307,1312,"/**
 * Performs the given action on each key-value pair in the map.
 * @param action BiConsumer to apply to each key-value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.AbstractMapBasedMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
 * Performs the specified action on each entry (element, count).
 * @param action The action to perform.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(java.util.Comparator),47,49,"/**
* Constructs a new AbstractSortedMultiset with the given comparator.
* @param comparator Comparator used for sorting the elements.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.AbstractSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
 * Returns a sub-multiset between two elements (inclusive/exclusive).
 * @param fromElement Start element (inclusive)
 * @param fromBoundType Bound type for fromElement
 * @param toElement End element (exclusive)
 * @param toBoundType Bound type for toElement
 * @return Sub-multiset based on the provided elements and bounds
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,column,com.google.common.collect.ArrayTable:column(java.lang.Object),604,613,"/**
 * Returns a map containing a single column based on the key.
 * @param columnKey The column key.
 * @return A map with the column or an empty map if not found.
 */
","* Returns a view of all mappings that have the given column key. If the column key isn't in
   * {@link #columnKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each row key in {@link #rowKeySet()}, the returned map associates the row key
   * with the corresponding value in the table. Changes to the returned map will update the
   * underlying table, and vice versa.
   *
   * @param columnKey key of column to search for in the table
   * @return the corresponding map from row keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,row,com.google.common.collect.ArrayTable:row(java.lang.Object),696,705,"/**
 * Returns a map for the given row key.
 * @param rowKey The key representing the row.
 * @return A map for the row, or empty if not found.
 */
","* Returns a view of all mappings that have the given row key. If the row key isn't in {@link
   * #rowKeySet()}, an empty immutable map is returned.
   *
   * <p>Otherwise, for each column key in {@link #columnKeySet()}, the returned map associates the
   * column key with the corresponding value in the table. Changes to the returned map will update
   * the underlying table, and vice versa.
   *
   * @param rowKey key of row to search for in the table
   * @return the corresponding map from column keys to values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultiset,"com.google.common.collect.CollectCollectors:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",167,182,"/**
 * Creates a {@link Collector} that accumulates elements into a multiset.
 * @param elementFunction Maps input to multiset element.
 * @param countFunction Returns element count.
 * @param multisetSupplier Creates the multiset.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toMultimap,"com.google.common.collect.CollectCollectors:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",413,432,"/**
 * Creates a {@link Collector} that accumulates elements into a Multimap.
 * @param keyFunction Extracts the key from an input element.
 * @param valueFunction Extracts the value from an input element.
 * @param multimapSupplier Supplier for the Multimap to be populated.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToMultimap,"com.google.common.collect.CollectCollectors:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",434,457,"/**
 * Creates a collector that flattens elements to a multimap.
 * @param keyFunction Extracts the key from an element.
 * @param valueFunction Returns a stream of values for an element.
 * @param multimapSupplier Supplies the initial multimap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,map,"com.google.common.collect.CollectSpliterators:map(java.util.Spliterator,java.util.function.Function)",108,144,"/**
 * Creates a Spliterator that maps elements from another Spliterator.
 * @param fromSpliterator Source Spliterator
 * @param function Mapping function from InElementT to OutElementT
 * @return New Spliterator with mapped elements
 */
","* Returns a {@code Spliterator} over the elements of {@code fromSpliterator} mapped by {@code
   * function}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,filter,"com.google.common.collect.CollectSpliterators:filter(java.util.Spliterator,java.util.function.Predicate)",147,202,"/**
 * Filters elements of a Spliterator based on a predicate.
 * @param fromSpliterator source Spliterator
 * @param predicate test condition for elements
 * @return new Spliterator containing filtered elements
 */
",Returns a {@code Spliterator} filtered by the specified predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$FilteredCollection:forEach(java.util.function.Consumer),184,193,"/**
 * Applies the given action to each element that satisfies the predicate.
 * @param action The consumer to apply to matching elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$FilteredCollection:removeIf(java.util.function.Predicate),210,214,"/**
 * Removes elements based on the predicate and filter.
 * @param filter Predicate to filter elements for removal.
 * @return True if any elements were removed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$TransformedCollection:<init>(java.util.Collection,com.google.common.base.Function)",269,272,"/**
 * Constructs a TransformedCollection with given collection and function.
 * @param fromCollection Source collection to transform.
 * @param function Function to apply to each element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,forEach,com.google.common.collect.Collections2$TransformedCollection:forEach(java.util.function.Consumer),294,298,"/**
 * Applies the given action to each element of the collection.
 * @param action Consumer to apply to each transformed element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeIf,com.google.common.collect.Collections2$TransformedCollection:removeIf(java.util.function.Predicate),300,304,"/**
 * Removes elements based on the provided predicate.
 * @param filter Predicate to test each element.
 * @return True if any elements were removed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeContains,"com.google.common.collect.Collections2:safeContains(java.util.Collection,java.lang.Object)",100,107,"/**
 * Checks if a collection contains an object, handling exceptions.
 * @param collection Collection to check.
 * @param object Object to search for.
 * @return True if contained, false otherwise.
 */
","* Delegates to {@link Collection#contains}. Returns {@code false} if the {@code contains} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,safeRemove,"com.google.common.collect.Collections2:safeRemove(java.util.Collection,java.lang.Object)",113,120,"/**
 * Safely removes an object from a collection, handling exceptions.
 * @param collection Collection to remove from.
 * @param object Object to remove. Returns true if removed.
 */
","* Delegates to {@link Collection#remove}. Returns {@code false} if the {@code remove} method
   * throws a {@code ClassCastException} or {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInOrder,"com.google.common.collect.Comparators:isInOrder(java.lang.Iterable,java.util.Comparator)",73,88,"/**
 * Checks if an iterable is in ascending order based on the comparator.
 * @param iterable Iterable to check.
 * @param comparator Comparator for ordering elements.
 */
","* Returns {@code true} if each element in {@code iterable} after the first is greater than or
   * equal to the element that preceded it, according to the specified comparator. Note that this is
   * always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,isInStrictOrder,"com.google.common.collect.Comparators:isInStrictOrder(java.lang.Iterable,java.util.Comparator)",95,110,"/**
 * Checks if an iterable is in strictly increasing order.
 * @param iterable Iterable to check.
 * @param comparator Comparator for comparing elements.
 */
","* Returns {@code true} if each element in {@code iterable} after the first is <i>strictly</i>
   * greater than the element that preceded it, according to the specified comparator. Note that
   * this is always true when the iterable has fewer than two elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesFirst,com.google.common.collect.Comparators:emptiesFirst(java.util.Comparator),176,180,"/**
 * Compares Optionals, placing empty Optionals before non-empty.
 * @param valueComparator Comparator for values within Optionals.
 * @return Comparator for Optionals.
 */
","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,emptiesLast,com.google.common.collect.Comparators:emptiesLast(java.util.Comparator),189,193,"/**
 * Orders Optionals, placing empties last, using valueComparator.
 */
","* Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater
   * than all other values, and orders the rest using {@code valueComparator} on the contained
   * value.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable),152,155,"/**
 * Returns a view of the set containing elements less than toElement.
 * @param toElement the exclusive upper bound
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Comparable,boolean)",160,164,"/**
 * Returns a view of the set containing elements less than toElement.
 * @param toElement Element to end the set; exclusive if inclusive is false.
 * @param inclusive Whether to include toElement in the returned set.
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable),187,190,"/**
 * Returns a view of the set whose elements are >= fromElement.
 * @param fromElement the lower bound of the returned set
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Comparable,boolean)",195,199,"/**
 * Returns a view of the set whose elements are >= fromElement.
 * @param fromElement the lower bound, inclusive
 * @param inclusive whether fromElement is included
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,forEachEntry,com.google.common.collect.EnumMultiset:forEachEntry(java.util.function.ObjIntConsumer),283,291,"/**
 * Performs action on each entry with count > 0.
 * @param action Consumer to apply to each entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,add,com.google.common.collect.EvictingQueue:add(java.lang.Object),103,115,"/**
 * Adds an element to the collection. Returns true on success.
 */","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,<init>,"com.google.common.collect.FilteredEntryMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",55,58,"/**
 * Constructs a FilteredEntryMultimap, filtering entries based on predicate.
 * @param unfiltered The multimap to filter.
 * @param predicate The predicate to apply to each entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:addAll(java.util.Collection),127,131,"/**
 * Adds all elements from the given collection.
 * @param collection Collection of values to add.
 * @throws IllegalArgumentException if a key doesn't satisfy predicate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,"com.google.common.collect.FilteredKeyMultimap:<init>(com.google.common.collect.Multimap,com.google.common.base.Predicate)",45,48,"/**
 * Constructs a FilteredKeyMultimap with the given multimap and predicate.
 * @param unfiltered The multimap to filter.
 * @param keyPredicate Predicate to filter keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,<init>,com.google.common.collect.FilteredMultimapValues:<init>(com.google.common.collect.FilteredMultimap),43,45,"/**
* Constructor: initializes with a FilteredMultimap.
* @param multimap The FilteredMultimap to initialize with.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(com.google.common.collect.FluentIterable),172,178,"/**
 * Returns the input iterable, ensuring it's not null.
 * @param iterable The iterable to check.
 * @return The same iterable if not null.
 */
","* Construct a fluent iterable from another fluent iterable. This is obviously never necessary,
   * but is intended to help call out cases where one migration from {@code Iterable} to {@code
   * FluentIterable} has obviated the need to explicitly convert to a {@code FluentIterable}.
   *
   * @deprecated instances of {@code FluentIterable} don't need to be converted to {@code
   *     FluentIterable}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap:forEach(java.util.function.BiConsumer),570,578,"/**
 * Performs the given action on each key-value pair in this map.
 * @param action The BiConsumer to apply to each entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,getInstance,com.google.common.collect.ImmutableClassToInstanceMap:getInstance(java.lang.Class),182,186,"/**
 * Retrieves an instance of the specified type from the delegate.
 * @param type The class of the instance to retrieve.
 * @return An instance of the specified type, or null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,add,com.google.common.collect.ImmutableList$Builder:add(java.lang.Object),836,843,"/**
 * Adds an element to the builder and returns this builder.
 * @param element The element to add.
 * @return This builder instance.
 */
","* Adds {@code element} to the {@code ImmutableList}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableList:forEach(java.util.function.Consumer),416,423,"/**
 * Applies the consumer to each element of the collection.
 * @param consumer The consumer to apply to each element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,forEach,com.google.common.collect.ImmutableMapKeySet:forEach(java.util.function.Consumer),68,72,"/**
 * Performs the given action on each key in the map.
 * @param action The Consumer to execute for each key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,forEach,com.google.common.collect.ImmutableMapValues:forEach(java.util.function.Consumer),106,111,"/**
 * Applies the given action to each value in the map.
 * @param action The Consumer to apply to each value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderKeysBy,com.google.common.collect.ImmutableMultimap$Builder:orderKeysBy(java.util.Comparator),336,340,"/**
* Orders keys using the provided comparator.
* @param keyComparator Comparator for ordering keys.
* @return This builder, for chaining.
*/
","* Specifies the ordering of the generated multimap's keys.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,orderValuesBy,com.google.common.collect.ImmutableMultimap$Builder:orderValuesBy(java.util.Comparator),347,351,"/**
 * Orders values using the provided comparator.
 * @param valueComparator Comparator for sorting values.
 * @return This builder, for chaining.
 */
","* Specifies the ordering of the generated multimap's values for each key.
     *
     * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,add,com.google.common.collect.ImmutableMultiset$Builder:add(java.lang.Object),498,503,"/**
* Adds an element to the contents and returns the builder.
* @param element The element to add.
* @return This builder instance for chaining.
*/
","* Adds {@code element} to the {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addCopies,"com.google.common.collect.ImmutableMultiset$Builder:addCopies(java.lang.Object,int)",530,534,"/**
 * Adds specified number of copies of an element to the contents.
 * @param element Element to add.
 * @param occurrences Number of copies to add.
 * @return This builder instance.
 */
","* Adds a number of occurrences of an element to this {@code ImmutableMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,setCount,"com.google.common.collect.ImmutableMultiset$Builder:setCount(java.lang.Object,int)",546,550,"/**
 * Sets the count for a given element.
 * @param element The element to set the count for.
 * @param count The count to set.
 * @return This builder instance.
 */
","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forEach,com.google.common.collect.ImmutableSet$Indexed:forEach(java.util.function.Consumer),348,355,"/**
 * Applies the consumer to each element of the collection.
 * @param consumer The consumer to apply to each element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:add(java.lang.Object),955,962,"/**
 * Adds an element to the set and returns the builder.
 * @param e The element to add.
 * @return The set builder instance.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,"com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator,java.util.function.Function,java.util.function.ToIntFunction)",86,103,"/**
 * Collects elements into an ImmutableSortedMultiset.
 * @param comparator Comparator for elements.
 * @param elementFunction Extracts element from input.
 * @param countFunction Counts occurrences of elements.
 */
","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableSortedMultiset}
   * whose elements are the result of applying {@code elementFunction} to the inputs, with counts
   * equal to the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@code comparator}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,"com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object,boolean)",649,652,"/**
 * Returns a view of the sorted set containing elements up to `toElement`.
 * @param toElement Element to end the view; exclusive if inclusive is false.
 * @param inclusive Whether to include `toElement` in the view.
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,"com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object,boolean)",702,705,"/**
 * Returns a sorted set containing elements from fromElement to the end.
 * @param fromElement the starting element
 * @param inclusive whether fromElement is inclusive
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,forEach,com.google.common.collect.IndexedImmutableSet:forEach(java.util.function.Consumer),42,49,"/**
 * Applies the consumer to each element of the collection.
 * @param consumer The consumer to apply to each element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(java.lang.Iterable),72,81,"/**
 * Returns an unmodifiable view of the given iterable.
 * Returns existing unmodifiable view if available.
 */
",Returns an unmodifiable view of {@code iterable}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,unmodifiableIterable,com.google.common.collect.Iterables:unmodifiableIterable(com.google.common.collect.ImmutableCollection),89,95,"/**
 * Returns an unmodifiable iterable from an immutable collection.
 * @param iterable Immutable collection to wrap.
 * @return Unmodifiable iterable.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeFirstMatching,"com.google.common.collect.Iterables:removeFirstMatching(java.lang.Iterable,com.google.common.base.Predicate)",209,221,"/**
 * Removes and returns the first element matching the predicate.
 * @param removeFrom Iterable to remove from.
 * @param predicate Predicate to test elements.
 * @return Matching element or null if none found.
 */
","Removes and returns the first matching element, or returns {@code null} if there is none.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,cycle,com.google.common.collect.Iterables:cycle(java.lang.Iterable),373,391,"/**
 * Returns an Iterable that repeatedly cycles through the given iterable.
 */","* Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p>To cycle over the iterable {@code n} times, use the following: {@code
   * Iterables.concat(Collections.nCopies(n, iterable))}
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.generate(() -> iterable).flatMap(Streams::stream)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,com.google.common.base.Predicate)",572,598,"/**
 * Filters elements of an iterable based on a predicate.
 * @param unfiltered Iterable to filter.
 * @param retainIfTrue Predicate to test elements.
 * @return Filtered iterable.
 */
","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,transform,"com.google.common.collect.Iterables:transform(java.lang.Iterable,com.google.common.base.Function)",731,752,"/**
 * Transforms an iterable by applying a function to each element.
 * @param fromIterable Iterable to transform.
 * @param function Function to apply to each element.
 * @return Transformed iterable.
 */
","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterable}.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if {@code fromIterable}'s
   * iterator does. After a successful {@code remove()} call, {@code fromIterable} no longer
   * contains the corresponding element.
   *
   * <p>If the input {@code Iterable} is known to be a {@code List} or other {@code Collection},
   * consider {@link Lists#transform} and {@link Collections2#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,consumingIterable,com.google.common.collect.Iterables:consumingIterable(java.lang.Iterable),1020,1036,"/**
 * Returns an iterable that consumes elements as they are iterated.
 * Uses a ConsumingQueueIterator if the iterable is a Queue.
 */
","* Returns a view of the supplied iterable that wraps each generated {@link Iterator} through
   * {@link Iterators#consumingIterator(Iterator)}.
   *
   * <p>Note: If {@code iterable} is a {@link Queue}, the returned iterable will instead use {@link
   * Queue#isEmpty} and {@link Queue#remove()}, since {@link Queue}'s iteration order is undefined.
   * Calling {@link Iterator#hasNext()} on a generated iterator from the returned iterable may cause
   * an item to be immediately dequeued for return on a subsequent call to {@link Iterator#next()}.
   *
   * <p>Whether the input {@code iterable} is a {@link Queue} or not, the returned {@code Iterable}
   * is not thread-safe.
   *
   * @param iterable the iterable to wrap
   * @return a view of the supplied iterable that wraps each generated iterator through {@link
   *     Iterators#consumingIterator(Iterator)}; for queues, an iterable that generates iterators
   *     that return and consume the queue's elements in queue order
   * @see Iterators#consumingIterator(Iterator)
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$PeekingImpl:<init>(java.util.Iterator),1187,1189,"/**
 * Constructs a PeekingImpl with the given iterator.
 * @param iterator Iterator to peek at elements from.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(java.util.Iterator),129,149,"/**
 * Creates an unmodifiable iterator from a given iterator.
 * Returns existing unmodifiable iterator if available.
 */",Returns an unmodifiable view of {@code iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,unmodifiableIterator,com.google.common.collect.Iterators:unmodifiableIterator(com.google.common.collect.UnmodifiableIterator),157,164,"/**
 * Returns an unmodifiable iterator.
 * @param iterator The iterator to unmodifiable.
 * @return The unmodifiable iterator.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeAll,"com.google.common.collect.Iterators:removeAll(java.util.Iterator,java.util.Collection)",205,216,"/**
 * Removes all elements from iterator if they are in the collection.
 * @param removeFrom Iterator to remove elements from.
 * @param elementsToRemove Collection of elements to remove.
 * @return True if any elements were removed.
 */
","* Traverses an iterator and removes every element that belongs to the provided collection. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,removeIf,"com.google.common.collect.Iterators:removeIf(java.util.Iterator,com.google.common.base.Predicate)",227,239,"/**
 * Removes elements from an iterator if the predicate is true.
 * @param removeFrom Iterator to remove from, @param predicate Condition for removal.
 * @return True if any elements were removed.
 */
","* Removes every element that satisfies the provided predicate from the iterator. The iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,retainAll,"com.google.common.collect.Iterators:retainAll(java.util.Iterator,java.util.Collection)",250,261,"/**
 * Retains elements in collection if they are present in the given collection.
 * @param removeFrom Iterator to remove elements from.
 * @param elementsToRetain Collection to check for element presence.
 * @return True if any elements were removed.
 */
","* Traverses an iterator and removes every element that does not belong to the provided
   * collection. The iterator will be left exhausted: its {@code hasNext()} method will return
   * {@code false}.
   *
   * @param removeFrom the iterator to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterator}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,addAll,"com.google.common.collect.Iterators:addAll(java.util.Collection,java.util.Iterator)",363,373,"/**
 * Adds all elements from the iterator to the collection.
 * @param addTo Collection to add elements to.
 * @param iterator Iterator providing elements to add.
 * @return True if the collection was modified.
 */
","* Adds all elements in {@code iterator} to {@code collection}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,cycle,com.google.common.collect.Iterators:cycle(java.lang.Iterable),403,439,"/**
 * Returns an infinite cyclic iterator over the elements of iterable.
 */","* Returns an iterator that cycles indefinitely over the elements of {@code iterable}.
   *
   * <p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in {@code
   * iterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}
   * is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,com.google.common.base.Predicate)",666,682,"/**
 * Filters elements from an iterator based on a predicate.
 * @param unfiltered Iterator to filter.
 * @param retainIfTrue Predicate to test each element.
 * @return An iterator with filtered elements.
 */
","* Returns a view of {@code unfiltered} containing all elements that satisfy the input predicate
   * {@code retainIfTrue}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,all,"com.google.common.collect.Iterators:all(java.util.Iterator,com.google.common.base.Predicate)",707,717,"/**
 * Checks if all elements in the iterator satisfy the predicate.
 * @param iterator Iterator of elements to check.
 * @param predicate Predicate to apply to each element.
 * @return True if all elements satisfy the predicate.
 */
","* Returns {@code true} if every element returned by {@code iterator} satisfies the given
   * predicate. If {@code iterator} is empty, {@code true} is returned.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate)",728,740,"/**
 * Finds the first element in the iterator that satisfies the predicate.
 * @param iterator Iterator to search.
 * @param predicate Predicate to test each element.
 * @param <T> Type of elements in the iterator.
 * @throws NoSuchElementException if no element matches.
 */
","* Returns the first element in {@code iterator} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If no such element is found, the iterator
   * will be left exhausted: its {@code hasNext()} method will return {@code false}. If it is
   * possible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,
   * Predicate, Object)} instead.
   *
   * @throws NoSuchElementException if no element in {@code iterator} matches the given predicate",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,find,"com.google.common.collect.Iterators:find(java.util.Iterator,com.google.common.base.Predicate,java.lang.Object)",751,762,"/**
 * Finds the first element matching the predicate.
 * @param iterator Iterator of elements to check.
 * @param predicate Predicate to apply to each element.
 * @param defaultValue Return if no match is found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,transform,"com.google.common.collect.Iterators:transform(java.util.Iterator,com.google.common.base.Function)",821,831,"/**
 * Transforms an iterator by applying a function to each element.
 * @param fromIterator Source iterator.
 * @param function Function to apply to each element.
 * @return Transformed iterator of type T.
 */
","* Returns a view containing the result of applying {@code function} to each element of {@code
   * fromIterator}.
   *
   * <p>The returned iterator supports {@code remove()} if {@code fromIterator} does. After a
   * successful {@code remove()} call, {@code fromIterator} no longer contains the corresponding
   * element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,consumingIterator,com.google.common.collect.Iterators:consumingIterator(java.util.Iterator),997,1018,"/**
 * Returns an iterator that consumes elements and removes them.
 * @param iterator Iterator to wrap and consume elements from.
 * @return Consuming iterator.
 */
","* Returns a view of the supplied {@code iterator} that removes each element from the supplied
   * {@code iterator} as it is returned.
   *
   * <p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator
   * will fail on the first call to {@code next}. The returned {@link Iterator} is also not
   * thread-safe.
   *
   * @param iterator the iterator to remove and return elements from
   * @return an iterator that removes and returns elements from the supplied iterator
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,clear,com.google.common.collect.Iterators:clear(java.util.Iterator),1037,1043,"/**
 * Clears the iterator by removing all elements.
 * @param iterator Iterator to be cleared.
 */
",Clears the iterator using its remove method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,forEnumeration,com.google.common.collect.Iterators:forEnumeration(java.util.Enumeration),1139,1154,"/**
 * Creates an unmodifiable iterator from an enumeration.
 * @param enumeration The enumeration to wrap.
 * @return An UnmodifiableIterator.
 */
","* Adapts an {@code Enumeration} to the {@code Iterator} interface.
   *
   * <p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as
   * an {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection
   * using {@link Collections#list}.
   *
   * <p><b>Java 9 users:</b> use {@code enumeration.asIterator()} instead, unless it is important to
   * return an {@code UnmodifiableIterator} instead of a plain {@code Iterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,asEnumeration,com.google.common.collect.Iterators:asEnumeration(java.util.Iterator),1163,1178,"/**
 * Adapts an Iterator to an Enumeration.
 * @param iterator Iterator to adapt, must not be null.
 * @return Enumeration that uses the given iterator.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(com.google.common.collect.PeekingIterator),1281,1288,"/**
 * Returns the provided PeekingIterator, ensuring it's not null.
 * @param iterator The PeekingIterator to return.
 * @return The same PeekingIterator.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$AbstractListWrapper:<init>(java.util.List),1165,1167,"/**
 * Constructs a wrapper with the given backing list.
 * @param backingList The list to be wrapped. Must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$OnePlusArrayList:<init>(java.lang.Object,java.lang.Object[])",343,346,"/**
 * Constructs a OnePlusArrayList with a first element and rest array.
 * @param first The first element of the list.
 * @param rest The array containing the remaining elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$ReverseList:<init>(java.util.List),866,868,"/**
* Sets the internal list with the provided list.
* @param forwardList The list to be set. Must not be null.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingRandomAccessList:<init>(java.util.List,com.google.common.base.Function)",626,629,"/**
 * Initializes TransformingRandomAccessList with a list and a function.
 * @param fromList Source list. @param function Transformation function.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingRandomAccessList:removeIf(java.util.function.Predicate),666,670,"/**
 * Removes elements based on the provided predicate.
 * @param filter Predicate to filter elements for removal.
 * @return True if any elements were removed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TransformingSequentialList:<init>(java.util.List,com.google.common.base.Function)",569,572,"/**
 * Constructs a TransformingSequentialList with given list and function.
 * @param fromList The list to transform.
 * @param function Function to apply to each element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeIf,com.google.common.collect.Lists$TransformingSequentialList:removeIf(java.util.function.Predicate),604,608,"/**
 * Removes elements based on the provided predicate.
 * @param filter Predicate to test each element.
 * @return True if any elements were removed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$TwoPlusArrayList:<init>(java.lang.Object,java.lang.Object,java.lang.Object[])",373,377,"/**
 * Constructs a TwoPlusArrayList with first, second, and rest elements.
 * @param first The first element.
 * @param second The second element.
 * @param rest The remaining elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$AsMapView:<init>(java.util.Set,com.google.common.base.Function)",891,894,"/**
 * Constructs a new AsMapView with the given set and function.
 * @param set The set of keys.
 * @param function Function mapping keys to values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$KeySet:<init>(java.util.Map),3918,3920,"/**
 * Initializes KeySet with the provided map.
 * @param map The map whose keys will be represented.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$KeySet:forEach(java.util.function.Consumer),3931,3936,"/**
 * Performs the given action on each key in the map.
 * @param action The Consumer to apply to each key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$NavigableAsMapView:<init>(java.util.NavigableSet,com.google.common.base.Function)",1045,1048,"/**
 * Constructs a NavigableAsMapView from a NavigableSet and Function.
 * @param ks NavigableSet to map.
 * @param vFunction Function to generate values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesMap:<init>(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",2141,2145,"/**
 * Constructs a TransformedEntriesMap with the given map and transformer.
 * @param fromMap The input map to transform.
 * @param transformer Transforms entries from (K, V1) to (K, V2).
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$TransformedEntriesMap:forEach(java.util.function.BiConsumer),2206,2211,"/**
 * Applies the given action to each key-value pair in the map.
 * @param action BiConsumer to apply to each entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$Values:<init>(java.util.Map),4111,4113,"/**
* Constructor: Initializes the map with the provided map.
* @param map The map to initialize with; must not be null.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$Values:forEach(java.util.function.Consumer),4124,4129,"/**
 * Performs the given action on each value in the map.
 * @param action The consumer to apply to each value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newEnumMap,com.google.common.collect.Maps:newEnumMap(java.lang.Class),449,452,"/**
 * Creates a new EnumMap with the specified enum type.
 * @param type The enum type for the EnumMap.
 * @return A new EnumMap instance.
 */
","* Creates an {@code EnumMap} instance.
   *
   * @param type the key type for this map
   * @return a new, empty {@code EnumMap}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntry,com.google.common.collect.Maps:unmodifiableEntry(java.util.Map$Entry),1496,1512,"/**
 * Returns an unmodifiable entry based on the given entry.
 * @param entry The entry to create an unmodifiable view of.
 * @return An unmodifiable Entry.
 */
","* Returns an unmodifiable view of the specified map entry. The {@link Entry#setValue} operation
   * throws an {@link UnsupportedOperationException}. This also has the side effect of redefining
   * {@code equals} to comply with the Entry contract, to avoid a possible nefarious implementation
   * of equals.
   *
   * @param entry the entry for which to return an unmodifiable view
   * @return an unmodifiable view of the entry",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,"com.google.common.collect.Maps:transformEntry(com.google.common.collect.Maps$EntryTransformer,java.util.Map$Entry)",2107,2125,"/**
 * Transforms an entry using the provided transformer.
 * @param transformer Transforms the entry's key-value pair.
 * @param entry The entry to transform.
 * @return A new Entry with the transformed value.
 */
",Returns a view of an entry transformed by the specified transformer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asEntryToEntryFunction,com.google.common.collect.Maps:asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer),2128,2133,"/**
 * Adapts an EntryTransformer to a Function<Entry, Entry>.
 * @param transformer Transforms an Entry<K, V1> to Entry<K, V2>
 * @return A Function that applies the transformer.
 */
",Views an entry transformer as a function from entries to entries.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeGet,"com.google.common.collect.Maps:safeGet(java.util.Map,java.lang.Object)",3797,3804,"/**
 * Safely retrieves a value from a map by key, handling exceptions.
 * @param map the map to retrieve from
 * @param key the key to look up
 * @return Value associated with key, or null if not found/error.
 */
","* Delegates to {@link Map#get}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeContainsKey,"com.google.common.collect.Maps:safeContainsKey(java.util.Map,java.lang.Object)",3810,3817,"/**
 * Checks if the map contains the key, safely handling exceptions.
 * @param map The map to check.
 * @param key The key to check for.
 * @return True if the map contains the key, false otherwise.
 */
","* Delegates to {@link Map#containsKey}. Returns {@code false} on {@code ClassCastException} and
   * {@code NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,safeRemove,"com.google.common.collect.Maps:safeRemove(java.util.Map,java.lang.Object)",3823,3830,"/**
 * Safely removes a key from the map and returns its value.
 * @param map the map to remove from
 * @param key the key to remove
 * @return removed value or null if key not found/error
 */
","* Delegates to {@link Map#remove}. Returns {@code null} on {@code ClassCastException} and {@code
   * NullPointerException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,com.google.common.collect.MinMaxPriorityQueue$Builder:<init>(java.util.Comparator),178,180,"/**
 * Constructs a new Builder with the given comparator.
 * @param comparator Comparator used for ordering elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimap.java,forEach,com.google.common.collect.Multimap:forEach(java.util.function.BiConsumer),342,345,"/**
 * Applies the given action to each key-value pair in the map.
 * @param action BiConsumer to apply to each entry.
 */
","* Performs the given action for all key-value pairs contained in this multimap. If an ordering is
   * specified by the {@code Multimap} implementation, actions will be performed in the order of
   * iteration of {@link #entries()}. Exceptions thrown by the action are relayed to the caller.
   *
   * <p>To loop over all keys and their associated value collections, write {@code
   * Multimaps.asMap(multimap).forEach((key, valueCollection) -> action())}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$EnumSetSupplier:<init>(java.lang.Class),259,261,"/**
 * Constructs an EnumSetSupplier for the given enum class.
 * @param clazz The enum class to supply EnumSets for.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$TreeSetSupplier:<init>(java.util.Comparator),245,247,"/**
 * Constructs a new TreeSetSupplier with the given comparator.
 * @param comparator Comparator to order the elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(java.util.Comparator),152,161,"/**
 * Creates a MultimapBuilder with keys sorted by the given comparator.
 * @param comparator Comparator for sorting the keys.
 * @return MultimapBuilder with a TreeMap for keys.
 */
","* Uses a {@link TreeMap} sorted by the specified comparator to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.
   *
   * <p>Multimaps generated by the resulting builder will not be serializable if {@code comparator}
   * is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,enumKeys,com.google.common.collect.MultimapBuilder:enumKeys(java.lang.Class),168,179,"/**
 * Creates a MultimapBuilder with Enum keys.
 * @param keyClass Enum class to use as keys.
 * @return MultimapBuilder using the provided Enum class.
 */
","* Uses an {@link EnumMap} to map keys to value collections.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$AsMap:<init>(com.google.common.collect.Multimap),1879,1881,"/**
* Initializes the AsMap with the provided Multimap.
* @param multimap The Multimap to be wrapped.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$Keys:forEach(java.util.function.Consumer),1766,1770,"/**
* Applies the consumer to each key in the multimap.
* @param consumer The consumer to apply to each key.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$MapMultimap:<init>(java.util.Map),1143,1145,"/**
* Initializes the Multimap with the provided map.
* @param map The map to initialize the Multimap from.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:<init>(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1506,1510,"/**
 * Constructs a TransformedEntriesMultimap from a Multimap and transformer.
 * @param fromMultimap Source multimap.
 * @param transformer Transforms entries from the source multimap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.ImmutableMultimap),670,676,"/**
 * Returns an unmodifiable Multimap backed by the given ImmutableMultimap.
 * @param delegate The ImmutableMultimap to wrap.
 * @return An unmodifiable Multimap.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap),937,944,"/**
 * Returns an unmodifiable SetMultimap backed by the given ImmutableSetMultimap.
 * @param delegate the ImmutableSetMultimap to wrap
 * @return an unmodifiable SetMultimap
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap),1021,1028,"/**
 * Returns an unmodifiable ListMultimap from an ImmutableListMultimap.
 * @param delegate The ImmutableListMultimap to wrap.
 * @return An unmodifiable ListMultimap.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEachEntry,com.google.common.collect.Multiset:forEachEntry(java.util.function.ObjIntConsumer),347,350,"/**
 * Performs the given action on each entry (element, count).
 * @param action The action to perform.
 */
","* Runs the specified action for each distinct element in this multiset, and the number of
   * occurrences of that element. For some {@code Multiset} implementations, this may be more
   * efficient than iterating over the {@link #entrySet()} either explicitly or with {@code
   * entrySet().forEach(action)}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,forEach,com.google.common.collect.Multiset:forEach(java.util.function.Consumer),467,479,"/**
 * Applies the consumer to each element in the map, repeated by its count.
 */
","* {@inheritDoc}
   *
   * <p>Elements that occur multiple times in the multiset will be passed to the {@code Consumer}
   * correspondingly many times, though not necessarily sequentially.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$FilteredMultiset:<init>(com.google.common.collect.Multiset,com.google.common.base.Predicate)",333,336,"/**
 * Constructs a FilteredMultiset with the given multiset and predicate.
 * @param unfiltered The multiset to filter.
 * @param predicate The predicate to filter elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.ImmutableMultiset),122,128,"/**
 * Returns an unmodifiable Multiset from the given ImmutableMultiset.
 * @param multiset The ImmutableMultiset to wrap.
 * @return An unmodifiable Multiset view.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,union,"com.google.common.collect.Multisets:union(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",416,473,"/**
 * Returns a Multiset containing the union of two Multisets.
 * Returns a view of the multiset with the highest count for each element.
 */","* Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count
   * of each element is the <i>maximum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,intersection,"com.google.common.collect.Multisets:intersection(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",487,529,"/**
 * Returns the intersection of two multisets, containing only common elements.
 */","* Returns an unmodifiable view of the intersection of two multisets. In the returned multiset,
   * the count of each element is the <i>minimum</i> of its counts in the two backing multisets,
   * with elements that would have a count of 0 not included. The iteration order of the returned
   * multiset matches that of the element set of {@code multiset1}, with repeated occurrences of the
   * same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 2.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,sum,"com.google.common.collect.Multisets:sum(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",543,605,"/**
* Returns a new Multiset containing the sum of two Multisets.
* @param multiset1 first multiset
* @param multiset2 second multiset
* @return new Multiset containing the sum of the input multisets
*/
","* Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count
   * of each element is the <i>sum</i> of its counts in the two backing multisets. The iteration
   * order of the returned multiset matches that of the element set of {@code multiset1} followed by
   * the members of the element set of {@code multiset2} that are not contained in {@code
   * multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,difference,"com.google.common.collect.Multisets:difference(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",619,679,"/**
 * Returns a multiset containing elements in multiset1 but not in multiset2.
 * @param multiset1 The first multiset.
 * @param multiset2 The second multiset.
 * @return A new Multiset.
 */","* Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the
   * count of each element is the result of the <i>zero-truncated subtraction</i> of its count in
   * the second multiset from its count in the first multiset, with elements that would have a count
   * of 0 not included. The iteration order of the returned multiset matches that of the element set
   * of {@code multiset1}, with repeated occurrences of the same element appearing consecutively.
   *
   * <p>Results are undefined if {@code multiset1} and {@code multiset2} are based on different
   * equivalence relations (as {@code HashMultiset} and {@code TreeMultiset} are).
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,containsOccurrences,"com.google.common.collect.Multisets:containsOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",687,698,"/**
 * Checks if superMultiset contains all occurrences of subMultiset.
 */","* Returns {@code true} if {@code subMultiset.count(o) <= superMultiset.count(o)} for all {@code
   * o}.
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrencesImpl,"com.google.common.collect.Multisets:retainOccurrencesImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",723,742,"/**
* Retains occurrences in a multiset based on another multiset.
* @param multisetToModify The multiset to modify.
* @param occurrencesToRetain Multiset defining occurrences to retain.
* @return True if the multiset was modified.
*/
",Delegate implementation which cares about the element type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",805,825,"/**
 * Removes occurrences from a multiset, modifying the original multiset.
 * @param multisetToModify Multiset to remove occurrences from.
 * @param occurrencesToRemove Occurrences to remove.
 * @return True if the multiset was modified.
 */
","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * occurrencesToRemove.count(e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0 (missing in 18.0 when only the overload taking an {@code Iterable} was present)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainAllImpl,"com.google.common.collect.Multisets:retainAllImpl(com.google.common.collect.Multiset,java.util.Collection)",931,939,"/**
 * Retains elements present in the provided collection.
 * @param elementsToRetain Collection of elements to retain.
 * @return True if the multiset was modified.
 */
",An implementation of {@link Multiset#retainAll}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,compare,"com.google.common.collect.NaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",37,43,"/**
 * Compares two Comparable objects.
 * @param left The first Comparable object.
 * @param right The second Comparable object.
 * @return An integer indicating the comparison result.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(com.google.common.collect.Ordering),203,209,"/**
 * Returns the provided Ordering instance.
 * @param ordering The Ordering instance to return.
 * @return The same Ordering instance.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",313,346,"/**
 * Drains elements from a queue into a collection, up to a limit.
 * @param q queue to drain from, buffer destination, limit, timeout, unit
 * @return number of elements drained
 */
","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,long,java.util.concurrent.TimeUnit)",383,425,"/**
 * Drains elements from a queue to a collection, waiting up to a timeout.
 * @param q queue to drain from
 * @param buffer collection to add elements to
 * @param numElements number of elements to drain
 * @param timeout timeout value
 * @param unit timeout unit
 * @return number of elements drained
 */
","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but
   * with a different behavior in case it is interrupted while waiting. In that case, the operation
   * will continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up, in units of {@code unit}
   * @param unit a {@code TimeUnit} determining how to interpret the timeout parameter
   * @return the number of elements transferred",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.Range:contains(java.lang.Comparable),407,411,"/**
 * Checks if the value is within the range.
 * @param value The value to check.
 * @return True if value is within the range, false otherwise.
 */
","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap:forEach(java.util.function.BiConsumer),165,171,"/**
 * Applies the given action to each entry in the map.
 * @param action BiConsumer to apply to each key-value pair
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,forEach,com.google.common.collect.RegularImmutableMap:forEach(java.util.function.BiConsumer),289,295,"/**
 * Applies the given action to each entry in the map.
 * @param action BiConsumer to apply to each key-value pair.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headIndex,"com.google.common.collect.RegularImmutableSortedSet:headIndex(java.lang.Object,boolean)",252,259,"/**
 * Finds the index of the first occurrence of toElement.
 * @param toElement Element to search for.
 * @param inclusive Whether to return index + 1 if found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailIndex,"com.google.common.collect.RegularImmutableSortedSet:tailIndex(java.lang.Object,boolean)",272,279,"/**
 * Finds the tail index of an element.
 * @param fromElement Element to search for.
 * @param inclusive Whether to include the element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,compare,"com.google.common.collect.ReverseNaturalOrdering:compare(java.lang.Comparable,java.lang.Comparable)",32,41,"/**
 * Compares two Comparable objects.
 * @param left  The left-hand Comparable object.
 * @param right The right-hand Comparable object.
 * @return Comparison result: < 0 if left < right, > 0 if left > right, 0 if equal.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,retainAll,com.google.common.collect.Sets$ImprovedAbstractSet:retainAll(java.util.Collection),89,92,"/**
* Retains only the elements also contained in the specified collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.util.Comparator),438,442,"/**
 * Creates a new TreeSet with the given comparator.
 * @param comparator Comparator to order elements in the tree.
 */
","* Creates a <i>mutable</i>, empty {@code TreeSet} instance with the given comparator.
   *
   * <p><b>Note:</b> if mutability is not required, use {@code
   * ImmutableSortedSet.orderedBy(comparator).build()} instead.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. One caveat to this is that the {@code TreeSet} constructor uses a null {@code
   * Comparator} to mean ""natural ordering,"" whereas this factory rejects null. Clean your code
   * accordingly.
   *
   * @param comparator the comparator to use to sort the set
   * @return a new, empty {@code TreeSet}
   * @throws NullPointerException if {@code comparator} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,forEach,com.google.common.collect.SingletonImmutableBiMap:forEach(java.util.function.BiConsumer),67,70,"/**
 * Performs the given action on the single key-value pair.
 * @param action BiConsumer to execute with key and value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnKeySet:retainAll(java.util.Collection),736,751,"/**
 * Retains only the mappings whose keys are in the specified collection.
 * @param c collection of keys to keep
 * @return true if the collection was modified
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,zip,"com.google.common.collect.Streams:zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)",332,363,"/**
 * Zips two streams into a single stream using a BiFunction.
 * @param streamA First stream.
 * @param streamB Second stream.
 * @param function Function to combine elements.
 * @return Stream of combined elements.
 */
","* Returns a stream in which each element is the result of passing the corresponding element of
   * each of {@code streamA} and {@code streamB} to {@code function}.
   *
   * <p>For example:
   *
   * {@snippet :
   * Streams.zip(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> arg1 + "":"" + arg2)
   * }
   *
   * <p>will return {@code Stream.of(""foo1:bar1"", ""foo2:bar2"")}.
   *
   * <p>The resulting stream will only be as long as the shorter of the two input streams; if one
   * stream is longer, its extra elements will be ignored.
   *
   * <p>Note that if you are calling {@link Stream#forEach} on the resulting stream, you might want
   * to consider using {@link #forEachPair} instead of this method.
   *
   * <p><b>Performance note:</b> The resulting stream is not <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>.
   * This may harm parallel performance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.Stream,com.google.common.collect.Streams$FunctionWithIndex)",444,503,"/**
 * Maps a stream of objects to a new stream with an index.
 * @param stream Input stream of objects.
 * @param function Function to apply with index.
 * @return New stream of mapped objects.
 */
","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indices in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     Stream.of(""a"", ""b"", ""c""),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>would return {@code Stream.of(""0:a"", ""1:b"", ""2:c"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.IntStream,com.google.common.collect.Streams$IntFunctionWithIndex)",527,582,"/**
 * Maps an IntStream to a Stream with index.
 * @param stream input IntStream
 * @param function function to apply with index
 * @return Stream of mapped values
 */
","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     IntStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.LongStream,com.google.common.collect.Streams$LongFunctionWithIndex)",606,661,"/**
 * Maps a LongStream to a Stream, applying a function with an index.
 * @param stream input LongStream
 * @param function function to apply with index
 * @return Stream of mapped values
 */
","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     LongStream.of(10, 11, 12),
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:10"", ""1:11"", ""2:12"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,mapWithIndex,"com.google.common.collect.Streams:mapWithIndex(java.util.stream.DoubleStream,com.google.common.collect.Streams$DoubleFunctionWithIndex)",685,740,"/**
 * Maps a DoubleStream to a Stream by applying a function with index.
 * @param stream input DoubleStream
 * @param function function applying to each double with index
 * @return Stream of mapped objects
 */
","* Returns a stream consisting of the results of applying the given function to the elements of
   * {@code stream} and their indexes in the stream. For example,
   *
   * {@snippet :
   * mapWithIndex(
   *     DoubleStream.of(0.0, 1.0, 2.0)
   *     (e, index) -> index + "":"" + e)
   * }
   *
   * <p>...would return {@code Stream.of(""0:0.0"", ""1:1.0"", ""2:2.0"")}.
   *
   * <p>The resulting stream is <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * if and only if {@code stream} was efficiently splittable and its underlying spliterator
   * reported {@link Spliterator#SUBSIZED}. This is generally the case if the underlying stream
   * comes from a data structure supporting efficient indexed random access, typically an array or
   * list.
   *
   * <p>The order of the resulting stream is defined if and only if the order of the original stream
   * was defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedObject:<init>(java.lang.Object,java.lang.Object)",85,88,"/**
 * Constructs a SynchronizedObject with a delegate and mutex.
 * @param delegate The object to be synchronized.
 * @param mutex The mutex to use for synchronization.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",102,135,"/**
 * Creates a Table collector using provided functions and supplier.
 * @param rowFunction Maps input to row key.
 * @param columnFunction Maps input to column key.
 * @param valueFunction Maps input to value.
 * @param mergeFunction Merges values for same cell.
 * @param tableSupplier Supplies the initial Table.
 * @return Table collector.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,mergeTables,"com.google.common.collect.TableCollectors:mergeTables(com.google.common.collect.Table,java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",203,221,"/**
 * Merges a value into a table cell, using a merge function.
 * @param table Table to merge into.
 * @param row Row key.
 * @param column Column key.
 * @param value Value to merge.
 * @param mergeFunction Function to merge existing and new values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$TransformedTable:<init>(com.google.common.collect.Table,com.google.common.base.Function)",420,423,"/**
 * Constructs a TransformedTable from a Table and a function.
 * @param fromTable The original Table to transform.
 * @param function Function to apply to each value in the table.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$TransposeTable:<init>(com.google.common.collect.Table),225,227,"/**
* Initializes a TransposeTable with the given original table.
* @param original The table to be transposed.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedIterator.java,<init>,com.google.common.collect.TransformedIterator:<init>(java.util.Iterator),36,38,"/**
 * Initializes the TransformedIterator with a backing iterator.
 * @param backingIterator The iterator to transform.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$1:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
 * Inserts a value associated with the given range.
 * @param range Range to associate the value with.
 * @param value The value to insert.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$1:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
 * Adds or updates a value for the given range, coalescing as needed.
 * @param range Range to add/update.
 * @param value Value associated with the range.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$1:remove(com.google.common.collect.Range),211,259,"/**
 * Removes a range from the range map, splitting or truncating ranges.
 * @param rangeToRemove Range to remove; lowerBound and upperBound define it.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$1:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
 * Merges a range with a value, remapping existing entries.
 * @param range Range to merge.
 * @param value Value to use for unmapped ranges.
 * @param remappingFunction Function to remap existing entries.
 */
",* @since 28.1,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$1:subRangeMap(com.google.common.collect.Range),384,391,"/**
 * Returns a range map containing only the entries within subRange.
 * @param subRange The range to create the sub-range map for.
 * @return A new RangeMap representing the specified sub-range.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,<init>,"com.google.common.collect.TreeTraverser$PostOrderNode:<init>(java.lang.Object,java.util.Iterator)",214,217,"/**
 * Constructs a PostOrderNode with the given root and child iterator.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$PreOrderIterator:next(),158,170,"/**
 * Returns the next element in iteration.
 * Removes empty iterators from the stack.
 * @return next element of type T
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,using,com.google.common.collect.TreeTraverser:using(com.google.common.base.Function),93,103,"/**
 * Creates a TreeTraverser using a function to get children.
 * @param nodeToChildrenFunction Function to fetch children of a node.
 * @return A TreeTraverser instance.
 */
","* Returns a tree traverser that uses the given function to navigate from a node to its children.
   * This is useful if the function instance already exists, or so that you can supply a lambda
   * expressions. If those circumstances don't apply, you probably don't need to use this; subclass
   * {@code TreeTraverser} and implement its {@link #children} method directly.
   *
   * @since 20.0
   * @deprecated Use {@link com.google.common.graph.Traverser#forTree} instead. If you are using a
   *     lambda, these methods have exactly the same signature.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,preOrderTraversal,com.google.common.collect.TreeTraverser:preOrderTraversal(java.lang.Object),118,139,"/**
 * Returns a pre-order traversal of the tree rooted at the given node.
 * @param root The root node of the tree to traverse.
 * @return A FluentIterable representing the pre-order traversal.
 */
","* Returns an unmodifiable iterable over the nodes in a tree structure, using pre-order traversal.
   * That is, each node's subtrees are traversed after the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPreOrder} instead, which has
   *     the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,postOrderTraversal,com.google.common.collect.TreeTraverser:postOrderTraversal(java.lang.Object),183,204,"/**
 * Returns a fluent iterable for post-order traversal of the tree.
 * @param root The root node of the tree to traverse.
 */
","* Returns an unmodifiable iterable over the nodes in a tree structure, using post-order
   * traversal. That is, each node's subtrees are traversed before the node itself is returned.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#depthFirstPostOrder} instead, which
   *     has the same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,breadthFirstTraversal,com.google.common.collect.TreeTraverser:breadthFirstTraversal(java.lang.Object),258,267,"/**
 * Performs a breadth-first traversal starting from the root node.
 * @param root The starting node for the traversal.
 * @return A FluentIterable representing the breadth-first traversal.
 */
","* Returns an unmodifiable iterable over the nodes in a tree structure, using breadth-first
   * traversal. That is, all the nodes of depth 0 are returned, then depth 1, then 2, and so on.
   *
   * <p>No guarantees are made about the behavior of the traversal when nodes change while iteration
   * is in progress or when the iterators generated by {@link #children} are advanced.
   *
   * @deprecated Use {@link com.google.common.graph.Traverser#breadthFirst} instead, which has the
   *     same behavior.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,escape,com.google.common.escape.ArrayBasedCharEscaper:escape(java.lang.String),103,113,"/**
 * Escapes a string, returning a new string if special chars exist.
 * @param s The string to escape.
 * @return The escaped string or the original if no escaping needed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,createReplacementArray,com.google.common.escape.ArrayBasedEscaperMap:createReplacementArray(java.util.Map),66,78,"/**
 * Creates a replacement array from a map of characters to strings.
 * @param map Map of character to string replacements.
 * @return char[][] replacement array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,escape,com.google.common.escape.ArrayBasedUnicodeEscaper:escape(java.lang.String),142,154,"/**
 * Escapes a string, returning it or delegating to escapeSlow.
 * @param s The string to escape.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscape,"com.google.common.escape.CharEscaperBuilder:addEscape(char,java.lang.String)",84,91,"/**
 * Adds an escape sequence for a character.
 * @param c char to escape, r replacement string.
 * @return this builder for chaining.
 */
",Add a new mapping from an index to an object to the escaping.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,addEscape,"com.google.common.escape.Escapers$Builder:addEscape(char,java.lang.String)",140,146,"/**
 * Adds an escape mapping for a character.
 * @param c character to escape
 * @param replacement replacement string
 * @return this builder
 */
","* Adds a replacement string for the given input character. The specified character will be
     * replaced by the given string whenever it occurs in the input, irrespective of whether it lies
     * inside or outside the 'safe' range.
     *
     * @param c the character to be replaced
     * @param replacement the string to replace the given character
     * @return the builder instance
     * @throws NullPointerException if {@code replacement} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,codePointAt,"com.google.common.escape.UnicodeEscaper:codePointAt(java.lang.CharSequence,int,int)",245,286,"/**
 * Gets the code point at the specified index in the CharSequence.
 * @param seq CharSequence to examine.
 * @param index Index of the code point.
 * @param end End index (exclusive).
 * @return The code point at the index.
 */
","* Returns the Unicode code point of the character at the given index.
   *
   * <p>Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)}
   * this method will never fail silently when encountering an invalid surrogate pair.
   *
   * <p>The behaviour of this method is as follows:
   *
   * <ol>
   *   <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.
   *   <li><b>If the character at the specified index is not a surrogate, it is returned.</b>
   *   <li>If the first character was a high surrogate value, then an attempt is made to read the
   *       next character.
   *       <ol>
   *         <li><b>If the end of the sequence was reached, the negated value of the trailing high
   *             surrogate is returned.</b>
   *         <li><b>If the next character was a valid low surrogate, the code point value of the
   *             high/low surrogate pair is returned.</b>
   *         <li>If the next character was not a low surrogate value, then {@link
   *             IllegalArgumentException} is thrown.
   *       </ol>
   *   <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is
   *       thrown.
   * </ol>
   *
   * @param seq the sequence of characters from which to decode the code point
   * @param index the index of the first character to decode
   * @param end the index beyond the last valid character to decode
   * @return the Unicode code point for the given index or the negated value of the trailing high
   *     surrogate character at the end of the sequence",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,<init>,"com.google.common.eventbus.DeadEvent:<init>(java.lang.Object,java.lang.Object)",41,44,"/**
 * Creates a DeadEvent with the given source and event.
 * @param source The source of the event.
 * @param event The event object.
 */
","* Creates a new DeadEvent.
   *
   * @param source object broadcasting the DeadEvent (generally the {@link EventBus}).
   * @param event the event that could not be delivered.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleSubscriberException,"com.google.common.eventbus.EventBus:handleSubscriberException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",216,228,"/**
 * Handles a subscriber exception, delegating to a handler.
 * Logs if the handler itself throws an exception.
 */
",Handles the given exception thrown by a subscriber with the given context.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber:invokeSubscriberMethod(java.lang.Object),81,95,"/**
 * Invokes the subscriber method with the given event.
 * @param event The event object to pass to the method.
 * @throws InvocationTargetException if method invocation fails.
 */
","* Invokes the subscriber method. This method can be overridden to make the invocation
   * synchronized.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberExceptionContext.java,<init>,"com.google.common.eventbus.SubscriberExceptionContext:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.Object,java.lang.reflect.Method)",39,45,"/**
 * Constructs a SubscriberExceptionContext with event bus, event, subscriber, and method.
 */
","* @param eventBus The {@link EventBus} that handled the event and the subscriber. Useful for
   *     broadcasting a new event based on the error.
   * @param event The event object that caused the subscriber to throw.
   * @param subscriber The source subscriber context.
   * @param subscriberMethod the subscribed method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
 * Checks if an edge exists between nodeU and nodeV.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,"com.google.common.graph.AbstractNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",224,229,"/**
 * Checks if an edge exists between nodeU and nodeV.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,<init>,com.google.common.graph.AbstractUndirectedNetworkConnections:<init>(java.util.Map),39,41,"/**
 * Constructs a network with incident edges from a map.
 * @param incidentEdgeMap Map of node to its incident edges.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection:<init>(java.lang.Object),75,77,"/**
 * Initializes a NodeConnection with the given node.
 * @param node The node to associate with this connection.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,value,com.google.common.graph.DirectedGraphConnections:value(java.lang.Object),413,425,"/**
 * Retrieves the value associated with a node.
 * @param node The node to retrieve the value for.
 * @return The value, or null if the predecessor is present.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,<init>,"com.google.common.graph.EdgesConnecting:<init>(java.util.Map,java.lang.Object)",42,45,"/**
 * Initializes the EdgesConnecting object.
 * @param nodeToEdgeMap Map of nodes to outgoing edges.
 * @param targetNode The target node for edge connections.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,<init>,"com.google.common.graph.EndpointPair:<init>(java.lang.Object,java.lang.Object)",46,49,"/**
 * Constructs an EndpointPair with the given nodes.
 * @param nodeU The first node.
 * @param nodeV The second node.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.ImmutableGraph),71,77,"/**
 * Returns a copy of the given immutable graph.
 * @param graph The graph to copy. Must not be null.
 * @return A copy of the graph.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.ImmutableNetwork),69,75,"/**
 * Returns a copy of the given immutable network.
 * @param network The immutable network to copy.
 * @return A copy of the input network.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ImmutableValueGraph),66,72,"/**
 * Returns a copy of the given graph.
 * @param graph The graph to copy. Must not be null.
 * @return A copy of the graph.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,<init>,com.google.common.graph.MapIteratorCache:<init>(java.util.Map),58,60,"/**
* Initializes the cache with the provided backing map.
* @param backingMap The map to use as the cache's backing store.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,getWithoutCaching,com.google.common.graph.MapIteratorCache:getWithoutCaching(java.lang.Object),93,96,"/**
 * Retrieves the value associated with the key, without caching.
 * @param key The key to retrieve the value for.
 * @return The value or null if the key is not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MultiEdgesConnecting.java,<init>,"com.google.common.graph.MultiEdgesConnecting:<init>(java.util.Map,java.lang.Object)",43,46,"/**
 * Initializes the MultiEdgesConnecting instance.
 * @param outEdgeToNode Map of outgoing edges to nodes.
 * @param targetNode The target node for edge connections.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,visitNext,com.google.common.graph.Traverser$Traversal$2:visitNext(java.util.Deque),480,480,"/**
 * Visits the next element in the horizon deque.
 * @param horizon Deque of iterators to traverse.
 * @return Next element or null if horizon is empty.
 */","* Visits the next node from the top iterator of {@code horizon} and returns the visited node.
     * Null is returned to indicate reaching the end of the top iterator.
     *
     * <p>For example, if horizon is {@code [[a, b], [c, d], [e]]}, {@code visitNext()} will return
     * {@code [a, b, null, c, d, null, e, null]} sequentially, encoding the topological structure.
     * (Note, however, that the callers of {@code visitNext()} often insert additional iterators
     * into {@code horizon} between calls to {@code visitNext()}. This causes them to receive
     * additional values interleaved with those shown above.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser:<init>(com.google.common.graph.SuccessorsFunction),70,72,"/**
 * Constructs a new Traverser with the given successor function.
 * @param successorFunction Function to get successors of a node.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,<init>,com.google.common.graph.UndirectedGraphConnections:<init>(java.util.Map),43,45,"/**
 * Initializes the UndirectedGraphConnections with adjacent node values.
 * @param adjacentNodeValues Map of node to its value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SequentialFunnel:<init>(com.google.common.hash.Funnel),182,184,"/**
* Initializes SequentialFunnel with the provided element funnel.
* @param elementFunnel Funnel to process elements in the sequence
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$SinkAsStream:<init>(com.google.common.hash.PrimitiveSink),253,255,"/**
 * Initializes the SinkAsStream with the provided sink.
 * @param sink The sink to use for writing data.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,<init>,com.google.common.hash.Funnels$StringCharsetFunnel:<init>(java.nio.charset.Charset),93,95,"/**
* Constructor for StringCharsetFunnel, sets the charset.
* @param charset the charset to use; must not be null
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,<init>,"com.google.common.hash.HashingInputStream:<init>(com.google.common.hash.HashFunction,java.io.InputStream)",41,44,"/**
 * Constructs a HashingInputStream with a hasher and input stream.
 * @param hashFunction Hash function to use.
 * @param in Input stream to hash.
 */
","* Creates an input stream that hashes using the given {@link HashFunction} and delegates all data
   * read from it to the underlying {@link InputStream}.
   *
   * <p>The {@link InputStream} should not be read from before or after the hand-off.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,<init>,"com.google.common.hash.HashingOutputStream:<init>(com.google.common.hash.HashFunction,java.io.OutputStream)",44,47,"/**
 * Constructs a HashingOutputStream with a hasher and output stream.
 * @param hashFunction Hash function to use.
 * @param out Output stream to write to.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,<init>,com.google.common.io.AppendableWriter:<init>(java.lang.Appendable),46,48,"/**
 * Constructs a new AppendableWriter with the given Appendable target.
 * @param target The Appendable to write to. Must not be null.
 */
","* Creates a new writer that appends everything it writes to {@code target}.
   *
   * @param target target to which to append output",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:encodingStream(java.io.Writer),637,681,"/**
 * Creates an OutputStream that encodes data to a Writer.
 * @param out the Writer to encode to
 * @return an OutputStream for encoding
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:trimTrailingPadding(java.lang.CharSequence),722,736,"/**
 * Removes trailing padding characters from a CharSequence.
 * @param chars The CharSequence to trim.
 * @return Trimmed CharSequence.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingStream,com.google.common.io.BaseEncoding$StandardBaseEncoding:decodingStream(java.io.Reader),778,849,"/**
 * Creates an InputStream that decodes data from the given Reader.
 * @param reader Reader to decode from
 * @return InputStream decoding data from the Reader
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodingSink,com.google.common.io.BaseEncoding:encodingSink(com.google.common.io.CharSink),177,187,"/**
 * Creates a ByteSink that wraps an encoding-aware CharSink.
 * @param encodedSink CharSink to wrap for byte output.
 * @return ByteSink for writing bytes via the CharSink.
 */
",* Returns a {@code ByteSink} that writes base-encoded bytes to the specified {@code CharSink}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodingSource,com.google.common.io.BaseEncoding:decodingSource(com.google.common.io.CharSource),250,260,"/**
 * Creates a ByteSource from a CharSource, decoding its contents.
 * @param encodedSource CharSource to decode
 * @return ByteSource representing the decoded content
 */
","* Returns a {@code ByteSource} that reads base-encoded bytes from the specified {@code
   * CharSource}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding:trimTrailingPadding(java.lang.CharSequence),272,274,"/**
 * Returns the input CharSequence as is.
 * @param chars The CharSequence to return.
 * @return The original CharSequence.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoringReader,"com.google.common.io.BaseEncoding:ignoringReader(java.io.Reader,java.lang.String)",1055,1080,"/**
 * Returns a Reader that skips characters present in {@code toIgnore}.
 * @param delegate the Reader to delegate to
 * @param toIgnore characters to ignore
 * @return a new Reader
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,<init>,com.google.common.io.CharSequenceReader:<init>(java.lang.CharSequence),46,48,"/**
 * Initializes a CharSequenceReader with the given CharSequence.
 * @param seq The CharSequence to read from.
 */
",Creates a new reader wrapping the given character sequence.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(char[]),290,293,"/**
 * Writes a character array to the underlying output stream.
 * @param cbuf The character array to write.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,com.google.common.io.CharStreams$NullWriter:write(java.lang.String),300,303,"/**
 * Writes the given string.
 * @param str The string to write. Must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToBuilder,"com.google.common.io.CharStreams:copyReaderToBuilder(java.io.Reader,java.lang.StringBuilder)",112,124,"/**
 * Copies data from a Reader to a StringBuilder.
 * @param from Reader to copy from
 * @param to StringBuilder to copy to
 * @return Total number of characters copied
 */","* Copies all characters between the {@link Reader} and {@link StringBuilder} objects. Does not
   * close or flush the reader.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copyReaderToWriter,"com.google.common.io.CharStreams:copyReaderToWriter(java.io.Reader,java.io.Writer)",140,152,"/**
 * Copies data from a Reader to a Writer.
 * @param from The Reader to copy from.
 * @param to The Writer to copy to.
 * @return The number of characters copied.
 */
","* Copies all characters between the {@link Reader} and {@link Writer} objects. Does not close or
   * flush the reader or writer.
   *
   * <p>This is identical to {@link #copy(Readable, Appendable)} but optimized for these specific
   * types. CharBuffer has poor performance when being written into or read out of so round tripping
   * all the bytes through the buffer takes a long time. With these specialized types we can just
   * use a char array.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,skipFully,"com.google.common.io.CharStreams:skipFully(java.io.Reader,long)",258,267,"/**
 * Skips characters from a Reader.
 * @param reader Reader to skip from.
 * @param n Number of characters to skip.
 * @throws IOException if an I/O error occurs.
 */
","* Discards {@code n} characters of data from the reader. This method will block until the full
   * amount has been skipped. Does not close the reader.
   *
   * @param reader the reader to read from
   * @param n the number of characters to skip
   * @throws EOFException if this stream reaches the end before skipping all the characters
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,<init>,com.google.common.io.Closer:<init>(com.google.common.io.Closer$Suppressor),95,98,"/**
 * Creates a Closer with the given suppressor.
 * @param suppressor Suppressor to be used by the Closer.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingInputStream.java,<init>,com.google.common.io.CountingInputStream:<init>(java.io.InputStream),43,45,"/**
 * Constructs a CountingInputStream with the given input stream.
 * @param in The input stream to count bytes from.
 */
","* Wraps another input stream, counting the number of bytes read.
   *
   * @param in the input stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CountingOutputStream.java,<init>,com.google.common.io.CountingOutputStream:<init>(java.io.OutputStream),42,44,"/**
 * Constructs a CountingOutputStream with the given OutputStream.
 * @param out The OutputStream to count bytes from.
 */
","* Wraps another output stream, counting the number of bytes written.
   *
   * @param out the output stream to be wrapped",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newReader,"com.google.common.io.Files:newReader(java.io.File,java.nio.charset.Charset)",86,90,"/**
 * Creates a BufferedReader for reading from a file with specified charset.
 * @param file The file to read from.
 * @param charset The character encoding to use.
 * @throws FileNotFoundException if the file does not exist.
 */
","* Returns a buffered reader that reads from a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedReader(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered reader",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,newWriter,"com.google.common.io.Files:newWriter(java.io.File,java.nio.charset.Charset)",104,108,"/**
 * Creates a BufferedWriter writing to a file with the given charset.
 * @param file The file to write to.
 * @param charset The character encoding to use.
 * @throws FileNotFoundException if the file cannot be opened.
 */
","* Returns a buffered writer that writes to a file using the given character set.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#newBufferedWriter(java.nio.file.Path, Charset,
   * java.nio.file.OpenOption...)}.
   *
   * @param file the file to write to
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the buffered writer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,touch,com.google.common.io.Files:touch(java.io.File),445,451,"/**
 * Updates a file's access time. Creates if it doesn't exist.
 * @param file The file to touch.
 * @throws IOException If unable to update modification time.
 */
","* Creates an empty file or updates the last updated timestamp on the same as the unix command of
   * the same name.
   *
   * @param file the file to create or update
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,createParentDirs,com.google.common.io.Files:createParentDirs(java.io.File),462,478,"/**
 * Creates parent directories for a given file.
 * @param file The file for which to create parent directories.
 * @throws IOException if parent directories cannot be created.
 */
","* Creates any necessary but nonexistent parent directories of the specified file. Note that if
   * this operation fails it may have succeeded in creating some (but not all) of the necessary
   * parent directories.
   *
   * @throws IOException if an I/O error occurs, or if any necessary but nonexistent parent
   *     directories of the specified file could not be created.
   * @since 4.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getFileExtension,com.google.common.io.Files:getFileExtension(java.lang.String),796,801,"/**
 * Extracts the file extension from a full file name.
 * @param fullName Full path to the file.
 * @return The file extension, or an empty string if none exists.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> for
   * the given file name, or the empty string if the file has no extension. The result does not
   * include the '{@code .}'.
   *
   * <p><b>Note:</b> This method simply returns everything after the last '{@code .}' in the file's
   * name as determined by {@link File#getName}. It does not account for any filesystem-specific
   * behavior that the {@link File} API does not already account for. For example, on NTFS it will
   * report {@code ""txt""} as the extension for the filename {@code ""foo.exe:.txt""} even though NTFS
   * will drop the {@code "":.txt""} part of the name when the file is actually created on the
   * filesystem due to NTFS's <a
   * href=""https://learn.microsoft.com/en-us/archive/blogs/askcore/alternate-data-streams-in-ntfs"">Alternate
   * Data Streams</a>.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,getNameWithoutExtension,com.google.common.io.Files:getNameWithoutExtension(java.lang.String),813,818,"/**
 * Extracts filename without extension from a file path.
 * @param file The full file path.
 * @return Filename without extension.
 */
","* Returns the file name without its <a
   * href=""http://en.wikipedia.org/wiki/Filename_extension"">file extension</a> or path. This is
   * similar to the {@code basename} unix command. The result does not include the '{@code .}'.
   *
   * @param file The name of the file to trim the extension from. This can be either a fully
   *     qualified file name (including a path) or just a file name.
   * @return The file name without its path or extension.
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,<init>,com.google.common.io.LittleEndianDataInputStream:<init>(java.io.InputStream),51,53,"/**
* Constructs a LittleEndianDataInputStream with the given input stream.
*/
","* Creates a {@code LittleEndianDataInputStream} that wraps the given stream.
   *
   * @param in the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,<init>,com.google.common.io.LittleEndianDataOutputStream:<init>(java.io.OutputStream),46,48,"/**
* Constructs a LittleEndianDataOutputStream with the given OutputStream.
*/
","* Creates a {@code LittleEndianDataOutputStream} that wraps the given stream.
   *
   * @param out the stream to delegate to",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,touch,com.google.common.io.MoreFiles:touch(java.nio.file.Path),389,407,"/**
 * Updates the last modified time of a file or creates it if absent.
 * @param path Path to the file to touch.
 * @throws IOException if an I/O error occurs.
 */
","* Like the unix command of the same name, creates an empty file or updates the last modified
   * timestamp of the existing file at the given path to the current system time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.util.regex.Pattern),53,55,"/**
 * Constructs a PatternFilenameFilter with the given regex pattern.
 * @param pattern the regex pattern to match filenames against
 */
","* Constructs a pattern file name filter object.
   *
   * @param pattern the pattern on which to filter file names",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,isPowerOfTwo,com.google.common.math.BigIntegerMath:isPowerOfTwo(java.math.BigInteger),72,75,"/**
 * Checks if a BigInteger is a power of two.
 * @param x The BigInteger to check.
 * @return True if x is a power of two, false otherwise.
 */
",Returns {@code true} if {@code x} represents a power of two.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,nextEscapeIndex,"com.google.common.net.PercentEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",127,137,"/**
 * Finds the next index in a CharSequence that requires escaping.
 * @param csq CharSequence to scan.
 * @param index Start index.
 * @param end End index (exclusive).
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,escape,com.google.common.net.PercentEscaper:escape(java.lang.String),143,154,"/**
 * Escapes a string, returning the original if safe, otherwise escapes.
 * @param s The string to escape.
 * @return The escaped string.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,forEach,com.google.common.primitives.ImmutableDoubleArray:forEach(java.util.function.DoubleConsumer),426,431,"/**
 * Iterates through the array and applies the consumer to each element.
 * @param consumer The DoubleConsumer to apply to each element.
 */
","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,forEach,com.google.common.primitives.ImmutableIntArray:forEach(java.util.function.IntConsumer),421,426,"/**
 * Iterates over the array elements and applies the consumer.
 * @param consumer The IntConsumer to apply to each element.
 */
","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,forEach,com.google.common.primitives.ImmutableLongArray:forEach(java.util.function.LongConsumer),423,428,"/**
 * Iterates through the array and applies the consumer to each element.
 * @param consumer Functional interface to process each element.
 */
","* Invokes {@code consumer} for each value contained in this array, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,isWrapperType,com.google.common.primitives.Primitives:isWrapperType(java.lang.Class),101,103,"/**
 * Checks if the given class is a wrapper type (e.g., Integer, String).
 * @param type Class to check.
 * @return True if it's a wrapper type, false otherwise.
 */
","* Returns {@code true} if {@code type} is one of the nine primitive-wrapper types, such as {@link
   * Integer}.
   *
   * @see Class#isPrimitive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,wrap,com.google.common.primitives.Primitives:wrap(java.lang.Class),115,122,"/**
 * Returns the wrapper type for a primitive type, or the type itself.
 * @param type The class to wrap, must not be null.
 * @return The wrapper type or the original type.
 */
","* Returns the corresponding wrapper type of {@code type} if it is a primitive type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     wrap(int.class) == Integer.class
   *     wrap(Integer.class) == Integer.class
   *     wrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Primitives.java,unwrap,com.google.common.primitives.Primitives:unwrap(java.lang.Class),134,141,"/**
 * Returns the primitive type corresponding to the given wrapper type.
 * @param type Wrapper class (e.g., Integer.class)
 * @return Primitive type (e.g., int.class) or original type.
 */
","* Returns the corresponding primitive type of {@code type} if it is a wrapper type; otherwise
   * returns {@code type} itself. Idempotent.
   *
   * <pre>
   *     unwrap(Integer.class) == int.class
   *     unwrap(int.class) == int.class
   *     unwrap(String.class) == String.class
   * </pre>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,"com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String,int)",229,238,"/**
 * Parses a string as an unsigned byte.
 * @param string String to parse.
 * @param radix Radix of the number in the string.
 * @throws NumberFormatException if out of range.
 */
","* Returns the unsigned {@code byte} value represented by a string with the given radix.
   *
   * @param string the string containing the unsigned {@code byte} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,"com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String,int)",360,369,"/**
 * Parses a string as an unsigned integer with specified radix.
 * @param string String to parse.
 * @param radix Radix of the number.
 * @return Unsigned integer value.
 */
","* Returns the unsigned {@code int} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String, int)} instead.
   *
   * @param string the string containing the unsigned integer representation to be parsed.
   * @param radix the radix to use while parsing {@code s}; must be between {@link
   *     Character#MIN_RADIX} and {@link Character#MAX_RADIX}.
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int}, or
   *     if supplied radix is invalid.
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$LocationInfo:<init>(java.io.File,java.lang.ClassLoader)",411,414,"/**
 * Constructs a LocationInfo with a home directory and classloader.
 * @param home The home directory.
 * @param classloader The classloader to use.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ResourceInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",217,221,"/**
 * Constructs a ResourceInfo object.
 * @param file The file.
 * @param resourceName Resource name.
 * @param loader Class loader.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable:<init>(java.lang.reflect.AccessibleObject),68,72,"/**
 * Constructs an Invokable object from a Member.
 * @param member The Member object to wrap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeVariableKey:<init>(java.lang.reflect.TypeVariable),554,556,"/**
* Constructs a TypeVariableKey from a TypeVariable.
* @param var The TypeVariable to wrap.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.reflect.Type),164,166,"/**
 * Constructs a TypeToken from a given Type.
 * @param type The Type to wrap in a TypeToken.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$2:usedInGenericType(java.lang.reflect.Type),642,642,"/**
 * Returns the generic type used in the provided type.
 * @param type The type to inspect.
 * @return The used generic type, or null if none.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,getComponentType,com.google.common.reflect.Types:getComponentType(java.lang.reflect.Type),167,192,"/**
 * Extracts the component type from a given Type.
 * Returns null if no component type is found.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)",70,75,"/**
 * Constructs an AbstractCatchingFuture with given future, exception type, and fallback.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,<init>,com.google.common.util.concurrent.AbstractFuture$Failure:<init>(java.lang.Throwable),163,165,"/**
 * Constructs a Failure with the given exception.
 * @param exception The exception that caused the failure.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(long,java.util.concurrent.TimeUnit)",742,745,"/**
 * Creates a new Schedule with the given delay and time unit.
 * @param delay The delay time.
 * @param unit The time unit of the delay.
 */
","* @param delay the time from now to delay execution
       * @param unit the time unit of the delay parameter",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Object)",62,65,"/**
 * Constructs a new AbstractTransformFuture.
 * @param inputFuture Future to transform.
 * @param function Function to apply to the future's result.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,releaseResources,com.google.common.util.concurrent.AggregateFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),336,347,"/**
 * Releases resources held by this object.
 * @param reason Reason for releasing resources.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,<init>,com.google.common.util.concurrent.AtomicLongMap:<init>(java.util.concurrent.ConcurrentHashMap),64,66,"/**
* Initializes the AtomicLongMap with a ConcurrentHashMap.
* @param map The ConcurrentHashMap to use as the backing map.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,updateAndGet,"com.google.common.util.concurrent.AtomicLongMap:updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)",145,153,"/**
 * Updates value for key using function and returns the new value.
 * @param key The key to update.
 * @param updaterFunction Function to apply for updating the value.
 */
","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the new value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndUpdate,"com.google.common.util.concurrent.AtomicLongMap:getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)",162,174,"/**
 * Atomically updates the value associated with the given key.
 * @param key the key of the value to update
 * @param updaterFunction function to apply to current value
 * @return the updated value
 */
","* Updates the value currently associated with {@code key} with the specified function, and
   * returns the old value. If there is not currently a value associated with {@code key}, the
   * function is applied to {@code 0L}.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,asAsyncCallable,"com.google.common.util.concurrent.Callables:asAsyncCallable(java.util.concurrent.Callable,com.google.common.util.concurrent.ListeningExecutorService)",49,56,"/**
 * Adapts a Callable to an AsyncCallable using a ListeningExecutorService.
 */","* Creates an {@link AsyncCallable} from a {@link Callable}.
   *
   * <p>The {@link AsyncCallable} returns the {@link ListenableFuture} resulting from {@link
   * ListeningExecutorService#submit(Callable)}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.util.concurrent.Callable,com.google.common.base.Supplier)",66,84,"/**
 * Wraps a Callable to rename the thread before execution.
 * @param callable Callable to execute.
 * @param nameSupplier Supplier for the thread name.
 * @return Callable with thread renaming.
 */
","* Wraps the given callable such that for the duration of {@link Callable#call} the thread that is
   * running will have the given name.
   *
   * @param callable The callable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Callables.java,threadRenaming,"com.google.common.util.concurrent.Callables:threadRenaming(java.lang.Runnable,com.google.common.base.Supplier)",94,111,"/**
 * Wraps a Runnable to rename the thread before execution.
 * @param task Runnable to execute.
 * @param nameSupplier Supplier of the new thread name.
 */
","* Wraps the given runnable such that for the duration of {@link Runnable#run} the thread that is
   * running with have the given name.
   *
   * @param task The Runnable to wrap
   * @param nameSupplier The supplier of thread names, {@link Supplier#get get} will be called once
   *     for each invocation of the wrapped callable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,add,"com.google.common.util.concurrent.ClosingFuture$CloseableList:add(java.lang.AutoCloseable,java.util.concurrent.Executor)",2230,2242,"/**
 * Adds a closeable resource to be managed by the executor.
 * @param closeable Resource to manage, can be null.
 * @param executor Executor to run closeable's close method.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$Peeker:<init>(com.google.common.collect.ImmutableList),1136,1138,"/**
 * Constructs a Peeker with the provided list of ClosingFutures.
 * @param futures List of ClosingFuture objects.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:<init>(com.google.common.util.concurrent.ClosingFuture),332,334,"/**
 * Constructs a ValueAndCloser with the provided closing future.
 * @param closingFuture Future to close resources after value retrieval.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,withoutCloser,com.google.common.util.concurrent.ClosingFuture:withoutCloser(com.google.common.util.concurrent.AsyncFunction),826,830,"/**
 * Creates an AsyncClosingFunction without a closer.
 * @param function The AsyncFunction to wrap.
 * @return An AsyncClosingFunction that executes the function.
 */
","* Returns an {@link AsyncClosingFunction} that applies an {@link AsyncFunction} to an input,
   * ignoring the DeferredCloser and returning a {@code ClosingFuture} derived from the returned
   * {@link ListenableFuture}.
   *
   * <p>Use this method to pass a transformation to {@link #transformAsync(AsyncClosingFunction,
   * Executor)} or to {@link #catchingAsync(Class, AsyncClosingFunction, Executor)} as long as it
   * meets these conditions:
   *
   * <ul>
   *   <li>It does not need to capture any {@link Closeable} objects by calling {@link
   *       DeferredCloser#eventuallyClose(Object, Executor)}.
   *   <li>It returns a {@link ListenableFuture}.
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsFuture() returns a ListenableFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   * }
   *
   * @param function transforms the value of a {@code ClosingFuture} step to a {@link
   *     ListenableFuture} with the value of a derived step",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),452,454,"/**
 * Constructs a CycleDetectingLockFactory with the given policy.
 * @param policy The policy to use for cycle detection.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,newProxy,"com.google.common.util.concurrent.FakeTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",44,52,"/**
 * Creates a proxy object for the given target and interface.
 * @param target The target object to proxy.
 * @param interfaceType Interface type of the proxy.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.FluentFuture),145,151,"/**
 * Returns the input future, ensuring it's not null.
 * @param future The FluentFuture to return.
 * @return The same FluentFuture.
 */
","* Simply returns its argument.
   *
   * @deprecated no need to use this
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,lazyTransform,"com.google.common.util.concurrent.Futures:lazyTransform(java.util.concurrent.Future,com.google.common.base.Function)",512,555,"/**
 * Creates a Future that applies a function to the result of another Future.
 * @param input The input Future.
 * @param function The transformation function.
 * @return A Future wrapping the transformed result.
 */
","* Like {@link #transform(ListenableFuture, Function, Executor)} except that the transformation
   * {@code function} is invoked on each call to {@link Future#get() get()} on the returned future.
   *
   * <p>The returned {@code Future} reflects the input's cancellation state directly, and any
   * attempt to cancel the returned Future is likewise passed through to the input Future.
   *
   * <p>Note that calls to {@linkplain Future#get(long, TimeUnit) timed get} only apply the timeout
   * to the execution of the underlying {@code Future}, <em>not</em> to the execution of the
   * transformation function.
   *
   * <p>The primary audience of this method is callers of {@code transform} who don't have a {@code
   * ListenableFuture} available and do not mind repeated, lazy function evaluation.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @return A future that returns the result of the transformation.
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.Executor,com.google.common.base.Supplier)",867,873,"/**
 * Decorates an Executor to rename threads using a Supplier.
 * @param executor Executor to decorate.
 * @param nameSupplier Supplier providing thread names.
 * @return Decorated Executor.
 */
","* Creates an {@link Executor} that renames the {@link Thread threads} that its tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param executor The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ExecutorService,com.google.common.base.Supplier)",886,902,"/**
 * Decorates an ExecutorService with thread name updating.
 * @param service The ExecutorService to decorate.
 * @param nameSupplier Supplier for the thread name.
 * @return Decorated ExecutorService.
 */
","* Creates an {@link ExecutorService} that renames the {@link Thread threads} that its tasks run
   * in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,renamingDecorator,"com.google.common.util.concurrent.MoreExecutors:renamingDecorator(java.util.concurrent.ScheduledExecutorService,com.google.common.base.Supplier)",915,932,"/**
 * Wraps a ScheduledExecutorService to rename threads.
 * @param service The ScheduledExecutorService to wrap.
 * @param nameSupplier Supplier for the thread name.
 * @return Wrapped ScheduledExecutorService.
 */
","* Creates a {@link ScheduledExecutorService} that renames the {@link Thread threads} that its
   * tasks run in.
   *
   * <p>The names are retrieved from the {@code nameSupplier} on the thread that is being renamed
   * right before each task is run. The renaming is best effort, if a {@link SecurityManager}
   * prevents the renaming then it will be skipped but the tasks will still execute.
   *
   * @param service The executor to decorate
   * @param nameSupplier The source of names for each task",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Platform.java,restoreInterruptIfIsInterruptedException,com.google.common.util.concurrent.Platform:restoreInterruptIfIsInterruptedException(java.lang.Throwable),34,39,"/**
 * Restores interrupt status if the throwable is an InterruptedException.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),234,236,"/**
 * Constructs a RateLimiter with a provided Stopwatch.
 * @param stopwatch The Stopwatch used for timing.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,<init>,com.google.common.util.concurrent.SequentialExecutor:<init>(java.util.concurrent.Executor),90,92,"/**
 * Constructs a SequentialExecutor with the given executor.
 * @param executor The executor to wrap; must not be null.
 */
",Use {@link MoreExecutors#newSequentialExecutor},,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,execute,com.google.common.util.concurrent.SequentialExecutor:execute(java.lang.Runnable),100,174,"/**
 * Executes the given task, adding it to the queue if necessary.
 * @param task The runnable task to execute.
 */","* Adds a task to the queue and makes sure a worker thread is running.
   *
   * <p>If this method throws, e.g. a {@code RejectedExecutionException} from the delegate executor,
   * execution of tasks will stop until a call to this method is made.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,<init>,com.google.common.util.concurrent.SimpleTimeLimiter:<init>(java.util.concurrent.ExecutorService),56,58,"/**
 * Initializes SimpleTimeLimiter with the provided executor.
 * @param executor ExecutorService to use for time-limit execution
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setUncaughtExceptionHandler,com.google.common.util.concurrent.ThreadFactoryBuilder:setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler),129,134,"/**
 * Sets the uncaught exception handler for created threads.
 * @param uncaughtExceptionHandler Handler to be set.
 * @return This builder for fluent configuration.
 */
","* Sets the {@link UncaughtExceptionHandler} for new threads created with this ThreadFactory.
   *
   * @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with
   *     this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setThreadFactory,com.google.common.util.concurrent.ThreadFactoryBuilder:setThreadFactory(java.util.concurrent.ThreadFactory),145,149,"/**
 * Sets the backing ThreadFactory.
 * @param backingThreadFactory The ThreadFactory to use.
 * @return This builder for chaining.
 */
","* Sets the backing {@link ThreadFactory} for new threads created with this ThreadFactory. Threads
   * will be created by invoking #newThread(Runnable) on this backing {@link ThreadFactory}.
   *
   * @param backingThreadFactory the backing {@link ThreadFactory} which will be delegated to during
   *     thread creation.
   * @return this for the builder pattern
   * @see MoreExecutors",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture:<init>(com.google.common.util.concurrent.ListenableFuture),82,84,"/**
 * Creates a TimeoutFuture wrapping the given ListenableFuture.
 * @param delegate The future to wrap. Must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,long,java.util.concurrent.TimeUnit)",195,219,"/**
 * Waits for a thread to terminate, with a timeout.
 * @param toJoin Thread to wait for.
 * @param timeout Timeout duration.
 * @param unit Timeout unit (e.g., TimeUnit.SECONDS).
 */
","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,<init>,com.google.common.util.concurrent.WrappingExecutorService:<init>(java.util.concurrent.ExecutorService),51,53,"/**
 * Constructs a WrappingExecutorService with the given delegate.
 * @param delegate The ExecutorService to wrap. Must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.util.concurrent.Callable),98,101,"/**
* Submits a Callable task for execution and returns a Future.
* @param task The Callable task to be executed.
* @return A Future representing the task's execution.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,"com.google.common.base.Splitter$SplittingIterator:<init>(com.google.common.base.Splitter,java.lang.CharSequence)",541,546,"/**
 * Constructs a SplittingIterator with given splitter and sequence.
 * @param splitter The splitter to use.
 * @param toSplit The CharSequence to split.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,ticker,com.google.common.cache.CacheBuilder:ticker(com.google.common.base.Ticker),942,947,"/**
 * Sets the ticker for cache statistics.
 * @param ticker The ticker object to use.
 * @return This CacheBuilder for chaining.
 */
","* Specifies a nanosecond-precision time source for this cache. By default, {@link
   * System#nanoTime} is used.
   *
   * <p>The primary intent of this method is to facilitate testing of caches with a fake or mock
   * time source.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a ticker was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,removalListener,com.google.common.cache.CacheBuilder:removalListener(com.google.common.cache.RemovalListener),976,985,"/**
 * Sets the removal listener for the cache.
 * @param listener Listener called when entries are removed.
 * @return This CacheBuilder for chaining.
 */
","* Specifies a listener instance that caches should notify each time an entry is removed for any
   * {@linkplain RemovalCause reason}. Each cache created by this builder will invoke this listener
   * as part of the routine maintenance described in the class documentation above.
   *
   * <p><b>Warning:</b> after invoking this method, do not continue to use <i>this</i> cache builder
   * reference; instead use the reference this method <i>returns</i>. At runtime, these point to the
   * same instance, but only the returned reference has the correct generic type information to
   * ensure type safety. For best results, use the standard method-chaining idiom illustrated in the
   * class documentation above, configuring a builder and building your cache in a single statement.
   * Failure to heed this advice can result in a {@link ClassCastException} being thrown by a cache
   * operation at some <i>undefined</i> point in the future.
   *
   * <p><b>Warning:</b> any exception thrown by {@code listener} will <i>not</i> be propagated to
   * the {@code Cache} user, only logged via a {@link Logger}.
   *
   * @return the cache builder reference that should be used instead of {@code this} for any
   *     remaining configuration and cache building
   * @throws IllegalStateException if a removal listener was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,setValue,com.google.common.collect.LinkedListMultimap$NodeIterator:setValue(java.lang.Object),407,410,"/**
* Sets the value of the current object.
* @param value The new value to set.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,set,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:set(java.lang.Object),559,563,"/**
* Sets the value of the current element.
* @param value The new value to set.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",135,142,"/**
 * Adds an out-edge to the map, associating it with a node.
 * @param edge The edge to add.
 * @param node The node the edge points to.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addOutEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",96,100,"/**
 * Adds an outgoing edge to a node.
 * @param edge The edge to add.
 * @param node The destination node.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,<init>,"com.google.common.graph.ElementOrder:<init>(com.google.common.graph.ElementOrder$Type,java.util.Comparator)",73,77,"/**
 * Constructs an ElementOrder with type and optional comparator.
 * @param type The type of element order.
 * @param comparator Comparator for sorting (null if not needed)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hash,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:hash(),399,405,"/**
 * Calculates the hash code for the buffer.
 * Sets isDone to true after calculation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,mean,com.google.common.math.Stats:mean(),254,257,"/**
 * Calculates and returns the mean (average) value.
 * Requires count to be non-zero.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * <p>If you only want to calculate the mean, use {@link #meanOf} instead of creating a {@link
   * Stats} instance.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,min,com.google.common.math.Stats:min(),380,383,"/**
 * Returns the minimum value in the collection.
 * Throws IllegalStateException if the collection is empty.
 */
","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,max,com.google.common.math.Stats:max(),398,401,"/**
 * Returns the maximum value in the collection.
 * @return The maximum value, or throws an exception if empty.
 */
","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,mean,com.google.common.math.StatsAccumulator:mean(),247,250,"/**
 * Calculates the mean value.
 * @return The calculated mean value.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains both {@link Double#POSITIVE_INFINITY} and {@link Double#NEGATIVE_INFINITY} then the
   * result is {@link Double#NaN}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only or {@link Double#POSITIVE_INFINITY} only, the result is {@link Double#POSITIVE_INFINITY}.
   * If it contains {@link Double#NEGATIVE_INFINITY} and finite values only or {@link
   * Double#NEGATIVE_INFINITY} only, the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,min,com.google.common.math.StatsAccumulator:min(),373,376,"/**
 * Returns the minimum element in the collection.
 * Throws IllegalStateException if the collection is empty.
 */
","* Returns the lowest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#NEGATIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#NEGATIVE_INFINITY}. If it contains {@link Double#POSITIVE_INFINITY} and finite values
   * only then the result is the lowest finite value. If it contains {@link
   * Double#POSITIVE_INFINITY} only then the result is {@link Double#POSITIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,max,com.google.common.math.StatsAccumulator:max(),391,394,"/**
 * Returns the maximum value in the collection.
 * @return The maximum value, or throws exception if empty.
 */
","* Returns the highest value in the dataset. The count must be non-zero.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains {@link Double#NaN} then the result is {@link Double#NaN}. If it
   * contains {@link Double#POSITIVE_INFINITY} and not {@link Double#NaN} then the result is {@link
   * Double#POSITIVE_INFINITY}. If it contains {@link Double#NEGATIVE_INFINITY} and finite values
   * only then the result is the highest finite value. If it contains {@link
   * Double#NEGATIVE_INFINITY} only then the result is {@link Double#NEGATIVE_INFINITY}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture$CloseableList:whenClosedCountDown(),2247,2258,"/**
 * Returns a CountDownLatch that counts down when closed.
 * Returns a CountDownLatch(0) if already closed.
 */
",* Returns a latch that reaches zero when this objects' deferred closeables have been closed.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,execute,com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:execute(java.lang.Runnable),320,374,"/**
 * Executes the given task, potentially submitting it to a delegate executor.
 * @param task the runnable task to execute
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,run,com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:run(),189,230,"/**
 * Executes listener callbacks from the queue until empty or error.
 * Marks queue as unscheduled if an error occurs.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,hasNext,com.google.common.base.AbstractIterator:hasNext(),53,64,"/**
 * Checks if there's a next element available.
 * Returns true if ready, false if done, otherwise computes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoForward,com.google.common.base.Converter:unsafeDoForward(java.lang.Object),244,246,"/**
 * Forwards A to doForward, casting it to B.
 * @param a The object to forward, may be null.
 * @return The forwarded object, may be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,unsafeDoBackward,com.google.common.base.Converter:unsafeDoBackward(java.lang.Object),248,250,"/**
 * Performs backward operation, casting B to A.
 * @param b Input value of type B, may be null.
 * @return Result of type A, or null if input is null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$ForMapWithDefault:apply(java.lang.Object),203,211,"/**
 * Applies the function to the key, returning a value or default.
 * @param key The key to apply the function to.
 * @return The mapped value or the default value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$ExpiringMemoizingSupplier:get(),300,328,"/**
 * Retrieves the value. Uses double-checked locking for thread safety.
 * @return The cached value of type T, or fetches it if expired.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$MemoizingSupplier:get(),137,155,"/**
 * Retrieves the value from the delegate, initializing if needed.
 * @return The value of type T, retrieved or initialized.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,get,com.google.common.base.Suppliers$NonSerializableMemoizingSupplier:get(),192,209,"/**
* Retrieves the computed value using a double-checked locking pattern.
* @return The computed value of type T.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.String),407,422,"/**
 * Converts a string to lowercase.
 * @param string The string to convert.
 * @return The lowercase version of the string.
 */
","* Returns a copy of the input string in which all {@linkplain #isUpperCase(char) uppercase ASCII
   * characters} have been converted to lowercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(char),446,448,"/**
 * Converts a character to lowercase.
 * @param c The character to convert.
 * @return The lowercase character, or the original if not uppercase.
 */
","* If the argument is an {@linkplain #isUpperCase(char) uppercase ASCII character}, returns the
   * lowercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasUpperCase,com.google.common.io.BaseEncoding$Alphabet:hasUpperCase(),555,562,"/**
 * Checks if the character array contains any uppercase characters.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.String),455,470,"/**
 * Converts a string to uppercase. Returns the original string if empty.
 */","* Returns a copy of the input string in which all {@linkplain #isLowerCase(char) lowercase ASCII
   * characters} have been converted to uppercase. All other characters are copied without
   * modification.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(char),494,496,"/**
* Converts a lowercase character to uppercase.
* @param c The character to convert.
* @return The uppercase equivalent or the original char.
*/
","* If the argument is a {@linkplain #isLowerCase(char) lowercase ASCII character}, returns the
   * uppercase equivalent. Otherwise returns the argument.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hasLowerCase,com.google.common.io.BaseEncoding$Alphabet:hasLowerCase(),546,553,"/**
 * Checks if the character array contains at least one lowercase character.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,truncate,"com.google.common.base.Ascii:truncate(java.lang.CharSequence,int,java.lang.String)",550,577,"/**
 * Truncates a CharSequence to maxLength, appending truncationIndicator.
 * @param seq CharSequence to truncate
 * @param maxLength max length of truncated string
 * @param truncationIndicator indicator to append if truncated
 */","* Truncates the given character sequence to the given maximum length. If the length of the
   * sequence is greater than {@code maxLength}, the returned string will be exactly {@code
   * maxLength} chars in length and will end with the given {@code truncationIndicator}. Otherwise,
   * the sequence will be returned as a string with no changes to the content.
   *
   * <p>Examples:
   *
   * {@snippet :
   * Ascii.truncate(""foobar"", 7, ""...""); // returns ""foobar""
   * Ascii.truncate(""foobar"", 5, ""...""); // returns ""fo...""
   * }
   *
   * <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use
   * with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe
   * for use with it (such as all-ASCII text) and for simple debugging text. When using this method,
   * consider the following:
   *
   * <ul>
   *   <li>it may split surrogate pairs
   *   <li>it may split characters and combining characters
   *   <li>it does not consider word boundaries
   *   <li>if truncating for display to users, there are other considerations that must be taken
   *       into account
   *   <li>the appropriate truncation indicator may be locale-dependent
   *   <li>it is safe to use non-ASCII characters in the truncation indicator
   * </ul>
   *
   * @throws IllegalArgumentException if {@code maxLength} is less than the length of {@code
   *     truncationIndicator}
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,writeTo,com.google.common.math.Stats:writeTo(java.nio.ByteBuffer),605,618,"/**
 * Writes stats to a ByteBuffer.
 * @param buffer ByteBuffer to write to, must have enough space.
 */
","* Writes to the given {@link ByteBuffer} a byte representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance
   *     is written. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,constrainToRange,"com.google.common.primitives.Ints:constrainToRange(int,int,int)",284,288,"/**
 * Constrains a value within a specified range [min, max].
 * @param value The value to constrain.
 * @param min The minimum value allowed.
 * @param max The maximum value allowed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,constrainToRange,"com.google.common.primitives.Shorts:constrainToRange(short,short,short)",274,277,"/**
 * Constrains a short value within a specified range [min, max].
 * @param value The value to constrain.
 * @param min The minimum allowed value.
 * @param max The maximum allowed value.
 * @return The constrained value.
 */
","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code short} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,setPriority,com.google.common.util.concurrent.ThreadFactoryBuilder:setPriority(int),104,120,"/**
 * Sets the priority for threads created by this builder.
 * @param priority The priority value (Thread.MIN_PRIORITY to Thread.MAX_PRIORITY)
 * @return This {@link ThreadFactoryBuilder} for chaining.
 */
","* Sets the priority for new threads created with this ThreadFactory.
   *
   * <p><b>Warning:</b> relying on the thread scheduler is <a
   * href=""http://errorprone.info/bugpattern/ThreadPriorityCheck"">discouraged</a>.
   *
   * @param priority the priority for new Threads created with this ThreadFactory
   * @return this for the builder pattern",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,equalsIgnoreCase,"com.google.common.base.Ascii:equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)",601,625,"/**
 * Compares two CharSequences for equality, ignoring case.
 * @param s1 First CharSequence to compare.
 * @param s2 Second CharSequence to compare.
 * @return True if sequences are equal ignoring case, false otherwise.
 */
","* Indicates whether the contents of the given character sequences {@code s1} and {@code s2} are
   * equal, ignoring the case of any ASCII alphabetic characters between {@code 'a'} and {@code 'z'}
   * or {@code 'A'} and {@code 'Z'} inclusive.
   *
   * <p>This method is significantly faster than {@link String#equalsIgnoreCase} and should be used
   * in preference if at least one of the parameters is known to contain only ASCII characters.
   *
   * <p>Note however that this method does not always behave identically to expressions such as:
   *
   * <ul>
   *   <li>{@code string.toUpperCase().equals(""UPPER CASE ASCII"")}
   *   <li>{@code string.toLowerCase().equals(""lower case ascii"")}
   * </ul>
   *
   * <p>due to case-folding of some non-ASCII characters (which does not occur in {@link
   * String#equalsIgnoreCase}). However in almost all cases that ASCII strings are used, the author
   * probably wanted the behavior provided by this method rather than the subtle and sometimes
   * surprising behavior of {@code toUpperCase()} and {@code toLowerCase()}.
   *
   * @since 16.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$And:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1571,1574,"/**
 * Combines two CharMatchers, requiring both to match.
 * @param a The first CharMatcher.
 * @param b The second CharMatcher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$AnyOf:<init>(java.lang.CharSequence),1755,1758,"/**
* Initializes the AnyOf class with a CharSequence, sorts chars.
* @param chars CharSequence to initialize with.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$ForPredicate:<init>(com.google.common.base.Predicate),1822,1824,"/**
* Sets the predicate used for filtering characters.
* @param predicate Predicate to filter character values.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Negated:<init>(com.google.common.base.CharMatcher),1521,1523,"/**
 * Constructs a Negated CharMatcher from another CharMatcher.
 * @param original The CharMatcher to negate.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$Or:<init>(com.google.common.base.CharMatcher,com.google.common.base.CharMatcher)",1604,1607,"/**
* Combines two CharMatchers.
* @param a The first CharMatcher.
* @param b The second CharMatcher.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$And:setBits(java.util.BitSet),1581,1590,"/**
 * Sets bits in the provided BitSet based on first and second.
 * @param table BitSet to modify; bits are set based on first/second.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Negated:setBits(java.util.BitSet),1545,1552,"/**
 * Sets bits in the provided BitSet using the original's bits.
 * Flips the original's bits and ORs them into the target.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,setBits,com.google.common.base.CharMatcher$Or:setBits(java.util.BitSet),1609,1614,"/**
 * Sets bits in the BitSet table for both first and second sets.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$InRange:<init>(char,char)",1790,1794,"/**
 * Sets the range boundaries.
 * @param startInclusive Start of the range (inclusive).
 * @param endInclusive End of the range (inclusive).
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$RangesMatcher:<init>(java.lang.String,char[],char[])",1324,1335,"/**
 * Creates a RangesMatcher with given description and ranges.
 * @param description Description of the ranges.
 * @param rangeStarts Start characters of the ranges.
 * @param rangeEnds End characters of the ranges.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,<init>,"com.google.common.cache.CacheStats:<init>(long,long,long,long,long,long)",78,99,"/**
 * Creates a CacheStats object with the provided statistics.
 * @param hitCount Hit count.
 * @param missCount Miss count.
 */","* Constructs a new {@code CacheStats} instance.
   *
   * <p>Five parameters of the same type in a row is a bad thing, but this class is not constructed
   * by end users and is too fine-grained for a builder.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,<init>,com.google.common.collect.AbstractMapBasedMultimap:<init>(java.util.Map),123,126,"/**
 * Creates a multimap from the given map.
 * @param map The map to use as the backing map. Must be empty.
 */
","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,setMap,com.google.common.collect.AbstractMapBasedMultimap:setMap(java.util.Map),129,136,"/**
 * Sets the map and calculates the total size, validating collections.
 * @param map map to set; keys are K, values are collections of V
 */
",Used during deserialization only.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,<init>,com.google.common.collect.AbstractMapBasedMultiset:<init>(java.util.Map),64,67,"/**
 * Initializes with a backing map. Map must be empty.
 * @param backingMap The map to use as the backing store.
 */
",Standard constructor.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction,java.util.Comparator)",48,102,"/**
 * Creates a Spliterator from a range, applying a function to each int.
 * @param size The size of the range.
 * @param function Applies to each int to produce a T.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,add,com.google.common.collect.Collections2$FilteredCollection:add(java.lang.Object),135,139,"/**
 * Adds an element if the predicate is true.
 * @param element The element to add.
 * @return True if added, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,addAll,com.google.common.collect.Collections2$FilteredCollection:addAll(java.util.Collection),141,147,"/**
 * Adds all elements from the collection to the unfiltered list.
 * Elements must satisfy the predicate.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,java.lang.Comparable)",166,172,"/**
* Returns a sub-set from {@code fromElement} (inclusive) to {@code toElement} (exclusive).
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",177,185,"/**
 * Returns a view of the set between fromElement and toElement.
 * @param fromElement start element (inclusive)
 * @param toElement   end element (inclusive)
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferKeyTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferKeyTypeOrObjectUnderJ2cl(java.util.Map),97,106,"/**
 * Infers key type or object for J2cl based on map type.
 * Returns the key type or object; throws if map is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,inferValueTypeOrObjectUnderJ2cl,com.google.common.collect.EnumBiMap:inferValueTypeOrObjectUnderJ2cl(java.util.Map),108,114,"/**
 * Infers value type from EnumBiMap or first value's class.
 * @param map Map containing Enum values.
 * @return Class of the Enum value type.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,<init>,com.google.common.collect.EnumMultiset:<init>(java.lang.Class),93,98,"/**
 * Initializes a new EnumMultiset with the given enum type.
 * @param type the enum type for the multiset
 */
",Creates an empty {@code EnumMultiset}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,<init>,com.google.common.collect.ImmutableEnumMap:<init>(java.util.EnumMap),56,59,"/**
* Creates an ImmutableEnumMap with the given EnumMap delegate.
* @param delegate The EnumMap to wrap; must not be empty.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",674,682,"/**
 * Returns a sub-set of elements between fromElement and toElement.
 * @param fromElement start element (inclusive)
 * @param toElement end element (inclusive)
 * @return ImmutableSortedSet containing the sub-set
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,partition,"com.google.common.collect.Iterables:partition(java.lang.Iterable,int)",527,537,"/**
 * Partitions an iterable into lists of the specified size.
 * @param iterable iterable to partition
 * @param size size of each sublist
 * @return Iterable of List<T>
 */
","* Divides an iterable into unmodifiable sublists of the given size (the final iterable may be
   * smaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method. The returned lists implement {@link RandomAccess}, whether or not the input list does.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * <p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}
   * instead.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,paddedPartition,"com.google.common.collect.Iterables:paddedPartition(java.lang.Iterable,int)",554,564,"/**
 * Partitions an iterable into lists of the specified size.
 * @param iterable Iterable to partition.
 * @param size Partition size.
 * @return Iterable of lists.
 */
","* Divides an iterable into unmodifiable sublists of the given size, padding the final iterable
   * with null values if necessary. For example, partitioning an iterable containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterable containing two inner lists of three elements each, all in the original order.
   *
   * <p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}
   * method.
   *
   * @param iterable the iterable to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterable of unmodifiable lists containing the elements of {@code iterable} divided
   *     into partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partitionImpl,"com.google.common.collect.Iterators:partitionImpl(java.util.Iterator,int,boolean)",626,660,"/**
 * Partitions an iterator into lists of specified size, padding if needed.
 * @param iterator Iterator to partition.
 * @param size List size.
 * @param pad Whether to pad the last list with nulls.
 * @return UnmodifiableIterator of List<T>.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue$Builder:expectedSize(int),186,191,"/**
 * Sets the expected size of the data.
 * @param expectedSize The expected size (must be >= 0).
 * @return This builder instance.
 */
","* Configures this builder to build min-max priority queues with an initial expected size of
     * {@code expectedSize}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue$Builder:maximumSize(int),199,204,"/**
 * Sets the maximum size of the collection.
 * @param maximumSize The maximum size, must be greater than 0.
 * @return This builder instance.
 */
","* Configures this builder to build {@code MinMaxPriorityQueue} instances that are limited to
     * {@code maximumSize} elements. Each time a queue grows beyond this bound, it immediately
     * removes its greatest element (according to its comparator), which might be the element that
     * was just added.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset$AvlNode:<init>(java.lang.Object,int)",617,626,"/**
 * Creates a new AvlNode with the given element and count.
 * @param elem The element to store in the node.
 * @param elemCount The count of the element in the node.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(int),39,43,"/**
 * Creates a new Hasher instance.
 * @param expectedInputSize Expected size of input data.
 * @return A new BufferingHasher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,"com.google.common.hash.AbstractStreamingHasher:<init>(int,int)",61,70,"/**
 * Constructs a StreamingHasher with given chunk and buffer sizes.
 * @param chunkSize Size of each data chunk to process.
 * @param bufferSize Size of the internal buffer.
 */
","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size, using an internal buffer of {@code bufferSize} size, which must be a multiple of {@code
   * chunkSize}.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4
   * @param bufferSize the size of the internal buffer. Must be a multiple of chunkSize",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingAppendable,"com.google.common.io.BaseEncoding:separatingAppendable(java.lang.Appendable,java.lang.String,int)",1082,1111,"/**
 * Wraps an Appendable, inserting a separator after every n chars.
 * @param delegate The target Appendable.
 * @param separator The separator string.
 * @param afterEveryChars Interval for separator insertion.
 * @return Wrapped Appendable.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,ensureNonNegative,com.google.common.math.DoubleUtils:ensureNonNegative(double),133,136,"/**
 * Ensures the input value is non-negative.
 * @param value The value to check; must not be NaN.
 * @return The input value if non-negative, otherwise 0.0.
 */
","Returns its argument if it is non-negative, zero if it is negative.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,toFile,com.google.common.reflect.ClassPath:toFile(java.net.URL),671,679,"/**
 * Converts a URL to a File object, handling escaped characters.
 * @param url The URL to convert. Must be a file URL.
 * @return A File object representing the URL.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,is,com.google.common.base.CharMatcher:is(char),297,299,"/**
 * Returns a CharMatcher that matches the specified character.
 * @param match The character to match.
 * @return A CharMatcher that matches the character.
 */
",Returns a {@code char} matcher that matches only one specified BMP character.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isEither,"com.google.common.base.CharMatcher:isEither(char,char)",1717,1719,"/**
 * Creates a CharMatcher that matches either char c1 or c2.
 * @param c1 The first character to match.
 * @param c2 The second character to match.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,isNot,com.google.common.base.CharMatcher:isNot(char),306,308,"/**
 * Returns a CharMatcher that rejects chars equal to match.
 * @param match the character to reject
 * @return a CharMatcher that rejects the character
 */
","* Returns a {@code char} matcher that matches any character except the BMP character specified.
   *
   * <p>To negate another {@code CharMatcher}, use {@link #negate()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher$Negated:matchesNoneOf(java.lang.CharSequence),1535,1538,"/**
* Checks if the original sequence matches none of the given sequence.
* @param sequence Sequence to check against.
* @return True if original sequence does not match any part of sequence.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,countIn,com.google.common.base.CharMatcher$Negated:countIn(java.lang.CharSequence),1540,1543,"/**
* Counts characters not in original sequence.
* @param sequence CharSequence to search within.
* @return The number of characters not in original.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,collapseFrom,"com.google.common.base.CharMatcher:collapseFrom(java.lang.CharSequence,char)",840,857,"/**
* Collapses consecutive matching chars in a sequence.
* @param sequence CharSequence to collapse.
* @param replacement Replacement character.
* @return Modified sequence or original if no match.
*/
","* Returns a string copy of the input character sequence, with each group of consecutive matching
   * BMP characters replaced by a single replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.anyOf(""eko"").collapseFrom(""bookkeeper"", '-')
   * }
   *
   * ... returns {@code ""b-p-r""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching groups of characters in
   * @param replacement the character to append to the result string in place of each group of
   *     matching characters in {@code sequence}
   * @return the new string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,isPcreLike,com.google.common.base.CommonPattern:isPcreLike(),40,42,"/**
 * Checks if the platform's pattern compiler is PCRE-like.
 * Returns true if it is, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ConverterComposition:equals(java.lang.Object),422,429,"/**
 * Checks if this ConverterComposition equals another object.
 * @param object Object to compare to, must be ConverterComposition.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,equals,com.google.common.base.Converter$ReverseConverter:equals(java.lang.Object),347,354,"/**
 * Checks if two ReverseConverter objects have the same original value.
 * @param object Object to compare to, must be a ReverseConverter.
 * @return True if original values are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter:<init>(),153,155,"/**
 * Default constructor. Calls the parameterized constructor with true.
 */
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getEnumConstants,com.google.common.base.Enums:getEnumConstants(java.lang.Class),86,95,"/**
 * Retrieves enum constants for a given enum class.
 * @param enumClass The enum class to retrieve constants for.
 * @return Map of enum name to WeakReference of enum constant.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,<init>,"com.google.common.base.FunctionalEquivalence:<init>(com.google.common.base.Function,com.google.common.base.Equivalence)",39,43,"/**
 * Initializes FunctionalEquivalence with a function and equivalence.
 * @param function Transforms input to a nullable T.
 * @param resultEquivalence Equivalence for comparing T results.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,<init>,com.google.common.base.PairwiseEquivalence:<init>(com.google.common.base.Equivalence),29,31,"/**
* Initializes the PairwiseEquivalence with an equivalence function.
* @param elementEquivalence Equivalence function for elements.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,apply,com.google.common.base.Equivalence$EquivalentToPredicate:apply(java.lang.Object),323,326,"/**
 * Checks if the input is equivalent to the target.
 * @param input The input value to compare.
 * @return True if equivalent, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$Wrapper:equals(java.lang.Object),244,263,"/**
 * Checks if two Wrapper objects are equal based on their equivalence.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
","* Returns {@code true} if {@link Equivalence#equivalent(Object, Object)} applied to the wrapped
     * references is {@code true} and both wrappers use the {@link Object#equals(Object) same}
     * equivalence.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,test,"com.google.common.base.Equivalence:test(java.lang.Object,java.lang.Object)",83,88,"/**
 * Checks if two objects are equivalent using the equivalent method.
 * @param t The first object.
 * @param u The second object.
 * @return True if equivalent, false otherwise.
 */
","* @deprecated Provided only to satisfy the {@link BiPredicate} interface; use {@link #equivalent}
   *     instead.
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doEquivalent,"com.google.common.base.FunctionalEquivalence:doEquivalent(java.lang.Object,java.lang.Object)",45,48,"/**
 * Checks if two elements are equivalent based on function application.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doEquivalent,"com.google.common.base.PairwiseEquivalence:doEquivalent(java.lang.Iterable,java.lang.Iterable)",33,45,"/**
 * Checks if two iterables are equivalent based on element equivalence.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,"com.google.common.collect.MapMakerInternalMap$Segment:reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1869,1900,"/**
 * Reclaims a value associated with a key from the weak value chain.
 * @param key Key of the value to reclaim.
 * @return True if value was reclaimed, false otherwise.
 */",Removes an entry whose value has been garbage collected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clearValueForTesting,"com.google.common.collect.MapMakerInternalMap$Segment:clearValueForTesting(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",1903,1933,"/**
 * Clears a value for testing by key, hash, and reference.
 * Returns true if found and cleared, false otherwise.
 */
","Clears a value that has not yet been set, and thus does not require count to be modified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equals,com.google.common.base.Equivalence$EquivalentToPredicate:equals(java.lang.Object),328,338,"/**
 * Checks if two EquivalentToPredicate objects are equal.
 * Compares equivalence and target fields for equality.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ConstantFunction:equals(java.lang.Object),376,383,"/**
 * Checks if this ConstantFunction has the same value as another.
 * @param obj the object to compare to
 * @return true if values are equal, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,equals,com.google.common.base.Functions$ForMapWithDefault:equals(java.lang.Object),213,220,"/**
 * Checks if two ForMapWithDefault instances are equal.
 * Compares underlying maps and default values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equals,com.google.common.base.Predicates$ContainsPatternPredicate:equals(java.lang.Object),750,761,"/**
 * Checks if two ContainsPatternPredicates are equal.
 * Compares the underlying patterns and flags for equality.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,equals,com.google.common.base.Suppliers$SupplierOfInstance:equals(java.lang.Object),373,380,"/**
* Checks if two SupplierOfInstance objects have equal instances.
* @param obj The object to compare with.
* @return True if instances are equal, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapEntry.java,equals,com.google.common.collect.AbstractMapEntry:equals(java.lang.Object),48,56,"/**
 * Checks if this entry is equal to another entry.
 * @param object Object to compare with, must be an Entry.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsValue,com.google.common.collect.ArrayTable:containsValue(java.lang.Object),424,434,"/**
 * Checks if the array contains the specified value.
 * @param value Value to search for.
 * @return True if found, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,remove,com.google.common.collect.FilteredMultimapValues:remove(java.lang.Object),62,74,"/**
 * Removes the entry with the specified value from the multimap.
 * @param o the value to be removed
 * @return true if an entry was removed, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByKey,"com.google.common.collect.HashBiMap:seekByKey(java.lang.Object,int)",241,250,"/**
 * Finds a BiEntry by key and hash.
 * @param key The key to search for.
 * @param keyHash Hash code of the key.
 * @return Matching BiEntry or null if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,seekByValue,"com.google.common.collect.HashBiMap:seekByValue(java.lang.Object,int)",252,261,"/**
 * Finds an entry by value and hash.
 * @param value The value to search for.
 * @param valueHash Hash code of the value.
 * @return BiEntry if found, otherwise null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,elementsEqual,"com.google.common.collect.Iterators:elementsEqual(java.util.Iterator,java.util.Iterator)",272,284,"/**
 * Checks if two iterators have the same elements.
 * @param iterator1 First iterator
 * @param iterator2 Second iterator
 * @return True if elements are equal, false otherwise.
 */
","* Determines whether two iterators contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same
   * number of elements and every element of {@code iterator1} is equal to the corresponding element
   * of {@code iterator2}.
   *
   * <p>Note that this will modify the supplied iterators, since they will have been advanced some
   * number of elements forward.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,matchesValue,"com.google.common.collect.LinkedHashMultimap$ValueEntry:matchesValue(java.lang.Object,int)",216,218,"/**
 * Checks if the value matches the given value and hash.
 * @param v value to compare with, can be null
 * @param smearedVHash smeared hash of the value
 * @return true if values match, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$FilteredMapValues:remove(java.lang.Object),2917,2928,"/**
 * Removes the first matching entry with the specified value.
 * @param o value to be removed
 * @return true if an entry was removed, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$ValueDifferenceImpl:equals(java.lang.Object),729,737,"/**
* Checks if this ValueDifference equals another MapDifference.
* @param object The object to compare to.
* @return True if equal, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,equals,com.google.common.collect.Multisets$AbstractEntry:equals(java.lang.Object),836,844,"/**
 * Checks if this entry is equal to another Multiset entry.
 * @param object the object to compare to
 * @return true if equal, false otherwise
 */
","* Indicates whether an object equals this entry, following the behavior specified in {@link
     * Multiset.Entry#equals}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,equals,com.google.common.collect.Tables$AbstractCell:equals(java.lang.Object),176,188,"/**
 * Checks if two cells are equal based on rowKey, colKey, and value.
 * @param obj Object to compare to, must be a Cell.
 * @return True if cells are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,equals,com.google.common.graph.ElementOrder:equals(java.lang.Object),161,172,"/**
 * Checks if two ElementOrder objects are equal based on type and comparator.
 * @param obj The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,canTraverseWithoutReusingEdge,"com.google.common.graph.Graphs:canTraverseWithoutReusingEdge(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",167,175,"/**
 * Checks if traversal can continue without reusing an edge.
 * @param graph The graph to traverse.
 * @param nextNode The next node to visit.
 * @param previousNode The previously visited node.
 */
","* Determines whether an edge has already been used during traversal. In the directed case a cycle
   * is always detected before reusing an edge, so no special logic is required. In the undirected
   * case, we must take care not to ""backtrack"" over an edge (i.e. going from A to B and then going
   * from B to A).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,equals,com.google.common.net.HostAndPort:equals(java.lang.Object),277,287,"/**
 * Checks if two HostAndPort objects are equal.
 * @param other The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,hashCode,com.google.common.base.Equivalence$Wrapper:hashCode(),266,269,"/**
 * Calculates the hash code based on the reference's hash.
 */",Returns the result of {@link Equivalence#hash(Object)} applied to the wrapped reference.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FunctionalEquivalence.java,doHash,com.google.common.base.FunctionalEquivalence:doHash(java.lang.Object),50,53,"/**
 * Calculates hash code for an object using the provided function.
 * @param a the object to hash
 * @return the hash code
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/PairwiseEquivalence.java,doHash,com.google.common.base.PairwiseEquivalence:doHash(java.lang.Iterable),47,54,"/**
 * Calculates a hash code for the given iterable.
 * @param iterable Iterable to calculate hash code for.
 * @return Hash code value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizablePhantomReference.java,<init>,"com.google.common.base.FinalizablePhantomReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",43,46,"/**
 * Constructs a FinalizablePhantomReference with a referent and queue.
 * @param referent The object being referenced.
 * @param queue The FinalizableReferenceQueue to use.
 */
","* Constructs a new finalizable phantom reference.
   *
   * @param referent to phantom reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,close,com.google.common.base.FinalizableReferenceQueue:close(),225,229,"/**
 * Closes the resource, enqueues a request, and cleans up.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableSoftReference.java,<init>,"com.google.common.base.FinalizableSoftReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
 * Constructs a FinalizableSoftReference with a referent and queue.
 * @param referent The object to be referenced.
 * @param queue The FinalizableReferenceQueue to use.
 */
","* Constructs a new finalizable soft reference.
   *
   * @param referent to softly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableWeakReference.java,<init>,"com.google.common.base.FinalizableWeakReference:<init>(java.lang.Object,com.google.common.base.FinalizableReferenceQueue)",41,44,"/**
 * Constructs a FinalizableWeakReference with a referent and queue.
 * @param referent The object to be weakly referenced.
 * @param queue The FinalizableReferenceQueue to use.
 */
","* Constructs a new finalizable weak reference.
   *
   * @param referent to weakly reference
   * @param queue that should finalize the referent",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/FinalizableReferenceQueue.java,loadFinalizer,com.google.common.base.FinalizableReferenceQueue$DecoupledLoader:loadFinalizer(),329,346,"/**
 * Loads the Finalizer class using a URLClassLoader. Returns null on failure.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,constant,com.google.common.base.Functions:constant(java.lang.Object),357,360,"/**
 * Creates a function that always returns the given value.
 * @param <E> The type of the value to return.
 * @param value The constant value to return.
 * @return A function that always returns the given value.
 */
","* Returns a function that ignores its input and always returns {@code value}.
   *
   * <p>Prefer to use the lambda expression {@code o -> value} instead. Note that it is not
   * serializable unless you explicitly make it {@link Serializable}, typically by writing {@code
   * (Function<Object, E> & Serializable) o -> value}.
   *
   * @param value the constant value for the function to return
   * @return a function that always returns {@code value}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,apply,com.google.common.base.Functions$FunctionForMapNoDefault:apply(java.lang.Object),161,168,"/**
 * Applies the function to the given key.
 * @param key The key to apply the function to.
 * @return The value associated with the key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$ConcurrencyLevelParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",365,372,"/**
 * Sets the concurrency level of the CacheBuilderSpec.
 * @param spec CacheBuilderSpec to update.
 * @param value New concurrency level.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseInteger,"com.google.common.cache.CacheBuilderSpec$InitialCapacityParser:parseInteger(com.google.common.cache.CacheBuilderSpec,int)",329,336,"/**
 * Sets the initial capacity of the CacheBuilderSpec.
 * @param spec CacheBuilderSpec to update.
 * @param value The new initial capacity.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumSizeParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",341,348,"/**
 * Sets the maximum size of the cache.
 * @param spec CacheBuilderSpec to update.
 * @param value The new maximum size.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseLong,"com.google.common.cache.CacheBuilderSpec$MaximumWeightParser:parseLong(com.google.common.cache.CacheBuilderSpec,long)",353,360,"/**
* Sets the maximum weight for the CacheBuilderSpec.
* Ensures maximumWeight/size are not already set.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,<init>,com.google.common.collect.ConcurrentHashMultiset:<init>(java.util.concurrent.ConcurrentMap),128,132,"/**
 * Creates a ConcurrentHashMultiset with a given backing map.
 * @param countMap The empty ConcurrentMap to use as backing store.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,convert,"com.google.common.collect.Maps$BiMapConverter:convert(com.google.common.collect.BiMap,java.lang.Object)",1620,1624,"/**
 * Retrieves the value associated with the given key from the BiMap.
 * @param bimap the BiMap to search
 * @param input the key to look up
 * @return the value associated with the key, or null if not found
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractBaseGraph:incidentEdges(java.lang.Object),106,134,"/**
 * Returns incident edges for a given node.
 * @param node the node to find incident edges for
 * @return Set of EndpointPair<N> representing incident edges
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getHostAndPortFromBracketedHost,com.google.common.net.HostAndPort:getHostAndPortFromBracketedHost(java.lang.String),210,238,"/**
 * Extracts host and port from a bracketed host-port string.
 * @param hostPortString Bracketed host-port string (e.g., [host:port])
 * @return String array containing host and port.
 */
","* Parses a bracketed host-port string, throwing IllegalArgumentException if parsing fails.
   *
   * @param hostPortString the full bracketed host-port specification. Port might not be specified.
   * @return an array with 2 strings: host and port, in that order.
   * @throws IllegalArgumentException if parsing the bracketed host-port string fails.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,requireBracketsForIPv6,com.google.common.net.HostAndPort:requireBracketsForIPv6(),271,275,"/**
 * Checks for bracketless IPv6 literals and returns the current object.
 */","* Generate an error if the host might be a non-bracketed IPv6 literal.
   *
   * <p>URI formatting requires that IPv6 literals be surrounded by brackets, like ""[2001:db8::1]"".
   * Chain this call after {@link #fromString(String)} to increase the strictness of the parser, and
   * disallow IPv6 literals that don't contain these brackets.
   *
   * <p>Note that this parser identifies IPv6 literals solely based on the presence of a colon. To
   * perform actual validation of IP addresses, see the {@link InetAddresses#forString(String)}
   * method.
   *
   * @return {@code this}, to enable chaining of calls.
   * @throws IllegalArgumentException if bracketless IPv6 is detected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,decrement,com.google.common.net.InetAddresses:decrement(java.net.InetAddress),1179,1191,"/**
 * Decrements an InetAddress. Wraps around if necessary.
 * @param address The InetAddress to decrement.
 * @return Decremented InetAddress.
 */
","* Returns a new InetAddress that is one less than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to decrement
   * @return a new InetAddress that is one less than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the beginning of its range
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,increment,com.google.common.net.InetAddresses:increment(java.net.InetAddress),1202,1214,"/**
 * Increments an InetAddress. Wraps around if necessary.
 * @param address The InetAddress to increment.
 * @return The incremented InetAddress.
 */
","* Returns a new InetAddress that is one more than the passed in address. This method works for
   * both IPv4 and IPv6 addresses.
   *
   * @param address the InetAddress to increment
   * @return a new InetAddress that is one more than the passed in address
   * @throws IllegalArgumentException if InetAddress is at the end of its range
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,newProxy,"com.google.common.reflect.Reflection:newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)",79,86,"/**
 * Creates a dynamic proxy that implements the given interface.
 * @param interfaceType The interface type to proxy.
 * @param handler The invocation handler.
 * @return A proxy instance of the interface type.
 */
","* Returns a proxy instance that implements {@code interfaceType} by dispatching method
   * invocations to {@code handler}. The class loader of {@code interfaceType} will be used to
   * define the proxy class. To implement multiple interfaces or specify a class loader, use {@link
   * Proxy#newProxyInstance}.
   *
   * @throws IllegalArgumentException if {@code interfaceType} does not specify the type of a Java
   *     interface",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeCapture.java,capture,com.google.common.reflect.TypeCapture:capture(),30,34,"/**
 * Extracts the type argument from the superclass's parameterized type.
 */",Returns the captured type.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeParameter.java,<init>,com.google.common.reflect.TypeParameter:<init>(),50,54,"/**
 * Constructs a TypeParameter from a captured type, ensuring it's a TypeVariable.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,toString,com.google.common.base.Joiner$1:toString(java.lang.Object),510,530,"/**
 * Converts an object to a CharSequence, returning its toString() if not already one.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.util.Iterator)",103,114,"/**
 * Appends parts to an appendable, separated by a separator.
 * @param appendable Target appendable.
 * @param parts Iterator of parts to append.
 * @return The modified appendable.
 */
","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",450,453,"/**
 * Appends entries to a StringBuilder.
 * @param builder StringBuilder to append to
 * @param entries Iterable of entries to append
 * @return The modified StringBuilder
 */","* Appends the string representation of each entry in {@code entries}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Iterable)}, except that it does not throw {@link IOException}.
     *
     * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Iterator),496,498,"/**
 * Joins entries from an iterator into a string using StringBuilder.
 */","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,withKeyValueSeparator,com.google.common.base.Joiner:withKeyValueSeparator(char),347,349,"/**
 * Sets the key-value separator character.
 * @param keyValueSeparator The separator character.
 * @return The Joiner with the specified separator.
 */
","* Returns a {@code MapJoiner} using the given key-value separator, and the same configuration as
   * this {@code Joiner} otherwise.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,toString,com.google.common.base.MoreObjects$ToStringHelper:toString(),383,414,"/**
 * Returns a string representation of the object.
 * Creates a copy of the object to ensure consistency.
 */","* Returns a string in the format specified by {@link MoreObjects#toStringHelper(Object)}.
     *
     * <p>After calling this method, you can keep adding more properties to later call toString()
     * again and get a more complete representation of the same object; but properties cannot be
     * removed, so this only allows limited reuse of the helper instance. The helper allows
     * duplication of properties (multiple name/value pairs with the same name can be added).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.Object),422,427,"/**
 * Adds a value to the ToStringHelper.
 * @param value The value to add, can be null.
 * @return This ToStringHelper instance.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addHolder,"com.google.common.base.MoreObjects$ToStringHelper:addHolder(java.lang.String,java.lang.Object)",429,435,"/**
 * Adds a name-value pair to the ToStringHelper.
 * @param name Name of the value.
 * @param value Value to be added.
 * @return This ToStringHelper instance.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.Object),443,448,"/**
 * Adds a value to the ToStringHelper as unconditional.
 * @param value The value to add.
 * @return This ToStringHelper instance for chaining.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addUnconditionalHolder,"com.google.common.base.MoreObjects$ToStringHelper:addUnconditionalHolder(java.lang.String,java.lang.Object)",450,456,"/**
 * Adds an unconditional value holder with a name and value.
 * @param name Holder name.
 * @param value Holder value.
 * @return Fluent interface builder.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getWeigher,com.google.common.cache.CacheBuilder:getWeigher(),604,607,"/**
 * Returns a Weigher instance, defaulting to OneWeigher.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyStrength,com.google.common.cache.CacheBuilder:getKeyStrength(),638,640,"/**
 * Returns the key strength, defaulting to STRONG if null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueStrength,com.google.common.cache.CacheBuilder:getValueStrength(),698,700,"/**
 * Returns the value strength, defaulting to STRONG if null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getRemovalListener,com.google.common.cache.CacheBuilder:getRemovalListener(),988,992,"/**
 * Returns the removal listener, or a default NullListener.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,get,com.google.common.collect.ImmutableSetMultimap:get(java.lang.Object),528,533,"/**
 * Retrieves the set associated with the given key.
 * @param key the key to look up
 * @return the set or an empty set if the key is not found
 */
","* Returns an immutable set of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable set is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyStrength,com.google.common.collect.MapMaker:getKeyStrength(),221,223,"/**
 * Returns the key strength, defaulting to STRONG if null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getValueStrength,com.google.common.collect.MapMaker:getValueStrength(),268,270,"/**
 * Returns the value strength, defaulting to STRONG if null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,com.google.common.io.Resources:getResource(java.lang.String),187,197,"/**
 * Retrieves a resource URL from the classloader.
 * @param resourceName The name of the resource to retrieve.
 * @return The URL of the resource.
 */
","* Returns a {@code URL} pointing to {@code resourceName} if the resource is found using the
   * {@linkplain Thread#getContextClassLoader() context class loader}. In simple environments, the
   * context class loader will find resources from the class path. In environments where different
   * threads can have different class loaders, for example app servers, the context class loader
   * will typically have been set to an appropriate loader for the current thread.
   *
   * <p>In the unusual case where the context class loader is null, the class loader that loaded
   * this class ({@code Resources}) will be used instead.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,absent,com.google.common.base.Optional:absent(),96,98,"/**
 * Returns an empty Optional.
 * Provides an empty container for generic type T.
 */
","* Returns an {@code Optional} instance with no contained reference.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.empty}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,toJavaUtil,com.google.common.base.Optional:toJavaUtil(com.google.common.base.Optional),148,155,"/**
 * Converts a Google Optional to a Java Optional.
 * @param googleOptional Google Optional to convert.
 * @return Java Optional or null if input is null.
 */
","* Returns the equivalent {@code java.util.Optional} value to the given {@code
   * com.google.common.base.Optional}, or {@code null} if the argument is null.
   *
   * <p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}
   * instead.
   *
   * <p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it
   * could refer to either the static or instance version of this method. Write out the lambda
   * expression {@code o -> Optional.toJavaUtil(o)} instead.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,emptyToNull,com.google.common.base.Platform:emptyToNull(java.lang.String),80,82,"/**
 * Converts an empty string to null.
 * @param string The string to check.
 * @return Null if empty, otherwise the input string.
 */
","* Returns the string if it is not empty, or a null string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} if it is not empty; {@code null} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,isNullOrEmpty,com.google.common.base.Strings:isNullOrEmpty(java.lang.String),70,72,"/**
 * Checks if a string is null or empty.
 * @param string The string to check.
 * @return True if null or empty, false otherwise.
 */
","* Returns {@code true} if the given string is null or is the empty string.
   *
   * <p>Consider normalizing your string references with {@link #nullToEmpty}. If you do, you can
   * use {@link String#isEmpty()} instead of this method, and you won't need special null-safe forms
   * of methods like {@link String#toUpperCase} either. Or, if you'd like to normalize ""in the other
   * direction,"" converting empty strings to {@code null}, you can use {@link #emptyToNull}.
   *
   * @param string a string reference to check
   * @return {@code true} if the string is null or is the empty string",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$AccessDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",461,466,"/**
 * Sets the access expiration duration and time unit for the cache.
 * @param spec CacheBuilderSpec to update
 * @param duration Expiration duration
 * @param unit Time unit of the duration
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$RecordStatsParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",412,417,"/**
 * Sets recordStats flag on CacheBuilderSpec.
 * Value is ignored; spec must not already have recordStats set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$RefreshDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",481,486,"/**
 * Sets the duration and time unit for refreshing the cache.
 * @param spec CacheBuilderSpec to update
 * @param duration Refresh duration
 * @param unit Time unit of the duration
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parseDuration,"com.google.common.cache.CacheBuilderSpec$WriteDurationParser:parseDuration(com.google.common.cache.CacheBuilderSpec,long,java.util.concurrent.TimeUnit)",471,476,"/**
 * Sets the write expiration duration and time unit for the cache.
 * @param spec CacheBuilderSpec to update.
 * @param duration Expiration duration.
 * @param unit Time unit of the duration.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,chooseTableSize,com.google.common.collect.ImmutableSet:chooseTableSize(int),696,711,"/**
* Calculates a suitable table size based on the set size.
* @param setSize the number of elements to be stored
* @return the calculated table size.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,skip,"com.google.common.collect.Iterables:skip(java.lang.Iterable,int)",912,969,"/**
 * Returns a new iterable that skips a specified number of elements.
 * @param iterable source iterable
 * @param numberToSkip number of elements to skip
 * @return new iterable with skipped elements
 */
","* Returns a view of {@code iterable} that skips its first {@code numberToSkip} elements. If
   * {@code iterable} contains fewer than {@code numberToSkip} elements, the returned iterable skips
   * all of its elements.
   *
   * <p>Modifications to the underlying {@link Iterable} before a call to {@code iterator()} are
   * reflected in the returned iterator. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the {@code Iterator} is created, not when {@code skip()} is called.
   *
   * <p>The returned iterable's iterator supports {@code remove()} if the iterator of the underlying
   * iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by
   * immediately calling {@code remove()} on that iterator, as the {@code Iterator} contract states
   * that a call to {@code remove()} before a call to {@code next()} will throw an {@link
   * IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip}
   *
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,limit,"com.google.common.collect.Iterables:limit(java.lang.Iterable,int)",984,999,"/**
 * Returns a limited view of the iterable, up to {@code limitSize}.
 * @param iterable Source iterable.
 * @param limitSize Maximum number of elements to return.
 */","* Returns a view of {@code iterable} containing its first {@code limitSize} elements. If {@code
   * iterable} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterable's iterator supports {@code remove()} if {@code iterable}'s
   * iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit}
   *
   * @param iterable the iterable to limit
   * @param limitSize the maximum number of elements in the returned iterable
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,advance,"com.google.common.collect.Iterators:advance(java.util.Iterator,int)",934,944,"/**
 * Advances the iterator by the specified number of elements.
 * @param iterator Iterator to advance.
 * @param numberToAdvance Number of elements to advance.
 * @return Actual number of elements advanced.
 */
","* Calls {@code next()} on {@code iterator}, either {@code numberToAdvance} times or until {@code
   * hasNext()} returns {@code false}, whichever comes first.
   *
   * @return the number of elements the iterator was advanced
   * @since 13.0 (since 3.0 as {@code Iterators.skip})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,limit,"com.google.common.collect.Iterators:limit(java.util.Iterator,int)",956,983,"/**
 * Returns an iterator that returns at most {@param limitSize} elements.
 */","* Returns a view containing the first {@code limitSize} elements of {@code iterator}. If {@code
   * iterator} contains fewer than {@code limitSize} elements, the returned view contains all of its
   * elements. The returned iterator supports {@code remove()} if {@code iterator} does.
   *
   * @param iterator the iterator to limit
   * @param limitSize the maximum number of elements in the returned iterator
   * @throws IllegalArgumentException if {@code limitSize} is negative
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,forTree,com.google.common.graph.Traverser:forTree(com.google.common.graph.SuccessorsFunction),180,193,"/**
 * Creates a Traverser for a given tree-like SuccessorsFunction.
 * @param tree The SuccessorsFunction representing the tree.
 * @return A Traverser object for traversing the tree.
 */
","* Creates a new traverser for a directed acyclic graph that has at most one path from the start
   * node(s) to any node reachable from the start node(s), and has no paths from any start node to
   * any other start node, such as a tree or forest.
   *
   * <p>{@code forTree()} is especially useful (versus {@code forGraph()}) in cases where the data
   * structure being traversed is, in addition to being a tree/forest, also defined <a
   * href=""https://github.com/google/guava/wiki/GraphsExplained#non-recursiveness"">recursively</a>.
   * This is because the {@code forTree()}-based implementations don't keep track of visited nodes,
   * and therefore don't need to call {@code equals()} or {@code hashCode()} on the node objects;
   * this saves both time and space versus traversing the same graph using {@code forGraph()}.
   *
   * <p>Providing a graph to be traversed for which there is more than one path from the start
   * node(s) to any node may lead to:
   *
   * <ul>
   *   <li>Traversal not terminating (if the graph has cycles)
   *   <li>Nodes being visited multiple times (if multiple paths exist from any start node to any
   *       node reachable from any start node)
   * </ul>
   *
   * <p><b>Performance notes</b>
   *
   * <ul>
   *   <li>Traversals require <i>O(n)</i> time (where <i>n</i> is the number of nodes reachable from
   *       the start node).
   *   <li>While traversing, the traverser will use <i>O(H)</i> space (where <i>H</i> is the number
   *       of nodes that have been seen but not yet visited, that is, the ""horizon"").
   * </ul>
   *
   * <p><b>Examples</b> (all edges are directed facing downwards)
   *
   * <p>The graph below would be valid input with start nodes of {@code a, f, c}. However, if {@code
   * b} were <i>also</i> a start node, then there would be multiple paths to reach {@code e} and
   * {@code h}.
   *
   * {@snippet :
   *    a     b      c
   *   / \   / \     |
   *  /   \ /   \    |
   * d     e     f   g
   *       |
   *       |
   *       h
   * }
   *
   * <p>.
   *
   * <p>The graph below would be a valid input with start nodes of {@code a, f}. However, if {@code
   * b} were a start node, there would be multiple paths to {@code f}.
   *
   * {@snippet :
   *    a     b
   *   / \   / \
   *  /   \ /   \
   * c     d     e
   *        \   /
   *         \ /
   *          f
   * }
   *
   * <p><b>Note on binary trees</b>
   *
   * <p>This method can be used to traverse over a binary tree. Given methods {@code
   * leftChild(node)} and {@code rightChild(node)}, this method can be called as
   *
   * {@snippet :
   * Traverser.forTree(node -> ImmutableList.of(leftChild(node), rightChild(node)));
   * }
   *
   * @param tree {@link SuccessorsFunction} representing a directed acyclic graph that has at most
   *     one path between any two nodes",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long[]),176,185,"/**
 * Initializes a LockFreeBitArray from a provided long array.
 * @param data The array of longs to initialize the bit array from.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,checkPositiveAndMakeMultipleOf32,com.google.common.hash.Hashing:checkPositiveAndMakeMultipleOf32(int),739,742,"/**
 * Rounds up to the nearest multiple of 32, ensuring positivity.
 * @param bits Number of bits; must be positive.
 * @return Rounded-up multiple of 32.
 */
","Checks that the passed argument is positive, and ceils it to a multiple of 32.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,<init>,"com.google.common.io.ByteStreams$LimitedInputStream:<init>(java.io.InputStream,long)",720,725,"/**
 * Creates a limited input stream with specified limit.
 * @param in the input stream
 * @param limit the maximum number of bytes to read
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,com.google.common.math.Quantiles$Scale:<init>(int),176,179,"/**
 * Constructs a Scale object with the given scale value.
 * @param scale The scale value, must be positive.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,<init>,"com.google.common.math.Quantiles$ScaleAndIndexes:<init>(int,int[])",327,334,"/**
 * Initializes a ScaleAndIndexes object with a scale and indexes.
 * @param scale The scale value.
 * @param indexes Array of indexes to validate.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromBigInteger,"com.google.common.net.InetAddresses:fromBigInteger(java.math.BigInteger,boolean)",1120,1150,"/**
 * Converts a BigInteger to an InetAddress, IPv6 if specified.
 * @param address BigInteger representing the IP address
 * @param isIpv6 true for IPv6, false for IPv4
 * @return InetAddress object
 */
","* Converts a BigInteger to either an IPv4 or IPv6 address. If the IP is IPv4, it must be
   * constrained to 32 bits, otherwise it is constrained to 128 bits.
   *
   * @param address the address represented as a big integer
   * @param isIpv6 whether the created address should be IPv4 or IPv6
   * @return the BigInteger converted to an address
   * @throws IllegalArgumentException if the BigInteger is not between 0 and maximum value for IPv4
   *     or IPv6 respectively",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:<init>(int),350,353,"/**
* Calculates the mask for a power of two striped region.
* @param stripes The number of stripes, must be positive.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodabetFor,com.google.common.io.BaseEncoding$Alphabet:decodabetFor(char[]),481,491,"/**
 * Creates a decode alphabet array from input characters.
 * @param chars Character array to build the decode alphabet.
 * @return Decode alphabet array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,repeat,"com.google.common.base.Strings:repeat(java.lang.String,int)",148,174,"/**
 * Repeats the given string the specified number of times.
 * @param string string to repeat
 * @param count number of repetitions
 * @return repeated string
 */
","* Returns a string consisting of a specific number of concatenated copies of an input string. For
   * example, {@code repeat(""hey"", 3)} returns the string {@code ""heyheyhey""}.
   *
   * <p><b>Java 11+ users:</b> use {@code string.repeat(count)} instead.
   *
   * @param string any non-null string
   * @param count the number of times to repeat it; a nonnegative integer
   * @return a string containing {@code string} repeated {@code count} times (the empty string if
   *     {@code count} is zero)
   * @throws IllegalArgumentException if {@code count} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(int),642,646,"/**
 * Checks if the input value is non-negative; throws exception if not.
 * @param value The integer value to check.
 * @return The input value if it's non-negative.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(int),654,658,"/**
 * Checks if the value is positive and returns it.
 * @param value The integer value to check.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,newHasher,com.google.common.hash.AbstractHashFunction:newHasher(int),75,80,"/**
 * Creates a new Hasher instance.
 * @param expectedInputSize Expected input size, must be >= 0.
 * @return A new Hasher object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,"com.google.common.hash.BloomFilter:<init>(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)",131,140,"/**
 * Constructs a Bloom filter with given parameters.
 * @param bits The bit array.
 * @param numHashFunctions Number of hash functions (1-255).
 * @param funnel Funnel for hashing objects.
 * @param strategy Strategy for hash function selection.
 */
",Creates a BloomFilter.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,<init>,"com.google.common.hash.ChecksumHashFunction:<init>(com.google.common.hash.ImmutableSupplier,int,java.lang.String)",42,48,"/**
 * Constructs a ChecksumHashFunction with a checksum supplier, bits, and toString.
 * @param checksumSupplier Provides checksum instances.
 * @param bits Number of bits (32 or 64).
 * @param toString String representation of the hash function.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,concatenating,com.google.common.hash.Hashing:concatenating(java.lang.Iterable),774,783,"/**
 * Concatenates multiple hash functions into a single hash function.
 * @param hashFunctions Iterable of hash functions to concatenate.
 * @return A new ConcatenatedHashFunction.
 */
","* Returns a hash function which computes its hash code by concatenating the hash codes of the
   * underlying hash functions together. This can be useful if you need to generate hash codes of a
   * specific length.
   *
   * <p>For example, if you need 1024-bit hash codes, you could join two {@link Hashing#sha512} hash
   * functions together: {@code Hashing.concatenating(Hashing.sha512(), Hashing.sha512())}.
   *
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction:<init>(int,int,long,long)",55,64,"/**
 * Initializes SipHash function with provided constants and keys.
 * @param c Compression rounds, must be positive.
 * @param d Finalization rounds, must be positive.
 * @param k0 First 64-bit key.
 * @param k1 Second 64-bit key.
 */
","* @param c the number of compression rounds (must be positive)
   * @param d the number of finalization rounds (must be positive)
   * @param k0 the first half of the key
   * @param k1 the second half of the key",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,"com.google.common.io.FileBackedOutputStream:<init>(int,boolean)",119,154,"/**
 * Creates a FileBackedOutputStream with given threshold and finalize behavior.
 * @param fileThreshold Threshold for writing to file.
 * @param resetOnFinalize Resets on finalize if true.
 */
","* Creates a new instance that uses the given file threshold, and optionally resets the data when
   * the {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @param resetOnFinalize if true, the {@link #reset} method will be called when the {@link
   *     ByteSource} returned by {@link #asByteSource} is finalized.
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,<init>,"com.google.common.net.InetAddresses$TeredoInfo:<init>(java.net.Inet4Address,java.net.Inet4Address,int,int)",768,781,"/**
 * Constructs a TeredoInfo object.
 * @param server Server address, or ANY4 if null.
 * @param client Client address, or ANY4 if null.
 * @param port Port number (0-65535).
 * @param flags Flags (0-65535).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getInet4Address,com.google.common.net.InetAddresses:getInet4Address(byte[]),124,132,"/**
 * Creates an Inet4Address from a byte array.
 * @param bytes 4-byte array representing IPv4 address
 * @return Inet4Address object
 */
","* Returns an {@link Inet4Address}, given a byte array representation of the IPv4 address.
   *
   * @param bytes byte array representing an IPv4 address (should be of length 4)
   * @return {@link Inet4Address} corresponding to the supplied byte array
   * @throws IllegalArgumentException if a valid {@link Inet4Address} can not be created",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,ensureCapacity,"com.google.common.primitives.Booleans:ensureCapacity(boolean[],int,int)",272,276,"/**
 * Ensures array has at least minLength, padding with extra space.
 * @param array input array
 * @param minLength minimum length
 * @param padding extra space to add
 * @return array with ensured capacity
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,ensureCapacity,"com.google.common.primitives.Bytes:ensureCapacity(byte[],int,int)",201,205,"/**
 * Ensures array capacity is at least minLength + padding.
 * @param array input byte array
 * @param minLength minimum required length
 * @param padding padding to add if array is too short
 * @return The original array or a copy with increased capacity.
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,ensureCapacity,"com.google.common.primitives.Chars:ensureCapacity(char[],int,int)",356,360,"/**
 * Returns array with ensured capacity, copies if needed.
 * @param array Input array
 * @param minLength Minimum required length
 * @param padding Padding to add if needed
 * @return char array with ensured capacity
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,ensureCapacity,"com.google.common.primitives.Doubles:ensureCapacity(double[],int,int)",348,352,"/**
 * Ensures array capacity, copies if needed.
 * @param array Input array.
 * @param minLength Minimum required length.
 * @param padding Padding to add if needed.
 * @return The array, possibly with increased capacity.
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,ensureCapacity,"com.google.common.primitives.Floats:ensureCapacity(float[],int,int)",345,349,"/**
 * Ensures array has at least minLength + padding.
 * @param array Input array.
 * @param minLength Minimum length required.
 * @param padding Padding to add if needed.
 * @return The array, potentially resized.
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,ensureCapacity,"com.google.common.primitives.Ints:ensureCapacity(int[],int,int)",416,420,"/**
 * Ensures array capacity. Returns original if sufficient,
 * otherwise creates a copy with minLength + padding.
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,ensureCapacity,"com.google.common.primitives.Longs:ensureCapacity(long[],int,int)",495,499,"/**
 * Ensures array has at least minLength + padding.
 * Returns original array if already large enough.
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,ensureCapacity,"com.google.common.primitives.Shorts:ensureCapacity(short[],int,int)",406,410,"/**
 * Ensures array has at least minLength + padding.
 * @param array Input array.
 * @param minLength Minimum length required.
 * @param padding Padding to add if needed.
 * @return The array (or a copy with increased capacity).
 */
","* Returns an array containing the same values as {@code array}, but guaranteed to be of a
   * specified minimum length. If {@code array} already has a length of at least {@code minLength},
   * it is returned directly. Otherwise, a new array of size {@code minLength + padding} is
   * returned, containing the values of {@code array}, and zeroes in the remaining places.
   *
   * @param array the source array
   * @param minLength the minimum length the returned array must guarantee
   * @param padding an extra amount to ""grow"" the array by if growth is necessary
   * @throws IllegalArgumentException if {@code minLength} or {@code padding} is negative
   * @return an array containing the values of {@code array}, with guaranteed minimum length {@code
   *     minLength}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,checkPermits,com.google.common.util.concurrent.RateLimiter:checkPermits(int),493,495,"/**
 * Validates that the provided number of permits is positive.
 * @param permits The number of permits to validate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkNonNegative,com.google.common.graph.Graphs:checkNonNegative(long),648,652,"/**
 * Checks if the value is non-negative; throws IAE if not.
 * @param value the value to check
 * @return the original value
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,checkPositive,com.google.common.graph.Graphs:checkPositive(long),660,664,"/**
 * Checks if the value is positive; throws IAE if not.
 * @param value The value to check.
 * @return The value if positive.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,checkedCast,com.google.common.primitives.Chars:checkedCast(long),85,89,"/**
 * Casts a long to char, ensuring it's within the valid range.
 */","* Returns the {@code char} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code char} type
   * @return the {@code char} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Character#MAX_VALUE}
   *     or less than {@link Character#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,checkedCast,com.google.common.primitives.Ints:checkedCast(long),95,99,"/**
 * Casts a long to int, checking for potential overflow.
 * @param value The long value to cast.
 * @return The casted int value.
 */
","* Returns the {@code int} value that is equal to {@code value}, if possible.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Use {@link
   * Math#toIntExact(long)} instead, but be aware that that method throws {@link
   * ArithmeticException} rather than {@link IllegalArgumentException}.
   *
   * @param value any value in the range of the {@code int} type
   * @return the {@code int} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Integer#MAX_VALUE} or
   *     less than {@link Integer#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,checkNoOverflow,com.google.common.primitives.Longs:checkNoOverflow(long),268,274,"/**
 * Checks for integer overflow and casts long to int.
 * @param result The long value to check for overflow.
 * @return The casted int value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,checkedCast,com.google.common.primitives.Shorts:checkedCast(long),90,94,"/**
 * Casts a long to a short, checking for potential overflow.
 * @param value The long value to cast.
 * @return The short representation of the value.
 */
","* Returns the {@code short} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code short} type
   * @return the {@code short} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Short#MAX_VALUE} or
   *     less than {@link Short#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,checkedCast,com.google.common.primitives.SignedBytes:checkedCast(long),57,61,"/**
 * Casts a long to a byte, checking for out-of-range values.
 * @param value the long value to cast
 * @return the byte representation of the value
 */
","* Returns the {@code byte} value that is equal to {@code value}, if possible.
   *
   * @param value any value in the range of the {@code byte} type
   * @return the {@code byte} value that equals {@code value}
   * @throws IllegalArgumentException if {@code value} is greater than {@link Byte#MAX_VALUE} or
   *     less than {@link Byte#MIN_VALUE}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,checkedCast,com.google.common.primitives.UnsignedBytes:checkedCast(long),97,101,"/**
 * Casts a long to a byte, checking for out-of-range values.
 * @param value long value to cast; must be within byte range.
 * @return byte representation of the value.
 */
","* Returns the {@code byte} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 255 inclusive
   * @return the {@code byte} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than 255",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,checkedCast,com.google.common.primitives.UnsignedInts:checkedCast(long),93,96,"/**
 * Casts a long to an int after checking range.
 * @param value long value to cast; must be within int range.
 * @return int value.
 */
","* Returns the {@code int} value that, when treated as unsigned, is equal to {@code value}, if
   * possible.
   *
   * @param value a value between 0 and 2<sup>32</sup>-1 inclusive
   * @return the {@code int} value that, when treated as unsigned, equals {@code value}
   * @throws IllegalArgumentException if {@code value} is negative or greater than or equal to
   *     2<sup>32</sup>
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(long,long,java.util.concurrent.TimeUnit)",143,155,"/**
 * Creates a scheduler that executes tasks with a fixed delay.
 * @param initialDelay Initial delay before the first task.
 * @param delay Recurring delay between tasks.
 * @param unit Time unit for initialDelay and delay.
 * @return Scheduler for fixed-delay task execution.
 */
","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @param unit the time unit of the initialDelay and delay parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(long,long,java.util.concurrent.TimeUnit)",178,190,"/**
 * Creates a fixed-rate schedule for scheduling tasks.
 * @param initialDelay Initial delay before first execution.
 * @param period Period between executions.
 * @param unit Time unit for the delay and period.
 * @return A Scheduler instance.
 */
","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @param unit the time unit of the initialDelay and period parameters",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,checkPositiveTimeout,com.google.common.util.concurrent.SimpleTimeLimiter:checkPositiveTimeout(long),279,281,"/**
 * Validates timeoutDuration is positive; throws exception if not.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,constrainToRange,"com.google.common.primitives.Chars:constrainToRange(char,char,char)",266,269,"/**
 * Constrains a char value to be within a specified range [min, max].
 */
","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * @param value the {@code char} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,constrainToRange,"com.google.common.primitives.Longs:constrainToRange(long,long,long)",240,243,"/**
 * Constrains a value within a specified range [min, max].
 * @param value The value to constrain.
 * @param min The minimum value.
 * @param max The maximum value.
 */
","* Returns the value nearest to {@code value} which is within the closed range {@code [min..max]}.
   *
   * <p>If {@code value} is within the range {@code [min..max]}, {@code value} is returned
   * unchanged. If {@code value} is less than {@code min}, {@code min} is returned, and if {@code
   * value} is greater than {@code max}, {@code max} is returned.
   *
   * <p><b>Java 21+ users:</b> Use {@code Math.clamp} instead. Note that that method is capable of
   * constraining a {@code long} input to an {@code int} range.
   *
   * @param value the {@code long} value to constrain
   * @param min the lower bound (inclusive) of the range to constrain {@code value} to
   * @param max the upper bound (inclusive) of the range to constrain {@code value} to
   * @throws IllegalArgumentException if {@code min > max}
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$KeyStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",383,388,"/**
 * Sets key strength for a CacheBuilderSpec.
 * @param spec CacheBuilderSpec to update
 * @param key Key associated with the strength
 * @param value Ignored, must be null
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$ValueStrengthParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",399,406,"/**
 * Sets value strength for a cache key.
 * @param spec CacheBuilderSpec to update.
 * @param key Cache key.
 * @param value Value is ignored, must be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,add,"com.google.common.collect.Multisets$FilteredMultiset:add(java.lang.Object,int)",374,379,"/**
 * Adds an element with specified occurrences to the collection.
 * @param element Element to add.
 * @param occurrences Number of occurrences to add.
 * @return The number of elements in the collection after adding.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,getResource,"com.google.common.io.Resources:getResource(java.lang.Class,java.lang.String)",205,211,"/**
 * Retrieves a resource URL.
 * @param contextClass Class to search relative to.
 * @param resourceName Resource path.
 * @return URL of the resource.
 */
","* Given a {@code resourceName} that is relative to {@code contextClass}, returns a {@code URL}
   * pointing to the named resource.
   *
   * @throws IllegalArgumentException if the resource is not found",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,disallowPrimitiveType,"com.google.common.reflect.Types:disallowPrimitiveType(java.lang.reflect.Type[],java.lang.String)",525,532,"/**
 * Checks if any type in the array is a primitive type, throws error if found.
 * @param types Array of types to check.
 * @param usedAs Context in which the type is used.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,"com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State,boolean,java.lang.Throwable)",609,624,"/**
* Creates a StateSnapshot with the given state, shutdown flag, and failure.
* @param state Internal state of the component.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,checkNoDuplicate,"com.google.common.collect.RegularImmutableTable:checkNoDuplicate(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",196,204,"/**
 * Verifies no duplicate key exists. Throws exception if duplicate.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @param existingValue Existing value, null if new.
 * @param newValue New value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,start,com.google.common.base.Stopwatch:start(),163,169,"/**
 * Starts the stopwatch. Returns the stopwatch instance for chaining.
 */
","* Starts the stopwatch.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already running.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,stop,com.google.common.base.Stopwatch:stop(),178,185,"/**
 * Stops the stopwatch and returns it.
 * Returns: This stopwatch instance.
 */
","* Stops the stopwatch. Future reads will return the fixed duration that had elapsed up to this
   * point.
   *
   * @return this {@code Stopwatch} instance
   * @throws IllegalStateException if the stopwatch is already stopped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkNonLoadingCache,com.google.common.cache.CacheBuilder:checkNonLoadingCache(),1053,1055,"/**
 * Verifies refreshAfterWrite is used with a LoadingCache.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,checkWeightWithWeigher,com.google.common.cache.CacheBuilder:checkWeightWithWeigher(),1057,1070,"/**
 * Validates maximumWeight based on weigher and strictParsing.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:remove(),1470,1477,"/**
 * Removes the last element returned by the iterator.
 * Requires a prior call to {@link #next()}.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectPreconditions.java,checkRemove,com.google.common.collect.CollectPreconditions:checkRemove(boolean),62,64,"/**
 * Verifies removal is allowed; throws exception if not.
 * @param canRemove True if removal is permitted, false otherwise.
 */","* Precondition tester for {@code Iterator.remove()} that throws an exception with a consistent
   * error message.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,orderEntriesByValue,com.google.common.collect.ImmutableMap$Builder:orderEntriesByValue(java.util.Comparator),513,518,"/**
 * Sets the value comparator for ordering entries.
 * @param valueComparator Comparator for values; null resets.
 * @return this Builder instance.
 */
","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$PeekingImpl:remove(),1209,1213,"/**
 * Removes the current element from the iterator.
 * Requires that peek() hasn't been called previously.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$ValueForKeyIterator:remove(),546,557,"/**
 * Removes the last returned element from the list.
 * Requires a prior call to next() or previous().
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isEvenLevel,com.google.common.collect.MinMaxPriorityQueue:isEvenLevel(int),491,496,"/**
 * Checks if the given index represents an even level.
 * @param index The index to check. Must be non-negative.
 * @return True if the index is at an even level, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,checkNotDone,com.google.common.hash.MacHashFunction$MacHasher:checkNotDone(),130,132,"/**
* Ensures the Hasher hasn't been used already.
* Throws IllegalStateException if it has.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,checkNotDone,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:checkNotDone(),157,159,"/**
 * Verifies that the Hasher has not been used before (hash() called).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,initialCapacity,com.google.common.cache.CacheBuilder:initialCapacity(int),411,420,"/**
 * Sets the initial capacity of the cache.
 * @param initialCapacity The initial capacity (>= 0).
 * @return This CacheBuilder for chaining.
 */
","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,concurrencyLevel,com.google.common.cache.CacheBuilder:concurrencyLevel(int),457,466,"/**
 * Sets the concurrency level for the cache builder.
 * @param concurrencyLevel The desired concurrency level (must be > 0).
 * @return This CacheBuilder for chaining.
 */
","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the cache
   * at a time, but since read operations and cache loading computations can proceed concurrently,
   * this still yields higher concurrency than full synchronization.
   *
   * <p>Defaults to 4. <b>Note:</b>The default may change in the future. If you care about this
   * value, you should always choose it explicitly.
   *
   * <p>The current implementation uses the concurrency level to create a fixed number of hashtable
   * segments, each governed by its own write lock. The segment lock is taken once for each explicit
   * write, and twice for each cache loading computation (once prior to loading the new value, and
   * once after loading completes). Much internal cache management is performed at the segment
   * granularity. For example, access queues and write queues are kept per segment when they are
   * required by the selected eviction algorithm. As such, when writing unit tests it is not
   * uncommon to specify {@code concurrencyLevel(1)} in order to achieve more deterministic eviction
   * behavior.
   *
   * <p>Note that future implementations may abandon segment locking in favor of more advanced
   * concurrency controls.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,initialCapacity,com.google.common.collect.MapMaker:initialCapacity(int),144,153,"/**
 * Sets the initial capacity of the map.
 * @param initialCapacity The initial capacity (>= 0).
 * @return A builder with the specified initial capacity.
 */
","* Sets the minimum total size for the internal hash tables. For example, if the initial capacity
   * is {@code 60}, and the concurrency level is {@code 8}, then eight segments are created, each
   * having a hash table of size eight. Providing a large enough estimate at construction time
   * avoids the need for expensive resizing operations later, but setting this value unnecessarily
   * high wastes memory.
   *
   * @throws IllegalArgumentException if {@code initialCapacity} is negative
   * @throws IllegalStateException if an initial capacity was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,concurrencyLevel,com.google.common.collect.MapMaker:concurrencyLevel(int),178,187,"/**
 * Sets the concurrency level for the MapMaker.
 * @param concurrencyLevel The desired concurrency level (must be > 0).
 * @return This MapMaker builder.
 */
","* Guides the allowed concurrency among update operations. Used as a hint for internal sizing. The
   * table is internally partitioned to try to permit the indicated number of concurrent updates
   * without contention. Because assignment of entries to these partitions is not necessarily
   * uniform, the actual concurrency observed may vary. Ideally, you should choose a value to
   * accommodate as many threads as will ever concurrently modify the table. Using a significantly
   * higher value than you need can waste space and time, and a significantly lower value can lead
   * to thread contention. But overestimates and underestimates within an order of magnitude do not
   * usually have much noticeable impact. A value of one permits only one thread to modify the map
   * at a time, but since read operations can proceed concurrently, this still yields higher
   * concurrency than full synchronization. Defaults to 4.
   *
   * <p><b>Note:</b> Prior to Guava release 9.0, the default was 16. It is possible the default will
   * change again in the future. If you care about this value, you should always choose it
   * explicitly.
   *
   * @throws IllegalArgumentException if {@code concurrencyLevel} is nonpositive
   * @throws IllegalStateException if a concurrency level was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asInt,com.google.common.hash.HashCode$BytesHashCode:asInt(),267,277,"/**
 * Converts the byte array to an integer.
 * Requires at least 4 bytes in the array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumSize,com.google.common.cache.CacheBuilder:maximumSize(long),493,505,"/**
 * Sets the maximum size of the cache.
 * @param maximumSize The maximum number of entries allowed.
 * @return This CacheBuilder for chaining.
 */
","* Specifies the maximum number of entries the cache may contain.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own size to approximately
   * {@code maximumSize / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumSize} is zero, elements will be evicted immediately after being loaded into
   * cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumWeight}.
   *
   * @param maximumSize the maximum size of the cache
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumSize} is negative
   * @throws IllegalStateException if a maximum size or weight was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,maximumWeight,com.google.common.cache.CacheBuilder:maximumWeight(long),534,546,"/**
 * Sets the maximum weight for the cache.
 * @param maximumWeight The maximum weight allowed (must be >= 0)
 * @return This CacheBuilder for chaining.
 */
","* Specifies the maximum weight of entries the cache may contain. Weight is determined using the
   * {@link Weigher} specified with {@link #weigher}, and use of this method requires a
   * corresponding call to {@link #weigher} prior to calling {@link #build}.
   *
   * <p>Note that the cache <b>may evict an entry before this limit is exceeded</b>. For example, in
   * the current implementation, when {@code concurrencyLevel} is greater than {@code 1}, each
   * resulting segment inside the cache <i>independently</i> limits its own weight to approximately
   * {@code maximumWeight / concurrencyLevel}.
   *
   * <p>When eviction is necessary, the cache evicts entries that are less likely to be used again.
   * For example, the cache may evict an entry because it hasn't been used recently or very often.
   *
   * <p>If {@code maximumWeight} is zero, elements will be evicted immediately after being loaded
   * into cache. This can be useful in testing, or to disable caching temporarily.
   *
   * <p>Note that weight is only used to determine whether the cache is over capacity; it has no
   * effect on selecting which entry should be evicted next.
   *
   * <p>This feature cannot be used in conjunction with {@link #maximumSize}.
   *
   * @param maximumWeight the maximum total weight of entries the cache may contain
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code maximumWeight} is negative
   * @throws IllegalStateException if a maximum weight or size was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weigher,com.google.common.cache.CacheBuilder:weigher(com.google.common.cache.Weigher),577,594,"/**
 * Sets the weigher function for the cache.
 * @param weigher The function to calculate the weight of an entry.
 * @return {@code this} CacheBuilder for chaining.
 */
","* Specifies the weigher to use in determining the weight of entries. Entry weight is taken into
   * consideration by {@link #maximumWeight(long)} when determining which entries to evict, and use
   * of this method requires a corresponding call to {@link #maximumWeight(long)} prior to calling
   * {@link #build}. Weights are measured and recorded when entries are inserted into the cache, and
   * are thus effectively static during the lifetime of a cache entry.
   *
   * <p>When the weight of an entry is zero it will not be considered for size-based eviction
   * (though it still may be evicted by other means).
   *
   * <p><b>Important note:</b> Instead of returning <em>this</em> as a {@code CacheBuilder}
   * instance, this method returns {@code CacheBuilder<K1, V1>}. From this point on, either the
   * original reference or the returned reference may be used to complete configuration and build
   * the cache, but only the ""generic"" one is type-safe. That is, it will properly prevent you from
   * building caches whose key or value types are incompatible with the types accepted by the
   * weigher already provided; the {@code CacheBuilder} type cannot do this. For best results,
   * simply use the standard method-chaining idiom, as illustrated in the documentation at top,
   * configuring a {@code CacheBuilder} and building your {@link Cache} all in a single statement.
   *
   * <p><b>Warning:</b> if you ignore the above advice, and use this {@code CacheBuilder} to build a
   * cache whose key or value type is incompatible with the weigher, you will likely experience a
   * {@link ClassCastException} at some <i>undefined</i> point in the future.
   *
   * @param weigher the weigher to use in calculating the weight of cache entries
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if a weigher was already set or {@link #maximumSize(long)} was
   *     previously called
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,"com.google.common.cache.CacheBuilder:expireAfterWrite(long,java.util.concurrent.TimeUnit)",753,763,"/**
 * Sets the duration after which writes expire.
 * @param duration The duration after which writes expire.
 * @param unit The time unit of the duration.
 */
","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,"com.google.common.cache.CacheBuilder:expireAfterAccess(long,java.util.concurrent.TimeUnit)",831,841,"/**
 * Sets the duration after which accessed entries expire.
 * @param duration The duration after which to expire.
 * @param unit The time unit of the duration.
 */
","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}. So, for
   * example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for the
   * entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #expireAfterAccess(Duration)} instead.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,"com.google.common.cache.CacheBuilder:refreshAfterWrite(long,java.util.concurrent.TimeUnit)",916,925,"/**
 * Sets the duration after which a write refreshes the cache.
 * @param duration Refresh duration.
 * @param unit Time unit of the duration.
 * @return This CacheBuilder for chaining.
 */
","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * and immediately return the new value if the returned future is complete, and the old value
   * otherwise.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * <p>If you can represent the duration as a {@link Duration} (which should be preferred when
   * feasible), use {@link #refreshAfterWrite(Duration)} instead.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @param unit the unit that {@code duration} is expressed in
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,keyEquivalence,com.google.common.cache.CacheBuilder:keyEquivalence(com.google.common.base.Equivalence),366,372,"/**
 * Sets the key equivalence function.
 * @param equivalence Equivalence function for keys.
 * @return {@code this} for chaining.
 */
","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine key equality when
   * {@link #weakKeys} is specified, and {@link Equivalence#equals()} otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,valueEquivalence,com.google.common.cache.CacheBuilder:valueEquivalence(com.google.common.base.Equivalence),387,394,"/**
 * Sets the equivalence strategy for comparing values.
 * @param equivalence Equivalence function for values.
 * @return {@code this} for chaining.
 */
","* Sets a custom {@code Equivalence} strategy for comparing values.
   *
   * <p>By default, the cache uses {@link Equivalence#identity} to determine value equality when
   * {@link #weakValues} or {@link #softValues} is specified, and {@link Equivalence#equals()}
   * otherwise.
   *
   * @return this {@code CacheBuilder} instance (for chaining)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setKeyStrength,com.google.common.cache.CacheBuilder:setKeyStrength(com.google.common.cache.LocalCache$Strength),631,636,"/**
 * Sets the key strength policy.
 * @param strength The key strength policy to apply.
 * @return This CacheBuilder for chaining.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,setValueStrength,com.google.common.cache.CacheBuilder:setValueStrength(com.google.common.cache.LocalCache$Strength),691,696,"/**
 * Sets the strength for values in the cache.
 * @param strength Strength to use for values; returns builder.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,keyEquivalence,com.google.common.collect.MapMaker:keyEquivalence(com.google.common.base.Equivalence),121,128,"/**
 * Sets the key equivalence function.
 * @param equivalence The equivalence function to use.
 * @return The MapMaker builder for chaining.
 */
","* Sets a custom {@code Equivalence} strategy for comparing keys.
   *
   * <p>By default, the map uses {@link Equivalence#identity} to determine key equality when {@link
   * #weakKeys} is specified, and {@link Equivalence#equals()} otherwise. The only place this is
   * used is in {@link Interners.WeakInterner}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setKeyStrength,com.google.common.collect.MapMaker:setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength),210,219,"/**
 * Sets the key strength.
 * @param strength The key strength to set (e.g., WEAK, STRONG).
 * @return {@code this} for chaining.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,setValueStrength,com.google.common.collect.MapMaker:setValueStrength(com.google.common.collect.MapMakerInternalMap$Strength),257,266,"/**
 * Sets the strength for value ordering.
 * @param strength The strength to set (e.g., STRONG, WEAK).
 * @return This MapMaker builder.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(),124,134,"/**
 * Constructs a TypeToken from the runtime type.
 * Throws exception if the type is a type variable.
 */
","* Constructs a new type token of {@code T}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * TypeToken<List<String>> t = new TypeToken<List<String>>() {};
   * }",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService$StateSnapshot:failureCause(),640,647,"/**
 * Returns the cause of the failure, if the service has failed.
 */
",* @see Service#failureCause(),,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,doTransform,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:doTransform(com.google.common.util.concurrent.AsyncFunction,java.lang.Object)",222,233,"/**
* Transforms input using AsyncFunction and returns a ListenableFuture.
* @param function AsyncFunction to apply to the input
* @param input Input value
* @return ListenableFuture containing the transformed result
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,runInterruptibly,com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask:runInterruptibly(),163,171,"/**
 * Executes the AsyncCallable and returns a ListenableFuture.
 * @return ListenableFuture containing the result of the call.
 * @throws Exception if an error occurs during execution.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,runInterruptibly,com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask:runInterruptibly(),161,168,"/**
 * Executes the AsyncCallable and returns a ListenableFuture.
 * @return ListenableFuture containing the result of the callable.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int,java.lang.String)",1365,1372,"/**
 * Checks if an index is within the bounds of a collection size.
 * @param index Index to check.
 * @param size Collection size.
 * @param desc Description for exception message.
 */","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int,java.lang.String)",1414,1421,"/**
 * Validates index is within bounds.
 * @param index index to check
 * @param size size of the collection
 * @param desc description of the index
 * @return validated index
 */
","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @param desc the text to use to describe this index in an error message
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,badPositionIndexes,"com.google.common.base.Preconditions:badPositionIndexes(int,int,int)",1452,1461,"/**
 * Checks index validity and formats error message if invalid.
 * @param start start index
 * @param end end index
 * @param size array size
 * @return Error message string if indexes are invalid
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysTrue,com.google.common.base.Predicates:alwaysTrue(),51,53,"/**
 * Returns a predicate that always returns true, regardless of input.
 */
","* Returns a predicate that always evaluates to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> true}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,alwaysFalse,com.google.common.base.Predicates:alwaysFalse(),61,63,"/**
 * Returns a predicate that always returns false, regardless of input.
 */
","* Returns a predicate that always evaluates to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> false}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,isNull,com.google.common.base.Predicates:isNull(),73,75,"/**
 * Returns a predicate that checks if an object is null.
 */
","* Returns a predicate that evaluates to {@code true} if the object reference being tested is
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x == null} or {@code Objects::isNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,notNull,com.google.common.base.Predicates:notNull(),85,87,"/**
 * Returns a predicate that checks if an object is not null.
 */
","* Returns a predicate that evaluates to {@code true} if the object reference being tested is not
   * null.
   *
   * <p><b>Discouraged:</b> Prefer using either {@code x -> x != null} or {@code Objects::nonNull},
   * but note that lambdas and method references do not have human-readable {@link #toString()}
   * representations and are not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,"com.google.common.base.Predicates:and(com.google.common.base.Predicate,com.google.common.base.Predicate)",134,137,"/**
 * Combines two predicates to return a predicate that returns true
 * if both input predicates are true.
 */
","* Returns a predicate that evaluates to {@code true} if both of its components evaluate to {@code
   * true}. The components are evaluated in order, and evaluation will be ""short-circuited"" as soon
   * as a false predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,"com.google.common.base.Predicates:or(com.google.common.base.Predicate,com.google.common.base.Predicate)",174,177,"/**
 * Combines two predicates with a logical OR operation.
 * @param first The first predicate.
 * @param second The second predicate.
 * @return A combined predicate that returns true if either input is true.
 */
","* Returns a predicate that evaluates to {@code true} if either of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,matches,com.google.common.base.SmallCharMatcher:matches(char),111,133,"/**
* Checks if the character 'c' is present in the filter table.
* @param c the character to check
* @return true if 'c' is found, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,<init>,com.google.common.base.Splitter:<init>(com.google.common.base.Splitter$Strategy),108,110,"/**
 * Constructor using a strategy.
 * @param strategy The splitting strategy to use.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,omitEmptyStrings,com.google.common.base.Splitter:omitEmptyStrings(),306,308,"/**
 * Returns a new splitter that omits empty strings.
 * Uses the existing strategy, trimmer, and limit.
 */
","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically omits
   * empty strings from the results. For example, {@code
   * Splitter.on(',').omitEmptyStrings().split("",a,,,b,c,,"")} returns an iterable containing only
   * {@code [""a"", ""b"", ""c""]}.
   *
   * <p>If either {@code trimResults} option is also specified when creating a splitter, that
   * splitter always trims results first before checking for emptiness. So, for example, {@code
   * Splitter.on(':').omitEmptyStrings().trimResults().split("": : : "")} returns an empty iterable.
   *
   * <p>Note that it is ordinarily not possible for {@link #split(CharSequence)} to return an empty
   * iterable, but when using this option, it can (if the input sequence consists of nothing but
   * separators).
   *
   * @return a splitter with the desired configuration",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,limit,com.google.common.base.Splitter:limit(int),326,329,"/**
 * Limits the number of items returned by the splitter.
 * @param maxItems The maximum number of items to return.
 * @return A new Splitter with the specified limit.
 */
","* Returns a splitter that behaves equivalently to {@code this} splitter but stops splitting after
   * it reaches the limit. The limit defines the maximum number of items returned by the iterator,
   * or the maximum size of the list returned by {@link #splitToList}.
   *
   * <p>For example, {@code Splitter.on(',').limit(3).split(""a,b,c,d"")} returns an iterable
   * containing {@code [""a"", ""b"", ""c,d""]}. When omitting empty strings, the omitted strings do not
   * count. Hence, {@code Splitter.on(',').limit(3).omitEmptyStrings().split(""a,,,b,,,c,d"")} returns
   * an iterable containing {@code [""a"", ""b"", ""c,d""]}. When trim is requested, all entries are
   * trimmed, including the last. Hence {@code Splitter.on(',').limit(3).trimResults().split("" a , b
   * , c , d "")} results in {@code [""a"", ""b"", ""c , d""]}.
   *
   * @param maxItems the maximum number of items returned
   * @return a splitter with the desired configuration
   * @since 9.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(com.google.common.base.CharMatcher),355,358,"/**
 * Creates a new Splitter with the given trimmer.
 * @param trimmer CharMatcher to trim strings.
 * @return New Splitter instance.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToList,com.google.common.base.Splitter:splitToList(java.lang.CharSequence),399,410,"/**
 * Splits a CharSequence into a list of strings.
 * @param sequence The sequence to split.
 * @return An unmodifiable list of strings.
 */
","* Splits {@code sequence} into string components and returns them as an immutable list. If you
   * want an {@link Iterable} which may be lazily evaluated, use {@link #split(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return an immutable list of the segments split from the parameter
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaIoCreator:createTempDir(),259,280,"/**
 * Creates a temporary directory.
 * Attempts to create a unique directory within a base directory.
 * @return The created temporary directory.
 * @throws IllegalStateException if directory creation fails.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempDir,com.google.common.io.TempFileCreator$JavaNioCreator:createTempDir(),121,130,"/**
 * Creates a temporary directory.
 * @return File representing the created temporary directory.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,createTempFile,com.google.common.io.TempFileCreator$JavaNioCreator:createTempFile(java.lang.String),132,140,"/**
 * Creates a temporary file with a given prefix.
 * @param prefix file name prefix
 * @return File object representing the created temp file
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/StandardSystemProperty.java,toString,com.google.common.base.StandardSystemProperty:toString(),160,163,"/**
 * Returns a string representation of the key-value pair.
 */",Returns a string representation of this system property.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,<init>,com.google.common.base.Stopwatch:<init>(),141,143,"/**
 * Initializes the Stopwatch with a system-based ticker.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getTicker,com.google.common.cache.CacheBuilder:getTicker(boolean),949,954,"/**
 * Returns a Ticker object. Returns system ticker if recordsTime.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(java.util.concurrent.TimeUnit),216,218,"/**
 * Returns the elapsed time in the specified time unit.
 * @param desiredUnit The time unit to convert to.
 * @return The elapsed time in the desired unit.
 */
","* Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit,
   * with any fraction rounded down.
   *
   * <p><b>Note:</b> the overhead of measurement can be more than a microsecond, so it is generally
   * not useful to specify {@link TimeUnit#NANOSECONDS} precision here.
   *
   * <p>It is generally not a good idea to use an ambiguous, unitless {@code long} to represent
   * elapsed time. Therefore, we recommend using {@link #elapsed()} instead, which returns a
   * strongly-typed {@code Duration} instance.
   *
   * @since 14.0 (since 10.0 as {@code elapsedTime()})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,elapsed,com.google.common.base.Stopwatch:elapsed(),226,231,"/**
 * Returns the elapsed duration as a Duration object.
 * Uses the elapsedNanos() value to create the Duration.
 */
","* Returns the current elapsed time shown on this stopwatch as a {@link Duration}. Unlike {@link
   * #elapsed(TimeUnit)}, this method does not lose any precision due to rounding.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,toString,com.google.common.base.Stopwatch:toString(),234,243,"/**
 * Returns a string representation of the duration in a user-friendly format.
 */
",Returns a string representation of the current elapsed time.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,nullToEmpty,com.google.common.base.Strings:nullToEmpty(java.lang.String),45,47,"/**
 * Replaces a null string with an empty string.
 * @param string The string to check, may be null.
 * @return An empty string if input is null, otherwise the string.
 */
","* Returns the given string if it is non-null; the empty string otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is non-null; {@code """"} if it is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonPrefix,"com.google.common.base.Strings:commonPrefix(java.lang.CharSequence,java.lang.CharSequence)",183,196,"/**
 * Finds the longest common prefix of two CharSequences.
 * @param a First CharSequence
 * @param b Second CharSequence
 * @return The common prefix as a String
 */
","* Returns the longest string {@code prefix} such that {@code a.toString().startsWith(prefix) &&
   * b.toString().startsWith(prefix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common prefix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,commonSuffix,"com.google.common.base.Strings:commonSuffix(java.lang.CharSequence,java.lang.CharSequence)",205,219,"/**
 * Finds the longest common suffix of two CharSequences.
 * @param a first CharSequence
 * @param b second CharSequence
 * @return The longest common suffix.
 */
","* Returns the longest string {@code suffix} such that {@code a.toString().endsWith(suffix) &&
   * b.toString().endsWith(suffix)}, taking care not to split surrogate pairs. If {@code a} and
   * {@code b} have no common suffix, returns the empty string.
   *
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,ofInstance,com.google.common.base.Suppliers:ofInstance(java.lang.Object),354,357,"/**
 * Creates a Supplier that returns the given instance.
 * @param <T> The type of the instance.
 * @param instance The instance to be returned by the Supplier.
 * @return A Supplier that returns the given instance.
 */
","* Returns a supplier that always supplies {@code instance}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code () -> instance}, but note that lambdas do not have
   * human-readable {@link #toString()} representations and are not serializable. If you need a
   * supplier that is serializable, use {@code (Supplier<T> & Serializable) () -> instance}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ticker.java,<init>,com.google.common.base.Ticker$1:<init>(),33,33,"/**
 * Default constructor for the Ticker class. Protected access.
 */
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,<init>,com.google.common.cache.CacheBuilder$3:<init>(),311,311,"/**
 * Private constructor to prevent direct instantiation of CacheBuilder.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLengthGeneral,"com.google.common.base.Utf8:encodedLengthGeneral(java.lang.CharSequence,int)",78,98,"/**
 * Calculates the UTF-8 encoded length of a CharSequence.
 * @param sequence CharSequence to encode.
 * @param start Start index for encoding.
 * @return UTF-8 encoded length.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,com.google.common.base.Verify:verify(boolean),98,102,"/**
 * Throws VerifyException if expression is false; otherwise, does nothing.
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with no
   * message otherwise.
   *
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char)",136,140,"/**
 * Throws VerifyException if expression is false.
 * @param expression boolean to verify
 * @param errorMessageTemplate Error message template
 * @param p1 Parameter for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int)",150,154,"/**
 * Throws VerifyException if expression is false, with formatted error.
 * @param expression boolean to check
 * @param errorMessageTemplate Error message template
 * @param p1 Parameter for error message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long)",164,168,"/**
 * Throws VerifyException if expression is false, with error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1 parameter for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object)",119,126,"/**
 * Verifies an expression; throws VerifyException if false.
 * @param expression Boolean to verify.
 * @param errorMessageArgs Arguments for error message.
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * @param expression a boolean expression
   * @param errorMessageTemplate a template for the exception message should the check fail. The
   *     message is formed by replacing each {@code %s} placeholder in the template with an
   *     argument. These are matched by position - the first {@code %s} gets {@code
   *     errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in
   *     square braces. Unmatched placeholders will be left as-is.
   * @param errorMessageArgs the arguments to be substituted into the message template. Arguments
   *     are converted to strings using {@link String#valueOf(Object)}.
   * @throws VerifyException if {@code expression} is {@code false}
   * @see Preconditions#checkState Preconditions.checkState()",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,char)",192,196,"/**
 * Verifies an expression; throws VerifyException if false.
 * @param expression boolean to check
 * @param errorMessageTemplate error message template
 * @param p1, p2 parameters for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,char)",206,210,"/**
 * Throws VerifyException if expression is false, with formatted error.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1 parameter 1 for formatting
 * @param p2 parameter 2 for formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,char)",220,224,"/**
 * Throws VerifyException if expression is false, with formatted error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1 parameter 1 for message formatting
 * @param p2 parameter 2 for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,char)",234,239,"/**
 * Throws VerifyException if expression is false, with custom message.
 * @param expression boolean to verify
 * @param errorMessageTemplate message template for exception
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,int)",249,253,"/**
 * Throws VerifyException if expression is false, with formatted error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1 parameter 1 for message formatting
 * @param p2 parameter 2 for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,int)",263,267,"/**
 * Throws VerifyException if expression is false, with formatted error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1, p2 parameters for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,int)",277,281,"/**
 * Throws VerifyException if expression is false, with formatted error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1 parameter 1 for formatting
 * @param p2 parameter 2 for formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,int)",291,296,"/**
 * Throws VerifyException if expression is false, with custom error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate Error message format
 */","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,long)",306,310,"/**
 * Verifies an expression; throws VerifyException if false.
 * @param expression boolean to check
 * @param errorMessageTemplate Error message template
 * @param p1 Parameter 1 for message formatting
 * @param p2 Parameter 2 for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,long)",320,324,"/**
 * Verifies an expression; throws VerifyException if false.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1, p2 parameters for the error message
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,long)",334,338,"/**
 * Verifies an expression; throws VerifyException if false.
 * @param expression boolean to check
 * @param errorMessageTemplate error message template
 * @param p1, p2 parameters for the error message
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,long)",348,353,"/**
 * Verifies a boolean expression, throwing VerifyException on failure.
 * @param expression Boolean to verify.
 * @param errorMessage Template for error message.
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,char,java.lang.Object)",363,368,"/**
 * Verifies an expression; throws VerifyException if false.
 * @param expression boolean to check
 * @param errorMessageTemplate error message template
 * @param p1 parameter 1 for message
 * @param p2 parameter 2 for message
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,int,java.lang.Object)",378,383,"/**
 * Throws VerifyException if expression is false, with formatted error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate error message template
 * @param p1 parameter 1 for message formatting
 * @param p2 parameter 2 for message formatting
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,long,java.lang.Object)",393,398,"/**
 * Throws VerifyException if expression is false, with custom error message.
 * @param expression boolean to verify
 * @param errorMessageTemplate Error message template
 * @param p1 First parameter for error message
 * @param p2 Second parameter for error message
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)",408,413,"/**
 * Throws VerifyException if expression is false, with custom message.
 * @param expression boolean to verify
 * @param errorMessageTemplate message template for exception
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",423,432,"/**
 * Throws VerifyException if expression is false, with custom message.
 * @param expression boolean to verify
 * @param errorMessageTemplate message template for exception
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Verify.java,verify,"com.google.common.base.Verify:verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",442,452,"/**
 * Throws VerifyException if expression is false.
 * @param expression Boolean to verify.
 * @param errorMessage Template for error message.
 */
","* Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a
   * custom message otherwise.
   *
   * <p>See {@link #verify(boolean, String, Object...)} for details.
   *
   * @since 23.1 (varargs overload since 17.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,cleanUp,com.google.common.base.internal.Finalizer:cleanUp(java.lang.ref.Reference),160,183,"/**
 * Cleans up references in the queue, finalizing them.
 * Returns true if successful, false otherwise.
 */","* Cleans up the given reference and any other references already in the queue. Catches and logs
   * all throwables.
   *
   * @return true if the caller should continue to wait for more references to be added to the
   *     queue, false if the associated FinalizableReferenceQueue is no longer referenced.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,<init>,com.google.common.cache.AbstractCache$SimpleStatsCounter:<init>(),218,218,"/**
 * Default constructor for the SimpleStatsCounter class.
 */
",Constructs an instance with all counts initialized to zero.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,incrementBy,com.google.common.cache.AbstractCache$SimpleStatsCounter:incrementBy(com.google.common.cache.AbstractCache$StatsCounter),272,280,"/**
 * Adds stats from another StatsCounter to the current stats.
 * @param other The StatsCounter to add stats from.
 */
",Increments all counters by the values in {@code other}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,<init>,com.google.common.cache.AbstractLoadingCache:<init>(),46,46,"/**
 * Protected constructor for extending classes. Ensures proper initialization.
 */
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnPutsMap,com.google.common.collect.Platform:preservesInsertionOrderOnPutsMap(),73,76,"/**
 * Creates a new LinkedHashMap that preserves insertion order.
 * @return A LinkedHashMap instance.
 */
","* Returns the platform preferred map implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,putAll,com.google.common.cache.AbstractCache:putAll(java.util.Map),94,99,"/**
 * Adds all entries from the given map to this map.
 * @param m the map whose entries are added
 */
",* @since 12.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,invalidateAll,com.google.common.cache.AbstractCache:invalidateAll(java.lang.Iterable),117,123,"/**
 * Invalidates objects identified by the provided keys.
 * @param keys Iterable of keys to invalidate.
 */
",* @since 11.0,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getUnchecked,com.google.common.cache.AbstractLoadingCache:getUnchecked(java.lang.Object),48,56,"/**
 * Retrieves value associated with key, wrapping exceptions.
 * @param key The key to retrieve the value for.
 * @return The value associated with the key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,newBuilder,com.google.common.cache.CacheBuilder:newBuilder(),320,322,"/**
 * Creates a new CacheBuilder with default configuration.
 * @return A new CacheBuilder instance.
 */
","* Constructs a new {@code CacheBuilder} instance with default settings, including strong keys,
   * strong values, and no automatic eviction of any kind.
   *
   * <p>Note that while this return type is {@code CacheBuilder<Object, Object>}, type parameters on
   * the {@link #build} methods allow you to create a cache of any key and value type desired.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,hashCode,com.google.common.cache.CacheBuilderSpec:hashCode(),241,254,"/**
 * Generates a hash code based on internal configuration parameters.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,equals,com.google.common.cache.CacheBuilderSpec:equals(java.lang.Object),256,281,"/**
 * Checks if two CacheBuilderSpec objects are equal based on their fields.
 * @param obj The object to compare to.
 * @return True if objects are equal, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$FunctionToCacheLoader:<init>(com.google.common.base.Function),163,165,"/**
 * Constructor: Initializes the loader with a function to compute values.
 * @param computingFunction Function to compute the value for a key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,<init>,com.google.common.cache.CacheLoader$SupplierToCacheLoader:<init>(com.google.common.base.Supplier),214,216,"/**
* Constructor for SupplierToCacheLoader.
* @param computingSupplier Supplier to fetch values for caching.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader:loadAll(java.lang.Iterable),125,129,"/**
 * Throws UnsupportedLoadingOperationException; does not load all keys.
 */","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,requestCount,com.google.common.cache.CacheStats:requestCount(),109,111,"/**
 * Returns the total request count (hits + misses).
 * @return The sum of hitCount and missCount.
 */
","* Returns the number of times {@link Cache} lookup methods have returned either a cached or
   * uncached value. This is defined as {@code hitCount + missCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadCount,com.google.common.cache.CacheStats:loadCount(),161,163,"/**
 * Calculates the total load count.
 * @return Total load count (successes + exceptions).
 */
","* Returns the total number of times that {@link Cache} lookup methods attempted to load new
   * values. This includes both successful load operations and those that threw exceptions. This is
   * defined as {@code loadSuccessCount + loadExceptionCount}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,loadExceptionRate,com.google.common.cache.CacheStats:loadExceptionRate(),202,205,"/**
 * Calculates the exception rate based on success and exception counts.
 * Returns 0.0 if total load count is zero.
 */
","* Returns the ratio of cache loading attempts which threw exceptions. This is defined as {@code
   * loadExceptionCount / (loadSuccessCount + loadExceptionCount)}, or {@code 0.0} when {@code
   * loadSuccessCount + loadExceptionCount == 0}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,averageLoadPenalty,com.google.common.cache.CacheStats:averageLoadPenalty(),225,228,"/**
 * Calculates the average load penalty.
 * Returns 0.0 if total load count is zero.
 */
","* Returns the average time spent loading new values. This is defined as {@code totalLoadTime /
   * (loadSuccessCount + loadExceptionCount)}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache:<init>(),39,39,"/**
 * Protected constructor for ForwardingCache, calls super().
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,<init>,com.google.common.collect.ForwardingCollection:<init>(),54,54,"/**
 * Protected constructor for ForwardingCollection. No-op.
 */
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,<init>,com.google.common.collect.ForwardingIterator:<init>(),44,44,"/**
* Default constructor for ForwardingIterator. No-op.
*/
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,<init>,com.google.common.collect.ForwardingMap:<init>(),62,62,"/**
 * Protected constructor for ForwardingMap, prevents external instantiation.
 */
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,<init>,com.google.common.collect.ForwardingMapEntry:<init>(),55,55,"/**
* Default constructor for ForwardingMapEntry. No-op.
*/
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,<init>,com.google.common.collect.ForwardingMultimap:<init>(),44,44,"/**
 * Protected constructor for ForwardingMultimap, used for subclassing.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingTable.java,<init>,com.google.common.collect.ForwardingTable:<init>(),39,39,"/**
 * Protected constructor to prevent direct instantiation.
 */
",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingExecutorService:<init>(),49,49,"/**
* Protected constructor for ForwardingExecutorService.
*/",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture:<init>(),41,41,"/**
 * Default constructor for ForwardingFuture. No-op.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,delegate,com.google.common.cache.ForwardingLoadingCache:delegate(),41,42,"/**
 * Returns the delegate LoadingCache. Abstract method, must be implemented.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,createEntrySet,com.google.common.collect.ImmutableMultiset:createEntrySet(),365,367,"/**
 * Creates an unmodifiable set of entries. Returns empty set if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:build(),675,678,"/**
 * Creates an empty ImmutableSet.
 * @return An empty ImmutableSet.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,createEntrySet,com.google.common.collect.ImmutableSortedMap:createEntrySet(),808,872,"/**
 * Creates an immutable set view of the map's entries.
 * Returns an empty set if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createCellSet,com.google.common.collect.RegularImmutableTable:createCellSet(),42,45,"/**
 * Creates a set of cells. Returns an empty set if the grid is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribersForTesting,com.google.common.eventbus.SubscriberRegistry:getSubscribersForTesting(java.lang.Class),116,119,"/**
 * Returns subscribers for a given event type.
 * @param eventType The event type to retrieve subscribers for.
 * @return Set of subscribers for the event type.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInterfaces,com.google.common.reflect.TypeToken$TypeCollector$3:getInterfaces(java.lang.Object),1431,1431,"/**
 * Returns interfaces implemented by the given type.
 * @param type The type to retrieve interfaces for.
 * @return An iterable of interfaces.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$AbstractCacheSet:isEmpty(),4543,4546,"/**
 * Checks if the underlying cache is empty.
 * @return True if the cache is empty, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isEmpty,com.google.common.cache.LocalCache$Values:isEmpty(),4595,4598,"/**
 * Checks if the underlying cache is empty.
 * @return True if the cache is empty, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$AccessQueue:offer(com.google.common.cache.ReferenceEntry),3830,3840,"/**
* Adds a reference entry to the tail of the access queue.
* Returns true to indicate successful addition.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$AccessQueue:iterator(),3908,3917,"/**
 * Returns an iterator to traverse the access queue.
 * Returns null when no more elements are available.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainRecencyQueue,com.google.common.cache.LocalCache$Segment:drainRecencyQueue(),2578,2590,"/**
 * Drains the recency queue, re-adding entries if still accessed.
 */","* Drains the recency queue, updating eviction metadata that the entries therein were read in
     * the specified relative order. This currently amounts to adding them to relevant eviction
     * lists (accounting for the fact that they could have been removed from the map since being
     * added to the recency queue).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$2:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Copies an entry within a segment, creating a new ReferenceEntry.
 * @param segment The segment to operate on.
 * @param original The entry to copy.
 * @param newNext The next entry in the list.
 * @param key The key for the new entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$3:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Creates a copy of an entry, linking it to the provided next entry.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$4:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Copies an entry within a segment.
 * @param segment Segment to operate on.
 * @param original Original entry to copy.
 * @return New ReferenceEntry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$6:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Creates a copy of an entry.
 * @param segment Segment to copy into.
 * @param original Original entry to copy.
 * @return New ReferenceEntry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$7:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Creates a copy of an entry, linking it to the provided next entry.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$EntryFactory$8:copyEntry(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object)",624,627,"/**
 * Creates a copy of an entry within a segment.
 * @param segment Segment containing the entry.
 * @return New ReferenceEntry object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache$Segment:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",2008,2027,"/**
 * Copies a map entry, handling null keys/values.
 * @param original The entry to copy.
 * @param newNext Next entry in the chain.
 * @return The copied entry or null if original is invalid.
 */
","* Copies {@code original} into a new entry chained to {@code newNext}. Returns the new entry,
     * or {@code null} if {@code original} was already garbage collected.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,offer,com.google.common.cache.LocalCache$WriteQueue:offer(com.google.common.cache.ReferenceEntry),3690,3700,"/**
 * Adds a ReferenceEntry to the write queue.
 * Returns true to indicate successful addition.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,satisfies,"com.google.common.collect.FilteredEntryMultimap:satisfies(java.lang.Object,java.lang.Object)",75,77,"/**
 * Checks if the key-value pair satisfies the predicate.
 * @param key The key of the entry.
 * @param value The value of the entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,get,com.google.common.collect.JdkBackedImmutableBiMap$InverseEntries:get(int),88,92,"/**
 * Retrieves an entry at the specified index.
 * @param index index of the entry to retrieve
 * @return Entry with value before key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,apply,"com.google.common.collect.Maps$AbstractFilteredMap:apply(java.lang.Object,java.lang.Object)",2855,2861,"/**
 * Applies predicate to an immutable entry (key, value).
 * @param key The key of the entry.
 * @param value The value of the entry.
 * @return True if the predicate matches, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,containsEntry,"com.google.common.collect.Multimaps$MapMultimap:containsEntry(java.lang.Object,java.lang.Object)",1162,1165,"/**
 * Checks if the map contains the specified key-value pair.
 * @param key The key of the entry to search for.
 * @param value The value of the entry to search for.
 * @return True if the map contains the entry, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$MapMultimap:remove(java.lang.Object,java.lang.Object)",1230,1233,"/**
 * Removes a key-value pair from the map.
 * @param key The key of the entry to remove.
 * @param value The value of the entry to remove.
 * @return True if the entry was removed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeFromColumnIf,com.google.common.collect.StandardTable$Column:removeFromColumnIf(com.google.common.base.Predicate),487,504,"/**
 * Removes entries from a column if the predicate is true.
 * @param predicate Predicate to apply to each entry.
 * @return True if any entries were removed.
 */",Removes all {@code Column} mappings whose row key and value satisfy the given predicate.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$KeyIterator:next(),4463,4466,"/**
 * Returns the next key in the iteration.
 * @return The next key, or null if the iteration is exhausted.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",972,976,"/**
 * Constructs a new StrongEntry.
 * @param key The key.
 * @param hash The hash code.
 * @param next The next entry in the chain.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1190,1194,"/**
 * Constructs a WeakEntry with key, hash, queue, and next entry.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,set,com.google.common.cache.LocalCache$LoadingValueReference:set(java.lang.Object),3519,3522,"/**
* Sets the value of the future.
* @param newValue The new value to set, or null to clear.
* @return True if the value was set, false otherwise.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setException,com.google.common.cache.LocalCache$LoadingValueReference:setException(java.lang.Throwable),3524,3527,"/**
* Sets an exception on the future, delegating to the wrapped future.
* @param t the exception to set
* @return true if the exception was set, false otherwise
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,init,com.google.common.util.concurrent.AggregateFuture:init(),113,180,"/**
 * Initializes futures, handling all-success or value collection.
 */","* Must be called at the end of each subclass's constructor. This method performs the ""real""
   * initialization; we can't put this in the constructor because, in the case where futures are
   * already complete, we would not initialize the subclass before calling {@link
   * #collectValueFromNonCancelledFuture}. As this is called after the subclass is constructed,
   * we're guaranteed to have properly initialized the subclass.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,closeQuietly,"com.google.common.util.concurrent.ClosingFuture:closeQuietly(java.lang.AutoCloseable,java.util.concurrent.Executor)",2128,2161,"/**
 * Closes the closeable resource in a thread pool, handling exceptions.
 * @param closeable Resource to close, may be null.
 * @param executor Executor to submit the close task.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,rejectionPropagatingExecutor,"com.google.common.util.concurrent.MoreExecutors:rejectionPropagatingExecutor(java.util.concurrent.Executor,com.google.common.util.concurrent.AbstractFuture)",1026,1040,"/**
 * Wraps an executor to propagate rejected executions to a future.
 * @param delegate Executor to wrap.
 * @param future Future to set exception on rejection.
 */
","* Returns an Executor that will propagate {@link RejectedExecutionException} from the delegate
   * executor to the given {@code future}.
   *
   * <p>Note, the returned executor can only be used once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$LoadingValueReference:waitForValue(),3601,3604,"/**
* Waits for the future value to be available.
* @return The value from the future, or throws ExecutionException.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getDone,com.google.common.util.concurrent.Futures:getDone(java.util.concurrent.Future),1160,1176,"/**
 * Gets the result from a {@link Future}. Throws ExecutionException if not done.
 */","* Returns the result of the input {@code Future}, which must have already completed.
   *
   * <p>The benefits of this method are twofold. First, the name ""getDone"" suggests to readers that
   * the {@code Future} is already done. Second, if buggy code calls {@code getDone} on a {@code
   * Future} that is still pending, the program will throw instead of block. This can be important
   * for APIs like {@link #whenAllComplete whenAllComplete(...)}{@code .}{@link
   * FutureCombiner#call(Callable, Executor) call(...)}, where it is easy to use a new input from
   * the {@code call} implementation but forget to add it to the arguments of {@code
   * whenAllComplete}.
   *
   * <p>If you are looking for a method to determine whether a given {@code Future} is done, use the
   * instance method {@link Future#isDone()}.
   *
   * @throws ExecutionException if the {@code Future} failed with an exception
   * @throws CancellationException if the {@code Future} was cancelled
   * @throws IllegalStateException if the {@code Future} is not done
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getUnchecked,com.google.common.util.concurrent.Futures:getUnchecked(java.util.concurrent.Future),1368,1385,"/**
 * Gets the result of a Future, re-throwing as unchecked exceptions.
 * @param future The Future to retrieve the result from.
 * @return The result of the Future.
 */
","* Returns the result of calling {@link Future#get()} uninterruptibly on a task known not to throw
   * a checked exception. This makes {@code Future} more suitable for lightweight, fast-running
   * tasks that, barring bugs in the code, will not fail. This gives it exception-handling behavior
   * similar to that of {@code ForkJoinTask.join}.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@link
   *       UncheckedExecutionException} (if the cause is an {@code Exception}) or {@link
   *       ExecutionError} (if the cause is an {@code Error}).
   *   <li>Any {@link InterruptedException} causes a retry of the {@code get} call. The interrupt is
   *       restored before {@code getUnchecked} returns.
   *   <li>Any {@link CancellationException} is propagated untouched. So is any other {@link
   *       RuntimeException} ({@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to eliminate all checked exceptions: to loop to avoid {@code
   * InterruptedException}, to pass through {@code CancellationException}, and to wrap any exception
   * from the underlying computation in an {@code UncheckedExecutionException} or {@code
   * ExecutionError}.
   *
   * <p>For an uninterruptible {@code get} that preserves other exceptions, see {@link
   * Uninterruptibles#getUninterruptibly(Future)}.
   *
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with an
   *     {@code Exception} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$LocalManualCache:size(),4897,4900,"/**
 * Returns the number of elements in the cache.
 * Uses the size from the underlying local cache.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,initTable,com.google.common.cache.LocalCache$Segment:initTable(java.util.concurrent.atomic.AtomicReferenceArray),1990,1997,"/**
 * Initializes the hash table with a new array.
 * @param newTable The new array to use for the table.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",81,93,"/**
 * Executes a runnable with a timeout.
 * @param runnable Runnable to execute.
 * @param timeoutDuration Timeout duration in milliseconds.
 * @param timeoutUnit Time unit of the timeout duration.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowExecutionExceptionOrError(java.lang.Throwable),261,269,"/**
 * Wraps Throwable as ExecutionException/Error or UncheckedException.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,wrapAndThrowRuntimeExecutionExceptionOrError,com.google.common.util.concurrent.SimpleTimeLimiter:wrapAndThrowRuntimeExecutionExceptionOrError(java.lang.Throwable),271,277,"/**
* Wraps a Throwable as ExecutionError or UncheckedExecutionException.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clearReferenceQueues,com.google.common.cache.LocalCache$Segment:clearReferenceQueues(),2504,2511,"/**
* Clears reference queues for keys and values if enabled.
*/",Clears all entries from the key and value reference queues.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,iterator,com.google.common.cache.LocalCache$WriteQueue:iterator(),3768,3777,"/**
 * Returns an iterator to traverse the write queue entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runUnlockedCleanup,com.google.common.cache.LocalCache$Segment:runUnlockedCleanup(),3481,3486,"/**
 * Processes pending notifications if not held by current thread.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$SoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1542,1546,"/**
 * Creates a copy of a ValueReference with the given queue and value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedSoftValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1638,1642,"/**
 * Constructs a WeightedSoftValueReference with a given weight.
 * @param queue Reference queue
 * @param referent Object being referenced
 * @param entry Reference entry
 * @param weight Weight of the reference
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedStrongValueReference:<init>(java.lang.Object,int)",1660,1663,"/**
 * Constructs a WeightedStrongValueReference with a referent and weight.
 * @param referent The object being referenced.
 * @param weight The weight associated with the reference.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$1:defaultEquivalence(),444,444,"/**
 * Returns a default equivalence relation for objects.
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$1:defaultEquivalence(),272,272,"/**
* Returns a default equivalence relation for objects.
*/
","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$2:defaultEquivalence(),444,444,"/**
 * Returns a default equivalence relation for objects.
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,defaultEquivalence,com.google.common.cache.LocalCache$Strength$3:defaultEquivalence(),444,444,"/**
* Returns a default equivalence relation for objects.
*/
","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,defaultEquivalence,com.google.common.collect.MapMakerInternalMap$Strength$2:defaultEquivalence(),272,272,"/**
 * Returns a default equivalence relation for objects.
 */","* Returns the default equivalence strategy used to compare and hash keys or values referenced
     * at this strength. This strategy will be used unless the user explicitly specifies an
     * alternate strategy.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1498,1502,"/**
 * Creates a copy of a value reference.
 * @param queue Reference queue.
 * @param value Value to reference.
 * @param entry Reference entry.
 * @return A new WeakValueReference.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeightedWeakValueReference:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry,int)",1616,1620,"/**
 * Constructs a WeightedWeakValueReference.
 * @param queue Reference queue; referent object; entry; weight.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyAccessOrder,com.google.common.cache.LocalCache:nullifyAccessOrder(com.google.common.cache.ReferenceEntry),1811,1815,"/**
 * Removes a ReferenceEntry from the access queue.
 * Sets next/previous to nullEntry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nullifyWriteOrder,com.google.common.cache.LocalCache:nullifyWriteOrder(com.google.common.cache.ReferenceEntry),1824,1828,"/**
 * Sets the write queue pointers of a reference entry to null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForValue,com.google.common.cache.LocalCache$StrongValueReference:waitForValue(),1603,1606,"/**
 * Waits for and retrieves the value. Returns the value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,next,com.google.common.cache.LocalCache$ValueIterator:next(),4471,4474,"/**
 * Returns the next element in the iteration.
 * @return The value of the next entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,toString,com.google.common.cache.LocalCache$WriteThroughEntry:toString(),4523,4526,"/**
 * Returns a string representation of the key-value pair.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteQueue,com.google.common.cache.LocalCache:usesWriteQueue(),352,354,"/**
 * Checks if the cache uses a write queue.
 * @return True if using a write queue, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsWrite,com.google.common.cache.LocalCache:recordsWrite(),356,358,"/**
 * Checks if records should be written based on expiry/refresh.
 * @return True if records need writing, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expires,com.google.common.cache.LocalCache:expires(),332,334,"/**
 * Checks if the cache entry expires based on write/access times.
 * @return True if the entry expires, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessQueue,com.google.common.cache.LocalCache:usesAccessQueue(),348,350,"/**
* Checks if the cache uses an access queue for updates.
* Returns true if expiresAfterAccess or evictsBySize is enabled.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsAccess,com.google.common.cache.LocalCache:recordsAccess(),360,362,"/**
 * Checks if access expiration is enabled.
 * @return True if access expires after usage, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isExpired,"com.google.common.cache.LocalCache:isExpired(com.google.common.cache.ReferenceEntry,long)",1791,1800,"/**
 * Checks if the entry is expired based on access or write time.
 * @param entry The reference entry to check.
 * @param now Current timestamp in nanoseconds.
 * @return True if expired, false otherwise.
 */
",Returns true if the entry has expired.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newValueReference,"com.google.common.cache.LocalCache:newValueReference(com.google.common.cache.ReferenceEntry,java.lang.Object,int)",1720,1724,"/**
 * Creates a new value reference for an entry with given value & weight.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,hash,com.google.common.cache.LocalCache:hash(java.lang.Object),1726,1729,"/**
 * Calculates a hash code for the given key.
 * @param key The key to hash.
 * @return The calculated hash code.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache:size(),3969,3972,"/**
 * Returns the size of the collection as an int.
 * Casts the long size to int, handling potential overflow.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.AbstractMapBasedMultiset:size(),185,188,"/**
 * Returns the number of elements in the collection.
 * Uses saturatedCast to prevent integer overflow.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,size,com.google.common.collect.ConcurrentHashMultiset:size(),154,161,"/**
 * Returns the total number of elements in the map.
 * Sums the values from the countMap to calculate the size.
 */
","* {@inheritDoc}
   *
   * <p>If the data in the multiset is modified by any other threads during this method, it is
   * undefined which (if any) of these modifications will be reflected in the result.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,size,com.google.common.collect.EnumMultiset:size(),125,128,"/**
 * Returns the number of elements in the collection.
 * Uses saturatedCast to prevent integer overflow.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,size,com.google.common.collect.Iterators:size(java.util.Iterator),170,177,"/**
 * Calculates the size of an iterator, returning a saturated int.
 */","* Returns the number of elements remaining in {@code iterator}. The iterator will be left
   * exhausted: its {@code hasNext()} method will return {@code false}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,size,com.google.common.collect.JdkBackedImmutableMultiset:size(),89,92,"/**
 * Returns the number of elements in the collection.
 * Uses saturated cast to prevent integer overflow.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap:size(),2345,2353,"/**
 * Returns the total number of elements in the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,linearTimeSizeImpl,com.google.common.collect.Multisets:linearTimeSizeImpl(com.google.common.collect.Multiset),1136,1142,"/**
 * Calculates the size of the multiset by summing element counts.
 * @param multiset The multiset to calculate the size of.
 * @return The size of the multiset as an int.
 */
",An implementation of {@link Multiset#size}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,size,com.google.common.collect.RegularImmutableSortedMultiset:size(),95,99,"/**
 * Returns the number of elements in the range.
 * Casts the long size to an int, handling potential overflow.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedAdd,"com.google.common.math.IntMath:saturatedAdd(int,int)",540,542,"/**
 * Adds two integers, handling potential overflow.
 * @param a First integer.
 * @param b Second integer.
 * @return Sum of a and b, saturated to Int.MAX_VALUE/MIN_VALUE.
 */
","* Returns the sum of {@code a} and {@code b} unless it would overflow or underflow in which case
   * {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedSubtract,"com.google.common.math.IntMath:saturatedSubtract(int,int)",550,552,"/**
 * Subtracts two integers, saturating at the integer limits.
 */","* Returns the difference of {@code a} and {@code b} unless it would overflow or underflow in
   * which case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedMultiply,"com.google.common.math.IntMath:saturatedMultiply(int,int)",560,562,"/**
 * Multiplies two integers, saturating to Integer.MAX_VALUE/MIN_VALUE.
 */","* Returns the product of {@code a} and {@code b} unless it would overflow or underflow in which
   * case {@code Integer.MAX_VALUE} or {@code Integer.MIN_VALUE} is returned, respectively.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,preservesInsertionOrderOnAddsSet,com.google.common.collect.Platform:preservesInsertionOrderOnAddsSet(),91,93,"/**
* Creates a new CompactHashSet that preserves insertion order.
* Returns a set that maintains the order elements are added.
*/
","* Returns the platform preferred set implementation that preserves insertion order when used only
   * for insertions.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkKey,com.google.common.collect.AbstractBiMap$Inverse:checkKey(java.lang.Object),474,478,"/**
 * Checks if a key exists, delegating to the inverse map.
 * @param key The key to check.
 * @return The key itself if found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumBiMap:entrySet(),320,324,"/**
 * Returns a set view of the map's entries. Lazily initialized.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,entrySet,com.google.common.collect.EnumHashBiMap:entrySet(),320,324,"/**
* Returns a set view of the map's entries. Lazily initialized.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setValue,com.google.common.collect.AbstractBiMap$BiMapEntry:setValue(java.lang.Object),338,352,"/**
* Sets the value for this entry and updates inverse map.
* @param value The new value for the entry.
* @return The previous value associated with this entry.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumBiMap:containsValue(java.lang.Object),117,120,"/**
 * Checks if the map contains a specific value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,containsValue,com.google.common.collect.EnumHashBiMap:containsValue(java.lang.Object),117,120,"/**
* Checks if the map contains the specified value.
* @param value Value to search for.
* @return True if found, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$EntrySet:clear(),393,396,"/**
 * Clears the map, removing all key-value mappings.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.AbstractBiMap$KeySet:clear(),245,248,"/**
 * Clears the map, removing all key-value pairs.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumBiMap:clear(),217,221,"/**
 * Clears the delegate and inverse delegate lists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,clear,com.google.common.collect.EnumHashBiMap:clear(),217,221,"/**
 * Clears the delegate and inverse delegate lists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$EntrySet:iterator(),419,422,"/**
 * Returns an iterator over the map entries.
 * Delegates to the entry set iterator.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,makeInverse,com.google.common.collect.AbstractBiMap:makeInverse(java.util.Map),107,109,"/**
 * Creates an inverse BiMap from the given map.
 * @param backward Map to create the inverse from.
 * @return Inverse BiMap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,checkValue,com.google.common.collect.AbstractBiMap$Inverse:checkValue(java.lang.Object),480,484,"/**
 * Checks the value using the inverse mapping.
 * @param value The value to check.
 * @return The checked value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.AbstractBiMap$Inverse:values(),277,285,"/**
 * Returns a set view of the values of this map.
 * Lazily initializes the set if it's not already created.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,values,com.google.common.collect.EnumBiMap:values(),277,285,"/**
 * Returns a set view of the values of this map.
 * Lazily initializes the set if it's null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$KeySet:iterator(),269,272,"/**
 * Returns an iterator over the keys of the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$Keys:iterator(),1787,1790,"/**
 * Returns an iterator over the keys in this multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumBiMap:keySet(),232,236,"/**
 * Returns a set view of the map's keys. Lazily initialized.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,keySet,com.google.common.collect.EnumHashBiMap:keySet(),232,236,"/**
 * Returns a set view of the map's keys. Lazily initialized.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,iterator,com.google.common.collect.AbstractBiMap$ValueSet:iterator(),296,299,"/**
 * Returns an iterator over the values in the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,iterator,com.google.common.collect.FilteredMultimapValues:iterator(),47,50,"/**
 * Returns an iterator over the values in the multimap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumBiMap:inverse(),225,228,"/**
 * Returns the inverse of this BiMap. The inverse has keys and values swapped.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,inverse,com.google.common.collect.EnumHashBiMap:inverse(),225,228,"/**
 * Returns the inverse BiMap, mapping keys to values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$Itr:next(),1178,1192,"/**
 * Returns the next element in the flattened map.
 * Returns a key-value pair from the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,<init>,"com.google.common.collect.GeneralRange:<init>(java.util.Comparator,boolean,java.lang.Object,com.google.common.collect.BoundType,boolean,java.lang.Object,com.google.common.collect.BoundType)",103,146,"/**
 * Constructs a GeneralRange with specified bounds and types.
 * @param comparator Comparator for range elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$PeekingImpl:next(),1196,1207,"/**
 * Returns the next element in the iteration.
 * Returns the peeked element if available, otherwise calls iterator.next().
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peek,com.google.common.collect.Iterators$PeekingImpl:peek(),1215,1224,"/**
 * Retrieves and stores the next element from the iterator.
 * Returns the element or null if the iterator is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$TransformedEntriesMap:getOrDefault(java.lang.Object,java.lang.Object)",2163,2172,"/**
 * Returns value for key, or defaultValue if not found.
 * @param key The key to search for.
 * @param defaultValue Value to return if key is not found.
 * @return Value or defaultValue.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$TransformedEntriesMap:remove(java.lang.Object),2175,2182,"/**
 * Removes the mapping for a key.
 * @param key the key whose mapping to be removed
 * @return Transformed value or null if key not present
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$AvlNode:getElement(),1031,1035,"/**
 * Returns the element. Uses unchecked cast for nullable type safety.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,updateInverseMap,"com.google.common.collect.AbstractBiMap:updateInverseMap(java.lang.Object,boolean,java.lang.Object,java.lang.Object)",154,164,"/**
 * Updates the inverse map by removing old value and adding new.
 * @param key The key associated with the values.
 * @param containedKey Flag indicating if the key was previously contained.
 * @param oldValue The old value to remove from inverse map.
 * @param newValue The new value to add to the inverse map.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,removeFromBothMaps,com.google.common.collect.AbstractBiMap:removeFromBothMaps(java.lang.Object),172,179,"/**
 * Removes key from both maps and updates inverse map.
 * @param key The key to remove.
 * @return The removed value, or null if the key was not present.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
* Replaces values for each key using the provided function.
* Throws exception if a value conflicts in the inverse map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,replaceAll,com.google.common.collect.EnumHashBiMap:replaceAll(java.util.function.BiFunction),194,215,"/**
 * Replaces values for each key using the provided function.
 * Throws exception if a value conflicts with existing keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,next,com.google.common.collect.AbstractIndexedListIterator:next(),75,82,"/**
 * Returns the next element in the iteration.
 * Throws NoSuchElementException if no next element exists.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,previous,com.google.common.collect.AbstractIndexedListIterator:previous(),94,101,"/**
 * Returns the previous element in the list.
 * Throws NoSuchElementException if no previous element exists.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,<init>,com.google.common.collect.AbstractIterator:<init>(),69,69,"/**
 * Default constructor for AbstractIterator.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSequentialIterator.java,<init>,com.google.common.collect.AbstractSequentialIterator:<init>(java.lang.Object),50,52,"/**
 * Constructs a new AbstractSequentialIterator with initial element.
 * @param firstOrNull The first element, or null if empty.
 */
","* Creates a new iterator with the given first element, or, if {@code firstOrNull} is null,
   * creates a new empty iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableListIterator.java,<init>,com.google.common.collect.UnmodifiableListIterator:<init>(),34,34,"/**
 * Private constructor to prevent direct instantiation.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,hasNext,com.google.common.collect.AbstractIterator:hasNext(),126,137,"/**
 * Checks if there is a next element available.
 * Returns true if ready, false if done, otherwise computes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,wrapEntry,com.google.common.collect.AbstractMapBasedMultimap$AsMap:wrapEntry(java.util.Map$Entry),1412,1415,"/**
 * Wraps an entry, updating the value collection.
 * @param entry The entry to wrap.
 * @return A new wrapped entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:sortedMap(),1546,1549,"/**
 * Returns a sorted map of keys to collections of values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:comparator(),1491,1494,"/**
* Returns the comparator used for keys in this sorted map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:firstKey(),1496,1500,"/**
 * Returns the first (lowest) key in the map's sorted key set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastKey,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:lastKey(),1502,1506,"/**
 * Returns the last key in the sorted map.
 * Uses the underlying sorted map implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:headMap(java.lang.Object),1508,1511,"/**
 * Returns a view of the map containing entries with keys less than toKey.
 * @param toKey the key to which the head map is bounded
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:subMap(java.lang.Object,java.lang.Object)",1513,1517,"/**
 * Returns a sorted submap from fromKey to toKey, inclusive.
 * @param fromKey The lower key (inclusive).
 * @param toKey The upper key (inclusive).
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:tailMap(java.lang.Object),1519,1522,"/**
 * Returns a tail map with keys >= fromKey.
 * @param fromKey the key from which the tail map starts
 * @return a sorted map with keys >= fromKey
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:createKeySet(),1534,1537,"/**
* Creates a sorted set view of the map's keys.
* Uses the map's sorted map implementation.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollAsMapEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollAsMapEntry(java.util.Iterator),1617,1627,"/**
 * Polls the iterator and returns an immutable map entry.
 * @param entryIterator Iterator to poll from.
 * @return Map.Entry or null if empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractMapBasedMultimap:createUnmodifiableEmptyCollection(),143,145,"/**
 * Creates and returns an unmodifiable, empty collection.
 */","* Creates an unmodifiable, empty collection of values.
   *
   * <p>This is used in {@link #removeAll} on an empty key.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,sortedMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:sortedMap(),1065,1068,"/**
* Returns a sorted map of keys to collections of values.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:comparator(),1026,1029,"/**
 * Returns the comparator used for sorted keys in this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:first(),1031,1035,"/**
 * Returns the first key in the sorted map.
 * Returns null if the map is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:headSet(java.lang.Object),1037,1040,"/**
 * Returns a view of the sorted set from the beginning to toElement.
 * @param toElement element to return elements up to (exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:last(),1042,1046,"/**
 * Returns the last key according to the sorted order.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",1048,1051,"/**
 * Returns a sorted set of keys from fromElement (inclusive) to toElement (exclusive).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet:tailSet(java.lang.Object),1053,1056,"/**
 * Returns a view of the sorted set from {@code fromElement} to the end.
 * @param fromElement the starting element (inclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollFirst(),1090,1093,"/**
 * Retrieves and removes the first element of the iterator.
 * @return The first element or null if the iterator is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirst,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollFirst(),722,725,"/**
 * Retrieves and removes the first element from the iterator.
 * @return The first element or null if the iterator is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollFirstEntry,com.google.common.collect.AbstractNavigableMap:pollFirstEntry(),51,54,"/**
 * Retrieves and removes the first entry from the map.
 * @return The first Entry or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,pollLastEntry,com.google.common.collect.AbstractNavigableMap:pollLastEntry(),56,59,"/**
 * Retrieves and removes the last entry in the map.
 * @return The last Entry or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardPollFirstEntry(),243,245,"/**
 * Polls and removes the first entry from the entry set.
 * @return The first entry or null if the set is empty.
 */
","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of {@code
   * entrySet}. If you override {@code entrySet}, you may wish to override {@code pollFirstEntry} to
   * forward to this implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollFirst,com.google.common.collect.ForwardingNavigableSet:standardPollFirst(),127,129,"/**
 * Polls the first element from the iterator, returns null if empty.
 */","* A sensible definition of {@link #pollFirst} in terms of the {@code iterator} method. If you
   * override {@link #iterator} you may wish to override {@link #pollFirst} to forward to this
   * implementation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:remove(),484,489,"/**
* Removes the last element returned by the iterator.
* Decrements totalSize and removes empty set if needed.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,refreshIfEmpty,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:refreshIfEmpty(),353,365,"/**
 * Refreshes the delegate if empty, propagates to ancestor.
 */","* If the delegate collection is empty, but the multimap has values for the key, replace the
     * delegate with the new collection for the key.
     *
     * <p>For a subcollection, refresh its ancestor and validate that the ancestor delegate hasn't
     * changed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:addAll(int,java.util.Collection)",778,793,"/**
 * Adds all elements from a collection to this list at the specified index.
 * @param index index where elements will be inserted
 * @param c collection of elements to add
 * @return true if the list was modified
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:get(int),795,800,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:set(int,java.lang.Object)",802,807,"/**
 * Sets the element at the specified index.
 * @param index Index of the element to set.
 * @param element The element to set at the index.
 * @return The replaced element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:add(int,java.lang.Object)",809,818,"/**
 * Inserts the given element at the specified index.
 * @param index index to insert at
 * @param element element to insert
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:remove(int),820,828,"/**
 * Removes the element at the given index and returns it.
 * @param index index of the element to remove
 * @return removed element, or null if list is empty
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,indexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:indexOf(java.lang.Object),830,834,"/**
* Returns the index of the first occurrence of the specified object.
* @param o object to search for
* @return index of object or -1 if not found
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastIndexOf,com.google.common.collect.AbstractMapBasedMultimap$WrappedList:lastIndexOf(java.lang.Object),836,840,"/**
 * Returns the last index of the specified element in the list.
 * @param o the element to search for
 * @return the last index or -1 if not found
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasPrevious,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:hasPrevious(),875,878,"/**
* Checks if a previous element exists in the list.
* Delegates to the underlying list iterator.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previous,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previous(),880,884,"/**
* Returns the previous element in the list.
* Delegates to the underlying list iterator.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,nextIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:nextIndex(),886,889,"/**
 * Returns the index of the element that will be returned 
 * with the next call to {@link #next()}.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,previousIndex,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:previousIndex(),891,894,"/**
 * Returns the index of the element before the current element.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,set,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:set(java.lang.Object),896,899,"/**
* Sets the element at the specified index to the given value.
* @param value The value to set at the index.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator:add(java.lang.Object),901,909,"/**
 * Adds the given value to the list.
 * @param value The value to add.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subList,"com.google.common.collect.AbstractMapBasedMultimap$WrappedList:subList(int,int)",854,861,"/**
 * Returns a view of the list between fromIndex and toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex   end index (exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getSortedSetDelegate,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:getSortedSetDelegate(),697,700,"/**
 * Returns the delegate for the sorted set.
 * Returns the sorted set delegate from the superclass.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,comparator,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:comparator(),643,646,"/**
 * Returns the comparator used for ordering elements in this set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,first,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:first(),648,653,"/**
 * Returns the first element of the sorted set.
 * Returns null if the set is empty after refreshing.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,last,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:last(),655,660,"/**
* Returns the last element of the sorted set.
* Delegates to the underlying sorted set implementation.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:headSet(java.lang.Object),662,669,"/**
 * Returns a sorted set containing elements less than {@code toElement}.
 * @param toElement element used to define the upper bound (exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:subSet(java.lang.Object,java.lang.Object)",671,678,"/**
 * Returns a sorted set of elements between fromElement and toElement.
 * @param fromElement lower bound (inclusive)
 * @param toElement upper bound (exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet:tailSet(java.lang.Object),680,687,"/**
 * Returns a sorted set of elements, fromElement inclusive.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,put,"com.google.common.collect.AbstractMapBasedMultimap:put(java.lang.Object,java.lang.Object)",189,207,"/**
 * Associates the specified value with the given key.
 * @param key The key for the value.
 * @param value The value to associate. Returns true if successful.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getOrCreateCollection,com.google.common.collect.AbstractMapBasedMultimap:getOrCreateCollection(java.lang.Object),209,216,"/**
 * Gets collection by key, creating if absent.
 * @param key Key to retrieve or create collection for.
 * @return Collection associated with the key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap:get(java.lang.Object),292,299,"/**
 * Gets the collection associated with the key.
 * Creates a new collection if one doesn't exist.
 */
","* {@inheritDoc}
   *
   * <p>The returned collection is not serializable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,values,com.google.common.collect.AbstractMapBasedMultimap:values(),1214,1217,"/**
 * Returns a collection of the values in this map.
 */","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,values,com.google.common.collect.LinkedListMultimap:values(),748,751,"/**
* Returns a list of all values in the map. Casts to List<V>.
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values in the order they
   * were added to the multimap. Because the values may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeys,com.google.common.collect.AbstractMapBasedMultimap:createKeys(),1247,1250,"/**
 * Creates a Multiset containing the keys of this multimap.
 * @return A Multiset of the keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createKeys,com.google.common.collect.LinkedListMultimap:createKeys(),735,738,"/**
 * Creates a Multiset containing all keys in the multimap.
 * @return A Multiset of the keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createKeys,com.google.common.collect.Multimaps$MapMultimap:createKeys(),1270,1273,"/**
 * Creates a Multiset containing the keys of this multimap.
 * @return A Multiset of the keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entries,com.google.common.collect.AbstractMapBasedMultimap:entries(),1261,1264,"/**
* Returns a set of entries for this map. Delegates to superclass.
*/","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values for one key, followed
   * by the values of a second key, and so on.
   *
   * <p>Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the
   * time the entry is returned by a method call to the collection or its iterator.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueIterator,com.google.common.collect.AbstractMultimap:valueIterator(),218,220,"/**
 * Returns an iterator over the values in the map.
 * Uses the entry iterator for efficient value access.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,entries,com.google.common.collect.LinkedListMultimap:entries(),798,801,"/**
 * Returns a list of entries from the superclass.
 * Casts the result to List<Entry<K, V>>.
 */","* {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the entries in the order they
   * were added to the multimap. Because the entries may have duplicates and follow the insertion
   * ordering, this method returns a {@link List}, instead of the {@link Collection} specified in
   * the {@link ListMultimap} interface.
   *
   * <p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what
   * happens subsequently. As long as the corresponding key-value mapping is not removed from the
   * multimap, {@link Entry#getValue} returns the value from the multimap, which may change over
   * time, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap
   * does not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()}
   * call won't update the multimap but will lead to a revised value being returned by {@code
   * getValue()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,getAndSet,"com.google.common.collect.AbstractMapBasedMultiset:getAndSet(com.google.common.collect.Count,int)",337,343,"/**
 * Gets and sets the count using the provided Count object.
 * @param i Count object, may be null.
 * @param count The new count value.
 * @return The previous count or 0 if Count is null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,next,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:next(),215,229,"/**
 * Returns the next element from the iterable.
 * Updates currentEntry and occurrencesLeft as needed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.AbstractMapBasedMultiset:clear(),169,176,"/**
 * Clears the map, resetting counts to 0 and removing all entries.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.HashMultiset:iterator(),190,193,"/**
 * Returns an iterator over the multiset's elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,iterator,com.google.common.collect.LinkedHashMultiset:iterator(),190,193,"/**
 * Returns an iterator over the multiset's elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,newStringBuilderForCollection,com.google.common.collect.Collections2:newStringBuilderForCollection(int),351,354,"/**
 * Creates a StringBuilder with initial capacity, up to a limit.
 * @param size Initial capacity hint, must be non-negative.
 */
",Returns best-effort-sized StringBuilder based on the given collection size.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,"com.google.common.collect.FilteredEntryMultimap$Keys:remove(java.lang.Object,int)",361,385,"/**
 * Removes specified occurrences of values associated with a key.
 * @param key The key to remove values for.
 * @param occurrences Number of values to remove.
 * @return Number of values actually removed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,computeArrayListCapacity,com.google.common.collect.Lists:computeArrayListCapacity(int),155,161,"/**
 * Calculates an ArrayList capacity based on the array size.
 * @param arraySize The size of the array.
 * @return An estimated capacity.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithCapacity,com.google.common.collect.Lists:newArrayListWithCapacity(int),180,185,"/**
 * Creates a new ArrayList with the specified initial capacity.
 * @param initialArraySize Initial size of the ArrayList.
 * @return A new ArrayList with the given capacity.
 */
","* Creates an {@code ArrayList} instance backed by an array with the specified initial size;
   * simply delegates to {@link ArrayList#ArrayList(int)}.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use {@code new }{@link ArrayList#ArrayList(int) ArrayList}{@code <>(int)} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>. (Unlike here, there is no risk of overload ambiguity, since the {@code ArrayList}
   * constructors very wisely did not accept varargs.)
   *
   * @param initialArraySize the exact size of the initial backing array for the returned array list
   *     ({@code ArrayList} documentation calls this value the ""capacity"")
   * @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size
   *     reaches {@code initialArraySize + 1}
   * @throws IllegalArgumentException if {@code initialArraySize} is negative",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,capacity,com.google.common.collect.Maps:capacity(int),286,307,"/**
 * Calculates the initial capacity. Returns Integer.MAX_VALUE if too large.
 */","* Returns a capacity that is sufficient to keep the map from being resized as long as it grows no
   * larger than expectedSize and the load factor is ≥ its default (0.75).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$ArrayListSupplier:<init>(int),185,187,"/**
 * Constructs a new ArrayListSupplier with a specified expected values per key.
 * @param expectedValuesPerKey The expected number of values per key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$HashSetSupplier:<init>(int),217,219,"/**
 * Constructs a HashSetSupplier with the specified expected values per key.
 * @param expectedValuesPerKey Expected values per key (must be non-negative).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:<init>(int),231,233,"/**
 * Constructs a LinkedHashSetSupplier with the given expected values per key.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(int),295,305,"/**
 * Creates a ListMultimapBuilder with ArrayList values.
 * @param expectedValuesPerKey Expected size of ArrayList values.
 * @return ListMultimapBuilder with ArrayList values.
 */
","* Uses an {@link ArrayList} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(int),337,347,"/**
 * Creates a SetMultimapBuilder with a HashSet for values.
 * @param expectedValuesPerKey Expected size of HashSet per key.
 * @return SetMultimapBuilder with HashSet values.
 */
","* Uses a hash-based {@code Set} to store value collections, initialized to expect the specified
     * number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(int),360,370,"/**
 * Creates a SetMultimapBuilder with LinkedHashSet values.
 * @param expectedValuesPerKey Expected size of LinkedHashSet.
 * @return SetMultimapBuilder with LinkedHashSet values.
 */
","* Uses an insertion-ordered hash-based {@code Set} to store value collections, initialized to
     * expect the specified number of values per key.
     *
     * @throws IllegalArgumentException if {@code expectedValuesPerKey < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(int),83,91,"/**
 * Creates a MultimapBuilder with hash keys, pre-allocating space.
 * @param expectedKeys Expected number of keys for the map.
 * @return MultimapBuilder with a HashMap for keys.
 */
","* Uses a hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * @throws IllegalArgumentException if {@code expectedKeys < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(int),114,122,"/**
 * Creates a MultimapBuilder with linked hash keys and expected size.
 * @param expectedKeys Expected number of keys in the multimap.
 */","* Uses an hash table to map keys to value collections, initialized to expect the specified number
   * of keys.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,"com.google.common.collect.Multisets$ImmutableEntry:<init>(java.lang.Object,int)",268,272,"/**
 * Constructs an ImmutableEntry with the given element and count.
 * @param element The element for the entry.
 * @param count The count associated with the element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int)",942,956,"/**
 * Sets the count of an element in the multiset.
 * @param element Element to set the count for.
 * @param count Desired count; must be non-negative.
 * @return The previous count of the element.
 */
","An implementation of {@link Multiset#setCount(Object, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,setCountImpl,"com.google.common.collect.Multisets:setCountImpl(com.google.common.collect.Multiset,java.lang.Object,int,int)",959,970,"/**
 * Sets the count of an element in a multiset if the old count matches.
 * @param self The multiset to modify.
 * @param element The element whose count is to be set.
 * @param oldCount The expected old count of the element.
 * @param newCount The new count to set for the element.
 * @return True if the count was updated, false otherwise.
 */
","An implementation of {@link Multiset#setCount(Object, int, int)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Entries:spliterator(),134,137,"/**
* Returns a spliterator for the map entries.
* Uses a delegate spliterator for efficient iteration.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap$EntrySet:hashCode(),142,145,"/**
 * Calculates the hash code using the Sets utility method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,hashCode,com.google.common.collect.FilteredKeySetMultimap$EntrySet:hashCode(),69,72,"/**
 * Returns the hash code value for this set. Uses Sets.hashCodeImpl.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardHashCode,com.google.common.collect.ForwardingSet:standardHashCode(),98,100,"/**
 * Calculates a standard hash code for the object.
 * Uses Sets.hashCodeImpl for consistent hashing.
 */
","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashCode,com.google.common.collect.ImmutableSet:hashCode(),298,301,"/**
 * Calculates the hash code using the Sets library's implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$UnmodifiableEntrySet:hashCode(),1583,1586,"/**
 * Calculates the hash code using the Sets utility method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,hashCode,com.google.common.collect.RegularContiguousSet:hashCode(),237,240,"/**
 * Calculates the hash code using the Sets implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$FilteredSet:hashCode(),1291,1294,"/**
 * Returns the hash code value for this object. Delegates to hashCodeImpl.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,hashCode,com.google.common.collect.TreeRangeSet$AsRanges:hashCode(),110,113,"/**
 * Computes the hash code for the object using Sets.hashCodeImpl.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap$EntrySet:equals(java.lang.Object),147,150,"/**
 * Compares this set with another object for equality.
 * @param obj The object to compare with.
 * @return True if the sets are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,equals,com.google.common.collect.FilteredKeySetMultimap$EntrySet:equals(java.lang.Object),74,77,"/**
* Compares this set with another object for equality.
* @param o the object to compare with
* @return true if the sets are equal, false otherwise
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardEquals,com.google.common.collect.ForwardingSet:standardEquals(java.lang.Object),88,90,"/**
 * Checks for equality using the standard Sets implementation.
 * @param object The object to compare to.
 * @return True if the objects are equal, false otherwise.
 */
","* A sensible definition of {@link #equals} in terms of {@link #size} and {@link #containsAll}. If
   * you override either of those methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$UnmodifiableEntrySet:equals(java.lang.Object),1578,1581,"/**
* Checks if two objects are equal using Sets' implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$FilteredSet:equals(java.lang.Object),1286,1289,"/**
* Checks if this object is equal to another object using equalsImpl.
* @param object The object to compare to.
* @return True if objects are equal, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:equals(java.lang.Object),1022,1030,"/**
 * Checks if two objects are equal, using the underlying set's equality.
 * @param o The object to compare to.
 * @return True if the objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,equals,com.google.common.collect.TreeRangeSet$AsRanges:equals(java.lang.Object),115,118,"/**
 * Compares this set with another object for equality.
 * @param o the object to compare with
 * @return true if the sets are equal, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsValue,com.google.common.collect.AbstractMultimap:containsValue(java.lang.Object),48,57,"/**
 * Checks if any collection contains the given value.
 * @param value The value to search for.
 * @return True if found, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.AbstractMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
 * Checks if the map contains an entry with the given key and value.
 * @param key The key of the entry to check.
 * @param value The value of the entry to check.
 * @return True if the entry exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.AbstractMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
* Removes a value from the collection associated with the key.
* @param key the key of the collection
* @param value the value to remove
* @return True if the value was removed, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.AbstractMultimap:hashCode(),251,254,"/**
 * Returns the hash code value for this object, based on its map representation.
 */","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.AbstractMultimap:toString(),262,265,"/**
 * Returns a string representation of the object as a map.
 */
","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,asMap,com.google.common.collect.LinkedListMultimap:asMap(),228,232,"/**
 * Returns a map representing the collection's elements.
 * Uses cached map or creates a new one if it's null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.AbstractMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
* Adds all entries from the multimap to this multimap.
* @param multimap the multimap whose entries to add
* @return true if this multimap changed, false otherwise
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keySet,com.google.common.collect.LinkedListMultimap:keySet(),162,166,"/**
 * Returns a set view of the map's keys. Lazily initialized.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,keys,com.google.common.collect.LinkedListMultimap:keys(),172,176,"/**
 * Returns a multiset containing the keys in this multiset.
 * Lazily initializes the keys multiset if it's null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.AbstractMultimap:equals(java.lang.Object),238,241,"/**
 * Checks if two multimaps are equal.
 * @param object The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.ConcurrentHashMultiset:contains(java.lang.Object),54,57,"/**
 * Checks if the collection contains the given element.
 * @param element The element to search for.
 * @return True if the element is present, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,contains,com.google.common.collect.EnumMultiset:contains(java.lang.Object),54,57,"/**
 * Checks if the collection contains the given element.
 * @param element the element to search for
 * @return true if present, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,add,com.google.common.collect.AbstractMultiset:add(java.lang.Object),60,65,"/**
 * Adds an element to the collection.
 * @param element The element to add. Returns true.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,remove,com.google.common.collect.AbstractMultiset:remove(java.lang.Object),73,77,"/**
* Removes a single occurrence of the specified element.
* @param element the element to remove
* @return true if the element was removed, false otherwise
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,removeAll,com.google.common.collect.AbstractMultiset:removeAll(java.util.Collection),111,115,"/**
 * Removes all elements contained in the given collection.
 * @param elementsToRemove elements to remove from the multiset
 * @return true if the multiset was modified, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemoveAll,com.google.common.collect.ForwardingMultiset:standardRemoveAll(java.util.Collection),190,193,"/**
 * Removes all elements from the multiset that are contained in elementsToRemove.
 * @param elementsToRemove collection of elements to remove
 * @return true if the multiset was modified
 */
","* A sensible definition of {@link #removeAll} in terms of the {@code removeAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.AbstractMultiset:elementSet(),130,137,"/**
 * Returns the set of elements in the collection.
 * Lazily initializes if not already created.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.AbstractMultiset:entrySet(),164,171,"/**
 * Returns a set of entries for the map. Lazily initialized.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,equals,com.google.common.collect.AbstractMultiset:equals(java.lang.Object),207,210,"/**
* Compares this multiset with another object for equality.
* @param object the object to compare with
* @return true if equal, false otherwise
*/
","* {@inheritDoc}
   *
   * <p>This implementation returns {@code true} if {@code object} is a multiset of the same size
   * and if, for each element, the two multisets have the same count.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardEquals,com.google.common.collect.ForwardingMultiset:standardEquals(java.lang.Object),285,287,"/**
 * Compares this multiset with another using Multisets.equalsImpl.
 * @param object the object to compare to
 * @return true if equal, false otherwise
 */
","* A sensible, albeit inefficient, definition of {@link #equals} in terms of {@code
   * entrySet().size()} and {@link #count}. If you override either of these methods, you may wish to
   * override {@link #equals} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,equals,com.google.common.collect.ImmutableMultiset:equals(java.lang.Object),336,339,"/**
 * Compares this multiset with another object for equality.
 * @param object The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstEntry,com.google.common.collect.AbstractNavigableMap:firstEntry(),41,44,"/**
 * Returns the first entry in the map, or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastEntry,com.google.common.collect.AbstractNavigableMap:lastEntry(),46,49,"/**
 * Returns the last entry of the map, or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getFirst,"com.google.common.collect.Iterables:getFirst(java.lang.Iterable,java.lang.Object)",825,829,"/**
 * Returns the first element of the iterable, or defaultValue if empty.
 * @param iterable Source iterable.
 * @param defaultValue Value if the iterable is empty.
 * @return First element or defaultValue.
 */
","* Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty.
   * The {@link Iterators} analog to this method is {@link Iterators#getNext}.
   *
   * <p>If no default value is desired (and the caller instead wants a {@link
   * NoSuchElementException} to be thrown), it is recommended that {@code
   * iterable.iterator().next()} is used instead.
   *
   * <p>To get the only element in a single-element {@code Iterable}, consider using {@link
   * #getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getFirst()} instead. Note that if the collection is empty,
   * {@code getFirst()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the default value to return if the iterable is empty
   * @return the first element of {@code iterable} or the default value
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lowerKey,com.google.common.collect.AbstractNavigableMap:lowerKey(java.lang.Object),103,106,"/**
 * Returns the key immediately before the given key, or null if none.
 * @param key The key to find the lower key for.
 * @return The lower key, or null if it doesn't exist.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,floorKey,com.google.common.collect.AbstractNavigableMap:floorKey(java.lang.Object),108,111,"/**
 * Returns the greatest key <= key, or null if none exists.
 * @param key The key to compare against.
 * @return The floor key, or null if no such key exists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,ceilingKey,com.google.common.collect.AbstractNavigableMap:ceilingKey(java.lang.Object),113,116,"/**
* Returns the smallest key greater than or equal to the given key.
* @param key The key to compare against.
* @return The ceiling key, or null if none exists.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,higherKey,com.google.common.collect.AbstractNavigableMap:higherKey(java.lang.Object),118,121,"/**
 * Returns the next higher key, or null if none exists.
 * @param key The key to find the higher key for.
 * @return The next higher key, or null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,descendingKeySet,com.google.common.collect.AbstractNavigableMap:descendingKeySet(),150,153,"/**
* Returns a descending navigable set of keys from this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList),151,153,"/**
 * Initializes a new ImmutableRangeSet with the given ranges.
 * @param ranges Immutable list of ranges to initialize with.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,"com.google.common.collect.ImmutableRangeSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableRangeSet)",155,158,"/**
 * Constructs a new ImmutableRangeSet.
 * @param ranges The ranges contained in this set.
 * @param complement The complement of this range set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet:<init>(java.util.NavigableMap),76,78,"/**
* Constructs a TreeRangeSet with the given ranges.
* @param rangesByLowerCut Map of lower bounds to ranges.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet:contains(java.lang.Comparable),30,33,"/**
 * Checks if the set contains the given value.
 * @param value The value to search for.
 * @return True if the value is present, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet:contains(java.lang.Comparable),30,33,"/**
* Checks if the set contains the given value.
* @param value The value to search for.
* @return True if the value is present, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet:isEmpty(),38,41,"/**
 * Checks if the set is empty.
 * Returns true if the underlying ranges are empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.AbstractRangeSet:clear(),53,56,"/**
* Removes all elements from the range.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$RangesByUpperBound:<init>(java.util.NavigableMap),294,297,"/**
 * Initializes the RangesByUpperBound with a navigable map of ranges.
 * @param rangesByLowerBound Map of ranges, keyed by lower bound.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.ImmutableRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
 * Checks if this range set encloses all ranges from the other set.
 * @param other The other range set to check.
 * @return True if this set encloses all ranges from the other.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,enclosesAll,com.google.common.collect.TreeRangeSet:enclosesAll(com.google.common.collect.RangeSet),58,61,"/**
 * Checks if this range set encloses all ranges from the given set.
 * @param other The range set to check.
 * @return True if all ranges are enclosed, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,addAll,com.google.common.collect.TreeRangeSet:addAll(com.google.common.collect.RangeSet),63,66,"/**
* Adds all ranges from the given RangeSet to this RangeSet.
* @param other The RangeSet to add ranges from.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,removeAll,com.google.common.collect.TreeRangeSet:removeAll(com.google.common.collect.RangeSet),68,71,"/**
* Removes all ranges from this set that are also in the given set.
* @param other The set from which to remove ranges.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.ImmutableRangeSet:equals(java.lang.Object),81,90,"/**
 * Checks if two RangeSets are equal by comparing their ranges.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,equals,com.google.common.collect.TreeRangeSet:equals(java.lang.Object),81,90,"/**
 * Checks if this RangeSet is equal to another RangeSet.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedSetMultimap:asMap(),136,139,"/**
* Returns a map view of the underlying data.
*/","* Returns a map view that associates each key with the corresponding values in the multimap.
   * Changes to the returned map, such as element removal, will update the underlying multimap. The
   * map does not support {@code setValue} on its entries, {@code put}, or {@code putAll}.
   *
   * <p>When passed a key that is present in the map, {@code asMap().get(Object)} has the same
   * behavior as {@link #get}, returning a live collection. When passed a key that is not present,
   * however, {@code asMap().get(Object)} returns {@code null} instead of an empty collection.
   *
   * <p>Though the method signature doesn't say so explicitly, the returned map has {@link
   * SortedSet} values.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,keySet,com.google.common.collect.TreeMultimap:keySet(),185,188,"/**
* Returns a navigable set view of the map's keys.
*/
","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableSet}, instead of the {@link java.util.Set} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedSet} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,orNaturalOrder,com.google.common.collect.Maps:orNaturalOrder(java.util.Comparator),786,793,"/**
 * Returns the provided comparator or natural order if null.
 * @param comparator Comparator to use, or null for natural order.
 * @return Comparator object.
 */
","* Returns the specified comparator if not null; otherwise returns {@code Ordering.natural()}.
   * This method is an abomination of generics; the only purpose of this method is to contain the
   * ugly type-casting in one place.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,reverse,com.google.common.collect.ReverseNaturalOrdering:reverse(),43,46,"/**
 * Reverses the order of the current Ordering. Returns natural order.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,comparator,com.google.common.collect.SortedIterables:comparator(java.util.SortedSet),51,60,"/**
 * Returns the comparator of a sorted set, or natural ordering if null.
 * @param sortedSet The sorted set to get the comparator from.
 * @return Comparator used by the sorted set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:comparator(),500,503,"/**
 * Returns a natural order comparator for Cut objects.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:comparator(),332,335,"/**
 * Returns a natural order comparator for Cut objects.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,comparator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:comparator(),734,737,"/**
 * Returns a natural order comparator for Cut objects.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,firstEntry,com.google.common.collect.TreeMultiset:firstEntry(),66,70,"/**
 * Returns the first entry in the map or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,lastEntry,com.google.common.collect.TreeMultiset:lastEntry(),72,76,"/**
* Returns the last entry in the map, or null if the map is empty.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.AbstractSortedMultiset:descendingMultiset(),122,126,"/**
 * Returns a descending multiset view of this sorted multiset.
 * Returns a new multiset or existing one if already created.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$Values:contains(java.lang.Object),217,220,"/**
 * Checks if the map contains the specified value.
 * @param o value to check for
 * @return true if value is present, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.StandardTable:containsValue(java.lang.Object),109,112,"/**
* Checks if the map contains the specified value.
* @param value Value to search for, can be null.
* @return True if value is found, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,isEmpty,com.google.common.collect.ImmutableTable:isEmpty(),85,88,"/**
 * Checks if the collection is empty.
 * @return True if the collection is empty, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,putAll,com.google.common.collect.AbstractTable:putAll(com.google.common.collect.Table),109,114,"/**
* Copies all cells from the given table into this table.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,cellSet,com.google.common.collect.AbstractTable:cellSet(),118,122,"/**
 * Returns a set of cells. Lazily initializes if null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,values,com.google.common.collect.AbstractTable:values(),181,185,"/**
 * Returns a collection of the values in this map.
 * Lazily initializes if not already created.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.AbstractTable:equals(java.lang.Object),233,236,"/**
 * Checks if two objects are equal using a default implementation.
 * @param obj The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ArrayTable:toString(),244,247,"/**
 * Returns a string representation of the row map.
 */",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,toString,com.google.common.collect.ImmutableTable:toString(),244,247,"/**
 * Returns a string representation of the object, based on rowMap().
 */",Returns the string representation {@code rowMap().toString()}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ByFunctionOrdering.java,<init>,"com.google.common.collect.ByFunctionOrdering:<init>(com.google.common.base.Function,com.google.common.collect.Ordering)",39,42,"/**
 * Constructor for ByFunctionOrdering.
 * @param function Function to apply; @param ordering Ordering for results.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparatorOrdering.java,<init>,com.google.common.collect.ComparatorOrdering:<init>(java.util.Comparator),34,36,"/**
 * Initializes the ComparatorOrdering with the given comparator.
 * @param comparator The comparator to use for ordering.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,"com.google.common.collect.CompoundOrdering:<init>(java.util.Comparator,java.util.Comparator)",33,36,"/**
 * Creates a CompoundOrdering with a primary and secondary comparator.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(com.google.common.collect.ImmutableMap),35,37,"/**
 * Initializes the ExplicitOrdering with a rank map.
 * @param rankMap Map of items to their ranks.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LexicographicalOrdering.java,<init>,com.google.common.collect.LexicographicalOrdering:<init>(java.util.Comparator),33,35,"/**
 * Sets the comparator used for lexicographical ordering of elements.
 * @param elementOrder Comparator for ordering elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,<init>,com.google.common.collect.NaturalOrdering:<init>(),81,81,"/**
 * Private constructor to prevent direct instantiation of NaturalOrdering.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,<init>,com.google.common.collect.NullsFirstOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
 * Sets the ordering to use for null-aware sorting.
 * @param ordering Ordering to apply; nulls will come first.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,<init>,com.google.common.collect.NullsLastOrdering:<init>(com.google.common.collect.Ordering),32,34,"/**
 * Sets the ordering to use for elements, placing nulls last.
 * @param ordering Ordering to apply; nulls will be sorted last.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseNaturalOrdering.java,<init>,com.google.common.collect.ReverseNaturalOrdering:<init>(),100,100,"/**
* Private constructor to prevent instantiation of this class.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,<init>,com.google.common.collect.ReverseOrdering:<init>(com.google.common.collect.Ordering),34,36,"/**
* Initializes a ReverseOrdering with a given forward ordering.
* @param forwardOrder The ordering to reverse. Must not be null.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UsingToStringOrdering.java,<init>,com.google.common.collect.UsingToStringOrdering:<init>(),44,44,"/**
* Private constructor to prevent direct instantiation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,writeObject,com.google.common.collect.ArrayListMultimap:writeObject(java.io.ObjectOutputStream),160,165,"/**
* Writes the object to an ObjectOutputStream.
* Writes default state and multimap data.
*/
","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,writeObject,com.google.common.collect.HashMultimap:writeObject(java.io.ObjectOutputStream),136,141,"/**
 * Writes the object to the output stream for serialization.
 */","* @serialData expectedValuesPerKey, number of distinct keys, and then for each distinct key: the
   *     key, number of values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,writeObject,com.google.common.collect.ImmutableListMultimap:writeObject(java.io.ObjectOutputStream),512,517,"/**
* Writes the object to an ObjectOutputStream.
* Writes default state and multimap data.
*/
","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,readObject,com.google.common.collect.ArrayListMultimap:readObject(java.io.ObjectInputStream),167,176,"/**
* Restores the object state from an ObjectInputStream.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultimap,"com.google.common.collect.Serialization:populateMultimap(com.google.common.collect.Multimap,java.io.ObjectInputStream)",162,167,"/**
 * Populates a multimap from an ObjectInputStream.
 * @param multimap Multimap to populate.
 * @param stream Input stream containing multimap data.
 */
","* Populates a multimap by reading an input stream, as part of deserialization. See {@link
   * #writeMultimap} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,<init>,"com.google.common.collect.TableCollectors$MutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",176,180,"/**
 * Constructs a MutableCell with the given row, column, and value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,"com.google.common.collect.Tables$ImmutableCell:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",140,147,"/**
 * Constructs a new ImmutableCell with the given row, column, and value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,keySet,com.google.common.collect.ArrayTable$ArrayMap:keySet(),197,200,"/**
* Returns the key set of the underlying map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getKey,com.google.common.collect.ArrayTable$ArrayMap:getKey(int),202,204,"/**
 * Retrieves the key at the specified index.
 * @param index index of the key to retrieve
 * @return Key object at the given index
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable$ArrayMap:put(java.lang.Object,java.lang.Object)",278,286,"/**
 * Associates the specified value with the given key.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return The previous value associated with the key.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,columnKeySet,com.google.common.collect.ArrayTable:columnKeySet(),645,648,"/**
 * Returns the set of column keys.
 * Uses the columnKeyToIndex map's keyset.
 */","* Returns an immutable set of the valid column keys, including those that are associated with
   * null values only.
   *
   * @return immutable set of column keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,rowKeySet,com.google.common.collect.ArrayTable:rowKeySet(),737,740,"/**
 * Returns a set of row keys.
 * Uses the rowKeyToIndex map's keyset.
 */","* Returns an immutable set of the valid row keys, including those that are associated with null
   * values only.
   *
   * @return immutable set of row keys",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,getKey,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:getKey(int),104,106,"/**
 * Retrieves the key at the specified index.
 * @param index Index of the key to retrieve.
 * @return The key at the given index.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,toString,com.google.common.collect.ExplicitOrdering:toString(),66,69,"/**
 * Returns a string representation of the Ordering object.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:createKeySet(),1136,1139,"/**
* Returns the key set of this immutable map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,readResolve,com.google.common.collect.ImmutableMapKeySet$KeySetSerializedForm:readResolve(),99,101,"/**
 * Returns the key set of the map after deserialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,keySet,com.google.common.collect.ImmutableMultimap:keySet(),584,587,"/**
 * Returns a set view of the map's keys.
 */","* Returns an immutable set of the distinct keys in this multimap, in the same order as they
   * appear in this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,columnKeySet,com.google.common.collect.ImmutableTable:columnKeySet(),343,346,"/**
 * Returns the set of column keys.
 * Uses the columnMap() method to obtain the keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$KeySet$SerializedForm:readResolve(),364,366,"/**
 * Returns the keySet of the map during deserialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,contains,com.google.common.collect.Sets$PowerSet:contains(java.lang.Object),1750,1757,"/**
 * Checks if this set contains all elements of the given set.
 * @param obj the set to check, can be null
 * @return true if contains all elements, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entryIterator,com.google.common.collect.ArrayTable$ArrayMap:entryIterator(),246,254,"/**
 * Returns an iterator over the map's entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,isEmpty,com.google.common.collect.ArrayTable$ArrayMap:isEmpty(),219,222,"/**
 * Checks if the key index is empty.
 * @return True if empty, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsKey,com.google.common.collect.ArrayTable$ArrayMap:containsKey(java.lang.Object),263,266,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the key exists, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsColumn,com.google.common.collect.ArrayTable:containsColumn(java.lang.Object),410,413,"/**
 * Checks if a column with the given key exists.
 * @param columnKey The key of the column to check.
 * @return True if the column exists, false otherwise.
 */
","* Returns {@code true} if the provided column key is among the column keys provided when the
   * table was constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,containsRow,com.google.common.collect.ArrayTable:containsRow(java.lang.Object),419,422,"/**
 * Checks if a row with the given key exists.
 * @param rowKey The key of the row to check.
 * @return True if the row exists, false otherwise.
 */
","* Returns {@code true} if the provided row key is among the row keys provided when the table was
   * constructed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsKey,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:containsKey(java.lang.Object),1141,1144,"/**
* Checks if the map contains the specified key.
* @param key The key to check.
* @return True if the map contains the key, false otherwise.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,contains,com.google.common.collect.ImmutableMapKeySet:contains(java.lang.Object),58,61,"/**
 * Checks if the map contains the specified object as a key.
 * @param object The object to check for.
 * @return True if the map contains the object, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,containsKey,com.google.common.collect.ImmutableMultimap:containsKey(java.lang.Object),563,566,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the map contains the key, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellIterator,com.google.common.collect.ArrayTable:cellIterator(),549,557,"/**
 * Returns an iterator over the cells in this grid.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesIterator,com.google.common.collect.ArrayTable:valuesIterator(),791,799,"/**
 * Returns an iterator over the values in this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,asList,com.google.common.collect.EmptyContiguousSet:asList(),118,121,"/**
 * Returns an empty immutable list.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,get,com.google.common.collect.ImmutableListMultimap:get(java.lang.Object),446,451,"/**
 * Retrieves a list associated with the given key.
 * @param key the key to look up
 * @return List of values or an empty list if key not found.
 */
","* Returns an immutable list of the values for the given key. If no mappings in the multimap have
   * the provided key, an empty immutable list is returned. The values are in the same order as the
   * parameters used to build this multimap.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,createValues,com.google.common.collect.RegularImmutableTable:createValues(),86,89,"/**
 * Creates a collection of values. Returns empty list if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,column,com.google.common.collect.ImmutableTable:column(java.lang.Object),336,341,"/**
 * Retrieves a map for a given column key.
 * @param columnKey The key representing the column.
 * @return Map for the column or an empty map if not found.
 */
","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code columnKey} is {@code null}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$TypeTable:<init>(),280,282,"/**
 * Initializes the TypeTable with an empty immutable map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry:<init>(java.lang.Object,java.lang.Object)",52,55,"/**
 * Constructs an immutable map entry with the given key and value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,"com.google.common.collect.ImmutableMultimap$Builder:put(java.lang.Object,java.lang.Object)",238,248,"/**
 * Associates the specified value with the given key.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return this builder
 */
",Adds a key-value mapping to the built multimap.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$BigIntegerDomain:offset(java.math.BigInteger,long)",224,228,"/**
 * Calculates an offset from an origin by a given distance.
 * @param origin The starting BigInteger.
 * @param distance The distance to add (must be non-negative).
 * @return The offset BigInteger.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$LongDomain:offset(java.lang.Long,long)",147,155,"/**
 * Calculates the offset from a given origin by a given distance.
 * @param origin The starting point.
 * @param distance The distance to add.
 * @return The calculated offset.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain:offset(java.lang.Comparable,long)",263,274,"/**
 * Calculates the point offset from the origin by the given distance.
 * @param origin starting point
 * @param distance distance to offset
 * @return Point offset from the origin
 */
","* Returns, conceptually, ""origin + distance"", or equivalently, the result of calling {@link
   * #next} on {@code origin} {@code distance} times.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliterator:trySplit(),376,399,"/**
 * Attempts to split the spliterator into two sub-spliterators.
 * @return A sub-spliterator or null if splitting is not possible.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToDouble,"com.google.common.collect.CollectSpliterators:flatMapToDouble(java.util.Spliterator,java.util.function.Function,int,long)",275,290,"/**
 * Creates a Spliterator.OfDouble from a Spliterator and a function.
 * @param fromSpliterator The input Spliterator.
 * @param function Transforms elements to Spliterator.OfDouble.
 * @param topCharacteristics Characteristics of the resulting Spliterator.
 * @param topSize Estimated size of the resulting Spliterator.
 */
","* Returns a {@code Spliterator.OfDouble} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToInt,"com.google.common.collect.CollectSpliterators:flatMapToInt(java.util.Spliterator,java.util.function.Function,int,long)",231,246,"/**
 * Creates a Spliterator.OfInt by flattening a Spliterator using a function.
 * @param fromSpliterator Source Spliterator
 * @param function Function to map elements to Spliterator.OfInt
 * @param topCharacteristics Top-level characteristics
 * @param topSize Estimated size of the flattened stream
 * @return A Spliterator.OfInt representing the flattened stream
 */
","* Returns a {@code Spliterator.OfInt} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMapToLong,"com.google.common.collect.CollectSpliterators:flatMapToLong(java.util.Spliterator,java.util.function.Function,int,long)",253,268,"/**
 * Creates a Spliterator.OfLong from a Spliterator by applying a function.
 * @param fromSpliterator Input Spliterator
 * @param function Function to map elements to long Spliterator
 * @param topCharacteristics Characteristics of the resulting Spliterator
 * @param topSize Estimated size of the resulting Spliterator
 * @return A Spliterator.OfLong
 */
","* Returns a {@code Spliterator.OfLong} that iterates over the elements of the spliterators
   * generated by applying {@code function} to the elements of {@code fromSpliterator}. (If {@code
   * function} returns {@code null} for an input, it is replaced with an empty stream.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,flatMap,"com.google.common.collect.CollectSpliterators:flatMap(java.util.Spliterator,java.util.function.Function,int,long)",208,224,"/**
 * Creates a flatMap Spliterator from an input Spliterator and function.
 * @param fromSpliterator Input Spliterator.
 * @param function Transforms elements into Spliterators.
 * @param topCharacteristics Top-level characteristics.
 * @param topSize Estimated size.
 * @return A new FlatMapSpliterator.
 */
","* Returns a {@code Spliterator} that iterates over the elements of the spliterators generated by
   * applying {@code function} to the elements of {@code fromSpliterator}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSet:<init>(java.util.Set,com.google.common.base.Predicate)",1282,1284,"/**
* Constructs a FilteredSet with the given set and predicate.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,containsAll,com.google.common.collect.Collections2$FilteredCollection:containsAll(java.util.Collection),164,167,"/**
* Checks if this set contains all elements of the given collection.
* @param collection Collection to check for containment.
* @return True if all elements are contained, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContainsAll,com.google.common.collect.ForwardingCollection:standardContainsAll(java.util.Collection),149,151,"/**
 * Checks if this collection contains all elements of the given collection.
 */","* A sensible definition of {@link #containsAll} in terms of {@link #contains} . If you override
   * {@link #contains}, you may wish to override {@link #containsAll} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,containsAll,com.google.common.collect.RegularContiguousSet:containsAll(java.util.Collection),185,188,"/**
* Checks if this collection contains all elements of the target collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:containsAll(java.util.Collection),1015,1020,"/**
* Checks if this collection contains all elements of the given collection.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$OrderedPermutationIterator:calculateNextPermutation(),524,540,"/**
 * Calculates the next lexicographical permutation of the sequence.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateNextPermutation,com.google.common.collect.Collections2$PermutationIterator:calculateNextPermutation(),656,685,"/**
 * Calculates the next lexicographical permutation of the list.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,contains,com.google.common.collect.CompactHashMap$EntrySetView:contains(java.lang.Object),827,838,"/**
 * Checks if the map contains the specified entry.
 * @param o the entry to search for
 * @return true if found, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$KeySetView:remove(java.lang.Object),729,735,"/**
 * Removes the specified object from the map.
 * @param o object to remove; returns true if removed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySetIterator,com.google.common.collect.CompactHashMap:keySetIterator(),768,780,"/**
 * Returns an iterator over the map's keys.
 * Returns an iterator over the delegate's keys if available.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySetIterator,com.google.common.collect.CompactHashMap:entrySetIterator(),874,885,"/**
 * Returns an iterator over the map entries. Returns null if delegate is null.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,size,com.google.common.collect.CompactHashMap:size(),953,957,"/**
 * Returns the number of elements in the map, or a cached size.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,valuesIterator,com.google.common.collect.CompactHashMap:valuesIterator(),1052,1064,"/**
 * Returns an iterator over the values in the map.
 * Returns an empty iterator if the map is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$KeySetView:spliterator(),742,752,"/**
 * Returns a Spliterator for the map's keys. Uses delegate if available.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$ValuesView:spliterator(),1013,1022,"/**
 * Returns a Spliterator for the values of this map.
 * Returns an empty Spliterator if delegate allocation is needed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,next,com.google.common.collect.CompactHashMap$Itr:next(),638,649,"/**
 * Returns the next element in this iterator.
 * @return The next element, or throws NoSuchElementException.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setHashTableMask,com.google.common.collect.CompactHashMap:setHashTableMask(int),311,315,"/**
 * Sets the hash table mask based on the provided mask value.
 * @param mask The mask value used to determine the hash table size.
 */
",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setHashTableMask,com.google.common.collect.CompactHashSet:setHashTableMask(int),279,283,"/**
 * Sets the hash table mask based on the provided mask value.
 */",Stores the hash table mask as the number of bits needed to represent an index.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entry,com.google.common.collect.CompactHashMap:entry(int),1188,1190,"/**
 * Retrieves an entry from the required entries array at index i.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setEntry,"com.google.common.collect.CompactHashMap:setEntry(int,int)",1200,1202,"/**
* Sets the value at the specified index in the entries array.
* @param i index of the entry to set
* @param value the new value for the entry
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,key,com.google.common.collect.CompactHashMap:key(int),1178,1181,"/**
 * Retrieves the key at the specified index.
 * @param i index of the key to retrieve
 * @return the key at the given index
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setKey,"com.google.common.collect.CompactHashMap:setKey(int,java.lang.Object)",1192,1194,"/**
* Sets the key at the specified index in the required keys array.
* @param i index of the key to set
* @param key the key to set at the index
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeEntries,com.google.common.collect.CompactHashMap:resizeEntries(int),426,430,"/**
 * Resizes the entries, keys, and values arrays to the new capacity.
 */
","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,value,com.google.common.collect.CompactHashMap:value(int),1183,1186,"/**
 * Retrieves the value at the specified index from the values array.
 * @param i index of the value to retrieve
 * @return Value at the given index, cast to type V.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,"com.google.common.collect.CompactHashMap:setValue(int,java.lang.Object)",1196,1198,"/**
* Sets the value at the specified index in the requireValues array.
* @param i index of the value to set
* @param value the value to set at the index
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,keySet,com.google.common.collect.CompactHashMap:keySet(),687,690,"/**
* Returns a set view of the map's keys. Lazily initialized.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,entrySet,com.google.common.collect.CompactHashMap:entrySet(),797,800,"/**
 * Returns a set view of the map's entries. Lazily initialized.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,values,com.google.common.collect.CompactHashMap:values(),980,983,"/**
 * Returns a collection of the values in this map.
 * Lazily initializes valuesView if it's null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isUsingHashFloodingResistance,com.google.common.collect.CompactHashSet:isUsingHashFloodingResistance(),273,276,"/**
 * Checks if hash flooding resistance is enabled.
 * Returns true if a delegate is present, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,iterator,com.google.common.collect.CompactHashSet:iterator(),539,588,"/**
 * Returns an iterator over the elements in this set.
 * Creates a delegate iterator or a custom one.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,size,com.google.common.collect.CompactHashSet:size(),615,619,"/**
 * Returns the number of elements in the set.
 * Uses delegate if available, otherwise returns cached size.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,entry,com.google.common.collect.CompactHashSet:entry(int),744,746,"/**
 * Retrieves an entry from the required entries array at index i.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setEntry,"com.google.common.collect.CompactHashSet:setEntry(int,int)",752,754,"/**
* Sets the value at the specified index in the entries array.
* @param i index of the entry to set
* @param value the value to set at the index
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeEntries,com.google.common.collect.CompactHashSet:resizeEntries(int),378,381,"/**
 * Resizes the entries and elements arrays to the specified capacity.
 */
","* Resizes the internal entries array to the specified capacity, which may be greater or less than
   * the current capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,spliterator,com.google.common.collect.CompactHashSet:spliterator(),590,600,"/**
 * Returns a Spliterator for the collection.
 * Uses delegate if available, otherwise creates a new one.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(),626,633,"/**
 * Returns an array representing the set.
 * Uses delegate's toArray() if available, otherwise copies elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,element,com.google.common.collect.CompactHashSet:element(int),739,742,"/**
 * Retrieves the element at the specified index.
 * @param i index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,setElement,"com.google.common.collect.CompactHashSet:setElement(int,java.lang.Object)",748,750,"/**
* Sets the element at the specified index to the given value.
* @param i index of the element to set
* @param value the value to set at the index
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,tableSize,com.google.common.collect.CompactHashing:tableSize(int),70,73,"/**
 * Calculates the hash table size, ensuring it meets minimum requirements.
 * @param expectedSize the expected number of entries
 * @return the calculated table size
 */
","* Returns the power of 2 hashtable size required to hold the expected number of items or the
   * minimum hashtable size, whichever is greater.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,link,com.google.common.collect.CompactLinkedHashMap:link(int),310,312,"/**
 * Retrieves a link at the specified index.
 * @param i index of the link to retrieve
 * @return the link at the given index
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setLink,"com.google.common.collect.CompactLinkedHashMap:setLink(int,long)",314,316,"/**
 * Sets the link at the specified index.
 * @param i index of the link to set
 * @param value the link value to set
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getPredecessor,com.google.common.collect.CompactLinkedHashSet:getPredecessor(int),162,164,"/**
 * Gets the predecessor of an entry using requirePredecessors().
 * @param entry The entry to find the predecessor for.
 * @return The predecessor of the entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setPredecessor,"com.google.common.collect.CompactLinkedHashSet:setPredecessor(int,int)",175,177,"/**
* Sets the predecessor of an entry in the requirePredecessors array.
* @param entry The index of the entry.
* @param pred The predecessor value (incremented by 1).
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,getSuccessor,com.google.common.collect.CompactLinkedHashSet:getSuccessor(int),166,169,"/**
 * Gets the successor of a given entry.
 * @param entry The entry to find the successor for.
 * @return The successor of the entry.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSuccessor,"com.google.common.collect.CompactLinkedHashSet:setSuccessor(int,int)",171,173,"/**
* Sets the successor for a given entry in the requireSuccessors array.
* @param entry Index of the entry to set the successor for.
* @param succ The successor value to set (incremented by 1).
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(int,int)",242,242,"/**
* Compares two integers and returns a comparison chain.
* @param left the first integer
* @param right the second integer
*/
","* Compares two {@code int} values as specified by {@link Integer#compare}, <i>if</i> the result
   * of this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,compare,"com.google.common.primitives.Ints$LexicographicalComparator:compare(int[],int[])",464,476,"/**
 * Compares two arrays lexicographically.
 * @param left The first array to compare.
 * @param right The second array to compare.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compare,"com.google.common.collect.ComparisonChain$1:compare(long,long)",248,248,"/**
 * Compares two long values and returns a comparison chain.
 */","* Compares two {@code long} values as specified by {@link Long#compare}, <i>if</i> the result of
   * this comparison chain has not already been determined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,compare,"com.google.common.primitives.Longs$LexicographicalComparator:compare(long[],long[])",544,554,"/**
 * Compares two long arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareTrueFirst,"com.google.common.collect.ComparisonChain$1:compareTrueFirst(boolean,boolean)",287,287,"/**
* Compares two booleans, prioritizing the 'left' value as greater.
*/","* Compares two {@code boolean} values, considering {@code true} to be less than {@code false},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#trueFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#trueFirst()})
   * </pre>
   *
   * @since 12.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ComparisonChain.java,compareFalseFirst,"com.google.common.collect.ComparisonChain$1:compareFalseFirst(boolean,boolean)",301,301,"/**
* Compares two booleans, returning false if left is false.
*/","* Compares two {@code boolean} values, considering {@code false} to be less than {@code true},
   * <i>if</i> the result of this comparison chain has not already been determined.
   *
   * <p>Java 8+ users: you can get the equivalent from {@link Booleans#falseFirst()}. For example:
   *
   * <pre>
   * Comparator.comparing(Foo::isBar, {@link Booleans#falseFirst()})
   * </pre>
   *
   * @since 12.0 (present as {@code compare} since 2.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,compare,"com.google.common.primitives.Booleans$LexicographicalComparator:compare(boolean[],boolean[])",322,332,"/**
 * Compares two boolean arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingIterator.java,next,com.google.common.collect.ConcurrentHashMultiset$3:next(),54,59,"/**
 * Returns the next element in the sequence.
 * Delegates to the underlying iterator.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,readObject,com.google.common.collect.ConcurrentHashMultiset:readObject(java.io.ObjectInputStream),602,609,"/**
 * Reads object state from an ObjectInputStream.
 * @param stream Input stream to read the object from.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,leastValueAbove,com.google.common.collect.Cut$BelowAll:leastValueAbove(com.google.common.collect.DiscreteDomain),177,180,"/**
 * Returns the smallest value in the domain.
 * @param domain Discrete domain of comparable values
 * @return The smallest value in the domain.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,greatestValueBelow,com.google.common.collect.Cut$AboveAll:greatestValueBelow(com.google.common.collect.DiscreteDomain),282,285,"/**
 * Returns the greatest value within the provided discrete domain.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$AboveValue:isLessThan(java.lang.Comparable),399,402,"/**
* Checks if this endpoint is less than the given value.
* @param value The value to compare with.
* @return True if this endpoint is less than the value.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,isLessThan,com.google.common.collect.Cut$BelowValue:isLessThan(java.lang.Comparable),318,321,"/**
* Checks if the endpoint is less than or equal to the given value.
* @param value the value to compare with the endpoint
* @return true if endpoint <= value, false otherwise
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equalsOrThrow,"com.google.common.collect.RegularContiguousSet:equalsOrThrow(java.lang.Comparable,java.lang.Comparable)",115,117,"/**
 * Compares two Comparables, throws if right is null.
 * @param left The left Comparable.
 * @param right The right Comparable, must not be null.
 * @return True if equal, otherwise throws an exception.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,<init>,com.google.common.collect.ContiguousSet:<init>(com.google.common.collect.DiscreteDomain),147,150,"/**
* Constructs a contiguous set backed by the given discrete domain.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,<init>,"com.google.common.collect.RegularImmutableSortedSet:<init>(com.google.common.collect.ImmutableList,java.util.Comparator)",49,52,"/**
 * Constructs a RegularImmutableSortedSet from a list & comparator.
 * @param elements Immutable list to initialize the set.
 * @param comparator Comparator for sorting the elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveAll:<init>(),230,233,"/**
 * Private constructor; calls super() with an empty string.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$AboveValue:<init>(java.lang.Comparable),395,397,"/**
 * Constructs a new AboveValue with the given endpoint.
 * @param endpoint The endpoint to wrap. Must not be null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowAll:<init>(),125,133,"/**
 * Private constructor. Overrides methods to prevent endpoint access.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,<init>,com.google.common.collect.Cut$BelowValue:<init>(java.lang.Comparable),314,316,"/**
 * Constructs a BelowValue object, initializing with the given endpoint.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$AboveValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",414,424,"/**
 * Creates a cut with a lower bound based on the given bound type.
 * @param boundType Lower bound type (OPEN/CLOSED)
 * @param domain Discrete domain for the cut
 * @return Cut object with the specified lower bound
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasLowerBound,com.google.common.collect.Range:hasLowerBound(),338,340,"/**
 * Checks if a lower bound exists.
 * @return True if a lower bound is set, false otherwise.
 */
",Returns {@code true} if this range has a lower endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$AboveValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",426,436,"/**
 * Returns a Cut with the specified upper bound type.
 * @param boundType The type of bound (OPEN/CLOSED)
 * @param domain The discrete domain.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,compareTo,com.google.common.collect.Cut:compareTo(com.google.common.collect.Cut),71,85,"/**
 * Compares this cut to another cut.
 * @param that the cut to compare to
 * @return -1, 0, or 1 based on the comparison.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,hasUpperBound,com.google.common.collect.Range:hasUpperBound(),364,366,"/**
 * Checks if an upper bound exists, not equal to Cut.aboveAll.
 */",Returns {@code true} if this range has an upper endpoint.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$AboveValue:canonical(com.google.common.collect.DiscreteDomain),458,462,"/**
 * Returns the canonical Cut for the given discrete domain.
 * Returns the Cut below the least value or above all.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,<init>,com.google.common.collect.DescendingImmutableSortedMultiset:<init>(com.google.common.collect.ImmutableSortedMultiset),31,33,"/**
* Initializes a DescendingImmutableSortedMultiset from a forward multiset.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,"com.google.common.collect.RegularImmutableSortedMultiset:<init>(com.google.common.collect.RegularImmutableSortedSet,long[],int,int)",54,60,"/**
 * Constructs a RegularImmutableSortedMultiset.
 * @param elementSet Set of elements; cumulativeCounts for counts; offset/length for subset.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,elementSet,com.google.common.collect.DescendingImmutableSortedMultiset:elementSet(),55,58,"/**
 * Returns a sorted set of the elements in this map.
 * Uses the forward map's elementSet in descending order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueComparator,com.google.common.collect.ImmutableSetMultimap:valueComparator(),673,677,"/**
 * Returns the comparator of the empty set, or null if absent.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,comparator,com.google.common.collect.ImmutableSortedMultiset:comparator(),328,331,"/**
 * Returns a comparator for elements in this set, or null if absent.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,indexOf,com.google.common.collect.DescendingImmutableSortedSet:indexOf(java.lang.Object),106,114,"/**
 * Returns the index of the first occurrence of target, or -1.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,entrySet,com.google.common.collect.DescendingMultiset:entrySet(),116,120,"/**
 * Returns a set of entries for the map. Lazily initializes if needed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,<init>,com.google.common.collect.DiscreteDomain:<init>(),250,252,"/**
 * Default constructor for DiscreteDomain. Calls the other constructor.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,tailSetImpl,"com.google.common.collect.EmptyContiguousSet:tailSetImpl(java.lang.Object,boolean)",81,84,"/**
 * Returns a tail set view of this set from the specified element.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,subSetImpl,"com.google.common.collect.EmptyContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",75,79,"/**
 * Returns a sub-set from 'fromElement' to 'toElement'.
 * Inclusive flags control the boundaries of the sub-set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,headSetImpl,"com.google.common.collect.EmptyContiguousSet:headSetImpl(java.lang.Object,boolean)",70,73,"/**
 * Returns a head set containing elements less than `toElement`.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,writeObject,com.google.common.collect.EnumBiMap:writeObject(java.io.ObjectOutputStream),142,148,"/**
* Writes the object to an ObjectOutputStream.
* Writes type info and map data for serialization.
*/
","* @serialData the key class, value class, number of entries, first key, first value, second key,
   *     second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,writeObject,com.google.common.collect.EnumHashBiMap:writeObject(java.io.ObjectOutputStream),117,122,"/**
 * Writes the object to an ObjectOutputStream.
 * Serializes keyType/object and map data.
 */
","* @serialData the key class, number of entries, first key, first value, second key, second value,
   *     and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeObject,com.google.common.collect.HashBiMap:writeObject(java.io.ObjectOutputStream),783,788,"/**
* Writes object state to stream.
* Uses default mechanism then writes the map.
*/
","* @serialData the number of entries, first key, first value, second key, second value, and so on.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,next,com.google.common.collect.EnumMultiset$Itr:next(),230,239,"/**
 * Returns the next element in the iteration.
 * Throws NoSuchElementException if no next element exists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,checkIsE,com.google.common.collect.EnumMultiset:checkIsE(java.lang.Object),113,118,"/**
 * Checks if the element is of the expected type.
 * Throws ClassCastException if not.
 */
","* Returns {@code element} cast to {@code E}, if it actually is a nonnull E. Otherwise, throws
   * either a NullPointerException or a ClassCastException as appropriate.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,count,com.google.common.collect.EnumMultiset:count(java.lang.Object),130,138,"/**
 * Counts occurrences of an element in the collection.
 * @param element Element to count; returns 0 if null/invalid.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,writeObject,com.google.common.collect.EnumMultiset:writeObject(java.io.ObjectOutputStream),298,303,"/**
* Writes object state to the stream during serialization.
* Writes type and multiset to the stream.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,writeObject,com.google.common.collect.HashMultiset:writeObject(java.io.ObjectOutputStream),80,85,"/**
 * Writes the object to the output stream during serialization.
 */
","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,writeObject,com.google.common.collect.LinkedHashMultiset:writeObject(java.io.ObjectOutputStream),88,93,"/**
* Writes object state to the stream, including the multiset.
*/
","* @serialData the number of distinct elements, the first element, its count, the second element,
   *     its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,writeObject,com.google.common.collect.TreeMultiset:writeObject(java.io.ObjectOutputStream),1068,1074,"/**
 * Writes object to stream, including comparator and multiset data.
 */
","* @serialData the comparator, the number of distinct elements, the first element, its count, the
   *     second element, its count, and so on",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,rank,com.google.common.collect.ExplicitOrdering:rank(java.lang.Object),44,50,"/**
 * Retrieves the rank of a value from the rank map.
 * @param value The value to retrieve the rank for.
 * @return The rank of the value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,clear,com.google.common.collect.FilteredEntryMultimap$AsMap:clear(),181,184,"/**
 * Clears all entries from the filtered multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,<init>,com.google.common.collect.ImmutableRangeMap$Builder:<init>(),114,116,"/**
 * Constructs a new Builder with an empty ArrayList for entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,<init>,com.google.common.collect.ImmutableRangeSet$Builder:<init>(),760,762,"/**
 * Constructs a new RangeFinderBuilder with an empty list of ranges.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,<init>,com.google.common.collect.ImmutableTable$Builder:<init>(),200,200,"/**
 * Constructs a new Builder instance.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableTable#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$1:<init>(),73,73,"/**
 * Private constructor to prevent instantiation of the Files class.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$1:<init>(),47,47,"/**
 * Private constructor to prevent instantiation of the Resources class.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeAll,com.google.common.collect.FilteredEntryMultimap:removeAll(java.lang.Object),106,109,"/**
 * Removes all values for a key.
 * @param key The key to remove values for.
 * @return Collection of removed values or empty collection.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,unfiltered,com.google.common.collect.FilteredKeyListMultimap:unfiltered(),36,39,"/**
 * Returns the unfiltered multimap. Casts the result to ListMultimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,delegate,com.google.common.collect.ForwardingList:delegate(),60,61,"/**
 * Delegates to the concrete implementation for element list.
 * @return List of elements of type E.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,removeAll,com.google.common.collect.FilteredKeyMultimap:removeAll(java.lang.Object),79,82,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return Values removed, or an empty collection if key absent.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,from,com.google.common.collect.FluentIterable:from(java.lang.Object[]),160,162,"/**
 * Creates a FluentIterable from an array of elements.
 * @param elements array to create the iterable from
 * @return FluentIterable containing the array elements
 */
","* Returns a fluent iterable containing {@code elements} in the specified order.
   *
   * <p>The returned iterable is an unmodifiable view of the input array.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#of(Object[])
   * Stream.of(T...)}.
   *
   * @since 20.0 (since 18.0 as an overload of {@code of})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,of,com.google.common.collect.FluentIterable:of(),311,314,"/**
 * Creates an empty FluentIterable.
 * Returns an immutable, empty FluentIterable.
 */","* Returns a fluent iterable containing no elements.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#empty}.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,isEmpty,com.google.common.collect.FluentIterable:isEmpty(),605,607,"/**
 * Checks if the collection is empty.
 * Returns true if empty, false otherwise.
 */
","* Determines whether this fluent iterable is empty.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,append,com.google.common.collect.FluentIterable:append(java.lang.Iterable),392,394,"/**
 * Appends another iterable to this iterable.
 * @param other Iterable to append; elements must be of type E.
 * @return A new FluentIterable containing elements from both.
 */
","* Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable,
   * followed by those of {@code other}. The iterators are not polled until necessary.
   *
   * <p>The returned iterable's {@code Iterator} supports {@code remove()} when the corresponding
   * {@code Iterator} supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#concat}.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable)",429,432,"/**
 * Concatenates two iterables into a single iterable.
 * @param a First iterable.
 * @param b Second iterable.
 * @return Combined iterable.
 */
","* Combines two iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}. The source
   * iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Stream.concat(a, b)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",445,448,"/**
 * Concatenates three iterables into a single iterable.
 * @param a, b, c Iterables to be concatenated.
 * @return A new iterable containing elements from all inputs.
 */
","* Combines three iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,"com.google.common.collect.Iterables:concat(java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)",462,468,"/**
 * Concatenates four iterables into a single iterable.
 * @param a, b, c, d Iterables to concatenate.
 * @return A new iterable containing all elements.
 */
","* Combines four iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements in {@code a}, followed by the elements in {@code b}, followed by the
   * elements in {@code c}, followed by the elements in {@code d}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(a, b, c, d)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,stream,com.google.common.collect.FluentIterable:stream(),850,852,"/**
 * Returns a stream backed by the delegate collection.
 */","* Returns a stream of this fluent iterable's contents (similar to calling {@link
   * Collection#stream} on a collection).
   *
   * <p><b>Note:</b> the earlier in the chain you can switch to {@code Stream} usage (ideally not
   * going through {@code FluentIterable} at all), the more performant and idiomatic your code will
   * be. This method is a transitional aid, to be used only when really necessary.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.collect.ForwardingBlockingDeque:remainingCapacity(),61,64,"/**
 * Returns the remaining capacity, delegating to the underlying object.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putFirst,com.google.common.collect.ForwardingBlockingDeque:putFirst(java.lang.Object),66,69,"/**
* Adds an element to the head of the queue.
* Delegates to the underlying queue implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,putLast,com.google.common.collect.ForwardingBlockingDeque:putLast(java.lang.Object),71,74,"/**
 * Adds the specified element to the end of the queue.
 * Delegates to the underlying queue's putLast method.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerFirst,"com.google.common.collect.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",76,79,"/**
* Offers an element to the queue's head, waiting up to timeout.
* @param e element to offer
* @param timeout timeout duration
* @param unit timeout unit
* @return true if successful, false if timeout expires
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offerLast,"com.google.common.collect.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",81,84,"/**
* Offers an element to the queue with a timeout.
* @param e element to offer, timeout duration, and unit.
* @return True if offered, false if timeout expired.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeFirst,com.google.common.collect.ForwardingBlockingDeque:takeFirst(),86,89,"/**
 * Retrieves and removes the first element from the delegate.
 * @return The first element, or null if the delegate is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,takeLast,com.google.common.collect.ForwardingBlockingDeque:takeLast(),91,94,"/**
 * Returns and removes the last element from the delegate queue.
 * @throws InterruptedException if interrupted while waiting
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollFirst,"com.google.common.collect.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",96,99,"/**
 * Retrieves and removes the first element after a timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout.
 * @return The first element or null if timeout expires.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,pollLast,"com.google.common.collect.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",101,104,"/**
 * Retrieves and removes the last element after a timeout.
 * @param timeout Timeout duration
 * @param unit Time unit for the timeout
 * @return The last element or null if timeout expires.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,put,com.google.common.collect.ForwardingBlockingDeque:put(java.lang.Object),106,109,"/**
 * Puts the specified element into the delegate queue.
 * @param e the element to put
 * @throws InterruptedException if interrupted while waiting
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,offer,"com.google.common.collect.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",111,114,"/**
 * Attempts to add an element to the queue, waiting for timeout.
 * @param e element to offer, timeout duration, and unit.
 * @return True if offered, false if timeout expired.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,take,com.google.common.collect.ForwardingBlockingDeque:take(),116,119,"/**
 * Retrieves and removes the head of the queue, blocking if empty.
 * @return The head element, or null if the delegate is null.
 * @throws InterruptedException if interrupted while waiting.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,poll,"com.google.common.collect.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",121,124,"/**
 * Retrieves and removes the head of the queue, waiting if necessary.
 * @param timeout Timeout value.
 * @param unit Time unit for the timeout.
 * @return Element if available, null if timeout expires.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection),126,129,"/**
* Drains elements from this queue to the given collection.
* @param c the collection to drain to
* @return the number of elements drained
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,drainTo,"com.google.common.collect.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",131,134,"/**
* Drains up to {@code maxElements} from this queue to the collection.
* @param c collection to drain to; @param maxElements max elements to drain
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,frequency,"com.google.common.collect.Iterators:frequency(java.util.Iterator,java.lang.Object)",381,389,"/**
 * Counts occurrences of an element in an iterator.
 * @param iterator Iterator to search.
 * @param element Element to count.
 * @return Number of times the element appears.
 */
","* Returns the number of elements in the specified iterator that equal the specified object. The
   * iterator will be left exhausted: its {@code hasNext()} method will return {@code false}.
   *
   * @see Collections#frequency",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKeyImpl,"com.google.common.collect.Maps:containsKeyImpl(java.util.Map,java.lang.Object)",3833,3835,"/**
 * Checks if the map contains the specified key.
 * @param map the map to check, @param key the key to search for
 */
",An admittedly inefficient implementation of {@link Map#containsKey}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsValueImpl,"com.google.common.collect.Maps:containsValueImpl(java.util.Map,java.lang.Object)",3838,3840,"/**
* Checks if a map contains the specified value.
* @param map the map to check, @param value the value to search for
*/
",An implementation of {@link Map#containsValue}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAddAll,"com.google.common.collect.ForwardingList:standardAddAll(int,java.lang.Iterable)",148,150,"/**
 * Adds all elements from the given Iterable to the list at the specified index.
 */","* A sensible default implementation of {@link #addAll(int, Collection)}, in terms of the {@code
   * add} method of {@link #listIterator(int)}. If you override {@link #listIterator(int)}, you may
   * wish to override {@link #addAll(int, Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardSubList,"com.google.common.collect.ForwardingList:standardSubList(int,int)",214,216,"/**
 * Returns a sublist backed by this list, from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* A sensible default implementation of {@link #subList(int, int)}. If you override any other
   * methods, you may wish to override {@link #subList(int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardHashCode,com.google.common.collect.ForwardingList:standardHashCode(),236,238,"/**
 * Calculates the object's hash code using the standard implementation.
 */","* A sensible definition of {@link #hashCode} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,get,com.google.common.collect.ForwardingListMultimap:get(java.lang.Object),46,49,"/**
 * Retrieves values associated with the given key from the delegate.
 * @param key The key to retrieve values for.
 * @return List of values associated with the key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,replaceValues,"com.google.common.collect.ForwardingListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,61,"/**
 * Replaces values associated with a key using the delegate.
 * @param key The key for value replacement.
 * @param values Iterable of new values.
 * @return List of replaced values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardPutAll,com.google.common.collect.ForwardingMap:standardPutAll(java.util.Map),146,148,"/**
* Adds all entries from the provided map into this map.
* @param map the map whose entries to add
*/
","* A sensible definition of {@link #putAll(Map)} in terms of {@link #put(Object, Object)}. If you
   * override {@link #put(Object, Object)}, you may wish to override {@link #putAll(Map)} to forward
   * to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardEquals,com.google.common.collect.ForwardingMap:standardEquals(java.lang.Object),275,277,"/**
 * Checks for equality using Maps.equalsImpl.
 * @param object The object to compare to.
 * @return True if the objects are equal, false otherwise.
 */
","* A sensible definition of {@link #equals} in terms of the {@code equals} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #equals} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,equals,com.google.common.collect.ImmutableMap:equals(java.lang.Object),1205,1208,"/**
 * Checks if two objects are equal using Maps.equalsImpl.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,iterator,com.google.common.collect.ForwardingMultiset$StandardElementSet:iterator(),250,253,"/**
 * Returns an iterator over the elements in the multiset.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,replaceAll,com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap:replaceAll(java.util.function.BiFunction),286,289,"/**
 * Replaces values for all entries using the provided function.
 * @param function BiFunction to apply to each key-value pair
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerEntry,com.google.common.collect.ForwardingNavigableMap:lowerEntry(java.lang.Object),66,69,"/**
 * Returns the entry immediately preceding the given key, or null.
 * @param key The key to search for.
 * @return The lower entry, or null if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lowerKey,com.google.common.collect.ForwardingNavigableMap:lowerKey(java.lang.Object),80,83,"/**
 * Returns the greatest key strictly less than the given key.
 * @param key The key to compare against.
 * @return The lower key, or null if none exists.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorEntry,com.google.common.collect.ForwardingNavigableMap:floorEntry(java.lang.Object),94,97,"/**
* Returns the floor entry (greatest key <= key).
* @param key The key to search for.
* @return The floor entry or null if none exists.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,floorKey,com.google.common.collect.ForwardingNavigableMap:floorKey(java.lang.Object),108,111,"/**
 * Returns the greatest key <= the given key, or null if none.
 * @param key The key to compare against.
 * @return The floor key, or null if none exists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingEntry,com.google.common.collect.ForwardingNavigableMap:ceilingEntry(java.lang.Object),122,125,"/**
* Returns the least entry whose key is greater than or equal to the given key.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,ceilingKey,com.google.common.collect.ForwardingNavigableMap:ceilingKey(java.lang.Object),136,139,"/**
* Returns the smallest key greater than or equal to the given key.
* @param key The key to compare against.
* @return The ceiling key or null if none exists.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherEntry,com.google.common.collect.ForwardingNavigableMap:higherEntry(java.lang.Object),150,153,"/**
* Returns the next higher key's entry in the map, or null.
* @param key The key to search for the next higher entry.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,higherKey,com.google.common.collect.ForwardingNavigableMap:higherKey(java.lang.Object),164,167,"/**
* Returns the next higher key than the given key, or null if none.
* @param key the key to search after
* @return the next higher key, or null
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,firstEntry,com.google.common.collect.ForwardingNavigableMap:firstEntry(),178,181,"/**
 * Returns the first entry in the map, or null if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,lastEntry,com.google.common.collect.ForwardingNavigableMap:lastEntry(),206,209,"/**
* Returns the last entry in the map, or null if the map is empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollFirstEntry,com.google.common.collect.ForwardingNavigableMap:pollFirstEntry(),233,236,"/**
 * Polls and removes the first entry in the delegate map.
 * @return The first entry or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,pollLastEntry,com.google.common.collect.ForwardingNavigableMap:pollLastEntry(),247,250,"/**
 * Retrieves and removes the last entry from the delegate map.
 * @return The last Entry or null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingMap,com.google.common.collect.ForwardingNavigableMap:descendingMap(),261,264,"/**
 * Returns a reverse-ordered version of the map's entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,navigableKeySet,com.google.common.collect.ForwardingNavigableMap:navigableKeySet(),327,330,"/**
* Returns a navigable set view of the map's keys.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,descendingKeySet,com.google.common.collect.ForwardingNavigableMap:descendingKeySet(),347,350,"/**
 * Returns a descending key set, backed by the delegate's set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,subMap,"com.google.common.collect.ForwardingNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",374,381,"/**
 * Returns a view of the map's portion between fromKey and toKey.
 * @param fromKey start key (inclusive or exclusive)
 * @param toKey end key (inclusive or exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,headMap,"com.google.common.collect.ForwardingNavigableMap:headMap(java.lang.Object,boolean)",383,386,"/**
 * Returns a view of the map's entries with keys strictly less than toKey.
 * @param toKey Exclusive key to end the head map.
 * @param inclusive If true, toKey is not included.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,tailMap,"com.google.common.collect.ForwardingNavigableMap:tailMap(java.lang.Object,boolean)",388,391,"/**
 * Returns a tail map with keys >= fromKey, inclusive.
 * @param fromKey Key from which the tail map starts.
 * @param inclusive Whether fromKey is included in the tail map.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,elementSet,com.google.common.collect.ForwardingSortedMultiset:elementSet(),54,57,"/**
 * Returns a navigable set of the elements in this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,comparator,com.google.common.collect.ForwardingSortedMultiset:comparator(),79,82,"/**
 * Returns the comparator used by this sorted set's delegate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,descendingMultiset,com.google.common.collect.ForwardingSortedMultiset:descendingMultiset(),84,87,"/**
 * Returns a sorted multiset with elements in descending order.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,firstEntry,com.google.common.collect.ForwardingSortedMultiset:firstEntry(),111,114,"/**
* Returns the first entry in the map.
* Returns null if the map is empty.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,lastEntry,com.google.common.collect.ForwardingSortedMultiset:lastEntry(),131,134,"/**
 * Returns the last entry in the map.
 * @return The last entry or null if the map is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:pollFirstEntry(),152,155,"/**
 * Retrieves and removes the first entry, or null if empty.
 * Delegates to the underlying data structure's implementation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,pollLastEntry,com.google.common.collect.ForwardingSortedMultiset:pollLastEntry(),174,177,"/**
 * Retrieves and removes the last entry, or null if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,headMultiset,"com.google.common.collect.ForwardingSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",197,200,"/**
 * Returns a sorted multiset containing elements less than or equal to upperBound.
 * @param upperBound Upper bound for elements in the returned multiset.
 * @param boundType Type of bound (inclusive/exclusive).
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,subMultiset,"com.google.common.collect.ForwardingSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",202,209,"/**
 * Returns a sub-multiset from the delegate.
 * @param lowerBound Lower bound for the sub-multiset.
 * @param upperBound Upper bound for the sub-multiset.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,tailMultiset,"com.google.common.collect.ForwardingSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",227,230,"/**
 * Returns a tail multiset from the given bound.
 * @param lowerBound Lower bound for the tail multiset.
 * @param boundType Type of bound (inclusive, exclusive, etc.)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,get,com.google.common.collect.ForwardingSortedSetMultimap:get(java.lang.Object),47,50,"/**
* Retrieves values associated with the given key.
* @param key The key to retrieve values for.
* @return A sorted set of values or an empty set if absent.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,removeAll,com.google.common.collect.ForwardingSortedSetMultimap:removeAll(java.lang.Object),52,55,"/**
 * Removes all entries for the given key from the delegate.
 * @param key The key whose entries to remove.
 * @return A sorted set of removed values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,valueComparator,com.google.common.collect.ForwardingSortedSetMultimap:valueComparator(),62,65,"/**
 * Returns the value comparator of the underlying delegate.
 * @return Value comparator or null if the delegate doesn't have one.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,delegate,com.google.common.collect.ForwardingSetMultimap:delegate(),43,44,"/**
 * Returns the delegate SetMultimap implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSet,com.google.common.collect.Tables$UnmodifiableTable:cellSet(),554,557,"/**
* Returns an unmodifiable set of cells.
* Delegates to superclass and prevents modification.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$UnmodifiableTable:column(java.lang.Object),564,567,"/**
 * Retrieves a column map, returning an unmodifiable view.
 * @param columnKey Key for the column to retrieve.
 * @return Unmodifiable map representing the column.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnKeySet,com.google.common.collect.Tables$UnmodifiableTable:columnKeySet(),569,572,"/**
 * Returns an unmodifiable set of column keys.
 * Delegates to superclass and prevents modification.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$UnmodifiableTable:row(java.lang.Object),597,600,"/**
 * Returns a map for the specified row key, unmodifiable.
 * @param rowKey The key of the row to retrieve.
 * @return An unmodifiable map representing the row.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableTable:rowKeySet(),602,605,"/**
 * Returns an unmodifiable set of row keys.
 * Delegates to the superclass and prevents modification.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,values,com.google.common.collect.Tables$UnmodifiableTable:values(),612,615,"/**
 * Returns a set of the values in this map, wrapped in an unmodifiable set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooLow,com.google.common.collect.GeneralRange:tooLow(java.lang.Object),166,174,"/**
 * Checks if the given value is less than the lower bound.
 * @param t the value to check
 * @return true if less than the lower bound, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,tooHigh,com.google.common.collect.GeneralRange:tooHigh(java.lang.Object),176,184,"/**
 * Checks if the given value exceeds the upper bound.
 * @param t value to check; can be null.
 * @return true if t > upperBound, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,equals,com.google.common.collect.GeneralRange:equals(java.lang.Object),241,254,"/**
 * Checks if this range is equal to another GeneralRange.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,hashCode,com.google.common.collect.GeneralRange:hashCode(),256,264,"/**
 * Generates a hash code based on object properties.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,<init>,"com.google.common.collect.HashBasedTable:<init>(java.util.Map,com.google.common.collect.HashBasedTable$Factory)",102,104,"/**
 * Constructs a HashBasedTable with a backing map and factory.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,<init>,"com.google.common.collect.StandardRowSortedTable:<init>(java.util.SortedMap,com.google.common.base.Supplier)",59,62,"/**
 * Constructs a StandardRowSortedTable with the given backing map.
 * @param backingMap The backing map for the table.
 * @param factory Supplier for creating a new map.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,newCustomTable,"com.google.common.collect.Tables:newCustomTable(java.util.Map,com.google.common.base.Supplier)",372,378,"/**
 * Creates a new custom table from a backing map and factory.
 * @param backingMap Empty map to back the table.
 * @param factory Supplier for creating empty column maps.
 * @return A new Table instance.
 */
","* Creates a table that uses the specified backing map and factory. It can generate a table based
   * on arbitrary {@link Map} classes.
   *
   * <p>The {@code factory}-generated and {@code backingMap} classes determine the table iteration
   * order. However, the table's {@code row()} method returns instances of a different class than
   * {@code factory.get()} does.
   *
   * <p>Call this method only when the simpler factory methods in classes like {@link
   * HashBasedTable} and {@link TreeBasedTable} won't suffice.
   *
   * <p>The views returned by the {@code Table} methods {@link Table#column}, {@link
   * Table#columnKeySet}, and {@link Table#columnMap} have iterators that don't support {@code
   * remove()}. Otherwise, all optional operations are supported. Null row keys, columns keys, and
   * values are not supported.
   *
   * <p>Lookups by row key are often faster than lookups by column key, because the data is stored
   * in a {@code Map<R, Map<C, V>>}. A method call like {@code column(columnKey).get(rowKey)} still
   * runs quickly, since the row key is provided. However, {@code column(columnKey).size()} takes
   * longer, since an iteration across all row keys occurs.
   *
   * <p>Note that this implementation is not synchronized. If multiple threads access this table
   * concurrently and one of the threads modifies the table, it must be synchronized externally.
   *
   * <p>The table is serializable if {@code backingMap}, {@code factory}, the maps generated by
   * {@code factory}, and the table contents are all serializable.
   *
   * <p>Note: the table assumes complete ownership over of {@code backingMap} and the maps returned
   * by {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param backingMap place to store the mapping from each row key to its corresponding column key
   *     / value map
   * @param factory supplier of new, empty maps that will each hold all column key / value mappings
   *     for a given row key
   * @throws IllegalArgumentException if {@code backingMap} is not empty
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnMap,com.google.common.collect.HashBasedTable:columnMap(),875,879,"/**
 * Returns the column map. Lazily initializes if it's null.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,columnKeySet,com.google.common.collect.HashBasedTable:columnKeySet(),680,684,"/**
 * Returns the set of column keys. Lazily initializes if null.
 */
","* {@inheritDoc}
   *
   * <p>The returned set has an iterator that does not support {@code remove()}.
   *
   * <p>The set's iterator traverses the columns of the first row, the columns of the second row,
   * etc., skipping any columns that have appeared previously.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:size(),924,927,"/**
 * Returns the number of columns in this data set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,keySet,com.google.common.collect.StandardTable$ColumnMap:keySet(),907,910,"/**
* Returns the key set for this map, delegating to columnKeySet().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,column,com.google.common.collect.HashBasedTable:column(java.lang.Object),454,457,"/**
 * Creates a new column map with the given column key.
 */","* {@inheritDoc}
   *
   * <p>The returned map's views have iterators that don't support {@code remove()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,row,com.google.common.collect.HashBasedTable:row(java.lang.Object),312,315,"/**
 * Creates a new row with the given row key.
 * @param rowKey The key for the new row.
 * @return A new Row object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.HashBasedTable:clear(),135,138,"/**
 * Clears the backing map, removing all entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.HashBasedTable:size(),124,131,"/**
 * Returns the number of elements in this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.HashBasedTable:isEmpty(),119,122,"/**
 * Checks if the backing map is empty.
 * @return True if empty, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,clear,com.google.common.collect.HashBiMap$Inverse:clear(),609,612,"/**
 * Clears the underlying data structure.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap$Inverse:containsKey(java.lang.Object),614,617,"/**
* Checks if the map contains a key that maps to the given value.
* @param value the value to search for
* @return true if found, false otherwise
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,inverse,com.google.common.collect.HashBiMap$Inverse:inverse(),648,651,"/**
 * Returns an inverse BiMap, mapping values to keys.
 * Uses the forward method to create the inverse map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap$Inverse:values(),686,689,"/**
 * Returns a set view of the values of this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,writeReplace,com.google.common.collect.HashBiMap$Inverse:writeReplace(),755,757,"/**
 * Returns an InverseSerializedForm for serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readResolve,com.google.common.collect.HashBiMap$InverseSerializedForm:readResolve(),775,777,"/**
 * Reconstitutes this bimap from a serialized form.
 * Returns the inverse mapping of the bimap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,values,com.google.common.collect.HashBiMap:values(),512,515,"/**
* Returns the values of this map as a Set.
* Uses the inverse map's key set to get the values.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,next,com.google.common.collect.HashBiMap$Itr:next(),447,459,"/**
 * Returns the next element in this iteration.
 * Throws NoSuchElementException if no such element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,init,com.google.common.collect.HashBiMap:init(int),139,149,"/**
 * Initializes the HashMap with a given expected size.
 * @param expectedSize The initial capacity of the HashMap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,rehashIfNecessary,com.google.common.collect.HashBiMap:rehashIfNecessary(),380,397,"/**
* Resizes the hash tables if the load factor exceeds the threshold.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMap,"com.google.common.collect.Serialization:populateMap(java.util.Map,java.io.ObjectInputStream)",73,77,"/**
 * Populates a map from an ObjectInputStream.
 * @param map Map to populate.
 * @param stream Input stream containing map data.
 */
","* Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}
   * for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.HashBiMap:entrySet(),3758,3781,"/**
 * Returns a set view of the map's entries.
 * Provides entry-specific operations.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,readObject,com.google.common.collect.HashMultiset:readObject(java.io.ObjectInputStream),87,94,"/**
* Reads object state from an ObjectInputStream during deserialization.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,readObject,com.google.common.collect.LinkedHashMultiset:readObject(java.io.ObjectInputStream),95,102,"/**
 * Reads the multiset from an ObjectInputStream during deserialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Serialization.java,populateMultiset,"com.google.common.collect.Serialization:populateMultiset(com.google.common.collect.Multiset,java.io.ObjectInputStream)",116,120,"/**
 * Populates a Multiset from an ObjectInputStream.
 * @param multiset The Multiset to populate.
 * @param stream Input stream containing the data.
 */
","* Populates a multiset by reading an input stream, as part of deserialization. See {@link
   * #writeMultiset} for the data format.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Hashing.java,smearedHash,com.google.common.collect.Hashing:smearedHash(java.lang.Object),55,57,"/**
 * Calculates a smeared hash code for an object.
 * @param o The object to hash, null treated as 0.
 * @return The smeared hash code.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,rebuildHashTable,"com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:rebuildHashTable(int,java.lang.Object[],int)",828,844,"/**
* Rebuilds a hash table with a new size, inserting existing elements.
* @param newTableSize new size of the hash table
* @param elements elements to insert
* @param n number of elements to insert
* @return new hash table
*/
",Builds a new open-addressed hash table from the first n objects in elements.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,writeReplace,com.google.common.collect.ImmutableAsList:writeReplace(),84,89,"/**
 * Returns a SerializedForm instance for serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(int),347,349,"/**
 * Constructs a new Builder with the specified initial size.
 * @param size The initial capacity of the underlying data structure.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$Builder:<init>(),426,428,"/**
 * Constructs a new Builder with default initial capacity.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMap#builder}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,makeBuilder,com.google.common.collect.ImmutableMap$SerializedForm:makeBuilder(int),1299,1301,"/**
 * Creates a new builder with the specified initial size.
 * @param size Initial capacity of the builder.
 * @return A new Builder instance.
 */
",* Returns a builder that builds the unserialized type. Subclasses should override this method.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableMap:builderWithExpectedSize(int),368,371,"/**
 * Creates a new Builder with the specified expected size.
 * @param expectedSize The initial capacity of the builder.
 */
","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,inverse,com.google.common.collect.RegularImmutableBiMap:inverse(),195,202,"/**
 * Returns an immutable bi-map with keys and values swapped.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,valuePredicateOnEntries,com.google.common.collect.Maps:valuePredicateOnEntries(com.google.common.base.Predicate),2400,2403,"/**
 * Creates a predicate checking entry values using provided predicate.
 * @param valuePredicate Predicate to apply to the entry value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,<init>,"com.google.common.collect.JdkBackedImmutableBiMap:<init>(com.google.common.collect.ImmutableList,java.util.Map,java.util.Map)",59,64,"/**
 * Constructs a JdkBackedImmutableBiMap with provided delegates.
 * @param entries Immutable list of key-value entries.
 * @param forwardDelegate Forward map delegate.
 * @param backwardDelegate Backward map delegate.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,<init>,"com.google.common.collect.RegularImmutableBiMap:<init>(com.google.common.collect.ImmutableMapEntry[],com.google.common.collect.ImmutableMapEntry[],java.util.Map$Entry[],int,int)",116,127,"/**
 * Constructs a RegularImmutableBiMap with provided tables and data.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object)",44,49,"/**
 * Creates a SingletonImmutableBiMap with a single key-value pair.
 * @param singleKey The key for the bi-map.
 * @param singleValue The value for the bi-map.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,<init>,"com.google.common.collect.SingletonImmutableBiMap:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableBiMap)",51,55,"/**
 * Constructs a SingletonImmutableBiMap.
 * @param singleKey Key of the single entry.
 * @param singleValue Value of the single entry.
 * @param inverse Inverse ImmutableBiMap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,<init>,"com.google.common.collect.JdkBackedImmutableMap:<init>(java.util.Map,com.google.common.collect.ImmutableList)",91,94,"/**
 * Constructs a JdkBackedImmutableMap with the given map and entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,"com.google.common.collect.RegularImmutableMap:<init>(java.util.Map$Entry[],com.google.common.collect.ImmutableMapEntry[],int)",217,222,"/**
 * Constructs a RegularImmutableMap with provided entries, table, and mask.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,readResolve,com.google.common.collect.ImmutableClassToInstanceMap:readResolve(),202,204,"/**
 * Resolves this object during deserialization.
 * Returns an empty list if empty, otherwise returns this.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,ensureCapacity,com.google.common.collect.ImmutableMap$Builder:ensureCapacity(int),437,444,"/**
 * Increases the capacity of the entries array if needed.
 * @param minCapacity minimum required capacity
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureCapacity,com.google.common.collect.ImmutableSet$SetBuilderImpl:ensureCapacity(int),603,609,"/**
 * Ensures the dedupedElements array has at least the specified capacity.
 */","* Resizes internal data structures if necessary to store the specified number of distinct
     * elements.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(int),814,817,"/**
 * Constructs a new builder with the specified initial capacity.
 * @param capacity initial capacity of the builder's array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(com.google.common.collect.Multiset),487,489,"/**
 * Constructs a new builder with the given multiset contents.
 * @param contents The initial multiset for the builder.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(boolean),493,495,"/**
 * Builder constructor.
 * @param subclass Unused parameter, for subclass construction.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.lang.Iterable),540,545,"/**
* Adds all elements from the given iterable to the list.
* @param elements Iterable containing elements to add.
* @return This builder instance for chaining.
*/
","* Adds each element of {@code elements} to the {@code ImmutableSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.util.Iterator),905,910,"/**
* Adds all elements from the iterator to the list.
* @param elements Iterator providing elements to add.
* @return This builder instance for chaining.
*/
","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterator} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.util.Iterator),578,583,"/**
 * Adds all elements from the iterator to the list.
 * @param elements Iterator providing elements to add.
 * @return This builder object for chaining.
 */
","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addAll,com.google.common.collect.ImmutableSet$Builder:addAll(java.util.Iterator),547,552,"/**
* Adds all elements from the iterator to the list.
* @param elements Iterator containing elements to add.
* @return This builder instance for chaining.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList:<init>(),392,392,"/**
 * Creates an immutable list.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,<init>,com.google.common.collect.ImmutableMapValues:<init>(com.google.common.collect.ImmutableMap),40,42,"/**
 * Initializes the ImmutableMapValues with the provided map.
 * @param map The map whose values will be used.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$EntryCollection:<init>(com.google.common.collect.ImmutableMultimap),623,625,"/**
 * Initializes the EntryCollection with the provided ImmutableMultimap.
 * @param multimap The multimap containing entries for this collection.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Values:<init>(com.google.common.collect.ImmutableMultimap),830,832,"/**
* Initializes the Values object with the provided multimap.
* @param multimap The multimap to be used for value retrieval.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet:<init>(),277,277,"/**
* Creates an empty immutable set.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,addAll,com.google.common.collect.ImmutableList$Builder:addAll(java.lang.Iterable),881,896,"/**
 * Adds all elements from the given iterable to the builder.
 * @param elements Iterable containing elements to add.
 * @return This builder, allowing method chaining.
 */
","* Adds each element of {@code elements} to the {@code ImmutableList}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,writeReplace,com.google.common.collect.ImmutableList:writeReplace(),748,753,"/**
 * Returns a SerializedForm instance for serialization.
 * Converts the array to a SerializedForm.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,writeReplace,com.google.common.collect.ImmutableEnumMap:writeReplace(),118,122,"/**
 * Returns a replacement for this object during serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entryIterator,com.google.common.collect.ImmutableEnumMap:entryIterator(),97,100,"/**
 * Returns an unmodifiable iterator over the map's entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$UnmodifiableEntries:iterator(),1544,1547,"/**
 * Returns an unmodifiable iterator over the map's entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,writeReplace,com.google.common.collect.ImmutableEnumSet:writeReplace(),140,144,"/**
 * Returns a replacement for this object during serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,combine,com.google.common.collect.ImmutableList$Builder:combine(com.google.common.collect.ImmutableList$Builder),912,917,"/**
 * Combines contents from another builder into this builder.
 * @param builder The builder to combine from.
 * @return This builder, for chaining.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverseIndex,com.google.common.collect.ImmutableList$ReverseImmutableList:reverseIndex(int),644,646,"/**
 * Reverses the given index relative to the size of the collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reversePosition,com.google.common.collect.ImmutableList$ReverseImmutableList:reversePosition(int),648,650,"/**
 * Calculates the reversed position based on the given index.
 * @param index The index to reverse.
 * @return The reversed position.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(int),406,414,"/**
 * Returns a list iterator over the list starting at the specified index.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList:listIterator(),401,404,"/**
 * Returns a list iterator over the elements in this collection, starting at index 0.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,listIterator,com.google.common.collect.RegularImmutableAsList:listIterator(int),55,59,"/**
 * Returns a list iterator over the list from the specified index.
 * @param index the index to start the list iterator
 * @return An UnmodifiableListIterator over the list.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,toImmutableList,com.google.common.collect.ImmutableList:toImmutableList(),74,76,"/**
 * Returns a collector that accumulates elements into an ImmutableList.
 */
","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableList}, in encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner2:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1434,1438,"/**
* Constructs a Combiner2 with two ClosingFutures.
* @param future1 The first ClosingFuture.
* @param future2 The second ClosingFuture.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner3:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1603,1609,"/**
 * Constructs a Combiner3 with three ClosingFutures.
 * @param future1 The first future.
 * @param future2 The second future.
 * @param future3 The third future.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner4:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",1794,1804,"/**
 * Constructs a Combiner4 with four ClosingFutures.
 * @param future1, future2, future3, future4 Futures to combine.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner5:<init>(com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture,com.google.common.util.concurrent.ClosingFuture)",2001,2013,"/**
* Constructs a Combiner5 with five ClosingFuture objects.
* @param future1-future5 Futures to combine.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,copyIntoArray,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:copyIntoArray(java.lang.Object[],int)",56,60,"/**
 * Copies entries into an array.
 * @param dst Destination array.
 * @param offset Starting offset in the array.
 * @return Number of elements copied.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIntoArray,"com.google.common.collect.ImmutableSet$Indexed:copyIntoArray(java.lang.Object[],int)",357,360,"/**
 * Copies elements into an array, starting at a specified offset.
 * @param dst Destination array.
 * @param offset Starting offset in the destination array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,copyIntoArray,"com.google.common.collect.IndexedImmutableSet:copyIntoArray(java.lang.Object[],int)",51,55,"/**
 * Copies elements into an array, starting at a specified offset.
 * @param dst Destination array.
 * @param offset Starting index in the destination array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,copyIntoArray,"com.google.common.collect.RegularImmutableAsList:copyIntoArray(java.lang.Object[],int)",67,71,"/**
 * Copies list elements into an array, starting at the given offset.
 * @param dst Destination array.
 * @param offset Starting index in the destination array.
 * @return Number of elements copied.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,copyIntoArray,"com.google.common.collect.RegularImmutableSortedSet:copyIntoArray(java.lang.Object[],int)",165,168,"/**
* Copies elements into an array.
* @param dst Destination array.
* @param offset Starting offset in the array.
* @return Number of elements copied.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$ParameterizedTypeImpl:hashCode(),295,300,"/**
 * Calculates the hash code based on ownerType, argumentsList, and rawType.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,hashCode,com.google.common.reflect.Types$WildcardTypeImpl:hashCode(),497,500,"/**
 * Calculates hash code based on lower and upper bounds.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,com.google.common.collect.ImmutableMultimap:of(),84,86,"/**
 * Returns an empty immutable multimap.
 */","* Returns an empty multimap.
   *
   * <p><b>Performance note:</b> the instance returned is a singleton.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,"com.google.common.collect.ImmutableListMultimap:<init>(com.google.common.collect.ImmutableMap,int)",435,437,"/**
* Constructs an ImmutableListMultimap from a map and size.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)",46,49,"/**
 * Constructs a RegularEntrySet with the given map and entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createKeySet,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createKeySet(),755,758,"/**
 * Creates an immutable set containing the map's keys.
 * @return Immutable set of keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableBiMap:createKeySet(),123,126,"/**
* Returns an immutable set view of the map's keys.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createKeySet,com.google.common.collect.JdkBackedImmutableMap:createKeySet(),117,120,"/**
 * Returns an immutable set view of the map's keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap$Inverse:createKeySet(),238,241,"/**
* Returns a set view of the keys in this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createKeySet,com.google.common.collect.RegularImmutableBiMap:createKeySet(),160,163,"/**
* Creates an immutable set containing the map's keys.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryIterator,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:entryIterator(),1168,1193,"/**
 * Returns an iterator over the map's entries, with values as ImmutableSets.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,<init>,com.google.common.collect.ImmutableMap$SerializedForm:<init>(com.google.common.collect.ImmutableMap),1243,1260,"/**
 * Serializes an ImmutableMap for legacy compatibility.
 * @param map ImmutableMap to serialize; uses keys/values arrays if USE_LEGACY_SERIALIZATION is true.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keyIterator,com.google.common.collect.ImmutableMap:keyIterator(),1070,1083,"/**
 * Returns an unmodifiable iterator over the map's keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap:hashCode(),1212,1215,"/**
 * Calculates the hash code based on the entry set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,readResolve,com.google.common.collect.ImmutableMapEntrySet$EntrySetSerializedForm:readResolve(),149,151,"/**
* Returns the entry set of the map after deserialization.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,get,com.google.common.collect.ImmutableMapKeySet:get(int),63,66,"/**
 * Retrieves the key at the specified index in the map's entry set.
 * @param index Index of the key to retrieve.
 * @return The key at the given index.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,asList,com.google.common.collect.ImmutableMapValues:asList(),81,104,"/**
* Returns a read-only list of the map's values.
* Values are accessed via the underlying entry list.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getCell,com.google.common.collect.SparseImmutableTable:getCell(int),115,123,"/**
 * Retrieves a cell at the given index.
 * @param index index of the cell to retrieve
 * @return Cell object at the specified index
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,containsValue,com.google.common.collect.ImmutableMap:containsValue(java.lang.Object),986,989,"/**
 * Checks if the map contains the specified value.
 * @param value Value to search for. Returns true if found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,readResolve,com.google.common.collect.ImmutableMapValues$SerializedForm:readResolve(),139,141,"/**
 * Returns the values of the map after deserialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyIntoArray,"com.google.common.collect.ImmutableMultimap$Values:copyIntoArray(java.lang.Object[],int)",844,851,"/**
 * Copies multimap values into an array.
 * @param dst Destination array.
 * @param offset Starting offset in the array.
 * @return Updated offset after copying.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,readResolve,com.google.common.collect.RegularImmutableMap$Values$SerializedForm:readResolve(),419,421,"/**
* Returns the values from the map after deserialization.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,isHashCodeFast,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:isHashCodeFast(),1163,1166,"/**
 * Delegates to the wrapped map's isHashCodeFast() method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,isHashCodeFast,com.google.common.collect.ImmutableMapEntrySet:isHashCodeFast(),116,120,"/**
 * Checks if the hash code calculation is fast for this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,checkNoConflict,"com.google.common.collect.ImmutableMap:checkNoConflict(boolean,java.lang.String,java.lang.Object,java.lang.Object)",373,378,"/**
 * Throws an exception if a conflict is detected.
 * @param safe Safety flag; throws if false.
 * @param conflictDescription Conflict description.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,writeReplace,com.google.common.collect.ImmutableMapEntrySet:writeReplace(),127,132,"/**
 * Returns a serialized form of the map's entry set.
 * @return EntrySetSerializedForm object representing the map.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,createAsList,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:createAsList(),77,80,"/**
 * Creates an immutable list from the entries of this map.
 * @return Immutable list of map entries.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,<init>,"com.google.common.collect.ImmutableSortedAsList:<init>(com.google.common.collect.ImmutableSortedSet,com.google.common.collect.ImmutableList)",34,36,"/**
 * Constructs an ImmutableSortedAsList with backing set and list.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,contains,com.google.common.collect.ImmutableMapValues:contains(java.lang.Object),71,74,"/**
 * Checks if the collection contains the given object.
 * @param object The object to search for.
 * @return True if the object is found, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$EntryCollection:iterator(),627,630,"/**
* Returns an iterator over the entries in this multimap.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,isPartialView,com.google.common.collect.ImmutableMultimap$EntryCollection:isPartialView(),632,635,"/**
* Checks if this view is a partial view of the multimap.
* @return True if it's a partial view, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$EntryCollection:size(),637,640,"/**
 * Returns the number of key-value mappings in the multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Keys:size(),748,751,"/**
 * Returns the total number of elements in this multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,size,com.google.common.collect.ImmutableMultimap$Values:size(),853,856,"/**
 * Returns the number of key-value mappings in the multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,<init>,"com.google.common.collect.JdkBackedImmutableMultiset:<init>(java.util.Map,com.google.common.collect.ImmutableList,long)",59,64,"/**
 * Constructs a JdkBackedImmutableMultiset.
 * @param delegateMap Map of elements to counts.
 * @param entries Immutable list of entries.
 * @param size The size of the multiset.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset:<init>(com.google.common.collect.Multisets$ImmutableEntry[],com.google.common.collect.Multisets$ImmutableEntry[],int,int,com.google.common.collect.ImmutableSet)",126,137,"/**
 * Constructs a RegularImmutableMultiset with provided data.
 * @param entries Entry array, size, hashCode, and elementSet.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,writeReplace,com.google.common.collect.ImmutableMultimap$Keys:writeReplace(),764,769,"/**
 * Returns a serialized form of this multimap for external use.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,readResolve,com.google.common.collect.ImmutableMultimap$KeysSerializedForm:readResolve(),787,789,"/**
 * Restores the multimap to its original keys during deserialization.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Values:contains(java.lang.Object),834,837,"/**
* Checks if the multimap contains the specified value.
* @param object The value to search for.
* @return True if the multimap contains the value, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,iterator,com.google.common.collect.ImmutableMultimap$Values:iterator(),839,842,"/**
 * Returns an iterator over the values in the multimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,forEach,com.google.common.collect.ImmutableMultimap:forEach(java.util.function.BiConsumer),706,712,"/**
 * Applies the given action to each key-value pair in the map.
 * @param action BiConsumer to apply to each key-value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,elementSet,com.google.common.collect.JdkBackedImmutableMultiset:elementSet(),73,77,"/**
 * Returns the set of elements in this entry set. Lazily initialized.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,elementSet,com.google.common.collect.RegularImmutableMultiset:elementSet(),181,185,"/**
 * Returns the set of elements in this map. Lazily initialized.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset$EntrySet:writeReplace(),406,411,"/**
 * Returns a serialized form of this multiset for external use.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,writeReplace,com.google.common.collect.ImmutableMultiset:writeReplace(),436,441,"/**
 * Returns a SerializedForm instance for serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet$AsSet:writeReplace(),711,715,"/**
 * Returns a serialized form of this object for compatibility.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,writeReplace,com.google.common.collect.ImmutableRangeSet:writeReplace(),866,869,"/**
* Returns a SerializedForm object for serialization.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,toImmutableRangeSet,com.google.common.collect.ImmutableRangeSet:toImmutableRangeSet(),73,76,"/**
 * Returns a collector that accumulates to an ImmutableRangeSet.
 */","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeSet}. As in {@link Builder}, overlapping ranges are not permitted and adjacent
   * ranges will be merged.
   *
   * @since 23.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:<init>(),661,663,"/**
 * Constructs an EmptySetBuilderImpl with an initial size of 0.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(int),728,733,"/**
 * Constructs a RegularSetBuilder with an expected capacity.
 * @param expectedCapacity initial capacity of the set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$RegularSetBuilderImpl),735,741,"/**
 * Copies another RegularSetBuilder instance.
 * @param toCopy The RegularSetBuilder to copy.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,writeReplace,com.google.common.collect.ImmutableSet:writeReplace(),418,422,"/**
 * Returns a SerializedForm instance for serialization.
 * Uses the array representation for the form.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,toImmutableSet,com.google.common.collect.ImmutableSet:toImmutableSet(),71,73,"/**
 * Returns a collector that accumulates elements into an ImmutableSet.
 */
","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSet}. Elements appear in the resulting set in the encounter order of the stream; if
   * the stream contains duplicates (according to {@link Object#equals(Object)}), only the first
   * duplicate in encounter order will appear in the result.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,delegateCollection,com.google.common.collect.ImmutableSortedAsList:delegateCollection(),38,41,"/**
 * Returns the underlying sorted set implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,"com.google.common.collect.ImmutableSortedMap:<init>(com.google.common.collect.RegularImmutableSortedSet,com.google.common.collect.ImmutableList)",764,766,"/**
 * Constructs an ImmutableSortedMap from keySet and valueList.
 * @param keySet Sorted set of keys.
 * @param valueList List of values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,forEach,com.google.common.collect.ImmutableSortedMap:forEach(java.util.function.BiConsumer),782,789,"/**
 * Applies the given action to each key-value pair in the map.
 * @param action The BiConsumer to apply to each entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,isPartialView,com.google.common.collect.ImmutableSortedMap:isPartialView(),797,800,"/**
* Checks if either keySet or valueList is a partial view.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstEntry,com.google.common.collect.ImmutableSortedMap:firstEntry(),1071,1074,"/**
* Returns the first entry in the map, or null if empty.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastEntry,com.google.common.collect.ImmutableSortedMap:lastEntry(),1076,1079,"/**
 * Returns the last entry in the map, or null if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,comparator,com.google.common.collect.ImmutableSortedMap:comparator(),904,907,"/**
 * Returns a comparator for the keys of this map.
 */","* Returns the comparator that orders the keys, which is {@link Ordering#natural()} when the
   * natural ordering of the keys is used. Note that its behavior is not consistent with {@link
   * TreeMap#comparator()}, which returns {@code null} to indicate natural ordering.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,writeReplace,com.google.common.collect.ImmutableSortedMultiset:writeReplace(),596,600,"/**
* Returns a SerializedForm instance to preserve type information.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,add,com.google.common.collect.ImmutableSortedSet$Builder:add(java.lang.Object),497,521,"/**
 * Adds an element to the builder. Returns the builder instance.
 * @param element The element to add.
 */
","* Adds {@code element} to the {@code ImmutableSortedSet}. If the {@code ImmutableSortedSet}
     * already contains {@code element}, then {@code add} has no effect. (only the previously added
     * element is retained).
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,writeReplace,com.google.common.collect.ImmutableSortedSet:writeReplace(),881,885,"/**
 * Returns a SerializedForm to preserve object state during serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,unsafeCompare,"com.google.common.collect.ImmutableSortedSet:unsafeCompare(java.lang.Object,java.lang.Object)",599,601,"/**
 * Compares two objects using the provided comparator.
 * @param a The first object to compare.
 * @param b The second object to compare.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,<init>,com.google.common.collect.RegularImmutableTable:<init>(),38,38,"/**
 * Creates a new, empty RegularImmutableTable.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,"com.google.common.collect.SingletonImmutableTable:<init>(java.lang.Object,java.lang.Object,java.lang.Object)",37,41,"/**
 * Creates a new SingletonImmutableTable with the given key/value.
 * @param rowKey Row key for the table.
 * @param columnKey Column key for the table.
 * @param value Value to store in the table.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerBuilder:<init>(),49,49,"/**
 * Private constructor to prevent direct instantiation of InternerBuilder.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,asFunction,com.google.common.collect.Interners:asFunction(com.google.common.collect.Interner),165,167,"/**
 * Creates a Function that uses the given Interner for value caching.
 * @param interner Interner instance to use for caching.
 * @return Function that uses the interner.
 */
","* Returns a function that delegates to the {@link Interner#intern} method of the given interner.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toString,com.google.common.collect.Iterables:toString(java.lang.Iterable),247,249,"/**
 * Converts an iterable to a string using its iterator.
 */","* Returns a string representation of {@code iterable}, with the format {@code [e1, e2, ..., en]}
   * (that is, identical to {@link java.util.Arrays Arrays}{@code
   * .toString(Iterables.toArray(iterable))}). Note that for <i>most</i> implementations of {@link
   * Collection}, {@code collection.toString()} also gives the same result, but that behavior is not
   * generally guaranteed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable),260,263,"/**
 * Retrieves the single element from an iterable.
 * @param iterable Iterable containing only one element.
 * @return The single element, or null if empty.
 */
","* Returns the single element contained in {@code iterable}.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.onlyElement())}.
   *
   * @throws NoSuchElementException if the iterable is empty
   * @throws IllegalArgumentException if the iterable contains multiple elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getOnlyElement,"com.google.common.collect.Iterators:getOnlyElement(java.util.Iterator,java.lang.Object)",336,340,"/**
 * Returns the only element from iterator or defaultValue if empty.
 */","* Returns the single element contained in {@code iterator}, or {@code defaultValue} if the
   * iterator is empty.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements. The state of the
   *     iterator is unspecified.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object[],java.lang.Object[],java.lang.Class)",72,79,"/**
 * Concatenates two arrays of type T into a new array.
 * @param first First array to concatenate.
 * @param second Second array to concatenate.
 * @param type Class of the array elements.
 * @return A new array containing elements from both arrays.
 */
","* Returns a new array that contains the concatenated contents of two arrays.
   *
   * @param first the first array of elements to concatenate
   * @param second the second array of elements to concatenate
   * @param type the component type of the returned array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,com.google.common.collect.Iterables:getLast(java.lang.Iterable),843,855,"/**
 * Gets the last element of an iterable.
 * Throws NoSuchElementException if the list is empty.
 */","* Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link
   * RandomAccess} support, then this operation is guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead.
   *
   * @return the last element of {@code iterable}
   * @throws NoSuchElementException if the iterable is empty",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,getLast,"com.google.common.collect.Iterators:getLast(java.util.Iterator,java.lang.Object)",921,925,"/**
 * Returns the last element of the iterator, or defaultValue if empty.
 * @param iterator Iterator to retrieve the last element from
 * @param defaultValue Value to return if iterator is empty
 * @return Last element or defaultValue
 */
","* Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the
   * iterator is empty.
   *
   * @param defaultValue the default value to return if the iterator is empty
   * @return the last element of {@code iterator}
   * @since 3.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,hasNext,com.google.common.collect.Iterators$ConcatenatedIterator:hasNext(),1394,1430,"/**
 * Checks if there's a next element in the iterator.
 * Handles nested iterators and null checks.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,emptyIterator,com.google.common.collect.Iterators:emptyIterator(),80,82,"/**
 * Returns an empty unmodifiable iterator.
 * Returns an iterator that does not iterate over any elements.
 */
","* Returns the empty iterator.
   *
   * <p>The {@link Iterable} equivalent of this method is {@link ImmutableSet#of()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,iterator,com.google.common.collect.SingletonImmutableList:iterator(),50,53,"/**
 * Returns an unmodifiable iterator for the single element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,iterator,com.google.common.collect.SingletonImmutableSet:iterator(),55,58,"/**
* Returns an unmodifiable iterator for the single element.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,newHeader,com.google.common.collect.LinkedHashMultimap$ValueEntry:newHeader(),211,214,"/**
 * Creates a new ValueEntry with null keys, value, and initial count.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,forEach,com.google.common.collect.LinkedHashMultimap$ValueSet:forEach(java.util.function.Consumer),452,460,"/**
 * Applies the given action to each value in the value set.
 * @param action The Consumer to apply to each value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,rehashIfNecessary,com.google.common.collect.LinkedHashMultimap$ValueSet:rehashIfNecessary(),503,519,"/**
* Resizes the hash table if the load factor exceeds the threshold.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap$ValueSet:clear(),547,559,"/**
 * Clears the multimap, removing all entries and resetting size.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromValueSet,com.google.common.collect.LinkedHashMultimap:deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink),148,151,"/**
 * Deletes an entry from a value set, updating predecessor/successor links.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,succeedsInMultimap,"com.google.common.collect.LinkedHashMultimap:succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry,com.google.common.collect.LinkedHashMultimap$ValueEntry)",142,146,"/**
 * Links two entries in a multimap, setting successor/predecessor.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,entrySpliterator,com.google.common.collect.LinkedHashMultimap:entrySpliterator(),593,596,"/**
 * Creates a spliterator for the map entries.
 * Uses DISTINCT and ORDERED characteristics.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,writeObject,com.google.common.collect.LinkedHashMultimap:writeObject(java.io.ObjectOutputStream),618,631,"/**
 * Writes the object's state to the stream for serialization.
 */
","* @serialData the expected values per key, the number of distinct keys, the number of entries,
   *     and the entries in order",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueIterator,com.google.common.collect.LinkedHashMultimap:valueIterator(),598,601,"/**
 * Returns an iterator over the values in the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:hasNext(),426,430,"/**
 * Checks if there is a next element in the iterator.
 * @return True if a next element exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:next(),432,445,"/**
 * Returns the next key in the iteration.
 * Throws NoSuchElementException if no next key exists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$DistinctKeyIterator:remove(),447,454,"/**
 * Removes the current element. Requires a prior call to next().
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,addNode,"com.google.common.collect.LinkedListMultimap:addNode(java.lang.Object,java.lang.Object,com.google.common.collect.LinkedListMultimap$Node)",198,249,"/**
 * Adds a new node to the list.
 * @param key key of the node
 * @param value value of the node
 * @param nextSibling node to insert before, or null
 * @return the newly created node
 */","* Adds a new node for the specified key-value pair before the specified {@code nextSibling}
   * element, or at the end of the list if {@code nextSibling} is null. Note: if {@code nextSibling}
   * is specified, it MUST be for a node for the same {@code key}!",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasNext,com.google.common.collect.LinkedListMultimap$NodeIterator:hasNext(),334,338,"/**
 * Checks if there is a next element in the iterator.
 * @return True if a next element exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,next,com.google.common.collect.LinkedListMultimap$NodeIterator:next(),340,351,"/**
 * Returns the next node in the linked list.
 * Throws NoSuchElementException if no next node exists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,remove,com.google.common.collect.LinkedListMultimap$NodeIterator:remove(),353,366,"/**
 * Removes the last element returned by {@code next()} or {@code previous()}.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,hasPrevious,com.google.common.collect.LinkedListMultimap$NodeIterator:hasPrevious(),368,372,"/**
 * Checks if a previous element exists in the iteration.
 * @return True if a previous element exists, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,previous,com.google.common.collect.LinkedListMultimap$NodeIterator:previous(),374,385,"/**
 * Moves the cursor to the previous element.
 * @return The previous Node object.
 * @throws NoSuchElementException if no previous element exists.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.CharSequence),762,764,"/**
 * Converts a CharSequence to a List of Characters.
 * @param sequence CharSequence to convert
 * @return List of Characters from the sequence
 */
","* Returns a view of the specified {@code CharSequence} as a {@code List<Character>}, viewing
   * {@code sequence} as a sequence of Unicode code units. The view does not support any
   * modification operations, but reflects any changes to the underlying character sequence.
   *
   * @param sequence the character sequence to view as a {@code List} of characters
   * @return an {@code List<Character>} view of the character sequence
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,"com.google.common.collect.Lists$RandomAccessPartition:<init>(java.util.List,int)",739,741,"/**
 * Constructs a RandomAccessPartition with the given list and size.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,indexOfImpl,"com.google.common.collect.Lists:indexOfImpl(java.util.List,java.lang.Object)",1065,1077,"/**
 * Finds the index of the element in the list.
 * Returns -1 if the element is not found.
 */
",An implementation of {@link List#indexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,lastIndexOfImpl,"com.google.common.collect.Lists:lastIndexOfImpl(java.util.List,java.lang.Object)",1098,1110,"/**
 * Finds the last index of an element in a list.
 * @param list list to search
 * @param element element to find
 * @return last index or -1 if not found
 */
",An implementation of {@link List#lastIndexOf(Object)}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,delegate,com.google.common.collect.ForwardingConcurrentMap:delegate(),46,47,"/**
 * Returns the underlying map implementation. Abstract method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry:<init>(java.lang.Object,int)",584,586,"/**
 * Constructs a StrongKeyDummyValueEntry with the given key and hash.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry:<init>(java.lang.Object,int)",394,396,"/**
 * Constructs a new StrongKeyStrongValueEntry with the given key and hash.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",696,698,"/**
 * Constructs a WeakKeyDummyValueEntry with a queue, key, and hash.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",787,789,"/**
 * Constructs a WeakKeyStrongValueEntry.
 * @param queue ReferenceQueue for weak keys
 * @param key The key
 * @param hash The hash code
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap:containsValue(java.lang.Object),2385,2421,"/**
 * Checks if the map contains a specified value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$EntrySet:isEmpty(),2776,2779,"/**
 * Checks if the map is empty.
 * Delegates to the internal map's isEmpty() method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$KeySet:isEmpty(),2688,2691,"/**
 * Checks if the map is empty.
 * Delegates to the internal map's isEmpty() method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isEmpty,com.google.common.collect.MapMakerInternalMap$Values:isEmpty(),2722,2725,"/**
 * Checks if the map is empty.
 * Delegates to the internal map's isEmpty() method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextInTable,com.google.common.collect.MapMakerInternalMap$HashIterator:nextInTable(),2577,2586,"/**
 * Checks for the next entry in the table, advancing if found.
 * Returns true if a next entry is found, false otherwise.
 */
",Finds the next entry in the current table. Returns {@code true} if an entry was found.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,expand,com.google.common.collect.MapMakerInternalMap$Segment:expand(),1556,1622,"/**
* Expands the table to double its capacity if not at maximum.
* Reclassifies nodes to new indices based on power-of-two expansion.
*/
",Expands the table if possible.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$Segment:<init>(com.google.common.collect.MapMakerInternalMap,int)",1234,1237,"/**
 * Constructs a Segment with a given initial capacity.
 * @param map The parent MapMakerInternalMap.
 * @param initialCapacity Initial size of the segment's array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,tryDrainReferenceQueues,com.google.common.collect.MapMakerInternalMap$Segment:tryDrainReferenceQueues(),1362,1370,"/**
 * Attempts to drain reference queues safely using a lock.
 */",Cleanup collected entries when the lock is available.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runLockedCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runLockedCleanup(),2007,2016,"/**
 * Performs cleanup operations while holding a lock.
 * Drains queues and resets read count.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Segment:clear(),1794,1811,"/**
 * Clears the collection, removing all elements and resetting count.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",652,661,"/**
 * Creates a new entry for the segment.
 * @param segment The segment to add to.
 * @param key The key for the entry.
 * @param hash The hash code of the key.
 * @param next The next entry (or null).
 * @return New StrongKeyDummyValueEntry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",467,476,"/**
 * Creates a new entry for the segment.
 * @param segment Segment to add the entry to.
 * @param key Key of the entry.
 * @param hash Hash code of the key.
 * @param next Next entry in the list, or null.
 * @return New StrongKeyStrongValueEntry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",566,575,"/**
 * Creates a new StrongKeyWeakValueEntry. Uses LinkedEntry if next is provided.
 * @param segment Segment to create entry for
 * @param key Key for the entry
 * @param hash Hash code of the key
 * @param next Existing entry to link to (or null)
 * @return New StrongKeyWeakValueEntry
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry:<init>(java.lang.Object,int)",487,489,"/**
 * Constructs a new StrongKeyWeakValueEntry with the given key and hash.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int)",882,884,"/**
 * Constructs a WeakKeyWeakValueEntry with queue, key, and hash.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2078,2082,"/**
 * Creates a WeakValueReference for testing purposes.
 * @param e InternalEntry
 * @param value Value to be weakly referenced
 * @return WeakValueReference instance
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2084,2095,"/**
* Sets a new weak value reference for testing purposes.
* @param e the entry to update
* @param valueReference the new weak value reference
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2072,2076,"/**
 * Returns a WeakValueReference for testing purposes.
 * @param e InternalEntry to get the reference from
 * @return WeakValueReference object
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry)",751,762,"/**
 * Copies a WeakKeyDummyValueEntry.
 * @param segment Segment to copy into.
 * @param entry Entry to copy.
 * @param newNext Next entry for the copy.
 * @return New entry or null if key is null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getValue,com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$LinkedWeakKeyDummyValueEntry:getValue(),700,703,"/**
 * Returns the singleton Dummy value.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)",841,854,"/**
 * Creates a copy of an entry for a WeakKeyStrongValueSegment.
 * @param segment The segment to copy for.
 * @param entry The entry to copy.
 * @param newNext The next entry in the chain.
 * @return A copy of the entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)",2209,2213,"/**
 * Creates a WeakValueReference for testing purposes.
 * @param e InternalEntry, used for the reference.
 * @param value Value to be associated with the key.
 * @return WeakValueReference object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setWeakValueReferenceForTesting,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$WeakValueReference)",2215,2226,"/**
 * Sets a new weak value reference for testing purposes.
 * @param e InternalEntry to update
 * @param valueReference New WeakValueReference to set
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getWeakValueReferenceForTesting,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),2203,2207,"/**
 * Returns a WeakValueReference for testing purposes.
 * @param e InternalEntry to get the reference from.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,isLiveForTesting,com.google.common.collect.MapMakerInternalMap:isLiveForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry),1128,1131,"/**
 * Checks if an entry is live for testing purposes.
 * @param entry The entry to check.
 * @return True if the entry is live, false otherwise.
 */
","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,hash,com.google.common.collect.MapMakerInternalMap:hash(java.lang.Object),1108,1111,"/**
 * Calculates a hash code for the given key.
 * @param key The object to be hashed.
 * @return The calculated hash code.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredKeyMap:<init>(java.util.Map,com.google.common.base.Predicate,com.google.common.base.Predicate)",2975,2981,"/**
 * Constructs a FilteredKeyMap with key and entry predicates.
 * @param unfiltered The unfiltered map.
 * @param keyPredicate Predicate for filtering keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$AsMapView:createKeySet(),896,899,"/**
 * Creates a key set from the backing set.
 * Returns a new set containing only the keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$AsMapView:size(),906,909,"/**
 * Returns the number of elements in this collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AsMapView:containsKey(java.lang.Object),911,914,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the map contains the key, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AsMapView:remove(java.lang.Object),932,941,"/**
 * Removes the specified key from the set and applies the function.
 * @param key The key to remove. Returns the function's result or null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$AsMapView:clear(),943,946,"/**
 * Clears the set. Delegates to the backing set's clear method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forEach,com.google.common.collect.Maps$AsMapView:forEach(java.util.function.BiConsumer),965,970,"/**
 * Applies the consumer to each key-value pair in the map.
 * @param action BiConsumer to apply to each key-value pair.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,backingSet,com.google.common.collect.Maps$SortedAsMapView:backingSet(),990,993,"/**
* Returns the backing set of this map. Casts to SortedSet<K>.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$NavigableAsMapView:entryIterator(),1095,1098,"/**
* Returns an iterator over the map entries.
* Uses set and function to create the iterator.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,iterator,com.google.common.collect.Multimaps$AsMap$EntrySet:iterator(),1904,1907,"/**
 * Returns an iterator over the multimap's entries.
 * Uses keySet and retrieves values for each key.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:iterator(),919,922,"/**
 * Returns an iterator over map entries (column -> row -> value).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$RowMap$EntrySet:iterator(),839,842,"/**
 * Returns an iterator over the map entries.
 * Uses backingMap keys, calls row() to get values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySet,com.google.common.collect.Maps$DescendingMap:entrySet(),4383,4387,"/**
* Returns a set view of the map's entries. Lazily initialized.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$DescendingMap:subMap(java.lang.Object,java.lang.Object)",4434,4437,"/**
 * Returns a sorted map containing entries between fromKey and toKey.
 * @param fromKey start key (inclusive)
 * @param toKey end key (exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$DescendingMap:headMap(java.lang.Object),4444,4447,"/**
 * Returns a sorted map containing entries whose keys are less than toKey.
 * @param toKey The key to which all entries are less than.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$DescendingMap:tailMap(java.lang.Object),4454,4457,"/**
 * Returns a sorted map containing entries whose keys are >= fromKey.
 * @param fromKey the key from which to start inclusion
 * @return a tail map containing entries >= fromKey
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:removeAll(java.util.Collection),955,965,"/**
 * Removes all elements from this set that are contained in the given collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,forcePut,"com.google.common.collect.Maps$FilteredEntryBiMap:forcePut(java.lang.Object,java.lang.Object)",3387,3391,"/**
 * Forces a key-value pair into the map, validating with apply.
 * @param key The key to insert.
 * @param value The value to associate with the key.
 * @return The previous value associated with the key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,replaceAll,com.google.common.collect.Maps$FilteredEntryBiMap:replaceAll(java.util.function.BiFunction),3393,3401,"/**
 * Replaces values in the map based on the provided function,
 * filtering with the internal predicate.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:removeAll(java.util.Collection),3098,3101,"/**
* Removes all keys from the unfiltered set based on the collection.
* @param collection Collection of keys to remove.
* @return True if the set was modified, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$FilteredEntryMap$KeySet:retainAll(java.util.Collection),3103,3106,"/**
* Retains keys present in the given collection.
* @param collection Collection of keys to retain.
* @return True if the map was modified, false otherwise.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:comparator(),3147,3150,"/**
* Returns the comparator used for keys in this sorted map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$FilteredEntrySortedMap:comparator(),3181,3184,"/**
* Returns the comparator used for keys in this sorted map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$FilteredEntrySortedMap:lastKey(),3193,3206,"/**
 * Returns the last key that satisfies the predicate.
 * Iterates through sorted keys until predicate is true.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$FilteredEntrySortedMap:firstKey(),3186,3191,"/**
 * Returns the first key in the map.
 * Throws NoSuchElementException if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$KeySet:iterator(),3926,3929,"/**
 * Returns an iterator over the map's keys.
 * Uses the underlying entry set iterator.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$KeySet:size(),3938,3941,"/**
 * Returns the number of elements in the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$KeySet:isEmpty(),3943,3946,"/**
 * Checks if the collection is empty.
 * Returns true if empty, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$KeySet:contains(java.lang.Object),3948,3951,"/**
 * Checks if the map contains the specified key.
 * @param o the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$KeySet:clear(),3962,3965,"/**
 * Clears the underlying map, removing all entries.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,map,com.google.common.collect.Maps$SortedKeySet:map(),3982,3985,"/**
* Returns a sorted map view of the elements in this map.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedMapDifferenceImpl:<init>(java.util.SortedMap,java.util.SortedMap,java.util.SortedMap,java.util.SortedMap)",752,758,"/**
 * Constructs a SortedMapDifferenceImpl with provided sorted maps.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toString,com.google.common.collect.Maps$MapDifferenceImpl:toString(),682,699,"/**
 * Returns a string representation of the object, indicating equality.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnLeft,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnLeft(),770,773,"/**
* Returns entries present only on the left side.
* Casts the result of the superclass method.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesOnlyOnRight,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesOnlyOnRight(),775,778,"/**
* Returns a sorted map of entries unique to the right side.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesInCommon,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesInCommon(),765,768,"/**
 * Returns a sorted map of entries common to this and another map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,equals,com.google.common.collect.Maps$MapDifferenceImpl:equals(java.lang.Object),661,674,"/**
 * Checks if this MapDifference is equal to another object.
 * @param object The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,hashCode,com.google.common.collect.Maps$MapDifferenceImpl:hashCode(),676,680,"/**
 * Generates a hash code based on the set differences.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entriesDiffering,com.google.common.collect.Maps$SortedMapDifferenceImpl:entriesDiffering(),760,763,"/**
* Returns the entries differing from the parent map.
* Casts the result to SortedMap<K, ValueDifference<V>>.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lower,com.google.common.collect.Maps$NavigableKeySet:lower(java.lang.Object),4032,4035,"/**
 * Returns the greatest key strictly less than the given key.
 * @param e the key to compare against
 * @return the lower key, or null if none exists
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floor,com.google.common.collect.Maps$NavigableKeySet:floor(java.lang.Object),4037,4040,"/**
 * Returns the greatest key less than or equal to the given key.
 * @param e the key to compare against
 * @return the floor key, or null if none exists
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceiling,com.google.common.collect.Maps$NavigableKeySet:ceiling(java.lang.Object),4042,4045,"/**
 * Returns the smallest key greater than or equal to the given key.
 * @param e the key to compare against
 * @return the ceiling key or null if none exists
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higher,com.google.common.collect.Maps$NavigableKeySet:higher(java.lang.Object),4047,4050,"/**
 * Returns the next higher key than the given key, or null if none.
 * @param e the key to compare to
 * @return the next higher key, or null
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirst,com.google.common.collect.Maps$NavigableKeySet:pollFirst(),4052,4055,"/**
 * Retrieves and removes the first key-value pair, or null.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLast,com.google.common.collect.Maps$NavigableKeySet:pollLast(),4057,4060,"/**
 * Retrieves and removes the last key-value pair, or null if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingSet,com.google.common.collect.Maps$NavigableKeySet:descendingSet(),4062,4065,"/**
 * Returns a descending order view of the map's keys.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",4072,4079,"/**
 * Returns a sub-set of keys between fromElement and toElement.
 * @param fromElement start element (inclusive or exclusive)
 * @param toElement end element (inclusive or exclusive)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,"com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object,boolean)",4086,4089,"/**
 * Returns a head set, containing entries with keys less than {@code toElement}.
 * @param toElement The supremum of the returned keys.
 * @param inclusive Whether to include {@code toElement}.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,"com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object,boolean)",4096,4099,"/**
 * Returns a tail set of keys from the given element, inclusive.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:fromMap(),2389,2392,"/**
* Returns a navigable map backed by the map.
* Casts the result of the superclass implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$TransformedEntriesSortedMap:comparator(),2232,2235,"/**
 * Returns the comparator associated with this map, or null if none.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:firstKey(),2237,2241,"/**
 * Returns the first key in the map.
 * Delegates to the underlying map's firstKey() method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$TransformedEntriesSortedMap:lastKey(),2248,2252,"/**
 * Returns the last key in the map.
 * Returns null if the map is empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,delegate,com.google.common.collect.ForwardingSortedMap:delegate(),65,66,"/**
 * Returns the delegate SortedMap implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,create,"com.google.common.collect.Maps$ValueDifferenceImpl:create(java.lang.Object,java.lang.Object)",707,710,"/**
 * Creates a ValueDifference instance from the given left and right values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,iterator,com.google.common.collect.Maps$Values:iterator(),4119,4122,"/**
 * Returns an iterator over the values in the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$Values:remove(java.lang.Object),4131,4144,"/**
 * Removes specified object from the map. Returns true if removed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,size,com.google.common.collect.Maps$Values:size(),4176,4179,"/**
 * Returns the number of key-value pairs in the collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$Values:isEmpty(),4181,4184,"/**
 * Checks if the collection is empty.
 * Returns true if empty, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$Values:contains(java.lang.Object),4186,4189,"/**
 * Checks if the map contains the specified value.
 * @param o the value to search for
 * @return true if found, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$Values:clear(),4191,4194,"/**
 * Clears all elements from the underlying map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$Values:removeAll(java.util.Collection),4146,4159,"/**
 * Removes all elements from the map if they are present in the collection.
 * @param c collection of values to be removed
 * @return true if the map was modified, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$Values:retainAll(java.util.Collection),4161,4174,"/**
 * Retains only the entries whose values are contained in the given collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,<init>,com.google.common.eventbus.SubscriberRegistry:<init>(com.google.common.eventbus.EventBus),69,71,"/**
 * Constructs a SubscriberRegistry with the given EventBus.
 * @param bus The EventBus instance to use.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,com.google.common.collect.TreeRangeMap:<init>(),89,91,"/**
 * Constructs a new TreeRangeMap with an empty entries map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newIdentityHashSet,com.google.common.collect.Sets:newIdentityHashSet(),453,455,"/**
 * Creates a new identity hash set. Uses an identity hash map internally.
 */","* Creates an empty {@code Set} that uses identity to determine equality. It compares object
   * references, instead of calling {@code equals}, to determine whether a provided object matches
   * an element in the set. For example, {@code contains} returns {@code false} when passed an
   * object that equals a set member, but isn't the same instance. This behavior is similar to the
   * way {@code IdentityHashMap} handles key lookups.
   *
   * @since 8.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedBiMap,com.google.common.collect.Maps:synchronizedBiMap(com.google.common.collect.BiMap),1678,1682,"/**
 * Returns a synchronized BiMap.
 * @param bimap The BiMap to synchronize.
 * @return A synchronized BiMap.
 */
","* Returns a synchronized (thread-safe) bimap backed by the specified bimap. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing bimap is accomplished
   * through the returned bimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned map when accessing any
   * of its collection views:
   *
   * {@snippet :
   * BiMap<Long, String> map = Maps.synchronizedBiMap(
   *     HashBiMap.<Long, String>create());
   * ...
   * Set<Long> set = map.keySet();  // Needn't be in synchronized block
   * ...
   * synchronized (map) {  // Synchronizing on map, not set!
   *   Iterator<Long> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified bimap",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keyPredicateOnEntries,com.google.common.collect.Maps:keyPredicateOnEntries(com.google.common.base.Predicate),2395,2398,"/**
 * Creates a predicate that checks keys against a given predicate.
 * @param keyPredicate Predicate to apply to the keys of entries.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,compareElements,"com.google.common.collect.MinMaxPriorityQueue$Heap:compareElements(int,int)",530,532,"/**
 * Compares two elements using the provided ordering.
 * @param a Index of the first element.
 * @param b Index of the second element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peek,com.google.common.collect.MinMaxPriorityQueue:peek(),318,321,"/**
 * Retrieves and returns the head of the list, without removing it.
 * @return The head element or null if the list is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getGrandparentIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:getGrandparentIndex(int),760,762,"/**
 * Calculates the grandparent index based on the given index.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOverUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOverUp(int,java.lang.Object)",634,664,"/**
 * Performs crossover operation, potentially swapping with parent.
 * @param index current index, E x element to be placed
 * @return index of the element after crossover
 */
","* Moves an element one level up from a min level to a max level (or vice versa). Returns the
     * new position of the element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,swapWithConceptuallyLastElement,com.google.common.collect.MinMaxPriorityQueue$Heap:swapWithConceptuallyLastElement(java.lang.Object),679,694,"/**
 * Swaps last element with a suitable element in the heap.
 * @param actualLastElement The element to be swapped.
 * @return Index of the swapped element, or size if no swap.
 */","* Swap {@code actualLastElement} with the conceptually correct last element of the heap.
     * Returns the index that {@code actualLastElement} now resides in.
     *
     * <p>Since the last element of the array is actually in the middle of the sorted structure, a
     * childless aunt node could be smaller, which would corrupt the invariant if this element
     * becomes the new parent of the aunt node. In that case, we first switch the last element with
     * its aunt node, before returning.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,nextNotInSkipMe,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:nextNotInSkipMe(int),869,878,"/**
 * Advances nextCursor to c, skipping elements matching skipMe.
 */","* Advances nextCursor to the index of the first element after {@code c} that is not in {@code
     * skipMe} and returns {@code size()} if there is no such element.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,initialQueueSize,"com.google.common.collect.MinMaxPriorityQueue:initialQueueSize(int,int,java.lang.Iterable)",939,956,"/**
* Calculates initial queue size based on config, contents, and max size.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,add,com.google.common.collect.MoreCollectors$ToOptionalState:add(java.lang.Object),117,130,"/**
 * Adds an object to the list. Throws exception if max is reached.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,combine,com.google.common.collect.MoreCollectors$ToOptionalState:combine(com.google.common.collect.MoreCollectors$ToOptionalState),132,150,"/**
 * Combines this ToOptionalState with another. Returns this or other.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getOptional,com.google.common.collect.MoreCollectors$ToOptionalState:getOptional(),152,158,"/**
 * Returns an Optional containing the element, or empty if extras is not empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MoreCollectors.java,getElement,com.google.common.collect.MoreCollectors$ToOptionalState:getElement(),160,168,"/**
 * Returns the next element. Throws NoSuchElementException if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$ListMultimapBuilder:build(com.google.common.collect.Multimap),439,443,"/**
 * Builds a ListMultimap from the given Multimap.
 * @param multimap The Multimap to build from.
 * @return A ListMultimap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SetMultimapBuilder:build(com.google.common.collect.Multimap),459,463,"/**
 * Builds a SetMultimap from a Multimap.
 * @param multimap The Multimap to build from.
 * @return A SetMultimap constructed from the input.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,<init>,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:<init>(),474,474,"/**
* Creates a SortedSetMultimapBuilder for constructing SortedSetMultimaps.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap$EntrySet:remove(java.lang.Object),1909,1918,"/**
 * Removes the specified key-value pair from the map.
 * @param o the entry to remove; returns false if not present
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$AsMap:get(java.lang.Object),1921,1925,"/**
 * Retrieves values associated with the given key.
 * @param key The key to retrieve values for.
 * @return Collection of values or null if key not present.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,com.google.common.collect.Multimaps$AsMap:remove(java.lang.Object),1927,1930,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for. Returns removed values or null.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableListMultimap:delegate(),799,802,"/**
 * Returns the underlying ListMultimap implementation.
 * Casts the superclass delegate to ListMultimap.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:delegate(),829,832,"/**
* Returns the underlying SetMultimap implementation.
* Casts the superclass delegate to the correct type.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,"com.google.common.collect.Multisets$FilteredMultiset:remove(java.lang.Object,int)",381,389,"/**
 * Removes specified element occurrences.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return Number of elements removed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iteratorImpl,com.google.common.collect.Multisets:iteratorImpl(com.google.common.collect.Multiset),1061,1063,"/**
 * Creates an iterator for the multiset.
 * @param multiset The multiset to iterate over.
 * @return An iterator for the multiset's entries.
 */
",An implementation of {@link Multiset#iterator}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,next,com.google.common.collect.Multisets$MultisetIteratorImpl:next(),1088,1105,"/**
 * Returns the next element in the iteration.
 * Throws NoSuchElementException if no next element exists.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,elementSet,com.google.common.collect.Multisets$UnmodifiableMultiset:elementSet(),151,155,"/**
 * Returns a set containing all elements in the collection.
 * Lazily creates the set if it's not already initialized.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,delegate,com.google.common.collect.UnmodifiableSortedMultiset:delegate(),44,47,"/**
* Returns the underlying SortedMultiset implementation.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,delegate,com.google.common.collect.ForwardingMultiset:delegate(),56,57,"/**
 * Returns the delegate multiset implementation. Abstract method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,delegate,com.google.common.collect.MutableClassToInstanceMap$2:delegate(),79,82,"/**
 * Returns the delegate map. Provides access to the underlying map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,writeReplace,com.google.common.collect.MutableClassToInstanceMap:writeReplace(),186,188,"/**
 * Returns a SerializedForm object for serialization.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,newArray,"com.google.common.collect.ObjectArrays:newArray(java.lang.Object[],int)",61,63,"/**
 * Creates a new array of the same type as the reference array.
 * @param reference Array to determine the type.
 * @param length Desired length of the new array.
 * @return New array of the specified length.
 */
","* Returns a new array of the given length with the same type as a reference array.
   *
   * @param reference any array of the desired type
   * @param length the length of the new array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection),180,182,"/**
 * Converts a collection to an array.
 * @param c Collection to convert.
 * @return Array representation of the collection.
 */
","* Returns an array containing all of the elements in the specified collection. This method
   * returns the elements in the order they are returned by the collection's iterator. The returned
   * array is ""safe"" in that no references to it are maintained by the collection. The caller is
   * thus free to modify the returned array.
   *
   * <p>This method assumes that the collection size doesn't change while the method is running.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,checkElementsNotNull,"com.google.common.collect.ObjectArrays:checkElementsNotNull(java.lang.Object[],int)",219,225,"/**
 * Checks array elements for null, throwing exception if found.
 * @param array array to check
 * @param length number of elements to check
 * @return the input array
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compare,"com.google.common.collect.Ordering$ArbitraryOrdering:compare(java.lang.Object,java.lang.Object)",355,376,"/**
 * Compares two objects based on identity, then UID.
 * Returns -1, 0, or 1 based on the comparison.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.util.Iterator),561,571,"/**
 * Finds the minimum element from the iterator.
 * @param iterator Iterator providing elements to compare.
 * @return Minimum element found in the iterator.
 */
","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).min(thisComparator).get()} instead
   * (but note that it does not guarantee which tied minimum element is returned).
   *
   * @param iterator the iterator whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,"com.google.common.collect.ReverseOrdering:max(java.lang.Object,java.lang.Object)",72,75,"/**
 * Returns the greater of two elements.
 * @param a The first element.
 * @param b The second element.
 * @return The larger of a and b.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.util.Iterator),652,662,"/**
 * Finds the maximum element from the given iterator.
 * @param iterator Iterator providing elements of type E.
 * @return The maximum element found in the iterator.
 */
","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned. The iterator will be left exhausted: its
   * {@code hasNext()} method will return {@code false}.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).max(thisComparator).get()} instead
   * (but note that it does not guarantee which tied maximum element is returned).
   *
   * @param iterator the iterator whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterator} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.
   * @since 11.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloseAll,com.google.common.collect.Range:encloseAll(java.lang.Iterable),304,322,"/**
 * Finds the smallest and largest values in an iterable.
 * @param values Iterable of comparable values.
 * @return Range containing the min and max values.
 */
","* Returns the minimal range that {@linkplain Range#contains(Comparable) contains} all of the
   * given values. The returned range is {@linkplain BoundType#CLOSED closed} on both ends.
   *
   * @throws ClassCastException if the values are not mutually comparable
   * @throws NoSuchElementException if {@code values} is empty
   * @throws NullPointerException if any of {@code values} is null
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,"com.google.common.collect.ReverseOrdering:min(java.lang.Object,java.lang.Object)",51,54,"/**
 * Returns the smaller of two elements.
 * @param a The first element.
 * @param b The second element.
 * @return The smaller element.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(),279,281,"/**
 * Returns a new ConcurrentHashSet. Uses Platform.newConcurrentHashSet().
 */","* Creates a thread-safe set backed by a hash map. The set is backed by a {@link
   * ConcurrentHashMap} instance, and thus carries the same concurrency guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @return a new, empty thread-safe {@code Set}
   * @since 15.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,compare,"com.google.common.collect.Range$RangeLexOrdering:compare(com.google.common.collect.Range,com.google.common.collect.Range)",721,727,"/**
 * Compares two ranges based on lower and upper bounds.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,toString,com.google.common.collect.Range:toString(),681,684,"/**
 * Returns a string representation of the object.
 * Delegates to toString(lowerBound, upperBound).
 */
","* Returns a string representation of this range, such as {@code ""[3..5)""} (other examples are
   * listed in the class documentation).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,lowerEndpoint,com.google.common.collect.Range:lowerEndpoint(),348,350,"/**
 * Returns the lower endpoint of the range.
 * Returns the endpoint object of the lower bound.
 */
","* Returns the lower endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded below (that is, {@link
   *     #hasLowerBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,upperEndpoint,com.google.common.collect.Range:upperEndpoint(),374,376,"/**
 * Returns the upper endpoint of the range.
 * @return The upper endpoint as a C object.
 */
","* Returns the upper endpoint of this range.
   *
   * @throws IllegalStateException if this range is unbounded above (that is, {@link
   *     #hasUpperBound()} returns {@code false})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,descendingIterator,com.google.common.collect.RegularContiguousSet:descendingIterator(),102,113,"/**
 * Returns a descending iterator over the elements in the set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,iterator,com.google.common.collect.RegularContiguousSet:iterator(),90,100,"/**
 * Returns an iterator over the elements in the domain.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,size,com.google.common.collect.RegularContiguousSet:size(),165,169,"/**
 * Returns the number of elements in the domain.
 * Calculates distance between first and last elements.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,equals,com.google.common.collect.RegularContiguousSet:equals(java.lang.Object),223,234,"/**
 * Checks if two sets are equal, considering domain, first, and last elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,size,com.google.common.collect.RegularImmutableBiMap$Inverse:size(),206,209,"/**
 * Returns the size of the inverse collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap$Inverse:get(java.lang.Object),222,236,"/**
 * Retrieves the key associated with the given value.
 * @param value The value to search for.
 * @return The corresponding key, or null if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,checkNoConflictInValueBucket,"com.google.common.collect.RegularImmutableBiMap:checkNoConflictInValueBucket(java.lang.Object,java.util.Map$Entry,com.google.common.collect.ImmutableMapEntry)",136,146,"/**
 * Checks for conflicts in a value bucket, throwing exception if overflow.
 */","* @throws IllegalArgumentException if another entry in the bucket has the same key
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,writeReplace,com.google.common.collect.RegularImmutableBiMap$Inverse:writeReplace(),314,319,"/**
* Returns an InverseSerializedForm for serialization.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,removeDuplicates,"com.google.common.collect.RegularImmutableMap:removeDuplicates(java.util.Map$Entry[],int,int,java.util.IdentityHashMap)",186,203,"/**
 * Removes duplicate entries from an array.
 * @param entries Input array, n size, newN new size, duplicates map
 * @return New array with duplicates removed.
 */
","* Constructs a new entry array where each duplicated key from the original appears only once, at
   * its first position but with its final value. The {@code duplicates} map is modified.
   *
   * @param entries the original array of entries including duplicates
   * @param n the number of valid entries in {@code entries}
   * @param newN the expected number of entries once duplicates are removed
   * @param duplicates a map of canonical {@link Entry} objects for each duplicate key. This map
   *     will be updated by the method, setting each value to false as soon as the {@link Entry} has
   *     been included in the new entry array.
   * @return an array of {@code newN} entries where no key appears more than once.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createKeySet,com.google.common.collect.RegularImmutableMap:createKeySet(),312,315,"/**
 * Creates an immutable set of keys for this map.
 * Returns a KeySet object representing the keys.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$KeySet:size(),339,342,"/**
 * Returns the number of elements in the map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,size,com.google.common.collect.RegularImmutableMap$Values:size(),389,392,"/**
 * Returns the number of key-value mappings in this map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,checkNoConflictInKeyBucket,"com.google.common.collect.RegularImmutableMap:checkNoConflictInKeyBucket(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,boolean)",235,256,"/**
 * Checks for key conflicts in a bucket. Throws exception or returns entry if duplicate.
 */","* Checks if the given key already appears in the hash chain starting at {@code keyBucketHead}. If
   * it does not, then null is returned. If it does, then if {@code throwIfDuplicateKeys} is true an
   * {@code IllegalArgumentException} is thrown, and otherwise the existing {@link Entry} is
   * returned.
   *
   * @throws IllegalArgumentException if another entry in the bucket has the same key and {@code
   *     throwIfDuplicateKeys} is true
   * @throws BucketOverflowException if this bucket has too many entries, which may indicate a hash
   *     flooding attack",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,"com.google.common.collect.RegularImmutableMap:get(java.lang.Object,com.google.common.collect.ImmutableMapEntry[],int)",265,287,"/**
* Retrieves the value associated with a key from the key table.
* @param key The key to search for.
* @param keyTable The hash table to search.
* @param mask The mask for hashing.
* @return The value associated with the key, or null if not found.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,hashFloodingDetected,com.google.common.collect.RegularImmutableMultiset:hashFloodingDetected(com.google.common.collect.Multisets$ImmutableEntry[]),87,98,"/**
 * Checks if hash flooding is detected in the hash table.
 * @param hashTable Array of ImmutableEntry objects.
 * @return True if flooding is detected, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,forEachEntry,com.google.common.collect.RegularImmutableSortedMultiset:forEachEntry(java.util.function.ObjIntConsumer),71,77,"/**
 * Applies the consumer to each entry (key, value) in the map.
 * @param action The consumer to apply to each entry.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,last,com.google.common.collect.RegularImmutableSortedSet:last(),215,221,"/**
 * Returns the last element in the list.
 * Throws NoSuchElementException if the list is empty.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,unsafeBinarySearch,com.google.common.collect.RegularImmutableSortedSet:unsafeBinarySearch(java.lang.Object),156,158,"/**
 * Performs binary search on elements using an unsafe comparator.
 * @param key The key to search for.
 * @return Index of key if found, otherwise negative insertion point.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,indexOf,com.google.common.collect.RegularImmutableSortedSet:indexOf(java.lang.Object),300,312,"/**
 * Returns the index of the target object, or -1 if not found.
 * @param target The object to search for. Null is handled.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,delegate,com.google.common.collect.ForwardingNavigableSet:delegate(),58,59,"/**
 * Returns the navigable set implementation. Abstract method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.collect.Sets$PowerSet:iterator(),1740,1748,"/**
 * Returns an iterator over sets of elements in the multiset.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,toImmutableEnumSet,com.google.common.collect.Sets:toImmutableEnumSet(),150,152,"/**
 * Creates a collector for ImmutableSet of enum values.
 * Delegates to CollectCollectors.toImmutableEnumSet().
 */
","* Returns a {@code Collector} that accumulates the input elements into a new {@code ImmutableSet}
   * with an implementation specialized for enums. Unlike {@link ImmutableSet#toImmutableSet}, the
   * resulting set will iterate over elements in their enum definition order, not encounter order.
   *
   * @since 21.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,com.google.common.collect.Sets:complementOf(java.util.Collection),505,515,"/**
 * Returns a complement of the given collection of enum constants.
 * @param collection Collection of enum constants.
 * @return An EnumSet containing the complement.
 */
","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. If the collection is an {@link EnumSet}, this method has the same behavior as
   * {@link EnumSet#complementOf}. Otherwise, the specified collection must contain at least one
   * element, in order to determine the element type. If the collection could be empty, use {@link
   * #complementOf(Collection, Class)} instead of this method.
   *
   * @param collection the collection whose complement should be stored in the enum set
   * @return a new, modifiable {@code EnumSet} containing all values of the enum that aren't present
   *     in the given collection
   * @throws IllegalArgumentException if {@code collection} is not an {@code EnumSet} instance and
   *     contains no elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,complementOf,"com.google.common.collect.Sets:complementOf(java.util.Collection,java.lang.Class)",527,535,"/**
 * Returns the complement of a given enum collection.
 * @param collection The enum collection to complement.
 * @param type The enum type.
 * @return The complement of the collection.
 */
","* Creates an {@code EnumSet} consisting of all enum values that are not in the specified
   * collection. This is equivalent to {@link EnumSet#complementOf}, but can act on any input
   * collection, as long as the elements are of enum type.
   *
   * @param collection the collection whose complement should be stored in the {@code EnumSet}
   * @param type the type of the elements in the set
   * @return a new, modifiable {@code EnumSet} initially containing all the values of the enum not
   *     present in the given collection",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,<init>,com.google.common.collect.SortedMultisets$NavigableElementSet:<init>(com.google.common.collect.SortedMultiset),99,101,"/**
 * Constructs a NavigableElementSet using the provided SortedMultiset.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,iterator,com.google.common.collect.SortedMultisets$ElementSet:iterator(),57,60,"/**
* Returns an iterator over the elements in this multiset.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,comparator,com.google.common.collect.SortedMultisets$ElementSet:comparator(),62,65,"/**
 * Returns a comparator for elements based on the multiset.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$ElementSet:subSet(java.lang.Object,java.lang.Object)",67,70,"/**
 * Returns a sorted set of elements between {@code fromElement} and {@code toElement}.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,com.google.common.collect.SortedMultisets$ElementSet:headSet(java.lang.Object),72,75,"/**
 * Returns a sorted set containing elements less than {@code toElement}.
 * @param toElement element to return elements before
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,com.google.common.collect.SortedMultisets$ElementSet:tailSet(java.lang.Object),77,80,"/**
 * Returns a sorted set of elements not less than fromElement.
 * @param fromElement the lower bound (inclusive) of the returned set
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,first,com.google.common.collect.SortedMultisets$ElementSet:first(),82,86,"/**
 * Returns the first element in the multiset.
 * Returns the element or throws an exception if empty.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,last,com.google.common.collect.SortedMultisets$ElementSet:last(),88,92,"/**
 * Returns the last element in the multiset.
 * Returns the element associated with the last entry.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,iterator,com.google.common.collect.StandardTable$ColumnKeySet:iterator(),688,691,"/**
 * Returns an iterator for column keys.
 * Delegates to createColumnKeyIterator().
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,updateBackingRowMapField,com.google.common.collect.StandardTable$Row:updateBackingRowMapField(),326,330,"/**
 * Updates the backingRowMap if it's null or outdated.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
 * Puts a value for a column in a row.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @param value Value to set.
 * @return The previous value, or null if newly created.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.StandardTable:rowMap(),802,806,"/**
 * Returns a map of rows to column-value pairs. Lazily initialized.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.IntStream),941,945,"/**
* Finds the last element of an IntStream as an OptionalInt.
*/
","* Returns the last element of the specified stream, or {@link OptionalInt#empty} if the stream is
   * empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see IntStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.LongStream),959,963,"/**
 * Finds the last element of a LongStream as an OptionalLong.
 */","* Returns the last element of the specified stream, or {@link OptionalLong#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see LongStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,findLast,com.google.common.collect.Streams:findLast(java.util.stream.DoubleStream),977,981,"/**
 * Finds the last element of a DoubleStream, boxed and returned.
 * @param stream The DoubleStream to search.
 * @return OptionalDouble containing the last element, or empty.
 */
","* Returns the last element of the specified stream, or {@link OptionalDouble#empty} if the stream
   * is empty.
   *
   * <p>Equivalent to {@code stream.reduce((a, b) -> b)}, but may perform significantly better. This
   * method's runtime will be between O(log n) and O(n), performing better on <a
   * href=""http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html"">efficiently splittable</a>
   * streams.
   *
   * @see DoubleStream#findFirst()
   * @throws NullPointerException if the last element of the stream is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedAsMap:values(),1420,1428,"/**
 * Returns a synchronized view of the map's values as a Collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMapEntries:<init>(java.util.Set,java.lang.Object)",959,961,"/**
 * Constructs a synchronized map entry set.
 * @param delegate The set to be synchronized.
 * @param mutex The mutex object for synchronization.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSet:<init>(java.util.SortedSet,java.lang.Object)",309,311,"/**
 * Constructs a SynchronizedSortedSet using the given delegate and mutex.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized:set(java.util.Set,java.lang.Object)",265,268,"/**
 * Wraps a set with synchronization.
 * @param set The set to wrap.
 * @param mutex Mutex object for synchronization.
 * @return A synchronized set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedCollection:delegate(),131,135,"/**
 * Delegates to the superclass's delegate method.
 * @return Collection object from the superclass.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedEntry:delegate(),1797,1801,"/**
 * Delegates to the superclass's delegate method.
 * Returns a Map.Entry object (cast from super's return).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMap:delegate(),1072,1076,"/**
 * Delegates to the superclass's delegate method.
 * @return Map object from the superclass.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultimap:delegate(),602,606,"/**
 * Returns the multimap delegate. Casts the superclass delegate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedTable:delegate(),2046,2050,"/**
 * Returns the underlying Table delegate. Casts to the generic type.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedDeque:<init>(java.util.Deque,java.lang.Object)",1902,1904,"/**
 * Constructs a SynchronizedDeque with the given deque and mutex.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,queue,"com.google.common.collect.Synchronized:queue(java.util.Queue,java.lang.Object)",1841,1843,"/**
 * Wraps a queue with a mutex for thread safety.
 * @param queue The queue to wrap.
 * @param mutex The mutex to use for synchronization.
 * @return A synchronized queue.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedRandomAccessList:<init>(java.util.List,java.lang.Object)",482,484,"/**
 * Constructs a synchronized list with the given list and mutex.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multiset,"com.google.common.collect.Synchronized:multiset(com.google.common.collect.Multiset,java.lang.Object)",489,495,"/**
 * Returns a synchronized multiset or the original if already synchronized.
 * @param multiset The multiset to synchronize.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,get,"com.google.common.collect.Tables$TransformedTable:get(java.lang.Object,java.lang.Object)",430,438,"/**
 * Retrieves a value from the table given row and column keys.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return Value or null if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,remove,"com.google.common.collect.Tables$TransformedTable:remove(java.lang.Object,java.lang.Object)",463,469,"/**
 * Removes a row/column and applies function.
 * @param rowKey Row key. @param columnKey Column key.
 * @return Value after removal, or null if not found.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,delegate,com.google.common.collect.Tables$UnmodifiableRowSortedMap:delegate(),651,654,"/**
 * Returns the underlying delegate object, casting to the correct type.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,partition,"com.google.common.collect.TopKSelector:partition(int,int,int)",215,229,"/**
 * Partitions the buffer around a pivot element.
 * @param left left index, right index, pivot index
 * @return The new index of the pivot element.
 */","* Partitions the contents of buffer in the range [left, right] around the pivot element
   * previously stored in buffer[pivotValue]. Returns the new index of the pivot element,
   * pivotNewIndex, so that everything in [left, pivotNewIndex] is ≤ pivotValue and everything in
   * (pivotNewIndex, right] is greater than pivotValue.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,hasPrevious,com.google.common.collect.TransformedListIterator:hasPrevious(),41,44,"/**
 * Checks if a previous element exists.
 * Delegates to the backing iterator.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previous,com.google.common.collect.TransformedListIterator:previous(),46,50,"/**
 * Returns the previous element in the list.
 * Delegates to the backing iterator and transforms the result.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,nextIndex,com.google.common.collect.TransformedListIterator:nextIndex(),52,55,"/**
 * Returns the index of the element that will be returned next.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,previousIndex,com.google.common.collect.TransformedListIterator:previousIndex(),57,60,"/**
 * Returns the index of the element before the current element.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,comparator,com.google.common.collect.TreeBasedTable$TreeRow:comparator(),207,210,"/**
* Returns a comparator for the column.
* Delegates to columnComparator().
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,computeBackingRowMap,com.google.common.collect.TreeBasedTable$TreeRow:computeBackingRowMap(),270,284,"/**
 * Computes and returns a sorted map of row data.
 * Returns null if no data is available.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,maintainEmptyInvariant,com.google.common.collect.TreeBasedTable$TreeRow:maintainEmptyInvariant(),286,294,"/**
 * Removes a row if it's empty, maintaining internal consistency.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,createCollection,com.google.common.collect.TreeMultimap:createCollection(java.lang.Object),144,150,"/**
 * Creates a new collection for the given key.
 * Null key is handled; returns collection from superclass.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,writeObject,com.google.common.collect.TreeMultimap:writeObject(java.io.ObjectOutputStream),208,215,"/**
 * Writes the object to an ObjectOutputStream.
 * Serializes comparator and multimap data.
 */
","* @serialData key comparator, value comparator, number of distinct keys, and then for each
   *     distinct key: the key, number of values for that key, and key values",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeMultiset,com.google.common.collect.TreeMultiset$AvlNode:recomputeMultiset(),935,939,"/**
 * Recalculates the distinct elements and total count of the multiset.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recomputeHeight,com.google.common.collect.TreeMultiset$AvlNode:recomputeHeight(),941,943,"/**
 * Recalculates the height of the node based on its children.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,balanceFactor,com.google.common.collect.TreeMultiset$AvlNode:balanceFactor(),972,974,"/**
 * Calculates the balance factor of the node.
 * Returns height difference between left and right subtrees.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,successor,"com.google.common.collect.TreeMultiset:successor(com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode,com.google.common.collect.TreeMultiset$AvlNode)",1052,1056,"/**
 * Recursively calls successor on nodes a, b, and c.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,elementIterator,com.google.common.collect.TreeMultiset:elementIterator(),440,443,"/**
 * Returns an iterator over the elements in this multiset.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,comparator,com.google.common.collect.TreeMultiset:comparator(),61,64,"/**
 * Returns the comparator used for sorting elements in this set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap$SubRangeMap:equals(java.lang.Object),633,640,"/**
 * Checks if two RangeMap instances are equal based on their ranges.
 * @param o The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap$SubRangeMap:hashCode(),642,645,"/**
 * Returns the hash code, based on the hash code of its ranges.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,toString,com.google.common.collect.TreeRangeMap$SubRangeMap:toString(),647,650,"/**
 * Returns a string representation of the range collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,equals,com.google.common.collect.TreeRangeMap:equals(java.lang.Object),812,819,"/**
 * Checks if two RangeMaps are equal by comparing their range maps.
 * @param o The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,hashCode,com.google.common.collect.TreeRangeMap:hashCode(),821,824,"/**
 * Returns the hash code, based on the ranges' hash code.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,<init>,com.google.common.escape.CharEscaper:<init>(),46,46,"/**
 * Default constructor for CharEscaper. Protected and prevents instantiation.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,<init>,com.google.common.escape.UnicodeEscaper:<init>(),59,59,"/**
 * Default constructor for UnicodeEscaper.
 */",Constructor for use by subclasses.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escapeSlow,"com.google.common.escape.CharEscaper:escapeSlow(java.lang.String,int)",96,156,"/**
* Escapes characters in a string, replacing them with their escapes.
* @param s The string to escape.
* @param index The starting index for escaping.
* @return The escaped string.
*/","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.CharEscaper,char)",171,173,"/**
 * Escapes a character using the provided CharEscaper.
 * @param escaper CharEscaper to use for escaping
 * @param c character to escape
 * @return Escaped string or null if escaping fails.
 */
","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link CharEscaper} should limit themselves
   * to its public interface.
   *
   * @param c the character to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,computeReplacement,"com.google.common.escape.Escapers:computeReplacement(com.google.common.escape.UnicodeEscaper,int)",184,186,"/**
 * Escapes a Unicode character and returns the result as a string.
 */
","* Returns a string that would replace the given character in the specified escaper, or {@code
   * null} if no replacement should be made. This method is intended for use in tests through the
   * {@code EscaperAsserts} class; production users of {@link UnicodeEscaper} should limit
   * themselves to its public interface.
   *
   * @param cp the Unicode code point to escape if necessary
   * @return the replacement string, or {@code null} if no escaping was needed",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$ImmediateDispatcher:dispatch(java.lang.Object,java.util.Iterator)",185,191,"/**
 * Dispatches an event to each subscriber.
 * @param event The event to dispatch.
 * @param subscribers Iterator of subscribers.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$LegacyAsyncDispatcher:dispatch(java.lang.Object,java.util.Iterator)",157,168,"/**
 * Dispatches an event to all subscribers in the iterator.
 * @param event The event to dispatch.
 * @param subscribers Iterator of subscribers to notify.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Dispatcher.java,dispatch,"com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher:dispatch(java.lang.Object,java.util.Iterator)",98,120,"/**
 * Dispatches an event to subscribers; handles queueing and processing.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,logger,com.google.common.eventbus.EventBus$LoggingHandler:logger(com.google.common.eventbus.SubscriberExceptionContext),286,288,"/**
 * Returns a Logger instance for the given SubscriberExceptionContext.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,message,com.google.common.eventbus.EventBus$LoggingHandler:message(com.google.common.eventbus.SubscriberExceptionContext),290,301,"/**
 * Creates an error message containing subscriber method details.
 * @param context SubscriberExceptionContext with relevant data.
 * @return Error message string.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,<init>,"com.google.common.eventbus.Subscriber:<init>(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",56,63,"/**
 * Constructs a Subscriber.
 * @param bus EventBus instance.
 * @param target Object to subscribe to.
 * @param method Method to be invoked.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,validateEndpoints,com.google.common.graph.AbstractBaseGraph:validateEndpoints(com.google.common.graph.EndpointPair),179,182,"/**
 * Validates endpoint pair, ensuring it's not null and ordering is compatible.
 */","* Throws {@code IllegalArgumentException} if the ordering of {@code endpoints} is not compatible
   * with the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractBaseGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
 * Checks if an edge exists between the given endpoints.
 * @param endpoints The pair of endpoints to check.
 * @return True if the edge exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ForwardingGraph:predecessors(java.lang.Object),70,73,"/**
 * Returns the predecessors of the given node.
 * @param node The node to find predecessors for.
 * @return Set of predecessors.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,advance,com.google.common.graph.EndpointPairIterator:advance(),55,63,"/**
 * Advances to the next node in the traversal.
 * Returns true if successful, false otherwise.
 */
","* Called after {@link #successorIterator} is exhausted. Advances {@link #node} to the next node
   * and updates {@link #successorIterator} to iterate through the successors of {@link #node}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ForwardingGraph:successors(java.lang.Object),75,78,"/**
 * Returns the successors of a node, delegating to the underlying implementation.
 * @param node The node to find successors for.
 * @return A set of successor nodes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,size,com.google.common.graph.IncidentEdgeSet:size(),41,50,"/**
 * Returns the size of the node's connections, considering direction.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/IncidentEdgeSet.java,contains,com.google.common.graph.IncidentEdgeSet:contains(java.lang.Object),52,79,"/**
 * Checks if the graph contains the given endpoint pair.
 * @param obj The object to check, must be an EndpointPair.
 * @return True if the graph contains the pair, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Undirected:computeNext(),123,145,"/**
 * Computes the next endpoint pair. Returns null if no more pairs exist.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Graph,java.lang.Object,java.lang.Object)",63,65,"/**
 * Creates an EndpointPair based on graph direction.
 * @param graph The graph to use.
 * @param nodeU The first node.
 * @param nodeV The second node.
 */
",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code graph}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,of,"com.google.common.graph.EndpointPair:of(com.google.common.graph.Network,java.lang.Object,java.lang.Object)",68,70,"/**
 * Creates an EndpointPair based on network direction.
 * @param network The network. @param nodeU, nodeV Nodes.
 */
",Returns an {@link EndpointPair} representing the endpoints of an edge in {@code network}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,computeNext,com.google.common.graph.EndpointPairIterator$Directed:computeNext(),74,85,"/**
 * Computes the next endpoint pair. Returns null if end of data.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.EndpointPair),292,297,"/**
 * Transposes source and target endpoints if ordered.
 * @param endpoints The EndpointPair to transpose.
 * @return Transposed EndpointPair or original if unordered.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractGraph:edges(),66,99,"/**
 * Returns a set of edges in the graph.  Returns an unmodifiable set.
 */","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph:edges(),66,99,"/**
 * Returns a set of edges in the graph.  Returns an unmodifiable set.
 */","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,validateEndpoints,com.google.common.graph.AbstractNetwork:validateEndpoints(com.google.common.graph.EndpointPair),244,247,"/**
 * Validates that the provided endpoints are compatible.
 * @param endpoints The endpoint pair to validate.
 */","* Throws an IllegalArgumentException if the ordering of {@code endpoints} is not compatible with
   * the directionality of this graph.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,inEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:inEdges(),58,61,"/**
 * Returns the set of incoming edges to this element.
 * Delegates to incidentEdges().
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,outEdges,com.google.common.graph.AbstractUndirectedNetworkConnections:outEdges(),63,66,"/**
 * Returns the outgoing edges of the element.
 * Delegates to incidentEdges() to get the set.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",74,80,"/**
 * Removes an incoming edge. Returns the removed node or null.
 * @param edge the edge to remove
 * @param isSelfLoop whether the edge is a self-loop
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.DirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),114,122,"/**
 * Removes an out-edge and updates successor set.
 * @param edge the edge to remove
 * @return the removed node
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,iterator,com.google.common.graph.EdgesConnecting:iterator(),47,53,"/**
 * Returns an iterator for this graph. Returns an empty iterator if null.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,size,com.google.common.graph.EdgesConnecting:size(),55,58,"/**
 * Returns the size of the graph, 0 or 1.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EdgesConnecting.java,contains,com.google.common.graph.EdgesConnecting:contains(java.lang.Object),60,64,"/**
 * Checks if the graph contains the given edge.
 * @param edge The edge to check for.
 * @return True if the edge exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,hashCode,com.google.common.graph.EndpointPair$Ordered:hashCode(),183,186,"/**
 * Calculates hash code based on source and target values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,toString,com.google.common.graph.EndpointPair$Ordered:toString(),188,191,"/**
 * Returns a string representation of the object, showing source and target.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Ordered:equals(java.lang.Object),166,181,"/**
 * Checks if two EndpointPair objects are equal.
 * Compares the 'ordered' flag and source/target endpoints.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,iterator,com.google.common.graph.EndpointPair$Unordered:iterator(),125,128,"/**
 * Returns an unmodifiable iterator over the nodes.
 * Uses Iterators.forArray to create the iterator.
 */
","Iterates in the order {@link #nodeU()}, {@link #nodeV()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPair.java,equals,com.google.common.graph.EndpointPair$Unordered:equals(java.lang.Object),214,241,"/**
 * Checks if two EndpointPair objects are equal, considering order.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodes,com.google.common.graph.ImmutableGraph:nodes(),31,34,"/**
 * Returns the set of nodes from the underlying delegate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,isDirected,com.google.common.graph.ImmutableGraph:isDirected(),45,48,"/**
 * Checks if the graph is directed, delegates to the underlying graph.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableGraph:allowsSelfLoops(),50,53,"/**
 * Checks if self-loops are allowed.
 * Delegates to the underlying delegate's implementation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,nodeOrder,com.google.common.graph.ImmutableGraph:nodeOrder(),55,58,"/**
 * Returns the node order from the delegated object.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,adjacentNodes,com.google.common.graph.ImmutableGraph:adjacentNodes(java.lang.Object),65,68,"/**
 * Returns the adjacent nodes of the given node.
 * @param node The node to find adjacent nodes for.
 * @return A set of adjacent nodes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,incidentEdges,com.google.common.graph.ImmutableGraph:incidentEdges(java.lang.Object),80,83,"/**
 * Returns the incident edges of a node.
 * @param node The node to get incident edges for.
 * @return Set of EndpointPair<N> representing incident edges.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,degree,com.google.common.graph.ImmutableGraph:degree(java.lang.Object),85,88,"/**
 * Returns the degree of the given node.
 * @param node The node to get the degree of.
 * @return The degree of the node.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,inDegree,com.google.common.graph.ImmutableGraph:inDegree(java.lang.Object),90,93,"/**
 * Returns the in-degree of the given node.
 * @param node the node to get the in-degree of
 * @return the in-degree of the node
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,outDegree,com.google.common.graph.ImmutableGraph:outDegree(java.lang.Object),95,98,"/**
 * Returns the out-degree of a node, delegating to the underlying graph.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",100,103,"/**
 * Checks if an edge connects nodeU and nodeV using the delegate.
 * @param nodeU The first node.
 * @param nodeV The second node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),105,108,"/**
 * Checks if an edge connects the given endpoints.
 * @param endpoints The pair of endpoints to check.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingValueGraph.java,successors,com.google.common.graph.ForwardingValueGraph:successors(java.lang.Object),78,81,"/**
* Returns the successors of a node, delegating to the underlying implementation.
* @param node The node to find successors for.
* @return Set of successor nodes.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,nodeOrder,com.google.common.graph.GraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),149,153,"/**
 * Sets the node order for the graph.
 * @param nodeOrder ElementOrder object defining the node order.
 * @return GraphBuilder with the specified node order.
 */
","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,incidentEdgeOrder,com.google.common.graph.GraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),168,178,"/**
 * Sets the incident edge order. Supports UNORDERED or STABLE types.
 * @param incidentEdgeOrder ElementOrder object specifying order.
 * @return GraphBuilder with the specified incident edge order.
 */
","* Specifies the order of iteration for the elements of {@link Graph#edges()}, {@link
   * Graph#adjacentNodes(Object)}, {@link Graph#predecessors(Object)}, {@link
   * Graph#successors(Object)} and {@link Graph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedGraph:predecessors(java.lang.Object),313,316,"/**
 * Returns the predecessors of a node by transposing successors.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedGraph:successors(java.lang.Object),318,321,"/**
 * Returns the successors of a node by transposing predecessors.
 * @param node The node to find successors for.
 * @return Set of successor nodes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedGraph:inDegree(java.lang.Object),335,338,"/**
 * Returns the in-degree of a node.
 * Delegates to the out-degree method (transpose).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedGraph:outDegree(java.lang.Object),340,343,"/**
 * Returns the out-degree of a node.
 * Transposes in-degree to calculate out-degree.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",345,348,"/**
* Checks if an edge connects two nodes, transposing for directed graphs.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Graph),248,258,"/**
 * Returns the transpose of the given graph.
 * Returns the original graph if undirected.
 */
","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.Network),280,290,"/**
 * Transposes a directed network. Returns the original if undirected.
 */","* Returns a view of {@code network} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code network} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedNetwork:predecessors(java.lang.Object),433,436,"/**
 * Returns the predecessors of a node by transposing successors.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedNetwork:successors(java.lang.Object),438,441,"/**
 * Returns the successors of a node by transposing predecessors.
 * @param node The node to find successors for.
 * @return A set of successor nodes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedNetwork:inDegree(java.lang.Object),443,446,"/**
 * Returns the in-degree of a node.
 * Delegates to the out-degree method (transposed graph).
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedNetwork:outDegree(java.lang.Object),448,451,"/**
 * Returns the out-degree of a node. Transpose in-degree for calculation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inEdges,com.google.common.graph.Graphs$TransposedNetwork:inEdges(java.lang.Object),453,456,"/**
 * Returns the incoming edges for a node.
 * Delegates to outEdges and transposes the result.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outEdges,com.google.common.graph.Graphs$TransposedNetwork:outEdges(java.lang.Object),458,461,"/**
* Returns the outgoing edges from a node.
* Transposes the in-edges to get out-edges.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",469,472,"/**
 * Returns edges connecting nodeU and nodeV (transposed).
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",479,482,"/**
 * Gets an edge connecting two nodes, transposing the order.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return Optional edge or empty if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,"com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",489,492,"/**
* Returns an edge connecting nodeU and nodeV, or null.
* Transposes the nodes to adapt to the delegate's order.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(java.lang.Object,java.lang.Object)",499,502,"/**
 * Checks if an edge connects two nodes, transposed for undirected graphs.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transpose,com.google.common.graph.Graphs:transpose(com.google.common.graph.ValueGraph),264,274,"/**
 * Returns the transpose of the given directed graph.
 * Returns the graph itself if undirected.
 */
","* Returns a view of {@code graph} with the direction (if any) of every edge reversed. All other
   * properties remain intact, and further updates to {@code graph} will be reflected in the view.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,predecessors,com.google.common.graph.Graphs$TransposedValueGraph:predecessors(java.lang.Object),370,373,"/**
* Returns the predecessors of a node by transposing successors.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,successors,com.google.common.graph.Graphs$TransposedValueGraph:successors(java.lang.Object),375,378,"/**
 * Returns the successors of a node by transposing predecessors.
 * @param node The node to find successors for.
 * @return Set of successor nodes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inDegree,com.google.common.graph.Graphs$TransposedValueGraph:inDegree(java.lang.Object),380,383,"/**
 * Returns the in-degree of a node.
 * Delegates to the delegate's outDegree method.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,outDegree,com.google.common.graph.Graphs$TransposedValueGraph:outDegree(java.lang.Object),385,388,"/**
 * Returns the out-degree of a node. Delegates to inDegree.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,"com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",390,393,"/**
 * Checks if an edge connects two nodes, transposed for undirected graphs.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(java.lang.Object,java.lang.Object)",400,403,"/**
* Gets the edge value, transposing node order.
* @param nodeU First node.
* @param nodeV Second node.
* @return Edge value or empty Optional.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",410,413,"/**
* Gets the edge value or default, transposing node order.
* @param nodeU First node.
* @param nodeV Second node.
* @param defaultValue Default value if edge not found.
* @return Edge value or default.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,asGraph,com.google.common.graph.ImmutableNetwork:asGraph(),77,80,"/**
 * Returns an immutable graph view of the current graph.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,asGraph,com.google.common.graph.ImmutableValueGraph:asGraph(),79,82,"/**
 * Returns an immutable graph view of the current graph.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgeOrder,com.google.common.graph.ImmutableNetwork:edgeOrder(),125,128,"/**
 * Returns the edge order for this graph.
 * @return The edge order object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodeOrder,com.google.common.graph.ImmutableNetwork:nodeOrder(),120,123,"/**
 * Returns the node order for this data structure.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsSelfLoops,com.google.common.graph.ImmutableNetwork:allowsSelfLoops(),115,118,"/**
 * Checks if self-loops are allowed.
 * @return True if self-loops are allowed, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,allowsParallelEdges,com.google.common.graph.ImmutableNetwork:allowsParallelEdges(),110,113,"/**
 * Checks if parallel edges are allowed in the graph.
 * @return True if parallel edges are allowed, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,isDirected,com.google.common.graph.ImmutableNetwork:isDirected(),105,108,"/**
 * Checks if the graph is directed.
 * @return True if directed, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,nodes,com.google.common.graph.ImmutableNetwork:nodes(),95,98,"/**
 * Returns a set of nodes in the graph.
 * Nodes are keys of the nodeConnections map.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodeOrder,com.google.common.graph.ImmutableValueGraph:nodeOrder(),98,101,"/**
 * Returns the node order for this element.
 * @return The element's node order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,allowsSelfLoops,com.google.common.graph.ImmutableValueGraph:allowsSelfLoops(),93,96,"/**
 * Checks if self-loops are allowed.
 * @return True if self-loops are allowed, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,isDirected,com.google.common.graph.ImmutableValueGraph:isDirected(),88,91,"/**
 * Checks if the graph is directed.
 * @return True if directed, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,nodes,com.google.common.graph.ImmutableValueGraph:nodes(),83,86,"/**
 * Returns a set view of the nodes connected by this graph.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,put,"com.google.common.graph.MapIteratorCache:put(java.lang.Object,java.lang.Object)",62,68,"/**
 * Associates the specified key with value in the backing map.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return The previous value associated with the key, or null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,remove,com.google.common.graph.MapIteratorCache:remove(java.lang.Object),70,75,"/**
 * Removes the specified key's mapping and clears the cache.
 * @param key the key to remove
 * @return The value removed, or null if the key was not present.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,clear,com.google.common.graph.MapIteratorCache:clear(),77,80,"/**
* Clears the cache and the backing map.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,clearCache,com.google.common.graph.MapRetrievalCache:clearCache(),83,88,"/**
 * Clears the cache by nulling out cache entries and calling super.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,containsKey,com.google.common.graph.MapIteratorCache:containsKey(java.lang.Object),98,100,"/**
* Checks if the map contains the specified key.
* @param key The key to check.
* @return True if the map contains the key.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.StandardNetwork:edges(),100,103,"/**
 * Returns the set of edges in the graph.
 * Uses an unmodifiable view of the underlying map.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,getIfCached,com.google.common.graph.MapRetrievalCache:getIfCached(java.lang.Object),57,81,"/**
 * Retrieves a cached value by key. Returns null if not found.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,addToCache,"com.google.common.graph.MapRetrievalCache:addToCache(java.lang.Object,java.lang.Object)",90,92,"/**
 * Adds a key-value pair to the cache.
 * @param key The key to store.
 * @param value The value associated with the key.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,nodeOrder,com.google.common.graph.NetworkBuilder:nodeOrder(com.google.common.graph.ElementOrder),176,180,"/**
 * Sets the node order for the network builder.
 * @param nodeOrder The desired order of nodes.
 * @return The updated network builder.
 */
","* Specifies the order of iteration for the elements of {@link Network#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,edgeOrder,com.google.common.graph.NetworkBuilder:edgeOrder(com.google.common.graph.ElementOrder),187,191,"/**
* Sets the edge order strategy for the network builder.
* @param edgeOrder The element order strategy to use.
* @return The updated network builder.
*/
","* Specifies the order of iteration for the elements of {@link Network#edges()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$1:newTraversal(),345,345,"/**
 * Creates a new traversal object for the graph.
 * @return A new Traversal object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,<init>,com.google.common.graph.Traverser$Traversal$2:<init>(com.google.common.graph.SuccessorsFunction),364,366,"/**
 * Sets the function to determine successor nodes during traversal.
 * @param successorFunction Function to get successors.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser$Traversal:breadthFirst(java.util.Iterator),409,411,"/**
* Performs a breadth-first traversal starting from given nodes.
* @param startNodes Iterator of starting nodes for traversal.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,preOrder,com.google.common.graph.Traverser$Traversal:preOrder(java.util.Iterator),413,415,"/**
 * Returns a preorder iterator from the given start nodes.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,predecessors,com.google.common.graph.UndirectedGraphConnections:predecessors(),69,72,"/**
 * Returns the set of predecessors of this node.
 * Delegates to the adjacentNodes() method.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,successors,com.google.common.graph.UndirectedGraphConnections:successors(),74,77,"/**
 * Returns the successors of the current node.
 * Delegates to the adjacentNodes() method.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,removePredecessor,com.google.common.graph.UndirectedGraphConnections:removePredecessor(java.lang.Object),91,95,"/**
 * Removes the predecessor of a node using removeSuccessor.
 * @param node The node whose predecessor is to be removed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,addPredecessor,"com.google.common.graph.UndirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",102,106,"/**
 * Adds a predecessor to the given node, using addSuccessor.
 * @param node The node to add a predecessor to.
 * @param value The value associated with the predecessor.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeOutEdge,com.google.common.graph.UndirectedMultiNetworkConnections:removeOutEdge(java.lang.Object),92,100,"/**
 * Removes an outgoing edge and updates adjacent nodes.
 * @param edge The edge to remove.
 * @return The removed node.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,nodeOrder,com.google.common.graph.ValueGraphBuilder:nodeOrder(com.google.common.graph.ElementOrder),153,157,"/**
 * Sets the order in which nodes are added to the graph.
 * @param nodeOrder ElementOrder object defining the node order.
 * @return ValueGraphBuilder with the specified node order.
 */
","* Specifies the order of iteration for the elements of {@link Graph#nodes()}.
   *
   * <p>The default value is {@link ElementOrder#insertion() insertion order}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,incidentEdgeOrder,com.google.common.graph.ValueGraphBuilder:incidentEdgeOrder(com.google.common.graph.ElementOrder),172,183,"/**
 * Sets the incident edge order. Supports UNORDERED and STABLE types.
 * @param incidentEdgeOrder Order of incident edges.
 * @return ValueGraphBuilder with the specified incident edge order.
 */","* Specifies the order of iteration for the elements of {@link ValueGraph#edges()}, {@link
   * ValueGraph#adjacentNodes(Object)}, {@link ValueGraph#predecessors(Object)}, {@link
   * ValueGraph#successors(Object)} and {@link ValueGraph#incidentEdges(Object)}.
   *
   * <p>The default value is {@link ElementOrder#unordered() unordered} for mutable graphs. For
   * immutable graphs, this value is ignored; they always have a {@link ElementOrder#stable()
   * stable} order.
   *
   * @throws IllegalArgumentException if {@code incidentEdgeOrder} is not either {@code
   *     ElementOrder.unordered()} or {@code ElementOrder.stable()}.
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(byte[]),41,43,"/**
 * Updates the internal state using the provided byte array.
 * @param b The byte array containing the update data.
 */
",Updates this hasher with the given bytes.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(java.nio.ByteBuffer),53,62,"/**
 * Updates the object's state based on the provided ByteBuffer.
 */",Updates this hasher with bytes from the given buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,update,com.google.common.hash.AbstractByteHasher:update(int),65,73,"/**
 * Updates the hasher with the given bytes and clears the scratch buffer.
 * @param bytes number of bytes to update with
 * @return this Hasher object
 */
",Updates the sink with the given number of bytes from the buffer.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(),53,60,"/**
 * Creates a new Hasher array using functions and returns a Hasher.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractCompositeHashFunction.java,newHasher,com.google.common.hash.AbstractCompositeHashFunction:newHasher(int),62,70,"/**
 * Creates a new Hasher array with the specified expected size.
 * @param expectedInputSize Expected input size for each hasher.
 * @return A new Hasher array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putDouble,com.google.common.hash.AbstractHasher:putDouble(double),36,40,"/**
 * Adds a double value to the hasher.
 * Converts the double to a long and then puts it.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.Hasher:putLong(long),82,84,"/**
* Puts a long value into the hasher.
* @param l The long value to put.
* @return The hasher object.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putFloat,com.google.common.hash.AbstractHasher:putFloat(float),42,46,"/**
 * Adds a float value to the hasher.
 * Converts float to its raw integer bits and puts it.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putUnencodedChars,com.google.common.hash.AbstractHasher:putUnencodedChars(java.lang.CharSequence),48,55,"/**
 * Adds unencoded characters to the hasher.
 * @param charSequence Sequence of characters to add.
 * @return The hasher instance for chaining.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.Hasher:putChar(char),101,103,"/**
 * Puts a character into the hasher.
 * @param c The character to be put.
 * @return The hasher object after putting the character.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,putBytes,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:putBytes(java.nio.ByteBuffer),98,102,"/**
* Writes bytes to the stream and returns the Hasher instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hash,com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher:hash(),104,107,"/**
* Calculates the hash code of the stream's byte array.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,processRemaining,com.google.common.hash.AbstractStreamingHasher:processRemaining(java.nio.ByteBuffer),81,90,"/**
 * Processes remaining bytes in ByteBuffer, padding with longs.
 * @param bb ByteBuffer containing the remaining data to process.
 */
","* This is invoked for the last bytes of the input, which are not enough to fill a whole chunk.
   * The passed {@code ByteBuffer} is guaranteed to be non-empty.
   *
   * <p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munch,com.google.common.hash.AbstractStreamingHasher:munch(),212,220,"/**
 * Processes data from the buffer in chunks.
 * Flips the buffer, processes chunks, and compacts remaining data.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,<init>,com.google.common.hash.BloomFilter$SerialForm:<init>(com.google.common.hash.BloomFilter),571,576,"/**
 * Copies BloomFilter data to a serializable form.
 * @param bf The BloomFilter to copy.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,equals,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:equals(java.lang.Object),297,305,"/**
 * Checks if this LockFreeBitArray is equal to another.
 * @param o Object to compare to; must be a LockFreeBitArray.
 * @return True if equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,hashCode,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:hashCode(),307,311,"/**
* Calculates the hash code based on the array's elements.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,apply,com.google.common.hash.BloomFilter:apply(java.lang.Object),164,169,"/**
 * Applies the function to the input and returns the result.
 * @param input The input value to be processed.
 * @return True if the input contains a match, false otherwise.
 */
","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #mightContain}
   *     instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long,double)",369,385,"/**
 * Creates a Bloom filter collector.
 * @param funnel Funnel for elements, expected insertions, fpp.
 * @return Bloom filter collector.
 */
","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with the specified expected false positive probability.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,bitSize,com.google.common.hash.BloomFilter:bitSize(),237,240,"/**
 * Returns the bit size of the underlying bit array.
 */",Returns the number of bits in the underlying bit array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,com.google.common.io.ReaderInputStream:read(),122,125,"/**
 * Reads a single byte from the input stream.
 * @return The byte as an unsigned integer, or -1 if no byte read.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,saturatedCast,com.google.common.primitives.UnsignedBytes:saturatedCast(long),111,119,"/**
 * Casts a long to a byte, handling saturation at max/min values.
 */","* Returns the {@code byte} value that, when treated as unsigned, is nearest in value to {@code
   * value}.
   *
   * @param value any {@code long} value
   * @return {@code (byte) 255} if {@code value >= 255}, {@code (byte) 0} if {@code value <= 0}, and
   *     {@code value} cast to {@code byte} otherwise",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes:compare(byte,byte)",131,133,"/**
 * Compares two bytes as unsigned integers.
 * @param a The first byte.
 * @param b The second byte.
 * @return Difference between a and b as unsigned ints.
 */
","* Compares the two specified {@code byte} values, treating them as unsigned values between 0 and
   * 255 inclusive. For example, {@code (byte) -127} is considered greater than {@code (byte) 127}
   * because it is seen as having the value of positive {@code 129}.
   *
   * @param a the first {@code byte} to compare
   * @param b the second {@code byte} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,"com.google.common.primitives.UnsignedBytes:toString(byte,int)",194,201,"/**
 * Converts a byte to a string representation in the given radix.
 * @param x The byte to convert.
 * @param radix The radix (base) to use (2-36).
 */
","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,putAll,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:putAll(com.google.common.hash.BloomFilterStrategies$LockFreeBitArray),258,267,"/**
 * Copies all bits from another LockFreeBitArray.
 * @param other The LockFreeBitArray to copy from.
 */
","* Combines the two BitArrays using bitwise OR.
     *
     * <p>NOTE: Because of the use of atomics, if the other LockFreeBitArray is being mutated while
     * this operation is executing, not all of those new 1's may be set in the final state of this
     * LockFreeBitArray. The ONLY guarantee provided is that all the bits that were set in the other
     * LockFreeBitArray at the start of this method will be set in this LockFreeBitArray at the end
     * of this method.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,set,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:set(long),188,209,"/**
 * Sets the bit at the given index to 1. Returns true if successful.
 * @param bitIndex Index of the bit to set (must be within range).
 */",Returns true if the bit changed value.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,equalsSameBits,com.google.common.hash.HashCode$BytesHashCode:equalsSameBits(com.google.common.hash.HashCode),307,320,"/**
 * Compares the bit patterns of two HashCode instances.
 * Returns true if the bit patterns are identical.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,hashCode,com.google.common.hash.HashCode:hashCode(),383,397,"/**
 * Calculates the hash code for this object. Uses first 4 bytes if available.
 */","* Returns a ""Java hash code"" for this {@code HashCode} instance; this is well-defined (so, for
   * example, you can safely put {@code HashCode} instances into a {@code HashSet}) but is otherwise
   * probably not what you want to use.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,toString,com.google.common.hash.HashCode:toString(),410,418,"/**
 * Converts byte array to a hexadecimal string representation.
 */
","* Returns a string containing each byte of {@link #asBytes}, in order, as a two-digit unsigned
   * hexadecimal number in lower case.
   *
   * <p>Note that if the output is considered to be a single hexadecimal number, whether this string
   * is big-endian or little-endian depends on the byte order of {@link #asBytes}. This may be
   * surprising for implementations of {@code HashCode} that represent the number in big-endian
   * since everything else in the hashing API uniformly treats multibyte values as little-endian.
   *
   * <p>To create a {@code HashCode} from its string representation, see {@link #fromString}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,fromByteArray,com.google.common.primitives.Longs:fromByteArray(byte[]),308,312,"/**
 * Converts a byte array to a long value.
 * @param bytes byte array containing the long's bytes
 * @return long value represented by the byte array
 */
","* Returns the {@code long} value whose big-endian representation is stored in the first 8 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getLong()}. For example, the
   * input byte array {@code {0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}} would yield the
   * {@code long} value {@code 0x1213141516171819L}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 8 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,process,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:process(java.nio.ByteBuffer),81,97,"/**
 * Processes data from ByteBuffer, updating CRC values.
 * Throws exception if called after hash() completed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,processRemaining,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:processRemaining(java.nio.ByteBuffer),99,112,"/**
 * Processes remaining bytes in buffer, updates CRC0, and marks finished.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,weakHashLength32WithSeeds,"com.google.common.hash.FarmHashFingerprint64:weakHashLength32WithSeeds(byte[],int,long,long,long[])",100,115,"/**
 * Calculates a 64-bit hash using seeds and byte array segments.
 * @param bytes Input byte array.
 * @param offset Starting offset in the byte array.
 */","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array because when we last measured, this was 12% faster than allocating
   * new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,weakHashLength32WithSeeds,"com.google.common.hash.Fingerprint2011:weakHashLength32WithSeeds(byte[],int,long,long,long[])",95,110,"/**
 * Calculates a 64-bit hash using seeds and byte array segments.
 * @param bytes Input byte array.
 * @param offset Starting offset in the byte array.
 * @param seedA Initial seed A.
 * @param seedB Initial seed B.
 * @param output Output array to store the 64-bit hash values.
 */
","* Computes intermediate hash of 32 bytes of byte array from the given offset. Results are
   * returned in the output array - this is 12% faster than allocating new arrays every time.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength17to32,"com.google.common.hash.FarmHashFingerprint64:hashLength17to32(byte[],int,int)",142,150,"/**
 * Calculates a hash value based on byte array segments.
 * @param bytes input byte array
 * @param offset starting offset
 * @param length length of the segment
 * @return hash value
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength33To64,"com.google.common.hash.FarmHashFingerprint64:hashLength33To64(byte[],int,int)",152,166,"/**
* Computes a 64-bit hash value from byte array segment.
* @param bytes input byte array
* @param offset start offset
* @param length segment length
* @return 64-bit hash value
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength0to16,"com.google.common.hash.FarmHashFingerprint64:hashLength0to16(byte[],int,int)",117,140,"/**
* Calculates a hash value for byte arrays of length 0-16.
* Uses different logic based on the array length.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashLength33To64,"com.google.common.hash.Fingerprint2011:hashLength33To64(byte[],int,int)",148,169,"/**
 * Calculates a 64-bit hash value based on byte array data.
 * @param bytes input byte array
 * @param offset starting offset in the byte array
 * @param length length of data to hash
 * @return 64-bit hash value
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,murmurHash64WithSeed,"com.google.common.hash.Fingerprint2011:murmurHash64WithSeed(byte[],int,int,long)",171,196,"/**
 * Calculates a 64-bit murmurhash with seed.
 * @param bytes Input byte array.
 * @param offset Starting offset in the byte array.
 * @param length Length of data to hash.
 * @param seed Seed value for the hash function.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,writeReplace,com.google.common.hash.Funnels$StringCharsetFunnel:writeReplace(),121,123,"/**
* Returns an object to be used during deserialization.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$BytesHashCode:<init>(byte[]),253,255,"/**
 * Initializes BytesHashCode with the provided byte array.
 * @param bytes The byte array used for hash code calculation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$IntHashCode:<init>(int),121,123,"/**
 * Sets the hash value for the IntHashCode object.
 * @param hash The integer hash value to set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,<init>,com.google.common.hash.HashCode$LongHashCode:<init>(long),178,180,"/**
 * Sets the hash value for the object.
 * @param hash The hash value to set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,asLong,com.google.common.hash.HashCode$BytesHashCode:asLong(),279,286,"/**
 * Returns the hash code as a long value.
 * Requires at least 8 bytes in the byte array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,padToLong,com.google.common.hash.HashCode$IntHashCode:padToLong(),145,148,"/**
 * Converts the internal hash value to a long (unsigned).
 * @return The hash value as an unsigned long.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,longValue,com.google.common.primitives.UnsignedInteger:longValue(),186,189,"/**
 * Returns the long value of this BigInteger.
 * @return The long value of the BigInteger.
 */
",Returns the value of this {@code UnsignedInteger} as a {@code long}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,divide,"com.google.common.primitives.UnsignedInts:divide(int,int)",286,288,"/**
* Divides two integers and returns the quotient as an integer.
*/","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#divideUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,remainder,"com.google.common.primitives.UnsignedInts:remainder(int,int)",300,302,"/**
 * Calculates the remainder of a division.
 * @param dividend The number to be divided.
 * @param divisor The divisor.
 * @return The remainder of the division.
 */
","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 32-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#remainderUnsigned(int, int)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,crc32cConstructor,com.google.common.hash.Hashing$Crc32cMethodHandles:crc32cConstructor(),532,555,"/**
 * Returns a MethodHandle for CRC32C constructor, cast to Checksum.
 * Throws AssertionError/LinkageError if class/constructor not found.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32,com.google.common.hash.Hashing:murmur3_32(int),111,115,"/**
 * Creates a Murmur3_32 hash function with the given seed.
 * @param seed integer seed value for the hash function.
 */
","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value, <b>with a known
   * bug</b> as described in the deprecation text.
   *
   * <p>The C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A), which however does not
   * have the bug.
   *
   * @deprecated This implementation produces incorrect hash values from the {@link
   *     HashFunction#hashString} method if the string contains non-BMP characters. Use {@link
   *     #murmur3_32_fixed(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_32_fixed,com.google.common.hash.Hashing:murmur3_32_fixed(int),148,151,"/**
 * Creates a Murmur3_32HashFunction with a fixed supplementary plane fix.
 * @param seed The seed value for the hash function.
 * @return A Murmur3_32HashFunction instance.
 */
","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">32-bit murmur3
   * algorithm, x86 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x86_32 function (Murmur3A).
   *
   * <p>This method is called {@code murmur3_32_fixed} because it fixes a bug in the {@code
   * HashFunction} returned by the original {@code murmur3_32} method.
   *
   * @since 31.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,murmur3_128,com.google.common.hash.Hashing:murmur3_128(int),177,180,"/**
 * Creates a Murmur3_128 hash function with the given seed.
 * @param seed Integer seed value for the hash function.
 */
","* Returns a hash function implementing the <a
   * href=""https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp"">128-bit murmur3
   * algorithm, x64 variant</a> (little-endian variant), using the given seed value.
   *
   * <p>The exact C++ equivalent is the MurmurHash3_x64_128 function (Murmur3F).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(long,int)",672,687,"/**
 * Calculates a consistent hash bucket index based on input.
 * @param input Input value for hashing.
 * @param buckets Number of buckets for consistent hashing.
 * @return Bucket index (0 to buckets-1).
 */
","* Assigns to {@code input} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner that
   * minimizes the need for remapping as {@code buckets} grows. That is, {@code consistentHash(h,
   * n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,newHasher,com.google.common.hash.MacHashFunction:newHasher(),79,89,"/**
 * Creates a new Hasher instance. Uses clone if supported, otherwise uses getMac.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,<init>,"com.google.common.hash.MacHashFunction:<init>(java.lang.String,java.security.Key,java.lang.String)",45,51,"/**
 * Initializes a MacHashFunction with algorithm, key, and toString.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,newHasher,com.google.common.hash.MessageDigestHashFunction:newHasher(),90,100,"/**
 * Creates a new Hasher instance. Uses clone if supported, otherwise uses getMessageDigest.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,java.lang.String)",46,51,"/**
 * Initializes a MessageDigest hash function.
 * @param algorithmName Hash algorithm name.
 * @param toString String representation of the hash function.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,<init>,"com.google.common.hash.MessageDigestHashFunction:<init>(java.lang.String,int,java.lang.String)",53,61,"/**
 * Initializes a MessageDigest hash function.
 * @param algorithmName Algorithm name (e.g., ""SHA-256"")
 * @param bytes Number of bytes for the hash (4 - maxLength)
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,bmix64,"com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:bmix64(long,long)",110,122,"/**
 * Mixes key values k1 and k2 into hash values h1 and h2.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,processRemaining,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:processRemaining(java.nio.ByteBuffer),124,167,"/**
 * Processes remaining bytes in ByteBuffer, updating hash values.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,newHasher,com.google.common.hash.Murmur3_32HashFunction:newHasher(),84,87,"/**
 * Creates a new Hasher instance using Murmur3_32Hasher.
 * @return A new Murmer3_32Hasher object seeded with the current seed.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putByte,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putByte(byte),295,300,"/**
* Adds a byte to the hasher.
* @param b The byte to add.
* @return The hasher instance for chaining.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putInt,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putInt(int),331,336,"/**
* Adds an integer to the hasher and returns the hasher instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putLong,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putLong(long),338,344,"/**
 * Adds a long value to the hash.
 * @param l The long value to add.
 * @return The Hasher instance for chaining.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putChar,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putChar(char),346,351,"/**
* Adds a character to the hasher and returns the hasher instance.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,getIntLittleEndian,"com.google.common.hash.Murmur3_32HashFunction:getIntLittleEndian(byte[],int)",240,242,"/**
 * Reads an integer from the byte array in little-endian order.
 * @param input byte array to read from
 * @param offset starting offset in the byte array
 * @return integer value
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,fromByteArray,com.google.common.primitives.Ints:fromByteArray(byte[]),347,350,"/**
 * Converts a byte array to an integer.
 * @param bytes byte array to convert; must be at least BYTES long.
 * @return int value represented by the byte array.
 */
","* Returns the {@code int} value whose big-endian representation is stored in the first 4 bytes of
   * {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getInt()}. For example, the input
   * byte array {@code {0x12, 0x13, 0x14, 0x15, 0x33}} would yield the {@code int} value {@code
   * 0x12131415}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 4 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,processM,com.google.common.hash.SipHashFunction$SipHasher:processM(long),157,161,"/**
 * Processes a value 'm' by XORing it with v3 and v0,
 * then performing a sipRound.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(char[],int,int)",54,60,"/**
 * Writes a character array to the target.
 * @param cbuf buffer to write
 * @param off offset in the buffer
 * @param len number of characters to write
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(int),66,70,"/**
 * Writes a single character to the output stream.
 * @param c The character to write.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,com.google.common.io.AppendableWriter:write(java.lang.String),72,77,"/**
 * Writes the specified string to the target.
 * @param str The string to be written.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,write,"com.google.common.io.AppendableWriter:write(java.lang.String,int,int)",79,85,"/**
 * Writes a portion of a string to the underlying character target.
 * @param str String to write, offset and length specify the portion.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,flush,com.google.common.io.AppendableWriter:flush(),87,93,"/**
 * Flushes the underlying target if it implements Flushable.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(char),103,108,"/**
 * Appends a character to the writer.
 * @param c The character to append.
 * @return This writer object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,com.google.common.io.AppendableWriter:append(java.lang.CharSequence),110,115,"/**
 * Appends a character sequence to the target writer.
 * @param charSeq sequence to append; can be null
 * @return this writer
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/AppendableWriter.java,append,"com.google.common.io.AppendableWriter:append(java.lang.CharSequence,int,int)",117,122,"/**
 * Appends a subsequence of a character sequence to the target.
 * @param charSeq Sequence to append.
 * @param start Start index.
 * @param end End index (exclusive).
 * @return This writer.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,"com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[],int,int)",574,578,"/**
 * Creates a ByteArrayByteSource with specified byte array, offset, and length.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ConcatenatedByteSource:<init>(java.lang.Iterable),677,679,"/**
 * Creates a ConcatenatedByteSource from an iterable of ByteSources.
 * @param sources Iterable of ByteSources to concatenate.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,<init>,com.google.common.io.Files$FileByteSource:<init>(java.io.File),125,127,"/**
* Constructs a FileByteSource from a given file.
* @param file The file to be wrapped as a byte source.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,<init>,com.google.common.io.Resources$UrlByteSource:<init>(java.net.URL),63,65,"/**
* Constructs a UrlByteSource from a URL.
* @param url The URL to fetch bytes from.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding$Alphabet:decode(char),531,544,"/**
 * Decodes a character.
 * @param ch character to decode
 * @return decoded integer value
 * @throws DecodingException if decoding fails
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,equals,com.google.common.io.BaseEncoding$StandardBaseEncoding:equals(java.lang.Object),935,943,"/**
 * Checks if two StandardBaseEncoding objects are equal.
 * Compares alphabet and paddingChar.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,hashCode,com.google.common.io.BaseEncoding$StandardBaseEncoding:hashCode(),945,948,"/**
 * Generates a hash code based on the alphabet and padding character.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$SeparatedBaseEncoding:<init>(com.google.common.io.BaseEncoding,java.lang.String,int)",1145,1151,"/**
 * Constructs a SeparatedBaseEncoding with a delegate and separator.
 * @param delegate The BaseEncoding delegate.
 * @param separator Separator string.
 * @param afterEveryChars Separator insertion frequency.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",623,630,"/**
 * Constructs a StandardBaseEncoding with the given alphabet & padding.
 * @param alphabet The alphabet to use.
 * @param paddingChar Optional padding character, must not be in alphabet.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$CharSequenceCharSource:<init>(java.lang.CharSequence),541,543,"/**
 * Initializes CharSource with the given CharSequence.
 * @param seq The CharSequence to wrap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$ConcatenatedCharSource:<init>(java.lang.Iterable),691,693,"/**
* Initializes a ConcatenatedCharSource with the provided sources.
* @param sources Iterable of CharSource to concatenate.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asByteSource,com.google.common.io.ByteSource$AsCharSource:asByteSource(java.nio.charset.Charset),451,457,"/**
 * Returns a ByteSource for this resource, using the given charset.
 * Uses cached charset if available, otherwise delegates to super.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$ByteArrayByteSource:openBufferedStream(),585,588,"/**
 * Opens a buffered input stream using the underlying stream.
 * @return Buffered input stream.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,asCharSource,com.google.common.io.ByteSource$EmptyByteSource:asCharSource(java.nio.charset.Charset),656,660,"/**
 * Returns an empty CharSource using the provided charset.
 * @param charset the Charset to use (not used in this case)
 * @return An empty CharSource.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$SlicedByteSource:slice(long,long)",529,537,"/**
 * Returns a slice of this ByteSource, starting at offset.
 * @param offset Start offset
 * @param length Number of bytes to read
 * @return A new ByteSource representing the slice
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,asCharSource,com.google.common.io.CharSource$AsByteSource:asCharSource(java.nio.charset.Charset),516,522,"/**
 * Returns a CharSource using the provided charset.
 * Uses cached charset if available, otherwise delegates.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,asCharSource,com.google.common.io.MoreFiles$PathByteSource:asCharSource(java.nio.charset.Charset),167,184,"/**
 * Returns a CharSource for reading from this Path using the given charset.
 * Delegates to Files.lines if no OpenOptions were provided.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.io.InputStream,java.io.OutputStream)",108,123,"/**
 * Copies data from an InputStream to an OutputStream.
 * @param from Source InputStream
 * @param to Destination OutputStream
 * @return Total number of bytes copied
 */
","* Copies all bytes from the input stream to the output stream. Does not close or flush either
   * stream.
   *
   * <p><b>Java 9 users and later:</b> this method should be treated as deprecated; use the
   * equivalent {@link InputStream#transferTo} method instead.
   *
   * @param from the input stream to read from
   * @param to the output stream to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,exhaust,com.google.common.io.ByteStreams:exhaust(java.io.InputStream),289,298,"/**
 * Reads and discards all bytes from an InputStream.
 * @param in The input stream to exhaust.
 * @return Total number of bytes read.
 */
","* Reads and discards data from the given {@code InputStream} until the end of the stream is
   * reached. Returns the total number of bytes read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readBytes,"com.google.common.io.ByteStreams:readBytes(java.io.InputStream,com.google.common.io.ByteProcessor)",895,909,"/**
 * Reads bytes from an input stream and processes them.
 * @param input Input stream to read from.
 * @param processor Processor for handling the read bytes.
 * @return Result of the byte processing.
 */
","* Process the bytes of the given input stream using the given processor.
   *
   * @param input the input stream to process
   * @param processor the object to which to pass the bytes of the stream
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(java.io.ByteArrayInputStream),329,332,"/**
 * Creates a new ByteArrayDataInput from the given ByteArrayInputStream.
 * @param byteArrayInputStream The input stream to wrap.
 * @return A new ByteArrayDataInput.
 */
","* Returns a new {@link ByteArrayDataInput} instance to read from the given {@code
   * ByteArrayInputStream}. The given input stream is not reset before being read from by the
   * returned {@code ByteArrayDataInput}.
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(java.io.ByteArrayOutputStream),514,517,"/**
 * Creates a new ByteArrayDataOutput from a ByteArrayOutputStream.
 * @param byteArrayOutputStream The ByteArrayOutputStream to wrap.
 * @return A new ByteArrayDataOutput.
 */
","* Returns a new {@link ByteArrayDataOutput} instance which writes to the given {@code
   * ByteArrayOutputStream}. The given output stream is not reset before being written to by the
   * returned {@code ByteArrayDataOutput} and new data will be appended to any existing content.
   *
   * <p>Note that if the given output stream was not empty or is modified after the {@code
   * ByteArrayDataOutput} is created, the contract for {@link ByteArrayDataOutput#toByteArray} will
   * not be honored (the bytes returned in the byte array may not be exactly what was written via
   * calls to {@code ByteArrayDataOutput}).
   *
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)",105,115,"/**
 * Creates a ReaderInputStream, reading from a Reader and encoding to bytes.
 * @param reader Reader to read from
 * @param encoder CharsetEncoder for byte conversion
 * @param bufferSize Initial buffer size
 */
","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set encoder.
   *
   * @param reader input source
   * @param encoder character set encoder used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,startDraining,com.google.common.io.ReaderInputStream:startDraining(boolean),242,249,"/**
 * Starts draining the byte buffer. Resizes if overflow occurs.
 */
","* Flips the buffer output buffer so we can start reading bytes from it. If we are starting to
   * drain because there was overflow, and there aren't actually any characters to drain, then the
   * overflow must be due to a small output buffer.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,copy,"com.google.common.io.ByteStreams:copy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)",134,162,"/**
 * Copies data from a ReadableByteChannel to a WritableByteChannel.
 * Returns the number of bytes copied.
 */
","* Copies all bytes from the readable channel to the writable channel. Does not close or flush
   * either channel.
   *
   * @param from the readable channel to read from
   * @param to the writable channel to write to
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,readLine,com.google.common.io.LineReader:readLine(),70,84,"/**
 * Reads the next line from the reader.
 * @return The next line as a String, or null if EOF.
 */
","* Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code
   * '\n'}), a carriage return ({@code '\r'}), or a carriage return followed immediately by a
   * linefeed ({@code ""\r\n""}).
   *
   * @return a {@code String} containing the contents of the line, not including any
   *     line-termination characters, or {@code null} if the end of the stream has been reached.
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipUpTo,"com.google.common.io.ByteStreams:skipUpTo(java.io.InputStream,long)",843,872,"/**
 * Skips up to n bytes from the input stream. Returns the skipped bytes.
 */","* Discards up to {@code n} bytes of data from the input stream. This method will block until
   * either the full amount has been skipped or until the end of the stream is reached, whichever
   * happens first. Returns the total number of bytes skipped.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,ready,com.google.common.io.CharSequenceReader:ready(),123,127,"/**
 * Checks if the resource is ready. Throws IOException if closed.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,mark,com.google.common.io.CharSequenceReader:mark(int),134,139,"/**
 * Marks the current position in the input stream.
 * @param readAheadLimit Minimum number of bytes to read ahead.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,reset,com.google.common.io.CharSequenceReader:reset(),141,145,"/**
* Resets the stream position to the last marked position.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,hasRemaining,com.google.common.io.CharSequenceReader:hasRemaining(),56,58,"/**
 * Checks if there are remaining elements to process.
 * @return True if remaining elements exist, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,skip,com.google.common.io.CharSequenceReader:skip(long),114,121,"/**
 * Skips characters from the current position.
 * @param n number of characters to skip
 * @return number of characters actually skipped
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.Iterator,java.lang.String)",148,157,"/**
 * Writes lines to a buffered stream, separated by lineSeparator.
 * @param lines Iterator of lines to write.
 * @param lineSeparator Separator between lines.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource$CharSequenceCharSource:lines(),592,595,"/**
* Returns a stream of strings representing lines from the iterator.
*/",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource$CharSequenceCharSource:readFirstLine(),597,601,"/**
 * Reads and returns the first line from the iterator, or null.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(com.google.common.io.LineProcessor),608,618,"/**
 * Processes lines from the input using the provided processor.
 * @param processor LineProcessor to process each line.
 * @return Result of the line processing.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lines,com.google.common.io.CharSource:lines(),157,161,"/**
 * Returns a stream of lines from this reader.
 * Closes the reader when the stream is closed.
 */
","* Opens a new {@link Stream} for reading text one line at a time from this source. This method
   * returns a new, independent stream each time it is called.
   *
   * <p>The returned stream is lazy and only reads from the source in the terminal operation. If an
   * I/O error occurs while the stream is reading from the source or when the stream is closed, an
   * {@link UncheckedIOException} is thrown.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * <p>The caller is responsible for ensuring that the returned stream is closed. For example:
   *
   * {@snippet :
   * try (Stream<String> lines = source.lines()) {
   *   lines.map(...)
   *      .filter(...)
   *      .forEach(...);
   * }
   * }
   *
   * @throws IOException if an I/O error occurs while opening the stream
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,exhaust,com.google.common.io.CharStreams:exhaust(java.lang.Readable),237,247,"/**
 * Reads all bytes from a readable and returns the total count.
 * @param readable The readable to exhaust.
 * @return Total number of bytes read.
 */
","* Reads and discards data from the given {@code Readable} until the end of the stream is reached.
   * Returns the total number of chars read. Does not close the stream.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineReader.java,<init>,com.google.common.io.LineReader:<init>(java.lang.Readable),56,59,"/**
 * Initializes a LineReader with a provided Readable object.
 * @param readable The Readable object to read from.
 */",Creates a new instance that will read lines from the given {@code Readable} object.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.InputStream),112,118,"/**
 * Closes an InputStream, ignoring any potential IOException.
 * @param inputStream The InputStream to close, or null.
 */
","* Closes the given {@link InputStream}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as an {@code InputStream}. Unlike with writable resources, there's no chance that
   * a failure that occurs when closing the stream indicates a meaningful problem such as a failure
   * to flush all bytes to the underlying resource.
   *
   * @param inputStream the input stream to be closed, or {@code null} in which case this method
   *     does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closeables.java,closeQuietly,com.google.common.io.Closeables:closeQuietly(java.io.Reader),133,139,"/**
 * Closes a Reader, ignoring any potential IOException.
 * @param reader The Reader to close, or null if nothing to do.
 */
","* Closes the given {@link Reader}, logging any {@code IOException} that's thrown rather than
   * propagating it.
   *
   * <p>While it's not safe in the general case to ignore exceptions that are thrown when closing an
   * I/O resource, it should generally be safe in the case of a resource that's being used only for
   * reading, such as a {@code Reader}. Unlike with writable resources, there's no chance that a
   * failure that occurs when closing the reader indicates a meaningful problem such as a failure to
   * flush all bytes to the underlying resource.
   *
   * @param reader the reader to be closed, or {@code null} in which case this method does nothing
   * @since 17.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,openInputStream,com.google.common.io.FileBackedOutputStream:openInputStream(),165,173,"/**
 * Opens an input stream from file or memory buffer.
 * Returns InputStream; throws IOException if error occurs.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,update,com.google.common.io.FileBackedOutputStream:update(int),232,255,"/**
* Transfers data to file if memory threshold is exceeded.
* @param len Number of bytes to be written.
* @throws IOException if an I/O error occurs.
*/
","* Checks if writing {@code len} bytes would go over threshold, and switches to file buffering if
   * so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,reset,com.google.common.io.FileBackedOutputStream:reset(),181,199,"/**
 * Resets the output stream, closing it and reinitializing memory.
 */","* Calls {@link #close} if not already closed, and then resets this object back to its initial
   * state, for reuse. If data was buffered to a file, it will be deleted.
   *
   * @throws IOException if an I/O error occurred while deleting the file buffer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,asCharSource,"com.google.common.io.Files:asCharSource(java.io.File,java.nio.charset.Charset)",209,211,"/**
 * Creates a CharSource from a File using the given Charset.
 * @param file The file to read.
 * @param charset The character encoding to use.
 */
","* Returns a new {@link CharSource} for reading character data from the given file using the given
   * character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Flushables.java,flushQuietly,com.google.common.io.Flushables:flushQuietly(java.io.Flushable),70,77,"/**
 * Flushes the given {@link Flushable} quietly, logging errors.
 */","* Equivalent to calling {@code flush(flushable, true)}, but with no {@code IOException} in the
   * signature.
   *
   * @param flushable the {@code Flushable} object to be flushed.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,checkAllowsInsecure,"com.google.common.io.MoreFiles:checkAllowsInsecure(java.nio.file.Path,com.google.common.io.RecursiveDeleteOption[])",743,748,"/**
 * Verifies insecure delete is allowed.
 * Throws exception if ALLOW_INSECURE option is not present.
 */
","Checks that the given options allow an insecure delete, throwing an exception if not.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,grow,com.google.common.io.ReaderInputStream:grow(java.nio.CharBuffer),194,200,"/**
 * Doubles the capacity of a CharBuffer.
 * @param buf The CharBuffer to grow.
 * @return A new CharBuffer with doubled capacity.
 */
","Returns a new CharBuffer identical to buf, except twice the capacity.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,add,"com.google.common.io.LineBuffer:add(char[],int,int)",52,86,"/**
 * Adds a portion of a character array to the current line buffer.
 * @param cbuf char array to add
 * @param off start index
 * @param len number of characters to add
 */","* Process additional characters from the stream. When a line separator is found the contents of
   * the line and the line separator itself are passed to the abstract {@link #handleLine} method.
   *
   * @param cbuf the character buffer to process
   * @param off the offset into the buffer
   * @param len the number of characters to process
   * @throws IOException if an I/O error occurs
   * @see #finish",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LineBuffer.java,finish,com.google.common.io.LineBuffer:finish(),104,108,"/**
 * Finishes the current line if necessary.
 * Handles cases where a return was seen or line has content.
 */","* Subclasses must call this method after finishing character processing, in order to ensure that
   * any unterminated line in the buffer is passed to {@link #handleLine}.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readByte,com.google.common.io.LittleEndianDataInputStream:readByte(),210,214,"/**
 * Reads a byte from the input stream.
 * Returns the byte value. May throw IOException.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readBoolean,com.google.common.io.LittleEndianDataInputStream:readBoolean(),216,220,"/**
 * Reads a boolean value.
 * Returns true if the byte is 1, false otherwise.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readUnsignedShort,com.google.common.io.LittleEndianDataInputStream:readUnsignedShort(),97,104,"/**
 * Reads an unsigned short (2 bytes) from the input stream.
 */
","* Reads an unsigned {@code short} as specified by {@link DataInputStream#readUnsignedShort()},
   * except using little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as an unsigned 16-bit integer in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readInt,com.google.common.io.LittleEndianDataInputStream:readInt(),114,123,"/**
 * Reads the next four bytes from the stream and interprets them as an int.
 */
","* Reads an integer as specified by {@link DataInputStream#readInt()}, except using little-endian
   * byte order.
   *
   * @return the next four bytes of the input stream, interpreted as an {@code int} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readLong,com.google.common.io.LittleEndianDataInputStream:readLong(),133,146,"/**
 * Reads the next long value from the input stream.
 * Reads 8 bytes and converts them to a long.
 */
","* Reads a {@code long} as specified by {@link DataInputStream#readLong()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code long} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChar,com.google.common.io.LittleEndianDataOutputStream:writeChar(int),82,85,"/**
 * Writes a character (as an int) to the output stream.
 * Delegates to the writeShort method.
 */
","* Writes a char as specified by {@link DataOutputStream#writeChar(int)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeFloat,com.google.common.io.LittleEndianDataOutputStream:writeFloat(float),117,120,"/**
 * Writes a float to the output stream as an integer.
 */","* Writes a {@code float} as specified by {@link DataOutputStream#writeFloat(float)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeLong,com.google.common.io.LittleEndianDataOutputStream:writeLong(long),142,145,"/**
* Writes a long value to the output stream, reversing byte order.
*/
","* Writes a {@code long} as specified by {@link DataOutputStream#writeLong(long)}, except using
   * little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,size,com.google.common.io.MoreFiles$PathByteSource:size(),145,158,"/**
 * Returns the size of the file in bytes.
 * Throws IOException if it's a directory or symbolic link.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelyInsecure,com.google.common.io.MoreFiles:deleteRecursivelyInsecure(java.nio.file.Path),664,683,"/**
 * Recursively deletes a directory, handling exceptions.
 * @param path Path to the directory to delete.
 * @return Collection of IOExceptions encountered, or null.
 */
","* Insecure recursive delete for file systems that don't support {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsSecure,com.google.common.io.MoreFiles:deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream),646,658,"/**
 * Deletes directory contents securely, returning IOExceptions.
 * @param dir SecureDirectoryStream to delete from
 * @return Collection of IOExceptions during deletion
 */
","* Secure method for deleting the contents of a directory using {@code SecureDirectoryStream}.
   * Returns a collection of exceptions that occurred or null if no exceptions were thrown.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,advance,com.google.common.io.MultiInputStream:advance(),62,67,"/**
 * Advances to the next resource. Closes current, opens next.
 */","Closes the current input stream and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,advance,com.google.common.io.MultiReader:advance(),45,50,"/**
 * Advances to the next resource, closing the previous one.
 * Updates 'current' with the new stream if available.
 */","Closes the current reader and opens the next one, if any.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,asCharSource,"com.google.common.io.Resources:asCharSource(java.net.URL,java.nio.charset.Charset)",83,85,"/**
 * Creates a CharSource from a URL using the given charset.
 * @param url The URL to read.
 * @param charset The charset to use for decoding.
 */
","* Returns a {@link CharSource} that reads from the given URL using the given character set.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,roundToDoubleArbitrarily,com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:roundToDoubleArbitrarily(java.math.BigInteger),334,337,"/**
 * Rounds a BigInteger to a double using Apache Commons Math.
 * @param bigInteger The BigInteger to round.
 * @return The rounded double value.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,divide,"com.google.common.math.IntMath:divide(int,int,java.math.RoundingMode)",312,367,"/**
 * Divides p by q with specified rounding mode.
 * @param p dividend
 * @param q divisor
 * @param mode rounding mode
 * @return quotient after rounding
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,divide,"com.google.common.math.LongMath:divide(long,long,java.math.RoundingMode)",377,430,"/**
 * Divides p by q with specified rounding mode.
 * @param p dividend
 * @param q divisor
 * @param mode rounding mode
 * @return quotient
 */","* Returns the result of dividing {@code p} by {@code q}, rounding using the specified {@code
   * RoundingMode}. If the {@code RoundingMode} is {@link RoundingMode#DOWN}, then this method is
   * equivalent to regular Java division, {@code p / q}; and if it is {@link RoundingMode#FLOOR},
   * then this method is equivalent to {@link Math#floorDiv(long,long) Math.floorDiv}{@code (p, q)}.
   *
   * @throws ArithmeticException if {@code q == 0}, or if {@code mode == UNNECESSARY} and {@code a}
   *     is not an integer multiple of {@code b}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,factorial,com.google.common.math.DoubleMath:factorial(int),305,318,"/**
 * Calculates factorial of n. Returns Infinity if n is too large.
 */","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@code n!}, or {@link Double#POSITIVE_INFINITY} if {@code n! >
   * Double.MAX_VALUE}.
   *
   * <p>The result is within 1 ulp of the true value.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,pow,"com.google.common.math.IntMath:pow(int,int)",221,253,"/**
 * Calculates b raised to the power of k.
 * @param b base number
 * @param k exponent (non-negative)
 * @return b^k
 */
","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).intValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * <p>Compare {@link #checkedPow}, which throws an {@link ArithmeticException} upon overflow.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,gcd,"com.google.common.math.IntMath:gcd(int,int)",402,445,"/**
* Calculates the greatest common divisor of two non-negative integers.
* @param a first non-negative integer
* @param b second non-negative integer
* @return the GCD of a and b
*/
","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,factorial,com.google.common.math.IntMath:factorial(int),626,629,"/**
 * Calculates factorial using precomputed values.
 * @param n Non-negative integer for factorial calculation.
 * @return Factorial of n, or Integer.MAX_VALUE if out of range.
 */
","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Integer#MAX_VALUE} if the result does not fit in a {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,binomial,"com.google.common.math.IntMath:binomial(int,int)",653,676,"/**
 * Calculates binomial coefficient (n choose k).
 * @param n non-negative integer
 * @param k non-negative integer, k <= n
 * @return binomial coefficient as int, MAX_VALUE if overflow
 */
","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Integer#MAX_VALUE} if the result does not fit in an {@code int}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0} or {@code k > n}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,pow,"com.google.common.math.LongMath:pow(long,int)",262,296,"/**
 * Calculates b raised to the power of k.
 * @param b base number
 * @param k exponent, must be non-negative
 * @return b^k as a long
 */
","* Returns {@code b} to the {@code k}th power. Even if the result overflows, it will be equal to
   * {@code BigInteger.valueOf(b).pow(k).longValue()}. This implementation runs in {@code O(log k)}
   * time.
   *
   * @throws IllegalArgumentException if {@code k < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,factorial,com.google.common.math.LongMath:factorial(int),755,759,"/**
 * Calculates factorial of n. Returns Long.MAX_VALUE if n is too large.
 */","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, {@code 1} if
   * {@code n == 0}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,listProduct,com.google.common.math.BigIntegerMath:listProduct(java.util.List),436,438,"/**
 * Calculates the product of all BigIntegers in the list.
 * @param nums List of BigIntegers to multiply.
 * @return The product of all BigIntegers in the list.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,checkFinite,com.google.common.math.DoubleMath:checkFinite(double),524,529,"/**
 * Checks if the argument is finite; throws an exception if not.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleUtils.java,getSignificand,com.google.common.math.DoubleUtils:getSignificand(double),63,69,"/**
 * Extracts the significand of a double.
 * @param d The double value.
 * @return The significand as a long.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,mapping,"com.google.common.math.LinearTransformation:mapping(double,double)",53,56,"/**
 * Creates a LinearTransformationBuilder with given x and y mapping values.
 */","* Start building an instance which maps {@code x = x1} to {@code y = y1}. Both arguments must be
   * finite. Call either {@link LinearTransformationBuilder#and} or {@link
   * LinearTransformationBuilder#withSlope} on the returned object to finish building the instance.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyEquals,"com.google.common.math.DoubleMath:fuzzyEquals(double,double,double)",363,369,"/**
 * Checks if two doubles are approximately equal within a tolerance.
 * @param a first double
 * @param b second double
 * @param tolerance max difference for equality
 * @return true if doubles are approximately equal
 */
","* Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.
   *
   * <p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance ||
   * Double.valueOf(a).equals(Double.valueOf(b))}.
   *
   * <p>Notable special cases include:
   *
   * <ul>
   *   <li>All NaNs are fuzzily equal.
   *   <li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.
   *   <li>Positive and negative zero are always fuzzily equal.
   *   <li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}
   *       and {@code b} are fuzzily equal if and only if {@code a == b}.
   *   <li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.
   *   <li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code
   *       Double.NEGATIVE_INFINITY} are fuzzily equal only to themselves.
   * </ul>
   *
   * <p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an
   * equivalence relation and <em>not</em> suitable for use in {@link Object#equals}
   * implementations.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/ToDoubleRounder.java,roundToDouble,"com.google.common.math.ToDoubleRounder:roundToDouble(java.lang.Number,java.math.RoundingMode)",45,151,"/**
 * Rounds a value to the nearest representable double, using mode.
 * @param x value to round
 * @param mode rounding mode
 */",Rounds {@code x} to a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,ceilingPowerOfTwo,com.google.common.math.IntMath:ceilingPowerOfTwo(int),63,69,"/**
 * Returns the smallest power of 2 >= x.
 * @param x The input integer.
 * @throws ArithmeticException if x is too large.
 */
","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as an {@code
   *     int}, i.e. when {@code x > 2^30}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,floorPowerOfTwo,com.google.common.math.IntMath:floorPowerOfTwo(int),78,81,"/**
 * Returns the highest power of 2 less than or equal to x.
 * @param x The input integer.
 * @return The highest power of 2.
 */
","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log2,"com.google.common.math.IntMath:log2(int,java.math.RoundingMode)",114,141,"/**
 * Calculates the base-2 logarithm of an integer with rounding.
 * @param x The integer to calculate the logarithm of.
 * @param mode The rounding mode to use.
 * @return The base-2 logarithm of x.
 */
","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10Floor,com.google.common.math.IntMath:log10Floor(int),178,192,"/**
 * Calculates the floor of the base-10 logarithm of an integer.
 * Uses a lookup table for efficiency.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,sqrt,"com.google.common.math.IntMath:sqrt(int,java.math.RoundingMode)",262,294,"/**
 * Calculates the integer square root of x with specified rounding.
 * @param x non-negative number
 * @param mode rounding mode
 * @return integer square root of x
 */","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedAdd,"com.google.common.math.IntMath:checkedAdd(int,int)",455,458,"/**
 * Adds two integers, throwing an ArithmeticException on overflow.
 * @param a first integer
 * @param b second integer
 * @return sum of a and b
 */
","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedSubtract,"com.google.common.math.IntMath:checkedSubtract(int,int)",468,471,"/**
 * Subtracts two integers, throwing an ArithmeticException on overflow.
 * @param a The minuend.
 * @param b The subtrahend.
 * @return The result of a - b.
 */
","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedMultiply,"com.google.common.math.IntMath:checkedMultiply(int,int)",481,484,"/**
 * Multiplies two integers, throwing an exception on overflow.
 * @param a first integer
 * @param b second integer
 * @return product of a and b
 */
","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(int, int)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code int} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double)",174,178,"/**
 * Initializes a RegularLinearTransformation with given slope and y-intercept.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$RegularLinearTransformation:<init>(double,double,com.google.common.math.LinearTransformation)",180,184,"/**
 * Constructs a RegularLinearTransformation with given slope, intercept, and inverse.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double),232,235,"/**
 * Initializes a VerticalLinearTransformation with a given x value.
 * @param x The x-coordinate for the vertical transformation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,<init>,"com.google.common.math.LinearTransformation$VerticalLinearTransformation:<init>(double,com.google.common.math.LinearTransformation)",237,240,"/**
 * Initializes a VerticalLinearTransformation.
 * @param x The x-coordinate of the vertical transformation.
 * @param inverse The inverse linear transformation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,testWitness,"com.google.common.math.LongMath$MillerRabinTester:testWitness(long,long)",1184,1207,"/**
 * Tests if n is a witness to the compositeness of base.
 * @param base base value
 * @param n number to test
 * @return true if n is a witness, false otherwise
 */
",Returns true if n is a strong probable prime relative to the specified base.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,ceilingPowerOfTwo,com.google.common.math.LongMath:ceilingPowerOfTwo(long),63,69,"/**
 * Returns the smallest power of 2 >= x.
 * @param x The input value, must be positive.
 * @return The ceiling power of 2 for x.
 */
","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code checkedPow(2, log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException of the next-higher power of two is not representable as a {@code
   *     long}, i.e. when {@code x > 2^62}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,floorPowerOfTwo,com.google.common.math.LongMath:floorPowerOfTwo(long),78,84,"/**
 * Returns the highest power of 2 less than or equal to x.
 * @param x The input value, must be positive.
 * @return The floor power of 2.
 */
","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * checkedPow(2, log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log2,"com.google.common.math.LongMath:log2(long,java.math.RoundingMode)",116,143,"/**
 * Calculates the base-2 logarithm of a long value with rounding.
 * @param x The long value to calculate the logarithm of.
 * @param mode The rounding mode to use.
 * @return The base-2 logarithm of x.
 */
","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10Floor,com.google.common.math.LongMath:log10Floor(long),181,196,"/**
 * Calculates floor(log10(x)) using a branch-free lookup method.
 * @param x The input long value.
 * @return The floor of the base-10 logarithm of x.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,gcd,"com.google.common.math.LongMath:gcd(long,long)",488,531,"/**
 * Calculates the greatest common divisor of two non-negative longs.
 * @param a first non-negative long
 * @param b second non-negative long
 * @return the GCD of a and b
 */","* Returns the greatest common divisor of {@code a, b}. Returns {@code 0} if {@code a == 0 && b ==
   * 0}.
   *
   * @throws IllegalArgumentException if {@code a < 0} or {@code b < 0}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mod,"com.google.common.math.LongMath:mod(long,int)",450,454,"/**
 * Calculates the modulo of a long x by an integer m.
 * @param x The long number to calculate the modulo of.
 * @param m The integer divisor.
 * @return The remainder of x divided by m.
 */
","* Returns {@code x mod m}, a non-negative value less than {@code m}. This differs from {@code x %
   * m}, which might be negative.
   *
   * <p>For example:
   *
   * {@snippet :
   * mod(7, 4) == 3
   * mod(-7, 4) == 1
   * mod(-1, 4) == 3
   * mod(-8, 4) == 0
   * mod(8, 4) == 0
   * }
   *
   * @throws ArithmeticException if {@code m <= 0}
   * @see <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.17.3"">
   *     Remainder Operator</a>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedAdd,"com.google.common.math.LongMath:checkedAdd(long,long)",541,544,"/**
 * Adds two longs, throwing an ArithmeticException on overflow.
 * @param a the first long
 * @param b the second long
 * @return the sum of a and b
 */
","* Returns the sum of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#addExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a + b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedSubtract,"com.google.common.math.LongMath:checkedSubtract(long,long)",554,557,"/**
 * Subtracts two longs, throwing an exception on overflow.
 * @param a The minuend.
 * @param b The subtrahend.
 * @return The result of a - b.
 */
","* Returns the difference of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#subtractExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a - b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedMultiply,"com.google.common.math.LongMath:checkedMultiply(long,long)",567,570,"/**
 * Multiplies two longs and returns the exact product.
 * @param a The first long.
 * @param b The second long.
 * @return The product of a and b.
 */
","* Returns the product of {@code a} and {@code b}, provided it does not overflow.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use {@link
   * Math#multiplyExact(long, long)} instead.
   *
   * @throws ArithmeticException if {@code a * b} overflows in signed {@code long} arithmetic",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,saturatedPow,"com.google.common.math.LongMath:saturatedPow(long,int)",698,745,"/**
 * Calculates b^k, saturating to MAX/MIN if overflow occurs.
 * @param b base
 * @param k exponent (non-negative)
 * @return b^k, saturated if overflowed
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,count,com.google.common.math.PairedStats:count(),67,69,"/**
 * Returns the count of items from the underlying statistics.
 */
",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,equals,com.google.common.math.PairedStats:equals(java.lang.Object),215,227,"/**
 * Checks if two PairedStats objects are equal.
 * Compares xStats, yStats, and sumOfProductsOfDeltas.
 */
","* {@inheritDoc}
   *
   * <p><b>Note:</b> This tests exact equality of the calculated statistics, including the floating
   * point values. Two instances are guaranteed to be considered equal if one is copied from the
   * other using {@code second = new PairedStatsAccumulator().addAll(first).snapshot()}, if both
   * were obtained by calling {@code snapshot()} on the same {@link PairedStatsAccumulator} without
   * adding any values in between the two calls, or if one is obtained from the other after
   * round-tripping through java serialization. However, floating point rounding errors mean that it
   * may be false for some instances where the statistics are mathematically equal, including
   * instances constructed from the same values in a different order... or (in the general case)
   * even in the same order. (It is guaranteed to return true for instances constructed from the
   * same values in the same order if {@code strictfp} is in effect, or if the system architecture
   * guarantees {@code strictfp}-like semantics.)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,<init>,com.google.common.math.PairedStatsAccumulator:<init>(),37,37,"/**
 * Constructs a new PairedStatsAccumulator object.
 */",Creates a new accumulator.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,calculateNewMeanNonFinite,"com.google.common.math.StatsAccumulator:calculateNewMeanNonFinite(double,double)",404,429,"/**
 * Calculates the new mean, handling non-finite values correctly.
 * @param previousMean Previous mean value.
 * @param value New value to incorporate.
 * @return New mean, NaN if infinities differ.
 */
","* Calculates the new value for the accumulated mean when a value is added, in the case where at
   * least one of the previous mean and the value is non-finite.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,count,com.google.common.math.PairedStatsAccumulator:count(),100,102,"/**
 * Returns the count from the underlying xStats object.
 */",Returns the number of pairs in the dataset.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,ensureInUnitRange,com.google.common.math.PairedStatsAccumulator:ensureInUnitRange(double),241,243,"/**
 * Constrains a double value to the range [-1.0, 1.0].
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,median,com.google.common.math.Quantiles:median(),142,144,"/**
 * Returns a ScaleAndIndex representing the median.
 * Uses scale 2 and index 1 to define the median.
 */
",Specifies the computation of a median (i.e. the 1st 2-quantile).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,quartiles,com.google.common.math.Quantiles:quartiles(),147,149,"/**
 * Calculates the quartile scale (4 divisions).
 * @return A Scale object representing the quartiles.
 */
",Specifies the computation of quartiles (i.e. 4-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,percentiles,com.google.common.math.Quantiles:percentiles(),152,154,"/**
 * Returns a scale representing percentiles (scale of 100).
 */",Specifies the computation of percentiles (i.e. 100-quantiles).,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,movePivotToStartOfSlice,"com.google.common.math.Quantiles:movePivotToStartOfSlice(double[],int,int)",603,620,"/**
 * Moves the pivot element to the start of the slice.
 * @param array The array to modify.
 * @param from Start index of the slice.
 * @param to End index of the slice (exclusive).
 */
","* Selects the pivot to use, namely the median of the values at {@code from}, {@code to}, and
   * halfway between the two (rounded down), from {@code array}, and ensure (by swapping elements if
   * necessary) that that pivot value appears at the start of the slice i.e. at {@code from}.
   * Expects that {@code from} is strictly less than {@code to}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,readFrom,com.google.common.math.Stats:readFrom(java.nio.ByteBuffer),647,660,"/**
 * Reads a Stats object from the given ByteBuffer.
 * @param buffer ByteBuffer to read stats from.
 * @return A Stats object constructed from the buffer.
 */
","* Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.
   *
   * @param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as
   *     {@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this
   *     instance is read. In the process increases the position of {@link ByteBuffer} by BYTES.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,snapshot,com.google.common.math.StatsAccumulator:snapshot(),220,222,"/**
 * Creates a snapshot of the current statistics.
 * @return A Stats object containing the current stats.
 */
",Returns an immutable snapshot of the current statistics.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPort,com.google.common.net.HostAndPort:getPort(),111,114,"/**
 * Returns the port number.
 * @return The port number, after verifying it's set.
 */
","* Get the current port number, failing if no port is defined.
   *
   * @return a validated port number, in the range [0..65535]
   * @throws IllegalStateException if no port is defined. You can use {@link #withDefaultPort(int)}
   *     to prevent this from occurring.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,getPortOrDefault,com.google.common.net.HostAndPort:getPortOrDefault(int),117,119,"/**
 * Returns the configured port or the default if not configured.
 * @param defaultPort The default port to use if no port is set.
 * @return The configured port number.
 */
","Returns the current port number, with a default if no port is defined.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,toString,com.google.common.net.HostAndPort:toString(),295,308,"/**
 * Returns a string representation of the object.
 * Includes host and port, enclosed in brackets if host contains ':'.
 */
","Rebuild the host:port string, including brackets if necessary.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,withDefaultPort,com.google.common.net.HostAndPort:withDefaultPort(int),249,255,"/**
 * Sets the port to the default port if one isn't already set.
 * @param defaultPort The default port to use.
 * @return A new HostAndPort object.
 */
","* Provide a default port if the parsed string contained only a host.
   *
   * <p>You can chain this after {@link #fromString(String)} to include a port in case the port was
   * omitted from the input string. If a port was already provided, then this method is a no-op.
   *
   * @param defaultPort a port number, from [0..65535]
   * @return a HostAndPort instance, guaranteed to have a defined port.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV4,com.google.common.net.InetAddresses:textToNumericFormatV4(java.lang.String),241,264,"/**
 * Parses an IPv4 address string into a byte array.
 * @param ipString The IPv4 address string to parse.
 * @return Byte array of IPv4 octets, or null if invalid.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,textToNumericFormatV6,com.google.common.net.InetAddresses:textToNumericFormatV6(java.lang.String),266,334,"/**
 * Converts an IPv6 string to a numeric byte array.
 * @param ipString IPv6 string to convert.
 * @return Numeric byte array or null if invalid.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toAddrString,com.google.common.net.InetAddresses:toAddrString(java.net.InetAddress),466,481,"/**
 * Converts an InetAddress to a formatted string representation.
 * Handles IPv4 and IPv6 addresses differently.
 */
","* Returns the string representation of an {@link InetAddress}.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses, the output follows <a href=""http://tools.ietf.org/html/rfc5952"">RFC 5952</a> section
   * 4. The main difference is that this method uses ""::"" for zero compression, while Java's version
   * uses the uncompressed form (except on Android, where the zero compression is also done). The
   * other difference is that this method outputs any scope ID in the format that it was provided at
   * creation time, while Android may always output it as an interface name, even if it was supplied
   * as a numeric ID.
   *
   * <p>This method uses hexadecimal for all IPv6 addresses, including IPv4-mapped IPv6 addresses
   * such as ""::c000:201"".
   *
   * @param ip {@link InetAddress} to be converted to an address string
   * @return {@code String} containing the text-formatted IP address
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,isIsatapAddress,com.google.common.net.InetAddresses:isIsatapAddress(java.net.Inet6Address),857,875,"/**
 * Checks if an IPv6 address is an ISATAP address.
 * Returns true if it is, false otherwise.
 */
","* Evaluates whether the argument is an ISATAP address.
   *
   * <p>From RFC 5214: ""ISATAP interface identifiers are constructed in Modified EUI-64 format [...]
   * by concatenating the 24-bit IANA OUI (00-00-5E), the 8-bit hexadecimal value 0xFE, and a 32-bit
   * IPv4 address in network byte order [...]""
   *
   * <p>For more on ISATAP addresses see section 6.1 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc5214#section-6.1"">RFC 5214</a>.
   *
   * @param ip {@link Inet6Address} to be examined for ISATAP address format
   * @return {@code true} if the argument is an ISATAP address",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,hasEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:hasEmbeddedIPv4ClientAddress(java.net.Inet6Address),902,904,"/**
 * Checks if an Inet6Address represents an embedded IPv4 client address.
 */","* Examines the Inet6Address to determine if it is an IPv6 address of one of the specified address
   * types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@code true} if there is an embedded IPv4 client address
   * @since 7.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,previewChar,com.google.common.net.MediaType$Tokenizer:previewChar(),1183,1186,"/**
 * Returns the next character in the input without advancing position.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,<init>,com.google.common.primitives.Booleans$BooleanArrayAsList:<init>(boolean[]),395,397,"/**
 * Constructs a BooleanArrayAsList with the given array.
 * @param array The boolean array to wrap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,equals,com.google.common.primitives.Booleans$BooleanArrayAsList:equals(java.lang.Object),471,490,"/**
 * Checks if this BooleanArrayAsList is equal to another object.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toString,com.google.common.primitives.Booleans$BooleanArrayAsList:toString(),501,509,"/**
 * Returns a string representation of the boolean array.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,hashCode,com.google.common.primitives.Booleans$BooleanArrayAsList:hashCode(),492,499,"/**
 * Calculates the hash code based on array elements.
 * Uses elements from start to end index to compute hash.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,toArray,com.google.common.primitives.Booleans:toArray(java.util.Collection),354,367,"/**
 * Converts a Collection<Boolean> to a boolean array.
 * Handles BooleanArrayAsList for efficiency.
 */
","* Copies a collection of {@code Boolean} instances into a new array of primitive {@code boolean}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * <p><b>Note:</b> consider representing the collection as a {@link java.util.BitSet} instead.
   *
   * @param collection a collection of {@code Boolean} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,indexOf,"com.google.common.primitives.Booleans:indexOf(boolean[],boolean)",162,164,"/**
 * Finds the first index of target boolean in the array.
 * @param array array to search
 * @param target value to find
 * @return index of target or -1 if not found
 */
","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * <p><b>Note:</b> consider representing the array as a {@link java.util.BitSet} instead, and
   * using {@link java.util.BitSet#nextSetBit(int)} or {@link java.util.BitSet#nextClearBit(int)}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,lastIndexOf,"com.google.common.primitives.Booleans:lastIndexOf(boolean[],boolean)",213,215,"/**
* Finds the last occurrence of a boolean value in an array.
* @param array The array to search.
* @param target The value to search for.
*/
","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code boolean} values, possibly empty
   * @param target a primitive {@code boolean} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,<init>,com.google.common.primitives.Bytes$ByteArrayAsList:<init>(byte[]),262,264,"/**
 * Constructs a list from a byte array.
 * Uses the entire array as the data source.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,equals,com.google.common.primitives.Bytes$ByteArrayAsList:equals(java.lang.Object),337,356,"/**
 * Checks if two ByteArrayAsList instances are equal.
 * Compares size and elements for equality.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toString,com.google.common.primitives.Bytes$ByteArrayAsList:toString(),367,375,"/**
 * Returns a string representation of the circular buffer.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,hashCode,com.google.common.primitives.Bytes$ByteArrayAsList:hashCode(),358,365,"/**
 * Calculates the hash code based on the byte array elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,toArray,com.google.common.primitives.Bytes:toArray(java.util.Collection),220,233,"/**
 * Converts a collection of Numbers to a byte array.
 * Handles ByteArrayAsList for optimized conversion.
 */
","* Returns an array containing each value of {@code collection}, converted to a {@code byte} value
   * in the manner of {@link Number#byteValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Byte>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,indexOf,"com.google.common.primitives.Bytes:indexOf(byte[],byte)",92,94,"/**
 * Finds the first index of target in array.
 * @param array byte array to search
 * @param target byte value to find
 * @return Index of target or -1 if not found
 */
","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,lastIndexOf,"com.google.common.primitives.Bytes:lastIndexOf(byte[],byte)",143,145,"/**
 * Finds the last occurrence of a byte in a byte array.
 * @param array The byte array to search.
 * @param target The byte to search for.
 * @return The last index of the byte, or -1 if not found.
 */
","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code byte} values, possibly empty
   * @param target a primitive {@code byte} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,<init>,com.google.common.primitives.Chars$CharArrayAsList:<init>(char[]),582,584,"/**
 * Creates a CharArrayAsList with the specified char array.
 * @param array The char array to wrap in the list.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,equals,com.google.common.primitives.Chars$CharArrayAsList:equals(java.lang.Object),658,677,"/**
 * Checks if two CharArrayAsList instances are equal.
 * Compares the underlying char arrays and sizes.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toString,com.google.common.primitives.Chars$CharArrayAsList:toString(),688,696,"/**
 * Returns a string representation of the circular array.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,hashCode,com.google.common.primitives.Chars$CharArrayAsList:hashCode(),679,686,"/**
 * Calculates the hash code based on the character array's content.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,toArray,com.google.common.primitives.Chars:toArray(java.util.Collection),436,449,"/**
 * Converts a collection of Characters to a char array.
 * Returns a char array representation of the collection.
 */","* Copies a collection of {@code Character} instances into a new array of primitive {@code char}
   * values.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Character} objects
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,compare,"com.google.common.primitives.Chars$LexicographicalComparator:compare(char[],char[])",406,416,"/**
 * Compares two char arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,indexOf,"com.google.common.primitives.Chars:indexOf(char[],char)",150,152,"/**
* Finds the first index of target in array.
* @param array char array to search
* @param target char to find
* @return Index of target or -1 if not found
*/
","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,lastIndexOf,"com.google.common.primitives.Chars:lastIndexOf(char[],char)",201,203,"/**
* Finds the last occurrence of a char in a char array.
* @param array char array to search
* @param target char to find
* @return Last index of target or -1 if not found.
*/
","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code char} values, possibly empty
   * @param target a primitive {@code char} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,fromByteArray,com.google.common.primitives.Chars:fromByteArray(byte[]),326,330,"/**
 * Extracts a char from the first two bytes of a byte array.
 * @param bytes byte array containing char data
 * @return char value from the array
 */
","* Returns the {@code char} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getChar()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code char} value {@code '\\u5432'}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,<init>,com.google.common.primitives.Doubles$DoubleArrayAsList:<init>(double[]),590,592,"/**
 * Constructs a list backed by the specified array.
 * @param array the array to be wrapped
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,equals,com.google.common.primitives.Doubles$DoubleArrayAsList:equals(java.lang.Object),671,690,"/**
 * Checks if two DoubleArrayAsList instances are equal.
 * Compares sizes and elements; returns true if equal.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toString,com.google.common.primitives.Doubles$DoubleArrayAsList:toString(),701,709,"/**
 * Returns a string representation of the circular array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,hashCode,com.google.common.primitives.Doubles$DoubleArrayAsList:hashCode(),692,699,"/**
 * Calculates the hash code based on the elements in the array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray:hashCode(),596,604,"/**
 * Calculates the hash code for the array elements.
 * Uses start/end indices and Double.hashCode for calculation.
 */
",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,toArray,com.google.common.primitives.Doubles:toArray(java.util.Collection),542,555,"/**
 * Converts a collection of Numbers to a double array.
 * Handles DoubleArrayAsList for efficiency.
 */
","* Returns an array containing each value of {@code collection}, converted to a {@code double}
   * value in the manner of {@link Number#doubleValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Double>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,indexOf,"com.google.common.primitives.Doubles:indexOf(double[],double)",134,136,"/**
 * Finds the index of the first occurrence of target in array.
 * @param array Array to search.
 * @param target Value to search for.
 * @return Index of target, or -1 if not found.
 */
","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,lastIndexOf,"com.google.common.primitives.Doubles:lastIndexOf(double[],double)",188,190,"/**
* Finds the last occurrence of target in array.
* @param array array to search
* @param target value to search for
* @return last index or -1 if not found
*/
","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code double} values, possibly empty
   * @param target a primitive {@code double} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,<init>,com.google.common.primitives.Floats$FloatArrayAsList:<init>(float[]),584,586,"/**
* Creates a FloatArrayAsList from the given float array.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,equals,com.google.common.primitives.Floats$FloatArrayAsList:equals(java.lang.Object),659,678,"/**
 * Checks if two FloatArrayAsList instances are equal.
 * Compares sizes and elements of the underlying float arrays.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toString,com.google.common.primitives.Floats$FloatArrayAsList:toString(),689,697,"/**
 * Returns a string representation of the circular array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,hashCode,com.google.common.primitives.Floats$FloatArrayAsList:hashCode(),680,687,"/**
 * Calculates the hash code based on the float array elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,toArray,com.google.common.primitives.Floats:toArray(java.util.Collection),539,552,"/**
 * Converts a collection of Numbers to a float array.
 * @param collection Collection of Number objects
 * @return float array representation of the collection
 */
","* Returns an array containing each value of {@code collection}, converted to a {@code float}
   * value in the manner of {@link Number#floatValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Float>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,indexOf,"com.google.common.primitives.Floats:indexOf(float[],float)",131,133,"/**
* Finds the index of the first occurrence of target in array.
* @param array array to search
* @param target value to search for
* @return index of target or -1 if not found
*/
","* Returns the index of the first appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,lastIndexOf,"com.google.common.primitives.Floats:lastIndexOf(float[],float)",185,187,"/**
* Finds the last index of a target value in a float array.
* @param array The array to search.
* @param target The value to search for.
*/
","* Returns the index of the last appearance of the value {@code target} in {@code array}. Note
   * that this always returns {@code -1} when {@code target} is {@code NaN}.
   *
   * @param array an array of {@code float} values, possibly empty
   * @param target a primitive {@code float} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,size,com.google.common.primitives.ImmutableDoubleArray$AsList:size(),494,497,"/**
 * Returns the number of elements in the parent array.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(int),192,195,"/**
 * Creates a new Builder with the specified initial capacity.
 * @param initialCapacity The initial capacity of the builder.
 */
","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableDoubleArray} that is built will very likely occupy more memory than strictly
   * necessary; to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,builder,com.google.common.primitives.ImmutableDoubleArray:builder(),205,207,"/**
 * Returns a new builder instance with an initial capacity of 10.
 */
","* Returns a new, empty builder for {@link ImmutableDoubleArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableDoubleArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,ensureRoomFor,com.google.common.primitives.ImmutableDoubleArray$Builder:ensureRoomFor(int),302,307,"/**
 * Ensures sufficient space in the array to add new elements.
 * @param numberToAdd The number of elements to add.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,<init>,com.google.common.primitives.ImmutableDoubleArray:<init>(double[]),354,356,"/**
 * Constructs an ImmutableDoubleArray from a double array.
 * @param array The double array to initialize from.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray:indexOf(double),390,397,"/**
 * Finds the index of the target double within the array.
 * @param target The double value to search for.
 * @return Index of target or -1 if not found.
 */
","* Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().indexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray:lastIndexOf(double),404,411,"/**
 * Finds the last occurrence of target in the array.
 * @param target The value to search for.
 * @return Index of last occurrence, or -1 if not found.
 */
","* Returns the largest index for which {@link #get} returns {@code target}, or {@code -1} if no
   * such index exists. Values are compared as if by {@link Double#equals}. Equivalent to {@code
   * asList().lastIndexOf(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray:toString(),610,623,"/**
 * Returns a string representation of the array.
 * Returns ""[]"" if empty. Uses StringBuilder for efficiency.
 */
","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(double[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,readResolve,com.google.common.primitives.ImmutableDoubleArray:readResolve(),643,645,"/**
 * Resolves this object during deserialization. Returns EMPTY if empty, otherwise the original object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,size,com.google.common.primitives.ImmutableIntArray$AsList:size(),489,492,"/**
 * Returns the number of elements in the parent collection.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,indexOf,com.google.common.primitives.ImmutableIntArray$AsList:indexOf(java.lang.Object),504,507,"/**
 * Finds the index of the target object within the parent.
 * Returns -1 if target is not an Integer.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray:contains(int),412,414,"/**
* Checks if the set contains the target element.
* @param target the element to search for
* @return true if found, false otherwise
*/
","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,lastIndexOf,com.google.common.primitives.ImmutableIntArray$AsList:lastIndexOf(java.lang.Object),509,512,"/**
 * Finds the last index of target in the parent, or -1 if not found.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(int),189,192,"/**
 * Creates a new Builder with the specified initial capacity.
 * @param initialCapacity The initial capacity of the builder.
 */
","* Returns a new, empty builder for {@link ImmutableIntArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableIntArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,builder,com.google.common.primitives.ImmutableIntArray:builder(),202,204,"/**
 * Returns a new builder instance with an initial capacity of 10.
 */
","* Returns a new, empty builder for {@link ImmutableIntArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableIntArray} that is built will very likely occupy
   * more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,ensureRoomFor,com.google.common.primitives.ImmutableIntArray$Builder:ensureRoomFor(int),299,304,"/**
 * Ensures sufficient space in the array by resizing if needed.
 * @param numberToAdd The number of elements to add.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,<init>,com.google.common.primitives.ImmutableIntArray:<init>(int[]),351,353,"/**
 * Constructs an ImmutableIntArray from an int array.
 * @param array The int array to wrap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray:hashCode(),586,594,"/**
 * Calculates the hash code for the array segment.
 * Uses start/end indices and Integer.hashCode() for calculation.
 */
",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,hashCode,com.google.common.primitives.Ints$IntArrayAsList:hashCode(),773,780,"/**
 * Calculates the hash code based on array elements.
 * Uses elements from start to end index for calculation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray:toString(),600,613,"/**
 * Returns a string representation of the array.
 * Returns ""[]"" if empty; otherwise, returns a comma-separated string.
 */
","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(int[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,readResolve,com.google.common.primitives.ImmutableIntArray:readResolve(),633,635,"/**
 * Resolves object after deserialization. Returns EMPTY if empty, otherwise self.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,size,com.google.common.primitives.ImmutableLongArray$AsList:size(),491,494,"/**
 * Returns the number of elements in the array-backed list.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,indexOf,com.google.common.primitives.ImmutableLongArray$AsList:indexOf(java.lang.Object),506,509,"/**
 * Finds the index of a target object, or -1 if not found.
 * @param target Object to search for; casts to Long if possible.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray:contains(long),414,416,"/**
 * Checks if the set contains the target element.
 * @param target The element to search for.
 * @return True if the element is present, false otherwise.
 */
","* Returns {@code true} if {@code target} is present at any index in this array. Equivalent to
   * {@code asList().contains(target)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,lastIndexOf,com.google.common.primitives.ImmutableLongArray$AsList:lastIndexOf(java.lang.Object),511,514,"/**
 * Finds the last index of target in the array.
 * Returns -1 if target is not a Long.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(int),191,194,"/**
 * Creates a new Builder with the specified initial capacity.
 * @param initialCapacity The initial size of the builder.
 */
","* Returns a new, empty builder for {@link ImmutableLongArray} instances, sized to hold up to
   * {@code initialCapacity} values without resizing. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> When feasible, {@code initialCapacity} should be the exact number
   * of values that will be added, if that knowledge is readily available. It is better to guess a
   * value slightly too high than slightly too low. If the value is not exact, the {@link
   * ImmutableLongArray} that is built will very likely occupy more memory than strictly necessary;
   * to trim memory usage, build using {@code builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,builder,com.google.common.primitives.ImmutableLongArray:builder(),204,206,"/**
 * Returns a new builder instance, initialized with a capacity of 10.
 */
","* Returns a new, empty builder for {@link ImmutableLongArray} instances, with a default initial
   * capacity. The returned builder is not thread-safe.
   *
   * <p><b>Performance note:</b> The {@link ImmutableLongArray} that is built will very likely
   * occupy more memory than necessary; to trim memory usage, build using {@code
   * builder.build().trimmed()}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,ensureRoomFor,com.google.common.primitives.ImmutableLongArray$Builder:ensureRoomFor(int),301,306,"/**
 * Ensures sufficient space in the array by resizing if needed.
 * @param numberToAdd the number of elements to add
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,<init>,com.google.common.primitives.ImmutableLongArray:<init>(long[]),353,355,"/**
 * Constructs an ImmutableLongArray from a long array.
 * @param array The array to create the ImmutableLongArray from.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray:hashCode(),588,596,"/**
 * Calculates the hash code for the array segment.
 * Uses a prime number to generate the hash.
 */
",Returns an unspecified hash code for the contents of this immutable array.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,hashCode,com.google.common.primitives.Longs$LongArrayAsList:hashCode(),825,832,"/**
 * Calculates the hash code based on array elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,hashCode,com.google.common.primitives.UnsignedLong:hashCode(),237,240,"/**
 * Generates a hash code based on the 'value' field.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray:toString(),602,615,"/**
 * Returns a string representation of the array.
 * Returns ""[]"" if empty, otherwise formats elements.
 */
","* Returns a string representation of this array in the same form as {@link
   * Arrays#toString(long[])}, for example {@code ""[1, 2, 3]""}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,readResolve,com.google.common.primitives.ImmutableLongArray:readResolve(),635,637,"/**
 * Resolves object after deserialization. Returns EMPTY if empty, else self.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,<init>,com.google.common.primitives.Ints$IntArrayAsList:<init>(int[]),672,674,"/**
 * Constructs a list backed by the specified array.
 * @param array The array to back the list.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,equals,com.google.common.primitives.Ints$IntArrayAsList:equals(java.lang.Object),752,771,"/**
 * Checks if two IntArrayAsList objects are equal.
 * Compares the underlying arrays and sizes for equality.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toString,com.google.common.primitives.Ints$IntArrayAsList:toString(),782,790,"/**
 * Returns a string representation of the circular buffer.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,toArray,com.google.common.primitives.Ints:toArray(java.util.Collection),627,640,"/**
 * Converts a collection of Numbers to an int array.
 * @param collection Collection of Number objects
 * @return int array representation of the collection
 */
","* Returns an array containing each value of {@code collection}, converted to a {@code int} value
   * in the manner of {@link Number#intValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Integer>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,indexOf,"com.google.common.primitives.Ints:indexOf(int[],int)",160,162,"/**
 * Finds the index of the target element in the array.
 * @param array The array to search.
 * @param target The value to search for.
 * @return Index of target, or -1 if not found.
 */
","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,lastIndexOf,"com.google.common.primitives.Ints:lastIndexOf(int[],int)",211,213,"/**
* Finds the last index of target in array.
* @param array array to search
* @param target value to search for
* @return last index or -1 if not found
*/
","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code int} values, possibly empty
   * @param target a primitive {@code int} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,<init>,com.google.common.primitives.Longs$LongArrayAsList:<init>(long[]),724,726,"/**
 * Constructs a LongArrayAsList with the given array.
 * @param array The long array to wrap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,equals,com.google.common.primitives.Longs$LongArrayAsList:equals(java.lang.Object),804,823,"/**
 * Checks if two LongArrayAsList instances are equal.
 * Compares sizes and elements of the underlying long arrays.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toString,com.google.common.primitives.Longs$LongArrayAsList:toString(),834,842,"/**
 * Returns a string representation of the circular array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,toArray,com.google.common.primitives.Longs:toArray(java.util.Collection),679,692,"/**
 * Converts a collection of Numbers to a long array.
 * @param collection Collection of Number objects
 * @return long array representation of the collection
 */
","* Returns an array containing each value of {@code collection}, converted to a {@code long} value
   * in the manner of {@link Number#longValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Long>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,indexOf,"com.google.common.primitives.Longs:indexOf(long[],long)",121,123,"/**
 * Finds the first index of target in array.
 * @param array array to search
 * @param target value to search for
 * @return index of target or -1 if not found
 */
","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,lastIndexOf,"com.google.common.primitives.Longs:lastIndexOf(long[],long)",172,174,"/**
* Finds the last occurrence of a long value in a long array.
* @param array The array to search.
* @param target The value to search for.
*/","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code long} values, possibly empty
   * @param target a primitive {@code long} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,"com.google.common.primitives.Longs:tryParse(java.lang.String,int)",400,440,"/**
 * Parses a string to a Long in the given radix. Returns null if invalid.
 */","* Parses the specified string as a signed long value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @param radix the radix to use when parsing
   * @return the long value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as a long value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ParseRequest.java,fromString,com.google.common.primitives.ParseRequest:fromString(java.lang.String),30,54,"/**
 * Parses a string to a ParseRequest object, determining radix.
 * @param stringValue String to parse, may include radix prefix.
 * @return ParseRequest object with raw value and radix.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isWrapper,com.google.common.reflect.TypeToken:isWrapper(),554,556,"/**
 * Checks if the runtime type is a wrapper type.
 * Returns true if it is, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,compare,"com.google.common.primitives.Shorts$LexicographicalComparator:compare(short[],short[])",456,466,"/**
 * Compares two short arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,<init>,com.google.common.primitives.Shorts$ShortArrayAsList:<init>(short[]),633,635,"/**
 * Constructs a ShortArrayAsList with the given short array.
 * @param array The short array to wrap in a list.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,equals,com.google.common.primitives.Shorts$ShortArrayAsList:equals(java.lang.Object),708,727,"/**
 * Checks if two ShortArrayAsList instances are equal.
 * Compares size and elements; returns true if equal.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toString,com.google.common.primitives.Shorts$ShortArrayAsList:toString(),738,746,"/**
 * Returns a string representation of the circular array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,hashCode,com.google.common.primitives.Shorts$ShortArrayAsList:hashCode(),729,736,"/**
 * Calculates the hash code based on the array elements.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,toArray,com.google.common.primitives.Shorts:toArray(java.util.Collection),591,604,"/**
 * Converts a collection of Numbers to a short array.
 * Handles ShortArrayAsList for efficiency.
 */
","* Returns an array containing each value of {@code collection}, converted to a {@code short}
   * value in the manner of {@link Number#shortValue}.
   *
   * <p>Elements are copied from the argument collection as if by {@code collection.toArray()}.
   * Calling this method is as thread-safe as calling that method.
   *
   * @param collection a collection of {@code Number} instances
   * @return an array containing the same values as {@code collection}, in the same order, converted
   *     to primitives
   * @throws NullPointerException if {@code collection} or any of its elements is null
   * @since 1.0 (parameter was {@code Collection<Short>} before 12.0)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,indexOf,"com.google.common.primitives.Shorts:indexOf(short[],short)",154,156,"/**
 * Finds the index of the first occurrence of target in array.
 * @param array array to search
 * @param target value to search for
 * @return index of target or -1 if not found
 */
","* Returns the index of the first appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the least index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,lastIndexOf,"com.google.common.primitives.Shorts:lastIndexOf(short[],short)",205,207,"/**
* Finds the last occurrence of a short value in a short array.
* @param array The array to search.
* @param target The value to search for.
*/
","* Returns the index of the last appearance of the value {@code target} in {@code array}.
   *
   * @param array an array of {@code short} values, possibly empty
   * @param target a primitive {@code short} value
   * @return the greatest index {@code i} for which {@code array[i] == target}, or {@code -1} if no
   *     such index exists.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,fromByteArray,com.google.common.primitives.Shorts:fromByteArray(byte[]),335,339,"/**
* Converts a byte array to a short.
* @param bytes byte array containing short representation
* @return short value from the byte array
*/
","* Returns the {@code short} value whose big-endian representation is stored in the first 2 bytes
   * of {@code bytes}; equivalent to {@code ByteBuffer.wrap(bytes).getShort()}. For example, the
   * input byte array {@code {0x54, 0x32}} would yield the {@code short} value {@code 0x5432}.
   *
   * <p>Arguably, it's preferable to use {@link java.nio.ByteBuffer}; that library exposes much more
   * flexibility at little cost in readability.
   *
   * @throws IllegalArgumentException if {@code bytes} has fewer than 2 elements",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,compare,"com.google.common.primitives.SignedBytes$LexicographicalComparator:compare(byte[],byte[])",177,187,"/**
 * Compares two byte arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,getBestComparator,com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder:getBestComparator(),446,466,"/**
 * Returns a comparator for byte arrays, using UnsafeComparator if available.
 */","* Returns the Unsafe-using Comparator, or falls back to the pure-Java implementation if unable
     * to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,fromIntBits,com.google.common.primitives.UnsignedInteger:fromIntBits(int),67,69,"/**
 * Creates an UnsignedInteger from the given integer bits.
 */","* Returns an {@code UnsignedInteger} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 32-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^32 + bits}.
   *
   * <p>To represent unsigned decimal constants, consider {@link #valueOf(long)} instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(int),250,252,"/**
* Converts the integer value to a string in the given radix.
* @param radix The base to use for conversion (e.g., 2 for binary).
*/
","* Returns a string representation of the {@code UnsignedInteger} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,toString,com.google.common.primitives.UnsignedInts:toString(int),376,378,"/**
 * Converts an integer to its string representation.
 * @param x the integer to convert
 * @return the string representation of the integer
 */
","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#toUnsignedString(int)} instead.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts:compare(int,int)",69,72,"/**
 * Compares two integers using a flipped comparison.
 * @param a the first integer
 * @param b the second integer
 * @return -1, 0, or 1 based on the comparison.
 */
","* Compares the two specified {@code int} values, treating them as unsigned values between {@code
   * 0} and {@code 2^32 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Integer#compareUnsigned(int, int)} method instead.
   *
   * @param a the first unsigned {@code int} to compare
   * @param b the second unsigned {@code int} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,fromLongBits,com.google.common.primitives.UnsignedLong:fromLongBits(long),67,70,"/**
 * Creates an UnsignedLong from the given long bit representation.
 */","* Returns an {@code UnsignedLong} corresponding to a given bit representation. The argument is
   * interpreted as an unsigned 64-bit value. Specifically, the sign bit of {@code bits} is
   * interpreted as a normal bit, and all other bits are treated as usual.
   *
   * <p>If the argument is nonnegative, the returned result will be equal to {@code bits},
   * otherwise, the result will be equal to {@code 2^64 + bits}.
   *
   * <p>To represent decimal constants less than {@code 2^63}, consider {@link #valueOf(long)}
   * instead.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs:compare(long,long)",77,80,"/**
 * Compares two longs using flipped values.
 * @param a The first long to compare.
 * @param b The second long to compare.
 * @return The comparison result.
 */
","* Compares the two specified {@code long} values, treating them as unsigned values between {@code
   * 0} and {@code 2^64 - 1} inclusive.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated; use the
   * equivalent {@link Long#compareUnsigned(long, long)} method instead.
   *
   * @param a the first unsigned {@code long} to compare
   * @param b the second unsigned {@code long} to compare
   * @return a negative value if {@code a} is less than {@code b}; a positive value if {@code a} is
   *     greater than {@code b}; or zero if they are equal",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,"com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String,int)",339,363,"/**
 * Parses a string as an unsigned long in the given radix.
 * @param string String to parse.
 * @param radix Radix of the number.
 * @return The unsigned long value.
 */
","* Returns the unsigned {@code long} value represented by a string with the given radix.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String, int)} instead.
   *
   * @param string the string containing the unsigned {@code long} representation to be parsed.
   * @param radix the radix to use while parsing {@code string}
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long} with
   *     the given radix, or if {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}.
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/AbstractInvocationHandler.java,invoke,"com.google.common.reflect.AbstractInvocationHandler:invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",61,87,"/**
 * Invokes a method on the proxy, handling hashCode, equals, toString.
 * @param proxy The proxy instance.
 * @param method The invoked method.
 * @param args Method arguments.
 * @return Method return value or result of handleInvocation.
 */
","* {@inheritDoc}
   *
   * <ul>
   *   <li>{@code proxy.hashCode()} delegates to {@link AbstractInvocationHandler#hashCode}
   *   <li>{@code proxy.toString()} delegates to {@link AbstractInvocationHandler#toString}
   *   <li>{@code proxy.equals(argument)} returns true if:
   *       <ul>
   *         <li>{@code proxy} and {@code argument} are of the same type
   *         <li>and {@link AbstractInvocationHandler#equals} returns true for the {@link
   *             InvocationHandler} of {@code argument}
   *       </ul>
   *   <li>other method calls are dispatched to {@link #handleInvocation}.
   * </ul>",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getPackageName,com.google.common.reflect.ClassPath$ClassInfo:getPackageName(),317,319,"/**
 * Gets the package name for the given class name.
 * @return Package name as a String.
 */
","* Returns the package name of the class, without attempting to load the class.
     *
     * <p>Behaves similarly to {@code class.getPackage().}{@link Package#getName() getName()} but
     * does not require the class (or package) to be loaded.
     *
     * <p>But note that this method may behave differently for a class in the default package: For
     * such classes, this method always returns an empty string. But under some version of Java,
     * {@code class.getPackage().getName()} produces a {@code NullPointerException} because {@code
     * class.getPackage()} returns {@code null}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Reflection.java,getPackageName,com.google.common.reflect.Reflection:getPackageName(java.lang.Class),35,37,"/**
 * Gets the package name of a class.
 * @param clazz Class object to get package name from
 * @return Package name as a String
 */
","* Returns the package name of {@code clazz} according to the Java Language Specification (section
   * 6.7). Unlike {@link Class#getPackage}, this method only parses the class name, without
   * attempting to define the {@link Package} and hence load files.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asByteSource,com.google.common.reflect.ClassPath$ResourceInfo:asByteSource(),246,248,"/**
 * Returns a ByteSource for reading data from this URL.
 */","* Returns a {@link ByteSource} view of the resource from which its bytes can be read.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),102,105,"/**
 * Retrieves an instance of type T, rejecting type variables.
 * @param type TypeToken for the desired instance type
 * @return Instance of type T, or null if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.Invokable$ConstructorInvokable:getGenericParameterTypes(),454,466,"/**
 * Returns the generic parameter types of the constructor.
 * Removes the hidden 'this' parameter if present.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPublic,com.google.common.reflect.Invokable:isPublic(),150,152,"/**
 * Checks if the method is public.
 * @return True if public, false otherwise.
 */
",Returns true if the element is public.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isProtected,com.google.common.reflect.Invokable:isProtected(),155,157,"/**
 * Checks if the method is protected.
 * @return True if protected, false otherwise.
 */
",Returns true if the element is protected.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPrivate,com.google.common.reflect.Invokable:isPrivate(),165,167,"/**
 * Checks if the member is private.
 * @return True if private, false otherwise.
 */
",Returns true if the element is private.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isStatic,com.google.common.reflect.Invokable:isStatic(),170,172,"/**
 * Checks if the method is static.
 * @return True if the method is static, false otherwise.
 */
",Returns true if the element is static.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isFinal,com.google.common.reflect.Invokable:isFinal(),181,183,"/**
 * Checks if the method is final.
 * @return True if final, false otherwise.
 */
","* Returns {@code true} if this method is final, per {@code Modifier.isFinal(getModifiers())}.
   *
   * <p>Note that a method may still be effectively ""final"", or non-overridable when it has no
   * {@code final} keyword. For example, it could be private, or it could be declared by a final
   * class. To tell whether a method is overridable, use {@link Invokable#isOverridable}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isAbstract,com.google.common.reflect.Invokable:isAbstract(),186,188,"/**
 * Checks if the method is abstract.
 * Returns true if abstract, false otherwise.
 */
",Returns true if the method is abstract.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isNative,com.google.common.reflect.Invokable:isNative(),191,193,"/**
 * Checks if the method is native.
 * @return True if native, false otherwise.
 */
",Returns true if the element is native.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isSynchronized,com.google.common.reflect.Invokable:isSynchronized(),196,198,"/**
 * Checks if method is synchronized. Returns true if synchronized, false otherwise.
 */
",Returns true if the method is synchronized.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isVolatile,com.google.common.reflect.Invokable:isVolatile(),201,203,"/**
 * Checks if the method is volatile.
 * @return True if volatile, false otherwise.
 */
",Returns true if the field is volatile.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isTransient,com.google.common.reflect.Invokable:isTransient(),206,208,"/**
 * Checks if the member is transient.
 * @return True if transient, false otherwise.
 */
",Returns true if the field is transient.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,delegate,com.google.common.collect.ForwardingMapEntry:delegate(),57,58,"/**
 * Returns the delegate entry for this map entry.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(com.google.common.reflect.TypeToken),50,53,"/**
 * Retrieves an instance of type T, rejecting type variables.
 * @param type TypeToken for the desired instance type.
 * @return Instance of type T or null if not found.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(com.google.common.reflect.TypeToken,java.lang.Object)",62,67,"/**
 * Puts an instance of the given type, rejecting type variables.
 * @param type The type of the instance to put.
 * @param value The instance to put.
 * @return The put instance.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotations,com.google.common.reflect.Parameter:getAnnotations(),88,91,"/**
 * Returns the annotations for this element. Delegates to getDeclaredAnnotations().
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equals,com.google.common.reflect.TypeResolver$TypeVariableKey:equals(java.lang.Object),563,571,"/**
 * Checks if two TypeVariableKeys are equal.
 * Compares the type variables for equality.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,equalsType,com.google.common.reflect.TypeResolver$TypeVariableKey:equalsType(java.lang.reflect.Type),591,597,"/**
 * Checks if the given type is equal to this type.
 * @param type The type to compare with.
 * @return True if types are equal, false otherwise.
 */
","* Returns true if {@code type} is a {@code TypeVariable} with the same name and declared by the
     * same {@code GenericDeclaration}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver$WildcardCapturer:<init>(),453,455,"/**
 * Default constructor. Initializes with a new AtomicInteger.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,notForTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:notForTypeVariable(),526,528,"/**
 * Creates a WildcardCapturer instance using the provided ID.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,every,com.google.common.reflect.TypeToken:every(java.lang.reflect.Type[]),1054,1057,"/**
 * Checks if all type bounds are met. Returns false if any fail.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,any,com.google.common.reflect.TypeToken:any(java.lang.reflect.Type[]),1059,1062,"/**
 * Creates a Bounds object indicating any bound is true.
 * @param bounds Array of type bounds.
 * @return A Bounds object with the given bounds and true flag.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$ClassSet:readResolve(),800,802,"/**
 * Resolves object after deserialization, returning the class set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,readResolve,com.google.common.reflect.TypeToken$InterfaceSet:readResolve(),753,755,"/**
 * Returns the interfaces of the types this object represents.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.Class),169,171,"/**
 * Creates a TypeToken for the given class.
 * @param type The class to create a TypeToken for.
 * @return A TypeToken representing the given class.
 */
",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,of,com.google.common.reflect.TypeToken:of(java.lang.reflect.Type),174,176,"/**
 * Creates a TypeToken from a given Type.
 * @param type The Type to create a TypeToken for.
 * @return A TypeToken representing the given Type.
 */
",Returns an instance of type token that wraps {@code type}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken:toString(),840,843,"/**
 * Returns a string representation of the runtime type.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$GenericArrayTypeImpl:toString(),229,232,"/**
 * Returns a string representation of the array.
 * Uses Types.toString() for component type.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion:typeName(java.lang.reflect.Type),652,654,"/**
 * Converts a Type object to its string representation.
 * @param type The Type object to convert.
 * @return String representation of the Type.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$1:newArrayType(java.lang.reflect.Type),640,640,"/**
 * Creates a new array type with the given component type.
 * @param componentType The type of elements in the new array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion$1:usedInGenericType(java.lang.reflect.Type),642,642,"/**
 * Returns the type used in a generic type.
 * @param type The generic type to inspect.
 * @return The used type, or null if not applicable.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types$JavaVersion$2:newArrayType(java.lang.reflect.Type),640,640,"/**
 * Creates a new array type with the given component type.
 * @param componentType The type of elements in the new array.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$GenericArrayTypeImpl:equals(java.lang.Object),239,246,"/**
 * Checks if two GenericArrayTypes have the same component type.
 * @param obj The object to compare to.
 * @return True if component types match, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$ParameterizedTypeImpl:equals(java.lang.Object),302,311,"/**
 * Checks if two ParameterizedTypes are equal.
 * Compares raw type, owner type, and actual type arguments.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService:toString(),151,154,"/**
 * Returns a string representation of the object.
 * Includes service name and current state.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:<init>(com.google.common.util.concurrent.Futures$InCompletionOrderState),950,952,"/**
 * Constructs an InCompletionOrderFuture with the given state.
 * @param state The initial state of the future.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isDone,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isDone(),107,110,"/**
 * Checks if the computation is complete.
 * Delegates to the superclass implementation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,isCancelled,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:isCancelled(),112,115,"/**
 * Checks if the operation is cancelled. Delegates to superclass.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getDoneValue,com.google.common.util.concurrent.AbstractFuture:getDoneValue(java.lang.Object),280,304,"/**
 * Retrieves the done value from an object, handling cancellation/failure.
 * @param obj The object to extract the value from.
 * @return The done value or throws an exception if cancelled/failed.
 */
",Unboxes {@code obj}. Assumes that obj is not {@code null} or a {@link DelegatingToFuture}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",441,470,"/**
 * Adds a listener to be executed when the future is complete.
 * @param listener Runnable to execute
 * @param executor Executor for listener execution
 */
","* {@inheritDoc}
   *
   * @since 10.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,maybePropagateCancellationTo,com.google.common.util.concurrent.AbstractFuture:maybePropagateCancellationTo(java.util.concurrent.Future),829,834,"/**
 * Cancels a related future if this future is cancelled.
 * @param related The future to potentially cancel.
 */
","* If this future has been cancelled (and possibly interrupted), cancels (and possibly interrupts)
   * the given future (if available).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addDoneString,com.google.common.util.concurrent.AbstractFuture:addDoneString(java.lang.StringBuilder),936,950,"/**
 * Appends success/failure status and result/cause to StringBuilder.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,get,com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier:get(),48,51,"/**
 * Returns a combined string of the service name and state.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService:toString(),115,118,"/**
 * Returns a string representation of the object.
 * Includes service name and current state.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ListeningDecorator:<init>(java.util.concurrent.ExecutorService),498,500,"/**
 * Constructs a ListeningDecorator with the given ExecutorService.
 * @param delegate The ExecutorService to delegate to.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,submit,com.google.common.util.concurrent.ListeningExecutorService:submit(java.util.concurrent.Callable),51,52,"/**
* Submits a Callable task and returns a ListenableFuture.
*/
","* @return a {@code ListenableFuture} representing pending completion of the task
   * @throws RejectedExecutionException {@inheritDoc}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,"com.google.common.util.concurrent.ServiceManager$ServiceListener:<init>(com.google.common.util.concurrent.Service,java.lang.ref.WeakReference)",785,788,"/**
 * Constructs a ServiceListener with a service and state reference.
 * @param service The service being listened to.
 * @param state Weak reference to the ServiceManagerState.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$1:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
 * Schedules a task for execution and returns a Cancellable object.
 * @param service The service to be scheduled.
 * @param executor Executor for scheduling.
 * @param runnable Task to execute.
 */
",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler$2:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",193,194,"/**
 * Schedules a task for execution and returns a Cancellable object.
 * @param service The service to associate with the task.
 * @param executor Executor for scheduling.
 * @param runnable Task to be executed.
 */
",Schedules the task to run on the provided executor on behalf of the service.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,initializeOrUpdateCancellationDelegate,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:initializeOrUpdateCancellationDelegate(com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule),650,666,"/**
 * Initializes/updates cancellation delegate; returns the delegate.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAll,"com.google.common.util.concurrent.ListeningExecutorService:invokeAll(java.util.Collection,java.time.Duration)",120,124,"/**
 * Executes multiple Callable tasks in parallel with a timeout.
 * @param tasks Collection of Callable tasks to execute.
 * @param timeout Timeout duration for task execution.
 * @return List of Futures representing the task results.
 */
","* Duration-based overload of {@link #invokeAll(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,invokeAny,"com.google.common.util.concurrent.ListeningExecutorService:invokeAny(java.util.Collection,java.time.Duration)",131,136,"/**
 * Executes tasks from collection and returns result of first completed.
 * @param tasks Collection of Callable tasks.
 * @param timeout Timeout duration for task execution.
 * @return Result of the first completed task.
 * @throws InterruptedException, ExecutionException, TimeoutException
 */
","* Duration-based overload of {@link #invokeAny(Collection, long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningExecutorService.java,awaitTermination,com.google.common.util.concurrent.ListeningExecutorService:awaitTermination(java.time.Duration),143,146,"/**
 * Awaits termination for a specified duration.
 * @param timeout The maximum time to wait.
 * @return True if terminated, false otherwise.
 */
","* Duration-based overload of {@link #awaitTermination(long, TimeUnit)}.
   *
   * @since 32.1.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.util.concurrent.Callable,java.time.Duration)",68,72,"/**
 * Schedules a Callable to run after a delay.
 * @param callable The Callable to execute.
 * @param delay Duration of the delay.
 * @return ListenableScheduledFuture object.
 */
","* Duration-based overload of {@link #schedule(Callable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleAtFixedRate,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleAtFixedRate(java.lang.Runnable,java.time.Duration,java.time.Duration)",86,91,"/**
 * Schedules a task to run repeatedly with a fixed period.
 * @param command Runnable to execute
 * @param initialDelay Initial delay before first execution
 * @param period Period between repeated executions
 * @return ListenableScheduledFuture for the scheduled task
 */
","* Duration-based overload of {@link #scheduleAtFixedRate(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.ListeningScheduledExecutorService:scheduleWithFixedDelay(java.lang.Runnable,java.time.Duration,java.time.Duration)",105,110,"/**
 * Schedules a task with a fixed delay between executions.
 * @param command Runnable to execute
 * @param initialDelay Initial delay before first execution
 * @param delay Delay between subsequent executions
 * @return ListenableScheduledFuture for the scheduled task
 */
","* Duration-based overload of {@link #scheduleWithFixedDelay(Runnable, long, long, TimeUnit)}.
   *
   * @since 29.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitRunning,com.google.common.util.concurrent.Service:awaitRunning(java.time.Duration),113,115,"/**
 * Awaits running state, timing out after the specified duration.
 * @param timeout Duration to wait; throws TimeoutException if exceeded.
 */
","* Waits for the {@link Service} to reach the {@linkplain State#RUNNING running state} for no more
   * than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service reaches a state from which it is not possible to
   *     enter the {@link State#RUNNING RUNNING} state. e.g. if the {@code state} is {@code
   *     State#TERMINATED} when this method is called then this will throw an IllegalStateException.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Service.java,awaitTerminated,com.google.common.util.concurrent.Service:awaitTerminated(java.time.Duration),149,151,"/**
 * Awaits termination with a timeout.
 * @param timeout Duration to wait; throws TimeoutException if exceeded.
 */
","* Waits for the {@link Service} to reach a terminal state (either {@link Service.State#TERMINATED
   * terminated} or {@link Service.State#FAILED failed}) for no more than the given time.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if the service has not reached the given state within the deadline
   * @throws IllegalStateException if the service {@linkplain State#FAILED fails}.
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,newProxy,"com.google.common.util.concurrent.TimeLimiter:newProxy(java.lang.Object,java.lang.Class,java.time.Duration)",125,127,"/**
 * Creates a proxy for the given target object, using the given timeout.
 * @param target The target object to proxy.
 * @param interfaceType The interface type of the proxy.
 * @param timeout Timeout duration for the proxy.
 * @return The created proxy object.
 */
","* Returns an instance of {@code interfaceType} that delegates all method calls to the {@code
   * target} object, enforcing the specified time limit on each call. This time-limited delegation
   * is also performed for calls to {@link Object#equals}, {@link Object#hashCode}, and {@link
   * Object#toString}.
   *
   * <p>If the target method call finishes before the limit is reached, the return value or
   * exception is propagated to the caller exactly as-is. If, on the other hand, the time limit is
   * reached, the proxy will attempt to abort the call to the target, and will throw an {@link
   * UncheckedTimeoutException} to the caller.
   *
   * <p>It is important to note that the primary purpose of the proxy object is to return control to
   * the caller when the timeout elapses; aborting the target method call is of secondary concern.
   * The particular nature and strength of the guarantees made by the proxy is
   * implementation-dependent. However, it is important that each of the methods on the target
   * object behaves appropriately when its thread is interrupted.
   *
   * <p>For example, to return the value of {@code target.someMethod()}, but substitute {@code
   * DEFAULT_VALUE} if this method call takes over 50 ms, you can use this code:
   *
   * <pre>
   *   TimeLimiter limiter = . . .;
   *   TargetType proxy = limiter.newProxy(target, TargetType.class, Duration.ofMillis(50));
   *   try {
   *     return proxy.someMethod();
   *   } catch (UncheckedTimeoutException e) {
   *     return DEFAULT_VALUE;
   *   }
   * </pre>
   *
   * @param target the object to proxy
   * @param interfaceType the interface you wish the returned proxy to implement
   * @param timeout the maximum length of time that callers are willing to wait on each method call
   *     to the proxy
   * @return a time-limiting proxy
   * @throws IllegalArgumentException if {@code interfaceType} is a regular class, enum, or
   *     annotation type, rather than an interface
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callWithTimeout(java.util.concurrent.Callable,java.time.Duration)",169,174,"/**
 * Executes a Callable with a timeout.
 * @param callable Callable to execute.
 * @param timeout Timeout duration.
 * @return Result of the Callable, or throws TimeoutException.
 */
","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,java.time.Duration)",220,226,"/**
 * Executes a Callable with a timeout, returning the result.
 * @param callable Callable to execute.
 * @param timeout Duration timeout value.
 * @return Result of the Callable.
 * @throws TimeoutException, ExecutionException
 */
","* Invokes a specified Callable, timing out after the specified time limit. If the target method
   * call finishes before the limit is reached, the return value or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the call to
   * the target, and throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #callWithTimeout(Callable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param callable the Callable to execute
   * @param timeout the maximum length of time to wait
   * @return the result returned by the Callable
   * @throws TimeoutException if the time limit is reached
   * @throws ExecutionException if {@code callable} throws a checked exception
   * @throws UncheckedExecutionException if {@code callable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code callable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runWithTimeout(java.lang.Runnable,java.time.Duration)",261,264,"/**
 * Runs a runnable with a timeout.
 * @param runnable The task to execute.
 * @param timeout The maximum duration to wait.
 * @throws TimeoutException, InterruptedException
 */
","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws InterruptedException if the current thread was interrupted during execution
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.TimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,java.time.Duration)",303,306,"/**
 * Runs a Runnable until completion or timeout.
 * @param runnable Runnable to execute.
 * @param timeout Timeout duration.
 * @throws TimeoutException if the task exceeds the timeout.
 */
","* Invokes a specified Runnable, timing out after the specified time limit. If the target method
   * run finishes before the limit is reached, this method returns or a wrapped exception is
   * propagated. If, on the other hand, the time limit is reached, we attempt to abort the run, and
   * throw a {@link TimeoutException} to the caller.
   *
   * <p>The difference with {@link #runWithTimeout(Runnable, Duration)} is that this method will
   * ignore interrupts on the current thread.
   *
   * @param runnable the Runnable to execute
   * @param timeout the maximum length of time to wait
   * @throws TimeoutException if the time limit is reached
   * @throws UncheckedExecutionException if {@code runnable} throws a {@code RuntimeException}
   * @throws ExecutionError if {@code runnable} throws an {@code Error}
   * @since 28.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,executor,com.google.common.util.concurrent.AbstractScheduledService:executor(),365,394,"/**
 * Creates a single-thread ScheduledExecutorService with a custom thread factory.
 * Returns the created executor.
 */
","* Returns the {@link ScheduledExecutorService} that will be used to execute the {@link #startUp},
   * {@link #runOneIteration} and {@link #shutDown} methods. If this method is overridden the
   * executor will not be {@linkplain ScheduledExecutorService#shutdown shutdown} when this service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}. Subclasses may override this method to supply a custom {@link ScheduledExecutorService}
   * instance. This method is guaranteed to only be called once.
   *
   * <p>By default this returns a new {@link ScheduledExecutorService} with a single thread pool
   * that sets the name of the thread to the {@linkplain #serviceName() service name}. Also, the
   * pool will be {@linkplain ScheduledExecutorService#shutdown() shut down} when the service
   * {@linkplain Service.State#TERMINATED terminates} or {@linkplain Service.State#TERMINATED
   * fails}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService:toString(),406,409,"/**
 * Returns a string representation of the object.
 * Includes service name and current state.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,state,com.google.common.util.concurrent.AbstractService:state(),494,497,"/**
 * Returns the external state from the snapshot.
 * @return The external state.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,<init>,"com.google.common.util.concurrent.AggregateFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,boolean)",67,75,"/**
 * Constructs an AggregateFuture from a collection of futures.
 * @param futures Futures to aggregate.
 * @param allMustSucceed Whether all futures must succeed.
 * @param collectsValues Whether to collect future values.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,addInitialException,com.google.common.util.concurrent.AggregateFuture:addInitialException(java.util.Set),251,274,"/**
 * Adds the initial exception to the seen exceptions set, if not cancelled.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,handleException,com.google.common.util.concurrent.AggregateFuture:handleException(java.lang.Throwable),209,241,"/**
 * Handles an exception, logging it if new or part of all-or-nothing.
 * @param throwable The exception to handle.
 */
","* Fails this future with the given Throwable if {@link #allMustSucceed} is true. Also, logs the
   * throwable if it is an {@link Error} or if {@link #allMustSucceed} is {@code true}, the
   * throwable did not cause this future to fail, and it is the first time we've seen that
   * particular Throwable.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,toString,com.google.common.util.concurrent.AtomicDouble:toString(),254,257,"/**
 * Returns a string representation of the double value.
 */
","* Returns the String representation of the current value.
   *
   * @return the String representation of the current value",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,intValue,com.google.common.util.concurrent.AtomicDouble:intValue(),263,266,"/**
 * Returns the integer value of this BigInteger.
 * @return The integer value.
 */
","* Returns the value of this {@code AtomicDouble} as an {@code int} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,longValue,com.google.common.util.concurrent.AtomicDouble:longValue(),272,275,"/**
 * Returns the long value of this BigInteger.
 * @return The long value.
 */
","* Returns the value of this {@code AtomicDouble} as a {@code long} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,floatValue,com.google.common.util.concurrent.AtomicDouble:floatValue(),281,284,"/**
 * Returns the value of this BigDecimal as a float.
 * Returns the value as a single-precision floating-point number.
 */
","* Returns the value of this {@code AtomicDouble} as a {@code float} after a narrowing primitive
   * conversion.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,doubleValue,com.google.common.util.concurrent.AtomicDouble:doubleValue(),287,290,"/**
 * Returns the double value represented by this object.
 */",Returns the value of this {@code AtomicDouble} as a {@code double}.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,writeObject,com.google.common.util.concurrent.AtomicDouble:writeObject(java.io.ObjectOutputStream),297,301,"/**
 * Writes object to stream. Serializes default fields and the 'get()' value.
 */
","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The current value is emitted (a {@code double}).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,readObject,com.google.common.util.concurrent.AtomicDouble:readObject(java.io.ObjectInputStream),304,308,"/**
* Reads object state from an ObjectInputStream.
* Reads a double from the stream and sets the object's value.
*/
","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDouble:getAndAccumulate(double,java.util.function.DoubleBinaryOperator)",188,192,"/**
 * Applies accumulatorFunction to current value and x, returns result.
 * @param x The value to apply with the accumulator.
 * @param accumulatorFunction Applies function to the current value and x.
 */
","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDouble:accumulateAndGet(double,java.util.function.DoubleBinaryOperator)",203,207,"/**
 * Applies accumulatorFunction to the current value and returns the result.
 * @param x The value to apply to the accumulator.
 */
","* Atomically updates the current value with the results of applying the given function to the
   * current and given values.
   *
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,toString,com.google.common.util.concurrent.AtomicDoubleArray:toString(),278,295,"/**
 * Returns a string representation of the double array.
 * Uses longs for storage, formats each double with commas.
 */","* Returns the String representation of the current values of array.
   *
   * @return the String representation of the current values of array",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,writeObject,com.google.common.util.concurrent.AtomicDoubleArray:writeObject(java.io.ObjectOutputStream),303,314,"/**
 * Writes the object's data to the output stream for serialization.
 */
","* Saves the state to a stream (that is, serializes it).
   *
   * @serialData The length of the array is emitted (int), followed by all of its elements (each a
   *     {@code double}) in the proper order.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAccumulate(int,double,java.util.function.DoubleBinaryOperator)",207,211,"/**
 * Applies accumulatorFunction to the current value and returns the result.
 * @param i index, x value to apply, accumulatorFunction function
 */
","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the previous value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:accumulateAndGet(int,double,java.util.function.DoubleBinaryOperator)",223,227,"/**
 * Accumulates value 'x' using the accumulator function.
 * @param i index, accumulator function is applied at this index.
 * @param x value to accumulate.
 * @return Result of applying accumulator function.
 */
","* Atomically updates the element at index {@code i} with the results of applying the given
   * function to the current and given values.
   *
   * @param i the index to update
   * @param x the update value
   * @param accumulatorFunction the accumulator function
   * @return the updated value
   * @since 31.1",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,removeIfZero,com.google.common.util.concurrent.AtomicLongMap:removeIfZero(java.lang.Object),246,249,"/**
 * Removes the entry with the given key if its value is zero.
 * @param key the key of the entry to remove
 * @return true if an entry was removed, false otherwise
 */
","* Atomically remove {@code key} from the map iff its associated value is 0.
   *
   * @since 20.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,asMap,com.google.common.util.concurrent.AtomicLongMap:asMap(),273,276,"/**
 * Returns a map representing the counts of each element.
 * Uses a cached map if available, otherwise creates a new one.
 */
","Returns a live, read-only view of the map backing this {@code AtomicLongMap}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,replace,"com.google.common.util.concurrent.AtomicLongMap:replace(java.lang.Object,long,long)",343,349,"/**
 * Replaces the entry for key only if current value matches expected.
 * @param key key of entry to replace
 * @param expectedOldValue expected old value
 * @param newValue new value if found
 * @return true if the replacement was successful
 */
","* If {@code (key, expectedOldValue)} is currently in the map, this method replaces {@code
   * expectedOldValue} with {@code newValue} and returns true; otherwise, this method returns false.
   *
   * <p>If {@code expectedOldValue} is zero, this method will succeed if {@code (key, zero)} is
   * currently in the map, or if {@code key} is not in the map at all.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,close,com.google.common.util.concurrent.ClosingFuture:close(),1110,1113,"/**
 * Closes the resource, logging the action and closing closeables.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToFuture,com.google.common.util.concurrent.ClosingFuture:finishToFuture(),1009,1039,"/**
 * Completes the current step and transitions to a Future.
 * Throws exception if called twice or in an invalid state.
 */
","* Marks this step as the last step in the {@code ClosingFuture} pipeline.
   *
   * <p>The returned {@link Future} is completed when the pipeline's computation completes, or when
   * the pipeline is cancelled.
   *
   * <p>All objects the pipeline has captured for closing will begin to be closed asynchronously
   * <b>after</b> the returned {@code Future} is done: the future completes before closing starts,
   * rather than once it has finished.
   *
   * <p>After calling this method, you may not call {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, this method, or any other
   * derivation method on the original {@code ClosingFuture} instance.
   *
   * @return a {@link Future} that represents the final value or exception of the pipeline",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finishToValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:finishToValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,java.util.concurrent.Executor)",1052,1076,"/**
 * Completes the future, providing a value and closer via consumer.
 * @param consumer Consumes the value and closer.
 * @param executor Executor for the listener.
 */
","* Marks this step as the last step in the {@code ClosingFuture} pipeline. When this step is done,
   * {@code receiver} will be called with an object that contains the result of the operation. The
   * receiver can store the {@link ValueAndCloser} outside the receiver for later synchronous use.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, this method again, or
   * any other derivation method on the original {@code ClosingFuture} instance.
   *
   * @param consumer a callback whose method will be called (using {@code executor}) when this
   *     operation is done",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,checkAndUpdateState,"com.google.common.util.concurrent.ClosingFuture:checkAndUpdateState(com.google.common.util.concurrent.ClosingFuture$State,com.google.common.util.concurrent.ClosingFuture$State)",2163,2169,"/**
 * Verifies state transition and updates state if valid.
 * @param oldState The previous state.
 * @param newState The new state to transition to.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,collectOneValue,"com.google.common.util.concurrent.CollectionFuture:collectOneValue(int,java.lang.Object)",60,66,"/**
 * Sets the value at the given index in the values list.
 * @param index Index to set the value at.
 * @param returnValue Value to set at the index.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,handleAllCompleted,com.google.common.util.concurrent.CombinedFuture:handleAllCompleted(),61,67,"/**
 * Executes the task if it exists.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",493,507,"/**
 * Constructs a StackTrace with filtered elements, omitting specific classes.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,com.google.common.util.concurrent.ListenableFutureTask:<init>(java.util.concurrent.Callable),81,83,"/**
 * Constructs a ListenableFutureTask wrapping the given Callable.
 * @param callable The Callable to wrap.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,<init>,"com.google.common.util.concurrent.ListenableFutureTask:<init>(java.lang.Runnable,java.lang.Object)",85,87,"/**
 * Constructs a ListenableFutureTask with the given runnable and result.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,add,"com.google.common.util.concurrent.ExecutionList:add(java.lang.Runnable,java.util.concurrent.Executor)",69,89,"/**
 * Adds a runnable to be executed by the executor.
 * Executes immediately if execution has started.
 */
","* Adds the {@code Runnable} and accompanying {@code Executor} to the list of listeners to
   * execute. If execution has already begun, the listener is executed immediately.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionList.java,execute,com.google.common.util.concurrent.ExecutionList:execute(),102,134,"/**
 * Executes registered listeners, reversing their execution order.
 */","* Runs this execution list, executing all existing pairs in the order they were added. However,
   * note that listeners added after this point may be executed before those previously added, and
   * note that the execution order of all listeners is ultimately chosen by the implementations of
   * the supplied executors.
   *
   * <p>This method is idempotent. Calling it several times in parallel is semantically equivalent
   * to calling it exactly once.
   *
   * @since 10.0 (present in 1.0 as {@code run})",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,"com.google.common.util.concurrent.ExecutionSequencer$TaskNonReentrantExecutor:<init>(java.util.concurrent.Executor,com.google.common.util.concurrent.ExecutionSequencer)",314,318,"/**
 * Constructs a TaskNonReentrantExecutor with a delegate and sequencer.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,<init>,com.google.common.util.concurrent.ExecutionSequencer:<init>(),91,91,"/**
 * Private constructor to prevent direct instantiation.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFluentFuture.java,<init>,com.google.common.util.concurrent.ForwardingFluentFuture:<init>(com.google.common.util.concurrent.ListenableFuture),40,42,"/**
 * Constructs a ForwardingFluentFuture with the given delegate.
 * @param delegate The Future to forward to.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catchingAsync,"com.google.common.util.concurrent.FluentFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",255,260,"/**
 * Catches exceptions of a specific type and applies a fallback function.
 * @param exceptionType Exception type to catch.
 * @param fallback Fallback function to execute on exception.
 * @param executor Executor for the fallback function.
 * @return A FluentFuture that executes the fallback on exception.
 */
","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link AsyncFunction#apply} is not invoked until the primary input has failed, so if
   * the primary input succeeds, it is never invoked. If, during the invocation of {@code fallback},
   * an exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage examples:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class, x -> immediateFuture(0), directExecutor());
   * }
   *
   * <p>The fallback can also choose to propagate the original exception when desired:
   *
   * {@snippet :
   * // Falling back to a zero counter only in case the exception was a
   * // TimeoutException.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catchingAsync(
   *         FetchException.class,
   *         e -> {
   *           if (omitDataOnFetchFailure) {
   *             return immediateFuture(0);
   *           }
   *           throw e;
   *         },
   *         directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code this.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link AsyncFunction} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transformAsync,"com.google.common.util.concurrent.FluentFuture:transformAsync(com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)",336,339,"/**
 * Transforms the future asynchronously using the given function.
 * @param function Async function to transform the value.
 * @param executor Executor for the async function.
 * @return A new FluentFuture containing the transformed value.
 */
","* Returns a new {@code Future} whose result is asynchronously derived from the result of this
   * {@code Future}. If the input {@code Future} fails, the returned {@code Future} fails with the
   * same exception (and the function is not invoked).
   *
   * <p>More precisely, the returned {@code Future} takes its result from a {@code Future} produced
   * by applying the given {@code AsyncFunction} to the result of the original {@code Future}.
   * Example usage:
   *
   * {@snippet :
   * FluentFuture<RowKey> rowKeyFuture = FluentFuture.from(indexService.lookUp(query));
   * ListenableFuture<QueryResult> queryFuture =
   *     rowKeyFuture.transformAsync(dataService::readFuture, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method. (Specifically,
   * {@code directExecutor} functions should avoid heavyweight operations inside {@code
   * AsyncFunction.apply}. Any heavyweight operations should occur in other threads responsible for
   * completing the returned {@code Future}.)
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future and that of the future returned by the chain function. That is, if the returned
   * {@code Future} is cancelled, it will attempt to cancel the other two, and if either of the
   * other two is cancelled, the returned {@code Future} will receive a callback in which it will
   * attempt to cancel itself.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenCompose} and
   * {@link java.util.concurrent.CompletableFuture#thenComposeAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A function to transform the result of this future to the result of the output
   *     future
   * @param executor Executor to run the function in.
   * @return A future that holds result of the function (if the input succeeded) or the original
   *     input's failure (if not)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingDeque:remainingCapacity(),59,62,"/**
 * Returns the remaining capacity delegated to the underlying object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:putFirst(java.lang.Object),64,67,"/**
 * Adds an element to the head of the queue.
 * Delegates to the underlying queue implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,putLast,com.google.common.util.concurrent.ForwardingBlockingDeque:putLast(java.lang.Object),69,72,"/**
* Adds an element to the end of the queue.
* @param e the element to add
* @throws InterruptedException if interrupted while waiting
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerFirst(java.lang.Object,long,java.util.concurrent.TimeUnit)",74,77,"/**
 * Attempts to add an element to the queue's head, waiting if necessary.
 * @param e the element to offer
 * @param timeout wait time
 * @param unit time unit for timeout
 * @return true if successful, false if timeout
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offerLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)",79,82,"/**
 * Offers an element to the queue with a timeout.
 * @param e element to offer
 * @param timeout timeout value
 * @param unit time unit of the timeout
 * @return true if the offer was successful, false otherwise
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeFirst,com.google.common.util.concurrent.ForwardingBlockingDeque:takeFirst(),84,87,"/**
 * Returns and removes the first element from the delegate queue.
 * @throws InterruptedException if interrupted while waiting
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,takeLast,com.google.common.util.concurrent.ForwardingBlockingDeque:takeLast(),89,92,"/**
 * Returns and removes the last element from the delegate queue.
 * @throws InterruptedException if interrupted while waiting
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollFirst,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollFirst(long,java.util.concurrent.TimeUnit)",94,97,"/**
 * Retrieves and removes the first element after a timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout.
 * @return The first element or null if timeout expires.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,pollLast,"com.google.common.util.concurrent.ForwardingBlockingDeque:pollLast(long,java.util.concurrent.TimeUnit)",99,102,"/**
 * Retrieves and removes the last element after a timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout.
 * @return The last element or null if timeout expires.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,put,com.google.common.util.concurrent.ForwardingBlockingDeque:put(java.lang.Object),104,107,"/**
 * Adds an element to the queue.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,offer,"com.google.common.util.concurrent.ForwardingBlockingDeque:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",109,112,"/**
 * Offers an element to the queue, waiting up to timeout if needed.
 * @param e the element to offer
 * @param timeout the timeout
 * @param unit the time unit of the timeout
 * @return True if the offer was successful, false otherwise.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,take,com.google.common.util.concurrent.ForwardingBlockingDeque:take(),114,117,"/**
 * Retrieves and removes the head of the queue, blocking if empty.
 * @return The head element of the queue.
 * @throws InterruptedException if interrupted while waiting.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,poll,"com.google.common.util.concurrent.ForwardingBlockingDeque:poll(long,java.util.concurrent.TimeUnit)",119,122,"/**
 * Retrieves and removes the head of the queue, waiting if necessary.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout.
 * @return Element if available, otherwise null.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection),124,127,"/**
 * Drains elements from this queue to the given collection.
 * @param c the collection to drain to
 * @return the number of elements drained
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingDeque:drainTo(java.util.Collection,int)",129,132,"/**
 * Drains up to maxElements from this queue to the given collection.
 * @param c collection to drain to; @param maxElements max elements to drain
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,delegate,com.google.common.collect.ForwardingDeque:delegate(),51,52,"/**
 * Returns the underlying deque implementation. Abstract method.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,"com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection,int)",51,55,"/**
 * Drains up to maxElements from this queue to the given collection.
 * @param c collection to drain to; @param maxElements max elements to drain
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,drainTo,com.google.common.util.concurrent.ForwardingBlockingQueue:drainTo(java.util.Collection),57,61,"/**
 * Drains all elements from this queue to the given collection.
 * @param c the collection to drain to
 * @return the number of elements drained
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,offer,"com.google.common.util.concurrent.ForwardingBlockingQueue:offer(java.lang.Object,long,java.util.concurrent.TimeUnit)",63,67,"/**
 * Offers an element to the queue, waiting up to timeout.
 * @param e the element to offer
 * @param timeout wait time
 * @param unit time unit for timeout
 * @return true if offered, false if timeout
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,poll,"com.google.common.util.concurrent.ForwardingBlockingQueue:poll(long,java.util.concurrent.TimeUnit)",69,73,"/**
 * Retrieves and removes the head of the queue, waiting if necessary.
 * @param timeout Timeout duration.
 * @param unit Time unit for the timeout.
 * @return Element if available, null if timeout expires.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,put,com.google.common.util.concurrent.ForwardingBlockingQueue:put(java.lang.Object),75,78,"/**
 * Adds an element to the queue.
 * Delegates the put operation to the underlying queue.
 * @param e the element to add
 * @throws InterruptedException if interrupted while waiting
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,remainingCapacity,com.google.common.util.concurrent.ForwardingBlockingQueue:remainingCapacity(),80,83,"/**
 * Returns the remaining capacity, delegating to the underlying object.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,take,com.google.common.util.concurrent.ForwardingBlockingQueue:take(),85,89,"/**
 * Retrieves and removes the head of the queue, blocking if empty.
 * @return The head element of the queue.
 * @throws InterruptedException If interrupted while waiting.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,delegate,com.google.common.util.concurrent.ForwardingListenableFuture:delegate(),39,40,"/**
 * Returns the underlying ListenableFuture implementation.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable),50,53,"/**
 * Submits a Runnable task to the delegate and returns a future.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,"com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.lang.Runnable,java.lang.Object)",55,59,"/**
 * Submits a runnable task and associates it with a result.
 * @param task The runnable task to execute.
 * @param result The result associated with the task.
 * @return ListenableFuture that tracks the task's execution.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordOutputCancellation,com.google.common.util.concurrent.Futures$InCompletionOrderState:recordOutputCancellation(boolean),1009,1017,"/**
 * Records output cancellation, potentially interrupting running futures.
 * @param interruptIfRunning whether to interrupt running futures
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),800,802,"/**
* Constructs a NonCancellationPropagatingFuture with the given delegate.
* @param delegate The listenable future to delegate to.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFuture,com.google.common.util.concurrent.Futures:immediateFuture(java.lang.Object),133,142,"/**
 * Creates a ListenableFuture that fulfills with the given value or null.
 * @param value The value to set on the future, or null.
 * @return A ListenableFuture fulfilled with the given value.
 */
","* Creates a {@code ListenableFuture} which has its value set immediately upon construction. The
   * getters just return the value. This {@code Future} can't be canceled or timed out and its
   * {@code isDone()} method always returns {@code true}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateFailedFuture,com.google.common.util.concurrent.Futures:immediateFailedFuture(java.lang.Throwable),162,166,"/**
 * Creates a failed future immediately with the given throwable.
 * @param throwable The exception to be wrapped in the future.
 * @return A ListenableFuture that fails immediately.
 */
","* Returns a {@code ListenableFuture} which has an exception set immediately upon construction.
   *
   * <p>The returned {@code Future} can't be cancelled, and its {@code isDone()} method always
   * returns {@code true}. Calling {@code get()} will immediately throw the provided {@code
   * Throwable} wrapped in an {@code ExecutionException}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,immediateCancelledFuture,com.google.common.util.concurrent.Futures:immediateCancelledFuture(),174,181,"/**
 * Creates a cancelled ListenableFuture. Returns instance or new one.
 */","* Creates a {@code ListenableFuture} which is cancelled immediately upon construction, so that
   * {@code isCancelled()} always returns {@code true}.
   *
   * @since 14.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getBestValidator,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder:getBestValidator(),190,201,"/**
 * Retrieves the best validator for checked types, or a fallback.
 * Returns the validator or a weak fallback on failure.
 */
","* Returns the ClassValue-using validator, or falls back to the ""weak Set"" implementation if
     * unable to do so.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,newWithCause,"com.google.common.util.concurrent.FuturesGetChecked:newWithCause(java.lang.Class,java.lang.Throwable)",231,249,"/**
 * Creates an exception instance of the given type with the given cause.
 * @param exceptionClass Exception class to instantiate.
 * @param cause The underlying Throwable cause.
 * @return New exception instance.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ImmediateFuture.java,get,"com.google.common.util.concurrent.ImmediateFuture:get(long,java.util.concurrent.TimeUnit)",74,79,"/**
 * Retrieves the value with a specified timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit for the timeout.
 * @return The value or null if timeout occurs.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,toString,com.google.common.util.concurrent.InterruptibleTask$Blocker:toString(),245,248,"/**
 * Returns a string representation of the task.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,<init>,com.google.common.util.concurrent.InterruptibleTask$Blocker:<init>(com.google.common.util.concurrent.InterruptibleTask),229,231,"/**
 * Constructs a Blocker associated with the given InterruptibleTask.
 * @param task The InterruptibleTask to be blocked.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,afterDone,com.google.common.util.concurrent.TrustedListenableFutureTask:afterDone(),89,101,"/**
 * Handles completion, interrupts task if interrupted, clears task.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueueHelper,"com.google.common.util.concurrent.ListenerCallQueue:enqueueHelper(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.Object)",103,111,"/**
 * Enqueues an event to each listener queue.
 * @param event The event to enqueue.
 * @param label Event label.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,dispatch,com.google.common.util.concurrent.ListenerCallQueue:dispatch(),118,123,"/**
 * Dispatches event to each listener in the list.
 */
","* Dispatches all events enqueued prior to this call, serially and in order, for every listener.
   *
   * <p>Note: this method is idempotent and safe to call from any thread",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,<init>,com.google.common.util.concurrent.Monitor:<init>(),348,350,"/**
 * Default constructor. Initializes Monitor with default settings.
 */
","* Creates a monitor with a non-fair (but fast) ordering policy. Equivalent to {@code
   * Monitor(false)}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterInterruptibly,com.google.common.util.concurrent.Monitor:enterInterruptibly(java.time.Duration),441,443,"/**
 * Attempts to enter, interrupting if the given duration elapses.
 * @param time The maximum time to wait, in Duration.
 * @return True if entered successfully, false if interrupted.
 */
","* Enters this monitor. Blocks at most the given time, and may be interrupted.
   *
   * @return whether the monitor was entered
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIfInterruptibly,"com.google.common.util.concurrent.Monitor:enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",759,761,"/**
* Attempts to enter the guard interruptibly within the given duration.
* @param guard the guard to enter
* @param time the maximum time to wait
* @return true if entered, false otherwise
*/
","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied, and may be interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,hasWaiters,com.google.common.util.concurrent.Monitor:hasWaiters(com.google.common.util.concurrent.Monitor$Guard),1006,1008,"/**
 * Checks if a guard has waiters in its queue.
 * @param guard The guard to check.
 * @return True if the guard has waiters, false otherwise.
 */
","* Queries whether any threads are waiting for the given guard to become satisfied. Note that
   * because timeouts and interrupts may occur at any time, a {@code true} return does not guarantee
   * that the guard becoming satisfied in the future will awaken any threads. This method is
   * designed primarily for use in monitoring of the system state.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,isSatisfied,com.google.common.util.concurrent.Monitor:isSatisfied(com.google.common.util.concurrent.Monitor$Guard),1122,1131,"/**
 * Checks if a guard is satisfied, re-signals waiters on error.
 * @param guard The guard to check.
 * @return True if satisfied, throws exception on failure.
 */
","* Exactly like guard.isSatisfied(), but in addition signals all waiting threads in the (hopefully
   * unlikely) event that isSatisfied() throws.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask:<init>(java.lang.Runnable),621,623,"/**
 * Constructs a NeverSuccessfulListenableFutureTask with the given runnable.
 * @param delegate The runnable to execute.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,shutdownAndAwaitTermination,"com.google.common.util.concurrent.MoreExecutors:shutdownAndAwaitTermination(java.util.concurrent.ExecutorService,java.time.Duration)",960,965,"/**
 * Shuts down the executor service and waits for termination.
 * @param service ExecutorService to shut down
 * @param timeout Duration to wait for termination
 * @return True if terminated, false otherwise.
 */
","* Shuts down the given executor service gradually, first disabling new submissions and later, if
   * necessary, cancelling remaining tasks.
   *
   * <p>The method takes the following steps:
   *
   * <ol>
   *   <li>calls {@link ExecutorService#shutdown()}, disabling acceptance of new submitted tasks.
   *   <li>awaits executor service termination for half of the specified timeout.
   *   <li>if the timeout expires, it calls {@link ExecutorService#shutdownNow()}, cancelling
   *       pending tasks and interrupting running tasks.
   *   <li>awaits executor service termination for the other half of the specified timeout.
   * </ol>
   *
   * <p>If, at any step of the process, the calling thread is interrupted, the method calls {@link
   * ExecutorService#shutdownNow()} and returns.
   *
   * <p>For a version of this method that waits <i>indefinitely</i>, use {@link
   * ExecutorService#close}.
   *
   * @param service the {@code ExecutorService} to shut down
   * @param timeout the maximum time to wait for the {@code ExecutorService} to terminate
   * @return {@code true} if the {@code ExecutorService} was terminated successfully, {@code false}
   *     if the call timed out or was interrupted
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,sleepMicrosUninterruptibly,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:sleepMicrosUninterruptibly(long),472,472,"/**
* Sleeps for the given duration in microseconds, uninterruptibly.
* @param micros The number of microseconds to sleep.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,sleepUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:sleepUninterruptibly(java.time.Duration),386,390,"/**
 * Sleeps for the specified duration, blocking even with interrupts.
 * @param sleepFor The duration to sleep for.
 */
","* Invokes {@code unit.}{@link TimeUnit#sleep(long) sleep(sleepFor)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",134,139,"/**
 * Creates a RateLimiter with the given permits per second.
 * @param permitsPerSecond rate limit in permits per second
 * @param stopwatch timing mechanism
 * @return RateLimiter instance
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit,double,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)",200,210,"/**
 * Creates a RateLimiter with specified rate, warmup, and stopwatch.
 * @param permitsPerSecond Rate limit in permits per second.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,setRate,com.google.common.util.concurrent.RateLimiter:setRate(double),256,261,"/**
 * Sets the rate at which permits are issued.
 * @param permitsPerSecond The new rate (must be positive).
 */
","* Updates the stable rate of this {@code RateLimiter}, that is, the {@code permitsPerSecond}
   * argument provided in the factory method that constructed the {@code RateLimiter}. Currently
   * throttled threads will <b>not</b> be awakened as a result of this invocation, thus they do not
   * observe the new rate; only subsequent requests will.
   *
   * <p>Note though that, since each request repays (by waiting, if necessary) the cost of the
   * <i>previous</i> request, this means that the very next request after an invocation to {@code
   * setRate} will not be affected by the new rate; it will pay the cost of the previous request,
   * which is in terms of the previous rate.
   *
   * <p>The behavior of the {@code RateLimiter} is not modified in any other way, e.g. if the {@code
   * RateLimiter} was configured with a warmup period of 20 seconds, it still has a warmup period of
   * 20 seconds after this method invocation.
   *
   * @param permitsPerSecond the new stable rate of this {@code RateLimiter}
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,getRate,com.google.common.util.concurrent.RateLimiter:getRate(),271,275,"/**
 * Gets the rate, synchronizing access to prevent race conditions.
 */
","* Returns the stable rate (as {@code permits per seconds}) with which this {@code RateLimiter} is
   * configured with. The initial value of this is the same as the {@code permitsPerSecond} argument
   * passed in the factory method that produced this {@code RateLimiter}, and it is only updated
   * after invocations to {@linkplain #setRate}.",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SequentialExecutor.java,run,com.google.common.util.concurrent.SequentialExecutor$QueueWorker:run(),180,193,"/**
 * Executes a task from the queue. Re-throws errors to avoid delays.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SettableFuture.java,create,com.google.common.util.concurrent.SettableFuture:create(),41,43,"/**
 * Creates a new SettableFuture.
 * Returns a SettableFuture instance.
 */
",* Creates a new {@code SettableFuture} that can be completed or cancelled by a later method call.,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,getUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:getUninterruptibly(java.util.concurrent.Future,java.time.Duration)",277,284,"/**
 * Gets the future's value uninterruptibly within a Duration.
 * @param future Future to retrieve value from.
 * @param timeout Duration to wait, may saturate.
 * @return Future's value or throws exception if timeout.
 */
","* Invokes {@code future.}{@link Future#get(long, TimeUnit) get(timeout, unit)} uninterruptibly.
   *
   * <p>Similar methods:
   *
   * <ul>
   *   <li>To retrieve a result from a {@code Future} that is already done, use {@link
   *       Futures#getDone Futures.getDone}.
   *   <li>To treat {@link InterruptedException} uniformly with other exceptions, use {@link
   *       Futures#getChecked(Future, Class, long, TimeUnit) Futures.getChecked}.
   *   <li>To get uninterruptibility and remove checked exceptions, use {@link
   *       Futures#getUnchecked}.
   * </ul>
   *
   * @throws ExecutionException if the computation threw an exception
   * @throws CancellationException if the computation was cancelled
   * @throws TimeoutException if the wait timed out
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,findInterruptibleMethods,com.google.common.util.concurrent.SimpleTimeLimiter:findInterruptibleMethods(java.lang.Class),241,249,"/**
 * Finds methods in a class that declare interrupted exceptions.
 * @param interfaceType Class to search for methods.
 * @return Set of methods declaring interrupted exceptions.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,storedPermitsToWaitTime,"com.google.common.util.concurrent.SmoothRateLimiter$SmoothWarmingUp:storedPermitsToWaitTime(double,double)",244,261,"/**
 * Calculates wait time in microseconds based on permits.
 * @param storedPermits Stored permits.
 * @param permitsToTake Permits to take.
 * @return Wait time in microseconds.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,doSetRate,"com.google.common.util.concurrent.SmoothRateLimiter:doSetRate(double,long)",336,342,"/**
 * Sets the rate with given permits per second and current time.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,reserveEarliestAvailable,"com.google.common.util.concurrent.SmoothRateLimiter:reserveEarliestAvailable(int,long)",356,369,"/**
 * Reserves the earliest available ticket.
 * @param requiredPermits Permits to reserve.
 * @param nowMicros Current time in microseconds.
 * @return The earliest available ticket time.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,get,com.google.common.util.concurrent.Striped$PowerOfTwoStriped:get(java.lang.Object),361,364,"/**
* Retrieves the value associated with the given key.
* @param key the key to retrieve the value for
* @return the value associated with the key, or null
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,newCondition,com.google.common.util.concurrent.Striped$WeakSafeLock:newCondition(),322,325,"/**
 * Creates a new condition, wrapping the delegate's with a weak reference.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:readLock(),294,297,"/**
 * Acquires a read lock, wrapping the delegate's lock.
 * @return A WeakSafeLock instance for read access.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,writeLock,com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock:writeLock(),299,302,"/**
 * Returns a write lock, wrapping the delegate's with a WeakSafeLock.
 */",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lazyWeakReadWriteLock,com.google.common.util.concurrent.Striped:lazyWeakReadWriteLock(int),278,280,"/**
 * Creates a striped read-write lock with lazy initialization.
 * @param stripes number of stripes for the lock
 * @return Striped object with lazy weak read-write locks
 */
","* Creates a {@code Striped<ReadWriteLock>} with lazily initialized, weakly referenced read-write
   * locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,lock,com.google.common.util.concurrent.Striped:lock(int),207,209,"/**
 * Creates a Striped lock with the specified number of stripes.
 * @param stripes Number of lock stripes.
 * @return Striped lock instance.
 */
","* Creates a {@code Striped<Lock>} with eagerly initialized, strongly referenced locks. Every lock
   * is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<Lock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,semaphore,"com.google.common.util.concurrent.Striped:semaphore(int,int)",244,246,"/**
 * Creates a Striped semaphore with specified stripes and permits.
 */","* Creates a {@code Striped<Semaphore>} with eagerly initialized, strongly referenced semaphores,
   * with the specified number of permits.
   *
   * @param stripes the minimum number of stripes (semaphores) required
   * @param permits the number of permits in each semaphore
   * @return a new {@code Striped<Semaphore>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,readWriteLock,com.google.common.util.concurrent.Striped:readWriteLock(int),267,269,"/**
 * Creates a Striped read-write lock with the specified number of stripes.
 * @param stripes number of stripes for the lock
 * @return Striped<ReadWriteLock> object
 */
","* Creates a {@code Striped<ReadWriteLock>} with eagerly initialized, strongly referenced
   * read-write locks. Every lock is reentrant.
   *
   * @param stripes the minimum number of stripes (locks) required
   * @return a new {@code Striped<ReadWriteLock>}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java,build,com.google.common.util.concurrent.ThreadFactoryBuilder:build(),158,160,"/**
 * Builds a ThreadFactory instance using the builder pattern.
 * @return A ThreadFactory object.
 */
","* Returns a new thread factory using the options supplied during the building process. After
   * building, it is still possible to change the options used to build the ThreadFactory and/or
   * build again. State is not shared amongst built instances.
   *
   * @return the fully constructed {@link ThreadFactory}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,<init>,com.google.common.util.concurrent.TimeoutFuture$Fire:<init>(com.google.common.util.concurrent.TimeoutFuture),90,92,"/**
 * Sets the timeout future reference.
 * @param timeoutFuture The TimeoutFuture to set.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(com.google.common.util.concurrent.AsyncCallable),36,39,"/**
 * Creates a TrustedListenableFutureTask from an AsyncCallable.
 * @param callable The AsyncCallable to wrap.
 * @return A new TrustedListenableFutureTask.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.util.concurrent.Callable),41,43,"/**
 * Creates a TrustedListenableFutureTask from a Callable.
 * @param callable Callable that produces the result.
 * @return A new TrustedListenableFutureTask.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,create,"com.google.common.util.concurrent.TrustedListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",54,57,"/**
 * Creates a TrustedListenableFutureTask with the given runnable and result.
 */","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.CountDownLatch,java.time.Duration)",81,85,"/**
 * Awaits latch closure, uninterruptibly, with a timeout in Duration.
 */","* Invokes {@code latch.}{@link CountDownLatch#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitUninterruptibly(java.util.concurrent.locks.Condition,java.time.Duration)",122,126,"/**
 * Awaits condition with timeout.
 * @param condition Condition to wait on.
 * @param timeout Timeout duration. Returns true if timeout reached.
 */
","* Invokes {@code condition.}{@link Condition#await(long, TimeUnit) await(timeout, unit)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,long,java.util.concurrent.TimeUnit)",437,443,"/**
 * Attempts to acquire a permit from semaphore without interruption.
 * @param semaphore Semaphore to acquire from
 * @param timeout Timeout duration
 * @param unit Time unit for the timeout
 * @return True if acquired, false otherwise.
 */
","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 18.0",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,int,java.time.Duration)",451,457,"/**
 * Attempts to acquire permits from a semaphore without interruption.
 * @param semaphore Semaphore to acquire permits from.
 * @param permits Number of permits to acquire.
 * @param timeout Timeout duration for acquiring permits.
 * @return True if permits were acquired, false otherwise.
 */
","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(permits,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryLockUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryLockUninterruptibly(java.util.concurrent.locks.Lock,java.time.Duration)",497,501,"/**
 * Attempts to acquire a lock uninterruptibly within a duration.
 * @param lock The lock to acquire.
 * @param timeout The maximum time to wait, in duration units.
 * @return True if the lock was acquired, false otherwise.
 */
","* Invokes {@code lock.}{@link Lock#tryLock(long, TimeUnit) tryLock(timeout, unit)}
   * uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService,java.time.Duration)",552,557,"/**
 * Awaits executor termination, uninterruptibly, with a timeout.
 * @param executor ExecutorService to await termination.
 * @param timeout Duration to wait; returns false if timeout expires.
 */
","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly.
   *
   * @since 30.0 (but only since 33.4.0 in the Android flavor)",,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,execute,com.google.common.util.concurrent.WrappingExecutorService:execute(java.lang.Runnable),93,96,"/**
 * Executes a given task using a delegated executor.
 * @param command The Runnable task to execute.
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable),103,106,"/**
* Submits a task for execution using the delegate's submit method.
* @param task The Runnable task to be executed.
* @return A Future representing the task's execution.
*/
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,submit,"com.google.common.util.concurrent.WrappingExecutorService:submit(java.lang.Runnable,java.lang.Object)",108,112,"/**
 * Submits a task for execution and returns a Future.
 * @param task Runnable task to execute
 * @param result Result value associated with the task
 * @return Future representing the task's execution
 */
",,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/PublicSuffixType.java,fromCode,com.google.thirdparty.publicsuffix.PublicSuffixType:fromCode(char),57,64,"/**
 * Returns the PublicSuffixType matching the given code.
 * @param code The character code to match.
 * @throws IllegalArgumentException if no match is found.
 */
",Returns a PublicSuffixType of the right type according to the given code,,,True,2
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,of,com.google.common.base.Optional:of(java.lang.Object),108,110,"/**
 * Creates an Optional containing the given non-null reference.
 * @param reference The reference to be wrapped in an Optional.
 * @return An Optional containing the reference.
 */
","* Returns an {@code Optional} instance containing the given non-null reference. To have {@code
   * null} treated as {@link #absent}, use {@link #fromNullable} instead.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> no differences.
   *
   * @throws NullPointerException if {@code reference} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Present.java,transform,com.google.common.base.Present:transform(com.google.common.base.Function),73,79,"/**
 * Transforms the value using the given function.
 * @param function Function to apply to the contained value.
 * @return An Optional containing the transformed value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(com.google.common.base.Ticker),119,121,"/**
 * Creates a new, unstarted Stopwatch instance with the given Ticker.
 */","* Creates (but does not start) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,indexOf,"com.google.common.collect.Iterables:indexOf(java.lang.Iterable,com.google.common.base.Predicate)",713,716,"/**
 * Finds the first index of an element matching the predicate.
 * @param iterable Iterable to search.
 * @param predicate Predicate to test each element.
 * @return Index of the first match, or -1 if none found.
 */
","* Returns the index in {@code iterable} of the first element that satisfies the provided {@code
   * predicate}, or {@code -1} if the Iterable has no such elements.
   *
   * <p>More formally, returns the lowest index {@code i} such that {@code
   * predicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no
   * such index.
   *
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,any,"com.google.common.collect.Iterators:any(java.util.Iterator,com.google.common.base.Predicate)",698,701,"/**
 * Checks if any element in the iterator satisfies the predicate.
 * @param iterator Iterator of elements to check.
 * @param predicate Predicate to test each element.
 * @return True if any element matches, false otherwise.
 */
","* Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given
   * predicate.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:treeSetValues(),373,376,"/**
 * Creates a SortedSetMultimapBuilder with natural ordering for values.
 * @return SortedSetMultimapBuilder instance
 */
",Uses a naturally-ordered {@link TreeSet} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,adjacentNodes,com.google.common.graph.AbstractDirectedNetworkConnections:adjacentNodes(),59,62,"/**
 * Returns a set of adjacent nodes, combining predecessors and successors.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",87,95,"/**
 * Creates an ImmutableTable from a stream of objects.
 * @param rowFunction Extracts row key from object.
 * @param columnFunction Extracts column key.
 * @param valueFunction Extracts value.
 * @param mergeFunction Merges values for same row/column.
 */
","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions. If multiple inputs are mapped to the same row
   * and column pair, they will be combined with the specified merging function in encounter order.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, value, or merging functions return null on any input.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Any:<init>(),1037,1039,"/**
 * Constructs a CharMatcher that matches any character.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Ascii:<init>(),1307,1309,"/**
 * Constructs an Ascii CharMatcher with the specified name.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,"com.google.common.base.CharMatcher$BitSetMatcher:<init>(java.util.BitSet,java.lang.String)",1010,1017,"/**
 * Initializes a BitSetMatcher with a BitSet and description.
 * @param table The BitSet to match against.
 * @param description Description of the matcher.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$JavaIsoControl:<init>(),1471,1473,"/**
 * Constructs a JavaIsoControl object, initializing the base class.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$None:<init>(),1134,1136,"/**
 * Private constructor for CharMatcher.none().
 * Calls super constructor with a descriptive name.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Whitespace:<init>(),1250,1252,"/**
 * Constructs a Whitespace matcher with the specified message.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,<init>,"com.google.common.base.SmallCharMatcher:<init>(char[],long,boolean,java.lang.String)",35,40,"/**
 * Constructs a SmallCharMatcher with a char table, filter, and description.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,equivalentTo,com.google.common.base.Equivalence:equivalentTo(java.lang.Object),308,310,"/**
 * Creates a predicate equivalent to the target object.
 * @param target The object to be compared for equivalence.
 * @return A Predicate checking for equivalence to target.
 */
","* Returns a predicate that evaluates to true if and only if the input is equivalent to {@code
   * target} according to this equivalence relation.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,"com.google.common.base.Functions:forMap(java.util.Map,java.lang.Object)",147,150,"/**
 * Creates a Function that transforms keys to values from the map.
 * @param map Source map.
 * @param defaultValue Default value if key is not found.
 * @return Function mapping keys to values.
 */
","* Returns a function which performs a map lookup with a default value. The function created by
   * this method returns {@code defaultValue} for all inputs that do not belong to the map's key
   * set. See also {@link #forMap(Map)}, which throws an exception in this case.
   *
   * <p>Prefer to write the lambda expression {@code k -> map.getOrDefault(k, defaultValue)}
   * instead. Note that it is not serializable unless you explicitly make it {@link Serializable},
   * typically by writing {@code (Function<K, V> & Serializable) k -> map.getOrDefault(k,
   * defaultValue)}.
   *
   * @param map source map that determines the function behavior
   * @param defaultValue the value to return for inputs that aren't map keys
   * @return function that returns {@code map.get(a)} when {@code a} is a key, or {@code
   *     defaultValue} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,compose,"com.google.common.base.Functions:compose(com.google.common.base.Function,com.google.common.base.Function)",249,252,"/**
 * Composes two functions: g and f. Returns a new Function<A, C>.
 */
","* Returns the composition of two functions. For {@code f: A->B} and {@code g: B->C}, composition
   * is defined as the function h such that {@code h(a) == g(f(a))} for each {@code a}.
   *
   * <p><b>JRE users and Android users who opt in to library desugaring:</b> use {@code
   * g.compose(f)} or (probably clearer) {@code f.andThen(g)} instead. Note that it is not
   * serializable.
   *
   * @param g the second function to apply
   * @param f the first function to apply
   * @return the composition of {@code f} and {@code g}
   * @see <a href=""//en.wikipedia.org/wiki/Function_composition"">function composition</a>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Functions.java,forMap,com.google.common.base.Functions:forMap(java.util.Map),127,130,"/**
 * Creates a Function from a Map.
 * @param map The map to create the function from.
 * @return A Function that maps keys to values in the map.
 */
","* Returns a function which performs a map lookup. The returned function throws an {@link
   * IllegalArgumentException} if given a key that does not exist in the map. See also {@link
   * #forMap(Map, Object)}, which returns a default value in this case.
   *
   * <p>Note: if {@code map} is a {@link com.google.common.collect.BiMap BiMap} (or can be one), you
   * can use {@link com.google.common.collect.Maps#asConverter Maps.asConverter} instead to get a
   * function that also supports reverse conversion.
   *
   * <p>If you are okay with {@code null} being returned for an unrecognized key (instead of an
   * exception being thrown), you can use the method reference {@code map::get} instead. Note that
   * it is not serializable unless you explicitly make it {@link Serializable}, typically by writing
   * {@code (Function<K, V> & Serializable) map::get}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/JdkPattern.java,matcher,com.google.common.base.JdkPattern:matcher(java.lang.CharSequence),32,35,"/**
 * Creates a CommonMatcher using the pattern and input CharSequence.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,compile,com.google.common.base.Platform$JdkPatternCompiler:compile(java.lang.String),106,109,"/**
 * Compiles a regex pattern into a CommonPattern object.
 * @param pattern The regex pattern string.
 * @return A CommonPattern instance representing the compiled pattern.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.util.regex.Pattern),207,210,"/**
 * Creates a Splitter using the provided Pattern.
 * @param separatorPattern The regex pattern to split by.
 * @return A Splitter instance.
 */
","* Returns a splitter that considers any subsequence matching {@code pattern} to be a separator.
   * For example, {@code Splitter.on(Pattern.compile(""\r?\n"")).split(entireFile)} splits a string
   * into lines whether it uses DOS-style or UNIX-style line terminators.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(java.lang.String),69,71,"/**
 * Creates a Joiner instance with the specified separator.
 * @param separator Separator string used to join elements.
 * @return A Joiner instance.
 */
",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,on,com.google.common.base.Joiner:on(char),74,76,"/**
 * Creates a Joiner instance using the given character as a separator.
 */
",Returns a joiner which automatically places {@code separator} between consecutive elements.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,useForNull,com.google.common.base.Joiner$MapJoiner:useForNull(java.lang.String),504,506,"/**
 * Configures null value handling for the joiner.
 * @param nullText String to use as replacement for null values
 * @return A new MapJoiner with configured null handling.
 */
","* Returns a map joiner with the same behavior as this one, except automatically substituting
     * {@code nullText} for any provided null keys or values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CommonPattern.java,compile,com.google.common.base.CommonPattern:compile(java.lang.String),36,38,"/**
 * Compiles a pattern string into a CommonPattern object.
 * @param pattern The pattern string to compile.
 * @return A CommonPattern object representing the pattern.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,onPattern,com.google.common.base.Splitter:onPattern(java.lang.String),248,251,"/**
 * Creates a Splitter that splits on the provided regex pattern.
 * @param separatorPattern The regex pattern to split on.
 * @return A Splitter instance.
 */
","* Returns a splitter that considers any subsequence matching a given pattern (regular expression)
   * to be a separator. For example, {@code Splitter.onPattern(""\r?\n"").split(entireFile)} splits a
   * string into lines whether it uses DOS-style or UNIX-style line terminators. This is equivalent
   * to {@code Splitter.on(Pattern.compile(pattern))}.
   *
   * @param separatorPattern the pattern that determines whether a subsequence is a separator. This
   *     pattern may not match the empty string.
   * @return a splitter, with default settings, that uses this pattern
   * @throws IllegalArgumentException if {@code separatorPattern} matches the empty string or is a
   *     malformed expression",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,<init>,com.google.common.base.Predicates$ContainsPatternFromStringPredicate:<init>(java.lang.String),782,784,"/**
* Creates a predicate using a compiled regex pattern from the string.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,contains,com.google.common.base.Predicates:contains(java.util.regex.Pattern),303,306,"/**
 * Returns a predicate that matches char sequences containing the pattern.
 * @param pattern Regex pattern to match.
 * @return Predicate that checks for pattern presence.
 */
","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code pattern.matcher(arg).find()}
   *
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,not,com.google.common.base.Predicates:not(com.google.common.base.Predicate),95,97,"/**
 * Returns a predicate that negates the given predicate.
 * @param predicate Predicate to be negated.
 * @return Negated predicate.
 */
","* Returns a predicate that evaluates to {@code true} if the given predicate evaluates to {@code
   * false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code predicate.negate()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,and,com.google.common.base.Predicates:and(java.lang.Iterable),108,111,"/**
 * Combines multiple predicates into an AND predicate.
 * @param components Predicates to combine; returns new AND predicate.
 */
","* Returns a predicate that evaluates to {@code true} if each of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a false predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code true}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.and(second).and(third).and(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,or,com.google.common.base.Predicates:or(java.lang.Iterable),148,151,"/**
 * Combines multiple predicates with a logical OR operation.
 * @param components Predicates to combine; returns a new combined predicate.
 */
","* Returns a predicate that evaluates to {@code true} if any one of its components evaluates to
   * {@code true}. The components are evaluated in order, and evaluation will be ""short-circuited""
   * as soon as a true predicate is found. It defensively copies the iterable passed in, so future
   * changes to it won't alter the behavior of this predicate. If {@code components} is empty, the
   * returned predicate will always evaluate to {@code false}.
   *
   * <p><b>Discouraged:</b> Prefer using {@code first.or(second).or(third).or(...)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,split,com.google.common.base.Splitter$MapSplitter:split(java.lang.CharSequence),498,514,"/**
 * Splits a CharSequence into key-value pairs and returns a map.
 */","* Splits {@code sequence} into substrings, splits each substring into an entry, and returns an
     * unmodifiable map with each of the entries. For example, {@code
     * Splitter.on(';').trimResults().withKeyValueSeparator(""=>"").split(""a=>b ; c=>b"")} will return
     * a mapping from {@code ""a""} to {@code ""b""} and {@code ""c""} to {@code ""b""}.
     *
     * <p>The returned map preserves the order of the entries from {@code sequence}.
     *
     * @throws IllegalArgumentException if the specified sequence does not split into valid map
     *     entries, or if there are duplicate keys",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,splitToStream,com.google.common.base.Splitter:splitToStream(java.lang.CharSequence),421,424,"/**
 * Splits a CharSequence into a stream of strings.
 * @param sequence The CharSequence to split.
 * @return A Stream of strings from the sequence.
 */
","* Splits {@code sequence} into string components and makes them available through an {@link
   * Stream}, which may be lazily evaluated. If you want an eagerly computed {@link List}, use
   * {@link #splitToList(CharSequence)}.
   *
   * @param sequence the sequence of characters to split
   * @return a stream over the segments split from the parameter
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,memoize,com.google.common.base.Suppliers:memoize(com.google.common.base.Supplier),113,121,"/**
 * Memoizes a supplier, caching its result. Returns delegate if already memoized.
 */","* Returns a supplier which caches the instance retrieved during the first call to {@code get()}
   * and returns that value on subsequent calls to {@code get()}. See: <a
   * href=""http://en.wikipedia.org/wiki/Memoization"">memoization</a>
   *
   * <p>The returned supplier is thread-safe. The delegate's {@code get()} method will be invoked at
   * most once unless the underlying {@code get()} throws an exception. The supplier's serialized
   * form does not contain the cached value, which will be recalculated when {@code get()} is called
   * on the deserialized instance.
   *
   * <p>When the underlying delegate throws an exception then this memoizing supplier will keep
   * delegating calls until it returns valid data.
   *
   * <p>If {@code delegate} is an instance created by an earlier call to {@code memoize}, it is
   * returned directly.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,compose,"com.google.common.base.Suppliers:compose(com.google.common.base.Function,com.google.common.base.Supplier)",53,56,"/**
 * Composes a Supplier from a Function and a Supplier.
 * @param function Function to apply to the Supplier's result.
 * @param supplier Supplier providing the input to the Function.
 * @return New Supplier applying the Function to the Supplier's value.
 */
","* Returns a new supplier which is the composition of the provided function and supplier. In other
   * words, the new supplier's value will be computed by retrieving the value from {@code supplier},
   * and then applying {@code function} to that value. Note that the resulting supplier will not
   * call {@code supplier} or invoke {@code function} until it is called.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Suppliers.java,synchronizedSupplier,com.google.common.base.Suppliers:synchronizedSupplier(com.google.common.base.Supplier),399,403,"/**
 * Wraps a supplier to make it thread-safe.
 * @param delegate The supplier to wrap.
 * @return A thread-safe supplier.
 */
","* Returns a supplier whose {@code get()} method synchronizes on {@code delegate} before calling
   * it, making it thread-safe.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfInstanceOf,"com.google.common.base.Throwables:propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)",100,108,"/**
 * Re-throws the throwable if it's an instance of declaredType.
 * @param throwable The throwable to check. Null if no-op.
 * @param declaredType The class to check against.
 */
","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code
   * declaredType}. Example usage:
   *
   * <pre>
   * try {
   *   someMethodThatCouldThrowAnything();
   * } catch (IKnowWhatToDoWithThisException e) {
   *   handle(e);
   * } catch (Throwable t) {
   *   Throwables.propagateIfInstanceOf(t, IOException.class);
   *   Throwables.propagateIfInstanceOf(t, SQLException.class);
   *   throw Throwables.propagate(t);
   * }
   * </pre>
   *
   * @deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable),146,153,"/**
 * Propagates the given throwable if it's an unchecked exception.
 * @param throwable The exception to potentially propagate.
 */
","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException} or {@link Error}.
   *
   * @deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code
   *     null}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagate,com.google.common.base.Throwables:propagate(java.lang.Throwable),228,235,"/**
 * Propagates a Throwable as a RuntimeException after checking.
 * @param throwable The exception to propagate.
 * @return A RuntimeException wrapping the original Throwable.
 */
","* Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link
   * Error}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.
   *
   * <p>This method always throws an exception. The {@code RuntimeException} return type allows
   * client code to signal to the compiler that statements after the call are unreachable. Example
   * usage:
   *
   * <pre>
   * T doSomething() {
   *   try {
   *     return someMethodThatCouldThrowAnything();
   *   } catch (IKnowWhatToDoWithThisException e) {
   *     return handle(e);
   *   } catch (Throwable t) {
   *     throw Throwables.propagate(t);
   *   }
   * }
   * </pre>
   *
   * @param throwable the Throwable to propagate
   * @return nothing will ever be returned; this return type is only for your convenience, as
   *     illustrated in the example above
   * @deprecated To preserve behavior, use {@code throw e} or {@code throw new RuntimeException(e)}
   *     directly, or use a combination of {@link #throwIfUnchecked} and {@code throw new
   *     RuntimeException(e)}. But consider whether users would be better off if your API threw a
   *     different type of exception. For background on the deprecation, read <a
   *     href=""https://github.com/google/guava/wiki/Why-we-deprecated-Throwables.propagate"">Why we
   *     deprecated {@code Throwables.propagate}</a>.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethods,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethods(java.lang.Class),167,191,"/**
 * Retrieves annotated methods from cache, or throws IllegalArgumentException if needed.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,newCrc32c,com.google.common.hash.Hashing$Crc32cMethodHandles:newCrc32c(),522,530,"/**
 * Creates a new CRC32c checksum object.
 * Uses reflection to invoke the constructor.
 * @return A new CRC32c checksum object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,lazyStackTrace,com.google.common.base.Throwables:lazyStackTrace(java.lang.Throwable),377,384,"/**
 * Returns a lazy stack trace for the given throwable.
 * Uses jlaStackTrace if lazyStackTraceIsLazy() is true.
 */
","* Returns the stack trace of {@code throwable}, possibly providing slower iteration over the full
   * trace but faster iteration over parts of the trace. Here, ""slower"" and ""faster"" are defined in
   * comparison to the normal way to access the stack trace, {@link Throwable#getStackTrace()
   * throwable.getStackTrace()}. Note, however, that this method's special implementation is not
   * available for all platforms and configurations. If that implementation is unavailable, this
   * method falls back to {@code getStackTrace}. Callers that require the special implementation can
   * check its availability with {@link #lazyStackTraceIsLazy()}.
   *
   * <p>The expected (but not guaranteed) performance of the special implementation differs from
   * {@code getStackTrace} in one main way: The {@code lazyStackTrace} call itself returns quickly
   * by delaying the per-stack-frame work until each element is accessed. Roughly speaking:
   *
   * <ul>
   *   <li>{@code getStackTrace} takes {@code stackSize} time to return but then negligible time to
   *       retrieve each element of the returned list.
   *   <li>{@code lazyStackTrace} takes negligible time to return but then {@code 1/stackSize} time
   *       to retrieve each element of the returned list (probably slightly more than {@code
   *       1/stackSize}).
   * </ul>
   *
   * <p>Note: The special implementation does not respect calls to {@link Throwable#setStackTrace
   * throwable.setStackTrace}. Instead, it always reflects the original stack trace from the
   * exception's creation.
   *
   * @since 19.0
   * @deprecated This method is equivalent to {@link Throwable#getStackTrace()} on JDK versions past
   *     JDK 8 and on all Android versions. Use {@link Throwable#getStackTrace()} directly, or where
   *     possible use the {@code java.lang.StackWalker.walk} method introduced in JDK 9.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache:newEntry(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1694,1703,"/**
 * Creates a new reference entry within the appropriate segment.
 * @param key The key for the entry.
 * @param hash The hash code.
 * @param next The next entry in the bucket.
 * @return The newly created ReferenceEntry.
 */
",* This method is a convenience for testing. Code should call {@link Segment#newEntry} directly.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/RemovalNotification.java,create,"com.google.common.cache.RemovalNotification:create(java.lang.Object,java.lang.Object,com.google.common.cache.RemovalCause)",48,51,"/**
 * Creates a new RemovalNotification with the given key, value, and cause.
 */
","* Creates a new {@code RemovalNotification} for the given {@code key}/{@code value} pair, with
   * the given {@code cause} for the removal. The {@code key} and/or {@code value} may be {@code
   * null} if they were already garbage collected.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.HashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
 * Executes action for each entry in the map.
 * @param action Consumer to apply to each element and count.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,forEachEntry,com.google.common.collect.LinkedHashMultiset:forEachEntry(java.util.function.ObjIntConsumer),163,167,"/**
 * Applies the consumer to each entry in the map.
 * @param action The consumer to apply to each element.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,<init>,com.google.common.collect.AbstractSortedMultiset:<init>(),42,45,"/**
 * Constructs a new AbstractSortedMultiset using natural ordering.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,"com.google.common.collect.TreeMultiset:<init>(com.google.common.collect.TreeMultiset$Reference,com.google.common.collect.GeneralRange,com.google.common.collect.TreeMultiset$AvlNode)",121,126,"/**
 * Constructs a TreeMultiset with specified range and root reference.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,subMultiset,"com.google.common.collect.TreeMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,112,"/**
 * Returns a sub-multiset between two elements (inclusive/exclusive).
 * @param fromElement Start element (inclusive)
 * @param fromBoundType Bound type for the start element
 * @param toElement End element (exclusive)
 * @param toBoundType Bound type for the end element
 * @return Sub-multiset
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,toMultiset,"com.google.common.collect.Multisets:toMultiset(java.util.function.Function,java.util.function.ToIntFunction,java.util.function.Supplier)",88,94,"/**
 * Creates a {@link Collector} that accumulates elements into a multiset.
 * @param elementFunction Maps element to multiset element.
 * @param countFunction Returns the count for each element.
 * @param multisetSupplier Creates the multiset to store elements.
 */
","* Returns a {@code Collector} that accumulates elements into a multiset created via the specified
   * {@code Supplier}, whose elements are the result of applying {@code elementFunction} to the
   * inputs, with counts equal to the result of applying {@code countFunction} to the inputs.
   * Elements are added in encounter order.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the element
   * will be added more than once, with the count summed over all appearances of the element.
   *
   * <p>Note that {@code stream.collect(toMultiset(function, e -> 1, supplier))} is equivalent to
   * {@code stream.map(function).collect(Collectors.toCollection(supplier))}.
   *
   * <p>To collect to an {@link ImmutableMultiset}, use {@link
   * ImmutableMultiset#toImmutableMultiset}.
   *
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,toMultimap,"com.google.common.collect.Multimaps:toMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",115,125,"/**
 * Creates a Multimap collector.
 * @param keyFunction Extracts the key from an element.
 * @param valueFunction Extracts the value from an element.
 * @param multimapSupplier Supplies the Multimap to collect into.
 * @return Collector that populates the supplied Multimap.
 */
","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. The keys and values of the entries are the result of applying the provided
   * mapping functions to the input elements, accumulated in the encounter order of the stream.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             toMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1),
   *                  MultimapBuilder.treeKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.put('b', ""anana"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""pple"");
   *     FIRST_LETTER_MULTIMAP.put('a', ""sparagus"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""arrot"");
   *     FIRST_LETTER_MULTIMAP.put('c', ""herry"");
   * }
   * }
   *
   * <p>To collect to an {@link ImmutableMultimap}, use either {@link
   * ImmutableSetMultimap#toImmutableSetMultimap} or {@link
   * ImmutableListMultimap#toImmutableListMultimap}.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,flatteningToMultimap,"com.google.common.collect.Multimaps:flatteningToMultimap(java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",160,171,"/**
 * Creates a collector that flattens a stream into a Multimap.
 * @param keyFunction Extracts the key from each element.
 * @param valueFunction Returns a stream of values for each element.
 * @param multimapSupplier Provides a new Multimap instance.
 * @return Collector to flatten stream to a Multimap.
 */
","* Returns a {@code Collector} accumulating entries into a {@code Multimap} generated from the
   * specified supplier. Each input element is mapped to a key and a stream of values, each of which
   * are put into the resulting {@code Multimap}, in the encounter order of the stream and the
   * encounter order of the streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c),
   *                  MultimapBuilder.linkedHashKeys().arrayListValues()::build));
   *
   * // is equivalent to
   *
   * static final ListMultimap<Character, Character> FIRST_LETTER_MULTIMAP;
   *
   * static {
   *     FIRST_LETTER_MULTIMAP = MultimapBuilder.linkedHashKeys().arrayListValues().build();
   *     FIRST_LETTER_MULTIMAP.putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('p', 'p', 'l', 'e'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'));
   *     FIRST_LETTER_MULTIMAP.putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'));
   *     FIRST_LETTER_MULTIMAP.putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'));
   * }
   * }
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesSpliterator,com.google.common.collect.AbstractTable:valuesSpliterator(),201,203,"/**
 * Returns a Spliterator for the values in this table.
 * Uses cellSpliterator() and maps to Cell::getValue.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$TransformedCollection:spliterator(),289,292,"/**
* Returns a Spliterator for the collection.
* Delegates to the underlying collection's spliterator,
* applying the given function.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,keySpliterator,com.google.common.collect.ImmutableMap:keySpliterator(),1085,1087,"/**
 * Returns a Spliterator over the keys of the entry set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapValues.java,spliterator,com.google.common.collect.ImmutableMapValues:spliterator(),66,69,"/**
 * Returns a Spliterator for the map's values.
 * Uses CollectSpliterators to transform entries to values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$NavigableAsMapView:entrySpliterator(),1100,1103,"/**
 * Returns a Spliterator for entries, applying a function to each.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,spliterator,com.google.common.collect.Multimaps$Keys:spliterator(),1761,1764,"/**
 * Returns a Spliterator over the keys in the multimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransformedTable:cellSpliterator(),490,493,"/**
 * Creates a Spliterator for cells, applying a transformation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellSpliterator,com.google.common.collect.Tables$TransposeTable:cellSpliterator(),322,325,"/**
 * Returns a Spliterator for the cells, transposed using Tables::transposeCell.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,spliterator,com.google.common.collect.Collections2$FilteredCollection:spliterator(),179,182,"/**
 * Returns a spliterator for the elements of this collection.
 * Filters elements using the provided predicate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,removeAll,com.google.common.collect.Collections2$FilteredCollection:removeAll(java.util.Collection),200,203,"/**
* Removes all elements from the collection if they are contained.
* @param collection Collection containing elements to be removed.
* @return True if the collection was modified, false otherwise.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,retainAll,com.google.common.collect.Collections2$FilteredCollection:retainAll(java.util.Collection),205,208,"/**
 * Retains elements present in the specified collection.
 * @param collection Collection to check against.
 * @return True if the list was modified.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,transform,"com.google.common.collect.Collections2:transform(java.util.Collection,com.google.common.base.Function)",259,262,"/**
 * Transforms a collection using a function.
 * @param fromCollection Source collection.
 * @param function Function to apply to each element.
 * @return Transformed collection of type T.
 */
","* Returns a collection that applies {@code function} to each element of {@code fromCollection}.
   * The returned collection is a live view of {@code fromCollection}; changes to one affect the
   * other.
   *
   * <p>The returned collection's {@code add()} and {@code addAll()} methods throw an {@link
   * UnsupportedOperationException}. All other collection methods are supported, as long as {@code
   * fromCollection} supports them.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code fromCollection} is.
   *
   * <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection
   * and use the copy.
   *
   * <p>If the input {@code Collection} is known to be a {@code List}, consider {@link
   * Lists#transform}. If only an {@code Iterable} is available, use {@link Iterables#transform}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#map Stream.map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:contains(java.lang.Object),1436,1439,"/**
 * Checks if the map contains the specified element.
 * @param o element to check for
 * @return true if the element is contained, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,contains,com.google.common.collect.Collections2$FilteredCollection:contains(java.lang.Object),154,162,"/**
 * Checks if the element is present and satisfies the predicate.
 * @param element the element to check
 * @return true if present and satisfies the predicate, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,contains,"com.google.common.collect.Iterables:contains(java.lang.Iterable,java.lang.Object)",141,147,"/**
 * Checks if an iterable contains a specific element.
 * @param iterable Iterable to search.
 * @param element Element to search for.
 * @return True if the element is found, false otherwise.
 */
","* Returns {@code true} if {@code iterable} contains any element {@code o} for which {@code
   * Objects.equals(o, element)} would return {@code true}. Otherwise returns {@code false}, even in
   * cases where {@link Collection#contains} might throw {@link NullPointerException} or {@link
   * ClassCastException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$AsMapView:getOrDefault(java.lang.Object,java.lang.Object)",921,930,"/**
 * Returns value for key, or defaultValue if key is not found.
 * @param key The key to search for.
 * @param defaultValue Value if key is absent.
 * @return Value or defaultValue.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,getOrDefault,"com.google.common.collect.Maps$NavigableAsMapView:getOrDefault(java.lang.Object,java.lang.Object)",1079,1088,"/**
 * Returns the value for key, or defaultValue if not found.
 * @param key The key to look for.
 * @param defaultValue Value to return if key is not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$RowMap$EntrySet:contains(java.lang.Object),849,858,"/**
 * Checks if the map contains the given entry.
 * @param obj The entry to check.
 * @return True if the map contains the entry, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,com.google.common.collect.ContiguousSet:headSet(java.lang.Object),152,155,"/**
 * Returns a view of the set containing elements less than toElement.
 * @param toElement the exclusive upper bound
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,headSet,"com.google.common.collect.ContiguousSet:headSet(java.lang.Object,boolean)",160,164,"/**
 * Returns a view of the set containing elements less than toElement.
 * @param toElement Element to end the set; exclusive if inclusive is false.
 * @param inclusive Whether to include toElement in the returned set.
 */
",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,com.google.common.collect.ContiguousSet:tailSet(java.lang.Object),187,190,"/**
 * Returns a view of the set whose elements are >= fromElement.
 * @param fromElement the lower bound element
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,tailSet,"com.google.common.collect.ContiguousSet:tailSet(java.lang.Object,boolean)",195,199,"/**
 * Returns a view of the set containing elements >= fromElement.
 * @param fromElement The low endpoint of the returned set.
 * @param inclusive Whether to include fromElement.
 */
",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,offer,com.google.common.collect.EvictingQueue:offer(java.lang.Object),91,95,"/**
 * Adds an element to the queue if it can.
 * @param e the element to add
 * @return true if added, false otherwise.
 */
","* Adds the given element to this queue. If the queue is currently full, the element at the head
   * of the queue is evicted to make room.
   *
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,<init>,"com.google.common.collect.FilteredEntrySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
* Constructs a FilteredEntrySetMultimap from a SetMultimap and predicate.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,<init>,"com.google.common.collect.FilteredKeyListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",32,34,"/**
 * Creates a FilteredKeyListMultimap with a key predicate.
 * @param unfiltered The original multimap.
 * @param keyPredicate Predicate to filter keys.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,<init>,"com.google.common.collect.FilteredKeySetMultimap:<init>(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",34,36,"/**
 * Creates a FilteredKeySetMultimap from a SetMultimap and predicate.
 * @param unfiltered The SetMultimap to filter.
 * @param keyPredicate Predicate to filter keys.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createValues,com.google.common.collect.FilteredEntryMultimap:createValues(),134,137,"/**
 * Creates a collection of values for the multimap.
 * @return FilteredMultimapValues instance representing the values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createValues,com.google.common.collect.FilteredKeyMultimap:createValues(),212,215,"/**
 * Creates a collection of values for this multimap.
 * @return FilteredMultimapValues object representing the values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forEach,com.google.common.collect.HashBiMap$Inverse:forEach(java.util.function.BiConsumer),739,743,"/**
 * Performs the given action on each key-value pair, reversing key/value order.
 * @param action The BiConsumer to execute for each entry.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,forEach,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:forEach(java.util.function.Consumer),72,75,"/**
* Applies the given action to each entry in the map.
* @param action The consumer to apply to each entry.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,forEach,com.google.common.collect.ImmutableSortedMap$1EntrySet:forEach(java.util.function.Consumer),416,423,"/**
 * Applies the consumer to each element in the collection.
 * @param consumer The consumer to apply to each element.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,forEach,com.google.common.collect.JdkBackedImmutableMap:forEach(java.util.function.BiConsumer),111,115,"/**
 * Applies the given action to each entry in the map.
 * @param action BiConsumer to apply to each key-value pair.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,forEach,com.google.common.collect.RegularImmutableAsList:forEach(java.util.function.Consumer),61,65,"/**
 * Applies the given action to each element of the list.
 * @param action The consumer to apply to each element.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:forEach(java.util.function.Consumer),269,272,"/**
* Applies the consumer to each entry in the map.
* @param action The consumer to apply to each entry.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,forEach,com.google.common.collect.RegularImmutableSortedSet:forEach(java.util.function.Consumer),85,88,"/**
 * Performs the given action on each element of the list.
 * @param action The consumer to apply to each element.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderKeysBy,com.google.common.collect.ImmutableListMultimap$Builder:orderKeysBy(java.util.Comparator),317,322,"/**
 * Orders the keys using the provided comparator.
 * @param keyComparator Comparator for ordering keys.
 * @return This builder instance for chaining.
 */
","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderKeysBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderKeysBy(java.util.Comparator),368,373,"/**
* Orders keys using the provided comparator.
* @param keyComparator Comparator for ordering keys.
* @return This builder instance for chaining.
*/
","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,orderValuesBy,com.google.common.collect.ImmutableListMultimap$Builder:orderValuesBy(java.util.Comparator),329,334,"/**
 * Orders values by the provided comparator.
 * @param valueComparator Comparator for ordering values.
 * @return This builder, for chaining.
 */
","* {@inheritDoc}
     *
     * @since 8.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,orderValuesBy,com.google.common.collect.ImmutableSetMultimap$Builder:orderValuesBy(java.util.Comparator),386,391,"/**
 * Orders the values by the given comparator.
 * @param valueComparator Comparator for ordering values.
 * @return This builder for chaining.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,add,com.google.common.collect.ImmutableSortedMultiset$Builder:add(java.lang.Object),472,477,"/**
 * Adds an element to the list and returns the builder.
 * @param element The element to add.
 * @return This builder instance for chaining.
 */
","* Adds {@code element} to the {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addCopies,"com.google.common.collect.ImmutableSortedMultiset$Builder:addCopies(java.lang.Object,int)",504,509,"/**
 * Adds specified number of copies of an element to the builder.
 * @param element Element to add.
 * @param occurrences Number of copies to add.
 * @return This builder instance.
 */
","* Adds a number of occurrences of an element to this {@code ImmutableSortedMultiset}.
     *
     * @param element the element to add
     * @param occurrences the number of occurrences of the element to add. May be zero, in which
     *     case no change will be made.
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code occurrences} is negative, or if this operation
     *     would result in more than {@link Integer#MAX_VALUE} occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,setCount,"com.google.common.collect.ImmutableSortedMultiset$Builder:setCount(java.lang.Object,int)",521,526,"/**
* Sets the count for a given element and returns the builder.
* @param element The element to set the count for.
* @param count The count to set.
*/
","* Adds or removes the necessary occurrences of an element such that the element attains the
     * desired count.
     *
     * @param element the element to add or remove occurrences of
     * @param count the desired count of the element in this multiset
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,toImmutableSortedMultiset,com.google.common.collect.ImmutableSortedMultiset:toImmutableSortedMultiset(java.util.Comparator),70,73,"/**
 * Creates a collector for ImmutableSortedMultiset using a comparator.
 * @param comparator Comparator to sort elements in the multiset.
 */
","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements are sorted by the specified comparator.
   *
   * <p><b>Warning:</b> {@code comparator} should be <i>consistent with {@code equals}</i> as
   * explained in the {@link Comparator} documentation.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",63,66,"/**
 * Returns a tail set from element 'fromElement', inclusive.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,headSet,com.google.common.collect.ImmutableSortedSet:headSet(java.lang.Object),641,644,"/**
 * Returns a view of the sorted set containing elements up to (but not including) toElement.
 * @param toElement the element up to which the set is returned
 */
","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#headSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code toElement} greater than an earlier {@code
   * toElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,headSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",52,55,"/**
 * Returns a head set of elements up to `toElement`.
 * @param toElement Element to end the head set at.
 * @param inclusive Whether `toElement` is inclusive.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,tailSet,com.google.common.collect.ImmutableSortedSet:tailSet(java.lang.Object),694,697,"/**
 * Returns a sorted set containing elements from {@code fromElement} to the end.
 * @param fromElement the lower bound (inclusive) of the returned set
 */","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#tailSet} documentation states that a subset of a subset throws an
   * {@link IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollFirstEntry(),3325,3328,"/**
 * Removes and returns the first entry matching the predicate.
 * @return The first matching entry or null if none exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$FilteredEntryNavigableMap:pollLastEntry(),3330,3333,"/**
 * Retrieves and removes the last entry matching the predicate.
 * @return Entry if found, otherwise null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollFirst,com.google.common.collect.Sets$FilteredNavigableSet:pollFirst(),1376,1379,"/**
 * Retrieves and removes the first element matching the predicate.
 * @return The first matching element or null if none exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,pollLast,com.google.common.collect.Sets$FilteredNavigableSet:pollLast(),1381,1384,"/**
 * Retrieves and removes the last element matching the predicate.
 * @return The last matching element, or null if none found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,cycle,com.google.common.collect.FluentIterable:cycle(),377,379,"/**
 * Cycles the elements of the iterable infinitely.
 * Returns a FluentIterable containing cycled elements.
 */
","* Returns a fluent iterable whose {@code Iterator} cycles indefinitely over the elements of this
   * fluent iterable.
   *
   * <p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code
   * remove()} is called, subsequent cycles omit the removed element, which is no longer in this
   * fluent iterable. The iterator's {@code hasNext()} method returns {@code true} until this fluent
   * iterable is empty.
   *
   * <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
   * should use an explicit {@code break} or be certain that you will eventually remove all the
   * elements.
   *
   * <p><b>{@code Stream} equivalent:</b> if the source iterable has only a single element {@code
   * e}, use {@code Stream.generate(() -> e)}. Otherwise, collect your stream into a collection and
   * use {@code Stream.generate(() -> collection).flatMap(Collection::stream)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(com.google.common.base.Predicate),414,416,"/**
 * Filters the iterable based on the provided predicate.
 * @param predicate Predicate to apply for filtering elements.
 * @return A new FluentIterable containing filtered elements.
 */
","* Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent
   * iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#filter} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,filter,"com.google.common.collect.Iterables:filter(java.lang.Iterable,java.lang.Class)",614,620,"/**
 * Filters an iterable to contain only elements of a specific type.
 * @param unfiltered Iterable to filter.
 * @param desiredType Class of the desired type.
 * @return Filtered iterable containing only elements of desiredType.
 */
","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}. The returned iterable's iterator does not support {@code remove()}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transform,com.google.common.collect.FluentIterable:transform(com.google.common.base.Function),479,482,"/**
 * Transforms elements using the provided function.
 * @param function Function to apply to each element.
 * @return A new FluentIterable with transformed elements.
 */
","* Returns a fluent iterable that applies {@code function} to each element of this fluent
   * iterable.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this iterable's
   * iterator does. After a successful {@code remove()} call, this fluent iterable no longer
   * contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#map}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,peekingIterator,com.google.common.collect.Iterators:peekingIterator(java.util.Iterator),1263,1273,"/**
 * Returns a PeekingIterator from the given iterator.
 * Creates a new one if the iterator isn't already a PeekingIterator.
 */
","* Returns a {@code PeekingIterator} backed by the given iterator.
   *
   * <p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the
   * iteration, and hence return the same object each time. A subsequent call to {@code next} is
   * guaranteed to return the same object again. For example:
   *
   * {@snippet :
   * PeekingIterator<String> peekingIterator =
   *     Iterators.peekingIterator(Iterators.forArray(""a"", ""b""));
   * String a1 = peekingIterator.peek(); // returns ""a""
   * String a2 = peekingIterator.peek(); // also returns ""a""
   * String a3 = peekingIterator.next(); // also returns ""a""
   * }
   *
   * <p>Any structural changes to the underlying iteration (aside from those performed by the
   * iterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined
   * state.
   *
   * <p>The returned iterator does not support removal after peeking, as explained by {@link
   * PeekingIterator#remove()}.
   *
   * <p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be
   * returned to the caller, although this is neither guaranteed to occur nor required to be
   * consistent. For example, this method <i>might</i> choose to pass through recognized
   * implementations of {@code PeekingIterator} when the behavior of the implementation is known to
   * meet the contract guaranteed by this method.
   *
   * <p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each
   * individual iterator as it is generated.
   *
   * @param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this
   *     iterator, so users should cease making direct calls to it after calling this method.
   * @return a peeking iterator backed by that iterator. Apart from the additional {@link
   *     PeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,keyIterator,com.google.common.collect.ImmutableEnumMap:keyIterator(),61,64,"/**
* Returns an unmodifiable iterator over the keys of the map.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,iterator,com.google.common.collect.ImmutableEnumSet:iterator(),72,75,"/**
 * Returns an unmodifiable iterator over the elements of this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,iterator,com.google.common.collect.Iterables$UnmodifiableIterable:iterator(),105,108,"/**
 * Returns an unmodifiable iterator for the iterable.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$UnmodifiableMultiset:iterator(),170,173,"/**
 * Returns an unmodifiable iterator backed by the delegate iterator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingIterator(),2037,2040,"/**
 * Returns an iterator that traverses the set in descending order.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeAll,"com.google.common.collect.Iterables:removeAll(java.lang.Iterable,java.util.Collection)",159,164,"/**
 * Removes all elements from iterable or collection.
 * @param removeFrom Iterable/Collection to remove from.
 * @param elementsToRemove Elements to remove. Returns true if changed.
 */
","* Removes, from an iterable, every element that belongs to the provided collection.
   *
   * <p>This method calls {@link Collection#removeAll} if {@code iterable} is a collection, and
   * {@link Iterators#removeAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRemove the elements to remove
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAllImpl,"com.google.common.collect.Sets:removeAllImpl(java.util.Set,java.util.Collection)",2128,2145,"/**
 * Removes all elements from the set that are also in the collection.
 * Uses Iterators.removeAll for efficiency if collection is a Set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnKeySet:removeAll(java.util.Collection),717,734,"/**
 * Removes all entries from the map whose keys are contained in the given collection.
 * @param c collection of keys to remove
 * @return true if the map was modified
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:removeAll(java.util.Collection),1039,1044,"/**
 * Removes all elements from the collection that are also in the given collection.
 * @param c Collection of elements to remove.
 * @return True if the collection was modified.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,removeIf,"com.google.common.collect.Iterables:removeIf(java.lang.Iterable,com.google.common.base.Predicate)",199,206,"/**
 * Removes elements from iterable if predicate is true.
 * @param removeFrom Iterable to remove from.
 * @param predicate Predicate to test elements. Returns true if removed.
 */
","* Removes, from an iterable, every element that satisfies the provided predicate.
   *
   * <p>Removals may or may not happen immediately as each element is tested against the predicate.
   * The behavior of this method is not specified if {@code predicate} is dependent on {@code
   * removeFrom}.
   *
   * <p><b>Java 8+ users:</b> if {@code removeFrom} is a {@link Collection}, use {@code
   * removeFrom.removeIf(predicate)} instead.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param predicate a predicate that determines whether an element should be removed
   * @return {@code true} if any elements were removed from the iterable
   * @throws UnsupportedOperationException if the iterable does not support {@code remove()}.
   * @since 2.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,retainAll,"com.google.common.collect.Iterables:retainAll(java.lang.Iterable,java.util.Collection)",176,181,"/**
 * Retains the elements of the specified collection in this collection.
 * @param removeFrom Iterable from which elements are retained.
 * @param elementsToRetain Collection of elements to retain.
 * @return True if the collection was modified.
 */
","* Removes, from an iterable, every element that does not belong to the provided collection.
   *
   * <p>This method calls {@link Collection#retainAll} if {@code iterable} is a collection, and
   * {@link Iterators#retainAll} otherwise.
   *
   * @param removeFrom the iterable to (potentially) remove elements from
   * @param elementsToRetain the elements to retain
   * @return {@code true} if any element was removed from {@code iterable}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:retainAll(java.util.Collection),1046,1051,"/**
 * Retains all elements of the collection that are also in c.
 * Uses Iterators.retainAll for the actual retention logic.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.AbstractMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Adds all elements from an iterable to the map's value for the given key.
* @param key the key to associate with the values
* @param values the iterable of values to add
* @return true if values were added, false otherwise
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardAddAll,com.google.common.collect.ForwardingCollection:standardAddAll(java.util.Collection),159,161,"/**
* Adds all elements from the given collection to this collection.
* @param collection Collection to add elements from.
* @return True if all elements were added, false otherwise.
*/
","* A sensible definition of {@link #addAll} in terms of {@link #add}. If you override {@link
   * #add}, you may wish to override {@link #addAll} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,addAll,"com.google.common.collect.Iterables:addAll(java.util.Collection,java.lang.Iterable)",325,333,"/**
 * Adds all elements from the given iterable to the collection.
 * @param addTo Collection to add elements to.
 * @param elementsToAdd Iterable containing elements to add.
 * @return True if the collection was modified.
 */
","* Adds all elements in {@code iterable} to {@code collection}.
   *
   * @return {@code true} if {@code collection} was modified as a result of this operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.util.Iterator),147,153,"/**
 * Creates an ArrayList from an Iterator of elements.
 * @param elements Iterator providing elements for the list
 * @return New ArrayList containing elements from the iterator
 */
","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterator)} instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.util.Iterator),244,249,"/**
 * Creates a HashSet from an iterator of elements.
 * @param elements Iterator providing elements for the set.
 * @return A HashSet containing elements from the iterator.
 */
","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set and then calling {@link Iterators#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterator)} instead.
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, you should create an {@link EnumSet}
   * instead.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$FilteredCollection:iterator(),174,177,"/**
 * Returns an iterator that filters elements based on the predicate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,filter,"com.google.common.collect.Iterators:filter(java.util.Iterator,java.lang.Class)",688,692,"/**
 * Filters an iterator to return only elements of the desired type.
 * @param unfiltered Iterator to filter.
 * @param desiredType Class of elements to keep.
 * @return Filtered iterator of the desired type.
 */
","* Returns a view of {@code unfiltered} containing all elements that are of the type {@code
   * desiredType}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:entryIterator(),3270,3273,"/**
 * Returns an iterator over filtered entries.
 * Filters entries based on the entry predicate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingEntryIterator(),3275,3278,"/**
 * Returns an iterator over entries in descending order.
 * Filters entries based on the defined predicate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$FilteredMultiset:iterator(),338,341,"/**
 * Returns an iterator that filters elements from the underlying iterator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingIterator,com.google.common.collect.Sets$FilteredNavigableSet:descendingIterator(),1391,1394,"/**
 * Returns an iterator that processes elements in descending order,
 * filtered by the predicate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,all,"com.google.common.collect.Iterables:all(java.lang.Iterable,com.google.common.base.Predicate)",638,641,"/**
 * Checks if all elements in the iterable satisfy the predicate.
 * @param iterable Iterable to check.
 * @param predicate Predicate to apply to each element.
 * @return True if all elements satisfy the predicate.
 */
","* Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code
   * iterable} is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate)",652,656,"/**
 * Finds the first element in the iterable that matches the predicate.
 * @param iterable Iterable to search.
 * @param predicate Predicate to apply to each element.
 * @return Matching element or null if none found.
 */
","* Returns the first element in {@code iterable} that satisfies the given predicate; use this
   * method only when such an element is known to exist. If it is possible that <i>no</i> element
   * will match, use {@link #tryFind} or {@link #find(Iterable, Predicate, Object)} instead.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst().get()}
   *
   * @throws NoSuchElementException if no element in {@code iterable} matches the given predicate",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,last,com.google.common.collect.Sets$FilteredNavigableSet:last(),1396,1400,"/**
 * Returns the last element matching the predicate, or null.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,first,com.google.common.collect.Sets$FilteredSortedSet:first(),1325,1329,"/**
* Returns the first element matching the predicate, or null.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,find,"com.google.common.collect.Iterables:find(java.lang.Iterable,com.google.common.base.Predicate,java.lang.Object)",683,686,"/**
 * Finds the first element matching the predicate, or defaultValue.
 * @param iterable Source iterable.
 * @param predicate Predicate to apply to each element.
 * @param defaultValue Value to return if no match is found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,lower,com.google.common.collect.Sets$FilteredNavigableSet:lower(java.lang.Object),1356,1359,"/**
 * Returns the greatest element less than the given element.
 * @param e the element to compare against
 * @return the lower element or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,floor,com.google.common.collect.Sets$FilteredNavigableSet:floor(java.lang.Object),1361,1364,"/**
 * Returns the greatest element of the set less than or equal to given element.
 * @param e the element to compare against
 * @return the floor element or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$TransformedCollection:iterator(),284,287,"/**
 * Returns an iterator that transforms elements from the underlying collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransformedTable:cellIterator(),485,488,"/**
 * Returns an iterator that applies a transformation to each cell.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,cellIterator,com.google.common.collect.Tables$TransposeTable:cellIterator(),317,320,"/**
 * Returns an iterator that transposes cells from the original table.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.UndirectedGraphConnections:incidentEdgeIterator(java.lang.Object),79,84,"/**
 * Returns an iterator over incident edge pairs for a node.
 * @param thisNode the node to get incident edges for
 * @return Iterator of EndpointPair<N> representing incident edges
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$AsMap:clear(),1403,1410,"/**
 * Clears the multimap. If it shares backing map, clears it too.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$KeySet:clear(),994,997,"/**
 * Clears the set, removing all elements.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAllNodes,com.google.common.collect.LinkedListMultimap:removeAllNodes(java.lang.Object),298,300,"/**
 * Removes all nodes associated with the given key.
 * @param key The key whose nodes are to be removed.
 */
",Removes all nodes for the specified key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,clear,com.google.common.collect.Maps$IteratorBasedAbstractMap:clear(),3787,3790,"/**
 * Clears the map, removing all entries.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,clear,com.google.common.collect.TreeMultiset:clear(),349,371,"/**
 * Clears the entire tree. Optimizes if range is unbounded.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessListWrapper:<init>(java.util.List),1210,1212,"/**
 * Constructs a RandomAccessListWrapper with the given backing list.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIteratorImpl,"com.google.common.collect.Lists:listIteratorImpl(java.util.List,int)",1130,1132,"/**
 * Creates a list iterator for the given list, starting at the index.
 * @param list the list to create the iterator for
 * @param index the starting index for the iterator
 * @return A ListIterator for the list.
 */
",Returns an implementation of {@link List#listIterator(int)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object[])",310,312,"/**
 * Converts an array to a List.
 * @param first First element of the array.
 * @param rest Remaining elements of the array.
 * @return A List containing all elements.
 */
","* Returns an unmodifiable list containing the specified first element and backed by the specified
   * array of additional elements. Changes to the {@code rest} array will be reflected in the
   * returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$RandomAccessReverseList:<init>(java.util.List),1008,1010,"/**
 * Constructs a ReverseList from a forward list.
 * @param forwardList The list to reverse.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,transform,"com.google.common.collect.Lists:transform(java.util.List,com.google.common.base.Function)",551,556,"/**
 * Transforms a list using a function.
 * @param fromList List to transform.
 * @param function Function to apply to each element.
 * @return Transformed list.
 */
","* Returns a list that applies {@code function} to each element of {@code fromList}. The returned
   * list is a transformed view of {@code fromList}; changes to {@code fromList} will be reflected
   * in the returned list and vice versa.
   *
   * <p>Since functions are not reversible, the transform is one-way and new items cannot be stored
   * in the returned list. The {@code add}, {@code addAll} and {@code set} methods are unsupported
   * in the returned list.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned list
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link List#contains} and {@link List#hashCode}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned list doesn't need to be a
   * view, copy the returned list into a new list of your choosing.
   *
   * <p>If {@code fromList} implements {@link RandomAccess}, so will the returned list. The returned
   * list is threadsafe if the supplied list and function are.
   *
   * <p>If only a {@code Collection} or {@code Iterable} input is available, use {@link
   * Collections2#transform} or {@link Iterables#transform}.
   *
   * <p><b>Note:</b> serializing the returned list is implemented by serializing {@code fromList},
   * its contents, and {@code function} -- <i>not</i> by serializing the transformed values. This
   * can lead to surprising behavior, so serializing the returned list is <b>not recommended</b>.
   * Instead, copy the list using {@link ImmutableList#copyOf(Collection)} (for example), then
   * serialize the copy. Other methods similar to this do not implement serialization at all for
   * this reason.
   *
   * <p><b>Java 8+ users:</b> many use cases for this method are better addressed by {@link
   * java.util.stream.Stream#map}. This method is not being deprecated, but we gently encourage you
   * to migrate to streams.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,asList,"com.google.common.collect.Lists:asList(java.lang.Object,java.lang.Object,java.lang.Object[])",330,333,"/**
 * Creates a list from the given first, second elements, and array.
 */","* Returns an unmodifiable list containing the specified first and second element, and backed by
   * the specified array of additional elements. Changes to the {@code rest} array will be reflected
   * in the returned list. Unlike {@link Arrays#asList}, the returned list is unmodifiable.
   *
   * <p>This is useful when a varargs method needs to use a signature such as {@code (Foo firstFoo,
   * Foo secondFoo, Foo... moreFoos)}, in order to avoid overload ambiguity or to enforce a minimum
   * argument count.
   *
   * <p>The returned list is serializable and implements {@link RandomAccess}.
   *
   * @param first the first element
   * @param second the second element
   * @param rest an array of additional elements, possibly empty
   * @return an unmodifiable list containing the specified elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$SortedAsMapView:<init>(java.util.SortedSet,com.google.common.base.Function)",986,988,"/**
 * Constructs a SortedAsMapView with the given sorted set and function.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.Set,com.google.common.base.Function)",819,822,"/**
 * Converts a set to a map using a function to map keys to values.
 * @param set The set of keys.
 * @param function Maps keys to values.
 * @return A map containing the key-value pairs.
 */
","* Returns a live {@link Map} view whose keys are the contents of {@code set} and whose values are
   * computed on demand using {@code function}. To get an immutable <i>copy</i> instead, use {@link
   * #toMap(Iterable, Function)}.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$SortedKeySet:<init>(java.util.SortedMap),3978,3980,"/**
 * Constructs a SortedKeySet backed by the given sorted map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$ViewCachingAbstractMap:createKeySet(),3728,3730,"/**
 * Creates a KeySet view of the map's keys.
 * Returns a new KeySet instance based on this map.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.NavigableSet,com.google.common.base.Function)",875,879,"/**
 * Adapts a NavigableSet to a NavigableMap using a function.
 * @param set The set to adapt.
 * @param function Function to map keys to values.
 * @return A NavigableMap view.
 */
","* Returns a view of the navigable set as a map, mapping keys from the set according to the
   * specified function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesSortedMap:<init>(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2227,2230,"/**
 * Constructs a TransformedEntriesSortedMap from a SortedMap and transformer.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.Map,com.google.common.collect.Maps$EntryTransformer)",1959,1964,"/**
 * Transforms a map's entries using a provided transformer.
 * @param fromMap Source map.
 * @param transformer Entry transformation logic.
 * @return New map with transformed entries.
 */
","* Returns a view of a map whose values are derived from the original map's entries. In contrast
   * to {@link #transformValues}, this method's entry-transformation logic may depend on the key as
   * well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""no"" + key;
   *       }
   *     };
   * Map<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {verbose=verbose, sort=nosort}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$DescendingMap:values(),4459,4462,"/**
 * Returns a collection of the values in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredMapValues:<init>(java.util.Map,java.util.Map,com.google.common.base.Predicate)",2910,2915,"/**
 * Constructs a FilteredMapValues with given map, unfiltered map, and predicate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$TransformedEntriesMap:values(),2213,2216,"/**
 * Returns a collection of the values in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$ViewCachingAbstractMap:createValues(),3740,3742,"/**
 * Creates a collection of values for this map.
 * @return A collection view of the map's values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,entrySpliterator,com.google.common.collect.ImmutableEnumMap:entrySpliterator(),102,105,"/**
 * Returns a Spliterator for the map's entries.
 * Uses delegate's entry spliterator and transforms entries.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableOrNull,com.google.common.collect.Maps:unmodifiableOrNull(java.util.Map$Entry),3445,3448,"/**
 * Returns an unmodifiable entry or null if the input is null.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsEntryImpl,"com.google.common.collect.Maps:containsEntryImpl(java.util.Collection,java.lang.Object)",3854,3860,"/**
 * Checks if a collection contains an entry.
 * @param c Collection of entries.
 * @param o Entry to check for.
 * @return True if the collection contains the entry.
 */
","* Implements {@code Collection.contains} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is the backing (delegate) collection, rather than the forwarding
   * collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object that might be contained in {@code c}
   * @return {@code true} if {@code c} contains {@code o}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeEntryImpl,"com.google.common.collect.Maps:removeEntryImpl(java.util.Collection,java.lang.Object)",3873,3879,"/**
 * Removes an entry from a collection if it's an Entry.
 * @param c Collection to remove from.
 * @param o Entry to remove. Returns true if removed.
 */
","* Implements {@code Collection.remove} safely for forwarding collections of map entries. If
   * {@code o} is an instance of {@code Entry}, it is wrapped using {@link #unmodifiableEntry} to
   * protect against a possible nefarious equals method.
   *
   * <p>Note that {@code c} is backing (delegate) collection, rather than the forwarding collection.
   *
   * @param c the delegate (unwrapped) collection of map entries
   * @param o the object to remove from {@code c}
   * @return {@code true} if {@code c} was changed",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:transformEntry(java.util.Map$Entry),2385,2387,"/**
 * Transforms an entry using the provided transformer.
 * @param entry The entry to transform, or null.
 * @return Transformed entry, or null if input is null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entryIterator,com.google.common.collect.Maps$TransformedEntriesMap:entryIterator(),2194,2198,"/**
 * Returns an iterator over the map entries, transformed by the function.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,entrySpliterator,com.google.common.collect.Maps$TransformedEntriesMap:entrySpliterator(),2200,2204,"/**
 * Returns a Spliterator for entries transformed from the backing map.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entryIterator,com.google.common.collect.Multimaps$TransformedEntriesMultimap:entryIterator(),1541,1545,"/**
 * Returns an iterator over the entries of the multimap.
 * Transforms entries from the underlying multimap.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,get,com.google.common.collect.AbstractMapBasedMultimap$AsMap:get(java.lang.Object),1353,1362,"/**
 * Retrieves a collection of values associated with the given key.
 * @param key the key to retrieve values for
 * @return Collection of values or null if key not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.AbstractMapBasedMultiset:count(java.lang.Object),250,254,"/**
 * Counts occurrences of an element.
 * @param element The element to count.
 * @return The count of the element, or 0 if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,com.google.common.collect.AbstractTable$CellSet:contains(java.lang.Object),134,144,"/**
 * Checks if the object is a Cell and exists in the table.
 * @param o Object to check, must be a Cell.
 * @return True if the Cell exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,com.google.common.collect.AbstractTable$CellSet:remove(java.lang.Object),146,156,"/**
 * Removes a cell from the table.
 * @param o Cell object to remove; returns false if not a Cell.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.AbstractTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
 * Retrieves a value by row and column keys.
 * @param rowKey Row key. @param columnKey Column key.
 * @return Value at the specified row and column, or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,count,com.google.common.collect.ConcurrentHashMultiset:count(java.lang.Object),142,146,"/**
 * Counts occurrences of an element.
 * @param element The element to count.
 * @return The count of the element, or 0 if not found.
 */
","* Returns the number of occurrences of {@code element} in this multiset.
   *
   * @param element the element to look for
   * @return the nonnegative number of occurrences of the element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,removeExactly,"com.google.common.collect.ConcurrentHashMultiset:removeExactly(java.lang.Object,int)",314,340,"/**
 * Removes a specified number of occurrences of an element.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return true if successful, false otherwise
 */
","* Removes exactly the specified number of occurrences of {@code element}, or makes no change if
   * this is not possible.
   *
   * <p>This method, in contrast to {@link #remove(Object, int)}, has no effect when the element
   * count is smaller than {@code occurrences}.
   *
   * @param element the element to remove
   * @param occurrences the number of occurrences of {@code element} to remove
   * @return {@code true} if the removal was possible (including if {@code occurrences} is zero)
   * @throws IllegalArgumentException if {@code occurrences} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int)",349,393,"/**
 * Sets the count for an element in the map. Returns the old count.
 * @param element the element to set the count for
 * @param count the new count to set
 */
","* Adds or removes occurrences of {@code element} such that the {@link #count} of the element
   * becomes {@code count}.
   *
   * @return the count of {@code element} in the multiset before this call
   * @throws IllegalArgumentException if {@code count} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,setCount,"com.google.common.collect.ConcurrentHashMultiset:setCount(java.lang.Object,int,int)",405,447,"/**
 * Atomically sets the count for an element if expectedOldCount matches.
 * @param element the element to update
 * @param expectedOldCount expected old count
 * @param newCount new count to set
 * @return true if successful, false otherwise
 */
","* Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is
   * currently {@code expectedOldCount}. If {@code element} does not appear in the multiset exactly
   * {@code expectedOldCount} times, no changes will be made.
   *
   * @return {@code true} if the change was successful. This usually indicates that the multiset has
   *     been modified, but not always: in the case that {@code expectedOldCount == newCount}, the
   *     method will return {@code true} if the condition was met.
   * @throws IllegalArgumentException if {@code expectedOldCount} or {@code newCount} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,contains,com.google.common.collect.Maps$EntrySet:contains(java.lang.Object),4211,4220,"/**
 * Checks if the given object is an entry contained in this map.
 * @param o The object to check.
 * @return True if the object is an entry, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,count,com.google.common.collect.Multimaps$Keys:count(java.lang.Object),1792,1796,"/**
 * Counts occurrences of an element in the multimap.
 * @param element The element to count.
 * @return The number of occurrences.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.StandardTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
 * Removes a row/column mapping.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return Value removed, or null if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsKey,com.google.common.collect.AbstractMapBasedMultimap$AsMap:containsKey(java.lang.Object),1348,1351,"/**
 * Checks if the submap contains the specified key.
 * @param key The key to check.
 * @return True if the key exists in the submap, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.AbstractTable:containsRow(java.lang.Object),43,46,"/**
* Checks if the map contains a row with the given key.
* @param rowKey The key of the row to check.
* @return True if the map contains the row, false otherwise.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.AbstractTable:containsColumn(java.lang.Object),48,51,"/**
 * Checks if the column map contains the specified key.
 * @param columnKey The key to check for in the column map.
 * @return True if the map contains the key, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,contains,"com.google.common.collect.AbstractTable:contains(java.lang.Object,java.lang.Object)",73,77,"/**
 * Checks if a column exists for a given row.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return True if the column exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.StandardTable:containsColumn(java.lang.Object),91,102,"/**
 * Checks if any backing map contains the given column key.
 * @param columnKey The key to search for. Returns false if null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.StandardTable:containsRow(java.lang.Object),104,107,"/**
 * Checks if a row with the given key exists in the backing map.
 * @param rowKey The key of the row to check.
 * @return True if the row exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeValuesForKey,com.google.common.collect.AbstractMapBasedMultimap:removeValuesForKey(java.lang.Object),1148,1156,"/**
 * Removes values associated with the given key from the map.
 * @param key The key whose values are to be removed.
 */
",Removes all values for the provided key.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,remove,"com.google.common.collect.AbstractTable:remove(java.lang.Object,java.lang.Object)",95,100,"/**
 * Removes a column value from a row.
 * @param rowKey row identifier, can be null
 * @param columnKey column identifier, can be null
 * @return Removed value or null if row/column doesn't exist
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forEach,com.google.common.collect.Multimaps$UnmodifiableMultimap:forEach(java.util.function.BiConsumer),722,725,"/**
* Applies the consumer to each key-value pair in the map.
* @param consumer the BiConsumer to apply
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,treeKeys,com.google.common.collect.MultimapBuilder:treeKeys(),134,137,"/**
 * Creates a MultimapBuilder with keys sorted naturally.
 * Returns a MultimapBuilder instance.
 */
","* Uses a naturally-ordered {@link TreeMap} to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in sorted order.
   *
   * <p>For all multimaps generated by the resulting builder, the {@link Multimap#keySet()} can be
   * safely cast to a {@link java.util.SortedSet}, and the {@link Multimap#asMap()} can safely be
   * cast to a {@link java.util.SortedMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,createAsMap,com.google.common.collect.LinkedListMultimap:createAsMap(),833,836,"/**
 * Creates an immutable map view of the multimap.
 * @return A map with keys from the multimap.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$MapMultimap:createAsMap(),1280,1283,"/**
 * Creates an immutable map representation of the graph.
 * @return A map where keys are nodes and values are collections of neighbors.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,forMap,com.google.common.collect.Multimaps:forMap(java.util.Map),1131,1134,"/**
 * Creates a SetMultimap from a given Map.
 * @param map The Map to create the SetMultimap from.
 * @return A new SetMultimap initialized with the Map's entries.
 */
","* Returns a multimap view of the specified map. The multimap is backed by the map, so changes to
   * the map are reflected in the multimap, and vice versa. If the map is modified while an
   * iteration over one of the multimap's collection views is in progress (except through the
   * iterator's own {@code remove} operation, or through the {@code setValue} operation on a map
   * entry returned by the iterator), the results of the iteration are undefined.
   *
   * <p>The multimap supports mapping removal, which removes the corresponding mapping from the map.
   * It does not support any operations which might add mappings, such as {@code put}, {@code
   * putAll} or {@code replaceValues}.
   *
   * <p>The returned multimap will be serializable if the specified map is serializable.
   *
   * @param map the backing map for the returned multimap view",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:<init>(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1616,1619,"/**
 * Constructs a TransformedEntriesListMultimap from a ListMultimap.
 * @param fromMultimap the source multimap
 * @param transformer transforms entries from the source multimap
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.Multimap,com.google.common.collect.Maps$EntryTransformer)",1438,1443,"/**
 * Transforms entries in a multimap using a provided transformer.
 * @param fromMap The input multimap.
 * @param transformer Transforms entries (K, V1) to (K, V2).
 * @return A new multimap with transformed entries.
 */
","* Returns a view of a multimap whose values are derived from the original multimap's entries. In
   * contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * SetMultimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 1, ""a"", 4, ""b"", -6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *          return (value >= 0) ? key : ""no"" + key;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[a, a], b=[nob]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,addAll,com.google.common.collect.ImmutableMultiset$Builder:addAll(java.lang.Iterable),559,569,"/**
 * Adds all elements from the iterable to the builder.
 * Handles Multiset specifically for efficient addition.
 */
","* Adds each element of {@code elements} to the {@code ImmutableMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",911,918,"/**
 * Adds all elements from another multiset to this multiset.
 * @param elements Multiset to add elements from.
 * @return True if any elements were added.
 */
",A specialization of {@code addAllImpl} for when {@code elements} is itself a Multiset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,retainOccurrences,"com.google.common.collect.Multisets:retainOccurrences(com.google.common.collect.Multiset,com.google.common.collect.Multiset)",716,720,"/**
 * Retains occurrences present in the specified multiset.
 * @param multisetToModify Multiset to be modified.
 * @param multisetToRetain Multiset containing elements to retain.
 * @return True if modified; false otherwise.
 */
","* Modifies {@code multisetToModify} so that its count for an element {@code e} is at most {@code
   * multisetToRetain.count(e)}.
   *
   * <p>To be precise, {@code multisetToModify.count(e)} is set to {@code
   * Math.min(multisetToModify.count(e), multisetToRetain.count(e))}. This is similar to {@link
   * #intersection(Multiset, Multiset) intersection} {@code (multisetToModify, multisetToRetain)},
   * but mutates {@code multisetToModify} instead of returning a view.
   *
   * <p>In contrast, {@code multisetToModify.retainAll(multisetToRetain)} keeps all occurrences of
   * elements that appear at all in {@code multisetToRetain}, and deletes all occurrences of all
   * other elements.
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,removeOccurrences,"com.google.common.collect.Multisets:removeOccurrences(com.google.common.collect.Multiset,java.lang.Iterable)",767,781,"/**
 * Removes occurrences from a multiset.
 * @param multisetToModify Multiset to modify.
 * @param occurrencesToRemove Elements to remove.
 * @return True if the multiset was modified.
 */
","* For each occurrence of an element {@code e} in {@code occurrencesToRemove}, removes one
   * occurrence of {@code e} in {@code multisetToModify}.
   *
   * <p>Equivalently, this method modifies {@code multisetToModify} so that {@code
   * multisetToModify.count(e)} is set to {@code Math.max(0, multisetToModify.count(e) -
   * Iterables.frequency(occurrencesToRemove, e))}.
   *
   * <p>This is <i>not</i> the same as {@code multisetToModify.} {@link Multiset#removeAll
   * removeAll}{@code (occurrencesToRemove)}, which removes all occurrences of elements that appear
   * in {@code occurrencesToRemove}. However, this operation <i>is</i> equivalent to, albeit
   * sometimes more efficient than, the following:
   *
   * {@snippet :
   * for (E e : occurrencesToRemove) {
   *   multisetToModify.remove(e);
   * }
   * }
   *
   * @return {@code true} if {@code multisetToModify} was changed as a result of this operation
   * @since 18.0 (present in 10.0 with a requirement that the second parameter be a {@code
   *     Multiset})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,retainAll,com.google.common.collect.AbstractMultiset:retainAll(java.util.Collection),117,121,"/**
 * Retains elements present in the specified collection.
 * @param elementsToRetain Collection of elements to keep.
 * @return True if the multiset was modified.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRetainAll,com.google.common.collect.ForwardingMultiset:standardRetainAll(java.util.Collection),202,205,"/**
 * Retains elements present in the given collection.
 * @param elementsToRetain Collection of elements to keep
 * @return True if the multiset was modified, false otherwise.
 */
","* A sensible definition of {@link #retainAll} in terms of the {@code retainAll} method of {@link
   * #elementSet}. If you override {@link #elementSet}, you may wish to override {@link #retainAll}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drain,"com.google.common.collect.Queues:drain(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",291,299,"/**
 * Drains elements from a queue into a collection, with a timeout.
 * @param q queue to drain from
 * @param buffer collection to add elements to
 * @param numElements max elements to drain
 * @param timeout timeout duration
 * @return number of elements drained
 * @throws InterruptedException if interrupted while waiting
 */
","* Drains the queue as {@link BlockingQueue#drainTo(Collection, int)}, but if the requested {@code
   * numElements} elements are not available, it will wait for them up to the specified timeout.
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,drainUninterruptibly,"com.google.common.collect.Queues:drainUninterruptibly(java.util.concurrent.BlockingQueue,java.util.Collection,int,java.time.Duration)",361,368,"/**
 * Drains elements from a queue to a collection, with a timeout.
 * @param q queue to drain from
 * @param buffer destination collection
 * @param numElements max elements to drain
 * @param timeout timeout duration
 * @return number of elements drained
 */
","* Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, Duration)}, but with a
   * different behavior in case it is interrupted while waiting. In that case, the operation will
   * continue as usual, and in the end the thread's interruption status will be set (no {@code
   * InterruptedException} is thrown).
   *
   * @param q the blocking queue to be drained
   * @param buffer where to add the transferred elements
   * @param numElements the number of elements to be waited for
   * @param timeout how long to wait before giving up
   * @return the number of elements transferred
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Comparable),417,422,"/**
 * Applies the function to the input.
 * @param input The input value to be processed.
 * @return True if the input is contained, false otherwise.
 */
","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,containsAll,com.google.common.collect.Range:containsAll(java.lang.Iterable),440,460,"/**
* Checks if this set contains all elements of the given collection.
* @param values collection of elements to check
* @return true if all elements are contained, false otherwise
*/
","* Returns {@code true} if every element in {@code values} is {@linkplain #contains contained} in
   * this range.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,contains,com.google.common.collect.RegularContiguousSet:contains(java.lang.Object),171,183,"/**
 * Checks if the collection contains the given object.
 * @param object The object to check. Returns false if null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,contains,com.google.common.collect.TreeRangeMap$RangeMapEntry:contains(java.lang.Comparable),107,109,"/**
 * Checks if the key contains the specified value.
 * @param value The value to search for within the key.
 * @return True if the key contains the value, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,forEach,com.google.common.collect.RegularImmutableBiMap$Inverse:forEach(java.util.function.BiConsumer),216,220,"/**
 * Performs the given action on each entry, in arbitrary order.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,lower,com.google.common.collect.RegularImmutableSortedSet:lower(java.lang.Object),223,227,"/**
 * Returns the element just before the given element.
 * @param element the element to find the lower element of
 * @return the lower element or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,floor,com.google.common.collect.RegularImmutableSortedSet:floor(java.lang.Object),229,233,"/**
 * Returns the greatest element in the tree <= to the given element.
 * @param element the element to compare against
 * @return the floor element or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,ceiling,com.google.common.collect.RegularImmutableSortedSet:ceiling(java.lang.Object),235,239,"/**
 * Returns the smallest element greater than or equal to the given element.
 * @param element the element to compare
 * @return the ceiling element or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,higher,com.google.common.collect.RegularImmutableSortedSet:higher(java.lang.Object),241,245,"/**
 * Returns the element following the given element, or null if absent.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Streams.java,forEachPair,"com.google.common.collect.Streams:forEachPair(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiConsumer)",395,409,"/**
 * Iterates through pairs of elements from two streams, applying consumer.
 * Uses parallel streams if either input stream is parallel.
 */
","* Invokes {@code consumer} once for each pair of <i>corresponding</i> elements in {@code streamA}
   * and {@code streamB}. If one stream is longer than the other, the extra elements are silently
   * ignored. Elements passed to the consumer are guaranteed to come from the same position in their
   * respective source streams. For example:
   *
   * {@snippet :
   * Streams.forEachPair(
   *   Stream.of(""foo1"", ""foo2"", ""foo3""),
   *   Stream.of(""bar1"", ""bar2""),
   *   (arg1, arg2) -> System.out.println(arg1 + "":"" + arg2)
   * }
   *
   * <p>will print:
   *
   * {@snippet :
   * foo1:bar1
   * foo2:bar2
   * }
   *
   * <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence
   * between elements will be made, but the order in which those pairs of elements are passed to the
   * consumer is <i>not</i> defined.
   *
   * <p>Note that many usages of this method can be replaced with simpler calls to {@link #zip}.
   * This method behaves equivalently to {@linkplain #zip zipping} the stream elements into
   * temporary pair objects and then using {@link Stream#forEach} on that stream.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedCollection:<init>(java.util.Collection,java.lang.Object)",127,129,"/**
 * Constructs a SynchronizedCollection with the given delegate and mutex.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedEntry:<init>(java.util.Map$Entry,java.lang.Object)",1793,1795,"/**
 * Constructs a synchronized entry with a delegate and mutex.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMap:<init>(java.util.Map,java.lang.Object)",1068,1070,"/**
 * Constructs a SynchronizedMap using the given map and mutex.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedMultimap:<init>(com.google.common.collect.Multimap,java.lang.Object)",608,610,"/**
 * Constructs a SynchronizedMultimap with the given delegate and mutex.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedTable:<init>(com.google.common.collect.Table,java.lang.Object)",2042,2044,"/**
* Constructs a SynchronizedTable with a delegate and mutex.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,"com.google.common.collect.TableCollectors:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",81,100,"/**
 * Creates a TableCollector from data.
 * @param rowFunction Maps input to row key.
 * @param columnFunction Maps input to column key.
 * @param valueFunction Maps input to value.
 * @param tableSupplier Creates a new table.
 * @return TableCollector for populating a table.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator,java.util.function.Supplier)",100,114,"/**
 * Creates a TableCollector from a stream of elements.
 * @param rowFunction Maps element to row key.
 * @param columnFunction Maps element to column key.
 * @param valueFunction Maps element to value.
 */
","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, the specified merging function is
   * used to combine the values. Like {@link
   * java.util.stream.Collectors#toMap(java.util.function.Function, java.util.function.Function,
   * BinaryOperator, java.util.function.Supplier)}, this Collector throws a {@code
   * NullPointerException} on null values returned from {@code valueFunction}, and treats nulls
   * returned from {@code mergeFunction} as removals of that row/column pair.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transformValues,"com.google.common.collect.Tables:transformValues(com.google.common.collect.Table,com.google.common.base.Function)",401,409,"/**
 * Transforms values in a table using a function.
 * @param fromTable Source table.
 * @param function Function to apply to each value.
 * @return New table with transformed values.
 */
","* Returns a view of a table where each value is transformed by a function. All other properties
   * of the table, such as iteration order, are left intact.
   *
   * <p>Changes in the underlying table are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying table.
   *
   * <p>It's acceptable for the underlying table to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed table might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned table is not thread-safe or serializable, even if the underlying table is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * table to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Table#containsValue} and {@code Table.toString()}. For this to perform
   * well, {@code function} should be fast. To avoid lazy evaluation when the returned table doesn't
   * need to be a view, copy the returned table into a new table of your choosing.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,transpose,com.google.common.collect.Tables:transpose(com.google.common.collect.Table),213,218,"/**
 * Transposes a Table, swapping rows and columns.
 * @param table The table to transpose.
 * @return A transposed Table.
 */
","* Creates a transposed view of a given table that flips its row and column keys. In other words,
   * calling {@code get(columnKey, rowKey)} on the generated table always returns the same value as
   * calling {@code get(rowKey, columnKey)} on the original table. Updating the original table
   * changes the contents of the transposed table and vice versa.
   *
   * <p>The returned table supports update operations as long as the input table supports the
   * analogous operation with swapped rows and columns. For example, in a {@link HashBasedTable}
   * instance, {@code rowKeySet().iterator()} supports {@code remove()} but {@code
   * columnKeySet().iterator()} doesn't. With a transposed {@link HashBasedTable}, it's the other
   * way around.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TransformedListIterator.java,<init>,com.google.common.collect.TransformedListIterator:<init>(java.util.ListIterator),33,35,"/**
 * Constructs a TransformedListIterator with the given backing iterator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,expand,com.google.common.collect.TreeTraverser$PostOrderIterator:expand(java.lang.Object),243,245,"/**
 * Creates a PostOrderNode with the given data and its children iterator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedEscaperMap.java,create,com.google.common.escape.ArrayBasedEscaperMap:create(java.util.Map),46,48,"/**
 * Creates an ArrayBasedEscaperMap from a map of character replacements.
 * @param replacements Map of characters to their replacement strings.
 * @return A new ArrayBasedEscaperMap instance.
 */
","* Returns a new ArrayBasedEscaperMap for creating ArrayBasedCharEscaper or
   * ArrayBasedUnicodeEscaper instances.
   *
   * @param replacements a map of characters to their escaped representations",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,addEscapes,"com.google.common.escape.CharEscaperBuilder:addEscapes(char[],java.lang.String)",94,101,"/**
 * Adds escapes for specified characters using the given replacement.
 * @param cs characters to escape
 * @param r replacement string for escaping
 * @return this builder
 */
",Add multiple mappings at once for a particular index.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,nextEscapeIndex,"com.google.common.escape.UnicodeEscaper:nextEscapeIndex(java.lang.CharSequence,int,int)",130,140,"/**
 * Finds the index of the next character to escape.
 * @param csq CharSequence to search.
 * @param start Start index.
 * @param end End index (exclusive).
 * @return Index of the next character to escape.
 */
","* Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of
   * the next character that requires escaping.
   *
   * <p><b>Note:</b> When implementing an escaper, it is a good idea to override this method for
   * efficiency. The base class implementation determines successive Unicode code points and invokes
   * {@link #escape(int)} for each of them. If the semantics of your escaper are such that code
   * points in the supplementary range are either all escaped or all unescaped, this method can be
   * implemented more efficiently using {@link CharSequence#charAt(int)}.
   *
   * <p>Note however that if your escaper does not escape characters in the supplementary range, you
   * should either continue to validate the correctness of any surrogate characters encountered or
   * provide a clear warning to users that your escaper does not validate its input.
   *
   * <p>See {@link com.google.common.net.PercentEscaper} for an example.
   *
   * @param csq a sequence of characters
   * @param start the index of the first character to be scanned
   * @param end the index immediately after the last character to be scanned
   * @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid
   *     surrogate pairs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,invokeSubscriberMethod,com.google.common.eventbus.Subscriber$SynchronizedSubscriber:invokeSubscriberMethod(java.lang.Object),138,143,"/**
 * Invokes subscriber method, synchronizing access.
 * Passes the event object to the superclass method.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,context,com.google.common.eventbus.Subscriber:context(java.lang.Object),98,100,"/**
 * Creates a SubscriberExceptionContext for the given event.
 * @param event The event that triggered the exception.
 * @return A SubscriberExceptionContext object.
 */
",Gets the context for the given event.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
 * Checks if an edge exists between nodeU and nodeV.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,"com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",157,162,"/**
 * Checks if an edge exists between nodeU and nodeV.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hasEdgeConnecting,com.google.common.graph.AbstractNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),231,238,"/**
 * Checks if an edge connects the given endpoints.
 * @param endpoints The endpoint pair to check.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,<init>,com.google.common.graph.UndirectedMultiNetworkConnections:<init>(java.util.Map),45,47,"/**
* Initializes the UndirectedMultiNetworkConnections with incident edges.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,<init>,com.google.common.graph.UndirectedNetworkConnections:<init>(java.util.Map),37,39,"/**
 * Constructs an UndirectedNetworkConnections with the given edge map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Pred:<init>(java.lang.Object),80,82,"/**
 * Calls the constructor of the superclass (Pred's parent).
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,com.google.common.graph.DirectedGraphConnections$NodeConnection$Succ:<init>(java.lang.Object),101,103,"/**
 * Calls the constructor of the superclass (base class).
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.DirectedNetworkConnections:edgesConnecting(java.lang.Object),62,65,"/**
 * Returns edges connecting to the given node.
 * @param node The node to find edges for.
 * @return A set of edges connected to the node.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,edgesConnecting,com.google.common.graph.UndirectedNetworkConnections:edgesConnecting(java.lang.Object),54,57,"/**
 * Returns edges connected to the given node.
 * @param node the node to find connected edges for
 * @return a set of edges connected to the node
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,<init>,com.google.common.graph.MapRetrievalCache:<init>(java.util.Map),35,37,"/**
 * Initializes the cache with the provided backing map.
 * @param backingMap The map to use as the cache's backing store.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapIteratorCache.java,get,com.google.common.graph.MapIteratorCache:get(java.lang.Object),82,91,"/**
 * Retrieves value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value or null if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,of,com.google.common.graph.UndirectedGraphConnections:of(com.google.common.graph.ElementOrder),47,58,"/**
 * Creates an UndirectedGraphConnections based on the incident edge order.
 * @param incidentEdgeOrder Defines the order of incident edges.
 * @return UndirectedGraphConnections object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,sequentialFunnel,com.google.common.hash.Funnels:sequentialFunnel(com.google.common.hash.Funnel),173,176,"/**
 * Creates a sequential funnel that uses the provided element funnel.
 * @param elementFunnel Funnel to use for individual elements.
 * @return A new SequentialFunnel.
 */
","* Returns a funnel that processes an {@code Iterable} by funneling its elements in iteration
   * order with the specified funnel. No separators are added between the elements.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,asOutputStream,com.google.common.hash.Funnels:asOutputStream(com.google.common.hash.PrimitiveSink),246,248,"/**
 * Creates an OutputStream from a PrimitiveSink.
 * @param sink PrimitiveSink to wrap as an OutputStream
 * @return OutputStream backed by the provided sink
 */
","* Wraps a {@code PrimitiveSink} as an {@link OutputStream}, so it is easy to {@link Funnel#funnel
   * funnel} an object to a {@code PrimitiveSink} if there is already a way to write the contents of
   * the object to an {@code OutputStream}.
   *
   * <p>The {@code close} and {@code flush} methods of the returned {@code OutputStream} do nothing,
   * and no method throws {@code IOException}.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,stringFunnel,com.google.common.hash.Funnels:stringFunnel(java.nio.charset.Charset),86,88,"/**
 * Creates a StringCharsetFunnel for converting strings to bytes.
 * @param charset Charset to use for the conversion.
 * @return StringCharsetFunnel instance.
 */
","* Returns a funnel that encodes the characters of a {@code CharSequence} with the specified
   * {@code Charset}.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,asWriter,com.google.common.io.CharStreams:asWriter(java.lang.Appendable),346,351,"/**
 * Returns a Writer, or wraps target if not a Writer.
 * @param target Appendable to be wrapped as a Writer.
 * @return A Writer instance.
 */
","* Returns a Writer that sends all output to the given {@link Appendable} target. Closing the
   * writer will close the target if it is {@link Closeable}, and flushing the writer will flush the
   * target if it is {@link java.io.Flushable}.
   *
   * @param target the object to which output will be sent
   * @return a new Writer object, unless target is a Writer, in which case the target is returned",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,canDecode,com.google.common.io.BaseEncoding$StandardBaseEncoding:canDecode(java.lang.CharSequence),738,751,"/**
 * Checks if the given CharSequence can be decoded by the alphabet.
 * @param chars CharSequence to decode; must not be null.
 * @return True if decodable, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,trimTrailingPadding,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:trimTrailingPadding(java.lang.CharSequence),1153,1156,"/**
 * Trims trailing padding from the given CharSequence.
 * Delegates to the underlying delegate implementation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeChecked,com.google.common.io.BaseEncoding:decodeChecked(java.lang.CharSequence),230,236,"/**
 * Decodes a CharSequence, performing checked decoding.
 * @param chars CharSequence to decode; returns byte array.
 * @throws DecodingException if decoding fails.
 */
","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws DecodingException if the input is not a valid encoded string according to this
   *     encoding.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$CharSequenceCharSource:openStream(),545,548,"/**
 * Opens a reader based on the sequence.
 * @return CharSequenceReader instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,create,com.google.common.io.Closer:create(),85,87,"/**
 * Creates a new Closer instance with the default suppressor.
 * @return A new Closer object.
 */
",Creates a new {@link Closer}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/PatternFilenameFilter.java,<init>,com.google.common.io.PatternFilenameFilter:<init>(java.lang.String),44,46,"/**
 * Constructs a PatternFilenameFilter with a compiled pattern.
 * @param patternStr Regular expression pattern string.
 */
","* Constructs a pattern file name filter object.
   *
   * @param patternStr the pattern string on which to filter file names
   * @throws PatternSyntaxException if pattern compilation fails (runtime)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log2,"com.google.common.math.BigIntegerMath:log2(java.math.BigInteger,java.math.RoundingMode)",84,121,"/**
 * Calculates the base-2 logarithm of a BigInteger.
 * @param x The BigInteger to calculate the logarithm of.
 * @param mode The rounding mode to use.
 * @return The base-2 logarithm of x.
 */
","* Returns the base-2 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of two",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,cast,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:cast(java.lang.Class,java.lang.Object)",128,130,"/**
 * Casts an object to a specified type using primitive wrappers.
 * @param type The target class type.
 * @param value The object to cast.
 * @return The casted object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,cast,"com.google.common.collect.MutableClassToInstanceMap:cast(java.lang.Class,java.lang.Object)",181,184,"/**
 * Safely casts an object to a specified type.
 * @param type The class to cast to.
 * @param value The object to cast. Returns null if cast fails.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,parseUnsignedByte,com.google.common.primitives.UnsignedBytes:parseUnsignedByte(java.lang.String),212,215,"/**
 * Parses a string as an unsigned byte (base 10).
 * @param string The string to parse.
 * @return The unsigned byte value.
 */
","* Returns the unsigned {@code byte} value represented by the given decimal string.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code byte}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Byte#parseByte(String)})
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,parseUnsignedInt,com.google.common.primitives.UnsignedInts:parseUnsignedInt(java.lang.String),342,345,"/**
 * Parses a string as an unsigned integer (base 10).
 * @param s The string to parse.
 * @return The unsigned integer value of the string.
 */","* Returns the unsigned {@code int} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Integer#parseUnsignedInt(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @throws NullPointerException if {@code s} is null (in contrast to {@link
   *     Integer#parseInt(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,<init>,"com.google.common.reflect.ClassPath$ClassInfo:<init>(java.io.File,java.lang.String,java.lang.ClassLoader)",301,304,"/**
 * Constructs a ClassInfo object.
 * @param file The file object.
 * @param resourceName Resource name.
 * @param loader Class loader.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$ConstructorInvokable:<init>(java.lang.reflect.Constructor),424,427,"/**
 * Initializes a ConstructorInvokable with the given constructor.
 * @param constructor The constructor to be invoked.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,<init>,com.google.common.reflect.Invokable$MethodInvokable:<init>(java.lang.reflect.Method),360,363,"/**
 * Constructor for MethodInvokable.
 * Initializes the MethodInvokable with the given method.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,forLookup,com.google.common.reflect.TypeResolver$TypeVariableKey:forLookup(java.lang.reflect.Type),579,585,"/**
 * Creates a TypeVariableKey if 't' is a TypeVariable, else null.
 */",Wraps {@code t} in a {@code TypeVariableKey} if it's a type variable.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.util.concurrent.AsyncFunction)",197,202,"/**
 * Constructs an AsyncCatchingFuture, handling exceptions with a fallback.
 * @param input Future to wrap; @param exceptionType Exception type to catch;
 * @param fallback Fallback function to execute on exception.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,<init>,"com.google.common.util.concurrent.AbstractCatchingFuture$CatchingFuture:<init>(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function)",228,233,"/**
 * Constructs a CatchingFuture with given future, exception type, and fallback.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,getFutureValue,com.google.common.util.concurrent.AbstractFuture:getFutureValue(com.google.common.util.concurrent.ListenableFuture),611,684,"/**
 * Retrieves the future's value, handling Trusted, Failure, and Cancellation.
 */","* Returns a value that satisfies the contract of the {@link #value} field based on the state of
   * given future.
   *
   * <p>This is approximately the inverse of {@link #getDoneValue(Object)}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,<init>,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule:<init>(java.time.Duration),751,753,"/**
 * Creates a Schedule with the given duration.
 * @param delay The duration for the schedule.
 */
","* @param delay the time from now to delay execution
       * @since 31.1 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$AsyncTransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction)",217,220,"/**
 * Constructs an AsyncTransformFuture with input future and function.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,<init>,"com.google.common.util.concurrent.AbstractTransformFuture$TransformFuture:<init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)",247,250,"/**
 * Initializes a TransformFuture with a future and a function.
 * @param inputFuture The future to transform.
 * @param function The function to apply to the future's result.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,afterDone,com.google.common.util.concurrent.AggregateFuture:afterDone(),77,95,"/**
 * Releases resources and cancels pending futures after completion.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,releaseResources,com.google.common.util.concurrent.CollectionFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),76,80,"/**
* Releases resources, setting values to null.
* @param reason Reason for releasing resources.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,releaseResources,com.google.common.util.concurrent.CombinedFuture:releaseResources(com.google.common.util.concurrent.AggregateFuture$ReleaseResourcesReason),69,82,"/**
 * Releases resources, clearing the task if the future is done.
 * @param reason Reason for releasing resources.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(),69,71,"/**
 * Creates and returns a new AtomicLongMap instance.
 * Uses a ConcurrentHashMap for internal storage.
 */
",Creates an {@code AtomicLongMap}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,accumulateAndGet,"com.google.common.util.concurrent.AtomicLongMap:accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)",184,188,"/**
 * Accumulates value 'x' to the value associated with 'key'.
 * @param key The key to update.
 * @param x The value to accumulate.
 * @return The new value after accumulation.
 */
","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the new value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAccumulate,"com.google.common.util.concurrent.AtomicLongMap:getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)",198,202,"/**
 * Accumulates value 'x' using the accumulatorFunction and returns result.
 * @param key The key to operate on.
 * @param x The value to accumulate.
 */
","* Updates the value currently associated with {@code key} by combining it with {@code x} via the
   * specified accumulator function, returning the old value. The previous value associated with
   * {@code key} (or zero, if there is none) is passed as the first argument to {@code
   * accumulatorFunction}, and {@code x} is passed as the second argument.
   *
   * @since 21.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,put,"com.google.common.util.concurrent.AtomicLongMap:put(java.lang.Object,long)",208,211,"/**
 * Atomically sets the value associated with key to newValue.
 * @param key the key to update
 * @param newValue the new value to set
 * @return the previous value associated with the key
 */
","* Associates {@code newValue} with {@code key} in this map, and returns the value previously
   * associated with {@code key}, or zero if there was no such value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyAsyncClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyAsyncClosingFunction(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.lang.Object)",2195,2208,"/**
 * Applies a function asynchronously, subsuming its closeable into the list.
 * @param transformation Function to apply.
 * @param input Input value.
 * @return A FluentFuture representing the result.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClose,"com.google.common.util.concurrent.ClosingFuture$DeferredCloser:eventuallyClose(java.lang.Object,java.util.concurrent.Executor)",232,241,"/**
 * Schedules an AutoCloseable resource for eventual closing.
 * @param closeable Resource to close, may be null.
 * @param closingExecutor Executor for closing the resource.
 * @return The provided closeable object.
 */
","* Captures an object to be closed when a {@link ClosingFuture} pipeline is done.
     *
     * <p>For users of the {@code -jre} flavor of Guava, the object can be any {@code
     * AutoCloseable}. For users of the {@code -android} flavor, the object must be a {@code
     * Closeable}. (For more about the flavors, see <a
     * href=""https://github.com/google/guava#adding-guava-to-your-build"">Adding Guava to your
     * build</a>.)
     *
     * <p>Be careful when targeting an older SDK than you are building against (most commonly when
     * building for Android): Ensure that any object you pass implements the interface not just in
     * your current SDK version but also at the oldest version you support. For example, <a
     * href=""https://developer.android.com/sdk/api_diff/16/"">API Level 16</a> is the first version
     * in which {@code Cursor} is {@code Closeable}. To support older versions, pass a wrapper
     * {@code Closeable} with a method reference like {@code cursor::close}.
     *
     * <p>Note that this method is still binary-compatible between flavors because the erasure of
     * its parameter type is {@code Object}, not {@code AutoCloseable} or {@code Closeable}.
     *
     * @param closeable the object to be closed (see notes above)
     * @param closingExecutor the object will be closed on this executor
     * @return the first argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Peeker:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1159,1170,"/**
 * Executes a combining callable and adds closeables to the list.
 * @param combiner Callable to execute, returns a value.
 * @param closeables List of closeables to manage.
 * @return Result of the callable.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Peeker:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,com.google.common.util.concurrent.ClosingFuture$CloseableList)",1172,1184,"/**
 * Calls an async callable and manages resource closing.
 * @param combiner Callable to execute.
 * @param closeables List of resources to close.
 * @return A FluentFuture representing the async result.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,provideValueAndCloser,"com.google.common.util.concurrent.ClosingFuture:provideValueAndCloser(com.google.common.util.concurrent.ClosingFuture$ValueAndCloserConsumer,com.google.common.util.concurrent.ClosingFuture)",1078,1081,"/**
 * Provides a value and closer to the consumer.
 * @param consumer Consumer for value and closer.
 * @param closingFuture Future holding the value and closer.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstance,com.google.common.util.concurrent.CycleDetectingLockFactory:newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy),231,233,"/**
 * Creates a new CycleDetectingLockFactory with the given policy.
 * @param policy The policy to use for cycle detection.
 * @return A new CycleDetectingLockFactory instance.
 */
",Creates a new factory with the specified policy.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStart,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStart(),59,72,"/**
 * Starts the component, executing startup logic and handling errors.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,doStop,com.google.common.util.concurrent.AbstractIdleService$DelegateService:doStop(),74,87,"/**
 * Stops the service, shuts down resources, and notifies of status.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,run,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task:run(),218,250,"/**
 * Executes one iteration of the scheduled service, handling failures.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",54,71,"/**
 * Executes a Callable with a timeout, handling exceptions.
 * @param callable Callable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit (e.g., SECONDS, MILLS).
 * @return Result of the Callable.
 * @throws ExecutionException, UncheckedExecutionException
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/InterruptibleTask.java,run,com.google.common.util.concurrent.InterruptibleTask:run(),56,93,"/**
 * Executes the task interruptibly, sets runner, and handles results/errors.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SmoothRateLimiter.java,<init>,com.google.common.util.concurrent.SmoothRateLimiter:<init>(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch),332,334,"/**
 * Initializes the SmoothRateLimiter with a provided stopwatch.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newSequentialExecutor,com.google.common.util.concurrent.MoreExecutors:newSequentialExecutor(java.util.concurrent.Executor),441,444,"/**
 * Creates a sequential executor that runs tasks one at a time.
 * @param delegate Executor to use for individual task execution.
 * @return SequentialExecutor instance.
 */
","* Returns an {@link Executor} that runs each task executed sequentially, such that no two tasks
   * are running concurrently.
   *
   * <p>{@linkplain Executor#execute executed} tasks have a happens-before order as defined in the
   * Java Language Specification. Tasks execute with the same happens-before order that the function
   * calls to {@link Executor#execute execute()} that submitted those tasks had.
   *
   * <p>The executor uses {@code delegate} in order to {@link Executor#execute execute} each task in
   * turn, and does not create any threads of its own.
   *
   * <p>After execution begins on a thread from the {@code delegate} {@link Executor}, tasks are
   * polled and executed from a task queue until there are no more tasks. The thread will not be
   * released until there are no more tasks to run.
   *
   * <p>If a task is submitted while a thread is executing tasks from the task queue, the thread
   * will not be released until that submitted task is also complete.
   *
   * <p>If a task is {@linkplain Thread#interrupt interrupted} while a task is running:
   *
   * <ol>
   *   <li>execution will not stop until the task queue is empty.
   *   <li>tasks will begin execution with the thread marked as not interrupted - any interruption
   *       applies only to the task that was running at the point of interruption.
   *   <li>if the thread was interrupted before the SequentialExecutor's worker begins execution,
   *       the interrupt will be restored to the thread after it completes so that its {@code
   *       delegate} Executor may process the interrupt.
   *   <li>subtasks are run with the thread uninterrupted and interrupts received during execution
   *       of a task are ignored.
   * </ol>
   *
   * <p>{@code RuntimeException}s thrown by tasks are simply logged and the executor keeps trucking.
   * If an {@code Error} is thrown, the error will propagate and execution will stop until the next
   * time a task is submitted.
   *
   * <p>When an {@code Error} is thrown by an executed task, previously submitted tasks may never
   * run. An attempt will be made to restart execution on the next call to {@code execute}. If the
   * {@code delegate} has begun to reject execution, the previously submitted tasks may never run,
   * despite not throwing a RejectedExecutionException synchronously with the call to {@code
   * execute}. If this behaviour is problematic, use an Executor with a single thread (e.g. {@link
   * Executors#newSingleThreadExecutor}).
   *
   * @since 23.3 (since 23.1 as {@code sequentialExecutor})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,create,com.google.common.util.concurrent.SimpleTimeLimiter:create(java.util.concurrent.ExecutorService),71,73,"/**
 * Creates a new SimpleTimeLimiter instance with the given executor.
 * @param executor The executor service to use for time-limiting.
 * @return A new SimpleTimeLimiter.
 */
","* Creates a TimeLimiter instance using the given executor service to execute method calls.
   *
   * <p><b>Warning:</b> using a bounded executor may be counterproductive! If the thread pool fills
   * up, any time callers spend waiting for a thread may count toward their time limit, and in this
   * case the call may even time out before the target method is ever invoked.
   *
   * @param executor the ExecutorService that will execute the method calls on the target objects;
   *     for example, a {@link Executors#newCachedThreadPool()}.
   * @since 22.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,joinUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:joinUninterruptibly(java.lang.Thread,java.time.Duration)",185,189,"/**
 * Waits for a thread to terminate, with a timeout.
 * @param toJoin thread to wait for
 * @param timeout duration to wait, may be interrupted
 */
","* Invokes {@code unit.}{@link TimeUnit#timedJoin(Thread, long) timedJoin(toJoin, timeout)}
   * uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingScheduledExecutorService.java,<init>,com.google.common.util.concurrent.WrappingScheduledExecutorService:<init>(java.util.concurrent.ScheduledExecutorService),39,42,"/**
 * Constructs a WrappingScheduledExecutorService with the given delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",133,140,"/**
 * Adds an out-edge and updates successor node count.
 * @param edge The edge to add.
 * @param node The target node.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractUndirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractUndirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",89,94,"/**
 * Adds an in-edge if not a self-loop, otherwise skips.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addOutEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addOutEdge(java.lang.Object,java.lang.Object)",109,116,"/**
 * Adds an out-edge and ensures the node is in adjacent nodes.
 * @param edge The edge to add.
 * @param node The node to add.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,unordered,com.google.common.graph.ElementOrder:unordered(),80,82,"/**
 * Creates an ElementOrder instance for unordered elements.
 * Returns an ElementOrder object with UNORDERED type.
 */
",Returns an instance which specifies that no ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,stable,com.google.common.graph.ElementOrder:stable(),120,122,"/**
 * Creates a stable ElementOrder instance.
 * Returns a new ElementOrder with stable sorting.
 */
","* Returns an instance which specifies that ordering is guaranteed to be always be the same across
   * iterations, and across releases. Some methods may have stronger guarantees.
   *
   * <p>This instance is only useful in combination with {@code incidentEdgeOrder}, e.g. {@code
   * graphBuilder.incidentEdgeOrder(ElementOrder.stable())}.
   *
   * <h3>In combination with {@code incidentEdgeOrder}</h3>
   *
   * <p>{@code incidentEdgeOrder(ElementOrder.stable())} guarantees the ordering of the returned
   * collections of the following methods:
   *
   * <ul>
   *   <li>For {@link Graph} and {@link ValueGraph}:
   *       <ul>
   *         <li>{@code edges()}: Stable order
   *         <li>{@code adjacentNodes(node)}: Connecting edge insertion order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Edge insertion order
   *       </ul>
   *   <li>For {@link Network}:
   *       <ul>
   *         <li>{@code adjacentNodes(node)}: Stable order
   *         <li>{@code predecessors(node)}: Connecting edge insertion order
   *         <li>{@code successors(node)}: Connecting edge insertion order
   *         <li>{@code incidentEdges(node)}: Stable order
   *         <li>{@code inEdges(node)}: Edge insertion order
   *         <li>{@code outEdges(node)}: Edge insertion order
   *         <li>{@code adjacentEdges(edge)}: Stable order
   *         <li>{@code edgesConnecting(nodeU, nodeV)}: Edge insertion order
   *       </ul>
   * </ul>
   *
   * @since 29.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,insertion,com.google.common.graph.ElementOrder:insertion(),125,127,"/**
 * Creates an ElementOrder for insertion operations.
 * Returns a new ElementOrder object with insertion type.
 */
",Returns an instance which specifies that insertion ordering is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,natural,com.google.common.graph.ElementOrder:natural(),132,134,"/**
 * Returns an ElementOrder using natural ordering for the elements.
 * @return An ElementOrder instance with natural ordering.
 */
",* Returns an instance which specifies that the natural ordering of the elements is guaranteed.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,sorted,com.google.common.graph.ElementOrder:sorted(java.util.Comparator),140,142,"/**
 * Creates a sorted element order using the provided comparator.
 * @param comparator Comparator for sorting elements.
 * @return ElementOrder instance with sorted type.
 */
","* Returns an instance which specifies that the ordering of the elements is guaranteed to be
   * determined by {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,whenClosedCountDown,com.google.common.util.concurrent.ClosingFuture:whenClosedCountDown(),2265,2268,"/**
 * Returns a CountDownLatch to signal when closeables are closed.
 */","* Returns an object that can be used to wait until this objects' deferred closeables have all had
   * {@link Runnable}s that close them submitted to each one's closing {@link Executor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,<init>,"com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue:<init>(java.lang.Object,java.util.concurrent.Executor)",145,148,"/**
 * Constructs a PerListenerQueue with a listener and executor.
 * @param listener The listener to process.
 * @param executor Executor for asynchronous listener processing.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/AbstractIterator.java,next,com.google.common.base.AbstractIterator:next(),76,87,"/**
 * Returns the next element in the iteration.
 * Throws NoSuchElementException if no such element exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter:correctedDoForward(java.lang.Object),200,207,"/**
 * Forwards 'a' using doForward or unsafeDoForward based on handleNullAutomatically.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter:correctedDoBackward(java.lang.Object),209,216,"/**
 * Executes doBackward, handling nulls based on handleNullAutomatically.
 * @param b Input object; may be null.
 * @return Result of doBackward or null, depending on settings.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$1:normalizeWord(java.lang.String),210,210,"/**
 * Normalizes a word to a standard form.
 * @param word The word to normalize.
 * @return The normalized word.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$2:normalizeWord(java.lang.String),210,210,"/**
 * Normalizes a word to a standard form.
 * @param word The word to normalize.
 * @return The normalized word.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeFirstWord,com.google.common.base.CaseFormat$3:normalizeFirstWord(java.lang.String),212,214,"/**
* Normalizes the first word of a string.
* @param word The word to normalize.
* @return The normalized word.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeToken,com.google.common.net.MediaType:normalizeToken(java.lang.String),1083,1087,"/**
 * Normalizes a token by converting it to lowercase.
 * @param token The token string to normalize.
 * @return The lowercase version of the token.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,normalizeParameterValue,"com.google.common.net.MediaType:normalizeParameterValue(java.lang.String,java.lang.String)",1089,1093,"/**
 * Normalizes parameter value: lowercase if attribute is CHARSET.
 * @param attribute Attribute name.
 * @param value Parameter value.
 * @return Normalized value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toLowerCase,com.google.common.base.Ascii:toLowerCase(java.lang.CharSequence),431,440,"/**
 * Converts a CharSequence to lowercase.
 * Handles String directly, otherwise converts each char.
 */
","* Returns a copy of the input character sequence in which all {@linkplain #isUpperCase(char)
   * uppercase ASCII characters} have been converted to lowercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,normalizeWord,com.google.common.base.CaseFormat$5:normalizeWord(java.lang.String),210,210,"/**
 * Normalizes a word to a standard form.
 * @param word The word to normalize.
 * @return The normalized word.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Ascii.java,toUpperCase,com.google.common.base.Ascii:toUpperCase(java.lang.CharSequence),479,488,"/**
 * Converts a CharSequence to uppercase.
 * @param chars The CharSequence to convert.
 * @return The uppercase string representation.
 */
","* Returns a copy of the input character sequence in which all {@linkplain #isLowerCase(char)
   * lowercase ASCII characters} have been converted to uppercase. All other characters are copied
   * without modification.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,firstCharOnlyToUpper,com.google.common.base.CaseFormat:firstCharOnlyToUpper(java.lang.String),216,220,"/**
 * Capitalizes the first character of a string, lowercase the rest.
 * @param word The input string.
 * @return The modified string.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,toString,com.google.common.io.CharSource$CharSequenceCharSource:toString(),620,623,"/**
 * Returns a string representation of the CharSource.
 * Includes a truncated sequence for brevity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toByteArray,com.google.common.math.PairedStats:toByteArray(),289,295,"/**
 * Converts stats data to a byte array in little-endian order.
 */
","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toByteArray,com.google.common.math.Stats:toByteArray(),589,593,"/**
 * Converts the data to a byte array using little-endian order.
 * @return byte array representing the data.
 */
","* Gets a byte array representation of this instance.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,init,com.google.common.collect.CompactHashMap:init(int),254,259,"/**
 * Initializes the metadata with a constrained expected size.
 * @param expectedSize The expected number of elements; must be >= 0.
 */
",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,init,com.google.common.collect.CompactHashSet:init(int),219,224,"/**
 * Initializes the metadata with a constrained expected size.
 * @param expectedSize The expected size, constrained to [1, MAX_SIZE].
 */
",Pseudoconstructor for serialization support.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,and,com.google.common.base.CharMatcher:and(com.google.common.base.CharMatcher),381,383,"/**
 * Returns a new CharMatcher that combines this matcher with another.
 */",* Returns a matcher that matches any character matched by both this matcher and {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,forPredicate,com.google.common.base.CharMatcher:forPredicate(com.google.common.base.Predicate),352,354,"/**
 * Returns a CharMatcher based on the provided predicate.
 * @param predicate Predicate to apply to each character.
 */
","* Returns a matcher with identical behavior to the given {@link Character}-based predicate, but
   * which operates on primitive {@code char} instances instead.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$NegatedFastMatcher:<init>(com.google.common.base.CharMatcher),994,996,"/**
* Creates a negated matcher, using the provided CharMatcher.
* @param original The CharMatcher to negate.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher:negate(),373,376,"/**
 * Returns a CharMatcher that negates this matcher.
 * Creates a new Negated CharMatcher.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,or,com.google.common.base.CharMatcher:or(com.google.common.base.CharMatcher),388,390,"/**
 * Returns a new CharMatcher that combines this matcher with another.
 */",* Returns a matcher that matches any character matched by either this matcher or {@code other}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,inRange,"com.google.common.base.CharMatcher:inRange(char,char)",344,346,"/**
 * Creates a CharMatcher that matches chars within the specified range.
 * @param startInclusive start of the range (inclusive)
 * @param endInclusive end of the range (inclusive)
 */
","* Returns a {@code char} matcher that matches any character in a given BMP range (both endpoints
   * are inclusive). For example, to match any lowercase letter of the English alphabet, use {@code
   * CharMatcher.inRange('a', 'z')}.
   *
   * @throws IllegalArgumentException if {@code endInclusive < startInclusive}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Digit:<init>(),1381,1383,"/**
 * Constructs a Digit CharMatcher.
 * Initializes with digits 0-9.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$Invisible:<init>(),1496,1498,"/**
 * Constructs an Invisible CharMatcher.
 * Calls super constructor with range start/end arrays.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,<init>,com.google.common.base.CharMatcher$SingleWidth:<init>(),1506,1511,"/**
 * Creates a SingleWidth CharMatcher with predefined characters.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,snapshot,com.google.common.cache.AbstractCache$SimpleStatsCounter:snapshot(),255,264,"/**
 * Creates a snapshot of cache statistics.
 * Returns a CacheStats object containing the current counts.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,minus,com.google.common.cache.CacheStats:minus(com.google.common.cache.CacheStats),243,251,"/**
 * Subtracts another CacheStats object from this one.
 * Returns a new CacheStats with the differences.
 */
","* Returns a new {@code CacheStats} representing the difference between this {@code CacheStats}
   * and {@code other}. Negative values, which aren't supported by {@code CacheStats} will be
   * rounded up to zero.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,plus,com.google.common.cache.CacheStats:plus(com.google.common.cache.CacheStats),263,271,"/**
 * Adds another CacheStats object to this one.
 * @param other The CacheStats object to add.
 * @return A new CacheStats object with combined stats.
 */
","* Returns a new {@code CacheStats} representing the sum of this {@code CacheStats} and {@code
   * other}.
   *
   * <p><b>Note:</b> the values of the metrics are undefined in case of overflow (though it is
   * guaranteed not to throw an exception). If you require specific handling, we recommend
   * implementing your own stats collector.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,<init>,com.google.common.collect.AbstractListMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs a new AbstractListMultimap from a map.
 * @param map the map to initialize with
 */
","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,<init>,com.google.common.collect.AbstractSetMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs a multimap from a map where values are collections.
 */","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",220,223,"/**
 * Constructs a CustomMultimap from a map and a collection factory.
 * @param map Initial map (K, Collection<V>)
 * @param factory Factory for creating new collections
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(),68,70,"/**
 * Constructs a new HashMultiset with an internal HashMap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(),76,78,"/**
 * Constructs a new LinkedHashMultiset.
 * Uses a LinkedHashMap to maintain insertion order.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,indexed,"com.google.common.collect.CollectSpliterators:indexed(int,int,java.util.function.IntFunction)",43,46,"/**
 * Creates a new indexed Spliterator.
 * @param size size of the spliterator
 * @param extraCharacteristics additional characteristics
 * @param function function to create elements
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,java.lang.Object)",166,172,"/**
 * Returns a subset containing elements between {@code fromElement} and {@code toElement}.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,subSet,"com.google.common.collect.ContiguousSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",177,185,"/**
 * Returns a view of the set between fromElement and toElement.
 * @param fromElement start element (inclusive)
 * @param toElement end element (inclusive)
 * @return ContiguousSet view of the subset
 */
",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Class),54,56,"/**
 * Creates a new EnumMultiset for the given enum type.
 * @param type The enum type for the multiset.
 * @return A new EnumMultiset instance.
 */
",Creates an empty {@code EnumMultiset}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,subSetImpl,"com.google.common.collect.DescendingImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",57,61,"/**
 * Returns a sorted set from `fromElement` to `toElement`.
 * Inverts the order and uses forward set's subSet method.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,subSet,"com.google.common.collect.ImmutableSortedSet:subSet(java.lang.Object,java.lang.Object)",666,669,"/**
 * Returns a subset of elements from fromElement (inclusive) to toElement (exclusive).
 */","* {@inheritDoc}
   *
   * <p>This method returns a serializable {@code ImmutableSortedSet}.
   *
   * <p>The {@link SortedSet#subSet} documentation states that a subset of a subset throws an {@link
   * IllegalArgumentException} if passed a {@code fromElement} smaller than an earlier {@code
   * fromElement}. However, this method doesn't throw an exception in that situation, but instead
   * keeps the original {@code fromElement}. Similarly, this method keeps the original {@code
   * toElement}, instead of throwing an exception, if passed a {@code toElement} greater than an
   * earlier {@code toElement}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,partition,"com.google.common.collect.Iterators:partition(java.util.Iterator,int)",602,605,"/**
 * Partitions an iterator into lists of the specified size.
 * @param iterator Iterator to partition.
 * @param size Size of each partition list.
 * @return UnmodifiableIterator of List<T>.
 */
","* Divides an iterator into unmodifiable sublists of the given size (the final list may be
   * smaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a
   * partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two
   * inner lists of three and two elements, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * <p><b>Note:</b> The current implementation eagerly allocates storage for {@code size} elements.
   * As a consequence, passing values like {@code Integer.MAX_VALUE} can lead to {@link
   * OutOfMemoryError}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition (the last may be smaller)
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,paddedPartition,"com.google.common.collect.Iterators:paddedPartition(java.util.Iterator,int)",621,624,"/**
 * Partitions an iterator into lists of a specified size, padded if needed.
 * @param iterator Iterator to partition.
 * @param size Partition size.
 */
","* Divides an iterator into unmodifiable sublists of the given size, padding the final iterator
   * with null values if necessary. For example, partitioning an iterator containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer
   * iterator containing two inner lists of three elements each, all in the original order.
   *
   * <p>The returned lists implement {@link java.util.RandomAccess}.
   *
   * @param iterator the iterator to return a partitioned view of
   * @param size the desired size of each partition
   * @return an iterator of immutable lists containing the elements of {@code iterator} divided into
   *     partitions (the final iterable may have trailing null elements)
   * @throws IllegalArgumentException if {@code size} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,expectedSize,com.google.common.collect.MinMaxPriorityQueue:expectedSize(int),141,144,"/**
 * Sets the expected size of the collection.
 * @param expectedSize The expected size of the collection.
 * @return A Builder with the expected size set.
 */
","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * sized appropriately to hold {@code expectedSize} elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,maximumSize,com.google.common.collect.MinMaxPriorityQueue:maximumSize(int),152,155,"/**
 * Creates a builder with a maximum size.
 * @param maximumSize The maximum number of elements in the collection.
 * @return A builder configured with the specified maximum size.
 */
","* Creates and returns a new builder, configured to build {@code MinMaxPriorityQueue} instances
   * that are limited to {@code maximumSize} elements. Each time a queue grows beyond this bound, it
   * immediately removes its greatest element (according to its comparator), which might be the
   * element that was just added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addRightChild,"com.google.common.collect.TreeMultiset$AvlNode:addRightChild(java.lang.Object,int)",655,663,"/**
 * Adds a right child node to the AVL tree.
 * @param e element for the new node, can be null
 * @param count count associated with the new node
 * @return The current node (for chaining)
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,addLeftChild,"com.google.common.collect.TreeMultiset$AvlNode:addLeftChild(java.lang.Object,int)",665,673,"/**
 * Adds a left child to the node.
 * @param e element to be added, can be null, @param count count of element
 * @return This node after adding the left child.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,newHasher,com.google.common.hash.AbstractNonStreamingHashFunction:newHasher(),34,37,"/**
 * Creates a new Hasher instance with the default size.
 * @return A new Hasher object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractNonStreamingHashFunction.java,hashBytes,com.google.common.hash.AbstractNonStreamingHashFunction:hashBytes(java.nio.ByteBuffer),73,76,"/**
 * Calculates a hash code from the bytes in a ByteBuffer.
 * @param input ByteBuffer containing the bytes to hash.
 * @return HashCode object representing the hash.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,<init>,com.google.common.hash.AbstractStreamingHasher:<init>(int),48,50,"/**
 * Constructs a StreamingHasher with equal chunk and window sizes.
 * @param chunkSize The size of each chunk to process.
 */
","* Constructor for use by subclasses. This hasher instance will process chunks of the specified
   * size.
   *
   * @param chunkSize the number of bytes available per {@link #process(ByteBuffer)} invocation;
   *     must be at least 4",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,separatingWriter,"com.google.common.io.BaseEncoding:separatingWriter(java.io.Writer,java.lang.String,int)",1113,1138,"/**
 * Creates a Writer that inserts a separator after a specified number of chars.
 * @param delegate The Writer to delegate to.
 * @param separator The separator string.
 * @param afterEveryChars Number of chars before inserting separator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationVariance,com.google.common.math.Stats:populationVariance(),290,299,"/**
 * Calculates the population variance.
 * Returns NaN if sumOfSquaresOfDeltas is NaN.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleVariance,com.google.common.math.Stats:sampleVariance(),337,343,"/**
 * Calculates the sample variance.
 * @return Sample variance, NaN if not computable.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationVariance,com.google.common.math.StatsAccumulator:populationVariance(),283,292,"/**
 * Calculates the population variance.
 * Returns NaN if sumOfSquaresOfDeltas is NaN.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Population_variance"">population
   * variance</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleVariance,com.google.common.math.StatsAccumulator:sampleVariance(),330,336,"/**
 * Calculates the sample variance.
 * Requires count > 1. Returns NaN if sumOfSquaresOfDeltas is NaN.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Variance#Sample_variance"">unbiased sample
   * variance</a> of the values. If this dataset is a sample drawn from a population, this is an
   * unbiased estimator of the population variance of the population. The count must be greater than
   * one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,anyOf,com.google.common.base.CharMatcher:anyOf(java.lang.CharSequence),314,327,"/**
 * Creates a CharMatcher that matches any character in the sequence.
 * @param sequence CharSequence containing characters to match.
 * @return CharMatcher matching any character in the sequence.
 */
","* Returns a {@code char} matcher that matches any BMP character present in the given character
   * sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,trimAndCollapseFrom,"com.google.common.base.CharMatcher:trimAndCollapseFrom(java.lang.CharSequence,char)",864,882,"/**
 * Trims and collapses characters from a sequence.
 * @param sequence CharSequence to process
 * @param replacement char to replace trimmed chars
 * @return Collapsed string or original if no trimming.
 */","* Collapses groups of matching characters exactly as {@link #collapseFrom} does, except that
   * groups of matching BMP characters at the start or end of the sequence are removed without
   * replacement.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,<init>,"com.google.common.base.CaseFormat$StringConverter:<init>(com.google.common.base.CaseFormat,com.google.common.base.CaseFormat)",173,176,"/**
 * Constructs a StringConverter with source and target CaseFormat.
 * @param sourceFormat Format of the input string.
 * @param targetFormat Desired format for the output string.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$ConverterComposition:<init>(com.google.common.base.Converter,com.google.common.base.Converter)",390,393,"/**
 * Creates a ConverterComposition with two converters.
 * @param first The first converter (A -> B).
 * @param second The second converter (B -> C).
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,"com.google.common.base.Converter$FunctionBasedConverter:<init>(com.google.common.base.Function,com.google.common.base.Function)",515,520,"/**
 * Creates a converter with forward and backward functions.
 * @param forwardFunction Function to convert A to B.
 * @param backwardFunction Function to convert B to A.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,<init>,com.google.common.base.Converter$ReverseConverter:<init>(com.google.common.base.Converter),311,313,"/**
 * Initializes the ReverseConverter with the original converter.
 * @param original The original converter to be reversed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,<init>,com.google.common.base.Enums$StringConverter:<init>(java.lang.Class),114,116,"/**
 * Constructor for StringConverter.
 * @param enumClass The enum class to convert from/to strings.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$BiMapConverter:<init>(com.google.common.collect.BiMap),1606,1608,"/**
 * Constructor.
 * @param bimap The BiMap to be wrapped. Must not be null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,onResultOf,com.google.common.base.Equivalence:onResultOf(com.google.common.base.Function),177,179,"/**
 * Creates an Equivalence based on a Function's result.
 * @param function Function to apply; returns an Equivalence.
 */
","* Returns a new equivalence relation for {@code F} which evaluates equivalence by first applying
   * {@code function} to the argument, then evaluating using {@code this}. That is, for any pair of
   * non-null objects {@code x} and {@code y}, {@code equivalence.onResultOf(function).equivalent(a,
   * b)} is true if and only if {@code equivalence.equivalent(function.apply(a), function.apply(b))}
   * is true.
   *
   * <p>For example:
   *
   * {@snippet :
   * Equivalence<Person> SAME_AGE = Equivalence.equals().onResultOf(GET_PERSON_AGE);
   * }
   *
   * <p>{@code function} will never be invoked with a null value.
   *
   * <p>Note that {@code function} must be consistent according to {@code this} equivalence
   * relation. That is, invoking {@link Function#apply} multiple times for a given value must return
   * equivalent results. For example, {@code
   * Equivalence.identity().onResultOf(Functions.toStringFunction())} is broken because it's not
   * guaranteed that {@link Object#toString}) always returns the same string instance.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Equivalence.java,pairwise,com.google.common.base.Equivalence:pairwise(),296,300,"/**
 * Returns a pairwise equivalence for iterables of type S.
 * S must extend T; returns PairwiseEquivalence instance.
 */
","* Returns an equivalence over iterables based on the equivalence of their elements. More
   * specifically, two iterables are considered equivalent if they both contain the same number of
   * elements, and each pair of corresponding elements is equivalent according to {@code this}. Null
   * iterables are equivalent to one another.
   *
   * <p>Note that this method performs a similar function for equivalences as {@link
   * com.google.common.collect.Ordering#lexicographical} does for orderings.
   *
   * <p>The returned object is serializable if this object is serializable.
   *
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,reclaimValue,com.google.common.collect.MapMakerInternalMap:reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference),1113,1117,"/**
* Reclaims a value associated with a WeakValueReference.
* @param valueReference The WeakValueReference to reclaim.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,elementsEqual,"com.google.common.collect.Iterables:elementsEqual(java.lang.Iterable,java.lang.Iterable)",229,238,"/**
 * Checks if two iterables contain the same elements in order.
 * @param iterable1 First iterable to compare.
 * @param iterable2 Second iterable to compare.
 * @return True if elements are equal, false otherwise.
 */
","* Determines whether two iterables contain equal elements in the same order. More specifically,
   * this method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same
   * number of elements and every element of {@code iterable1} is equal to the corresponding element
   * of {@code iterable2}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,equalsImpl,"com.google.common.collect.Lists:equalsImpl(java.util.List,java.lang.Object)",1027,1050,"/**
 * Checks if two lists are equal.
 * @param other The list to compare to.
 * @return True if lists are equal, false otherwise.
 */
",An implementation of {@link List#equals(Object)}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(),89,94,"/**
 * Creates a new ConcurrentHashMultiset using a ConcurrentHashMap.
 * @return A ConcurrentHashMultiset instance.
 */
","* Creates a new, empty {@code ConcurrentHashMultiset} using the default initial capacity, load
   * factor, and concurrency settings.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.util.concurrent.ConcurrentMap),124,126,"/**
 * Creates a ConcurrentHashMultiset using the provided count map.
 * @param countMap The ConcurrentMap to use for element counts.
 * @return A ConcurrentHashMultiset initialized with the count map.
 */
","* Creates a new, empty {@code ConcurrentHashMultiset} using {@code countMap} as the internal
   * backing map.
   *
   * <p>This instance will assume ownership of {@code countMap}, and other code should not maintain
   * references to the map or modify it in any way.
   *
   * <p>The returned multiset is serializable if the input map is.
   *
   * @param countMap backing map for storing the elements in the multiset and their counts. It must
   *     be empty.
   * @throws IllegalArgumentException if {@code countMap} is not empty
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doForward,com.google.common.collect.Maps$BiMapConverter:doForward(java.lang.Object),1610,1613,"/**
 * Forwards the input 'a' using the bimap and returns the converted value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doBackward,com.google.common.collect.Maps$BiMapConverter:doBackward(java.lang.Object),1615,1618,"/**
* Converts an object using the inverse bimap.
* @param b The object to convert.
* @return The converted object.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractGraph:incidentEdges(java.lang.Object),106,134,"/**
 * Returns edges incident to the given node.
 * @param node the node to check
 * @return set of endpoint pairs representing incident edges
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdges,com.google.common.graph.AbstractValueGraph:incidentEdges(java.lang.Object),106,134,"/**
 * Returns incident edges of a node.
 * @param node The node to find incident edges for.
 * @return Set of EndpointPair<N> representing incident edges.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Iterable)",92,95,"/**
 * Appends an iterable of parts to an appendable.
 * @param appendable target appendable
 * @param parts iterable of parts to append
 * @return the appendable after appending
 */
","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.util.Iterator)",153,161,"/**
 * Appends iterator parts to the given StringBuilder.
 * @param builder StringBuilder to append to
 * @param parts Iterator of parts to append
 * @return The StringBuilder passed in.
 */
","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.
   *
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner$MapJoiner:appendTo(java.lang.StringBuilder,java.util.Map)",400,403,"/**
 * Appends map entries to a StringBuilder.
 * @param builder StringBuilder to append to
 * @param map Map whose entries are appended
 * @return StringBuilder with appended entries
 */","* Appends the string representation of each entry of {@code map}, using the previously
     * configured separator and key-value separator, to {@code builder}. Identical to {@link
     * #appendTo(Appendable, Map)}, except that it does not throw {@link IOException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.lang.Iterable),486,488,"/**
 * Joins entries from an iterable into a string.
 * @param entries Iterable of entries to join.
 * @return A string representation of the entries.
 */
","* Returns a string containing the string representation of each entry in {@code entries}, using
     * the previously configured separator and key-value separator.
     *
     * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(java.lang.Object),268,271,"/**
 * Adds a value to the ToStringHelper.
 * @param value The value to add, can be null.
 * @return This ToStringHelper instance.
 */
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, Object)} instead and give value a
     * readable name.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,java.lang.Object)",197,200,"/**
 * Adds a name-value pair to the helper.
 * @param name Name of the property.
 * @param value Value of the property, can be null.
 * @return This {@link ToStringHelper} instance.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}
     * is {@code null}, the string {@code ""null""} is used, unless {@link #omitNullValues()} is
     * called, in which case this name/value pair will not be added.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(boolean),281,284,"/**
* Adds a boolean value to the ToStringHelper.
* @param value The boolean value to add.
* @return The current ToStringHelper instance.
*/
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, boolean)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(char),294,297,"/**
 * Adds a character value to the ToStringHelper.
 * @param value The character to add.
 * @return This ToStringHelper instance for chaining.
 */
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, char)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(double),307,310,"/**
 * Adds a double value to the ToStringHelper.
 * @param value The double value to add.
 * @return This ToStringHelper instance.
 */
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, double)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(float),320,323,"/**
 * Adds a float value to the ToStringHelper.
 * @param value The float value to add.
 * @return This ToStringHelper instance.
 */
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, float)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(int),333,336,"/**
* Adds an integer value to the ToStringHelper.
* @param value The integer value to add.
* @return This ToStringHelper instance.
*/
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, int)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,addValue,com.google.common.base.MoreObjects$ToStringHelper:addValue(long),346,349,"/**
 * Adds a long value to the ToStringHelper.
 * @param value The long value to add.
 * @return This ToStringHelper instance.
 */
","* Adds an unnamed value to the formatted output.
     *
     * <p>It is strongly encouraged to use {@link #add(String, long)} instead and give value a
     * readable name.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.addValue()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,boolean)",207,210,"/**
 * Adds a boolean value to the ToStringHelper.
 * @param name Name of the boolean value.
 * @return This ToStringHelper instance.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,char)",217,220,"/**
 * Adds a name-value pair to the ToStringHelper.
 * @param name The name of the property.
 * @param value The character value to add.
 * @return This ToStringHelper instance.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,double)",227,230,"/**
 * Adds a name/value pair to the helper.
 * @param name The name of the value.
 * @param value The value to add as string.
 * @return This helper instance for chaining.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,float)",237,240,"/**
 * Adds a name-value pair to the ToStringHelper.
 * @param name Name of the property.
 * @param value Value to add (converted to String).
 * @return This ToStringHelper instance.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,int)",247,250,"/**
 * Adds a name-value pair to the ToStringHelper.
 * @param name The name of the property.
 * @param value The integer value to be converted to string.
 * @return This ToStringHelper instance for chaining.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/MoreObjects.java,add,"com.google.common.base.MoreObjects$ToStringHelper:add(java.lang.String,long)",257,260,"/**
 * Adds a name/value pair to the helper.
 * @param name The name of the value.
 * @param value The value to add (converted to String).
 * @return This ToStringHelper instance.
 */
","* Adds a name/value pair to the formatted output in {@code name=value} format.
     *
     * @since 18.0 (since 11.0 as {@code Objects.ToStringHelper.add()}).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getKeyEquivalence,com.google.common.cache.CacheBuilder:getKeyEquivalence(),374,376,"/**
 * Returns the key equivalence strategy. Uses default if none is set.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,getValueEquivalence,com.google.common.cache.CacheBuilder:getValueEquivalence(),396,398,"/**
 * Returns the equivalence strategy for comparing values.
 * Uses `valueEquivalence` or default from `getValueStrength()`.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,getKeyEquivalence,com.google.common.collect.MapMaker:getKeyEquivalence(),130,132,"/**
 * Returns the key equivalence strategy. Uses default if none provided.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Absent.java,transform,com.google.common.base.Absent:transform(com.google.common.base.Function),75,79,"/**
 * Transforms the absent value using the provided function.
 * @param function Function to apply; always returns absent.
 * @return Optional.absent()
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromNullable,com.google.common.base.Optional:fromNullable(java.lang.Object),119,121,"/**
 * Creates an Optional from a nullable reference.
 * @param nullableReference The reference to wrap in Optional.
 * @return An Optional containing the value or empty if null.
 */
","* If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that
   * reference; otherwise returns {@link Optional#absent}.
   *
   * <p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's
   * {@code Optional.ofNullable}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(),120,122,"/**
 * Default constructor. Initializes the iterable delegate to absent.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource:sizeIfKnown(),181,183,"/**
 * Returns the size if known, otherwise returns empty Optional.
 */
","* Returns the size of this source in bytes, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a file,
   * may return a non-absent value. Note that in such cases, it is <i>possible</i> that this method
   * will return a different number of bytes than would be returned by reading all of the bytes (for
   * example, some special files may return a size of 0 despite actually having content when read).
   *
   * <p>Additionally, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource:lengthIfKnown(),190,192,"/**
 * Returns an empty Optional, indicating length is unknown.
 */
","* Returns the size of this source in chars, if the size can be easily determined without actually
   * opening the data stream.
   *
   * <p>The default implementation returns {@link Optional#absent}. Some sources, such as a {@code
   * CharSequence}, may return a non-absent value. Note that in such cases, it is <i>possible</i>
   * that this method will return a different number of chars than would be returned by reading all
   * of the chars.
   *
   * <p>Additionally, for mutable sources such as {@code StringBuilder}s, a subsequent read may
   * return a different number of chars if the contents are changed.
   *
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstant,"com.google.common.net.MediaType:createConstant(java.lang.String,java.lang.String)",108,113,"/**
 * Creates a MediaType with the given type and subtype.
 * @param type The media type (e.g., ""image"")
 * @param subtype The subtype (e.g., ""jpeg"")
 * @return The created MediaType object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Strings.java,emptyToNull,com.google.common.base.Strings:emptyToNull(java.lang.String),55,57,"/**
 * Converts an empty string to null, using Platform's implementation.
 * @param string The string to check. Null is returned if null.
 */
","* Returns the given string if it is nonempty; {@code null} otherwise.
   *
   * @param string the string to test and possibly return
   * @return {@code string} itself if it is nonempty; {@code null} if it is empty or null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$DurationParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",424,456,"/**
 * Parses duration from value, extracts time unit, and applies to spec.
 * @param spec CacheBuilderSpec to update
 * @param key Key associated with the duration value
 * @param value Duration value string (e.g., ""60s"")
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$IntegerParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",295,306,"/**
 * Parses an integer value from a string, using the provided spec.
 * @param spec CacheBuilderSpec object
 * @param key Key string
 * @param value Value string to parse
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,"com.google.common.cache.CacheBuilderSpec$LongParser:parse(com.google.common.cache.CacheBuilderSpec,java.lang.String,java.lang.String)",313,324,"/**
 * Parses a value and calls parseLong. Throws exception if value is invalid.
 * @param spec CacheBuilderSpec object
 * @param key Key string
 * @param value Value string to parse
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromString,com.google.common.net.HostAndPort:fromString(java.lang.String),167,201,"/**
 * Parses a string representation of a host and port.
 * @param hostPortString String in the format ""host:port"" or ""host""
 * @return HostAndPort object parsed from the input string
 */
","* Split a freeform string into a host and port, without strict validation.
   *
   * <p>Note that the host-only formats will leave the port field undefined. You can use {@link
   * #withDefaultPort(int)} to patch in a default value.
   *
   * @param hostPortString the input string to parse.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if nothing meaningful could be parsed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,skip,com.google.common.collect.FluentIterable:skip(int),581,583,"/**
 * Skips a specified number of elements from the iterable.
 * @param numberToSkip The number of elements to skip.
 * @return A new FluentIterable skipping the specified elements.
 */
","* Returns a view of this fluent iterable that skips its first {@code numberToSkip} elements. If
   * this fluent iterable contains fewer than {@code numberToSkip} elements, the returned fluent
   * iterable skips all of its elements.
   *
   * <p>Modifications to this fluent iterable before a call to {@code iterator()} are reflected in
   * the returned fluent iterable. That is, the iterator skips the first {@code numberToSkip}
   * elements that exist when the iterator is created, not when {@code skip()} is called.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if the {@code Iterator} of
   * this fluent iterable supports it. Note that it is <i>not</i> possible to delete the last
   * skipped element by immediately calling {@code remove()} on the returned fluent iterable's
   * iterator, as the {@code Iterator} contract states that a call to {@code * remove()} before a
   * call to {@code next()} will throw an {@link IllegalStateException}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#skip} (same).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,limit,com.google.common.collect.FluentIterable:limit(int),596,598,"/**
 * Limits the iterable to the specified maximum size.
 * @param maxSize The maximum number of elements to return.
 * @return A new iterable with the limited size.
 */
","* Creates a fluent iterable with the first {@code size} elements of this fluent iterable. If this
   * fluent iterable does not contain that many elements, the returned fluent iterable will have the
   * same behavior as this fluent iterable. The returned fluent iterable's iterator supports {@code
   * remove()} if this fluent iterable's iterator does.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#limit} (same).
   *
   * @param maxSize the maximum number of elements in the returned fluent iterable
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int,java.lang.Object)",788,801,"/**
 * Retrieves element at position from iterable or defaultValue.
 * @param iterable Source iterable.
 * @param position Index of element to retrieve.
 * @param defaultValue Value if position is out of bounds.
 */
","* Returns the element at the specified position in an iterable or a default value otherwise.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index
   * is out of bounds)
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if {@code position} is greater than or equal to
   *     the size of the iterable
   * @return the element at the specified position in {@code iterable} or {@code defaultValue} if
   *     {@code iterable} contains fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int)",842,855,"/**
 * Retrieves the element at the specified position from an iterator.
 * @param iterator Iterator to retrieve from.
 * @param position Index of element to retrieve.
 * @return Element at the specified position.
 */
","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position.
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterator}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the number of elements remaining in {@code iterator}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,get,"com.google.common.collect.Iterators:get(java.util.Iterator,int,java.lang.Object)",869,875,"/**
 * Retrieves element at position from iterator, or defaultValue.
 * @param iterator Iterator to retrieve from.
 * @param position Index of element to retrieve.
 * @param defaultValue Value if element not found.
 */
","* Advances {@code iterator} {@code position + 1} times, returning the element at the {@code
   * position}th position or {@code defaultValue} otherwise.
   *
   * @param position position of the element to return
   * @param defaultValue the default value to return if the iterator is empty or if {@code position}
   *     is greater than the number of elements remaining in {@code iterator}
   * @return the element at the specified position in {@code iterator} or {@code defaultValue} if
   *     {@code iterator} produces fewer than {@code position + 1} elements.
   * @throws IndexOutOfBoundsException if {@code position} is negative
   * @since 4.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,fileTraverser,com.google.common.io.Files:fileTraverser(),842,844,"/**
 * Creates a file traverser for the FILE_TREE.
 * Returns a Traverser<File> object.
 */
","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link File} and will return all files and directories it encounters.
   *
   * <p><b>Warning:</b> {@code File} provides no support for symbolic links, and as such there is no
   * way to ensure that a symbolic link to a directory is not followed when traversing the tree. In
   * this case, iterables created by this traverser could contain files that are outside of the
   * given directory or even be infinite if there is a symbolic link loop.
   *
   * <p>If available, consider using {@link MoreFiles#fileTraverser()} instead. It behaves the same
   * except that it doesn't follow symbolic links and returns {@code Path} instances.
   *
   * <p>If the {@link File} passed to one of the {@link Traverser} methods does not exist or is not
   * a directory, no exception will be thrown and the returned {@link Iterable} will contain a
   * single element: that file.
   *
   * <p>Example: {@code Files.fileTraverser().depthFirstPreOrder(new File(""/""))} may return files
   * with the following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"",
   * ""/home/alice"", ...]}
   *
   * @since 23.5",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readResolve,com.google.common.hash.BloomFilter$SerialForm:readResolve(),578,580,"/**
* Reconstructs a BloomFilter object from a serialized form.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,copy,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:copy(),245,247,"/**
 * Creates a copy of this LockFreeBitArray.
 * @return A new LockFreeBitArray with the same bit values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,limit,"com.google.common.io.ByteStreams:limit(java.io.InputStream,long)",709,712,"/**
 * Wraps an InputStream to limit the number of bytes read.
 * @param in The input stream to limit.
 * @param limit The maximum number of bytes to read.
 */
","* Wraps a {@link InputStream}, limiting the number of bytes which can be read.
   *
   * @param in the input stream to be wrapped
   * @param limit the maximum number of bytes to be read
   * @return a length-limited {@link InputStream}
   * @since 14.0 (since 1.0 as com.google.common.io.LimitInputStream)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv4BigInteger,com.google.common.net.InetAddresses:fromIPv4BigInteger(java.math.BigInteger),1094,1096,"/**
 * Creates an Inet4Address from a BigInteger representing an IPv4 address.
 */
","* Returns the {@code Inet4Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv4 address
   * @return Inet4Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^32-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromIPv6BigInteger,com.google.common.net.InetAddresses:fromIPv6BigInteger(java.math.BigInteger),1106,1108,"/**
 * Creates an Inet6Address from a BigInteger representing IPv6 address.
 */","* Returns the {@code Inet6Address} corresponding to a given {@code BigInteger}.
   *
   * @param address BigInteger representing the IPv6 address
   * @return Inet6Address representation of the given BigInteger
   * @throws IllegalArgumentException if the BigInteger is not between 0 and 2^128-1
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$CompactStriped:<init>(int,com.google.common.base.Supplier)",375,383,"/**
 * Constructs a CompactStriped with specified stripes and supplier.
 * @param stripes number of stripes
 * @param supplier supplier for L objects
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$SmallLazyStriped:<init>(int,com.google.common.base.Supplier)",409,414,"/**
 * Constructs a SmallLazyStriped with given stripes and supplier.
 * @param stripes number of stripes
 * @param supplier supplier for creating L objects
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,<init>,"com.google.common.graph.AbstractDirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",52,57,"/**
 * Constructs a directed network with in/out edges and self-loops.
 * @param inEdgeMap Incoming edges map.
 * @param outEdgeMap Outgoing edges map.
 * @param selfLoopCount Number of self-loops.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,removeInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:removeInEdge(java.lang.Object,boolean)",106,114,"/**
 * Removes an incoming edge.
 * @param edge The edge to remove.
 * @param isSelfLoop True if it's a self-loop.
 * @return The previous node associated with the edge.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,<init>,"com.google.common.graph.DirectedGraphConnections:<init>(java.util.Map,java.util.List,int,int)",141,153,"/**
 * Constructs a DirectedGraphConnections object.
 * @param adjacentNodeValues Adjacency data; node -> value.
 * @param orderedNodeConnections Ordered node connections list.
 * @param predecessorCount Number of predecessors.
 * @param successorCount Number of successors.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractDirectedNetworkConnections.java,addInEdge,"com.google.common.graph.AbstractDirectedNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",123,133,"/**
 * Adds an incoming edge to a node.
 * @param edge The edge to add.
 * @param node The target node.
 * @param isSelfLoop True if it's a self-loop.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashUnencodedChars,com.google.common.hash.AbstractHashFunction:hashUnencodedChars(java.lang.CharSequence),38,42,"/**
 * Calculates hash code for unencoded characters in a CharSequence.
 * @param input CharSequence to hash
 * @return HashCode object containing the calculated hash value
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashInt,com.google.common.hash.AbstractHashFunction:hashInt(int),49,52,"/**
 * Calculates the hash code for an integer input.
 * @param input The integer to hash.
 * @return A HashCode object representing the hash.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(java.nio.ByteBuffer),70,73,"/**
 * Calculates the hash code for a byte buffer.
 * @param input The byte buffer to hash.
 * @return HashCode object representing the hash.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,sipHash24,"com.google.common.hash.Hashing:sipHash24(long,long)",210,212,"/**
 * Creates a SipHash-24 function with specified keys.
 * @param k0 First 64-bit key.
 * @param k1 Second 64-bit key.
 * @return SipHash-24 function instance.
 */
","* Returns a hash function implementing the <a href=""https://131002.net/siphash/"">64-bit
   * SipHash-2-4 algorithm</a> using the given seed.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,<init>,com.google.common.io.FileBackedOutputStream:<init>(int),106,108,"/**
* Creates a FileBackedOutputStream with default close behavior.
* @param fileThreshold Threshold size for writing to buffer.
*/
","* Creates a new instance that uses the given file threshold, and does not reset the data when the
   * {@link ByteSource} returned by {@link #asByteSource} is finalized.
   *
   * @param fileThreshold the number of bytes before the stream should switch to buffering to a file
   * @throws IllegalArgumentException if {@code fileThreshold} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,fromInteger,com.google.common.net.InetAddresses:fromInteger(int),1082,1084,"/**
 * Creates an Inet4Address from an integer representation.
 * @param address Integer representing the IPv4 address.
 * @return Inet4Address object.
 */
","* Returns an Inet4Address having the integer value specified by the argument.
   *
   * @param address {@code int}, the 32bit integer address to be converted
   * @return {@link Inet4Address} equivalent of the argument",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,reserve,com.google.common.util.concurrent.RateLimiter:reserve(int),315,320,"/**
 * Reserves a specified number of permits.
 * @param permits The number of permits to reserve.
 * @return The wait length associated with the reservation.
 */
","* Reserves the given number of permits from this {@code RateLimiter} for future use, returning
   * the number of microseconds until the reservation can be consumed.
   *
   * @return time in microseconds to wait until the resource can be acquired, never negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,long,java.util.concurrent.TimeUnit)",408,423,"/**
 * Attempts to acquire the specified number of permits within timeout.
 * @param permits Number of permits to acquire.
 * @param timeout Timeout in the given unit.
 * @param unit Time unit for the timeout.
 * @return True if permits were acquired, false otherwise.
 */
","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DiscreteDomain.java,offset,"com.google.common.collect.DiscreteDomain$IntegerDomain:offset(java.lang.Integer,long)",83,87,"/**
 * Calculates the offset from an origin by a given distance.
 * @param origin The starting point.
 * @param distance The distance to add.
 * @return The calculated offset as an Integer.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeTo,com.google.common.hash.BloomFilter:writeTo(java.io.OutputStream),592,605,"/**
 * Writes the object's state to an OutputStream in a specific format.
 */","* Writes this {@code BloomFilter} to an output stream, with a custom format (not Java
   * serialization). This has been measured to save at least 400 bytes compared to regular
   * serialization.
   *
   * <p>Use {@linkplain #readFrom(InputStream, Funnel)} to reconstruct the written BloomFilter.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedDelaySchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedDelaySchedule(java.time.Duration,java.time.Duration)",129,132,"/**
 * Creates a fixed-delay schedule with given initial and delay durations.
 */","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleWithFixedDelay} method.
     *
     * @param initialDelay the time to delay first execution
     * @param delay the delay between the termination of one execution and the commencement of the
     *     next
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,newFixedRateSchedule,"com.google.common.util.concurrent.AbstractScheduledService$Scheduler:newFixedRateSchedule(java.time.Duration,java.time.Duration)",165,168,"/**
 * Creates a FixedRateSchedule with given initial delay and period.
 * @param initialDelay Delay before first execution (Duration).
 * @param period Period between executions (Duration).
 */
","* Returns a {@link Scheduler} that schedules the task using the {@link
     * ScheduledExecutorService#scheduleAtFixedRate} method.
     *
     * @param initialDelay the time to delay first execution
     * @param period the period between successive executions of the task
     * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,toSafeNanos,"com.google.common.util.concurrent.Monitor:toSafeNanos(long,java.util.concurrent.TimeUnit)",1033,1036,"/**
 * Converts time to nanos, constrains range to prevent overflow.
 */
","* Returns unit.toNanos(time), additionally ensuring the returned value is not at risk of
   * overflowing or underflowing, by bounding the value between 0 and (Long.MAX_VALUE / 4) * 3.
   * Actually waiting for more than 219 years is not supported!",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService$StateSnapshot:<init>(com.google.common.util.concurrent.Service$State),605,607,"/**
 * Constructs a StateSnapshot with the given internal state.
 * @param internalState The initial state for the snapshot.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(com.google.common.base.Ticker),137,139,"/**
 * Creates a new Stopwatch instance and immediately starts it.
 * @param ticker The Ticker to use for timing.
 * @return A started Stopwatch object.
 */
","* Creates (and starts) a new stopwatch, using the specified time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator:remove(),231,247,"/**
 * Removes the last element returned by the iterator.
 * Throws ConcurrentModificationException if frequency <= 0.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,com.google.common.collect.EnumMultiset$Itr:remove(),241,250,"/**
 * Removes the last element returned by the iterator.
 * Updates distinct elements and size accordingly.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,remove,com.google.common.collect.Iterators$EmptyModifiableIterator:remove(),112,115,"/**
 * Removes the last element from the iterator.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,remove,com.google.common.collect.Multisets$MultisetIteratorImpl:remove(),1107,1121,"/**
 * Removes the current element from the multiset.
 * Decrements totalCount and sets canRemove to false.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,orderEntriesByValue,com.google.common.collect.ImmutableBiMap$Builder:orderEntriesByValue(java.util.Comparator),412,417,"/**
 * Orders entries by value using the provided comparator.
 * @param valueComparator Comparator for sorting values.
 * @return This builder for chaining.
 */
","* Configures this {@code Builder} to order entries by value according to the specified
     * comparator.
     *
     * <p>The sort order is stable, that is, if two entries have values that compare as equivalent,
     * the entry that was inserted first will be first in the built map's iteration order.
     *
     * @throws IllegalStateException if this method was already called
     * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,heapForIndex,com.google.common.collect.MinMaxPriorityQueue:heapForIndex(int),484,486,"/**
 * Returns the appropriate heap (min or max) based on the index.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte),105,109,"/**
 * Updates the MAC with a single byte.
 * @param b The byte to update the MAC with.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(byte[]),111,115,"/**
 * Updates the MAC with the provided byte array.
 * @param b The byte array to update the MAC with.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,"com.google.common.hash.MacHashFunction$MacHasher:update(byte[],int,int)",117,121,"/**
 * Updates the MAC with the provided byte array segment.
 * @param b the byte array to update with
 * @param off offset within the array
 * @param len number of bytes to update
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,update,com.google.common.hash.MacHashFunction$MacHasher:update(java.nio.ByteBuffer),123,128,"/**
 * Updates the MAC with the provided byte buffer.
 * @param bytes The byte buffer to update the MAC with.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte),139,143,"/**
 * Updates the digest with a single byte.
 * @param b The byte to be added to the digest.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,"com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(byte[],int,int)",145,149,"/**
 * Updates the digest with the given byte array segment.
 * @param b the byte array to update with
 * @param off offset in the byte array
 * @param len length of the segment to update
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,update,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:update(java.nio.ByteBuffer),151,155,"/**
* Updates the digest with data from the provided ByteBuffer.
* @param bytes The data to be added to the digest.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,concurrencyLevel,com.google.common.collect.Interners$InternerBuilder:concurrencyLevel(int),79,83,"/**
* Sets the concurrency level for the map maker.
* @param concurrencyLevel The desired concurrency level.
* @return This builder instance for chaining.
*/
","* Sets the concurrency level that will be used by the to-be-built {@link Interner}.
     *
     * @see MapMaker#concurrencyLevel(int)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterWrite,com.google.common.cache.CacheBuilder:expireAfterWrite(java.time.Duration),723,729,"/**
 * Sets expiration after write, using the given Duration.
 * @param duration The duration after which writes expire.
 * @return This builder.
 */
","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, or the most recent replacement of its value.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is created that it should be automatically
   *     removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,expireAfterAccess,com.google.common.cache.CacheBuilder:expireAfterAccess(java.time.Duration),796,802,"/**
 * Sets expiration after last access, using the provided Duration.
 * @param duration The duration after which to expire entries.
 * @return This CacheBuilder for fluent configuration.
 */
","* Specifies that each entry should be automatically removed from the cache once a fixed duration
   * has elapsed after the entry's creation, the most recent replacement of its value, or its last
   * access. Access time is reset by all cache read and write operations (including {@code
   * Cache.asMap().get(Object)} and {@code Cache.asMap().put(K, V)}), but not by {@code
   * containsKey(Object)}, nor by operations on the collection-views of {@link Cache#asMap}}. So,
   * for example, iterating through {@code Cache.asMap().entrySet()} does not reset access time for
   * the entries you retrieve.
   *
   * <p>When {@code duration} is zero, this method hands off to {@link #maximumSize(long)
   * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be
   * useful in testing, or to disable caching temporarily without a code change.
   *
   * <p>Expired entries may be counted in {@link Cache#size}, but will never be visible to read or
   * write operations. Expired entries are cleaned up as part of the routine maintenance described
   * in the class javadoc.
   *
   * @param duration the length of time after an entry is last accessed that it should be
   *     automatically removed
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #expireAfterAccess} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,refreshAfterWrite,com.google.common.cache.CacheBuilder:refreshAfterWrite(java.time.Duration),878,884,"/**
 * Sets the duration after which a write refresh is triggered.
 * @param duration The duration after which to refresh.
 * @return This builder.
 */
","* Specifies that active entries are eligible for automatic refresh once a fixed duration has
   * elapsed after the entry's creation, or the most recent replacement of its value. The semantics
   * of refreshes are specified in {@link LoadingCache#refresh}, and are performed by calling {@link
   * CacheLoader#reload}.
   *
   * <p>As the default implementation of {@link CacheLoader#reload} is synchronous, it is
   * recommended that users of this method override {@link CacheLoader#reload} with an asynchronous
   * implementation; otherwise refreshes will be performed during unrelated cache read and write
   * operations.
   *
   * <p>Currently automatic refreshes are performed when the first stale request for an entry
   * occurs. The request triggering refresh will make a synchronous call to {@link
   * CacheLoader#reload}
   * to obtain a future of the new value. If the returned future is already complete, it is returned
   * immediately. Otherwise, the old value is returned.
   *
   * <p><b>Note:</b> <i>all exceptions thrown during refresh will be logged and then swallowed</i>.
   *
   * @param duration the length of time after an entry is created that it should be considered
   *     stale, and thus eligible for refresh
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalArgumentException if {@code duration} is negative
   * @throws IllegalStateException if {@link #refreshAfterWrite} was already set
   * @throws ArithmeticException for durations greater than +/- approximately 292 years
   * @since 25.0 (but only since 33.3.0 in the Android <a
   *     href=""https://github.com/google/guava#guava-google-core-libraries-for-java"">flavor</a>)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakKeys,com.google.common.cache.CacheBuilder:weakKeys(),625,629,"/**
 * Allows keys to be weakly referenced.
 * Returns CacheBuilder for further configuration.
 */
","* Specifies that each key (not value) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of keys. Its {@link Cache#asMap} view will therefore
   * technically violate the {@link Map} specification (in the same way that {@link IdentityHashMap}
   * does).
   *
   * <p>Entries with keys that have been garbage collected may be counted in {@link Cache#size}, but
   * will never be visible to read or write operations; such entries are cleaned up as part of the
   * routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the key strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,weakValues,com.google.common.cache.CacheBuilder:weakValues(),659,663,"/**
 * Allows values in the cache to be weakly referenced.
 * Returns the CacheBuilder for further configuration.
 */
","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching; consider {@link #softValues} instead.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,softValues,com.google.common.cache.CacheBuilder:softValues(),685,689,"/**
 * Configures the cache values to be soft references.
 * @return CacheBuilder instance for chaining.
 */
","* Specifies that each value (not key) stored in the cache should be wrapped in a {@link
   * SoftReference} (by default, strong references are used). Softly-referenced objects will be
   * garbage-collected in a <i>globally</i> least-recently-used manner, in response to memory
   * demand.
   *
   * <p><b>Warning:</b> in most circumstances it is better to set a per-cache {@linkplain
   * #maximumSize(long) maximum size} instead of using soft references. You should only use this
   * method if you are well familiar with the practical consequences of soft references.
   *
   * <p><b>Note:</b> when this method is used, the resulting cache will use identity ({@code ==})
   * comparison to determine equality of values.
   *
   * <p>Entries with values that have been garbage collected may be counted in {@link Cache#size},
   * but will never be visible to read or write operations; such entries are cleaned up as part of
   * the routine maintenance described in the class javadoc.
   *
   * @return this {@code CacheBuilder} instance (for chaining)
   * @throws IllegalStateException if the value strength was already set",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakKeys,com.google.common.collect.MapMaker:weakKeys(),204,208,"/**
 * Configures the map to use weak keys.
 * Returns the current MapMaker instance for chaining.
 */
","* Specifies that each key (not value) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of keys, which is a technical violation of the {@link Map}
   * specification, and may not be what you expect.
   *
   * @throws IllegalStateException if the key strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,weakValues,com.google.common.collect.MapMaker:weakValues(),241,245,"/**
 * Returns a MapMaker configured with weak values.
 * Allows keys to survive garbage collection of values.
 */","* Specifies that each value (not key) stored in the map should be wrapped in a {@link
   * WeakReference} (by default, strong references are used).
   *
   * <p>Weak values will be garbage collected once they are weakly reachable. This makes them a poor
   * candidate for caching.
   *
   * <p><b>Warning:</b> when this method is used, the resulting map will use identity ({@code ==})
   * comparison to determine equality of values. This technically violates the specifications of the
   * methods {@link Map#containsValue containsValue}, {@link ConcurrentMap#remove(Object, Object)
   * remove(Object, Object)} and {@link ConcurrentMap#replace(Object, Object, Object) replace(K, V,
   * V)}, and may not be what you expect.
   *
   * @throws IllegalStateException if the value strength was already set
   * @see WeakReference",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readMapMaker,com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:readMapMaker(java.io.ObjectInputStream),2851,2860,"/**
 * Reads MapMaker configuration from an ObjectInputStream.
 * @param in ObjectInputStream to read configuration from
 * @return MapMaker instance configured from the stream
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,failureCause,com.google.common.util.concurrent.AbstractService:failureCause(),502,505,"/**
 * Returns the failure cause of the snapshot.
 * Returns the failure cause encapsulated in the snapshot.
 */
",* @since 14.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkElementIndex,"com.google.common.base.Preconditions:checkElementIndex(int,int)",1349,1352,"/**
 * Checks if an index is within the valid element range [0, size).
 * @param index Index to check.
 * @param size Size of the element array.
 */","* Ensures that {@code index} specifies a valid <i>element</i> in an array, list or string of size
   * {@code size}. An element index may range from zero, inclusive, to {@code size}, exclusive.
   *
   * @param index a user-supplied index identifying an element of an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is not less than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndex,"com.google.common.base.Preconditions:checkPositionIndex(int,int)",1398,1401,"/**
 * Checks if the index is a valid position within the size.
 * @param index Index to check.
 * @param size Size of the array/list.
 */","* Ensures that {@code index} specifies a valid <i>position</i> in an array, list or string of
   * size {@code size}. A position index may range from zero to {@code size}, inclusive.
   *
   * <p><b>Java 9 users:</b> consider using {@link java.util.Objects#checkIndex(index, size)}
   * instead. However, note that {@code checkIndex()} throws {@code IndexOutOfBoundsException} when
   * {@code size} is negative, while this method throws {@code IllegalArgumentException}.
   *
   * @param index a user-supplied index identifying a position in an array, list or string
   * @param size the size of that array, list or string
   * @return the value of {@code index}
   * @throws IndexOutOfBoundsException if {@code index} is negative or is greater than {@code size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Preconditions.java,checkPositionIndexes,"com.google.common.base.Preconditions:checkPositionIndexes(int,int,int)",1445,1450,"/**
 * Validates position indexes.
 * @param start start index
 * @param end end index
 * @param size array size
 */
","* Ensures that {@code start} and {@code end} specify valid <i>positions</i> in an array, list or
   * string of size {@code size}, and are in order. A position index may range from zero to {@code
   * size}, inclusive.
   *
   * @param start a user-supplied index identifying a starting position in an array, list or string
   * @param end a user-supplied index identifying an ending position in an array, list or string
   * @param size the size of that array, list or string
   * @throws IndexOutOfBoundsException if either index is negative or is greater than {@code size},
   *     or if {@code end} is less than {@code start}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,equalTo,com.google.common.base.Predicates:equalTo(java.lang.Object),187,191,"/**
 * Returns a predicate that checks if an object equals target.
 * @param target The object to compare against.
 * @return A predicate that checks for equality.
 */
","* Returns a predicate that evaluates to {@code true} if the object being tested {@code equals()}
   * the given target or both are null.
   *
   * <p><b>Discouraged:</b> Prefer using {@code x -> Objects.equals(x, target)}, but note that
   * lambdas do not have human-readable {@link #toString()} representations and are not
   * serializable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,createCombined,com.google.common.collect.Collections2$FilteredCollection:createCombined(com.google.common.base.Predicate),131,133,"/**
 * Creates a new filtered collection with combined predicates.
 * @param newPredicate Additional predicate to combine with existing one.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredMultimap,com.google.common.base.Predicate)",2221,2227,"/**
 * Filters a multimap based on combined predicates.
 * @param multimap Multimap to filter.
 * @param entryPredicate Predicate for filtering entries.
 * @return Filtered Multimap.
 */
","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,filter,"com.google.common.collect.Multisets:filter(com.google.common.collect.Multiset,com.google.common.base.Predicate)",317,327,"/**
 * Filters a Multiset based on the provided predicate.
 * @param unfiltered The multiset to filter.
 * @param predicate The predicate to apply to each element.
 * @return A new filtered Multiset.
 */
","* Returns a view of the elements of {@code unfiltered} that satisfy a predicate. The returned
   * multiset is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multiset's iterators, and those of its {@code entrySet()} and {@code
   * elementSet()}, do not support {@code remove()}. However, all other multiset methods supported
   * by {@code unfiltered} are supported by the returned multiset. When given an element that
   * doesn't satisfy the predicate, the multiset's {@code add()} and {@code addAll()} methods throw
   * an {@link IllegalArgumentException}. When methods such as {@code removeAll()} and {@code
   * clear()} are called on the filtered multiset, only elements that satisfy the filter will be
   * removed from the underlying multiset.
   *
   * <p>The returned multiset isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multiset's methods, such as {@code size()}, iterate across every
   * element in the underlying multiset and determine which elements satisfy the filter. When a live
   * view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(com.google.common.base.CharMatcher),140,156,"/**
 * Creates a Splitter using the provided CharMatcher as a separator.
 * @param separatorMatcher CharMatcher to use for splitting the string.
 * @return A Splitter instance.
 */
","* Returns a splitter that considers any single character matched by the given {@code CharMatcher}
   * to be a separator. For example, {@code
   * Splitter.on(CharMatcher.anyOf("";,"")).split(""foo,;bar,quux"")} returns an iterable containing
   * {@code [""foo"", """", ""bar"", ""quux""]}.
   *
   * @param separatorMatcher a {@link CharMatcher} that determines whether a character is a
   *     separator
   * @return a splitter, with default settings, that uses this matcher",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,fixedLength,com.google.common.base.Splitter:fixedLength(int),271,288,"/**
 * Creates a splitter that splits by a fixed length.
 * @param length The length of each split. Must be positive.
 * @return A Splitter object.
 */
","* Returns a splitter that divides strings into pieces of the given length. For example, {@code
   * Splitter.fixedLength(2).split(""abcde"")} returns an iterable containing {@code [""ab"", ""cd"",
   * ""e""]}. The last piece can be smaller than {@code length} but will never be empty.
   *
   * <p><b>Note:</b> if {@link #fixedLength} is used in conjunction with {@link #limit}, the final
   * split piece <i>may be longer than the specified fixed length</i>. This is because the splitter
   * will <i>stop splitting when the limit is reached</i>, and just return the final piece as-is.
   *
   * <p><b>Exception:</b> for consistency with separator-based splitters, {@code split("""")} does not
   * yield an empty iterable, but an iterable containing {@code """"}. This is the only case in which
   * {@code Iterables.size(split(input))} does not equal {@code IntMath.divide(input.length(),
   * length, CEILING)}. To avoid this behavior, use {@code omitEmptyStrings}.
   *
   * @param length the desired length of pieces after splitting, a positive integer
   * @return a splitter, with default settings, that can split into fixed sized pieces
   * @throws IllegalArgumentException if {@code length} is zero or negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,trimResults,com.google.common.base.Splitter:trimResults(),340,342,"/**
 * Returns a splitter that trims whitespace from results.
 */","* Returns a splitter that behaves equivalently to {@code this} splitter, but automatically
   * removes leading and trailing {@linkplain CharMatcher#whitespace whitespace} from each returned
   * substring; equivalent to {@code trimResults(CharMatcher.whitespace())}. For example, {@code
   * Splitter.on(',').trimResults().split("" a, b ,c "")} returns an iterable containing {@code [""a"",
   * ""b"", ""c""]}.
   *
   * @return a splitter with the desired configuration",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createUnstarted,com.google.common.base.Stopwatch:createUnstarted(),110,112,"/**
 * Creates a new, unstarted Stopwatch instance.
 * Returns a new Stopwatch object.
 */
","* Creates (but does not start) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Stopwatch.java,createStarted,com.google.common.base.Stopwatch:createStarted(),128,130,"/**
 * Creates a new {@link Stopwatch} instance and immediately starts it.
 */
","* Creates (and starts) a new stopwatch using {@link System#nanoTime} as its time source.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,elapsedNanos,com.google.common.cache.LocalCache$LoadingValueReference:elapsedNanos(),3597,3599,"/**
 * Returns the elapsed time in nanoseconds since the stopwatch started.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,readMicros,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:readMicros(),470,470,"/**
* Reads the system time in microseconds.
* @return The system time in microseconds.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,encodedLength,com.google.common.base.Utf8:encodedLength(java.lang.CharSequence),48,76,"/**
 * Calculates the UTF-8 encoded length of a CharSequence.
 * Returns the length or throws IllegalArgumentException on overflow.
 */
","* Returns the number of bytes in the UTF-8-encoded form of {@code sequence}. For a string, this
   * method is equivalent to {@code string.getBytes(UTF_8).length}, but is more efficient in both
   * time and space.
   *
   * @throws IllegalArgumentException if {@code sequence} contains ill-formed UTF-16 (unpaired
   *     surrogates)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,awaitTerminationUninterruptibly,com.google.common.util.concurrent.Uninterruptibles:awaitTerminationUninterruptibly(java.util.concurrent.ExecutorService),539,544,"/**
 * Awaits executor termination without interruption.
 * @param executor ExecutorService to wait for termination.
 */
","* Invokes {@code executor.}{@link ExecutorService#awaitTermination(long, TimeUnit)
   * awaitTermination(long, TimeUnit)} uninterruptibly with no timeout.
   *
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,run,com.google.common.base.internal.Finalizer:run(),139,151,"/**
 * Continuously processes queue items until cleanup fails.
 * Uses remove() on queue, breaks on failure, ignores InterruptedException.
 */
","Loops continuously, pulling references off the queue and cleaning them up.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,<init>,com.google.common.collect.ImmutableMultimap$Builder:<init>(),176,176,"/**
 * Default constructor for the Builder class.
 */
","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultimap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,apply,com.google.common.cache.AbstractLoadingCache:apply(java.lang.Object),69,72,"/**
 * Applies the function to the given key and returns the result.
 * @param key The key to apply the function to.
 * @return The result of applying the function.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recreateCacheBuilder,com.google.common.cache.LocalCache$ManualSerializationProxy:recreateCacheBuilder(),4733,4763,"/**
 * Creates and configures a CacheBuilder with defined parameters.
 * @return CacheBuilder instance with configured settings.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Function),140,142,"/**
 * Creates a CacheLoader from a Function.
 * @param function Function to load values.
 * @return CacheLoader that uses the provided function.
 */
","* Returns a cache loader that uses {@code function} to load keys, without supporting either
   * reloading or bulk loading. This allows creating a cache loader using a lambda expression.
   *
   * <p>The returned object is serializable if {@code function} is serializable.
   *
   * @param function the function to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by passing each key to {@code function}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,from,com.google.common.cache.CacheLoader:from(com.google.common.base.Supplier),155,157,"/**
 * Creates a CacheLoader from a Supplier.
 * @param supplier Provides values to be cached.
 * @return A CacheLoader that uses the supplier.
 */
","* Returns a cache loader based on an <i>existing</i> supplier instance. Note that there's no need
   * to create a <i>new</i> supplier just to pass it in here; just subclass {@code CacheLoader} and
   * implement {@link #load load} instead.
   *
   * <p>The returned object is serializable if {@code supplier} is serializable.
   *
   * @param supplier the supplier to be used for loading values; must never return {@code null}
   * @return a cache loader that loads values by calling {@link Supplier#get}, irrespective of the
   *     key",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,loadAll,com.google.common.cache.CacheLoader$1:loadAll(java.lang.Iterable),125,129,"/**
 * Throws an UnsupportedLoadingOperationException. No data loaded.
 */","* Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link
   * LoadingCache#getAll}.
   *
   * <p>If the returned map doesn't contain all requested {@code keys} then the entries it does
   * contain will be cached, but {@code getAll} will throw an exception. If the returned map
   * contains extra keys not present in {@code keys} then all returned entries will be cached, but
   * only the entries for {@code keys} will be returned from {@code getAll}.
   *
   * <p>This method should be overridden when bulk retrieval is significantly more efficient than
   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls
   * to {@link LoadingCache#get} if this method is not overridden.
   *
   * @param keys the unique, non-null keys whose values should be loaded
   * @return a map from each key in {@code keys} to the value associated with that key; <b>may not
   *     contain null values</b>
   * @throws Exception if unable to load the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,hitRate,com.google.common.cache.CacheStats:hitRate(),123,126,"/**
 * Calculates the hit rate. Returns 1.0 if no requests.
 */","* Returns the ratio of cache requests which were hits. This is defined as {@code hitCount /
   * requestCount}, or {@code 1.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,missRate,com.google.common.cache.CacheStats:missRate(),147,150,"/**
 * Calculates the miss rate based on request and miss counts.
 * Returns 0.0 if no requests were made.
 */
","* Returns the ratio of cache requests which were misses. This is defined as {@code missCount /
   * requestCount}, or {@code 0.0} when {@code requestCount == 0}. Note that {@code hitRate +
   * missRate =~ 1.0}. Cache misses include all requests which weren't cache hits, including
   * requests which resulted in either successful or failed loading attempts, and requests which
   * waited for other threads to finish loading. It is thus the case that {@code missCount >=
   * loadSuccessCount + loadExceptionCount}. Multiple concurrent misses for the same key will result
   * in a single load operation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,<init>,com.google.common.cache.ForwardingCache$SimpleForwardingCache:<init>(com.google.common.cache.Cache),136,138,"/**
 * Constructs a SimpleForwardingCache using the provided delegate cache.
 * @param delegate The cache to forward requests to.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache:<init>(),39,39,"/**
* Protected constructor for ForwardingLoadingCache.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache$Strength,com.google.common.cache.LocalCache$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,long,long,long,com.google.common.cache.Weigher,int,com.google.common.cache.RemovalListener,com.google.common.base.Ticker,com.google.common.cache.CacheLoader)",4706,4731,"/**
 * Constructs a ManualSerializationProxy with specified configuration.
 * Parameters define cache behavior and data handling.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,<init>,com.google.common.collect.ForwardingList:<init>(),58,58,"/**
 * Protected constructor for ForwardingList. Prevents external instantiation.
 */
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,<init>,com.google.common.collect.ForwardingMultiset:<init>(),54,54,"/**
* Default constructor for ForwardingMultiset. No-op.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,<init>,com.google.common.collect.ForwardingQueue:<init>(),52,52,"/**
 * Protected constructor for ForwardingQueue, used for subclassing.
 */
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,<init>,com.google.common.collect.ForwardingSet:<init>(),54,54,"/**
 * Default constructor for ForwardingSet. No-op.
 */
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntries:<init>(java.util.Collection),1535,1537,"/**
* Sets the entries for the unmodifiable set.
* @param entries Collection of entries to initialize with.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$CartesianSet:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.CartesianList)",1582,1585,"/**
 * Initializes a new CartesianSet with provided axes and delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListIterator.java,<init>,com.google.common.collect.ForwardingListIterator:<init>(),44,44,"/**
 * Default constructor for ForwardingListIterator.
 */",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,com.google.common.collect.AbstractBiMap)",69,72,"/**
 * Constructs a BiMap with provided backward and forward maps.
 */",Private constructor for inverse bimap.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,<init>,com.google.common.collect.ForwardingConcurrentMap:<init>(),44,44,"/**
* Protected constructor for extending ForwardingConcurrentMap.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,<init>,com.google.common.collect.ForwardingSortedMap:<init>(),63,63,"/**
* Default constructor for ForwardingSortedMap. No-op.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap:<init>(com.google.common.collect.ImmutableMap),173,175,"/**
 * Constructs a new ImmutableClassToInstanceMap with the given delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableBiMap:<init>(com.google.common.collect.BiMap,com.google.common.collect.BiMap)",1711,1715,"/**
 * Constructs an UnmodifiableBiMap with given delegate and inverse.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,<init>,com.google.common.collect.MutableClassToInstanceMap:<init>(java.util.Map),75,77,"/**
 * Initializes the map with the provided delegate map.
 * @param delegate The initial map of class to instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap:<init>(com.google.common.collect.ImmutableMap),98,100,"/**
* Constructs a new ImmutableTypeToInstanceMap with the given delegate.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap:<init>(),41,41,"/**
 * Constructs a new, empty MutableTypeToInstanceMap.
 */",Creates a new map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,<init>,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:<init>(java.util.Map$Entry),161,163,"/**
 * Constructs an UnmodifiableEntry from a given Entry.
 * @param delegate The Entry to wrap in an unmodifiable view.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,<init>,com.google.common.collect.ForwardingListMultimap:<init>(),41,41,"/**
* Protected constructor for ForwardingListMultimap.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,<init>,com.google.common.collect.ForwardingSetMultimap:<init>(),41,41,"/**
* Constructs a new ForwardingSetMultimap.
*/",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableMultimap:<init>(com.google.common.collect.Multimap),687,689,"/**
* Constructs an UnmodifiableMultimap with the given delegate.
* @param delegate The Multimap to wrap; must not be null.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableTable:<init>(com.google.common.collect.Table),544,546,"/**
* Constructs an UnmodifiableTable with the given delegate table.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,<init>,com.google.common.util.concurrent.ForwardingListeningExecutorService:<init>(),40,40,"/**
* Protected constructor for ForwardingListeningExecutorService.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,<init>,com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture:<init>(java.util.concurrent.Future),88,90,"/**
 * Constructs a SimpleForwardingFuture, forwarding to the given delegate.
 * @param delegate The future to forward to. Must not be null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture:<init>(),37,37,"/**
* Default constructor for ForwardingListenableFuture.
*/
",Constructor for use by subclasses.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future,java.util.concurrent.Executor)",128,131,"/**
 * Constructs a ListenableFutureAdapter with a delegate Future and executor.
 * @param delegate The Future to wrap.
 * @param adapterExecutor Executor for adapter tasks.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,get,com.google.common.cache.ForwardingLoadingCache:get(java.lang.Object),44,48,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value associated with the key.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getUnchecked,com.google.common.cache.ForwardingLoadingCache:getUnchecked(java.lang.Object),50,54,"/**
 * Gets the value associated with the key, unchecked.
 * @param key the key to look up
 * @return the value associated with the key
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,getAll,com.google.common.cache.ForwardingLoadingCache:getAll(java.lang.Iterable),56,60,"/**
 * Retrieves all values associated with the given keys.
 * @param keys Iterable of keys to retrieve values for.
 * @return ImmutableMap containing key-value pairs.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,apply,com.google.common.cache.ForwardingLoadingCache:apply(java.lang.Object),62,65,"/**
 * Applies the delegate function to the given key.
 * @param key The key to apply the delegate function to.
 * @return The result of applying the delegate function.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,refresh,com.google.common.cache.ForwardingLoadingCache:refresh(java.lang.Object),67,70,"/**
 * Refreshes the data associated with the given key.
 * @param key The key whose data needs refreshing.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,delegate,com.google.common.cache.ForwardingCache:delegate(),41,42,"/**
 * Returns the delegate cache implementation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,entrySet,com.google.common.collect.ImmutableMultiset:entrySet(),359,363,"/**
 * Returns a set of map entries. Lazily initialized.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getNextEvictable,com.google.common.cache.LocalCache$Segment:getNextEvictable(),2669,2678,"/**
 * Returns the next evictable entry from the access queue.
 * Throws AssertionError if no evictable entry is found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyEntry,"com.google.common.cache.LocalCache:copyEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",1709,1714,"/**
 * Copies an entry to the appropriate segment.
 * @param original The entry to copy.
 * @param newNext The new next entry.
 * @return The copied entry.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,put,"com.google.common.collect.Maps$AbstractFilteredMap:put(java.lang.Object,java.lang.Object)",2863,2867,"/**
 * Puts the specified key-value pair into the map.
 * @param key Key to put into the map.
 * @param value Value associated with the key.
 * @return The previous value associated with the key, or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,putAll,com.google.common.collect.Maps$AbstractFilteredMap:putAll(java.util.Map),2869,2875,"/**
 * Adds all entries from the given map, validating each entry.
 * @param map map containing key-value pairs to add
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,containsKey,com.google.common.collect.Maps$AbstractFilteredMap:containsKey(java.lang.Object),2877,2880,"/**
 * Checks if the map contains the specified key, applying a filter.
 * @param key The key to check.
 * @return True if the key exists and the filter allows it.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AbstractFilteredMap:get(java.lang.Object),2882,2886,"/**
 * Retrieves a value by key, applying a filter if present.
 * @param key The key to retrieve.
 * @return The value or null if filtered out.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Column$EntrySet:clear(),534,537,"/**
 * Clears all elements by removing them.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$1:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new reference entry for a given segment.
 * @param segment Segment to add the entry to.
 * @param key Key for the entry.
 * @param hash Hash code for the key.
 * @param next Next entry in the chain.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1011,1013,"/**
 * Constructs a StrongAccessEntry with key, hash, and next entry.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongAccessWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1103,1105,"/**
 * Constructs a StrongAccessWriteEntry.
 * @param key The key.
 * @param hash The hash code.
 * @param next The next entry.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$StrongWriteEntry:<init>(java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1057,1059,"/**
 * Constructs a StrongWriteEntry with key, hash, and next entry.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$5:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for a segment.
 * @param segment The segment to add to.
 * @param key The key. @param hash The hash. @param next Next entry.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1298,1300,"/**
 * Constructs a WeakAccessEntry with queue, key, hash, and next.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakAccessWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1390,1393,"/**
 * Constructs a WeakAccessWriteEntry.
 * @param queue ReferenceQueue for weak keys.
 * @param key Key for the entry.
 * @param hash Hash code of the key.
 * @param next Next entry in the map.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$WeakWriteEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",1344,1346,"/**
 * Constructs a WeakWriteEntry.
 * @param queue ReferenceQueue for weak keys
 * @param key Key for the entry
 * @param hash Hash code of the key
 * @param next Next entry in the linked list
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,notifyNewValue,com.google.common.cache.LocalCache$LoadingValueReference:notifyNewValue(java.lang.Object),3533,3545,"/**
 * Notifies listeners of a new value or delays notification.
 * @param newValue The new value, or null to delay notification.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$LoadingValueReference:compute(java.lang.Object,java.util.function.BiFunction)",3577,3595,"/**
 * Computes a new value based on the key and previous value.
 * @param key The key for computation.
 * @param function The function to apply.
 * @return The new value or null if an exception occurred.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,run,com.google.common.util.concurrent.AbstractCatchingFuture:run(),77,147,"/**
 * Executes the future, handling exceptions and fallback logic.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,run,com.google.common.util.concurrent.AbstractTransformFuture:run(),67,173,"/**
 * Executes the future and applies the function, handling exceptions.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,get,com.google.common.util.concurrent.ClosingFuture$ValueAndCloser:get(),346,349,"/**
* Retrieves the result from the closing future.
* @return The result of the future, or throws ExecutionException.
*/
","* Returns the final value of the associated {@link ClosingFuture}, or throws an exception as
     * {@link Future#get()} would.
     *
     * <p>Because the asynchronous operation has already completed, this method is synchronous and
     * returns immediately.
     *
     * @throws CancellationException if the computation was cancelled
     * @throws ExecutionException if the computation threw an exception",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,com.google.common.util.concurrent.Futures$CallbackListener:run(),1111,1133,"/**
* Executes the future, handling success or failure and calling the callback.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",95,99,"/**
 * Runs a runnable uninterruptibly with a timeout.
 * @param runnable Runnable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Time unit of the timeout duration.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",135,156,"/**
 * Executes a Callable with a timeout.
 * @param callable Callable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit.
 * @return Result of the Callable.
 * @throws TimeoutException, InterruptedException, ExecutionException
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",158,179,"/**
 * Executes a Callable with a timeout, returning the result.
 * @param callable Callable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit.
 * @return Result of the Callable.
 * @throws TimeoutException, ExecutionException
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",181,199,"/**
 * Executes a runnable with a timeout.
 * @param runnable Runnable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit (e.g., SECONDS, MILLS)
 * @throws TimeoutException, InterruptedException
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,runUninterruptiblyWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:runUninterruptiblyWithTimeout(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",201,219,"/**
 * Runs a runnable with a timeout, throwing TimeoutException if needed.
 * @param runnable Runnable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit (e.g., TimeUnit.SECONDS)
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postWriteCleanup,com.google.common.cache.LocalCache$Segment:postWriteCleanup(),3459,3461,"/**
 * Performs cleanup operations after a write, running unlocked cleanup.
 */",Performs routine cleanup following a write.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$2:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
 * Creates a ValueReference for a segment entry, value, and weight.
 */",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedSoftValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1649,1653,"/**
 * Creates a copy of a value reference with specified queue and entry.
 * @param queue ReferenceQueue to associate with the copy
 * @param value The value to be referenced.
 * @param entry The reference entry.
 * @return A new WeightedSoftValueReference.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$1:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
 * Creates a value reference for a segment, entry, value, and weight.
 */",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,referenceValue,"com.google.common.cache.LocalCache$Strength$3:referenceValue(com.google.common.cache.LocalCache$Segment,com.google.common.cache.ReferenceEntry,java.lang.Object,int)",436,437,"/**
 * Creates a ValueReference for a segment, entry, value, and weight.
 */",Creates a reference for the given value according to this value strength.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyFor,"com.google.common.cache.LocalCache$WeightedWeakValueReference:copyFor(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.cache.ReferenceEntry)",1627,1631,"/**
 * Creates a copy of a value reference with specified queue and entry.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$AccessQueue:remove(java.lang.Object),3859,3870,"/**
 * Removes the specified entry from the access queue.
 * @param o ReferenceEntry to remove; must be a ReferenceEntry.
 * @return True if an entry was removed, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AccessQueue:clear(),3895,3906,"/**
 * Clears the cache, removing all entries and resetting access order.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyAccessEntry,"com.google.common.cache.LocalCache$EntryFactory:copyAccessEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",630,639,"/**
 * Copies access entry details from original to newEntry.
 * Updates access queue links and nullifies original.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,copyWriteEntry,"com.google.common.cache.LocalCache$EntryFactory:copyWriteEntry(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",642,651,"/**
 * Copies write entry data from original to new entry.
 * Updates write order connections and nullifies original.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$WriteQueue:remove(java.lang.Object),3719,3730,"/**
 * Removes the entry from the write queue.
 * @param o ReferenceEntry to remove; returns true if removed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$WriteQueue:clear(),3755,3766,"/**
 * Clears the queue, removing all entries. Resets head pointers.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesWriteEntries,com.google.common.cache.LocalCache:usesWriteEntries(),368,370,"/**
 * Checks if write entries are used.
 * Returns true if write queue is used or recordsWrite() is true.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$Segment:<init>(com.google.common.cache.LocalCache,int,long,com.google.common.cache.AbstractCache$StatsCounter)",1964,1984,"/**
 * Constructs a Segment with given capacity, weight, and stats.
 * @param map Cache map, capacity, weight, stats.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordRead,"com.google.common.cache.LocalCache$Segment:recordRead(com.google.common.cache.ReferenceEntry,long)",2530,2535,"/**
* Records a read access for an entry and updates recency.
* @param entry The ReferenceEntry being accessed.
* @param now The current timestamp.
*/
","* Records the relative order in which this read was performed by adding {@code entry} to the
     * recency queue. At write-time, or when the queue is full past the threshold, the queue will be
     * drained and the entries therein processed.
     *
     * <p>Note: locked reads should use {@link #recordLockedRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordLockedRead,"com.google.common.cache.LocalCache$Segment:recordLockedRead(com.google.common.cache.ReferenceEntry,long)",2544,2550,"/**
 * Records a read access for a reference entry.
 * Updates access time if recordsAccess is enabled.
 */
","* Updates the eviction metadata that {@code entry} was just read. This currently amounts to
     * adding {@code entry} to relevant eviction lists.
     *
     * <p>Note: this method should only be called under lock, as it directly manipulates the
     * eviction queues. Unlocked reads should use {@link #recordRead}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordWrite,"com.google.common.cache.LocalCache$Segment:recordWrite(com.google.common.cache.ReferenceEntry,int,long)",2556,2570,"/**
 * Records a write operation for an entry, updating weights and times.
 * @param entry The ReferenceEntry being written.
 * @param weight The weight of the write.
 * @param now The current timestamp.
 */
","* Updates eviction metadata that {@code entry} was just written. This currently amounts to
     * adding {@code entry} to relevant eviction lists.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,recordsTime,com.google.common.cache.LocalCache:recordsTime(),364,366,"/**
 * Checks if time recording is enabled.
 * Returns true if write or access recording is enabled.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,usesAccessEntries,com.google.common.cache.LocalCache:usesAccessEntries(),372,374,"/**
 * Checks if access entries are used. Returns true if access queue or recordsAccess is true.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache:getLiveValue(com.google.common.cache.ReferenceEntry,long)",1773,1786,"/**
 * Retrieves the live value from a reference entry, null if expired.
 * @param entry The reference entry.
 * @param now Current timestamp.
 * @return The live value or null if not found/expired.
 */
","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
   * loading, or expired. Unlike {@link Segment#getLiveValue} this method does not attempt to clean
   * up stale entries. As such it should only be called outside a segment context, such as during
   * iteration.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$AbstractCacheSet:size(),4538,4541,"/**
 * Returns the number of elements in the cache.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,size,com.google.common.cache.LocalCache$Values:size(),4590,4593,"/**
 * Returns the number of elements in the cache.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.HashMultiset:size(),185,188,"/**
 * Returns the number of elements in the collection.
 * Returns a saturated integer representation of the size.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,size,com.google.common.collect.LinkedHashMultiset:size(),185,188,"/**
 * Returns the number of elements in the collection.
 * Uses saturated cast to prevent integer overflow.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,size,com.google.common.collect.Iterables:size(java.lang.Iterable),129,133,"/**
 * Returns the number of elements in the iterable.
 * Uses Collection.size() if available, otherwise Iterators.size().
 */
",Returns the number of elements in {@code iterable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$EntrySet:size(),2771,2774,"/**
 * Returns the number of key-value mappings in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$KeySet:size(),2683,2686,"/**
 * Returns the number of key-value mappings in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,size,com.google.common.collect.MapMakerInternalMap$Values:size(),2717,2720,"/**
 * Returns the number of key-value mappings in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSize,com.google.common.collect.ForwardingMultiset:standardSize(),274,276,"/**
 * Returns the size of the multiset in linear time.
 */","* A sensible, albeit inefficient, definition of {@link #size} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #size} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,size,com.google.common.collect.Multisets$ViewMultiset:size(),1173,1176,"/**
 * Returns the number of elements in this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$OnePlusArrayList:size(),348,351,"/**
 * Returns the number of elements in this IntArray.
 * Uses IntMath.saturatedAdd to prevent integer overflow.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$TwoPlusArrayList:size(),379,382,"/**
 * Returns the number of elements in the array, plus 2.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractBaseGraph:degree(java.lang.Object),136,145,"/**
 * Returns the degree of a node.
 * @param node the node to get the degree of
 * @return the degree of the node
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArrayInternal,"com.google.common.io.ByteStreams:toByteArrayInternal(java.io.InputStream,java.util.Queue,int)",175,209,"/**
 * Reads data from an InputStream into a byte array.
 * @param in InputStream to read from
 * @param bufs Queue of byte arrays
 * @param totalLen Total bytes read so far
 * @return Byte array containing read data
 * @throws IOException if an I/O error occurs
 */
","* Returns a byte array containing the bytes from the buffers already in {@code bufs} (which have
   * a total combined length of {@code totalLen} bytes) followed by all bytes remaining in the given
   * input stream.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,saturatedPow,"com.google.common.math.IntMath:saturatedPow(int,int)",571,616,"/**
 * Calculates b to the power of k, handling saturation.
 * @param b base
 * @param k exponent (non-negative)
 * @return Result of b^k, saturated to Integer.MAX/MIN_VALUE.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,setDelegates,"com.google.common.collect.AbstractBiMap:setDelegates(java.util.Map,java.util.Map)",97,105,"/**
 * Sets the forward and inverse delegate maps.
 * Maps must be empty and not equal.
 */
","* Specifies the delegate maps going in each direction. Called by the constructor and by
   * subclasses during deserialization.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,all,com.google.common.collect.GeneralRange:all(java.util.Comparator),60,62,"/**
 * Creates a GeneralRange representing all elements, using the given comparator.
 */",Returns the whole range relative to the specified comparator.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,downTo,"com.google.common.collect.GeneralRange:downTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",68,71,"/**
 * Creates a GeneralRange extending downwards from the endpoint.
 * @param comparator Comparator for range ordering.
 * @param endpoint  The endpoint of the range.
 * @param boundType The bound type of the range.
 */
","* Returns everything above the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,upTo,"com.google.common.collect.GeneralRange:upTo(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType)",77,80,"/**
 * Creates a GeneralRange up to a specified endpoint.
 * @param comparator for ordering elements
 * @param endpoint exclusive endpoint value
 * @param boundType the bound type of the range
 */
","* Returns everything below the endpoint relative to the specified comparator, with the specified
   * endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,range,"com.google.common.collect.GeneralRange:range(java.util.Comparator,java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",86,93,"/**
 * Creates a new GeneralRange with specified bounds and types.
 * @param comparator Comparator for range elements.
 * @param lower Lower bound value.
 * @param lowerType Lower bound type.
 * @param upper Upper bound value.
 * @param upperType Upper bound type.
 */
","* Returns everything between the endpoints relative to the specified comparator, with the
   * specified endpoint behavior.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,intersect,com.google.common.collect.GeneralRange:intersect(com.google.common.collect.GeneralRange),193,239,"/**
 * Computes the intersection of this range with another.
 * @param other The other range to intersect with.
 * @return A new range representing the intersection.
 */
","* Returns the intersection of the two ranges, or an empty range if their intersection is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$TransformedEntriesMap:get(java.lang.Object),2157,2160,"/**
* Retrieves the value associated with the given key.
* @param key The key to retrieve.
* @return The value or null if the key is not found.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getElement,com.google.common.collect.TreeMultiset$1:getElement(),1031,1035,"/**
 * Returns the element. Uses unchecked cast for nullable type safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,"com.google.common.collect.TreeMultiset$AvlNode:count(java.util.Comparator,java.lang.Object)",644,653,"/**
 * Counts elements less than or equal to the given element.
 * @param comparator Comparator for element comparison.
 * @param e The element to compare against.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,ceiling,"com.google.common.collect.TreeMultiset$AvlNode:ceiling(java.util.Comparator,java.lang.Object)",1008,1018,"/**
 * Finds the smallest element >= e in the tree, using the comparator.
 * @param comparator comparator for element comparison
 * @param e element to find the ceiling for
 * @return AvlNode with the ceiling element or null if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,floor,"com.google.common.collect.TreeMultiset$AvlNode:floor(java.util.Comparator,java.lang.Object)",1020,1029,"/**
 * Finds the greatest element <= e in the subtree.
 * @param comparator comparator for element comparison
 * @param e element to find the floor for
 * @return AvlNode with the floor element or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putInBothMaps,"com.google.common.collect.AbstractBiMap:putInBothMaps(java.lang.Object,java.lang.Object,boolean)",136,152,"/**
* Puts a key-value pair in both maps, updating the inverse map.
* @param key The key to put.
* @param value The value to associate with the key.
* @param force Whether to force the put, removing inverse entry.
* @return The previous value associated with the key, or null.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.AbstractBiMap:remove(java.lang.Object),166,170,"/**
 * Removes the mapping for a key from both maps.
 * @param key The key whose mapping to be removed.
 * @return The removed value, or null if key not present.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,com.google.common.collect.Collections2$PermutationIterator:<init>(java.util.List),636,644,"/**
 * Initializes the permutation iterator with a list.
 * @param list The list to generate permutations from.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConsumingQueueIterator.java,<init>,com.google.common.collect.ConsumingQueueIterator:<init>(java.util.Queue),31,33,"/**
 * Constructs a queue iterator with the given queue.
 * @param queue The queue to iterate over. Must not be null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator:<init>(com.google.common.graph.BaseGraph),46,49,"/**
 * Initializes the iterator with the provided graph.
 * @param graph The base graph to iterate over.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,next,com.google.common.collect.AbstractIterator:next(),149,161,"/**
 * Returns the next element in this sequence.
 * Throws NoSuchElementException if no such element exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIterator.java,peek,com.google.common.collect.AbstractIterator:peek(),170,177,"/**
 * Returns the next element in the sequence without removing it.
 * @return The next element or throws NoSuchElementException.
 */
","* Returns the next element in the iteration without advancing the iteration, according to the
   * contract of {@link PeekingIterator#peek()}.
   *
   * <p>Implementations of {@code AbstractIterator} that wish to expose this functionality should
   * implement {@code PeekingIterator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:spliterator(),1429,1432,"/**
 * Returns a spliterator over the map entries.
 * Wraps entries from the submap using wrapEntry.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator:next(),1463,1468,"/**
 * Returns the next entry in the iterator.
 * @return An Entry object representing the next key-collection pair.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerEntry(java.lang.Object),1551,1555,"/**
 * Returns the entry immediately before the given key, or null.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lowerKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lowerKey(java.lang.Object),1557,1560,"/**
* Returns the greatest key strictly less than the given key.
* @param key The key to compare against.
* @return The lower key, or null if none exists.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorEntry(java.lang.Object),1562,1566,"/**
 * Returns an entry with the greatest key <= given key, or null.
 * @param key The key to floor.
 * @return Entry or null if no such key exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floorKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:floorKey(java.lang.Object),1568,1571,"/**
* Returns the greatest key <= to the specified key (or null).
* @param key The key to compare against.
* @return The floor key, or null if none exists.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingEntry(java.lang.Object),1573,1577,"/**
 * Returns the least entry whose key is greater than or equal to the given key.
 * @param key the key to compare against
 * @return Entry or null if no such entry exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceilingKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:ceilingKey(java.lang.Object),1579,1582,"/**
 * Returns the smallest key greater than or equal to the given key.
 * @param key The key to compare against.
 * @return The ceiling key or null if none exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherEntry(java.lang.Object),1584,1588,"/**
* Returns the entry immediately following the given key, or null.
* @param key the key to search for
* @return the higher entry, or null if none exists
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higherKey,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:higherKey(java.lang.Object),1590,1593,"/**
 * Returns the next higher key than the given key, or null if none.
 * @param key The key to find the next higher key for.
 * @return The next higher key, or null if none exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,firstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:firstEntry(),1595,1599,"/**
* Returns the first entry in the sorted map, wrapped if needed.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:lastEntry(),1601,1605,"/**
* Returns the last entry in the sorted map, wrapped.
* Returns null if the map is empty.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingMap(),1629,1632,"/**
* Returns a descending map backed by the sorted map.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,createKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:createKeySet(),1639,1642,"/**
 * Creates a navigable key set from the sorted map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1660,1667,"/**
 * Returns a submap containing entries between fromKey and toKey.
 * @param fromKey start key (inclusive or exclusive)
 * @param toKey end key (inclusive or exclusive)
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object,boolean)",1674,1677,"/**
 * Returns a head map, containing entries with keys less than {@code toKey}.
 * @param toKey Exclusive key for the head map boundary.
 * @param inclusive Whether {@code toKey} is inclusive or exclusive.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object,boolean)",1684,1688,"/**
 * Returns a tail map containing entries with keys >= fromKey.
 * @param fromKey the key from which the tail map starts
 * @param inclusive whether fromKey is included in the tail map
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap:keySet(),1528,1532,"/**
 * Returns a sorted set view of the keys in this map.
 * Lazily initializes if not already created.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollFirstEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollFirstEntry(),1607,1610,"/**
* Retrieves and removes the first entry as a Map.Entry.
* Returns null if the map is empty.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap:removeAll(java.lang.Object),254,268,"/**
 * Removes all values for a key.
 * @param key the key to remove
 * @return Collection of removed values, or empty collection.
 */
","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:lower(java.lang.Object),1070,1073,"/**
* Returns the greatest key strictly less than the given key.
* @param k the key to compare against
* @return the lower key or null if none exists
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:floor(java.lang.Object),1075,1078,"/**
 * Returns the greatest key strictly less than the given key, or null.
 * @param k the key to compare against
 * @return the floor key, or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:ceiling(java.lang.Object),1080,1083,"/**
* Returns the smallest key greater than or equal to the given key.
* @param k the key to compare against
* @return the ceiling key or null if none exists
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:higher(java.lang.Object),1085,1088,"/**
 * Returns the next higher key than {@code k} or {@code null} if none.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingSet(),1100,1103,"/**
 * Returns a descending view of the key set.
 * Returns a NavigableKeySet ordered from high to low.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object,boolean)",1115,1118,"/**
* Returns a view of the keys less than {@code toElement}.
* @param toElement the exclusive upper bound
* @param inclusive if true, {@code toElement} is included
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1126,1134,"/**
 * Returns a view of the sorted map that contains elements between fromElement and toElement.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object,boolean)",1141,1144,"/**
* Returns a tail set from the given element, inclusive flag.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,validateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:validateIterator(),464,469,"/**
 * Validates the iterator's state; throws ConcurrentModificationException if modified.
 */","* If the delegate changed since the iterator was created, the iterator is no longer valid.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,size,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:size(),398,402,"/**
 * Returns the number of elements in this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,equals,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:equals(java.lang.Object),404,418,"/**
 * Checks if this multimap is equal to the given object.
 * @param object the object to compare to
 * @return true if equal, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hashCode,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:hashCode(),420,424,"/**
 * Returns the hash code value for this object. Delegates to the delegate's hashCode.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,toString,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:toString(),426,430,"/**
 * Returns a string representation of the object.
 * Delegates to the underlying delegate's toString().
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,iterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:iterator(),436,440,"/**
 * Returns an iterator over the map's values. Refreshes if empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,spliterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:spliterator(),442,446,"/**
* Returns a Spliterator for the elements in this collection.
* Uses delegate's spliterator after refreshing if empty.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,add,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:add(java.lang.Object),497,509,"/**
* Adds the given value to the set.
* @param value The value to add.
* @return True if the set changed, false otherwise.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,contains,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:contains(java.lang.Object),534,538,"/**
 * Checks if the set contains the specified element.
 * @param o element to check for
 * @return true if the set contains the element, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,containsAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:containsAll(java.util.Collection),540,544,"/**
 * Checks if this collection contains all elements of the given collection.
 * @param c collection to check
 * @return true if this collection contains all elements of c
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:remove(java.lang.Object),557,566,"/**
 * Removes the specified object from the set.
 * @param o object to be removed
 * @return true if the set changed after removal
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,lower,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:lower(java.lang.Object),702,705,"/**
 * Returns the greatest element strictly less than the given element.
 * @param v the element to compare against
 * @return the lower element, or null if none exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,floor,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:floor(java.lang.Object),707,710,"/**
 * Returns the greatest element less than or equal to the given value.
 * @param v the value to compare
 * @return the floor element or null if none exists
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,ceiling,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:ceiling(java.lang.Object),712,715,"/**
* Returns the least element greater than or equal to given value.
* @param v the value to compare against
* @return the ceiling element or null if none exists
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,higher,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:higher(java.lang.Object),717,720,"/**
 * Returns the next higher element than the given element, or null.
 * @param v the element to compare
 * @return the next higher element or null
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingSet,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingSet(),736,739,"/**
 * Returns a descending set backed by the map's elements.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:descendingIterator(),741,744,"/**
* Returns an iterator to traverse the set in descending order.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",746,754,"/**
* Returns a view of the sorted set between fromElement and toElement.
* @param fromElement lower bound (inclusive)
* @param toElement upper bound (inclusive)
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:headSet(java.lang.Object,boolean)",756,759,"/**
 * Returns a head set, containing elements less than toElement.
 * @param toElement Element to end the head set, inclusive or exclusive.
 * @param inclusive Whether to include toElement in the result.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,"com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:tailSet(java.lang.Object,boolean)",761,764,"/**
 * Returns a tail set from the given element, inclusive.
 * @param fromElement the starting element for the tail set
 * @param inclusive whether to include the fromElement
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,put,"com.google.common.collect.AbstractListMultimap:put(java.lang.Object,java.lang.Object)",118,122,"/**
 * Puts the specified key-value pair into the map.
 * Delegates to the superclass implementation.
 * @param key The key for the mapping.
 * @param value The value for the mapping.
 * @return True if the key was associated with the value.
 */
","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,put,"com.google.common.collect.AbstractSetMultimap:put(java.lang.Object,java.lang.Object)",139,143,"/**
 * Puts the specified key-value pair into the map, delegating to super.
 * @param key The key for the mapping.
 * @param value The value for the mapping.
 * @return True if the map changed as a result of the put operation.
 */
","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} if the method increased the size of the multimap, or {@code false} if the
   *     multimap already contained the key-value pair",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,get,com.google.common.collect.AbstractListMultimap:get(java.lang.Object),80,83,"/**
* Retrieves a list of values associated with the given key.
* @param key The key to retrieve the list for.
* @return A list of values or null if the key is not found.
*/
","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,get,com.google.common.collect.AbstractSetMultimap:get(java.lang.Object),78,81,"/**
 * Returns the value associated with the given key, or null.
 * @param key the key to look up
 * @return Set of values or null if the key is not found
 */","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,containsValue,com.google.common.collect.LinkedListMultimap:containsValue(java.lang.Object),590,593,"/**
 * Checks if the map contains the specified value.
 * @param value value to check for
 * @return true if value is present, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,entries,com.google.common.collect.AbstractSetMultimap:entries(),89,92,"/**
 * Returns a set of map entries, delegating to the superclass.
 */","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,iterator,com.google.common.collect.AbstractMultimap$Values:iterator(),192,195,"/**
 * Returns an iterator over the values in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,valueSpliterator,com.google.common.collect.AbstractMultimap:valueSpliterator(),222,224,"/**
 * Creates a spliterator for the values of this map.
 * @return A Spliterator for the map's values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,writeObject,com.google.common.collect.LinkedListMultimap:writeObject(java.io.ObjectOutputStream),843,852,"/**
 * Writes the object's state to the stream for serialization.
 */
","* @serialData the number of distinct keys, and then for each distinct key: the first key, the
   *     number of values for that key, and the key's values, followed by successive keys and values
   *     from the entries() ordering",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.AbstractMapBasedMultiset:setCount(java.lang.Object,int)",314,335,"/**
 * Sets the count for an element.
 * @param element The element to set the count for.
 * @param count The new count value.
 * @return The previous count value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.HashMultiset:clear(),169,176,"/**
 * Clears the map, resetting counts to 0 and removing all entries.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,clear,com.google.common.collect.LinkedHashMultiset:clear(),169,176,"/**
 * Clears the map, resetting counts to 0 and removing all entries.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toStringImpl,com.google.common.collect.Collections2:toStringImpl(java.util.Collection),333,348,"/**
 * Converts a collection to a string representation.
 * @param collection Collection to convert; returns ""[...]"" string.
 */
",An implementation of {@link Collection#toString()}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toStringImpl,com.google.common.collect.Maps:toStringImpl(java.util.Map),3893,3904,"/**
 * Converts a map to a string representation.
 * @param map The map to convert.
 * @return String representation of the map.
 */
",An implementation of {@link Map#toString}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayListWithExpectedSize,com.google.common.collect.Lists:newArrayListWithExpectedSize(int),200,204,"/**
 * Creates an ArrayList with a size hint for improved performance.
 * @param estimatedSize The expected size of the ArrayList.
 */
","* Creates an {@code ArrayList} instance to hold {@code estimatedSize} elements, <i>plus</i> an
   * unspecified amount of padding; you almost certainly mean to call {@link
   * #newArrayListWithCapacity} (see that method for further advice on usage).
   *
   * <p><b>Note:</b> This method will soon be deprecated. Even in the rare case that you do want
   * some amount of padding, it's best if you choose your desired amount explicitly.
   *
   * @param estimatedSize an estimate of the eventual {@link List#size()} of the new list
   * @return a new, empty {@code ArrayList}, sized appropriately to hold the estimated number of
   *     elements
   * @throws IllegalArgumentException if {@code estimatedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,combine,com.google.common.util.concurrent.CollectionFuture$ListFuture:combine(java.util.List),94,101,"/**
 * Extracts values from a list of Present objects.
 * @param values List of Present objects containing values.
 * @return List of extracted values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newHashMapWithExpectedSize,com.google.common.collect.Maps:newHashMapWithExpectedSize(int),276,280,"/**
 * Creates a HashMap with an initial capacity based on expectedSize.
 */","* Creates a {@code HashMap} instance, with a high enough ""initial capacity"" that it <i>should</i>
   * hold {@code expectedSize} elements without growth. This behavior cannot be broadly guaranteed,
   * but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method
   * isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code HashMap} with enough capacity to hold {@code expectedSize} entries
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Maps:newLinkedHashMapWithExpectedSize(int),359,363,"/**
 * Creates a LinkedHashMap with the given expected size.
 * @param expectedSize The initial capacity for the map.
 * @return A new LinkedHashMap with the specified size.
 */
","* Creates a {@code LinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned map.
   *
   * @param expectedSize the number of entries you expect to add to the returned map
   * @return a new, empty {@code LinkedHashMap} with enough capacity to hold {@code expectedSize}
   *     entries without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSetWithExpectedSize,com.google.common.collect.Sets:newHashSetWithExpectedSize(int),263,267,"/**
 * Creates a new HashSet with the specified expected size.
 * @param expectedSize The initial capacity for the HashSet.
 */
","* Returns a new hash set using the smallest initial table size that can hold {@code expectedSize}
   * elements without resizing. Note that this is not what {@link HashSet#HashSet(int)} does, but it
   * is what most users want and expect it to do.
   *
   * <p>This behavior can't be broadly guaranteed, but has been tested with OpenJDK 1.7 and 1.8.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty hash set with enough capacity to hold {@code expectedSize} elements
   *     without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Sets:newLinkedHashSetWithExpectedSize(int),360,364,"/**
 * Creates a LinkedHashSet with the specified expected size.
 * @param expectedSize The initial capacity for the LinkedHashSet.
 */
","* Creates a {@code LinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth. This behavior cannot be
   * broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed
   * that the method isn't inadvertently <i>oversizing</i> the returned set.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code LinkedHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,arrayListValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:arrayListValues(),285,287,"/**
 * Creates a {@link ListMultimapBuilder} with ArrayList values.
 * Uses the default expected values per key.
 */
",Uses an {@link ArrayList} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:hashSetValues(),327,329,"/**
 * Creates a builder for a multimap with HashSet values.
 * Uses the default expected values per key.
 */
",Uses a hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashSetValues,com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys:linkedHashSetValues(),350,352,"/**
* Creates a builder for a multimap with LinkedHashSet values.
* Uses default expected values per key.
*/
",Uses an insertion-ordered hash-based {@code Set} to store value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,hashKeys,com.google.common.collect.MultimapBuilder:hashKeys(),73,75,"/**
 * Creates a MultimapBuilder with hash keys.
 * Uses the default expected keys count.
 */
",Uses a hash table to map keys to value collections.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,linkedHashKeys,com.google.common.collect.MultimapBuilder:linkedHashKeys(),101,103,"/**
 * Creates a MultimapBuilder with linked hash keys.
 * Uses default expected keys.
 */
","* Uses a hash table to map keys to value collections.
   *
   * <p>The collections returned by {@link Multimap#keySet()}, {@link Multimap#keys()}, and {@link
   * Multimap#asMap()} will iterate through the keys in the order that they were first added to the
   * multimap, save that if all values associated with a key are removed and then the key is added
   * back into the multimap, that key will come last in the key iteration order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,immutableEntry,"com.google.common.collect.Multisets:immutableEntry(java.lang.Object,int)",258,261,"/**
 * Creates an immutable entry with the given object and count.
 * @param e The object for the entry.
 * @param n The count associated with the object.
 * @return An ImmutableEntry object.
 */
","* Returns an immutable multiset entry with the specified element and count. The entry will be
   * serializable if {@code e} is.
   *
   * @param e the element to be associated with the returned entry
   * @param n the count to be associated with the returned entry
   * @throws IllegalArgumentException if {@code n} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,<init>,"com.google.common.collect.RegularImmutableMultiset$NonTerminalEntry:<init>(java.lang.Object,int,com.google.common.collect.Multisets$ImmutableEntry)",142,145,"/**
 * Constructs a NonTerminalEntry with element, count, and next.
 * @param element The element stored in this entry.
 * @param count The count associated with the element.
 * @param nextInBucket Next entry in the bucket.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int)",85,89,"/**
 * Sets the count for a given element.
 * @param element The element to set the count for.
 * @param count The new count value.
 * @return The new count value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int)",215,217,"/**
 * Returns the count of the given element in this multiset.
 * @param element The element to count.
 * @param count The count to set for the element.
 */
","* A sensible definition of {@link #setCount(Object, int)} in terms of {@link #count(Object)},
   * {@link #add(Object, int)}, and {@link #remove(Object, int)}. {@link #entrySet()}. If you
   * override any of these methods, you may wish to override {@link #setCount(Object, int)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.AbstractMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
* Sets the count of an element.
* @param element The element to set the count for.
* @param oldCount The old count value.
* @param newCount The new count value.
* @return True if the count was updated.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardSetCount,"com.google.common.collect.ForwardingMultiset:standardSetCount(java.lang.Object,int,int)",226,228,"/**
 * Sets the count of an element.
 * @param element The element to set the count for.
 * @param oldCount The current count.
 * @param newCount The new count to set.
 * @return True if the count was updated.
 */
","* A sensible definition of {@link #setCount(Object, int, int)} in terms of {@link #count(Object)}
   * and {@link #setCount(Object, int)}. If you override either of these methods, you may wish to
   * override {@link #setCount(Object, int, int)} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,equals,com.google.common.collect.ImmutableSet:equals(java.lang.Object),284,296,"/**
 * Checks if this set is equal to another object.
 * @param object The object to compare to.
 * @return True if the sets are equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$PowerSet:hashCode(),1768,1776,"/**
 * Calculates a hash code based on the input set's key set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,contains,com.google.common.collect.AbstractMultimap$Values:contains(java.lang.Object),207,210,"/**
* Checks if the multimap contains the specified value.
* @param o the value to check for
* @return true if the multimap contains the value, false otherwise
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,containsEntry,"com.google.common.collect.LinkedListMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,63,"/**
 * Checks if the map contains an entry with the given key and value.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,remove,"com.google.common.collect.LinkedListMultimap:remove(java.lang.Object,java.lang.Object)",65,70,"/**
 * Removes the specified value from the collection associated with the key.
 * @param key the key of the collection
 * @param value the value to remove
 * @return true if the value was removed, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,hashCode,com.google.common.collect.LinkedListMultimap:hashCode(),251,254,"/**
 * Returns the hash code value for this object, based on its map representation.
 */
","* Returns the hash code for this multimap.
   *
   * <p>The hash code of a multimap is defined as the hash code of the map view, as returned by
   * {@link Multimap#asMap}.
   *
   * @see Map#hashCode",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,toString,com.google.common.collect.LinkedListMultimap:toString(),262,265,"/**
 * Returns a string representation of the object, using asMap().
 */","* Returns a string representation of the multimap, generated by calling {@code toString} on the
   * map returned by {@link Multimap#asMap}.
   *
   * @return a string representation of the multimap",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,com.google.common.collect.LinkedListMultimap:putAll(com.google.common.collect.Multimap),93,101,"/**
 * Adds all entries from the given multimap to this multimap.
 * @param multimap the multimap whose entries to add
 * @return true if this multimap changed, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,equals,com.google.common.collect.LinkedListMultimap:equals(java.lang.Object),238,241,"/**
 * Checks if two multimaps are equal using Multimaps.equalsImpl.
 * @param object The object to compare to.
 * @return True if the multimaps are equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,elementSet,com.google.common.collect.AbstractSortedMultiset:elementSet(),51,54,"/**
* Returns the set of elements in this map's keys.
* Delegates to the superclass implementation.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.ConcurrentHashMultiset:elementSet(),130,137,"/**
 * Returns a set containing all elements in this collection.
 * Lazily initializes the set if it's not already created.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,elementSet,com.google.common.collect.EnumMultiset:elementSet(),130,137,"/**
 * Returns the set of elements in this collection. Lazily initialized.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.AbstractMapBasedMultiset:entrySet(),83,86,"/**
* Returns the entry set of this multiset. Delegates to superclass.
*/","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.AbstractMultiset:isEmpty(),49,52,"/**
 * Checks if the map is empty.
 * Returns true if the map contains no entries, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,hashCode,com.google.common.collect.AbstractMultiset:hashCode(),217,220,"/**
 * Calculates the hash code based on the entry set's hash code.
 */","* {@inheritDoc}
   *
   * <p>This implementation returns the hash code of {@link Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,toString,com.google.common.collect.AbstractMultiset:toString(),228,231,"/**
 * Returns the string representation of this map, based on entry set.
 */","* {@inheritDoc}
   *
   * <p>This implementation returns the result of invoking {@code toString} on {@link
   * Multiset#entrySet()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.ConcurrentHashMultiset:entrySet(),164,171,"/**
 * Returns a set of entries for the map. Lazily initialized.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,entrySet,com.google.common.collect.EnumMultiset:entrySet(),164,171,"/**
 * Returns a set of entries for the map. Lazily initialized.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,firstKey,com.google.common.collect.AbstractNavigableMap:firstKey(),61,70,"/**
 * Returns the first key in the map.
 * @return The first key, or throws NoSuchElementException if empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,lastKey,com.google.common.collect.AbstractNavigableMap:lastKey(),72,81,"/**
 * Returns the key associated with the last entry in the map.
 * @return Key of the last entry, or throws NoSuchElementException.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstEntry,com.google.common.collect.ForwardingNavigableMap:standardFirstEntry(),188,190,"/**
 * Returns the first entry in the entry set, or null if empty.
 */","* A sensible definition of {@link #firstEntry} in terms of the {@code iterator()} of {@link
   * #entrySet}. If you override {@code entrySet}, you may wish to override {@code firstEntry} to
   * forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,ceiling,com.google.common.collect.ImmutableSortedSet:ceiling(java.lang.Object),738,741,"/**
* Returns the greatest element less than or equal to given element.
* @param e the element to find the ceiling of
* @return the ceiling element or null if none exists
*/
",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,higher,com.google.common.collect.ImmutableSortedSet:higher(java.lang.Object),746,750,"/**
 * Returns the next higher element than {@code e}, or null if none.
 * @param e the element to find the next higher element for
 * @return the next higher element, or null if none exists
 */
",* @since 12.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(),50,52,"/**
 * Creates a new, empty TreeRangeSet.
 * Returns an empty TreeRangeSet instance.
 */",Creates an empty {@code TreeRangeSet} instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,contains,com.google.common.collect.ImmutableRangeSet$AsSet:contains(java.lang.Object),664,676,"/**
 * Checks if the set contains the given element.
 * @param o element to check; returns false if null.
 * @return true if the element is contained, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,contains,com.google.common.collect.TreeRangeSet$Complement:contains(java.lang.Comparable),30,33,"/**
 * Checks if the set contains the given value.
 * @param value The value to search for.
 * @return True if the value is present, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,contains,com.google.common.collect.TreeRangeSet$SubRangeSet:contains(java.lang.Comparable),407,411,"/**
 * Checks if the value is within the range.
 * @param value The value to check. Returns true if within range.
 */
","* Returns {@code true} if {@code value} is within the bounds of this range. For example, on the
   * range {@code [0..2)}, {@code contains(1)} returns {@code true}, while {@code contains(2)}
   * returns {@code false}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.ImmutableRangeSet:clear(),53,56,"/**
 * Removes all elements from the range.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractRangeSet.java,clear,com.google.common.collect.TreeRangeSet:clear(),53,56,"/**
 * Removes all elements from the range.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap,com.google.common.collect.Range)",465,470,"/**
 * Initializes the ComplementRangesByLowerBound with given ranges and window.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:<init>(com.google.common.collect.Range,com.google.common.collect.Range,java.util.NavigableMap)",694,702,"/**
 * Initializes a SubRangeSetRangesByLowerBound object.
 * @param lowerBoundWindow Lower bound window range.
 * @param restriction Restriction range.
 * @param rangesByLowerBound Map of ranges by lower bound.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,asMap,com.google.common.collect.AbstractSortedKeySortedSetMultimap:asMap(),43,46,"/**
 * Returns a sorted map view of the entries.
 * Casts the superclass's map view to the correct type.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedIterables.java,hasSameComparator,"com.google.common.collect.SortedIterables:hasSameComparator(java.util.Comparator,java.lang.Iterable)",37,49,"/**
 * Checks if the comparator matches the Iterable's natural ordering.
 * @param comparator The comparator to check.
 * @param elements The iterable to check.
 * @return True if comparators are equal, false otherwise.
 */
","* Returns {@code true} if {@code elements} is a sorted collection using an ordering equivalent to
   * {@code comparator}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingMultiset,com.google.common.collect.TreeMultiset:descendingMultiset(),122,126,"/**
 * Returns a descending multiset view of this sorted set.
 * Lazily creates the descending multiset if it's null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsValue,com.google.common.collect.HashBasedTable:containsValue(java.lang.Object),109,112,"/**
 * Checks if the map contains the specified value.
 * @param value Value to search for. Returns true if found.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,putAll,com.google.common.collect.ArrayTable:putAll(com.google.common.collect.Table),484,487,"/**
* Adds all entries from the given table to this table.
*/","* {@inheritDoc}
   *
   * <p>If {@code table} is an {@code ArrayTable}, its null values will be stored in this table,
   * possibly replacing values that were previously non-null.
   *
   * @throws NullPointerException if {@code table} has a null key
   * @throws IllegalArgumentException if any of the provided table's row keys or column keys is not
   *     in {@link #rowKeySet()} or {@link #columnKeySet()}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable:clear(),90,93,"/**
 * Clears all cells from the grid. Uses the iterator for clearing.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,valuesIterator,com.google.common.collect.AbstractTable:valuesIterator(),191,199,"/**
 * Returns an iterator over the values in this cell set.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.AbstractTable:hashCode(),238,241,"/**
 * Returns the hash code, based on the cell set's hash code.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSet,com.google.common.collect.ArrayTable:cellSet(),544,547,"/**
 * Returns the set of cells. Delegates to the superclass implementation.
 */","* Returns an unmodifiable set of all row key / column key / value triplets. Changes to the table
   * will update the returned set.
   *
   * <p>The returned set's iterator traverses the mappings with the first row key, the mappings with
   * the second row key, and so on.
   *
   * <p>The value in the returned cells may change if the table subsequently changes.
   *
   * @return set of table cells consisting of row key / column key / value triplets",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellSet,com.google.common.collect.ImmutableTable:cellSet(),300,303,"/**
 * Returns the set of cells, casting to ImmutableSet.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.StandardTable:cellSet(),235,238,"/**
* Returns the set of cells, delegating to the superclass.
*/
","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,values,com.google.common.collect.ArrayTable:values(),786,789,"/**
 * Returns a collection view of the values in this map.
 */","* Returns an unmodifiable collection of all values, which may contain duplicates. Changes to the
   * table will update the returned collection.
   *
   * <p>The returned collection's iterator traverses the values of the first row key, the values of
   * the second row key, and so on.
   *
   * @return collection of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,values,com.google.common.collect.ImmutableTable:values(),318,321,"/**
 * Returns a collection of the values in this map.
 * Returns an immutable collection.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.StandardTable:values(),795,798,"/**
 * Returns a collection of the values in this map.
 */","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ArrayTable:equals(java.lang.Object),233,236,"/**
* Compares this object with another based on internal implementation.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,equals,com.google.common.collect.ImmutableTable:equals(java.lang.Object),233,236,"/**
* Compares this object with another for equality, using Tables.equalsImpl.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onResultOf,com.google.common.collect.Ordering:onResultOf(com.google.common.base.Function),459,461,"/**
 * Creates an Ordering based on the result of a Function.
 * @param function Function to apply to elements for ordering.
 * @return Ordering instance based on the function's result.
 */
","* Returns a new ordering on {@code F} which orders elements by first applying a function to them,
   * then comparing those results using {@code this}. For example, to compare objects by their
   * string forms, in a case-insensitive manner, use:
   *
   * {@snippet :
   * Ordering.from(String.CASE_INSENSITIVE_ORDER)
   *     .onResultOf(Functions.toStringFunction())
   * }
   *
   * <p><b>Java 8+ users:</b> Use {@code Comparator.comparing(function, thisComparator)} instead
   * (you can omit the comparator if it is the natural order).",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,from,com.google.common.collect.Ordering:from(java.util.Comparator),192,196,"/**
 * Returns a Ordering from the given Comparator.
 * If comparator is an Ordering, returns it; otherwise, wraps it.
 */
","* Returns an ordering based on an <i>existing</i> comparator instance. Note that it is
   * unnecessary to create a <i>new</i> anonymous inner class implementing {@code Comparator} just
   * to pass it in here. Instead, simply subclass {@code Ordering} and implement its {@code compare}
   * method directly.
   *
   * <p>The returned object is serializable if {@code comparator} is serializable.
   *
   * <p><b>Java 8+ users:</b> this class is now obsolete as explained in the class documentation, so
   * there is no need to use this method.
   *
   * @param comparator the comparator that defines the order
   * @return comparator itself if it is already an {@code Ordering}; otherwise an ordering that
   *     wraps that comparator",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.util.Comparator),483,485,"/**
 * Combines this ordering with another.
 * @param secondaryComparator Secondary comparator to apply.
 * @return A new compound ordering.
 */
","* Returns an ordering which first uses the ordering {@code this}, but which in the event of a
   * ""tie"", then delegates to {@code secondaryComparator}. For example, to sort a bug list first by
   * status and second by priority, you might use {@code byStatus.compound(byPriority)}. For a
   * compound ordering with three or more components, simply chain multiple calls to this method.
   *
   * <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to
   * one created using {@link Ordering#compound(Iterable)} on the same component comparators.
   *
   * <p>The returned object is serializable if this object and {@code secondaryComparator} are both
   * serializable.
   *
   * <p><b>Java 8+ users:</b> Use {@code thisComparator.thenComparing(secondaryComparator)} instead.
   * Depending on what {@code secondaryComparator} is, one of the other overloads of {@code
   * thenComparing} may be even more useful.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,lexicographical,com.google.common.collect.Comparators:lexicographical(java.util.Comparator),63,66,"/**
 * Creates a lexicographical comparator for iterables of type S.
 * @param comparator Comparator for elements of type T (S's supertype)
 * @return Lexicographical comparator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,lexicographical,com.google.common.collect.Ordering:lexicographical(),531,540,"/**
 * Returns a lexicographical ordering for iterables of type S.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsFirst,com.google.common.collect.Ordering:nullsFirst(),428,430,"/**
 * Returns an Ordering that sorts nulls before non-null values.
 * @param <S> The type of elements being ordered.
 * @return Ordering that places nulls first.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,nullsLast,com.google.common.collect.Ordering:nullsLast(),442,444,"/**
 * Returns an Ordering that places nulls at the end.
 * Uses the current Ordering to compare non-null values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,reverse,com.google.common.collect.Ordering:reverse(),414,416,"/**
 * Reverses the order of the current Ordering.
 * Returns a new Ordering object with reversed direction.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,readObject,com.google.common.collect.TreeMultimap:readObject(java.io.ObjectInputStream),217,226,"/**
 * Reconstitutes the multimap from a stream during deserialization.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,immutableCell,"com.google.common.collect.Tables:immutableCell(java.lang.Object,java.lang.Object,java.lang.Object)",125,131,"/**
 * Creates an immutable cell with the given row key, column key, and value.
 */","* Returns an immutable cell with the specified row key, column key, and value.
   *
   * <p>The returned cell is serializable.
   *
   * @param rowKey the row key to be associated with the returned cell
   * @param columnKey the column key to be associated with the returned cell
   * @param value the value to be associated with the returned cell",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,elementSet,com.google.common.collect.ImmutableMultimap$Keys:elementSet(),743,746,"/**
 * Returns a new set containing the keys of this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,contains,"com.google.common.collect.ArrayTable:contains(java.lang.Object,java.lang.Object)",401,404,"/**
 * Checks if the row and column keys exist in the table.
 * @param rowKey The row key to check.
 * @param columnKey The column key to check.
 * @return True if both keys exist, false otherwise.
 */
","* Returns {@code true} if the provided keys are among the keys provided when the table was
   * constructed.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,contains,com.google.common.collect.ImmutableMultimap$Keys:contains(java.lang.Object),732,735,"/**
 * Checks if the map contains the specified object as a key.
 * @param object The object to check for.
 * @return True if the object is a key, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,<init>,com.google.common.reflect.TypeResolver:<init>(),58,60,"/**
 * Initializes a TypeResolver with a new TypeTable.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,entryOf,"com.google.common.collect.ImmutableMap:entryOf(java.lang.Object,java.lang.Object)",344,346,"/**
 * Creates an immutable map entry with the given key and value.
 */
","* Verifies that {@code key} and {@code value} are non-null, and returns a new immutable entry
   * with those values.
   *
   * <p>A call to {@link Entry#setValue} on the returned entry will always throw {@link
   * UnsupportedOperationException}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry)",102,106,"/**
 * Constructs a NonTerminalImmutableMapEntry.
 * @param key The key.
 * @param value The value.
 * @param nextInKeyBucket Next entry with the same key.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,"com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry,java.lang.Object,java.lang.Object)",206,210,"/**
 * Creates an immutable map entry. Reuses entry if possible.
 * @param entry The entry to potentially reuse.
 * @param key The key for the immutable entry.
 * @param value The value for the immutable entry.
 */
",Makes an entry usable internally by a new ImmutableMap without rereading its contents.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,"com.google.common.collect.ImmutableListMultimap$Builder:put(java.lang.Object,java.lang.Object)",253,258,"/**
 * Inserts a key-value pair into the map and returns the builder.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,put,com.google.common.collect.ImmutableMultimap$Builder:put(java.util.Map$Entry),255,258,"/**
* Puts the entry's key-value pair.
* @param entry Entry with key-value pair to put.
* @return This builder.
*/
","* Adds an entry to the built multimap.
     *
     * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,"com.google.common.collect.ImmutableSetMultimap$Builder:put(java.lang.Object,java.lang.Object)",302,307,"/**
* Adds a key-value pair to the map and returns the builder.
*/
",Adds a key-value mapping to the built multimap if it is not already present.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfPrimitive:trySplit(),376,399,"/**
 * Attempts to split the spliterator into two sub-spliterators.
 * @return A new spliterator or null if splitting is not possible.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,valueSpliterator,com.google.common.collect.AbstractMapBasedMultimap:valueSpliterator(),1235,1239,"/**
 * Returns a Spliterator for the values in the map.
 * Uses CollectSpliterators to flatten the spliterator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,entrySpliterator,com.google.common.collect.AbstractMapBasedMultimap:entrySpliterator(),1293,1305,"/**
 * Returns a Spliterator for entries in the map's values.
 * Returns a Spliterator for entries in the map's values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,entrySpliterator,com.google.common.collect.ImmutableMultimap:entrySpliterator(),692,704,"/**
 * Returns a Spliterator for map entries.
 * Uses CollectSpliterators to flatten and map entries.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,spliteratorImpl,com.google.common.collect.Multisets:spliteratorImpl(com.google.common.collect.Multiset),1124,1133,"/**
 * Creates a spliterator for the multiset elements.
 * @param multiset The multiset to create a spliterator for.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSpliterator,com.google.common.collect.StandardTable:cellSpliterator(),299,310,"/**
 * Creates a Spliterator for cells from the backing map.
 * Returns a Spliterator<Cell<R, C, V>>.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredSortedSet:<init>(java.util.SortedSet,com.google.common.base.Predicate)",1300,1302,"/**
 * Constructs a FilteredSortedSet with the given sorted set and predicate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$KeySetView:iterator(),737,740,"/**
 * Returns an iterator over the map's keys.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$EntrySetView:iterator(),813,816,"/**
 * Returns an iterator over the map entries.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,updateLastKnownIndex,com.google.common.collect.CompactHashMap$MapEntry:updateLastKnownIndex(),903,909,"/**
 * Updates the lastKnownIndex to the correct index of the key.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,isEmpty,com.google.common.collect.CompactHashMap:isEmpty(),959,962,"/**
 * Checks if the collection is empty.
 * @return True if the collection is empty, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,clear,com.google.common.collect.CompactHashMap:clear(),1092,1112,"/**
 * Removes all mappings from this map. Resets the size to zero.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,writeObject,com.google.common.collect.CompactHashMap:writeObject(java.io.ObjectOutputStream),1114,1124,"/**
 * Writes the map's contents to the output stream for serialization.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,iterator,com.google.common.collect.CompactHashMap$ValuesView:iterator(),995,998,"/**
 * Returns an iterator over the values in this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeTable,"com.google.common.collect.CompactHashMap:resizeTable(int,int,int,int)",432,477,"/**
* Resizes the hash table to a new capacity, rehashing entries.
* @param oldMask old table mask
* @param newCapacity new table capacity
* @param targetHash target hash
* @param targetEntryIndex target entry index
* @return new table mask
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeTable,"com.google.common.collect.CompactHashSet:resizeTable(int,int,int,int)",383,418,"/**
 * Resizes the hash table to a new capacity.
 * @param oldMask The mask of the old table.
 * @param newCapacity The new capacity of the table.
 * @return The new mask.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,resizeMeMaybe,com.google.common.collect.CompactHashMap:resizeMeMaybe(int),411,420,"/**
 * Resizes the entries array if the new size is larger.
 * @param newSize The target size for the entries array.
 */
",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,resizeEntries,com.google.common.collect.CompactLinkedHashMap:resizeEntries(int),214,218,"/**
 * Resizes the entries array to the specified capacity.
 * Copies links to the new array after superclass resizing.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsValue,com.google.common.collect.CompactHashMap:containsValue(java.lang.Object),964,976,"/**
 * Checks if the map contains the specified value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,insertEntry,"com.google.common.collect.CompactHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",403,408,"/**
 * Inserts a key-value pair into the table at the given index.
 * @param entryIndex Index for insertion.
 * @param key Key to insert.
 * @param value Value to insert.
 */
",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,replaceAll,com.google.common.collect.CompactHashMap:replaceAll(java.util.function.BiFunction),672,683,"/**
 * Replaces each value in the map with the result of applying the function.
 * @param function BiFunction to apply to each key-value pair
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,isEmpty,com.google.common.collect.CompactHashSet:isEmpty(),621,624,"/**
 * Checks if the collection is empty.
 * @return True if the collection is empty, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,clear,com.google.common.collect.CompactHashSet:clear(),677,696,"/**
 * Removes all elements from the set, resetting its size to zero.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,writeObject,com.google.common.collect.CompactHashSet:writeObject(java.io.ObjectOutputStream),698,705,"/**
 * Writes the object's data to the output stream for serialization.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,resizeMeMaybe,com.google.common.collect.CompactHashSet:resizeMeMaybe(int),363,372,"/**
 * Resizes the entries array if the new size is larger.
 * @param newSize The desired new size of the entries array.
 */
",Resizes the entries storage if necessary.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,resizeEntries,com.google.common.collect.CompactLinkedHashSet:resizeEntries(int),214,219,"/**
 * Resizes the predecessor and successor arrays to newCapacity.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,insertEntry,"com.google.common.collect.CompactHashSet:insertEntry(int,java.lang.Object,int,int)",357,360,"/**
* Inserts an entry at the given index with the provided object, hash, and mask.
*/
",* Creates a fresh entry with the specified object at the specified position in the entry arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,allocArrays,com.google.common.collect.CompactHashMap:allocArrays(),267,281,"/**
 * Allocates arrays for the hash table.
 * @return Expected size of the hash table.
 */
",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,allocArrays,com.google.common.collect.CompactHashSet:allocArrays(),232,245,"/**
 * Allocates arrays for the hash table.
 * @return The expected size of the allocated arrays.
 */
",Handle lazy allocation of arrays.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getPredecessor,com.google.common.collect.CompactLinkedHashMap:getPredecessor(int),148,150,"/**
 * Calculates the predecessor of an entry in a data structure.
 * Returns the predecessor's value, subtracting 1.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,getSuccessor,com.google.common.collect.CompactLinkedHashMap:getSuccessor(int),152,155,"/**
 * Calculates the successor of a given entry.
 * @param entry The entry to find the successor of.
 * @return The successor of the entry.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSuccessor,"com.google.common.collect.CompactLinkedHashMap:setSuccessor(int,int)",157,160,"/**
 * Sets the successor for a given entry in the linked list.
 * @param entry The entry to update.
 * @param succ  The successor value to set.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setPredecessor,"com.google.common.collect.CompactLinkedHashMap:setPredecessor(int,int)",162,165,"/**
 * Updates the predecessor link for a given entry.
 * @param entry The entry to update.
 * @param pred The new predecessor value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,setSucceeds,"com.google.common.collect.CompactLinkedHashSet:setSucceeds(int,int)",179,191,"/**
 * Updates succeeds relationship between nodes.
 * @param pred predecessor node
 * @param succ successor node
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,<init>,com.google.common.collect.EmptyContiguousSet:<init>(com.google.common.collect.DiscreteDomain),36,38,"/**
 * Constructs an empty contiguous set for the given domain.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,<init>,"com.google.common.collect.RegularContiguousSet:<init>(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",42,45,"/**
 * Constructs a RegularContiguousSet with the given range and domain.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asRanges,com.google.common.collect.ImmutableRangeSet:asRanges(),303,309,"/**
 * Returns a set of ranges representing the set's elements.
 * Returns empty set if the set is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,emptySet,com.google.common.collect.ImmutableSortedSet:emptySet(java.util.Comparator),86,95,"/**
 * Returns an empty RegularImmutableSortedSet with the given comparator.
 * Uses a pre-built set for natural ordering.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withLowerBoundType,"com.google.common.collect.Cut$BelowValue:withLowerBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",333,343,"/**
 * Creates a Cut with a lower bound based on the given type.
 * @param boundType Lower bound type (CLOSED or OPEN)
 * @param domain Discrete domain for the cut
 * @return Cut object with the specified lower bound
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,withUpperBoundType,"com.google.common.collect.Cut$BelowValue:withUpperBoundType(com.google.common.collect.BoundType,com.google.common.collect.DiscreteDomain)",345,355,"/**
 * Returns a Cut with an upper bound based on the provided type.
 * @param boundType The type of bound (CLOSED or OPEN).
 * @param domain The discrete domain.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,aboveValue,com.google.common.collect.Cut:aboveValue(java.lang.Comparable),390,392,"/**
 * Creates a Cut that returns elements greater than the endpoint.
 * @param endpoint The upper bound for the cut.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,belowValue,com.google.common.collect.Cut:belowValue(java.lang.Comparable),309,311,"/**
 * Creates a Cut that returns elements below the given endpoint.
 * @param endpoint The upper bound for elements to be included.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,equals,com.google.common.collect.Cut:equals(java.lang.Object),91,105,"/**
 * Checks if two Cuts are equal by comparing their values.
 * @param obj Object to compare, must be a Cut.
 * @return True if equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,<init>,"com.google.common.collect.Range:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut)",327,335,"/**
 * Creates a Range with lower and upper bounds.
 * @param lowerBound Lower bound of the range.
 * @param upperBound Upper bound of the range.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,encloses,com.google.common.collect.Range:encloses(com.google.common.collect.Range),485,488,"/**
 * Checks if this range encloses the given range.
 * @param other The range to check for enclosure.
 * @return True if this range encloses the other, false otherwise.
 */
","* Returns {@code true} if the bounds of {@code other} do not extend outside the bounds of this
   * range. Examples:
   *
   * <ul>
   *   <li>{@code [3..6]} encloses {@code [4..5]}
   *   <li>{@code (3..6)} encloses {@code (3..6)}
   *   <li>{@code [3..6]} encloses {@code [4..4)} (even though the latter is empty)
   *   <li>{@code (3..6]} does not enclose {@code [3..6]}
   *   <li>{@code [4..5]} does not enclose {@code (3..6)} (even though it contains every value
   *       contained by the latter range)
   *   <li>{@code [3..6]} does not enclose {@code (1..1]} (even though it contains every value
   *       contained by the latter range)
   * </ul>
   *
   * <p>Note that if {@code a.encloses(b)}, then {@code b.contains(v)} implies {@code
   * a.contains(v)}, but as the last two examples illustrate, the converse is not always true.
   *
   * <p>Being reflexive, antisymmetric and transitive, the {@code encloses} relation defines a
   * <i>partial order</i> over ranges. There exists a unique {@linkplain Range#all maximal} range
   * according to this relation, and also numerous {@linkplain #isEmpty minimal} ranges. Enclosure
   * also implies {@linkplain #isConnected connectedness}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isConnected,com.google.common.collect.Range:isConnected(com.google.common.collect.Range),515,518,"/**
 * Checks if this range intersects with another range.
 * @param other The other range to check for intersection.
 * @return True if the ranges intersect, false otherwise.
 */
","* Returns {@code true} if there exists a (possibly empty) range which is {@linkplain #encloses
   * enclosed} by both this range and {@code other}.
   *
   * <p>For example,
   *
   * <ul>
   *   <li>{@code [2, 4)} and {@code [5, 7)} are not connected
   *   <li>{@code [2, 4)} and {@code [3, 5)} are connected, because both enclose {@code [3, 4)}
   *   <li>{@code [2, 4)} and {@code [4, 6)} are connected, because both enclose the empty range
   *       {@code [4, 4)}
   * </ul>
   *
   * <p>Note that this range and {@code other} have a well-defined {@linkplain #span union} and
   * {@linkplain #intersection intersection} (as a single, possibly-empty range) if and only if this
   * method returns {@code true}.
   *
   * <p>The connectedness relation is both reflexive and symmetric, but does not form an {@linkplain
   * Equivalence equivalence relation} as it is not transitive.
   *
   * <p>Note that certain discrete ranges are not considered connected, even though there are no
   * elements ""between them."" For example, {@code [3, 5]} is not considered connected to {@code [6,
   * 10]}. In these cases, it may be desirable for both input ranges to be preprocessed with {@link
   * #canonical(DiscreteDomain)} before testing for connectedness.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,writeObject,com.google.common.collect.ImmutableSetMultimap:writeObject(java.io.ObjectOutputStream),665,671,"/**
 * Writes object state to stream, including comparator & multimap.
 */
","* @serialData number of distinct keys, and then for each distinct key: the key, the number of
   *     values for that key, and the key's values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,subMultiset,"com.google.common.collect.ImmutableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",385,394,"/**
 * Returns a subMultiset containing elements between bounds.
 * @param lowerBound Lower bound for the subMultiset.
 * @param upperBound Upper bound for the subMultiset.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,toString,com.google.common.collect.DescendingMultiset:toString(),159,162,"/**
 * Returns a string representation of the map, based on entry set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,remove,"com.google.common.collect.EnumMultiset:remove(java.lang.Object,int)",162,187,"/**
 * Removes occurrences of an element.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return number of occurrences removed
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,compare,"com.google.common.collect.ExplicitOrdering:compare(java.lang.Object,java.lang.Object)",39,42,"/**
 * Compares two elements based on their rank.
 * @param left The first element to compare.
 * @param right The second element to compare.
 * @return Rank difference between the two elements.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,builder,com.google.common.collect.ImmutableRangeMap:builder(),101,103,"/**
 * Creates a new builder instance for constructing a sorted map.
 * @return A new Builder object.
 */
",Returns a new builder for an immutable range map.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,builder,com.google.common.collect.ImmutableRangeSet:builder(),748,750,"/**
 * Creates a new Builder instance for constructing objects.
 * @return A new Builder object.
 */
",Returns a new builder for an immutable range set.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,builder,com.google.common.collect.ImmutableTable:builder(),149,151,"/**
 * Creates a new Builder instance for constructing objects.
 * @return A new Builder object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder#Builder() ImmutableTable.Builder()} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,removeAll,com.google.common.collect.FilteredEntrySetMultimap:removeAll(java.lang.Object),48,51,"/**
 * Removes all mappings for a key, delegating to superclass.
 * @param key The key to remove mappings for.
 * @return Set of removed values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,add,"com.google.common.collect.ForwardingList:add(int,java.lang.Object)",63,66,"/**
* Adds an element at the specified index using the delegate.
* @param index Index to insert the element.
* @param element Element to add.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,addAll,"com.google.common.collect.ForwardingList:addAll(int,java.util.Collection)",68,72,"/**
* Adds all elements from a collection to the list at the specified index.
* @param index Insertion index
* @param elements Collection of elements to add
* @return True if the list was modified.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,get,com.google.common.collect.ForwardingList:get(int),74,78,"/**
 * Returns the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,indexOf,com.google.common.collect.ForwardingList:indexOf(java.lang.Object),80,83,"/**
 * Returns the index of the first occurrence of element.
 * @param element the element to search for
 * @return the index or -1 if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,lastIndexOf,com.google.common.collect.ForwardingList:lastIndexOf(java.lang.Object),85,88,"/**
 * Returns the last index of the specified element in this list.
 * @param element the element to search for
 * @return the last index or -1 if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(),90,93,"/**
 * Returns a list iterator over the elements in the list.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,listIterator,com.google.common.collect.ForwardingList:listIterator(int),95,98,"/**
 * Returns a list iterator over the list starting at the specified index.
 * @param index the index to start the list iterator
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,remove,com.google.common.collect.ForwardingList:remove(int),100,105,"/**
 * Removes and returns the element at the specified index.
 * @param index Index of the element to remove.
 * @return The removed element.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,set,"com.google.common.collect.ForwardingList:set(int,java.lang.Object)",107,112,"/**
 * Sets the specified element at the given index.
 * @param index Index of the element to set.
 * @param element Element to set at the specified index.
 * @return The element previously at the specified index.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,subList,"com.google.common.collect.ForwardingList:subList(int,int)",114,117,"/**
 * Returns a view of the list between fromIndex and toIndex.
 * @param fromIndex the starting index (inclusive)
 * @param toIndex the ending index (exclusive)
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,equals,com.google.common.collect.ForwardingList:equals(java.lang.Object),119,122,"/**
 * Checks if this object is equal to another object.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,hashCode,com.google.common.collect.ForwardingList:hashCode(),124,127,"/**
 * Returns the hash code, delegating to the underlying delegate object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,removeAll,com.google.common.collect.FilteredKeyListMultimap:removeAll(java.lang.Object),46,49,"/**
* Removes all values associated with the given key.
* @param key The key to remove values for.
* @return A list of removed values.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,removeAll,com.google.common.collect.FilteredKeySetMultimap:removeAll(java.lang.Object),48,51,"/**
 * Removes all mappings for a key, delegating to superclass.
 * @param key The key to remove mappings for.
 * @return Set of removed values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractDirectedNetworkConnections$1:iterator(),732,733,"/**
 * Returns an unmodifiable iterator for the elements in this collection.
 */","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,frequency,"com.google.common.collect.Iterables:frequency(java.lang.Iterable,java.lang.Object)",346,353,"/**
 * Calculates frequency of an element in an iterable.
 * @param iterable iterable to search
 * @param element element to count
 * @return frequency of the element
 */
","* Returns the number of elements in the specified iterable that equal the specified object. This
   * implementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}.
   *
   * <p><b>Java 8+ users:</b> In most cases, the {@code Stream} equivalent of this method is {@code
   * stream.filter(element::equals).count()}. If {@code element} might be null, use {@code
   * stream.filter(Predicate.isEqual(element)).count()} instead.
   *
   * @see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection,
   *     Object)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsKey,com.google.common.collect.ForwardingMap:standardContainsKey(java.lang.Object),207,209,"/**
 * Checks if the map contains the specified key using the default behavior.
 * @param key The key to check.
 * @return True if the map contains the key, false otherwise.
 */
","* A sensible, albeit inefficient, definition of {@link #containsKey} in terms of the {@code
   * iterator} method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to
   * override {@link #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardContainsValue,com.google.common.collect.ForwardingMap:standardContainsValue(java.lang.Object),234,236,"/**
* Checks if the map contains the specified value.
* @param value The value to search for.
* @return True if the map contains the value, false otherwise.
*/
","* A sensible definition of {@link #containsValue} in terms of the {@code iterator} method of
   * {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #containsValue} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,equals,com.google.common.collect.ExplicitOrdering:equals(java.lang.Object),52,59,"/**
 * Checks if two ExplicitOrdering objects have the same rank map.
 * @param object Object to compare with, must be an ExplicitOrdering.
 * @return True if rank maps are equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerKey,com.google.common.collect.ForwardingNavigableMap:standardLowerKey(java.lang.Object),90,92,"/**
 * Returns the standard lower key, or null if none exists.
 * @param key The key for which to find the lower key.
 */
","* A sensible definition of {@link #lowerKey} in terms of {@code lowerEntry}. If you override
   * {@link #lowerEntry}, you may wish to override {@code lowerKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorKey,com.google.common.collect.ForwardingNavigableMap:standardFloorKey(java.lang.Object),118,120,"/**
 * Gets the floor key of an entry, or null if not found.
 * @param key The key to look up.
 * @return The floor key, or null if not found.
 */
","* A sensible definition of {@link #floorKey} in terms of {@code floorEntry}. If you override
   * {@code floorEntry}, you may wish to override {@code floorKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingKey,com.google.common.collect.ForwardingNavigableMap:standardCeilingKey(java.lang.Object),146,148,"/**
 * Finds the next key in the map that is greater than or equal to the given key.
 * @param key The key to find the ceiling key for.
 * @return The next key, or null if none exists.
 */
","* A sensible definition of {@link #ceilingKey} in terms of {@code ceilingEntry}. If you override
   * {@code ceilingEntry}, you may wish to override {@code ceilingKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherKey,com.google.common.collect.ForwardingNavigableMap:standardHigherKey(java.lang.Object),174,176,"/**
 * Returns the next higher key or null if none exists.
 * @param key The key to find the next higher key for.
 */
","* A sensible definition of {@link #higherKey} in terms of {@code higherEntry}. If you override
   * {@code higherEntry}, you may wish to override {@code higherKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFirstKey,com.google.common.collect.ForwardingNavigableMap:standardFirstKey(),197,204,"/**
 * Returns the key of the first entry in the map.
 * @return The key of the first entry, or throws NoSuchElementException.
 */
","* A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override
   * {@code firstEntry}, you may wish to override {@code firstKey} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastKey,com.google.common.collect.ForwardingNavigableMap:standardLastKey(),224,231,"/**
 * Returns the key of the last entry, or throws NoSuchElementException.
 */","* A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code
   * lastEntry}, you may wish to override {@code lastKey} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLastEntry,com.google.common.collect.ForwardingNavigableMap:standardLastEntry(),216,218,"/**
 * Returns the last entry from the descending map's entry set.
 * Returns null if the map is empty.
 */
","* A sensible definition of {@link #lastEntry} in terms of the {@code iterator()} of the {@link
   * #entrySet} of {@link #descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code lastEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardPollLastEntry,com.google.common.collect.ForwardingNavigableMap:standardPollLastEntry(),257,259,"/**
* Polls and removes the last entry from the map's descending entry set.
* @return The last entry or null if the map is empty.
*/
","* A sensible definition of {@link #pollFirstEntry} in terms of the {@code iterator} of the {@code
   * entrySet} of {@code descendingMap}. If you override {@code descendingMap}, you may wish to
   * override {@code pollFirstEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardDescendingKeySet,com.google.common.collect.ForwardingNavigableMap:standardDescendingKeySet(),359,361,"/**
 * Returns a descending key set view of the map.
 */","* A sensible definition of {@link #descendingKeySet} as the {@code navigableKeySet} of {@link
   * #descendingMap}. (The {@link StandardDescendingMap} implementation implements {@code
   * navigableKeySet} on its own, so as not to cause an infinite loop.) If you override {@code
   * descendingMap}, you may wish to override {@code descendingKeySet} to forward to this
   * implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardSubMap,"com.google.common.collect.ForwardingNavigableMap:standardSubMap(java.lang.Object,java.lang.Object)",368,372,"/**
 * Returns a sorted submap from fromKey (inclusive) to toKey (exclusive).
 */","* A sensible definition of {@link #subMap(Object, Object)} in terms of {@link #subMap(Object,
   * boolean, Object, boolean)}. If you override {@code subMap(K, boolean, K, boolean)}, you may
   * wish to override {@code subMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardLowerEntry,com.google.common.collect.ForwardingNavigableMap:standardLowerEntry(java.lang.Object),76,78,"/**
 * Returns the lower entry for the given key.
 * @param key The key to find the lower entry for.
 * @return The lower entry, or null if none exists.
 */
","* A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * lowerEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardFloorEntry,com.google.common.collect.ForwardingNavigableMap:standardFloorEntry(java.lang.Object),104,106,"/**
 * Returns the floor entry for the given key.
 * @param key The key to find the floor entry for.
 * @return The floor entry or null if none exists.
 */
","* A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link
   * #headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code
   * floorEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHeadMap,com.google.common.collect.ForwardingNavigableMap:standardHeadMap(java.lang.Object),398,400,"/**
* Returns a sorted map with entries whose keys are less than toKey.
* @param toKey The key to which the head map is compared.
*/
","* A sensible definition of {@link #headMap(Object)} in terms of {@link #headMap(Object,
   * boolean)}. If you override {@code headMap(K, boolean)}, you may wish to override {@code
   * headMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardCeilingEntry,com.google.common.collect.ForwardingNavigableMap:standardCeilingEntry(java.lang.Object),132,134,"/**
 * Returns the first entry whose key is greater than or equal to the given key.
 * @param key The key to search for the ceiling entry.
 * @return The entry or null if no such entry exists.
 */
","* A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * ceilingEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardHigherEntry,com.google.common.collect.ForwardingNavigableMap:standardHigherEntry(java.lang.Object),160,162,"/**
* Returns the entry with the highest key less than the given key.
* @param key The key to compare against.
* @return The highest entry, or null if none exists.
*/
","* A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link
   * #tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code
   * higherEntry} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,standardTailMap,com.google.common.collect.ForwardingNavigableMap:standardTailMap(java.lang.Object),407,409,"/**
 * Returns a tail map with keys >= fromKey.
 * @param fromKey Key from which to start the tail map.
 */
","* A sensible definition of {@link #tailMap(Object)} in terms of {@link #tailMap(Object,
   * boolean)}. If you override {@code tailMap(K, boolean)}, you may wish to override {@code
   * tailMap} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardSubMultiset,"com.google.common.collect.ForwardingSortedMultiset:standardSubMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",219,225,"/**
 * Returns the submultiset between the provided bounds.
 * @param lowerBound Lower bound (inclusive).
 * @param upperBound Upper bound (exclusive).
 */
","* A sensible definition of {@link #subMultiset(Object, BoundType, Object, BoundType)} in terms of
   * {@link #headMultiset(Object, BoundType) headMultiset} and {@link #tailMultiset(Object,
   * BoundType) tailMultiset}.
   *
   * <p>If you override either of these methods, you may wish to override {@link
   * #subMultiset(Object, BoundType, Object, BoundType)} to forward to this implementation.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,get,com.google.common.collect.ForwardingSetMultimap:get(java.lang.Object),51,54,"/**
 * Retrieves values associated with the given key from the delegate.
 * @param key The key to retrieve values for.
 * @return Set of values associated with the key.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,delegate,com.google.common.collect.ForwardingMultimap:delegate(),46,47,"/**
 * Returns the delegate multimap for this abstract multimap.
 * @return The delegate multimap.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,isEmpty,com.google.common.collect.GeneralRange:isEmpty(),160,164,"/**
 * Checks if the range is empty, based on upper/lower bounds.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,contains,com.google.common.collect.GeneralRange:contains(java.lang.Object),186,188,"/**
 * Checks if the given element is within the defined range.
 * @param t The element to check.
 * @return True if within range, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(),69,71,"/**
 * Creates a new, empty HashBasedTable.
 * Uses LinkedHashMap and a Factory for internal storage.
 */
",Creates an empty {@code HashBasedTable}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,<init>,"com.google.common.collect.TreeBasedTable:<init>(java.util.Comparator,java.util.Comparator)",131,134,"/**
 * Constructs a TreeBasedTable with custom row and column comparators.
 * @param rowComparator Comparator for row ordering.
 * @param columnComparator Comparator for column ordering.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap$Inverse:replaceAll(java.util.function.BiFunction),745,753,"/**
 * Replaces all keys with values derived from the provided function.
 * @param function BiFunction to transform values based on keys.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,<init>,com.google.common.collect.HashBiMap:<init>(int),135,137,"/**
 * Constructs a new HashBiMap with the specified expected size.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,readObject,com.google.common.collect.HashBiMap:readObject(java.io.ObjectInputStream),790,797,"/**
* Reads object state from an ObjectInputStream.
* Resists heap exhaustion attempts during deserialization.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,readObject,com.google.common.collect.EnumBiMap:readObject(java.io.ObjectInputStream),150,159,"/**
 * Reads object data from an ObjectInputStream for deserialization.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,readObject,com.google.common.collect.EnumHashBiMap:readObject(java.io.ObjectInputStream),124,136,"/**
 * Deserializes the object from the provided ObjectInputStream.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,readObject,com.google.common.collect.EnumMultiset:readObject(java.io.ObjectInputStream),309,318,"/**
 * Reconstitutes the multiset from a stream.
 * @param stream ObjectInputStream to read from.
 * @throws IOException, ClassNotFoundException
 */
","* @serialData the {@code Class<E>} for the enum type, the number of distinct elements, the first
   *     element, its count, the second element, its count, and so on",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,indexOf,com.google.common.collect.CompactHashMap:indexOf(java.lang.Object),479,500,"/**
* Finds the index of the key in the hash table.
* @param key The key to search for.
* @return The index of the key, or -1 if not found.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,moveLastEntry,"com.google.common.collect.CompactHashMap:moveLastEntry(int,int)",564,606,"/**
 * Moves the last entry to the specified destination index.
 * @param dstIndex Destination index to move the last entry to.
 * @param mask The mask used for hashing.
 */","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,contains,com.google.common.collect.CompactHashSet:contains(java.lang.Object),420,446,"/**
 * Checks if the set contains the given object.
 * @param object The object to search for.
 * @return True if the object is present, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,moveLastEntry,"com.google.common.collect.CompactHashSet:moveLastEntry(int,int)",482,520,"/**
 * Moves the last entry to the specified destination index.
 * @param dstIndex Destination index for the last entry.
 * @param mask The mask used for hashing.
 */
","* Moves the last entry in the entry array into {@code dstIndex}, and nulls out its old position.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashing.java,remove,"com.google.common.collect.CompactHashing:remove(java.lang.Object,java.lang.Object,int,java.lang.Object,int[],java.lang.Object[],java.lang.Object[])",159,196,"/**
 * Removes a key-value pair from the hash table.
 * @param key The key to remove.
 * @param value The value associated with the key.
 * @return Index of removed entry, or -1 if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse$InverseKeySet:remove(java.lang.Object),663,672,"/**
 * Removes the entry associated with the given value.
 * @param o value to remove; returns true if found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap$Inverse:get(java.lang.Object),619,622,"/**
 * Retrieves the key associated with a given value.
 * @param value The value to search for.
 * @return The key or null if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$Inverse:remove(java.lang.Object),635,646,"/**
 * Removes the entry with the specified value.
 * @param value the value to remove
 * @return the key of the removed entry, or null if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap$KeySet:remove(java.lang.Object),498,509,"/**
 * Removes the entry associated with the given key.
 * @param o the key of the entry to remove
 * @return true if the entry was found and removed
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsKey,com.google.common.collect.HashBiMap:containsKey(java.lang.Object),263,266,"/**
* Checks if the map contains a key.
* @param key The key to check.
* @return True if the key is present, false otherwise.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,containsValue,com.google.common.collect.HashBiMap:containsValue(java.lang.Object),278,281,"/**
* Checks if the map contains a specific value.
* @param value Value to search for.
* @return True if value is present, false otherwise.
*/
","* Returns {@code true} if this BiMap contains an entry whose value is equal to {@code value} (or,
   * equivalently, if this inverse view contains a key that is equal to {@code value}).
   *
   * <p>Due to the property that values in a BiMap are unique, this will tend to execute in
   * faster-than-linear time.
   *
   * @param value the object to search for in the values of this BiMap
   * @return true if a mapping exists from a key to the specified value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,get,com.google.common.collect.HashBiMap:get(java.lang.Object),283,286,"/**
* Retrieves value associated with the given key.
* @param key The key to look up.
* @return The value or null if not found.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object,boolean)",294,326,"/**
 * Puts the given key-value pair. Throws exception if value exists.
 * @param key The key.
 * @param value The value.
 * @param force Whether to force the put operation.
 * @return The previous value or null if new.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,putInverse,"com.google.common.collect.HashBiMap:putInverse(java.lang.Object,java.lang.Object,boolean)",334,378,"/**
 * Puts a key-value pair, handling potential conflicts and deletions.
 * @param value The value to associate with the key.
 * @param key The key to associate with the value.
 * @param force Whether to force the put operation.
 * @return The key of the replaced entry, or null if none.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,remove,com.google.common.collect.HashBiMap:remove(java.lang.Object),404,416,"/**
 * Removes the entry associated with the given key.
 * @param key the key of the entry to remove
 * @return the value of the removed entry, or null if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,contains,com.google.common.collect.LinkedHashMultimap$ValueSet:contains(java.lang.Object),467,478,"/**
 * Checks if a value exists in the hash table.
 * @param o value to search for
 * @return true if value exists, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,remove,com.google.common.collect.LinkedHashMultimap$ValueSet:remove(java.lang.Object),521,545,"/**
 * Removes the specified value from the multimap.
 * @param o the value to remove
 * @return true if the value was present, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,count,com.google.common.collect.RegularImmutableMultiset:count(java.lang.Object),158,174,"/**
 * Counts occurrences of an element in the hash table.
 * @param element element to count, can be null
 * @return Count of the element, 0 if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,contains,com.google.common.collect.RegularImmutableSet:contains(java.lang.Object),55,70,"/**
 * Checks if the set contains the target object.
 * @param target The object to search for. Returns true if found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,makeBuilder,com.google.common.collect.ImmutableBiMap$SerializedForm:makeBuilder(int),627,630,"/**
 * Creates a new builder with the specified initial size.
 * @param size Initial capacity of the builder.
 * @return A new Builder instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builderWithExpectedSize,com.google.common.collect.ImmutableBiMap:builderWithExpectedSize(int),306,309,"/**
 * Creates a new Builder with the specified expected size.
 * @param expectedSize The initial capacity of the builder.
 */
","* Returns a new builder, expecting the specified number of entries to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of entries added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of entries added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$Builder:<init>(),345,345,"/**
 * Default constructor for the Builder class.
 */
","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableBiMap#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,builder,com.google.common.collect.ImmutableMap:builder(),352,354,"/**
 * Creates a new builder instance for constructing objects.
 * @return A new Builder object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$Builder:<init>(java.util.Comparator),619,621,"/**
 * Creates a new Builder with the given comparator.
 * @param comparator Comparator for ordering keys.
 */
","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMap#orderedBy}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$Column$Values:removeAll(java.util.Collection),653,656,"/**
* Removes all entries whose keys are contained in the given collection.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,inverse,com.google.common.collect.JdkBackedImmutableBiMap:inverse(),73,84,"/**
 * Returns a new ImmutableBiMap with keys and values swapped.
 * Returns a cached version if available, otherwise creates one.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,of,"com.google.common.collect.ImmutableBiMap:of(java.lang.Object,java.lang.Object)",82,84,"/**
 * Creates a singleton ImmutableBiMap containing the given key-value pair.
 */",Returns an immutable bimap containing a single entry.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,inverse,com.google.common.collect.SingletonImmutableBiMap:inverse(),100,113,"/**
 * Returns a new immutable bi-map with keys and values swapped.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,combine,com.google.common.collect.ImmutableMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),520,527,"/**
 * Combines another builder into this one.
 * @param other The builder to combine.
 * @return This builder.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,addDedupedElement,com.google.common.collect.ImmutableSet$SetBuilderImpl:addDedupedElement(java.lang.Object),612,615,"/**
 * Adds an element to the deduped list, ensuring no duplicates.
 * @param e The element to add.
 */
",Adds e to the insertion-order array of deduplicated elements. Calls ensureCapacity.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$Builder:<init>(),810,812,"/**
 * Constructs a new Builder with the default initial capacity.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableList#builder}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builderWithExpectedSize,com.google.common.collect.ImmutableList:builderWithExpectedSize(int),775,778,"/**
 * Creates a Builder for an ImmutableList with a pre-defined expected size.
 * @param expectedSize The expected size of the list.
 */
","* Returns a new builder, expecting the specified number of elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of elements added to the builder before {@link
   * Builder#build} is called, the builder is likely to perform better than an unsized {@link
   * #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of elements added to the builder.
   *
   * @since 23.1",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,<init>,com.google.common.collect.ImmutableSortedSet$Builder:<init>(java.util.Comparator),451,453,"/**
 * Constructs a new builder with the given comparator.
 * @param comparator Comparator used for ordering elements.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.lang.Iterable),549,554,"/**
* Adds all elements from the given iterable to the builder.
* @param elements iterable containing elements to add
* @return this builder instance for chaining
*/
","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.util.Iterator),549,554,"/**
 * Adds all elements from the iterator to the list.
 * @param elements Iterator containing elements to add.
 * @return This builder instance for chaining.
 */
","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the elements to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,addAll,com.google.common.collect.ImmutableSortedSet$Builder:addAll(java.util.Iterator),564,569,"/**
 * Adds all elements from the iterator to the list.
 * @param elements Iterator containing elements to add.
 * @return This builder instance for chaining.
 */
","* Adds each element of {@code elements} to the {@code ImmutableSortedSet}, ignoring duplicate
     * elements (only the first duplicate element is added).
     *
     * @param elements the elements to add to the {@code ImmutableSortedSet}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} contains a null element",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,<init>,com.google.common.collect.ImmutableList$ReverseImmutableList:<init>(com.google.common.collect.ImmutableList),640,642,"/**
* Initializes the ReverseImmutableList with the given immutable list.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,<init>,com.google.common.collect.Lists$StringAsImmutableList:<init>(java.lang.String),771,773,"/**
 * Initializes the immutable list with the given string.
 * @param string The string to be used for initialization.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableList.java,<init>,com.google.common.collect.RegularImmutableList:<init>(java.lang.Object[]),41,43,"/**
 * Initializes the RegularImmutableList with the provided array.
 * @param array The array to be wrapped in the immutable list.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,<init>,com.google.common.collect.RegularImmutableMap$Values:<init>(com.google.common.collect.RegularImmutableMap),380,382,"/**
 * Initializes the Values object with the provided map.
 * @param map The map containing the values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,<init>,com.google.common.collect.SingletonImmutableList:<init>(java.lang.Object),40,42,"/**
 * Constructs a SingletonImmutableList with the given element.
 * @param element The single element of the list.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,createValues,com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap:createValues(),785,788,"/**
 * Creates an immutable collection of the map's values.
 * Returns an ImmutableMapValues instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createValues,com.google.common.collect.JdkBackedImmutableMap:createValues(),122,125,"/**
* Creates an immutable collection of values from the map.
* Returns an ImmutableCollection<V> containing the values.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createEntries,com.google.common.collect.ImmutableMultimap:createEntries(),615,618,"/**
 * Creates an immutable collection of entries for this map.
 * Returns a new EntryCollection instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,createValues,com.google.common.collect.ImmutableMultimap:createValues(),801,804,"/**
 * Creates an immutable collection of values for this map.
 * Returns a new Values object.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,<init>,com.google.common.collect.ImmutableEnumSet:<init>(java.util.EnumSet),63,65,"/**
 * Constructs an ImmutableEnumSet with the given EnumSet delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$EntrySet:<init>(com.google.common.collect.ImmutableSetMultimap),603,605,"/**
* Sets the multimap for the EntrySet.
* @param multimap The immutable multimap to set.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,<init>,com.google.common.collect.SingletonImmutableSet:<init>(java.lang.Object),41,43,"/**
* Constructs a SingletonImmutableSet with the given element.
* @param element The single element of the set.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$ReverseImmutableList:listIterator(),401,404,"/**
 * Returns a list iterator over the list from the beginning.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,listIterator,com.google.common.collect.ImmutableList$SubList:listIterator(),401,404,"/**
 * Returns a list iterator over the elements in this list, starting at 0.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableList:iterator(),396,399,"/**
 * Returns an unmodifiable iterator for the list.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableListMultimap.java,<init>,com.google.common.collect.EmptyImmutableListMultimap:<init>(),33,35,"/**
 * Constructs an empty, immutable multimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableBiMap:createEntrySet(),118,121,"/**
 * Creates an immutable set view of the map's entries.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,createEntrySet,com.google.common.collect.JdkBackedImmutableMap:createEntrySet(),106,109,"/**
 * Creates an immutable set view of the map's entries.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,createKeySet,com.google.common.collect.DenseImmutableTable$ImmutableArrayMap:createKeySet(),110,113,"/**
* Creates a set of keys. Uses keyToIndex if full, else calls super.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,<init>,com.google.common.collect.ImmutableBiMap$SerializedForm:<init>(com.google.common.collect.ImmutableBiMap),623,625,"/**
 * Constructs a SerializedForm from an ImmutableBiMap.
 * @param bimap The ImmutableBiMap to serialize.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,writeReplace,com.google.common.collect.ImmutableMap:writeReplace(),1311,1314,"/**
* Returns a SerializedForm object to control serialization.
*/
","* Returns a serializable form of this object. Non-public subclasses should not override this
   * method. Publicly-accessible subclasses must override this method and should return a subclass
   * of SerializedForm whose readResolve() method returns objects of the subclass type.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,iterator,com.google.common.collect.ImmutableMapKeySet:iterator(),48,51,"/**
 * Returns an unmodifiable iterator over the map's keys.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,hashCode,com.google.common.collect.ExplicitOrdering:hashCode(),61,64,"/**
 * Returns the hash code, based on the rankMap's hash code.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,hashCode,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:hashCode(),1157,1161,"/**
 * Returns the hash code value for the map. Delegates to the parent class.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,hashCode,com.google.common.collect.ImmutableMapEntrySet:hashCode(),122,125,"/**
 * Returns the hash code, based on the underlying map's hash code.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createAsList,com.google.common.collect.RegularImmutableSortedSet:createAsList(),314,317,"/**
 * Creates an immutable list representation of the collection.
 * Returns elements if size <= 1, otherwise creates a sorted list.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(int),485,491,"/**
 * Creates a builder with specified capacity.
 * Uses RegularSetBuilderImpl for > 0 capacity, else EmptySetBuilderImpl.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:copy(),782,785,"/**
 * Creates a copy of this set builder.
 * Returns a new RegularSetBuilderImpl initialized with this builder.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,comparator,com.google.common.collect.ImmutableSortedAsList:comparator(),43,46,"/**
 * Returns the comparator of the underlying collection.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,indexOf,com.google.common.collect.ImmutableSortedAsList:indexOf(java.lang.Object),50,62,"/**
 * Returns the index of the target object or -1 if not found.
 * Uses delegate collection's indexOf, validates with equals().
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asMapOfRanges,com.google.common.collect.ImmutableRangeMap:asMapOfRanges(),307,315,"/**
 * Returns a map of ranges to values from the sorted set.
 * @return ImmutableSortedMap of ranges and corresponding values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,<init>,com.google.common.collect.ImmutableSortedMap$SerializedForm:<init>(com.google.common.collect.ImmutableSortedMap),1147,1150,"/**
 * Initializes a SerializedForm with the given sorted map.
 * @param sortedMap The immutable sorted map to use.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,combine,com.google.common.collect.ImmutableSortedSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),571,580,"/**
 * Combines elements from another builder into this one.
 * @param builder The builder to copy elements from.
 * @return This builder.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,of,"com.google.common.collect.ImmutableTable:of(java.lang.Object,java.lang.Object,java.lang.Object)",108,110,"/**
 * Creates a singleton ImmutableTable with the given row, column, and value.
 */
",Returns an immutable table containing a single cell.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,<init>,com.google.common.collect.SingletonImmutableTable:<init>(com.google.common.collect.Table$Cell),43,45,"/**
 * Constructs a SingletonImmutableTable from a Cell object.
 * @param cell The Cell used to initialize the table.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toString,com.google.common.collect.FluentIterable:toString(),336,339,"/**
 * Returns a string representation of the delegate iterable.
 */","* Returns a string representation of this fluent iterable, with the format {@code [e1, e2, ...,
   * en]}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.joining("", "", ""["", ""]""))}
   * or (less efficiently) {@code stream.collect(Collectors.toList()).toString()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,"com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",279,301,"/**
 * Adds all values from the given iterable to the collection for the key.
 * @param key the key to associate with the values
 * @param values iterable of values to add
 * @return this builder
 */
","* Stores a collection of values with the same key in the built multimap.
     *
     * @throws NullPointerException if {@code key}, {@code values}, or any element in {@code values}
     *     is null. The builder is left in an invalid state.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,pathNotFound,"com.google.common.io.MoreFiles:pathNotFound(java.nio.file.Path,java.util.Collection)",806,853,"/**
 * Checks if NoSuchFileException indicates path not found.
 * @param path Path to check.
 * @param exceptions Collection of IOExceptions.
 * @return NoSuchFileException if path not found, otherwise null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getOnlyElement,"com.google.common.collect.Iterables:getOnlyElement(java.lang.Iterable,java.lang.Object)",274,278,"/**
 * Returns the only element of an iterable, or defaultValue if empty.
 * @param iterable Iterable to extract element from
 * @param defaultValue Value if iterable is empty
 * @param <T> Type of elements in the iterable
 */
","* Returns the single element contained in {@code iterable}, or {@code defaultValue} if the
   * iterable is empty.
   *
   * <p><b>Java 8+ users:</b> the {@code Stream} equivalent to this method is {@code
   * stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}.
   *
   * @throws IllegalArgumentException if the iterator contains multiple elements",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,throwCause,"com.google.common.util.concurrent.SimpleTimeLimiter:throwCause(java.lang.Exception,boolean)",221,239,"/**
* Re-throws the cause of an exception, optionally combining stack traces.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,getLast,"com.google.common.collect.Iterables:getLast(java.lang.Iterable,java.lang.Object)",873,886,"/**
 * Returns the last element of an iterable or defaultValue if empty.
 * @param iterable Iterable to get the last element from.
 * @param defaultValue Value to return if iterable is empty.
 */
","* Returns the last element of {@code iterable} or {@code defaultValue} if the iterable is empty.
   * If {@code iterable} is a {@link List} with {@link RandomAccess} support, then this operation is
   * guaranteed to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code Streams.findLast(stream).orElse(defaultValue)}
   *
   * <p><b>Java 21+ users:</b> if {code iterable} is a {@code SequencedCollection} (e.g., any list),
   * consider using {@code collection.getLast()} instead. Note that if the collection is empty,
   * {@code getLast()} throws a {@code NoSuchElementException}, while this method returns the
   * default value.
   *
   * @param defaultValue the value to return if {@code iterable} is empty
   * @return the last element of {@code iterable} or the default value
   * @since 3.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,next,com.google.common.collect.Iterators$ConcatenatedIterator:next(),1432,1441,"/**
 * Returns the next element in the iteration.
 * Throws NoSuchElementException if no such element exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,iterator,com.google.common.collect.EmptyContiguousSet:iterator(),97,100,"/**
 * Returns an unmodifiable iterator for this collection.
 * Returns an empty iterator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,descendingIterator,com.google.common.collect.EmptyContiguousSet:descendingIterator(),102,106,"/**
 * Returns an empty iterator for descending order traversal.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,com.google.common.collect.Iterators$ConcatenatedIterator:<init>(java.util.Iterator),1377,1380,"/**
 * Initializes the concatenated iterator with a meta-iterator.
 * @param metaIterator Iterator of iterators of type T.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,add,com.google.common.collect.LinkedHashMultimap$ValueSet:add(java.lang.Object),480,501,"/**
 * Adds the given value to the multimap. Returns true if added,
 * false if a value already exists.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,deleteFromMultimap,com.google.common.collect.LinkedHashMultimap:deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry),153,156,"/**
 * Deletes an entry from the multimap, updating successor/predecessor links.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,clear,com.google.common.collect.LinkedHashMultimap:clear(),608,612,"/**
 * Clears the multimap, calling succeedsInMultimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,valueSpliterator,com.google.common.collect.LinkedHashMultimap:valueSpliterator(),603,606,"/**
 * Returns a Spliterator over the values in the map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,put,"com.google.common.collect.LinkedListMultimap:put(java.lang.Object,java.lang.Object)",604,609,"/**
 * Adds a key-value pair to the map.
 * @param key The key of the entry to add.
 * @param value The value of the entry to add.
 * @return True.
 */
","* Stores a key-value pair in the multimap.
   *
   * @param key key to store in the multimap
   * @param value value to store in the multimap
   * @return {@code true} always",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,partition,"com.google.common.collect.Lists:partition(java.util.List,int)",701,707,"/**
 * Partitions a list into sublists of the specified size.
 * @param list List to partition.
 * @param size Size of each sublist.
 * @return List of sublists.
 */
","* Returns consecutive {@linkplain List#subList(int, int) sublists} of a list, each of the same
   * size (the final list may be smaller). For example, partitioning a list containing {@code [a, b,
   * c, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list
   * containing two inner lists of three and two elements, all in the original order.
   *
   * <p>The outer list is unmodifiable, but reflects the latest state of the source list. The inner
   * lists are sublist views of the original list, produced on demand using {@link List#subList(int,
   * int)}, and are subject to all the usual caveats about modification as explained in that API.
   *
   * @param list the list to return consecutive sublists of
   * @param size the desired size of each sublist (the last may be smaller)
   * @return a list of consecutive sublists
   * @throws IllegalArgumentException if {@code partitionSize} is nonpositive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIndexOf,com.google.common.collect.ForwardingList:standardIndexOf(java.lang.Object),159,161,"/**
* Returns the index of the first occurrence of element.
* @param element element to find
* @return index of element, or -1 if not found
*/
","* A sensible default implementation of {@link #indexOf}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #indexOf} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList:indexOf(java.lang.Object),425,428,"/**
 * Returns the index of the first occurrence of object in the list.
 * @param object The object to search for. Returns -1 if not found.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardLastIndexOf,com.google.common.collect.ForwardingList:standardLastIndexOf(java.lang.Object),170,172,"/**
 * Returns the last index of the specified element in the list.
 * @param element The element to search for.
 * @return The last index or -1 if not found.
 */
","* A sensible default implementation of {@link #lastIndexOf}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #lastIndexOf} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList:lastIndexOf(java.lang.Object),430,433,"/**
 * Returns the last index of the specified object in this list.
 * @param object The object to search for. Returns -1 if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,putIfAbsent,"com.google.common.collect.ForwardingConcurrentMap:putIfAbsent(java.lang.Object,java.lang.Object)",49,53,"/**
* Atomically puts value if key is not already associated.
* @param key key to associate with the value
* @param value value to associate with the key
* @return Previous value or null if key was not present.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,remove,"com.google.common.collect.ForwardingConcurrentMap:remove(java.lang.Object,java.lang.Object)",55,59,"/**
 * Removes a key-value pair. Returns true if removed, false otherwise.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object)",61,65,"/**
 * Replaces the value associated with the given key.
 * @param key The key whose value is to be replaced.
 * @param value The new value to associate with the key.
 * @return The old value, or null if the key was not present.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingConcurrentMap.java,replace,"com.google.common.collect.ForwardingConcurrentMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",67,72,"/**
 * Replaces the entry for the given key, if oldValue matches.
 * @param key The key of the entry to replace.
 * @param oldValue The expected value associated with the key.
 * @param newValue The new value to associate with the key.
 * @return True if the replacement was successful.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$Values:contains(java.lang.Object),2727,2730,"/**
* Checks if the map contains the specified value.
* @param o the value to search for
* @return true if the map contains the value, false otherwise
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,advance,com.google.common.collect.MapMakerInternalMap$HashIterator:advance(),2541,2562,"/**
 * Advances to the next available entry in the table.
 * Searches chain, table, and segments to find the next entry.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2111,2116,"/**
 * Constructs a StrongKeyDummyValueSegment.
 * @param map The backing map.
 * @param initialCapacity Initial capacity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2022,2028,"/**
 * Constructs a StrongKeyStrongValueSegment.
 * @param map The parent map.
 * @param initialCapacity Initial segment capacity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2048,2053,"/**
 * Constructs a StrongKeyWeakValueSegment.
 * @param map The parent map.
 * @param initialCapacity Initial segment capacity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2245,2249,"/**
 * Constructs a WeakKeyDummyValueSegment.
 * @param map The parent map.
 * @param initialCapacity Initial segment capacity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2135,2140,"/**
 * Constructs a WeakKeyStrongValueSegment.
 * @param map The parent map.
 * @param initialCapacity Initial segment capacity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment:<init>(com.google.common.collect.MapMakerInternalMap,int)",2175,2179,"/**
 * Constructs a WeakKeyWeakValueSegment.
 * @param map The parent MapMakerInternalMap.
 * @param initialCapacity Initial segment capacity.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getEntry(java.lang.Object,int)",1413,1433,"/**
 * Retrieves an entry by key.
 * @param key The key to search for.
 * @param hash The hash code of the key.
 * @return The entry if found, otherwise null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,preWriteCleanup,com.google.common.collect.MapMakerInternalMap$Segment:preWriteCleanup(),1998,2001,"/**
 * Performs cleanup operations before writing data.
 * Calls runLockedCleanup() to execute the actual cleanup.
 */","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,runCleanup,com.google.common.collect.MapMakerInternalMap$Segment:runCleanup(),2003,2005,"/**
 * Runs cleanup operations. Calls the locked cleanup implementation.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap:clear(),2489,2494,"/**
 * Clears all segments by calling their respective clear methods.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry)",640,646,"/**
 * Creates a copy of an entry.
 * @param segment Segment to copy from.
 * @param entry Entry to copy.
 * @param newNext Next entry in the copy.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)",448,457,"/**
 * Creates a copy of an entry for a segment.
 * @param segment Segment to copy for.
 * @param entry Entry to copy.
 * @param newNext Next entry in the segment.
 * @return New entry with copied key, hash, and value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)",545,556,"/**
 * Copies a StrongKeyWeakValueEntry.
 * @param segment Segment to copy into.
 * @param entry Entry to copy.
 * @param newNext Next entry in the chain.
 * @return A copy of the entry, or null if collected.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$LinkedWeakKeyWeakValueEntry:<init>(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",900,904,"/**
 * Constructs a LinkedWeakKeyWeakValueEntry.
 * @param queue ReferenceQueue for weak keys.
 * @param key Key for the entry.
 * @param hash Hash code of the key.
 * @param next Next entry in the linked list.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedAsMapView:comparator(),995,998,"/**
 * Returns the comparator of the backing set, or null if none.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$SortedAsMapView:keySet(),1000,1003,"/**
* Returns a set view of the map's keys.
* Delegates to backingSet() and removes sorted set.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstKey,com.google.common.collect.Maps$SortedAsMapView:firstKey(),1020,1024,"/**
 * Returns the first key in the set.
 * Uses the backing set's first() method.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastKey,com.google.common.collect.Maps$SortedAsMapView:lastKey(),1026,1030,"/**
 * Returns the last key in the backing set.
 * Returns null if the set is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:last(),3174,3178,"/**
 * Returns the last key in the map.
 * @return The last key, or null if the map is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:first(),3168,3172,"/**
* Returns the first key in the map.
* Delegates to firstKey() for implementation.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$KeySet:remove(java.lang.Object),3953,3960,"/**
 * Removes the specified object from the set if present.
 * @param o the object to remove
 * @return true if the object was removed, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$SortedKeySet:comparator(),3987,3990,"/**
* Returns the comparator of the map this sorted map is backed by.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,first,com.google.common.collect.Maps$SortedKeySet:first(),4007,4011,"/**
 * Returns the first key in the map.
 * Delegates to the underlying map's firstKey() method.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,last,com.google.common.collect.Maps$SortedKeySet:last(),4013,4017,"/**
 * Returns the last key according to the map's ordering.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesOnlyOnLeft,com.google.common.collect.SortedMapDifference:entriesOnlyOnLeft(),33,34,"/**
 * Returns a sorted map with entries present only on the left side.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMapDifference.java,entriesDiffering,com.google.common.collect.SortedMapDifference:entriesDiffering(),42,43,"/**
 * Returns a sorted map of entries differing from the default.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingIterator,com.google.common.collect.Maps$NavigableKeySet:descendingIterator(),4067,4070,"/**
 * Returns a descending iterator over the set's elements.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",4081,4084,"/**
 * Returns a sorted set containing elements from fromElement to toElement.
 * fromElement and toElement can be null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$NavigableKeySet:headSet(java.lang.Object),4091,4094,"/**
 * Returns elements lexicographically less than toElement.
 * @param toElement the exclusive endpoint of the range
 * @return a sorted set containing the elements
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$NavigableKeySet:tailSet(java.lang.Object),4101,4104,"/**
 * Returns a sorted set containing elements from {@code fromElement} to the end.
 * @param fromElement the starting element (inclusive)
 * @return SortedSet containing elements >= fromElement
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingKey(java.lang.Object),2280,2283,"/**
* Returns the smallest key greater than or equal to the given key.
* @param key The key to compare against.
* @return The ceiling key, or null if none exists.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingKeySet(),2285,2288,"/**
* Returns a descending key set view of the map's keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorKey(java.lang.Object),2305,2308,"/**
 * Returns the greatest key <= to the specified key, or null.
 * @param key The key to compare against.
 * @return The floor key, or null if none exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherKey(java.lang.Object),2325,2328,"/**
 * Returns the next higher key than {@code key} in this map.
 * @param key The key to compare to.
 * @return The next higher key, or null if none.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerKey,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerKey(java.lang.Object),2340,2343,"/**
* Returns the greatest key strictly less than the specified key.
* @param key The key to compare against.
* @return The lower key, or null if none exists.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$TransformedEntriesNavigableMap:navigableKeySet(),2345,2348,"/**
* Returns a navigable set view of the map's keys.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,comparator,com.google.common.collect.ForwardingSortedMap:comparator(),68,71,"/**
 * Returns the comparator used for ordering keys.
 * Delegates to the underlying map's comparator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,firstKey,com.google.common.collect.ForwardingSortedMap:firstKey(),73,77,"/**
 * Returns the first key in the map. Delegates to the underlying map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,headMap,com.google.common.collect.ForwardingSortedMap:headMap(java.lang.Object),79,82,"/**
 * Returns a sorted map containing entries whose keys are less than toKey.
 * @param toKey The key to which the returned map's keys are compared.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,lastKey,com.google.common.collect.ForwardingSortedMap:lastKey(),84,88,"/**
 * Returns the last key in the map. Delegates to the underlying map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,subMap,"com.google.common.collect.ForwardingSortedMap:subMap(java.lang.Object,java.lang.Object)",90,93,"/**
 * Returns a sorted map containing entries from fromKey to toKey (inclusive).
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,tailMap,com.google.common.collect.ForwardingSortedMap:tailMap(java.lang.Object),95,98,"/**
 * Returns a sorted map containing entries greater or equal to fromKey.
 * @param fromKey key from which to start the tail map
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,delegate,com.google.common.collect.ForwardingMap:delegate(),64,65,"/**
 * Returns the delegate map. Abstract method, must be implemented.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,doDifference,"com.google.common.collect.Maps:doDifference(java.util.Map,java.util.Map,com.google.common.base.Equivalence,java.util.Map,java.util.Map,java.util.Map,java.util.Map)",575,607,"/**
 * Compares two maps, categorizing entries as only on left,
 * only on right, on both, or with value differences.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,"com.google.common.eventbus.EventBus:<init>(java.lang.String,java.util.concurrent.Executor,com.google.common.eventbus.Dispatcher,com.google.common.eventbus.SubscriberExceptionHandler)",190,199,"/**
 * Constructs an EventBus with provided dependencies.
 * @param identifier EventBus identifier
 * @param executor Executor for event handling
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,create,com.google.common.collect.TreeRangeMap:create(),63,65,"/**
 * Creates a new, empty TreeRangeMap.
 */","Returns a new, empty {@link TreeRangeMap}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,entryPredicate,com.google.common.collect.FilteredKeyMultimap:entryPredicate(),55,58,"/**
 * Returns a predicate that filters map entries based on key predicate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMin,"com.google.common.collect.MinMaxPriorityQueue$Heap:findMin(int,int)",601,614,"/**
* Finds the minimum element index within a range.
* @param index start index, must be > 0
* @param len range length
* @return Index of the minimum element.
*/
","* Returns the index of minimum value between {@code index} and {@code index + len}, or {@code
     * -1} if {@code index} is greater than {@code size}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,getMaxElementIndex,com.google.common.collect.MinMaxPriorityQueue:getMaxElementIndex(),324,335,"/**
 * Returns the index of the maximum element in the heap.
 * Returns 1 or 2 based on size, or compares elements.
 */",Returns the index of the max element.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekFirst,com.google.common.collect.MinMaxPriorityQueue:peekFirst(),360,362,"/**
 * Retrieves and returns the first element without removing it.
 * @return The first element or null if the deque is empty.
 */
","* Retrieves, but does not remove, the least element of this queue, or returns {@code null} if the
   * queue is empty.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUpAlternatingLevels,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUpAlternatingLevels(int,java.lang.Object)",582,595,"/**
 * Bubbles element up the alternating levels of the queue.
 * @param index index of the element to bubble up
 * @param x element to be bubbled up
 * @return index of the element after bubbling
 */
","* Bubbles a value from {@code index} up the levels of this heap, and returns the index the
     * element ended up at.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,verifyIndex,com.google.common.collect.MinMaxPriorityQueue$Heap:verifyIndex(int),730,744,"/**
 * Checks if the heap property is satisfied at index i.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,hasNext,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:hasNext(),781,786,"/**
 * Checks if there's a next element available.
 * Returns true if nextCursor < size or forgetMeNot is not empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,next,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:next(),788,805,"/**
 * Returns the next element in the queue.
 * Throws NoSuchElementException if no next element exists.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,build,com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder:build(com.google.common.collect.Multimap),479,483,"/**
 * Builds a SortedSetMultimap from the given Multimap.
 * @param multimap input multimap
 * @return SortedSetMultimap built from the input
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableListMultimap:get(java.lang.Object),804,807,"/**
 * Retrieves values associated with the given key.
 * @param key key to retrieve values for
 * @return unmodifiable list of values or empty list
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:get(java.lang.Object),834,841,"/**
 * Returns the set of values associated with the given key.
 * @param key the key to retrieve values for
 * @return unmodifiable set of values for the key
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,delegate,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:delegate(),868,871,"/**
 * Returns the delegate multimap.
 * Casts the superclass delegate to SortedSetMultimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,descendingIterator,com.google.common.collect.AbstractSortedMultiset:descendingIterator(),116,118,"/**
 * Returns a descending iterator over the multiset elements.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,iterator,com.google.common.collect.ConcurrentHashMultiset:iterator(),553,556,"/**
 * Returns an iterator over the elements in this multiset.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,iterator,com.google.common.collect.DescendingMultiset:iterator(),143,146,"/**
 * Returns an iterator over the elements in this multiset.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,iterator,com.google.common.collect.EnumMultiset:iterator(),293,296,"/**
 * Returns an iterator over the elements in this multiset.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardIterator,com.google.common.collect.ForwardingMultiset:standardIterator(),263,265,"/**
 * Returns an iterator for this multiset, using Multisets.iteratorImpl.
 */","* A sensible definition of {@link #iterator} in terms of {@link #entrySet} and {@link
   * #remove(Object)}. If you override either of these methods, you may wish to override {@link
   * #iterator} to forward to this implementation.
   *
   * @since 7.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,iterator,com.google.common.collect.Multisets$ViewMultiset:iterator(),1183,1186,"/**
 * Returns an iterator over the elements of this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,iterator,com.google.common.collect.TreeMultiset:iterator(),542,545,"/**
 * Returns an iterator over the elements in this multiset.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,elementSet,com.google.common.collect.UnmodifiableSortedMultiset:elementSet(),59,62,"/**
* Returns the set of elements in this map's keys.
* Returns a navigable set view of the keys.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,comparator,com.google.common.collect.UnmodifiableSortedMultiset:comparator(),49,52,"/**
* Returns the comparator used for sorting elements, or null.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,firstEntry,com.google.common.collect.UnmodifiableSortedMultiset:firstEntry(),77,80,"/**
 * Returns the first entry in the map, or null if the map is empty.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,lastEntry,com.google.common.collect.UnmodifiableSortedMultiset:lastEntry(),82,85,"/**
 * Returns the last entry in the map.
 * @return The last entry or null if the map is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,count,com.google.common.collect.ForwardingMultiset:count(java.lang.Object),59,62,"/**
 * Counts occurrences of an element, delegating to the underlying collection.
 * @param element The element to count.
 * @return The number of occurrences.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,add,"com.google.common.collect.ForwardingMultiset:add(java.lang.Object,int)",64,68,"/**
 * Adds a specified number of elements to the delegate.
 * @param element Element to add.
 * @param occurrences Number of times to add the element.
 * @return The number of elements added to the delegate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,remove,"com.google.common.collect.ForwardingMultiset:remove(java.lang.Object,int)",70,74,"/**
 * Removes specified element occurrences from the delegate.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return Number of elements actually removed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,elementSet,com.google.common.collect.ForwardingMultiset:elementSet(),76,79,"/**
 * Returns the element set of the underlying delegate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,entrySet,com.google.common.collect.ForwardingMultiset:entrySet(),81,84,"/**
* Returns the entry set view of the map's entries.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,equals,com.google.common.collect.ForwardingMultiset:equals(java.lang.Object),86,89,"/**
* Checks if this object is equal to another object.
* @param object The object to compare to.
* @return True if objects are equal, false otherwise.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,hashCode,com.google.common.collect.ForwardingMultiset:hashCode(),91,94,"/**
 * Returns the hash code, delegating to the underlying delegate object.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int)",96,100,"/**
 * Sets the count for a given element using the delegate.
 * @param element The element to set the count for.
 * @param count The new count value.
 * @return The updated count.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,setCount,"com.google.common.collect.ForwardingMultiset:setCount(java.lang.Object,int,int)",102,106,"/**
 * Sets the count for a given element via the delegate.
 * @param element The element to set the count for.
 * @param oldCount The old count.
 * @param newCount The new count.
 * @return True if the count was updated, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(java.lang.Object[]),199,229,"/**
 * Copies elements into the provided array.
 * @param other Array to copy into; resized if needed.
 * @return The provided array containing copied elements.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,concat,"com.google.common.collect.ObjectArrays:concat(java.lang.Object,java.lang.Object[])",89,94,"/**
* Concatenates an element to an array.
* @param element The element to add.
* @param array The array to concatenate to.
* @return New array with element added.
*/
","* Returns a new array that prepends {@code element} to {@code array}.
   *
   * @param element the element to prepend to the front of {@code array}
   * @param array the array of elements to append
   * @return an array whose size is one larger than {@code array}, with {@code element} occupying
   *     the first position, and the elements of {@code array} occupying the remaining elements.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.util.Collection,java.lang.Object[])",131,142,"/**
 * Converts a collection to an array of specified type.
 * @param c Collection to convert.
 * @param array Array to populate, or a new array.
 * @return Array containing elements from the collection.
 */
","* Returns an array containing all of the elements in the specified collection; the runtime type
   * of the returned array is that of the specified array. If the collection fits in the specified
   * array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the
   * specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.
   *
   * <p>This method returns the elements in the order they are returned by the collection's
   * iterator.
   *
   * <p>TODO(kevinb): support concurrently modified collections?
   *
   * @param c the collection for which to return an array of elements
   * @param array the array in which to place the collection elements
   * @throws ArrayStoreException if the runtime type of the specified array is not a supertype of
   *     the runtime type of every element in the specified collection",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(),231,234,"/**
 * Converts the collection to an array of Objects.
 * Uses ObjectArrays.toArrayImpl for implementation.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(),987,998,"/**
 * Returns an array representation of the collection.
 * Uses toArrayImpl to create the array.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,min,com.google.common.collect.Ordering:min(java.lang.Iterable),587,590,"/**
 * Returns the minimum element from the given iterable.
 * @param iterable Iterable to find the minimum element from.
 * @return The minimum element in the iterable.
 */
","* Returns the least of the specified values according to this ordering. If there are multiple
   * least values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.min(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).min(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied minimum element is returned.
   *
   * @param iterable the iterable whose minimum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.util.Iterator),83,86,"/**
 * Returns the maximum element from the iterator in forward order.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,max,com.google.common.collect.Ordering:max(java.lang.Iterable),678,681,"/**
 * Returns the maximum element of an iterable.
 * @param iterable Iterable to find the maximum from.
 * @return The maximum element in the iterable.
 */
","* Returns the greatest of the specified values according to this ordering. If there are multiple
   * greatest values, the first of those is returned.
   *
   * <p><b>Java 8+ users:</b> If {@code iterable} is a {@link Collection}, use {@code
   * Collections.max(collection, thisComparator)} instead. Otherwise, use {@code
   * Streams.stream(iterable).max(thisComparator).get()} instead. Note that these alternatives do
   * not guarantee which tied maximum element is returned.
   *
   * @param iterable the iterable whose maximum element is to be determined
   * @throws NoSuchElementException if {@code iterable} is empty
   * @throws ClassCastException if the parameters are not <i>mutually comparable</i> under this
   *     ordering.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.util.Iterator),62,65,"/**
* Returns the minimum element from the iterator.
* @param iterator Iterator providing elements to compare
* @return The minimum element found in the iterator.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFutureState.java,getOrInitSeenExceptions,com.google.common.util.concurrent.AggregateFutureState:getOrInitSeenExceptions(),84,141,"/**
 * Gets the set of seen exceptions, initializing it if necessary.
 * Returns the set of seen exceptions.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,toString,com.google.common.collect.ContiguousSet:toString(),250,253,"/**
 * Returns a string representation of the range.
 */
","Returns a shorthand representation of the contents such as {@code ""[1..100]""}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:entryIterator(),362,400,"/**
 * Returns an iterator over entries of Cut and Range, filtered by upperBoundWindow.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,from,com.google.common.collect.GeneralRange:from(com.google.common.collect.Range),42,57,"/**
 * Creates a GeneralRange from a given Range.
 * @param range The Range to convert.
 * @return A GeneralRange representing the input Range.
 */
",Converts a Range to a GeneralRange.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps:subMap(java.util.NavigableMap,com.google.common.collect.Range)",4496,4519,"/**
 * Returns a submap containing keys within the specified range.
 * @param map NavigableMap to extract from.
 * @param range Range of keys to include.
 * @return Submap containing keys within the range.
 */
","* Returns a view of the portion of {@code map} whose keys are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableMap} (namely {@link
   * NavigableMap#subMap(Object, boolean, Object, boolean) subMap()}, {@link
   * NavigableMap#tailMap(Object, boolean) tailMap()}, and {@link NavigableMap#headMap(Object,
   * boolean) headMap()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableMap} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered maps can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets:subSet(java.util.NavigableSet,com.google.common.collect.Range)",2300,2323,"/**
 * Returns a sub-set based on the provided range.
 * @param set NavigableSet to extract from.
 * @param range Range defining the sub-set bounds.
 * @return Sub-set of the input set.
 */
","* Returns a view of the portion of {@code set} whose elements are contained by {@code range}.
   *
   * <p>This method delegates to the appropriate methods of {@link NavigableSet} (namely {@link
   * NavigableSet#subSet(Object, boolean, Object, boolean) subSet()}, {@link
   * NavigableSet#tailSet(Object, boolean) tailSet()}, and {@link NavigableSet#headSet(Object,
   * boolean) headSet()}) to actually construct the view. Consult these methods for a full
   * description of the returned view's behavior.
   *
   * <p><b>Warning:</b> {@code Range}s always represent a range of values using the values' natural
   * ordering. {@code NavigableSet} on the other hand can specify a custom ordering via a {@link
   * Comparator}, which can violate the natural ordering. Using this method (or in general using
   * {@code Range}) with unnaturally-ordered sets can lead to unexpected and undefined behavior.
   *
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,get,com.google.common.collect.RegularImmutableBiMap:get(java.lang.Object),148,151,"/**
 * Retrieves the value associated with a key.
 * @param key The key to retrieve the value for.
 * @return The value or null if the key is not present.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,get,com.google.common.collect.RegularImmutableMap:get(java.lang.Object),260,263,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value associated with the key, or null.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,contains,com.google.common.collect.RegularImmutableSortedSet:contains(java.lang.Object),95,102,"/**
 * Checks if the set contains the specified object.
 * @param o object to search for
 * @return true if found, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,get,com.google.common.collect.ImmutableSortedMap:get(java.lang.Object),791,795,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value, or null if the key is not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,count,com.google.common.collect.RegularImmutableSortedMultiset:count(java.lang.Object),89,93,"/**
 * Counts occurrences of an element. Returns 0 if not found.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,lower,com.google.common.collect.ForwardingNavigableSet:lower(java.lang.Object),61,64,"/**
 * Returns the element immediately before the given element.
 * @param e the element to find the lower element of
 * @return the element immediately before {@code e} or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,floor,com.google.common.collect.ForwardingNavigableSet:floor(java.lang.Object),75,78,"/**
 * Returns the greatest element less than or equal to given element.
 * @param e the element to compare
 * @return the floor element or null if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,ceiling,com.google.common.collect.ForwardingNavigableSet:ceiling(java.lang.Object),89,92,"/**
 * Returns the greatest element less than or equal to given element.
 * @param e the element to compare
 * @return the ceiling element or null if not found
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,higher,com.google.common.collect.ForwardingNavigableSet:higher(java.lang.Object),103,106,"/**
 * Returns the next higher element than the given element.
 * @param e the element to find the next higher element from
 * @return the next higher element or null if none exists
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollFirst,com.google.common.collect.ForwardingNavigableSet:pollFirst(),117,120,"/**
 * Retrieves and removes the first element, or null if empty.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,pollLast,com.google.common.collect.ForwardingNavigableSet:pollLast(),131,134,"/**
 * Retrieves and removes the last element from the underlying collection.
 * @return The last element or null if the collection is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.ForwardingNavigableSet:descendingSet(),155,158,"/**
 * Returns a descending sorted set backed by the delegate set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingIterator,com.google.common.collect.ForwardingNavigableSet:descendingIterator(),176,179,"/**
 * Returns a descending iterator for the set.
 * Delegates to the underlying set's iterator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.ForwardingNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
 * Returns a sub-set by the given from/to elements and inclusivity.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.ForwardingNavigableSet:headSet(java.lang.Object,boolean)",215,218,"/**
 * Returns elements less than or equal to {@code toElement}.
 * @param toElement Element to return elements up to (inclusive).
 * @param inclusive Whether to include {@code toElement}.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.ForwardingNavigableSet:tailSet(java.lang.Object,boolean)",229,232,"/**
 * Returns a tail set from the given element, inclusive.
 * @param fromElement The lower bound (inclusive).
 * @param inclusive Whether to include fromElement.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,delegate,com.google.common.collect.ForwardingSortedSet:delegate(),67,68,"/**
 * Returns the sorted set delegate for this map.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,createElementSet,com.google.common.collect.AbstractSortedMultiset:createElementSet(),56,59,"/**
 * Returns a navigable set of elements contained in this multiset.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,elementSet,com.google.common.collect.DescendingMultiset:elementSet(),52,59,"/**
 * Returns a navigable set of the elements in this multiset.
 * Lazily initialized.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingSet,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingSet(),123,126,"/**
 * Returns a descending set, sorted in reverse order.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,subSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",143,154,"/**
 * Returns a view of the set between fromElement and toElement.
 * @param fromElement Lower bound (inclusive or exclusive).
 * @param toElement Upper bound (inclusive or exclusive).
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,headSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:headSet(java.lang.Object,boolean)",156,160,"/**
 * Returns a navigable set containing elements less than toElement.
 * @param toElement Element to return elements before
 * @param inclusive Whether to include toElement
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,tailSet,"com.google.common.collect.SortedMultisets$NavigableElementSet:tailSet(java.lang.Object,boolean)",162,166,"/**
 * Returns a tail set of elements greater than or equal to fromElement.
 * @param fromElement element to start the tail set from
 * @param inclusive whether fromElement is included in the set
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$ColumnKeySet:size(),693,696,"/**
 * Returns the number of elements in this collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,maintainEmptyInvariant,com.google.common.collect.StandardTable$Row:maintainEmptyInvariant(),337,343,"/**
 * Removes row if backing row map is empty after update.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Row:containsKey(java.lang.Object),345,349,"/**
 * Checks if the map contains the specified key.
 * @param key The key to check. Returns true if present.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Row:get(java.lang.Object),351,355,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value or null if the key is null/not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,size,com.google.common.collect.StandardTable$Row:size(),387,391,"/**
 * Returns the number of rows in this table.
 * Uses backingRowMap to determine the size.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entryIterator,com.google.common.collect.StandardTable$Row:entryIterator(),393,417,"/**
* Returns an iterator over the entries in this map.
* Updates backing map and wraps entries.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,entrySpliterator,com.google.common.collect.StandardTable$Row:entrySpliterator(),419,426,"/**
 * Returns a Spliterator for map entries. Returns empty if backing map is null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.HashBasedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",149,156,"/**
* Adds or updates a column value for a row.
* @param rowKey Row key.
* @param columnKey Column key.
* @param value Value to set.
* @return Previous value or null if new.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Column:put(java.lang.Object,java.lang.Object)",466,469,"/**
* Puts a key-value pair into the table.
* @param key The key for the entry.
* @param value The value to associate with the key.
* @return The previous value or null if absent.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,put,"com.google.common.collect.StandardTable$Row:put(java.lang.Object,java.lang.Object)",357,365,"/**
* Puts a key-value pair into the map.
* @param key The key to put.
* @param value The value associated with the key.
* @return Previous value or null if not found.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowMap,com.google.common.collect.HashBasedTable:rowMap(),802,806,"/**
 * Returns a map of rows to column-value pairs. Lazily initializes if null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.StandardRowSortedTable:rowMap(),85,88,"/**
* Returns the row map, casting the result to SortedMap.
*/","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.StandardTable:rowKeySet(),665,668,"/**
 * Returns a set of row keys.
 * Delegates to the internal rowMap().keySet().
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedAsMap:containsValue(java.lang.Object),1430,1436,"/**
 * Checks if the map contains the specified value.
 * @param o value to search for
 * @return true if the value is present, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedAsMap:entrySet(),1410,1418,"/**
 * Returns a synchronized view of the map's entry set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:<init>(java.util.NavigableSet,java.lang.Object)",1465,1467,"/**
 * Constructs a SynchronizedNavigableSet using the given delegate and mutex.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSet,"com.google.common.collect.Synchronized:sortedSet(java.util.SortedSet,java.lang.Object)",302,305,"/**
 * Wraps a SortedSet with synchronization.
 * @param set The SortedSet to wrap.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,com.google.common.collect.Synchronized$SynchronizedCollection:add(java.lang.Object),137,142,"/**
 * Adds an element to the underlying collection, synchronized.
 * @param e the element to add
 * @return true if the element was added, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,com.google.common.collect.Synchronized$SynchronizedCollection:addAll(java.util.Collection),144,149,"/**
 * Adds all elements from the given collection to the delegate.
 * @param c collection of elements to add
 * @return true if the delegate was modified
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedCollection:clear(),151,156,"/**
 * Clears the underlying collection, ensuring thread safety.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedCollection:contains(java.lang.Object),158,163,"/**
 * Checks if the set contains the specified element.
 * @param o element to check for
 * @return true if present, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsAll,com.google.common.collect.Synchronized$SynchronizedCollection:containsAll(java.util.Collection),165,170,"/**
 * Checks if this collection contains all elements of the given collection.
 * @param c collection to check for containment
 * @return true if this collection contains all elements of c
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedCollection:isEmpty(),172,177,"/**
 * Checks if the underlying collection is empty.
 * Uses a mutex to ensure thread-safe access.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedCollection:iterator(),179,182,"/**
 * Returns an iterator over the elements in this collection.
 * Delegates to the delegate's iterator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,spliterator,com.google.common.collect.Synchronized$SynchronizedCollection:spliterator(),184,189,"/**
 * Returns a Spliterator for the elements of this collection.
 * Uses the delegate's spliterator, synchronized for thread safety.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,stream,com.google.common.collect.Synchronized$SynchronizedCollection:stream(),191,196,"/**
 * Returns a stream of elements supported by this collection.
 * Synchronized to ensure thread-safe access.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,parallelStream,com.google.common.collect.Synchronized$SynchronizedCollection:parallelStream(),198,203,"/**
 * Returns a parallel stream of the collection.
 * Synchronizes before calling delegate's parallelStream.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedCollection:forEach(java.util.function.Consumer),205,210,"/**
 * Performs the specified action for each element in this collection.
 * @param action The Consumer to apply to each element.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedCollection:remove(java.lang.Object),212,217,"/**
 * Removes the specified object from the underlying collection.
 * @param o object to remove; can be null
 * @return true if the object was removed
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedCollection:removeAll(java.util.Collection),219,224,"/**
 * Removes all elements from the collection that are also in the given collection.
 * @param c collection containing elements to remove
 * @return true if the collection was modified
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,retainAll,com.google.common.collect.Synchronized$SynchronizedCollection:retainAll(java.util.Collection),226,231,"/**
* Retains elements from the collection c.
* Synchronized and delegates to the underlying collection.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeIf,com.google.common.collect.Synchronized$SynchronizedCollection:removeIf(java.util.function.Predicate),233,238,"/**
 * Removes elements based on the provided predicate.
 * @param filter Predicate to filter elements for removal.
 * @return True if any elements were removed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedCollection:size(),240,245,"/**
 * Returns the number of elements in the delegate collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(),247,252,"/**
 * Returns an array representation of this collection.
 * Uses delegate() to perform the actual conversion.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedCollection:toArray(java.lang.Object[]),254,260,"/**
 * Converts the collection to an array of type T.
 * @param a array of type T to store the elements in
 * @return array of type T containing the collection's elements
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedList:delegate(),375,378,"/**
 * Delegates to the superclass's delegate method.
 * Returns a List of type E.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedMultiset:delegate(),506,509,"/**
 * Returns the multiset delegate. Casts to Multiset<E>.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedQueue:delegate(),1852,1855,"/**
 * Returns the underlying queue implementation.
 * Casts the superclass delegate to Queue<E>.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSet:delegate(),277,280,"/**
* Delegates to the superclass's delegate method.
* Returns the set returned by the superclass.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedEntry:equals(java.lang.Object),1803,1808,"/**
 * Compares this object with another using the delegate's equals method.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedEntry:hashCode(),1810,1815,"/**
 * Returns the hash code, synchronizing access to the delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getKey,com.google.common.collect.Synchronized$SynchronizedEntry:getKey(),1817,1822,"/**
 * Returns the key associated with this map.
 * Returns the key from the underlying delegate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getValue,com.google.common.collect.Synchronized$SynchronizedEntry:getValue(),1824,1829,"/**
 * Returns the value associated with the key, thread-safely.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setValue,com.google.common.collect.Synchronized$SynchronizedEntry:setValue(java.lang.Object),1831,1836,"/**
* Sets the value using the delegate, synchronizing access.
* @param value The new value to set.
* @return The previous value.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedBiMap:delegate(),1358,1361,"/**
 * Returns the underlying BiMap implementation. Casts to K, V.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMap:clear(),1078,1083,"/**
 * Clears the underlying collection, ensuring thread safety.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMap:containsKey(java.lang.Object),1085,1090,"/**
 * Checks if the map contains a key, synchronized.
 * @param key The key to check.
 * @return True if the key exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMap:containsValue(java.lang.Object),1092,1097,"/**
 * Checks if the map contains a specific value.
 * @param value value to search for
 * @return true if found, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMap:entrySet(),1099,1107,"/**
 * Returns a synchronized view of the map's entry set.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMap:forEach(java.util.function.BiConsumer),1109,1114,"/**
 * Executes the specified action on each entry in this map.
 * @param action The BiConsumer to apply to each key-value pair.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMap:get(java.lang.Object),1116,1121,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value or null if the key is not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getOrDefault,"com.google.common.collect.Synchronized$SynchronizedMap:getOrDefault(java.lang.Object,java.lang.Object)",1123,1128,"/**
 * Gets the value associated with the key, or defaultValue if absent.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMap:isEmpty(),1130,1135,"/**
* Checks if the underlying collection is empty.
* Uses a mutex for thread-safe access.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMap:keySet(),1137,1145,"/**
* Returns a set view of the map's keys, synchronized.
* Lazily initializes the set if it's null.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMap:put(java.lang.Object,java.lang.Object)",1147,1152,"/**
 * Puts a key-value pair into the map, synchronizing access.
 * @param key The key for the new entry.
 * @param value The value associated with the key.
 * @return The previous value, or null if key was new.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:putIfAbsent(java.lang.Object,java.lang.Object)",1154,1159,"/**
 * Atomically puts the value if the key is not already associated.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return Previous value or null if key was not present
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",1161,1166,"/**
 * Replaces the entry for the given key, if present.
 * @param key The key of the entry to replace.
 * @param oldValue The old value that must be present.
 * @param newValue The new value for the key.
 * @return True if the entry was replaced.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replace,"com.google.common.collect.Synchronized$SynchronizedMap:replace(java.lang.Object,java.lang.Object)",1168,1173,"/**
 * Replaces the value for a key, synchronized.
 * @param key The key whose value is to be replaced.
 * @param value The new value for the key.
 * @return The old value, or null if the key wasn't present.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfAbsent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfAbsent(java.lang.Object,java.util.function.Function)",1175,1180,"/**
 * Computes the value for key, or computes it if absent.
 * @param key The key to check or compute.
 * @param mappingFunction Function to compute value if absent.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,computeIfPresent,"com.google.common.collect.Synchronized$SynchronizedMap:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",1182,1189,"/**
 * Computes a value if present, applying a function.
 * @param key The key to check.
 * @param remappingFunction Function to apply if present.
 * @return The remapped value or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,compute,"com.google.common.collect.Synchronized$SynchronizedMap:compute(java.lang.Object,java.util.function.BiFunction)",1191,1198,"/**
 * Computes a value for the given key, using the remapping function.
 * @param key The key to compute for.
 * @param remappingFunction Function to compute the new value.
 * @return Computed value or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,merge,"com.google.common.collect.Synchronized$SynchronizedMap:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",1200,1210,"/**
 * Merges the specified key-value pair, using remapping if needed.
 * @param key The key of the entry to merge.
 * @param value The value to merge.
 * @param remappingFunction Function to re-map values.
 * @return Merged value or null if merge fails.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMap:putAll(java.util.Map),1212,1217,"/**
* Adds all entries from the given map to the map, synchronized.
* @param map the map whose entries to add
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedMap:replaceAll(java.util.function.BiFunction),1219,1224,"/**
 * Replaces all values with the result of the given function.
 * @param function BiFunction to apply to each key-value pair
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object),1226,1231,"/**
* Removes the specified key's mapping.
* @param key The key to remove.
* @return The previous value or null if absent.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMap:remove(java.lang.Object,java.lang.Object)",1233,1238,"/**
 * Removes the specified key-value pair, synchronized.
 * @param key The key of the entry to remove.
 * @param value The value of the entry to remove.
 * @return True if the key-value pair was removed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMap:size(),1240,1245,"/**
 * Returns the number of elements in the delegate collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMap:values(),1247,1255,"/**
 * Returns a collection of the values in this map.
 * Uses synchronization to ensure thread-safe access.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMap:equals(java.lang.Object),1257,1265,"/**
 * Checks if this object is equal to another object.
 * @param o the other object to compare to
 * @return true if objects are equal, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMap:hashCode(),1267,1272,"/**
 * Returns the hash code, synchronizing access to the delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedMap:delegate(),1289,1292,"/**
 * Returns the sorted map delegate.
 * Casts the superclass delegate to the correct type.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedListMultimap:delegate(),797,800,"/**
 * Returns the underlying ListMultimap delegate.
 * Casts the superclass delegate to ListMultimap.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedMultimap:size(),612,617,"/**
 * Returns the number of elements in the delegate collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedMultimap:isEmpty(),619,624,"/**
 * Checks if the underlying collection is empty.
 * Uses a lock to ensure thread-safe access.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsKey,com.google.common.collect.Synchronized$SynchronizedMultimap:containsKey(java.lang.Object),626,631,"/**
 * Checks if the map contains a key, synchronized.
 * @param key The key to check.
 * @return True if the map contains the key.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedMultimap:containsValue(java.lang.Object),633,638,"/**
 * Checks if the map contains a specific value.
 * @param value Value to search for.
 * @return True if value is present, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsEntry,"com.google.common.collect.Synchronized$SynchronizedMultimap:containsEntry(java.lang.Object,java.lang.Object)",640,645,"/**
 * Checks if the map contains a key-value pair.
 * @param key The key to check.
 * @param value The value to check.
 * @return True if the map contains the entry, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedMultimap:get(java.lang.Object),647,652,"/**
 * Retrieves values associated with the given key.
 * @param key the key to retrieve values for
 * @return Collection of values or an empty collection.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedMultimap:put(java.lang.Object,java.lang.Object)",654,659,"/**
 * Puts a key-value pair, synchronizing access.
 * @param key The key to put.
 * @param value The value associated with the key.
 * @return True if the put was successful.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,"com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(java.lang.Object,java.lang.Iterable)",661,666,"/**
 * Puts all entries from an iterable into the map, synchronized.
 * @param key the key for the entries
 * @param values iterable of values to put
 * @return true if the map was modified
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedMultimap:putAll(com.google.common.collect.Multimap),668,673,"/**
 * Adds all entries from the multimap to this multimap.
 * @param multimap the multimap whose entries to add
 * @return true if the multimap was changed
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",675,680,"/**
 * Replaces values for a key, synchronizing access.
 * @param key The key for which to replace values.
 * @param values Iterable of new values for the key.
 * @return Collection of replaced values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultimap:remove(java.lang.Object,java.lang.Object)",682,687,"/**
 * Removes the specified key-value pair, synchronized.
 * @param key The key of the entry to remove.
 * @param value The value of the entry to remove.
 * @return True if the key-value pair was removed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedMultimap:removeAll(java.lang.Object),689,694,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return Collection of removed values.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedMultimap:clear(),696,701,"/**
 * Clears the collection, ensuring thread-safe operation.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedMultimap:keySet(),703,711,"/**
 * Returns a set view of the map's keys, synchronized.
 * Creates if null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedMultimap:values(),713,721,"/**
 * Returns a collection view of the values in this map.
 * Uses a synchronized collection.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedMultimap:entries(),723,731,"/**
 * Returns a collection of the map's entries.
 * Uses type-preserving collection for thread safety.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forEach,com.google.common.collect.Synchronized$SynchronizedMultimap:forEach(java.util.function.BiConsumer),733,738,"/**
 * Performs the given action on each entry in the map, synchronized.
 * @param action The BiConsumer to apply to each key-value pair.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultimap:equals(java.lang.Object),760,770,"/**
 * Checks if this object is equal to another object.
 * @param o the object to compare to
 * @return true if objects are equal, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultimap:hashCode(),772,777,"/**
 * Calculates hash code, synchronizing access to delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSetMultimap:delegate(),842,845,"/**
* Returns the underlying SetMultimap delegate.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,"com.google.common.collect.Synchronized$SynchronizedTable:contains(java.lang.Object,java.lang.Object)",2052,2057,"/**
 * Checks if the delegate contains the given row and column keys.
 * @param rowKey Row key to check.
 * @param columnKey Column key to check.
 * @return True if the delegate contains the keys, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsRow,com.google.common.collect.Synchronized$SynchronizedTable:containsRow(java.lang.Object),2059,2064,"/**
 * Checks if a row exists.
 * @param rowKey The row key to check.
 * @return True if the row exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsColumn,com.google.common.collect.Synchronized$SynchronizedTable:containsColumn(java.lang.Object),2066,2071,"/**
 * Checks if the delegate contains a column.
 * @param columnKey The key of the column to check.
 * @return True if the column exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,containsValue,com.google.common.collect.Synchronized$SynchronizedTable:containsValue(java.lang.Object),2073,2078,"/**
 * Checks if the map contains a specified value.
 * @param value value to search for
 * @return true if found, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,"com.google.common.collect.Synchronized$SynchronizedTable:get(java.lang.Object,java.lang.Object)",2080,2085,"/**
 * Retrieves a value by row and column keys.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return Value at the specified row and column.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,isEmpty,com.google.common.collect.Synchronized$SynchronizedTable:isEmpty(),2087,2092,"/**
 * Checks if the underlying collection is empty.
 * Uses a mutex to ensure thread-safe access.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,size,com.google.common.collect.Synchronized$SynchronizedTable:size(),2094,2099,"/**
 * Returns the number of elements in the delegate collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,clear,com.google.common.collect.Synchronized$SynchronizedTable:clear(),2101,2106,"/**
 * Clears the underlying collection, ensuring thread safety.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,put,"com.google.common.collect.Synchronized$SynchronizedTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",2108,2116,"/**
* Puts a value in the delegate, synchronizing access.
* @param rowKey Row key. @param columnKey Column key. @param value Value to put.
* @return The previous value, or null if none.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,putAll,com.google.common.collect.Synchronized$SynchronizedTable:putAll(com.google.common.collect.Table),2118,2123,"/**
 * Adds all entries from the given table to this table.
 * @param table The table whose entries to add.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedTable:remove(java.lang.Object,java.lang.Object)",2125,2130,"/**
 * Removes a value at the given row/column keys.
 * @param rowKey Row key. @param columnKey Column key.
 * @return Removed value or null if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,cellSet,com.google.common.collect.Synchronized$SynchronizedTable:cellSet(),2146,2151,"/**
 * Returns a set view of the cells.
 * Uses the delegate's cell set, synchronized by mutex.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowKeySet,com.google.common.collect.Synchronized$SynchronizedTable:rowKeySet(),2153,2158,"/**
 * Returns a set of row keys. Synchronized for thread safety.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnKeySet,com.google.common.collect.Synchronized$SynchronizedTable:columnKeySet(),2160,2165,"/**
* Returns the set of column keys.
* Synchronized access to the underlying set.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedTable:values(),2167,2172,"/**
 * Returns a collection of all values in this map.
 * Synchronized to prevent concurrent modification.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedTable:hashCode(),2188,2193,"/**
 * Calculates the hash code, synchronizing access to the delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedTable:equals(java.lang.Object),2195,2203,"/**
 * Checks if this object is equal to another object.
 * @param obj The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,deque,"com.google.common.collect.Synchronized:deque(java.util.Deque,java.lang.Object)",1895,1897,"/**
 * Wraps a deque with synchronization.
 * @param deque The deque to wrap.
 * @param mutex The mutex object for synchronization.
 * @return A synchronized deque.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedQueue,com.google.common.collect.Queues:synchronizedQueue(java.util.Queue),456,459,"/**
 * Wraps a queue to make it synchronized.
 * @param queue The queue to synchronize.
 * @return A synchronized queue.
 */
","* Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing queue is accomplished
   * through the returned queue.
   *
   * <p>It is imperative that the user manually synchronize on the returned queue when accessing the
   * queue's iterator:
   *
   * {@snippet :
   * Queue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create());
   * ...
   * queue.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (queue) {  // Must synchronize on queue!
   *   Iterator<E> i = queue.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned queue will be serializable if the specified queue is serializable.
   *
   * @param queue the queue to be wrapped in a synchronized view
   * @return a synchronized view of the specified queue
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,list,"com.google.common.collect.Synchronized:list(java.util.List,java.lang.Object)",363,367,"/**
 * Wraps a list with synchronization. Uses SynchronizedRandomAccessList if possible.
 * @param list The list to wrap.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keys,com.google.common.collect.Synchronized$SynchronizedMultimap:keys(),750,758,"/**
 * Returns a multiset containing the keys of this multiset.
 * Returns a synchronized view of the keys.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowKeySet,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowKeySet(),662,665,"/**
 * Returns a sorted set of row keys.
 * Returns an unmodifiable view of the delegate's row keys.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,compare,"com.google.common.collect.TreeBasedTable$TreeRow:compare(java.lang.Object,java.lang.Object)",212,217,"/**
 * Compares two objects using the internal comparator.
 * @param a The first object to compare.
 * @param b The second object to compare.
 * @return The comparison result.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,recompute,com.google.common.collect.TreeMultiset$AvlNode:recompute(),945,948,"/**
 * Recomputes the multiset and height of the current node.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateBelowRange,"com.google.common.collect.TreeMultiset:aggregateBelowRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",178,201,"/**
 * Calculates the aggregate of elements less than the range's lower bound.
 * @param aggr Aggregate object
 * @param node Current AVL node
 * @return Aggregate value
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateAboveRange,"com.google.common.collect.TreeMultiset:aggregateAboveRange(com.google.common.collect.TreeMultiset$Aggregate,com.google.common.collect.TreeMultiset$AvlNode)",203,226,"/**
 * Calculates aggregate of elements greater than the upper range bound.
 * @param aggr Aggregate object, node aggregate and tree aggregate.
 * @param node Current AVL node being evaluated.
 * @return Long value representing the aggregate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,char,char)",84,97,"/**
* Initializes the ArrayBasedCharEscaper with a map and safe character range.
* @param escaperMap Map of characters to escape
* @param safeMin Minimum safe character
* @param safeMax Maximum safe character
*/
","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe. This initializer is
   * useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large
   * replacement mappings.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the mapping of characters to be escaped
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,<init>,com.google.common.escape.CharEscaperBuilder$CharArrayDecorator:<init>(char[][]),45,48,"/**
 * Initializes the decorator with replacement character arrays.
 * @param replacements Array of character replacements.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/Escapers.java,<init>,com.google.common.escape.Escapers$1:<init>(),34,34,"/**
 * Private constructor to prevent instantiation of the Escapers class.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(com.google.common.escape.ArrayBasedEscaperMap,int,int,java.lang.String)",95,136,"/**
 * Constructs an ArrayBasedUnicodeEscaper with given replacement map, range, and replacement.
 */","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe. This
   * initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the
   * sharing of large replacement mappings.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param escaperMap the map of replacements
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/PercentEscaper.java,<init>,"com.google.common.net.PercentEscaper:<init>(java.lang.String,boolean)",85,103,"/**
 * Creates a PercentEscaper with specified safe characters and space handling.
 * @param safeChars Safe characters for escaping.
 * @param plusForSpace Whether to use '+' for spaces.
 */
","* Constructs a percent escaper with the specified safe characters and optional handling of the
   * space character.
   *
   * <p>Not that it is allowed, but not necessarily desirable to specify {@code %} as a safe
   * character. This has the effect of creating an escaper which has no well-defined inverse but it
   * can be useful when escaping additional characters.
   *
   * @param safeChars a non-null string specifying additional safe characters for this escaper (the
   *     ranges 0..9, a..z and A..Z are always safe and should not be specified here)
   * @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}
   * @throws IllegalArgumentException if any of the parameters were invalid",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaper.java,escape,com.google.common.escape.CharEscaper:escape(java.lang.String),55,66,"/**
 * Escapes a string, returning the original if no escaping is needed.
 */
","* Returns the escaped form of a given literal string.
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,handleException,"com.google.common.eventbus.EventBus$LoggingHandler:handleException(java.lang.Throwable,com.google.common.eventbus.SubscriberExceptionContext)",278,284,"/**
 * Logs a severe exception with context.
 * @param exception The exception to log.
 * @param context SubscriberExceptionContext for logging.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/Subscriber.java,create,"com.google.common.eventbus.Subscriber:create(com.google.common.eventbus.EventBus,java.lang.Object,java.lang.reflect.Method)",38,42,"/**
 * Creates a Subscriber, synchronized if method isn't thread-safe.
 * @param bus EventBus instance. @param listener Listener object.
 * @param method Method to be subscribed.
 */
",Creates a {@code Subscriber} for {@code method} on {@code listener}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
 * Checks if an edge exists between the given endpoints.
 * @param endpoints The endpoints to check.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,hasEdgeConnecting,com.google.common.graph.AbstractValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),164,173,"/**
 * Checks if an edge exists between two nodes.
 * @param endpoints The pair of endpoints to check.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,predecessors,com.google.common.graph.ImmutableGraph:predecessors(java.lang.Object),70,73,"/**
 * Returns the predecessors of the given node using the delegate.
 * @param node The node to find predecessors for.
 * @return Set of predecessors.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ForwardingGraph.java,successors,com.google.common.graph.ImmutableGraph:successors(java.lang.Object),75,78,"/**
 * Returns the successors of a node, delegating to the underlying implementation.
 * @param node The node to find successors for.
 * @return Set of successor nodes.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,incidentNodes,com.google.common.graph.Graphs$TransposedNetwork:incidentNodes(java.lang.Object),463,467,"/**
 * Returns incident nodes of an edge, transposing the order.
 * @param edge The edge to get incident nodes for.
 * @return EndpointPair containing the transposed incident nodes.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),350,353,"/**
* Checks if an edge connects the given endpoints.
* Delegates to the underlying graph, transposed.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgesConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgesConnecting(com.google.common.graph.EndpointPair),474,477,"/**
* Returns edges connecting given endpoints, transposed for delegate.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:edgeConnecting(com.google.common.graph.EndpointPair),484,487,"/**
* Finds an edge connecting the given endpoints, using a transposed version.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeConnectingOrNull,com.google.common.graph.Graphs$TransposedNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),494,497,"/**
* Gets the edge connecting the given endpoints, or null.
* @param endpoints Endpoint pair to check.
* @return The edge or null if no edge connects them.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedNetwork:hasEdgeConnecting(com.google.common.graph.EndpointPair),504,507,"/**
* Checks if an edge connects the given endpoints.
* Delegates to the underlying graph, transposed.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasEdgeConnecting,com.google.common.graph.Graphs$TransposedValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),395,398,"/**
* Checks if an edge connects the given endpoints.
* Delegates to the underlying graph, transposed.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValue,com.google.common.graph.Graphs$TransposedValueGraph:edgeValue(com.google.common.graph.EndpointPair),405,408,"/**
 * Gets the edge value for given endpoints, using transposed endpoints.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,edgeValueOrDefault,"com.google.common.graph.Graphs$TransposedValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",415,418,"/**
* Gets edge value or default.
* @param endpoints Endpoint pair.
* @param defaultValue Value if edge not found.
* @return Edge value or default.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,equals,com.google.common.graph.AbstractGraph:equals(java.lang.Object),35,48,"/**
 * Checks if this graph is equal to another graph.
 * @param obj The object to compare to.
 * @return True if graphs are equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,hashCode,com.google.common.graph.AbstractGraph:hashCode(),50,53,"/**
 * Returns the hash code, based on the edges hash code.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraph.java,toString,com.google.common.graph.AbstractGraph:toString(),56,66,"/**
 * Returns a string representation of the graph.
 */
",Returns a string representation of this graph.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractNetwork$1:edges(),66,99,"/**
 * Returns a set of edges in the graph.  The set is unmodifiable.
 */","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edges,com.google.common.graph.AbstractValueGraph$1:edges(),66,99,"/**
 * Returns a set view of the graph's edges.  The set is unmodifiable.
 */","* An implementation of {@link BaseGraph#edges()} defined in terms of {@link Graph#nodes()} and
   * {@link #successors(Object)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,containsEdge,com.google.common.graph.StandardNetwork:containsEdge(java.lang.Object),200,202,"/**
 * Checks if the reference node contains the given edge.
 * @param edge The edge to check for.
 * @return True if the edge is present, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edges,com.google.common.graph.ImmutableNetwork:edges(),100,103,"/**
 * Returns the set of edges in the graph.
 * Uses an unmodifiable view of the underlying map.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/MapRetrievalCache.java,get,com.google.common.graph.MapRetrievalCache:get(java.lang.Object),39,53,"/**
 * Retrieves a value by key, using cache if available.
 * @param key The key to retrieve the value for.
 * @return The value associated with the key, or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,inTree,com.google.common.graph.Traverser$Traversal:inTree(com.google.common.graph.SuccessorsFunction),395,407,"/**
 * Creates a tree traversal using the provided successors function.
 * @param tree Successors function to define the tree structure.
 * @return A Traversal object for in-order tree traversal.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",84,90,"/**
 * Removes an in-edge. Returns the removed node or null if self-loop.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(byte[]),82,88,"/**
 * Adds the given bytes to the hasher and returns itself.
 * @param bytes The bytes to add to the hasher.
 * @return The hasher instance for chaining.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,com.google.common.hash.AbstractByteHasher:putBytes(java.nio.ByteBuffer),98,103,"/**
* Updates the hasher with bytes from the given ByteBuffer.
* @param bytes The bytes to add to the hash.
* @return The hasher instance for chaining.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putShort,com.google.common.hash.AbstractByteHasher:putShort(short),105,110,"/**
 * Adds a short value to the hasher and updates the state.
 * @param s the short value to add
 * @return the updated Hasher instance
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putInt,com.google.common.hash.AbstractByteHasher:putInt(int),112,117,"/**
 * Adds an integer to the hasher and updates the state.
 * @param i The integer to add. Returns the updated Hasher.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putLong,com.google.common.hash.AbstractByteHasher:putLong(long),119,124,"/**
 * Adds a long value to the hasher.
 * @param l The long value to add.
 * @return The updated Hasher instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putChar,com.google.common.hash.AbstractByteHasher:putChar(char),126,131,"/**
 * Adds a character to the hasher and updates the state.
 * @param c The character to add.
 * @return The updated Hasher instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putDouble,com.google.common.hash.Hasher:putDouble(double),92,94,"/**
 * Adds a double value to the hasher and returns the hasher object.
 */",Equivalent to {@code putLong(Double.doubleToRawLongBits(d))}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putLong,com.google.common.hash.AbstractCompositeHashFunction$1:putLong(long),82,84,"/**
 * Puts a long value into the hasher.
 * @param l The long value to be added.
 * @return The hasher object for chaining.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashLong,com.google.common.hash.AbstractHashFunction:hashLong(long),54,57,"/**
 * Calculates the hash code for a given long value.
 * @param input The long value to hash.
 * @return A HashCode object representing the hash.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putChar,com.google.common.hash.AbstractCompositeHashFunction$1:putChar(char),101,103,"/**
 * Adds a character to the hasher and returns the hasher object.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,hash,com.google.common.hash.AbstractStreamingHasher:hash(),186,195,"/**
 * Calculates the hash code for the current object.
 * Munching, flipping, processing & finalization are involved.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,munchIfFull,com.google.common.hash.AbstractStreamingHasher:munchIfFull(),205,210,"/**
* Munch data if buffer has less than 8 bytes remaining.
*/",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,writeReplace,com.google.common.hash.BloomFilter:writeReplace(),557,559,"/**
 * Returns a replacement object for serialization.
 * Uses SerialForm to preserve type information.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,equals,com.google.common.hash.BloomFilter:equals(java.lang.Object),301,314,"/**
 * Checks if this Bloom filter is equal to another object.
 * @param object The object to compare with.
 * @return True if equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,toBloomFilter,"com.google.common.hash.BloomFilter:toBloomFilter(com.google.common.hash.Funnel,long)",342,345,"/**
 * Creates a Bloom filter collector.
 * @param funnel Funnel for hashing objects.
 * @param expectedInsertions Expected number of insertions.
 */
","* Returns a {@code Collector} expecting the specified number of insertions, and yielding a {@link
   * BloomFilter} with false positive probability 3%.
   *
   * <p>Note that if the {@code Collector} receives significantly more elements than specified, the
   * resulting {@code BloomFilter} will suffer a sharp deterioration of its false positive
   * probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code Collector} generating a {@code BloomFilter} of the received elements
   * @since 23.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,expectedFpp,com.google.common.hash.BloomFilter:expectedFpp(),210,212,"/**
 * Calculates the expected FPP (false positive probability).
 * Uses bit count and number of hash functions.
 */
","* Returns the probability that {@linkplain #mightContain(Object)} will erroneously return {@code
   * true} for an object that has not actually been put in the {@code BloomFilter}.
   *
   * <p>Ideally, this number should be close to the {@code fpp} parameter passed in {@linkplain
   * #create(Funnel, int, double)}, or smaller. If it is significantly higher, it is usually the
   * case that too many elements (more than expected) have been put in the {@code BloomFilter},
   * degenerating it.
   *
   * @since 14.0 (since 11.0 as expectedFalsePositiveProbability())",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,isCompatible,com.google.common.hash.BloomFilter:isCompatible(com.google.common.hash.BloomFilter),257,264,"/**
 * Checks if two Bloom filters are compatible.
 * Compares hash functions, bit size, strategy, and funnel.
 */
","* Determines whether a given Bloom filter is compatible with this Bloom filter. For two Bloom
   * filters to be compatible, they must:
   *
   * <ul>
   *   <li>not be the same instance
   *   <li>have the same number of hash functions
   *   <li>have the same bit size
   *   <li>have the same strategy
   *   <li>have equal funnels
   * </ul>
   *
   * @param that The Bloom filter to check for compatibility.
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator:compare(byte[],byte[])",424,434,"/**
 * Compares two byte arrays lexicographically.
 * Returns -1, 0, or 1 if left < right, equal, or > right.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,toString,com.google.common.primitives.UnsignedBytes:toString(byte),180,182,"/**
 * Converts a byte to its string representation in base 10.
 */
","* Returns a string representation of x, where x is treated as unsigned.
   *
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,putAll,com.google.common.hash.BloomFilter:putAll(com.google.common.hash.BloomFilter),275,299,"/**
 * Merges the contents of another BloomFilter into this one.
 * Requires identical size, hash functions, funnel, and strategy.
 */
","* Combines this Bloom filter with another Bloom filter by performing a bitwise OR of the
   * underlying data. The mutations happen to <b>this</b> instance. Callers must ensure the Bloom
   * filters are appropriately sized to avoid saturating them.
   *
   * @param that The Bloom filter to combine this Bloom filter with. It is not mutated.
   * @throws IllegalArgumentException if {@code isCompatible(that) == false}
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashLength65Plus,"com.google.common.hash.FarmHashFingerprint64:hashLength65Plus(byte[],int,int)",171,215,"/**
 * Hashes a byte array in chunks, handling lengths > 64 bytes.
 * @param bytes Input byte array.
 * @param offset Start offset.
 * @param length Length of data to hash.
 * @return Hash value.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fullFingerprint,"com.google.common.hash.Fingerprint2011:fullFingerprint(byte[],int,int)",115,146,"/**
 * Calculates a full fingerprint of byte array.
 * @param bytes input byte array
 * @param offset start offset in the array
 * @param length length of the data to fingerprint
 * @return 64-bit fingerprint value
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytesNoCopy,com.google.common.hash.HashCode:fromBytesNoCopy(byte[]),246,248,"/**
 * Creates a HashCode instance from a byte array.
 * @param bytes The byte array to hash.
 * @return A HashCode object representing the bytes.
 */
","* Creates a {@code HashCode} from a byte array. The array is <i>not</i> copied defensively, so it
   * must be handed-off so as to preserve the immutability contract of {@code HashCode}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromInt,com.google.common.hash.HashCode:fromInt(int),114,116,"/**
 * Creates a HashCode instance from an integer value.
 * @param hash The integer to use for the HashCode.
 * @return A new HashCode object representing the integer.
 */
","* Creates a 32-bit {@code HashCode} representation of the given int value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromLong,com.google.common.hash.HashCode:fromLong(long),171,173,"/**
 * Creates a HashCode instance from a long value.
 * @param hash The long value to create the HashCode from.
 * @return A HashCode object representing the long value.
 */
","* Creates a 64-bit {@code HashCode} representation of the given long value. The underlying bytes
   * are interpreted in little endian order.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,floatValue,com.google.common.primitives.UnsignedInteger:floatValue(),195,198,"/**
 * Returns the value of this BigInteger as a float.
 */","* Returns the value of this {@code UnsignedInteger} as a {@code float}, analogous to a widening
   * primitive conversion from {@code int} to {@code float}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,doubleValue,com.google.common.primitives.UnsignedInteger:doubleValue(),204,207,"/**
 * Returns the double representation of this number.
 */","* Returns the value of this {@code UnsignedInteger} as a {@code double}, analogous to a widening
   * primitive conversion from {@code int} to {@code double}, and correctly rounded.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,bigIntegerValue,com.google.common.primitives.UnsignedInteger:bigIntegerValue(),210,212,"/**
 * Converts the long value to a BigInteger.
 * @return BigInteger representation of the long value.
 */
",Returns the value of this {@code UnsignedInteger} as a {@link BigInteger}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,goodFastHash,com.google.common.hash.Hashing:goodFastHash(int),69,89,"/**
 * Returns a good fast hash function for the given minimum bits.
 * @param minimumBits minimum number of bits for the hash
 * @return HashFunction object
 */
","* Returns a general-purpose, <b>temporary-use</b>, non-cryptographic hash function. The algorithm
   * the returned function implements is unspecified and subject to change without notice.
   *
   * <p><b>Warning:</b> a new random seed for these functions is chosen each time the {@code
   * Hashing} class is loaded. <b>Do not use this method</b> if hash codes may escape the current
   * process in any way, for example being sent over RPC, or saved to disk. For a general-purpose,
   * non-cryptographic hash function that will never change behavior, we suggest {@link
   * #murmur3_128}.
   *
   * <p>Repeated calls to this method on the same loaded {@code Hashing} class, using the same value
   * for {@code minimumBits}, will return identically-behaving {@link HashFunction} instances.
   *
   * @param minimumBits a positive integer. This can be arbitrarily large. The returned {@link
   *     HashFunction} instance may use memory proportional to this integer.
   * @return a hash function, described above, that produces hash codes of length {@code
   *     minimumBits} or greater",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,consistentHash,"com.google.common.hash.Hashing:consistentHash(com.google.common.hash.HashCode,int)",638,640,"/**
 * Calculates a consistent hash ring position.
 * @param hashCode HashCode object to hash
 * @param buckets Number of buckets in the hash ring
 * @return Ring position as an integer.
 */
","* Assigns to {@code hashCode} a ""bucket"" in the range {@code [0, buckets)}, in a uniform manner
   * that minimizes the need for remapping as {@code buckets} grows. That is, {@code
   * consistentHash(h, n)} equals:
   *
   * <ul>
   *   <li>{@code n - 1}, with approximate probability {@code 1/n}
   *   <li>{@code consistentHash(h, n - 1)}, otherwise (probability {@code 1 - 1/n})
   * </ul>
   *
   * <p>This method is suitable for the common use case of dividing work among buckets that meet the
   * following conditions:
   *
   * <ul>
   *   <li>You want to assign the same fraction of inputs to each bucket.
   *   <li>When you reduce the number of buckets, you can accept that the most recently added
   *       buckets will be removed first. More concretely, if you are dividing traffic among tasks,
   *       you can decrease the number of tasks from 15 and 10, killing off the final 5 tasks, and
   *       {@code consistentHash} will handle it. If, however, you are dividing traffic among
   *       servers {@code alpha}, {@code bravo}, and {@code charlie} and you occasionally need to
   *       take each of the servers offline, {@code consistentHash} will be a poor fit: It provides
   *       no way for you to specify which of the three buckets is disappearing. Thus, if your
   *       buckets change from {@code [alpha, bravo, charlie]} to {@code [bravo, charlie]}, it will
   *       assign all the old {@code alpha} traffic to {@code bravo} and all the old {@code bravo}
   *       traffic to {@code charlie}, rather than letting {@code bravo} keep its traffic.
   * </ul>
   *
   * <p>See the <a href=""http://en.wikipedia.org/wiki/Consistent_hashing"">Wikipedia article on
   * consistent hashing</a> for more information.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(java.security.Key),302,304,"/**
 * Creates an HmacMD5 HashFunction using the provided key.
 * @param key The secret key for the HMAC calculation.
 * @return An HmacMD5 HashFunction instance.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and the given secret key.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(java.security.Key),330,332,"/**
 * Creates an HMAC-SHA1 hash function using the provided key.
 * @param key The secret key for the HMAC-SHA1 calculation.
 * @return An HmacSHA1 hash function.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(java.security.Key),354,356,"/**
 * Creates an HMAC-SHA256 HashFunction using the provided key.
 * @param key The secret key for the HMAC calculation.
 * @return An HMAC-SHA256 HashFunction.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(java.security.Key),378,380,"/**
 * Creates an HMAC-SHA512 HashFunction using the provided key.
 * @param key The secret key for the HMAC calculation.
 * @return An HMAC-SHA512 HashFunction.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and the given secret key.
   *
   * @param key the secret key
   * @throws IllegalArgumentException if the given key is inappropriate for initializing this MAC
   * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,readResolve,com.google.common.hash.MessageDigestHashFunction$SerializedForm:readResolve(),113,115,"/**
 * Reconstitutes a serialized MessageDigestHashFunction instance.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,process,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:process(java.nio.ByteBuffer),102,108,"/**
 * Processes a ByteBuffer, mixes 64-bit keys, and updates length.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(java.nio.ByteBuffer),316,329,"/**
 * Adds bytes from a ByteBuffer to the hasher.
 * Restores original byte order of the buffer.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,process,com.google.common.hash.SipHashFunction$SipHasher:process(java.nio.ByteBuffer),131,135,"/**
 * Processes a buffer, increments 'b', and calls processM with a long.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$ByteArrayByteSource:<init>(byte[]),569,571,"/**
* Creates a ByteArrayByteSource from the given byte array.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,slice,"com.google.common.io.ByteSource$ByteArrayByteSource:slice(long,long)",629,638,"/**
 * Returns a slice of the byte array, starting at offset and length.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.lang.Iterable),374,376,"/**
 * Concatenates multiple ByteSource objects into a single ByteSource.
 */
","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:decodeTo(byte[],java.lang.CharSequence)",978,990,"/**
 * Decodes a CharSequence into a byte array.
 * @param target byte array to write decoded bytes to
 * @param chars CharSequence to decode
 * @return number of bytes written to target
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:decodeTo(byte[],java.lang.CharSequence)",1025,1047,"/**
 * Decodes a CharSequence into a byte array.
 * @param target byte array to write decoded bytes to
 * @param chars CharSequence to decode
 * @return number of bytes written
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:decodeTo(byte[],java.lang.CharSequence)",753,776,"/**
 * Decodes a CharSequence into a byte array using the alphabet.
 * @param target byte array to write decoded bytes to
 * @param chars CharSequence to decode
 * @return number of bytes written to target
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withSeparator,"com.google.common.io.BaseEncoding$StandardBaseEncoding:withSeparator(java.lang.String,int)",866,881,"/**
 * Creates a new encoding with a separator string and frequency.
 * @param separator Separator string, must not contain alphabet chars.
 * @param afterEveryChars Frequency of the separator.
 * @return New SeparatedBaseEncoding instance.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,com.google.common.io.BaseEncoding$Base16Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet),958,965,"/**
 * Initializes Base16 encoding with a given alphabet.
 * @param alphabet The alphabet to use for encoding.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1003,1006,"/**
 * Initializes a Base64Encoding with a given alphabet and padding.
 * @param alphabet The alphabet to use for encoding.
 * @param paddingChar Optional padding character.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$StandardBaseEncoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",917,919,"/**
 * Creates a new BaseEncoding instance with specified alphabet & padding.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$StringCharSource:<init>(java.lang.String),642,644,"/**
* Initializes a StringCharSource with the given string sequence.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.lang.Iterable),443,445,"/**
 * Concatenates multiple CharSource instances into a single source.
 */
","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,com.google.common.io.ByteStreams:newDataInput(byte[]),304,307,"/**
 * Creates a ByteArrayDataInput from a byte array.
 * @param bytes The byte array to create the input from.
 * @return A ByteArrayDataInput instance.
 */
","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array from the
   * beginning.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(),481,484,"/**
 * Creates a new ByteArrayDataOutput with a default ByteArrayOutputStream.
 */",Returns a new {@link ByteArrayDataOutput} instance with a default size.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataOutput,com.google.common.io.ByteStreams:newDataOutput(int),492,500,"/**
 * Creates a new ByteArrayDataOutput with the specified size.
 * @param size Initial size of the underlying ByteArrayOutputStream
 * @throws IllegalArgumentException if size is negative
 */
","* Returns a new {@link ByteArrayDataOutput} instance sized to hold {@code size} bytes before
   * resizing.
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,<init>,"com.google.common.io.ReaderInputStream:<init>(java.io.Reader,java.nio.charset.Charset,int)",86,94,"/**
 * Creates a ReaderInputStream with custom error handling.
 * @param reader The Reader to read from.
 * @param charset Character encoding to use.
 * @param bufferSize The buffer size.
 */
","* Creates a new input stream that will encode the characters from {@code reader} into bytes using
   * the given character set. Malformed input and unmappable characters will be replaced.
   *
   * @param reader input source
   * @param charset character set used for encoding chars to bytes
   * @param bufferSize size of internal input and output buffers
   * @throws IllegalArgumentException if bufferSize is non-positive",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,countBySkipping,com.google.common.io.ByteSource:countBySkipping(java.io.InputStream),232,239,"/**
 * Counts bytes skipped from an input stream.
 * @param in Input stream to skip from.
 * @return Total bytes skipped.
 */
",Counts the bytes in the given input stream using skip if possible.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,skipFully,"com.google.common.io.ByteStreams:skipFully(java.io.InputStream,long)",830,836,"/**
 * Skips specified byte count from an input stream.
 * @param in Input stream to skip from.
 * @param n Number of bytes to skip.
 * @throws IOException if end of stream is reached prematurely.
 */
","* Discards {@code n} bytes of data from the input stream. This method will block until the full
   * amount has been skipped. Does not close the stream.
   *
   * @param in the input stream to read from
   * @param n the number of bytes to skip
   * @throws EOFException if this stream reaches the end before skipping all the bytes
   * @throws IOException if an I/O error occurs, or the stream does not support skipping",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(java.nio.CharBuffer),77,90,"/**
 * Reads characters into the target buffer.
 * @param target The buffer to read characters into.
 * @return Number of characters read, or -1 if EOF.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,com.google.common.io.CharSequenceReader:read(),92,97,"/**
 * Reads the next character. Returns -1 if no more characters.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.lang.Iterable,java.lang.String)",119,122,"/**
 * Writes lines from an iterable, separated by the given line separator.
 * @param lines Iterable of lines to write.
 * @param lineSeparator Separator between lines.
 * @throws IOException If an I/O error occurs.
 */
","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,"com.google.common.io.CharSink:writeLines(java.util.stream.Stream,java.lang.String)",143,146,"/**
 * Writes lines from a stream, separated by the given line separator.
 * @param lines Stream of character sequences to write.
 * @param lineSeparator Separator between lines.
 * @throws IOException if an I/O error occurs.
 */
","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the given line separator.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,forEachLine,com.google.common.io.CharSource:forEachLine(java.util.function.Consumer),395,402,"/**
 * Applies the given action to each line of the stream.
 * @param action Consumer to apply to each line.
 * @throws IOException if an I/O error occurs.
 */
","* Reads all lines of text from this source, running the given {@code action} for each line as it
   * is read.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code action}
   *     throws an {@code UncheckedIOException}
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,com.google.common.io.CharStreams:readLines(java.lang.Readable),195,203,"/**
 * Reads lines from a Readable object and returns them as a list.
 * @param r Readable object to read from.
 * @return List of strings, each representing a line.
 */
","* Reads all of the lines from a {@link Readable} object. The lines do not include
   * line-termination characters, but do include other leading and trailing whitespace.
   *
   * <p>Does not close the {@code Readable}. If reading files or resources you should use the {@link
   * Files#readLines} and {@link Resources#readLines} methods.
   *
   * @param r the object to read from
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,readLines,"com.google.common.io.CharStreams:readLines(java.lang.Readable,com.google.common.io.LineProcessor)",214,229,"/**
 * Reads lines from a readable and processes them with a processor.
 * @param readable Source of lines to read.
 * @param processor Processes each line; returns false to stop.
 * @return Result from the processor.
 */
","* Streams lines from a {@link Readable} object, stopping when the processor returns {@code false}
   * or all lines have been read and returning the result produced by the processor. Does not close
   * {@code readable}. Note that this method may not fully consume the contents of {@code readable}
   * if the processor stops processing early.
   *
   * @throws IOException if an I/O error occurs
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(int),201,205,"/**
 * Writes a byte to the output stream, incrementing the count.
 * @param b The byte to be written.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,"com.google.common.io.FileBackedOutputStream:write(byte[],int,int)",212,216,"/**
* Writes data to the underlying output stream.
* @param b buffer containing the data to write
* @param off offset within the buffer
* @param len number of bytes to write
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,readMoreChars,com.google.common.io.ReaderInputStream:readMoreChars(),203,230,"/**
 * Reads more characters into the char buffer, expanding if needed.
 */",Handle the case of underflow caused by needing more input characters.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readShort,com.google.common.io.LittleEndianDataInputStream:readShort(),190,194,"/**
 * Reads a short value from the input stream.
 * Returns a short, casts an unsigned short.
 */
","* Reads a {@code short} as specified by {@link DataInputStream#readShort()}, except using
   * little-endian byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code short} in little-endian
   *     byte order.
   * @throws IOException if an I/O error occurs.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readChar,com.google.common.io.LittleEndianDataInputStream:readChar(),204,208,"/**
 * Reads a char value by reading an unsigned short.
 * @throws IOException if an I/O error occurs.
 */
","* Reads a char as specified by {@link DataInputStream#readChar()}, except using little-endian
   * byte order.
   *
   * @return the next two bytes of the input stream, interpreted as a {@code char} in little-endian
   *     byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFloat,com.google.common.io.LittleEndianDataInputStream:readFloat(),156,160,"/**
 * Reads a float value from the input stream.
 * Uses readInt() to convert integer bits to a float.
 */
","* Reads a {@code float} as specified by {@link DataInputStream#readFloat()}, except using
   * little-endian byte order.
   *
   * @return the next four bytes of the input stream, interpreted as a {@code float} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readDouble,com.google.common.io.LittleEndianDataInputStream:readDouble(),170,174,"/**
 * Reads the next double value from the input stream.
 * @throws IOException if an I/O error occurs
 */
","* Reads a {@code double} as specified by {@link DataInputStream#readDouble()}, except using
   * little-endian byte order.
   *
   * @return the next eight bytes of the input stream, interpreted as a {@code double} in
   *     little-endian byte order
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeChars,com.google.common.io.LittleEndianDataOutputStream:writeChars(java.lang.String),93,98,"/**
 * Writes a string character by character.
 * @param s The string to write.
 * @throws IOException if an I/O error occurs.
 */
","* Writes a {@code String} as specified by {@link DataOutputStream#writeChars(String)}, except
   * each character is written using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataOutputStream.java,writeDouble,com.google.common.io.LittleEndianDataOutputStream:writeDouble(double),106,109,"/**
 * Writes a double value to the output stream.
 * Converts the double to a long and writes it.
 */
","* Writes a {@code double} as specified by {@link DataOutputStream#writeDouble(double)}, except
   * using little-endian byte order.
   *
   * @throws IOException if an I/O error occurs",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteDirectoryContentsInsecure,com.google.common.io.MoreFiles:deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream),690,702,"/**
 * Deletes directory contents insecurely.
 * @param dir DirectoryStream to delete from.
 * @return Collection of IOExceptions during deletion.
 */
","* Simple, insecure method for deleting the contents of a directory for file systems that don't
   * support {@code SecureDirectoryStream}. Returns a collection of exceptions that occurred or null
   * if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,deleteRecursivelySecure,"com.google.common.io.MoreFiles:deleteRecursivelySecure(java.nio.file.SecureDirectoryStream,java.nio.file.Path)",618,640,"/**
 * Deletes a file or directory recursively, handling exceptions.
 * @param dir SecureDirectoryStream for secure file operations
 * @param path Path to delete
 * @return Collection of IOExceptions encountered, or null if none.
 */
","* Secure recursive delete using {@code SecureDirectoryStream}. Returns a collection of exceptions
   * that occurred or null if no exceptions were thrown.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,<init>,com.google.common.io.MultiInputStream:<init>(java.util.Iterator),45,48,"/**
 * Creates a MultiInputStream from an iterator of ByteSource objects.
 */","* Creates a new instance.
   *
   * @param it an iterator of I/O suppliers that will provide each substream",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,com.google.common.io.MultiInputStream:read(),82,92,"/**
 * Reads a single character from the input stream.
 * Returns the character as an int, or -1 if EOF.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,read,"com.google.common.io.MultiInputStream:read(byte[],int,int)",94,105,"/**
 * Reads up to {@code len} bytes from the input stream into the buffer.
 * @param b buffer to read into
 * @param off offset in the buffer
 * @param len number of bytes to read
 * @return number of bytes read or -1 if EOF
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,<init>,com.google.common.io.MultiReader:<init>(java.util.Iterator),39,42,"/**
* Initializes a MultiReader with an iterator of CharSource readers.
* @param readers Iterator of CharSource objects to read from.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,read,"com.google.common.io.MultiReader:read(char[],int,int)",52,64,"/**
 * Reads characters into the buffer.
 * @param cbuf Buffer to fill, off offset, len length to read.
 * @return Number of characters read, or -1 if EOF.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiReader.java,skip,com.google.common.io.MultiReader:skip(long),66,79,"/**
 * Skips 'n' bytes of data. Returns the actual bytes skipped.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,asCharSource,com.google.common.reflect.ClassPath$ResourceInfo:asCharSource(java.nio.charset.Charset),258,260,"/**
 * Returns a CharSource for reading characters from this URL.
 * @param charset Charset to use for decoding the URL.
 */
","* Returns a {@link CharSource} view of the resource from which its bytes can be read as
     * characters decoded with the given {@code charset}.
     *
     * @throws NoSuchElementException if the resource cannot be loaded through the class loader,
     *     despite physically existing in the class path.
     * @since 20.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,size,com.google.common.collect.Lists$Partition:size(),726,729,"/**
 * Returns the size of the list, rounded up to the nearest integer.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$SeparatedBaseEncoding:maxEncodedSize(int),1158,1163,"/**
 * Calculates max encoded size, adding separators based on size.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,maxEncodedSize,com.google.common.io.BaseEncoding$StandardBaseEncoding:maxEncodedSize(int),632,635,"/**
 * Calculates the maximum encoded size in bytes for a given input size.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilterStrategies.java,<init>,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray:<init>(long),166,173,"/**
 * Initializes a LockFreeBitArray with the specified number of bits.
 * @param bits Number of bits for the bit array.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,size,com.google.common.collect.Collections2$PermutationCollection:size(),600,603,"/**
 * Calculates the factorial of the input list's size.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,calculateSize,"com.google.common.collect.Collections2$OrderedPermutationCollection:calculateSize(java.util.List,java.util.Comparator)",454,473,"/**
 * Calculates the number of permutations of a sorted list.
 * @param sortedInputList Sorted list to calculate permutations.
 * @param comparator Comparator for comparing elements in the list.
 * @return The number of permutations, or Integer.MAX_VALUE if overflow.
 */
","* The number of permutations with repeated elements is calculated as follows:
     *
     * <ul>
     *   <li>For an empty list, it is 1 (base case).
     *   <li>When r numbers are added to a list of n-r elements, the number of permutations is
     *       increased by a factor of (n choose r).
     * </ul>",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.util.Iterator),508,522,"/**
 * Calculates the mean of a sequence of numbers.
 * @param values Iterator of Number objects
 * @return The mean of the numbers.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isPowerOfTwo,com.google.common.math.DoubleMath:isPowerOfTwo(double),201,208,"/**
 * Checks if a double is a power of two.
 * @param x The double value to check.
 * @return True if x is a power of two, false otherwise.
 */
","* Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer
   * {@code k}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,isMathematicalInteger,com.google.common.math.DoubleMath:isMathematicalInteger(double),289,294,"/**
 * Checks if a double is a mathematical integer.
 * @param x The double value to check.
 * @return True if x is a mathematical integer, false otherwise.
 */
","* Returns {@code true} if {@code x} represents a mathematical integer.
   *
   * <p>This is equivalent to, but not necessarily implemented as, the expression {@code
   * !Double.isNaN(x) && !Double.isInfinite(x) && x == Math.rint(x)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,roundToDouble,"com.google.common.math.LongMath:roundToDouble(long,java.math.RoundingMode)",1226,1327,"/**
 * Rounds a long value to a double using the specified rounding mode.
 * @param x long value to round
 * @param mode rounding mode
 */","* Returns {@code x}, rounded to a {@code double} with the specified rounding mode. If {@code x}
   * is precisely representable as a {@code double}, its {@code double} value will be returned;
   * otherwise, the rounding will choose between the two nearest representable values with {@code
   * mode}.
   *
   * <p>For the case of {@link RoundingMode#HALF_EVEN}, this implementation uses the IEEE 754
   * default rounding mode: if the two nearest representable values are equally near, the one with
   * the least significant bit zero is chosen. (In such cases, both of the nearest representable
   * values are even integers; this method returns the one that is a multiple of a greater power of
   * two.)
   *
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not precisely representable as a {@code double}
   * @since 30.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,fuzzyCompare,"com.google.common.math.DoubleMath:fuzzyCompare(double,double,double)",384,394,"/**
 * Compares two doubles, considering a tolerance for equality.
 * @param a first double
 * @param b second double
 * @param tolerance tolerance value
 * @return -1, 0, or 1 based on comparison.
 */
","* Compares {@code a} and {@code b} ""fuzzily,"" with a tolerance for nearly-equal values.
   *
   * <p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,
   * b)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as
   * equal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).
   *
   * <p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link
   * Comparable#compareTo} implementations. In particular, it is not transitive.
   *
   * @throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,maxRunBeforeFallback,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:maxRunBeforeFallback(int),932,934,"/**
 * Calculates the maximum run length before fallback.
 * @param tableSize The size of the table.
 * @return The maximum run length.
 */
","* If more than this many consecutive positions are filled in a table of the specified size,
     * report probable hash flooding. ({@link #hashFloodingDetected} may also report hash flooding
     * if fewer consecutive positions are filled; see that method for details.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,trim,com.google.common.collect.TopKSelector:trim(),165,207,"/**
 * Trims the buffer to the first k elements and sets the threshold.
 */","* Quickselects the top k elements from the 2k elements in the buffer. O(k) expected time, O(k log
   * k) worst case.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[],byte[],boolean)",449,479,"/**
 * Constructs an Alphabet object with specified parameters.
 * @param name Alphabet name
 * @param chars Character array
 * @param decodabet Decoding table
 * @param ignoreCase Whether to ignore case
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,ceilToPowerOfTwo,com.google.common.util.concurrent.Striped:ceilToPowerOfTwo(int),510,512,"/**
 * Rounds x up to the nearest power of 2.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,log10,"com.google.common.math.IntMath:log10(int,java.math.RoundingMode)",153,176,"/**
 * Calculates the base-10 logarithm of an integer with rounding.
 * @param x The integer to calculate the logarithm of.
 * @param mode The rounding mode to use.
 * @return The base-10 logarithm of x.
 */
","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,sqrt,"com.google.common.math.LongMath:sqrt(long,java.math.RoundingMode)",305,366,"/**
 * Calculates the square root of a long value with specified rounding.
 * @param x The value to calculate the square root of.
 * @param mode The rounding mode to use.
 * @return The square root of x.
 */","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,<init>,com.google.common.collect.CartesianList:<init>(com.google.common.collect.ImmutableList),52,65,"/**
 * Initializes a CartesianList with given axes.
 * @param axes Immutable list of lists, representing the axes.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,calculateNewCapacity,com.google.common.collect.MinMaxPriorityQueue:calculateNewCapacity(),968,973,"/**
 * Calculates the new capacity of the queue.
 * Returns a new capacity based on the old capacity.
 */
",Returns ~2x the old capacity if small; ~1.5x otherwise.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,<init>,"com.google.common.collect.TopKSelector:<init>(java.util.Comparator,int)",123,132,"/**
 * Initializes a TopKSelector with a comparator and capacity k.
 * @param comparator Comparator for ordering elements.
 * @param k The maximum number of elements to store.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,checkedPow,"com.google.common.math.IntMath:checkedPow(int,int)",495,532,"/**
 * Calculates b^k, checking for overflow.
 * @param b base
 * @param k exponent (non-negative)
 * @return b^k
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,horizontal,com.google.common.math.LinearTransformation:horizontal(double),121,125,"/**
 * Creates a horizontal linear transformation at the given y-value.
 * @param y The y-value for the horizontal line.
 * @return A RegularLinearTransformation object.
 */
","* Builds an instance representing a horizontal transformation with a constant value of {@code y}.
   * (The inverse of this will be a vertical transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:createInverse(),273,275,"/**
 * Creates an inverse linear transformation based on the current x value.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,withSlope,com.google.common.math.LinearTransformation$LinearTransformationBuilder:withSlope(double),97,105,"/**
 * Creates a LinearTransformation with the given slope.
 * @param slope the slope of the linear transformation
 * @return a LinearTransformation object
 */
","* Finish building an instance with the given slope, i.e. the rate of change of {@code y} with
     * respect to {@code x}. The slope must not be {@code NaN}. It may be infinite, in which case
     * the transformation is vertical. (If it is zero, the transformation is horizontal.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,vertical,com.google.common.math.LinearTransformation:vertical(double),112,115,"/**
 * Creates a vertical linear transformation with the given y-offset.
 * @param x The y-offset for the vertical transformation.
 */
","* Builds an instance representing a vertical transformation with a constant value of {@code x}.
   * (The inverse of this will be a horizontal transformation.)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,createInverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:createInverse(),217,223,"/**
 * Creates the inverse transformation based on slope and intercept.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,test,"com.google.common.math.LongMath$MillerRabinTester:test(long,long)",1159,1163,"/**
 * Tests if base is a witness for n using SMALL or LARGE witness.
 * @param base base to test
 * @param n the number to test for primality
 * @return true if base is a witness, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,factorial,com.google.common.math.BigIntegerMath:factorial(int),381,434,"/**
 * Calculates factorial of n.
 * @param n non-negative integer
 * @return BigInteger representing n!
 */","* Returns {@code n!}, that is, the product of the first {@code n} positive integers, or {@code 1}
   * if {@code n == 0}.
   *
   * <p><b>Warning:</b> the result takes <i>O(n log n)</i> space, so use cautiously.
   *
   * <p>This uses an efficient binary recursive algorithm to compute the factorial with balanced
   * multiplies. It also removes all the 2s from the intermediate products (shifting them back in at
   * the end).
   *
   * @throws IllegalArgumentException if {@code n < 0}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,log10,"com.google.common.math.LongMath:log10(long,java.math.RoundingMode)",155,179,"/**
 * Calculates the floor of the base-10 logarithm of a long.
 * @param x The long value to calculate the logarithm of.
 * @param mode Rounding mode to use.
 * @return The floor of the base-10 logarithm of x.
 */
","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,multiplyFraction,"com.google.common.math.LongMath:multiplyFraction(long,long,long)",852,862,"/**
 * Multiplies a fraction (numerator/denominator) by a value x.
 * @param x The value to multiply the fraction by.
 * @return The result of the multiplication.
 */
","Returns (x * numerator / denominator), which is assumed to come out to an integral value.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,checkedPow,"com.google.common.math.LongMath:checkedPow(long,int)",578,620,"/**
 * Calculates b^k, checking for overflow.
 * @param b base (long)
 * @param k exponent (int)
 * @return b raised to the power of k
 */
","* Returns the {@code b} to the {@code k}th power, provided it does not overflow.
   *
   * @throws ArithmeticException if {@code b} to the {@code k}th power overflows in signed {@code
   *     long} arithmetic",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,populationCovariance,com.google.common.math.PairedStats:populationCovariance(),95,98,"/**
 * Calculates the population covariance.
 * @return The population covariance, based on deltas and count.
 */
","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,sampleCovariance,com.google.common.math.PairedStats:sampleCovariance(),113,116,"/**
 * Calculates the sample covariance.
 * Requires at least two data points.
 * Returns the covariance value.
 */
","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStats:pearsonsCorrelationCoefficient(),134,148,"/**
 * Calculates Pearson's correlation coefficient between x and y.
 * Returns NaN if count <= 1 or sumOfProductsOfDeltas is NaN.
 */
","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.util.Iterator),488,503,"/**
 * Calculates the mean of a sequence of numbers.
 * @param values Iterator of Number objects, must have at least one element.
 * @return The calculated mean as a double.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,add,com.google.common.math.StatsAccumulator:add(double),53,76,"/**
 * Adds a value to the dataset, updating mean, min, max, sum of squares.
 */",Adds the given value to the dataset.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,merge,"com.google.common.math.StatsAccumulator:merge(long,double,double,double,double)",191,217,"/**
 * Merges data from another sample into the current sample.
 * @param otherCount Count of the other sample.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,populationCovariance,com.google.common.math.PairedStatsAccumulator:populationCovariance(),128,131,"/**
 * Calculates the population covariance.
 * @return The population covariance value.
 */
","* Returns the population covariance of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains a single pair of finite values. It
   * is not guaranteed to return zero when the dataset consists of the same pair of values multiple
   * times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,sampleCovariance,com.google.common.math.PairedStatsAccumulator:sampleCovariance(),146,149,"/**
 * Calculates the sample covariance.
 * Requires count() > 1. Returns the calculated covariance.
 */
","* Returns the sample covariance of the values. The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same pair of values
   * multiple times, due to numerical errors.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,pearsonsCorrelationCoefficient,com.google.common.math.PairedStatsAccumulator:pearsonsCorrelationCoefficient(),167,181,"/**
 * Calculates Pearson's correlation coefficient.
 * Returns NaN if count <= 1 or sumOfProductsOfDeltas is NaN.
 */","* Returns the <a href=""http://mathworld.wolfram.com/CorrelationCoefficient.html"">Pearson's or
   * product-moment correlation coefficient</a> of the values. The count must greater than one, and
   * the {@code x} and {@code y} values must both have non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 && yStats().populationVariance() > 0.0}). The result is not
   * guaranteed to be exactly +/-1 even when the data are perfectly (anti-)correlated, due to
   * numerical errors. However, it is guaranteed to be in the inclusive range [-1, +1].
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     either the {@code x} and {@code y} dataset has zero population variance",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,partition,"com.google.common.math.Quantiles:partition(double[],int,int)",575,595,"/**
 * Partitions the array around a pivot element.
 * @param array The array to partition.
 * @param from Starting index of the slice.
 * @param to Ending index of the slice.
 * @return The partition point index.
 */
","* Performs a partition operation on the slice of {@code array} with elements in the range [{@code
   * from}, {@code to}]. Uses the median of {@code from}, {@code to}, and the midpoint between them
   * as a pivot. Returns the index which the slice is partitioned around, i.e. if it returns {@code
   * ret} then we know that the values with indexes in [{@code from}, {@code ret}) are less than or
   * equal to the value at {@code ret} and the values with indexes in ({@code ret}, {@code to}] are
   * greater than or equal to that.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,fromByteArray,com.google.common.math.PairedStats:fromByteArray(byte[]),304,316,"/**
 * Creates a PairedStats object from a byte array.
 * @param byteArray Byte array containing PairedStats data.
 * @return A PairedStats object.
 */
","* Creates a {@link PairedStats} instance from the given byte representation which was obtained by
   * {@link #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,fromByteArray,com.google.common.math.Stats:fromByteArray(byte[]),627,635,"/**
 * Creates a Stats object from a byte array.
 * @param byteArray byte array containing Stats data
 * @return Stats object created from the byte array
 */
","* Creates a Stats instance from the given byte representation which was obtained by {@link
   * #toByteArray}.
   *
   * <p><b>Note:</b> No guarantees are made regarding stability of the representation between
   * versions.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,snapshot,com.google.common.math.PairedStatsAccumulator:snapshot(),95,97,"/**
 * Creates a snapshot of the paired statistics.
 * Returns a new PairedStats object with the current state.
 */
",Returns an immutable snapshot of the current statistics.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,xStats,com.google.common.math.PairedStatsAccumulator:xStats(),105,107,"/**
 * Returns a snapshot of the xStats object.
 */",Returns an immutable snapshot of the statistics on the {@code x} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,yStats,com.google.common.math.PairedStatsAccumulator:yStats(),110,112,"/**
 * Returns a snapshot of the y-axis statistics.
 * @return A Stats object representing y-axis data.
 */
",Returns an immutable snapshot of the statistics on the {@code y} values alone.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toStats,com.google.common.math.Stats:toStats(),216,226,"/**
 * Creates a collector to accumulate number statistics into a Stats object.
 */
","* Returns a {@link Collector} which accumulates statistics from a {@link java.util.stream.Stream}
   * of any type of boxed {@link Number} into a {@link Stats}. Use by calling {@code
   * boxedNumericStream.collect(toStats())}. The numbers will be converted to {@code double} values
   * (which may cause loss of precision).
   *
   * <p>If you have any of the primitive streams {@code DoubleStream}, {@code IntStream}, or {@code
   * LongStream}, you should use the factory method {@link #of} instead.
   *
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,convertDottedQuadToHex,com.google.common.net.InetAddresses:convertDottedQuadToHex(java.lang.String),336,347,"/**
 * Converts a dotted quad IPv4 address to a hex representation.
 * @param ipString The IP address string to convert.
 * @return Hexadecimal IP string or null if invalid.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,toUriString,com.google.common.net.InetAddresses:toUriString(java.net.InetAddress),580,585,"/**
 * Converts an InetAddress to a URI string representation.
 * Handles IPv6 addresses by enclosing them in brackets.
 */
","* Returns the string representation of an {@link InetAddress} suitable for inclusion in a URI.
   *
   * <p>For IPv4 addresses, this is identical to {@link InetAddress#getHostAddress()}, but for IPv6
   * addresses it compresses zeroes and surrounds the text with square brackets; for example {@code
   * ""[2001:db8::1]""}.
   *
   * <p>Per section 3.2.2 of <a target=""_parent""
   * href=""http://tools.ietf.org/html/rfc3986#section-3.2.2"">RFC 3986</a>, a URI containing an IPv6
   * string literal is of the form {@code ""http://[2001:db8::1]:8888/index.html""}.
   *
   * <p>Use of either {@link InetAddresses#toAddrString}, {@link InetAddress#getHostAddress()}, or
   * this method is recommended over {@link InetAddress#toString()} when an IP address string
   * literal is desired. This is because {@link InetAddress#toString()} prints the hostname and the
   * IP address string joined by a ""/"".
   *
   * @param ip {@link InetAddress} to be converted to URI string literal
   * @return {@code String} containing URI-safe string literal",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCompatIPv4Address,com.google.common.net.InetAddresses:getCompatIPv4Address(java.net.Inet6Address),702,707,"/**
 * Gets the IPv4 address from a compatible IPv6 address.
 * @param ip IPv6 address that is IPv4-compatible
 * @return Inet4Address representing the IPv4 portion
 */
","* Returns the IPv4 address embedded in an IPv4 compatible address.
   *
   * @param ip {@link Inet6Address} to be examined for an embedded IPv4 address
   * @return {@link Inet4Address} of the embedded IPv4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv4 compatible address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,get6to4IPv4Address,com.google.common.net.InetAddresses:get6to4IPv4Address(java.net.Inet6Address),733,737,"/**
 * Extracts IPv4 address from a 6to4 IPv6 address.
 * @param ip The 6to4 IPv6 address.
 * @return The extracted Inet4Address.
 */
","* Returns the IPv4 address embedded in a 6to4 address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in 6to4 address
   * @return {@link Inet4Address} of embedded IPv4 in 6to4 address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 6to4 address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getIsatapIPv4Address,com.google.common.net.InetAddresses:getIsatapIPv4Address(java.net.Inet6Address),884,888,"/**
 * Extracts the IPv4 address from an ISATAP IPv6 address.
 * @param ip The ISATAP IPv6 address.
 * @return The embedded IPv4 address.
 */
","* Returns the IPv4 address embedded in an ISATAP address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 in ISATAP address
   * @return {@link Inet4Address} of embedded IPv4 in an ISATAP address
   * @throws IllegalArgumentException if the argument is not a valid IPv6 ISATAP address",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(com.google.common.base.CharMatcher),1167,1173,"/**
 * Consumes and returns the next character if it matches the matcher.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeCharacter,com.google.common.net.MediaType$Tokenizer:consumeCharacter(char),1175,1181,"/**
 * Consumes and returns the expected character.
 * Asserts that more characters are available and matches the preview.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,hashCode,com.google.common.primitives.ImmutableDoubleArray$AsList:hashCode(),555,558,"/**
 * Returns the hash code, inherited from the parent class.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndex:compute(java.util.Collection),242,244,"/**
 * Computes a value from the input dataset of numbers.
 * @param dataset Collection of numbers to process.
 */
","* Computes the quantile value of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return the quantile value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,compute,com.google.common.math.Quantiles$ScaleAndIndexes:compute(java.util.Collection),347,349,"/**
 * Computes a map from integer to double based on the dataset.
 */","* Computes the quantile values of the given dataset.
     *
     * @param dataset the dataset to do the calculation on, which must be non-empty, which will be
     *     cast to doubles (with any associated lost of precision), and which will not be mutated by
     *     this call (it is copied instead)
     * @return an unmodifiable, ordered map of results: the keys will be the specified quantile
     *     indexes, and the values the corresponding quantile values. When iterating, entries in the
     *     map are ordered by quantile index in the same order they were passed to the {@code
     *     indexes} method.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,add,com.google.common.primitives.ImmutableDoubleArray$Builder:add(double),225,231,"/**
 * Adds a double value to the array.
 * @param value The double to add.
 * @return This builder instance.
 */
","* Appends {@code value} to the end of the values the built {@link ImmutableDoubleArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(double[]),237,243,"/**
 * Adds all elements from a double array to the builder.
 * @param values double array to add
 * @return this builder
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.Collection),264,271,"/**
 * Adds all elements from a collection to the array.
 * @param values Collection of doubles to add.
 * @return This builder instance.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(com.google.common.primitives.ImmutableDoubleArray),294,300,"/**
 * Adds all elements from an ImmutableDoubleArray to the builder.
 * @param values double array to add
 * @return this builder
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,com.google.common.primitives.ImmutableDoubleArray:of(double),97,99,"/**
 * Creates an ImmutableDoubleArray from a single double value.
 */",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double)",102,104,"/**
 * Creates an ImmutableDoubleArray from two double values.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double)",107,109,"/**
 * Creates an ImmutableDoubleArray from the given double values.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double)",112,114,"/**
 * Creates an ImmutableDoubleArray from the given four doubles.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double)",117,119,"/**
 * Creates an ImmutableDoubleArray from the given five doubles.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,of,"com.google.common.primitives.ImmutableDoubleArray:of(double,double,double,double,double,double)",122,125,"/**
 * Creates an ImmutableDoubleArray from the given six double values.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(double[]),146,150,"/**
 * Creates an immutable copy of the given double array.
 * @param values The double array to copy.
 * @return A new ImmutableDoubleArray containing the values.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.Collection),153,155,"/**
 * Creates an ImmutableDoubleArray from a Collection of Doubles.
 * Returns EMPTY if the collection is empty.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.util.stream.DoubleStream),176,180,"/**
 * Copies a DoubleStream to an ImmutableDoubleArray.
 * @param stream The DoubleStream to copy.
 * @return A new ImmutableDoubleArray containing the stream's elements.
 */
","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,trimmed,com.google.common.primitives.ImmutableDoubleArray:trimmed(),631,633,"/**
 * Returns a trimmed view, or the original array if not partial.
 */","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,indexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:indexOf(java.lang.Object),509,512,"/**
 * Returns the index of the target object in the parent, or -1.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray:contains(double),417,419,"/**
 * Checks if the set contains the target value.
 * @param target The value to search for.
 * @return True if found, false otherwise.
 */
","* Returns {@code true} if {@code target} is present at any index in this array. Values are
   * compared as if by {@link Double#equals}. Equivalent to {@code asList().contains(target)}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,lastIndexOf,com.google.common.primitives.ImmutableDoubleArray$AsList:lastIndexOf(java.lang.Object),514,517,"/**
 * Returns the last index of target in this list, or -1 if not found.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,toString,com.google.common.primitives.ImmutableDoubleArray$AsList:toString(),560,563,"/**
 * Returns a string representation, delegating to the parent's toString().
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,contains,com.google.common.primitives.ImmutableIntArray$AsList:contains(java.lang.Object),499,502,"/**
 * Checks if the collection contains the target object.
 * @param target The object to search for.
 * @return True if found, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,add,com.google.common.primitives.ImmutableIntArray$Builder:add(int),222,228,"/**
 * Adds an element to the end of the array.
 * @param value The element to add.
 * @return This builder instance for chaining.
 */
","* Appends {@code value} to the end of the values the built {@link ImmutableIntArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(int[]),234,240,"/**
 * Adds all elements from an array to the builder's array.
 * @param values array of integers to add
 * @return this builder instance
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.Collection),261,268,"/**
 * Adds all elements from a collection to the array.
 * @param values Collection of integers to add.
 * @return This builder object.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(com.google.common.primitives.ImmutableIntArray),291,297,"/**
* Adds all elements from an ImmutableIntArray to the builder.
* @param values ImmutableIntArray to add. Returns the builder.
*/
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,com.google.common.primitives.ImmutableIntArray:of(int),97,99,"/**
 * Creates an ImmutableIntArray from a single integer element.
 */",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int)",102,104,"/**
 * Creates an ImmutableIntArray from two integers.
 * @param e0 the first integer
 * @param e1 the second integer
 * @return ImmutableIntArray containing e0 and e1
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int)",107,109,"/**
 * Creates an ImmutableIntArray from the given three integers.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int)",112,114,"/**
 * Creates an ImmutableIntArray from the given four integers.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int)",117,119,"/**
 * Creates an ImmutableIntArray from the given five integer elements.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,of,"com.google.common.primitives.ImmutableIntArray:of(int,int,int,int,int,int)",122,124,"/**
 * Creates an ImmutableIntArray from the given six integer elements.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(int[]),145,147,"/**
 * Creates an immutable copy of the given int array.
 * @param values The array to copy.
 * @return A new ImmutableIntArray containing the elements.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.stream.IntStream),173,177,"/**
 * Copies an IntStream to an ImmutableIntArray.
 * Returns EMPTY if the stream is empty.
 */
","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,trimmed,com.google.common.primitives.ImmutableIntArray:trimmed(),621,623,"/**
 * Returns a trimmed view or the original array if not partial.
 */","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,hashCode,com.google.common.primitives.ImmutableIntArray$AsList:hashCode(),550,553,"/**
 * Returns the hash code, inherited from the parent class.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,toString,com.google.common.primitives.ImmutableIntArray$AsList:toString(),555,558,"/**
 * Returns the string representation of the parent object.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,contains,com.google.common.primitives.ImmutableLongArray$AsList:contains(java.lang.Object),501,504,"/**
 * Checks if the collection contains the target object.
 * @param target The object to search for.
 * @return True if found, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,add,com.google.common.primitives.ImmutableLongArray$Builder:add(long),224,230,"/**
 * Adds a value to the array.
 * @param value The value to add.
 * @return This builder instance.
 */
","* Appends {@code value} to the end of the values the built {@link ImmutableLongArray} will
     * contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(long[]),236,242,"/**
 * Adds all elements from the given array to the builder.
 * @param values array of longs to add
 * @return this builder
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.Collection),263,270,"/**
 * Adds all values from the collection to the builder's array.
 * @param values Collection of Long values to add.
 * @return This builder object for chaining.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(com.google.common.primitives.ImmutableLongArray),293,299,"/**
 * Adds all elements from the ImmutableLongArray to the builder.
 * @param values ImmutableLongArray to add.
 * @return This builder instance.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,com.google.common.primitives.ImmutableLongArray:of(long),97,99,"/**
 * Creates an ImmutableLongArray from a single long element.
 */",Returns an immutable array containing a single value.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long)",102,104,"/**
 * Creates an ImmutableLongArray from two long elements.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long)",107,109,"/**
 * Creates an ImmutableLongArray from the given long values.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long)",112,114,"/**
 * Creates an ImmutableLongArray from the given four long elements.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long)",117,119,"/**
 * Creates an ImmutableLongArray from the given five long elements.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,of,"com.google.common.primitives.ImmutableLongArray:of(long,long,long,long,long,long)",122,124,"/**
 * Creates an ImmutableLongArray from the given six long elements.
 */","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(long[]),145,149,"/**
 * Creates an immutable copy of the given long array.
 * @param values The long array to copy.
 * @return An ImmutableLongArray containing the copied values.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.stream.LongStream),175,179,"/**
 * Converts a LongStream to an ImmutableLongArray.
 * Returns EMPTY if the stream is empty.
 */
","* Returns an immutable array containing all the values from {@code stream}, in order.
   *
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,trimmed,com.google.common.primitives.ImmutableLongArray:trimmed(),623,625,"/**
 * Returns a trimmed view if partial, otherwise returns this.
 */","* Returns an immutable array containing the same values as {@code this} array. This is logically
   * a no-op, and in some circumstances {@code this} itself is returned. However, if this instance
   * is a {@link #subArray} view of a larger array, this method will copy only the appropriate range
   * of values, resulting in an equivalent array with a smaller memory footprint.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,hashCode,com.google.common.primitives.ImmutableLongArray$AsList:hashCode(),552,555,"/**
 * Returns the hash code, inherited from the parent class.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,toString,com.google.common.primitives.ImmutableLongArray$AsList:toString(),557,560,"/**
 * Returns the string representation of the parent object.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,indexes,com.google.common.math.Quantiles$Scale:indexes(java.util.Collection),212,214,"/**
 * Creates a ScaleAndIndexes object with the given indexes.
 * @param indexes Collection of integer indexes.
 * @return A ScaleAndIndexes object.
 */
","* Specifies multiple quantile indexes to be calculated, each index being the k in the kth
     * q-quantile.
     *
     * @param indexes the quantile indexes, each of which must be in the inclusive range [0, q] for
     *     q-quantiles; the order of the indexes is unimportant, duplicates will be ignored, and the
     *     set will be snapshotted when this method is called
     * @throws IllegalArgumentException if {@code indexes} is empty",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.util.Collection),150,152,"/**
 * Creates an ImmutableIntArray from a Collection of Integers.
 * Returns EMPTY if the collection is empty.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.util.Collection),152,154,"/**
 * Creates an ImmutableLongArray from a Collection of Longs.
 * Returns EMPTY if the collection is empty.
 */
","Returns an immutable array containing the given values, in order.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,"com.google.common.primitives.Ints:tryParse(java.lang.String,int)",840,847,"/**
 * Parses a string as an Integer in the given radix.
 * @param string String to parse.
 * @param radix The radix to use.
 * @return Integer value or null if parsing fails.
 */
","* Parses the specified string as a signed integer value using the specified radix. The ASCII
   * character {@code '-'} (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String, int)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @param radix the radix to use when parsing
   * @return the integer value represented by {@code string} using {@code radix}, or {@code null} if
   *     {@code string} has a length of zero or cannot be parsed as an integer value
   * @throws IllegalArgumentException if {@code radix < Character.MIN_RADIX} or {@code radix >
   *     Character.MAX_RADIX}
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 19.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,tryParse,com.google.common.primitives.Longs:tryParse(java.lang.String),376,378,"/**
 * Parses a string to a Long.
 * @param string The string to parse.
 * @return Long representation or null if parsing fails.
 */
","* Parses the specified string as a signed decimal long value. The ASCII character {@code '-'} (
   * <code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Long#parseLong(String)}, this method returns {@code null} instead of throwing
   * an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
   * {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of a long value
   * @return the long value represented by {@code string}, or {@code null} if {@code string} has a
   *     length of zero or cannot be parsed as a long value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,decode,com.google.common.primitives.UnsignedInts:decode(java.lang.String),319,331,"/**
 * Decodes a string value into an unsigned integer.
 * @param stringValue The string to decode.
 * @return The decoded integer value.
 */
","* Returns the unsigned {@code int} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code int} value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(long),75,81,"/**
 * Creates an UnsignedInteger from a long value.
 * @param value long value to convert; must fit within unsigned range.
 */
","* Returns an {@code UnsignedInteger} that is equal to {@code value}, if possible. The inverse
   * operation of {@link #longValue()}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.math.BigInteger),89,96,"/**
 * Creates an UnsignedInteger from a BigInteger.
 * @param value BigInteger to convert; must be non-negative and fit in int.
 */
","* Returns a {@code UnsignedInteger} representing the same value as the specified {@link
   * BigInteger}. This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^32}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,"com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String,int)",116,118,"/**
 * Parses a string as an unsigned integer with the given radix.
 * @param string The string to parse.
 * @param radix The radix to use for parsing.
 */
","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,plus,com.google.common.primitives.UnsignedInteger:plus(com.google.common.primitives.UnsignedInteger),126,128,"/**
 * Adds an UnsignedInteger to this UnsignedInteger.
 * @param val The UnsignedInteger to add.
 * @return The sum of the two UnsignedIntegers.
 */
","* Returns the result of adding this and {@code val}. If the result would have more than 32 bits,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,minus,com.google.common.primitives.UnsignedInteger:minus(com.google.common.primitives.UnsignedInteger),136,138,"/**
 * Subtracts an UnsignedInteger from this one.
 * @param val the UnsignedInteger to subtract
 * @return the result of the subtraction
 */
","* Returns the result of subtracting this and {@code val}. If the result would be negative,
   * returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,times,com.google.common.primitives.UnsignedInteger:times(com.google.common.primitives.UnsignedInteger),146,151,"/**
 * Multiplies this UnsignedInteger by another.
 * @param val The UnsignedInteger to multiply by.
 * @return The product of the two UnsignedIntegers.
 */
","* Returns the result of multiplying this and {@code val}. If the result would have more than 32
   * bits, returns the low 32 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,dividedBy,com.google.common.primitives.UnsignedInteger:dividedBy(com.google.common.primitives.UnsignedInteger),159,161,"/**
* Divides this UnsignedInteger by another.
* @param val The divisor UnsignedInteger.
* @return The quotient as a new UnsignedInteger.
*/
","* Returns the result of dividing this by {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,mod,com.google.common.primitives.UnsignedInteger:mod(com.google.common.primitives.UnsignedInteger),169,171,"/**
 * Calculates the modulo of this UnsignedInteger by another.
 * @param val the divisor
 * @return the remainder of the division
 */
","* Returns this mod {@code val}.
   *
   * @throws ArithmeticException if {@code val} is zero
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,toString,com.google.common.primitives.UnsignedInteger:toString(),240,243,"/**
 * Returns a string representation of the object, using default level.
 */","Returns a string representation of the {@code UnsignedInteger} value, in base 10.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,compareTo,com.google.common.primitives.UnsignedInteger:compareTo(com.google.common.primitives.UnsignedInteger),219,223,"/**
 * Compares this unsigned integer with another.
 * @param other The other UnsignedInteger to compare to.
 * @return -1, 0, or 1 based on comparison.
 */
","* Compares this unsigned integer to another unsigned integer. Returns {@code 0} if they are
   * equal, a negative number if {@code this < other}, and a positive number if {@code this >
   * other}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,compare,"com.google.common.primitives.UnsignedInts$LexicographicalComparator:compare(int[],int[])",200,211,"/**
 * Compares two int arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(long),78,82,"/**
 * Creates an UnsignedLong from a long value.
 * @param value long value to convert; must be non-negative.
 * @return UnsignedLong representation of the value.
 */
","* Returns an {@code UnsignedLong} representing the same value as the specified {@code long}.
   *
   * @throws IllegalArgumentException if {@code value} is negative
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.math.BigInteger),90,98,"/**
 * Creates an UnsignedLong from a BigInteger.
 * @param value BigInteger to convert; must be non-negative.
 * @return UnsignedLong representation of the value.
 */
","* Returns a {@code UnsignedLong} representing the same value as the specified {@code BigInteger}.
   * This is the inverse operation of {@link #bigIntegerValue()}.
   *
   * @throws IllegalArgumentException if {@code value} is negative or {@code value >= 2^64}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,plus,com.google.common.primitives.UnsignedLong:plus(com.google.common.primitives.UnsignedLong),131,133,"/**
 * Adds an UnsignedLong value to this UnsignedLong.
 * @param val the UnsignedLong to add
 * @return the sum of this UnsignedLong and val
 */
","* Returns the result of adding this and {@code val}. If the result would have more than 64 bits,
   * returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,minus,com.google.common.primitives.UnsignedLong:minus(com.google.common.primitives.UnsignedLong),141,143,"/**
 * Subtracts an UnsignedLong value.
 * @param val The UnsignedLong to subtract.
 * @return The result of the subtraction.
 */
","* Returns the result of subtracting this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,times,com.google.common.primitives.UnsignedLong:times(com.google.common.primitives.UnsignedLong),151,153,"/**
 * Multiplies this UnsignedLong by another, returning the result.
 * @param val the UnsignedLong to multiply by
 * @return the product of the two UnsignedLong values
 */
","* Returns the result of multiplying this and {@code val}. If the result would have more than 64
   * bits, returns the low 64 bits of the result.
   *
   * @since 14.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,compare,"com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator:compare(byte[],byte[])",374,413,"/**
 * Compares two byte arrays lexicographically, using unsafe operations.
 * @param left the first byte array
 * @param right the second byte array
 * @return comparison result, negative if left < right
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,compareTo,com.google.common.primitives.UnsignedLong:compareTo(com.google.common.primitives.UnsignedLong),231,235,"/**
 * Compares this UnsignedLong with another.
 * @param o the UnsignedLong to compare to
 * @return -1, 0, or 1 if this is less than, equal to, or greater than o.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,compare,"com.google.common.primitives.UnsignedLongs$LexicographicalComparator:compare(long[],long[])",166,175,"/**
 * Compares two long arrays lexicographically.
 * Returns -1, 0, or 1 based on array order.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,divide,"com.google.common.primitives.UnsignedLongs:divide(long,long)",250,273,"/**
 * Divides two longs, handling potential overflow and negative divisors.
 */","* Returns dividend / divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#divideUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,remainder,"com.google.common.primitives.UnsignedLongs:remainder(long,long)",286,309,"/**
 * Calculates the remainder of dividend divided by divisor.
 * Handles negative divisors and optimizes for positive dividends.
 */","* Returns dividend % divisor, where the dividend and divisor are treated as unsigned 64-bit
   * quantities.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#remainderUnsigned(long, long)} instead.
   *
   * @param dividend the dividend (numerator)
   * @param divisor the divisor (denominator)
   * @throws ArithmeticException if divisor is 0
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,"com.google.common.primitives.UnsignedLong:valueOf(java.lang.String,int)",120,123,"/**
 * Parses a string as a base-radix unsigned long.
 * @param string String to parse.
 * @param radix Base of the number system.
 * @return UnsignedLong value.
 */
","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value in the specified radix.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value, or {@code radix} is not between {@link Character#MIN_RADIX} and {@link
   *     Character#MAX_RADIX}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,parseUnsignedLong,com.google.common.primitives.UnsignedLongs:parseUnsignedLong(java.lang.String),321,324,"/**
 * Parses a string representation of an unsigned long.
 * @param string The string to parse.
 * @return The unsigned long value represented by the string.
 */","* Returns the unsigned {@code long} value represented by the given decimal string.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#parseUnsignedLong(String)} instead.
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @throws NullPointerException if {@code string} is null (in contrast to {@link
   *     Long#parseLong(String)})",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,decode,com.google.common.primitives.UnsignedLongs:decode(java.lang.String),381,393,"/**
 * Decodes a long value from a string.
 * @param stringValue The string to decode.
 * @return The decoded long value.
 */
","* Returns the unsigned {@code long} value represented by the given string.
   *
   * <p>Accepts a decimal, hexadecimal, or octal number given by specifying the following prefix:
   *
   * <ul>
   *   <li>{@code 0x}<i>HexDigits</i>
   *   <li>{@code 0X}<i>HexDigits</i>
   *   <li>{@code #}<i>HexDigits</i>
   *   <li>{@code 0}<i>OctalDigits</i>
   * </ul>
   *
   * @throws NumberFormatException if the string does not contain a valid unsigned {@code long}
   *     value
   * @since 13.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,isPackagePrivate,com.google.common.reflect.Invokable:isPackagePrivate(),160,162,"/**
 * Checks if the member is package-private.
 * Returns true if not private, public, or protected.
 */
",Returns true if the element is package-private.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getKey,com.google.common.collect.ForwardingMapEntry:getKey(),60,64,"/**
 * Returns the key associated with this map entry.
 * @return The key of the map entry.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,getValue,com.google.common.collect.ForwardingMapEntry:getValue(),66,70,"/**
* Returns the value from the delegate.
* @return The value held by the delegate.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.ForwardingMapEntry:setValue(java.lang.Object),72,77,"/**
 * Sets the value. Delegates to the underlying delegate.
 * @param value The value to set.
 * @return The value that was set.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,equals,com.google.common.collect.ForwardingMapEntry:equals(java.lang.Object),79,82,"/**
 * Checks for equality using the delegate's equals method.
 * @param object The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,hashCode,com.google.common.collect.ForwardingMapEntry:hashCode(),84,87,"/**
 * Returns the hash code, delegating to the underlying delegate object.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.ImmutableTypeToInstanceMap:getInstance(java.lang.Class),107,110,"/**
 * Retrieves an instance of the specified type.
 * @param type The class of the instance to retrieve.
 * @return An instance of the type, or null if not found.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getOwnerType,com.google.common.reflect.Invokable:getOwnerType(),330,333,"/**
 * Returns a TypeToken representing the declaring class type.
 * @return TypeToken for the declaring class.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,getInstance,com.google.common.reflect.MutableTypeToInstanceMap:getInstance(java.lang.Class),45,48,"/**
 * Retrieves an instance of the specified type.
 * @param type The class of the instance to retrieve.
 * @param <T> The type of the instance.
 * @return An instance of the specified type.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,putInstance,"com.google.common.reflect.MutableTypeToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",55,60,"/**
 * Puts an instance of the given type, returning it or null.
 * @param type The class of the instance to put.
 * @param value The instance to put.
 * @return The put instance or null.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,wrap,com.google.common.reflect.TypeToken:wrap(),545,552,"/**
 * Wraps the type if it's a primitive; otherwise, returns itself.
 */
","* Returns the corresponding wrapper type if this is a primitive type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,unwrap,com.google.common.reflect.TypeToken:unwrap(),564,571,"/**
 * Unwraps the type if it's a wrapper, otherwise returns itself.
 * Returns TypeToken of the unwrapped type or this if not a wrapper.
 */
","* Returns the corresponding primitive type if this is a wrapper type; otherwise returns {@code
   * this} itself. Idempotent.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getReturnType,com.google.common.reflect.Invokable:getReturnType(),261,264,"/**
 * Returns the return type as a TypeToken.
 * @return TypeToken representing the return type.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken$Bounds:isSubtypeOf(java.lang.reflect.Type),1073,1080,"/**
 * Checks if this type is a subtype of the given supertype.
 * @param supertype The type to check against.
 * @return True if this type is a subtype, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken$Bounds:isSupertypeOf(java.lang.reflect.Type),1082,1090,"/**
 * Checks if a type is a supertype based on predefined bounds.
 * @param subtype The type to check.
 * @return True if subtype is a supertype, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getComponentType,com.google.common.reflect.TypeToken:getComponentType(),577,583,"/**
 * Returns the component type of this type, or null if none.
 */","* Returns the array component type if this type represents an array ({@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.), or else {@code null} is returned.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfArrayType,com.google.common.reflect.TypeToken:isSubtypeOfArrayType(java.lang.reflect.GenericArrayType),919,933,"/**
 * Checks if an array type is a subtype of another array type.
 * @param supertype the supertype array to check against
 * @return true if it's a subtype, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOfArray,com.google.common.reflect.TypeToken:isSupertypeOfArray(java.lang.reflect.GenericArrayType),935,948,"/**
 * Checks if a generic array type is a supertype of another.
 * @param subtype the subtype array to check
 * @return true if subtype is a supertype, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtypeFromLowerBounds,"com.google.common.reflect.TypeToken:getSubtypeFromLowerBounds(java.lang.Class,java.lang.reflect.Type[])",1216,1224,"/**
 * Gets the subtype from lower bounds.
 * @param subclass The subclass to get subtype from.
 * @param lowerBounds Lower bounds for the type.
 * @return The subtype or throws exception if no lower bounds.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,typeName,com.google.common.reflect.Types$JavaVersion$4:typeName(java.lang.reflect.Type),652,654,"/**
 * Converts a Type object to its string representation.
 * @param type The Type object to convert.
 * @return String representation of the Type.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,toString,com.google.common.util.concurrent.AbstractExecutionThreadService$1:toString(),151,154,"/**
 * Returns a string representation of the object.
 * Includes service name and current state.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture:get(),249,254,"/**
 * Retrieves the value from the deferred computation.
 * @return The computed value or null if the computation failed.
 * @throws InterruptedException, ExecutionException if an error occurs.
 */
","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addListener,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",117,120,"/**
* Adds a listener to be executed on the given executor.
* Passes the listener and executor to the superclass.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,toString,com.google.common.util.concurrent.AbstractIdleService$DelegateService:toString(),89,92,"/**
 * Returns a string representation of the service.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:<init>(java.util.concurrent.ScheduledExecutorService),544,547,"/**
 * Constructs a ScheduledListeningDecorator with the given executor.
 * @param delegate The ScheduledExecutorService to decorate.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListeningExecutorService.java,submit,com.google.common.util.concurrent.ForwardingListeningExecutorService:submit(java.util.concurrent.Callable),45,48,"/**
 * Submits a Callable task to the delegate and returns a ListenableFuture.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,submitAndAddQueueListener,"com.google.common.util.concurrent.MoreExecutors:submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService,java.util.concurrent.Callable,java.util.concurrent.BlockingQueue)",764,771,"/**
 * Submits a task and adds its future to a queue.
 * @param executorService Executor service to submit task.
 * @param task Callable task to execute.
 * @param queue Queue to add the future to.
 * @return ListenableFuture representing the task.
 */
",* Submits the task and adds a listener that adds the future to {@code queue} when it completes.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitRunning,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitRunning(java.time.Duration),213,216,"/**
* Awaits the service to be running, with a specified timeout.
* @param timeout Duration to wait before timing out.
* @throws TimeoutException if the service doesn't become running.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitRunning,com.google.common.util.concurrent.AbstractIdleService:awaitRunning(java.time.Duration),177,180,"/**
 * Waits for the service to be running, with a timeout.
 * @param timeout The maximum time to wait.
 * @throws TimeoutException If the service doesn't start in time.
 */
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitRunning,com.google.common.util.concurrent.AbstractScheduledService:awaitRunning(java.time.Duration),468,471,"/**
* Awaits the service to be running, with a specified timeout.
* @param timeout The maximum time to wait.
* @throws TimeoutException If the service doesn't start within timeout.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(java.time.Duration),316,319,"/**
* Awaits the service to be running, with a specified timeout.
* @param timeout The maximum time to wait.
* @throws TimeoutException if the service doesn't start within timeout.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java,awaitTerminated,com.google.common.util.concurrent.AbstractExecutionThreadService:awaitTerminated(java.time.Duration),237,240,"/**
* Awaits termination of the service, with a timeout.
* @param timeout The maximum time to wait.
* @throws TimeoutException If the service doesn't terminate.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractIdleService.java,awaitTerminated,com.google.common.util.concurrent.AbstractIdleService:awaitTerminated(java.time.Duration),201,204,"/**
* Awaits termination of the service, with a timeout.
* @param timeout Duration to wait before throwing TimeoutException.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,awaitTerminated,com.google.common.util.concurrent.AbstractScheduledService:awaitTerminated(java.time.Duration),492,495,"/**
* Awaits termination of the service, with a timeout.
* @param timeout The maximum time to wait.
* @throws TimeoutException If the service doesn't terminate.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(java.time.Duration),351,354,"/**
* Awaits termination of the service, with a timeout.
* @param timeout The maximum time to wait.
* @throws TimeoutException If the service doesn't terminate.
*/
",* @since 28.0,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,doStart,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:doStart(),255,282,"/**
 * Starts the service by executing initialization tasks in the executor.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,toString,com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate:toString(),314,317,"/**
 * Returns a string representation of the service, delegating to parent.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard:isSatisfied(),160,163,"/**
 * Checks if the task is satisfied based on its state.
 * Returns true if the state is RUNNING or later.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStartableGuard:isSatisfied(),132,135,"/**
 * Checks if the condition is satisfied (state is NEW).
 * @return True if state is NEW, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppableGuard:isSatisfied(),146,149,"/**
 * Checks if the condition is satisfied based on the current state.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isSatisfied,com.google.common.util.concurrent.AbstractService$IsStoppedGuard:isSatisfied(),174,177,"/**
 * Checks if the task is satisfied (completed).
 * Returns true if state is TERMINATED or later.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,isRunning,com.google.common.util.concurrent.AbstractService:isRunning(),489,492,"/**
 * Checks if the component is currently running.
 * @return True if running, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,toString,com.google.common.util.concurrent.AbstractService:toString(),515,518,"/**
 * Returns a string representation of the object.
 * Includes class name and the object's state.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",41,58,"/**
 * Initializes a CollectionFuture with provided futures and a flag.
 * @param futures Futures to track; must not be null.
 * @param allMustSucceed Whether all futures must succeed.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,com.google.common.util.concurrent.AsyncCallable)",38,46,"/**
 * Creates a CombinedFuture from futures, a flag, executor, and callable.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CombinedFuture.java,<init>,"com.google.common.util.concurrent.CombinedFuture:<init>(com.google.common.collect.ImmutableCollection,boolean,java.util.concurrent.Executor,java.util.concurrent.Callable)",48,56,"/**
 * Creates a CombinedFuture from futures, a flag, executor, and callable.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,collectValueFromNonCancelledFuture,"com.google.common.util.concurrent.AggregateFuture:collectValueFromNonCancelledFuture(int,java.util.concurrent.Future)",280,290,"/**
 * Collects a value from a Future, handling exceptions.
 * @param index Index for the value being collected.
 * @param future Future to retrieve the value from.
 */
","* Collects the result (success or failure) of one input future. The input must not have been
   * cancelled. For details on when this is called, see {@link #collectOneValue}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,getAndAdd,com.google.common.util.concurrent.AtomicDouble:getAndAdd(double),163,166,"/**
 * Atomically gets the current value and adds delta.
 * @param delta The value to add to the current value.
 * @return The current value before adding delta.
 */","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDouble.java,addAndGet,com.google.common.util.concurrent.AtomicDouble:addAndGet(double),174,177,"/**
 * Adds the given delta to the current value and returns the result.
 * @param delta The value to add.
 * @return The new value after addition.
 */
","* Atomically adds the given value to the current value.
   *
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,getAndAdd,"com.google.common.util.concurrent.AtomicDoubleArray:getAndAdd(int,double)",180,183,"/**
 * Atomically adds delta to the double at index i and returns old value.
 */","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the previous value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,addAndGet,"com.google.common.util.concurrent.AtomicDoubleArray:addAndGet(int,double)",192,195,"/**
 * Adds delta to the current value and returns the result.
 * @param i The initial value.
 * @param delta The value to add.
 * @return The sum of the initial value and delta.
 */
","* Atomically adds the given value to the element at index {@code i}.
   *
   * @param i the index
   * @param delta the value to add
   * @return the updated value",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,cancel,com.google.common.util.concurrent.ClosingFuture:cancel(boolean),1099,1108,"/**
 * Attempts to cancel the execution of this future.
 * @param mayInterruptIfRunning if true, interrupts if running
 * @return true if cancellation was possible, false otherwise.
 */
","* Attempts to cancel execution of this step. This attempt will fail if the step has already
   * completed, has already been cancelled, or could not be cancelled for some other reason. If
   * successful, and this step has not started when {@code cancel} is called, this step should never
   * run.
   *
   * <p>If successful, causes the objects captured by this step (if already started) and its input
   * step(s) for later closing to be closed on their respective {@link Executor}s. If any such calls
   * specified {@link MoreExecutors#directExecutor()}, those objects will be closed synchronously.
   *
   * @param mayInterruptIfRunning {@code true} if the thread executing this task should be
   *     interrupted; otherwise, in-progress tasks are allowed to complete, but the step will be
   *     cancelled regardless
   * @return {@code false} if the step could not be cancelled, typically because it has already
   *     completed normally; {@code true} otherwise",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,finalize,com.google.common.util.concurrent.ClosingFuture:finalize(),2119,2126,"/**
 * Closes the future, logs a warning if it's still open.
 * Logs a warning and attempts to close if the future is open.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,becomeSubsumedInto,com.google.common.util.concurrent.ClosingFuture:becomeSubsumedInto(com.google.common.util.concurrent.ClosingFuture$CloseableList),1121,1124,"/**
 * Adds this list's contents to another list, marking it as subsumed.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,findPathTo,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,java.util.Set)",684,707,"/**
 * Recursively searches for a path to the target node in the graph.
 * @param node Target node to find a path to.
 * @param seen Set of visited nodes to prevent cycles.
 * @return ExampleStackTrace object representing the path, or null.
 */
","* Performs a depth-first traversal of the graph edges defined by each node's {@code
     * allowedPriorLocks} to find a path between {@code this} and the specified {@code lock}.
     *
     * @return If a path was found, a chained {@link ExampleStackTrace} illustrating the path to the
     *     {@code lock}, or {@code null} if no path was found.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,"com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException:<init>(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode,com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)",534,539,"/**
 * Creates a PotentialDeadlockException with nodes and a stack trace.
 * @param node1 First LockGraphNode involved in the potential deadlock.
 * @param node2 Second LockGraphNode involved.
 * @param conflictingStackTrace Stack trace of the conflict.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,com.google.common.util.concurrent.ListenableFutureTask:create(java.util.concurrent.Callable),62,64,"/**
 * Creates a ListenableFutureTask from a Callable.
 * @param callable Callable to wrap in a ListenableFutureTask.
 * @return A new ListenableFutureTask instance.
 */
","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Callable}.
   *
   * @param callable the callable task
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,create,"com.google.common.util.concurrent.ListenableFutureTask:create(java.lang.Runnable,java.lang.Object)",76,79,"/**
 * Creates a ListenableFutureTask with the given runnable and result.
 * @param runnable The task to execute.
 * @param result The result of the task.
 * @return A new ListenableFutureTask.
 */
","* Creates a {@code ListenableFutureTask} that will upon running, execute the given {@code
   * Runnable}, and arrange that {@code get} will return the given result on successful completion.
   *
   * @param runnable the runnable task
   * @param result the result to return on successful completion. If you don't need a particular
   *     result, consider using constructions of the form: {@code ListenableFuture<?> f =
   *     ListenableFutureTask.create(runnable, null)}
   * @since 10.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,addListener,"com.google.common.util.concurrent.ListenableFutureTask:addListener(java.lang.Runnable,java.util.concurrent.Executor)",89,92,"/**
 * Adds a listener to be executed by the given executor.
 * @param listener Runnable to execute
 * @param exec Executor to run the listener on
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,addListener,"com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:addListener(java.lang.Runnable,java.util.concurrent.Executor)",138,171,"/**
 * Adds a listener and executor to the execution list. Runs listeners
 * after the delegate completes, or immediately if delegate is done.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenableFutureTask.java,done,com.google.common.util.concurrent.ListenableFutureTask:done(),110,113,"/**
 * Executes the execution list after a task completes.
 */
",Internal implementation detail used to invoke the listeners.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,create,com.google.common.util.concurrent.ExecutionSequencer:create(),94,96,"/**
 * Creates and returns a new ExecutionSequencer instance.
 */",Creates a new instance.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,from,com.google.common.util.concurrent.FluentFuture:from(com.google.common.util.concurrent.ListenableFuture),133,137,"/**
 * Wraps a ListenableFuture as a FluentFuture, or returns it if already one.
 */
","* Converts the given {@code ListenableFuture} to an equivalent {@code FluentFuture}.
   *
   * <p>If the given {@code ListenableFuture} is already a {@code FluentFuture}, it is returned
   * directly. If not, it is wrapped in a {@code FluentFuture} that delegates all calls to the
   * original {@code ListenableFuture}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addFirst,com.google.common.collect.ForwardingDeque:addFirst(java.lang.Object),54,57,"/**
* Adds the specified element as the first element in the list.
* @param e the element to add
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,addLast,com.google.common.collect.ForwardingDeque:addLast(java.lang.Object),59,62,"/**
 * Adds the specified element to the end of the list.
 * @param e the element to add
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,descendingIterator,com.google.common.collect.ForwardingDeque:descendingIterator(),64,67,"/**
 * Returns a descending iterator for the collection.
 * Delegates to the underlying collection's iterator.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getFirst,com.google.common.collect.ForwardingDeque:getFirst(),69,73,"/**
 * Returns the first element of the list.
 * Delegates to the underlying list's first element.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,getLast,com.google.common.collect.ForwardingDeque:getLast(),75,79,"/**
 * Returns the last element of the underlying collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerFirst,com.google.common.collect.ForwardingDeque:offerFirst(java.lang.Object),81,85,"/**
 * Offers the specified element to the queue's head.
 * @param e the element to offer
 * @return true if the element was added, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,offerLast,com.google.common.collect.ForwardingDeque:offerLast(java.lang.Object),87,91,"/**
* Offers the specified element to the tail of the delegate queue.
* @param e the element to offer
* @return True if the offer was successful, false otherwise.
*/
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekFirst,com.google.common.collect.ForwardingDeque:peekFirst(),93,96,"/**
 * Retrieves the first element of the deque without removing it.
 * @return The first element or null if the deque is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,peekLast,com.google.common.collect.ForwardingDeque:peekLast(),98,101,"/**
 * Retrieves and returns the last element without removing it.
 * @return The last element or null if the deque is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollFirst,com.google.common.collect.ForwardingDeque:pollFirst(),103,107,"/**
 * Retrieves and removes the first element, or null if empty.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pollLast,com.google.common.collect.ForwardingDeque:pollLast(),109,113,"/**
 * Retrieves and removes the last element from the underlying delegate.
 * @return The last element or null if the delegate is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,pop,com.google.common.collect.ForwardingDeque:pop(),115,120,"/**
 * Removes and returns the last element from the underlying delegate.
 * @return The last element, or null if the delegate is empty.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,push,com.google.common.collect.ForwardingDeque:push(java.lang.Object),122,125,"/**
 * Pushes an element to the delegate.
 * @param e The element to push.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirst,com.google.common.collect.ForwardingDeque:removeFirst(),127,132,"/**
 * Removes and returns the first element from the underlying collection.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLast,com.google.common.collect.ForwardingDeque:removeLast(),134,139,"/**
 * Removes and returns the last element from the underlying delegate.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeFirstOccurrence,com.google.common.collect.ForwardingDeque:removeFirstOccurrence(java.lang.Object),141,145,"/**
 * Removes the first occurrence of the specified element.
 * @param o element to remove, can be null
 * @return true if an element was removed, false otherwise
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,removeLastOccurrence,com.google.common.collect.ForwardingDeque:removeLastOccurrence(java.lang.Object),147,151,"/**
 * Removes the last occurrence of the specified element from delegate.
 * @param o element to remove, can be null
 * @return true if removed, false otherwise
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,delegate,com.google.common.collect.ForwardingQueue:delegate(),54,55,"/**
 * Returns the underlying queue implementation. Abstract method.
 */",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,addListener,"com.google.common.util.concurrent.ForwardingListenableFuture:addListener(java.lang.Runnable,java.util.concurrent.Executor)",42,45,"/**
 * Adds a listener to be executed on the given executor.
 * @param listener Runnable to be executed.
 * @param exec Executor to run the listener on.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,delegate,com.google.common.util.concurrent.ForwardingFuture:delegate(),43,44,"/**
 * Delegates to an abstract implementation for future retrieval.
 * @return Future representing the asynchronous result.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,nonCancellationPropagating,com.google.common.util.concurrent.Futures:nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture),785,793,"/**
 * Wraps a future, propagating done status without cancellation.
 * @param future The future to wrap.
 * @return A NonCancellationPropagatingFuture wrapping the input.
 */
","* Returns a {@code ListenableFuture} whose result is set from the supplied future when it
   * completes. Cancelling the supplied future will also cancel the returned future, but cancelling
   * the returned future will have no effect on the supplied future.
   *
   * @since 15.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader:reload(java.lang.Object,java.lang.Object)",96,101,"/**
 * Reloads a value for the given key and wraps it in a future.
 * @param key The key to reload.
 * @param oldValue The old value associated with the key.
 * @return ListenableFuture containing the reloaded value.
 */
","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,applyClosingFunction,"com.google.common.util.concurrent.ClosingFuture$CloseableList:applyClosingFunction(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.lang.Object)",2182,2193,"/**
 * Applies a closing function to the input and returns a ListenableFuture.
 * @param transformation Function to apply, receives a Closer and input.
 * @param input Input value.
 * @return ListenableFuture holding the result of the transformation.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,fullyFailedFuture,com.google.common.cache.LocalCache$LoadingValueReference:fullyFailedFuture(java.lang.Throwable),3529,3531,"/**
 * Creates a future that immediately fails with the given Throwable.
 * @param t The exception to be wrapped in the future.
 * @return A ListenableFuture that immediately fails.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,wrapAndThrowExceptionOrError,"com.google.common.util.concurrent.FuturesGetChecked:wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)",205,214,"/**
 * Wraps Throwable as X, throws ExecutionError if Error,
 * or UncheckedExecutionException if RuntimeException.
 * @param cause The exception or error to wrap.
 * @param exceptionClass Class of exception to throw.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,hasConstructorUsableByGetChecked,com.google.common.util.concurrent.FuturesGetChecked:hasConstructorUsableByGetChecked(java.lang.Class),221,229,"/**
 * Checks if a checked exception class has a usable constructor.
 * @param exceptionClass The class of the checked exception.
 * @return True if constructor is usable, false otherwise.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event),89,91,"/**
 * Adds an event to the queue.
 * @param event The event to enqueue.
 */
","* Enqueues an event to be run on currently known listeners.
   *
   * <p>The {@code toString} method of the Event itself will be used to describe the event in the
   * case of an error.
   *
   * @param event the callback to execute on {@link #dispatch}",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,enqueue,"com.google.common.util.concurrent.ListenerCallQueue:enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event,java.lang.String)",99,101,"/**
 * Adds an event to the queue with a given label.
 * @param event The event to enqueue.
 * @param label A descriptive label for the event.
 */
","* Enqueues an event to be run on currently known listeners, with a label.
   *
   * @param event the callback to execute on {@link #dispatch}
   * @param label a description of the event to use in the case of an error",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,dispatchListenerEvents,com.google.common.util.concurrent.AbstractService:dispatchListenerEvents(),524,528,"/**
 * Dispatches listener events if not called by the monitor thread.
 */","* Attempts to execute all the listeners in {@link #listeners} while not holding the {@link
   * #monitor}.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,dispatchListenerEvents,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:dispatchListenerEvents(),752,757,"/**
 * Dispatches listener events after checking thread safety.
 */",Attempts to execute all the listeners in {@link #listeners}.,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,signalNextWaiter,com.google.common.util.concurrent.Monitor:signalNextWaiter(),1090,1098,"/**
 * Signals the next waiting thread if a guard condition is satisfied.
 */
","* Signals some other thread waiting on a satisfied guard, if one exists.
   *
   * <p>We manage calls to this method carefully, to signal only when necessary, but never losing a
   * signal, which is the classic problem of this kind of concurrency construct. We must signal if
   * the current thread is about to relinquish the lock and may have changed the state protected by
   * the monitor, thereby causing some guard to be satisfied.
   *
   * <p>In addition, any thread that has been signalled when its guard was satisfied acquires the
   * responsibility of signalling the next thread when it again relinquishes the lock. Unlike a
   * normal Condition, there is no guarantee that an interrupted thread has not been signalled,
   * since the concurrency control must manage multiple Conditions. So this method must generally be
   * called when waits are interrupted.
   *
   * <p>On the other hand, if a signalled thread wakes up to discover that its guard is still not
   * satisfied, it does *not* need to call this method before returning to wait. This can only
   * happen due to spurious wakeup (ignorable) or another thread acquiring the lock before the
   * current thread can and returning the guard to the unsatisfied state. In the latter case the
   * other thread (last thread modifying the state protected by the monitor) takes over the
   * responsibility of signalling the next waiter.
   *
   * <p>This method must not be called from within a beginWaitingFor/endWaitingFor block, or else
   * the current thread's guard might be mistakenly signalled, leading to a lost signal.",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,toString,com.google.common.util.concurrent.RateLimiter:toString(),456,459,"/**
 * Returns a string representation of the RateLimiter.
 * Includes the stable rate formatted to one decimal place.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,newProxy,"com.google.common.util.concurrent.SimpleTimeLimiter:newProxy(java.lang.Object,java.lang.Class,long,java.util.concurrent.TimeUnit)",75,100,"/**
 * Creates a proxy for the given target, interface, timeout, and unit.
 * @param target The target object to proxy.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,useDaemonThreadFactory,com.google.common.util.concurrent.MoreExecutors:useDaemonThreadFactory(java.util.concurrent.ThreadPoolExecutor),291,299,"/**
 * Sets the thread factory for the executor to use daemon threads.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TimeoutFuture.java,create,"com.google.common.util.concurrent.TimeoutFuture:create(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",43,53,"/**
 * Creates a ListenableFuture with a timeout.
 * @param delegate Future to wrap, time, unit, executor.
 * @return TimeoutFuture with timeout functionality.
 */
",,,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submitAsync,"com.google.common.util.concurrent.Futures:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",216,221,"/**
 * Submits an AsyncCallable for asynchronous execution.
 * @param callable The callable to execute.
 * @param executor Executor to run the callable on.
 * @return ListenableFuture representing the callable's result.
 */
","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",243,260,"/**
 * Schedules a callable to run after a delay, returning a ListenableFuture.
 * @param callable Callable to execute asynchronously
 * @param delay Delay before execution
 * @param timeUnit Time unit of the delay
 * @param executorService Executor service to use
 * @return ListenableFuture representing the asynchronous execution
 */
","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 23.0",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.util.concurrent.Callable),56,60,"/**
 * Creates a TrustedListenableFutureTask for the given callable.
 * @param callable The callable to wrap in a future task.
 */
",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",189,194,"/**
 * Submits a Callable to an executor and returns a ListenableFuture.
 * @param callable Callable to execute
 * @param executor Executor to run the task
 * @return ListenableFuture representing the task's execution
 */
","* Executes {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractListeningExecutorService.java,newTaskFor,"com.google.common.util.concurrent.AbstractListeningExecutorService:newTaskFor(java.lang.Runnable,java.lang.Object)",46,51,"/**
 * Creates a TrustedListenableFutureTask for the given runnable and value.
 */",* @since 19.0 (present with return type {@code ListenableFutureTask} since 14.0),,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,submit,"com.google.common.util.concurrent.Futures:submit(java.lang.Runnable,java.util.concurrent.Executor)",203,208,"/**
 * Submits a Runnable to an Executor and returns a ListenableFuture.
 * @param runnable The task to execute.
 * @param executor The executor to run the task on.
 * @return ListenableFuture representing the task's execution.
 */
","* Executes {@code runnable} on the specified {@code executor}, returning a {@code Future} that
   * will complete after execution.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.2",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Uninterruptibles.java,tryAcquireUninterruptibly,"com.google.common.util.concurrent.Uninterruptibles:tryAcquireUninterruptibly(java.util.concurrent.Semaphore,java.time.Duration)",425,429,"/**
 * Attempts to acquire a semaphore permit without interruption.
 * @param semaphore Semaphore to acquire a permit from.
 * @param timeout Duration to wait for permit acquisition.
 * @return True if acquired, false if timeout expires.
 */
","* Invokes {@code semaphore.}{@link Semaphore#tryAcquire(int, long, TimeUnit) tryAcquire(1,
   * timeout, unit)} uninterruptibly.
   *
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,3
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,getEnumIfPresent,"com.google.common.base.Platform:getEnumIfPresent(java.lang.Class,java.lang.String)",41,54,"/**
 * Retrieves an enum constant by value, returns Optional.
 * @param enumClass Enum class to search within.
 * @param value String value of the enum constant.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable:<init>(java.lang.Iterable),124,126,"/**
 * Initializes FluentIterable with the provided iterable.
 * @param iterable The iterable to delegate to.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,first,com.google.common.collect.FluentIterable:first(),512,516,"/**
 * Returns the first element as an Optional. Returns empty if absent.
 */","* Returns an {@link Optional} containing the first element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> if the goal is to obtain any element, {@link
   * Stream#findAny}; if it must specifically be the <i>first</i> element, {@code Stream#findFirst}.
   *
   * @throws NullPointerException if the first element is null; if this is a possibility, use {@code
   *     iterator().next()} or {@link Iterables#getFirst} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,last,com.google.common.collect.FluentIterable:last(),529,562,"/**
 * Returns the last element of the iterable, or absent if empty.
 */","* Returns an {@link Optional} containing the last element in this fluent iterable. If the
   * iterable is empty, {@code Optional.absent()} is returned. If the underlying {@code iterable} is
   * a {@link List} with {@link java.util.RandomAccess} support, then this operation is guaranteed
   * to be {@code O(1)}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.reduce((a, b) -> b)}.
   *
   * @throws NullPointerException if the last element is null; if this is a possibility, use {@link
   *     Iterables#getLast} instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,tryFind,"com.google.common.collect.Iterators:tryFind(java.util.Iterator,com.google.common.base.Predicate)",775,785,"/**
 * Finds the first element matching the predicate in the iterator.
 * @param iterator Iterator to search through.
 * @param predicate Predicate to test each element.
 * @return Optional containing the first match, or empty.
 */
","* Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the
   * given predicate, if such an element exists. If no such element is found, an empty {@link
   * Optional} will be returned from this method and the iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterator}, a NullPointerException will be thrown.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,expectedNodeCount,com.google.common.graph.GraphBuilder:expectedNodeCount(int),138,142,"/**
 * Sets the expected node count for the graph.
 * @param expectedNodeCount The expected number of nodes (>=0).
 * @return This GraphBuilder for chaining.
 */
","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedNodeCount,com.google.common.graph.NetworkBuilder:expectedNodeCount(int),154,158,"/**
 * Sets the expected node count.
 * @param expectedNodeCount The expected number of nodes (>=0).
 * @return This builder instance.
 */
","* Specifies the expected number of nodes in the network.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,expectedEdgeCount,com.google.common.graph.NetworkBuilder:expectedEdgeCount(int),165,169,"/**
 * Sets the expected edge count for the graph.
 * @param expectedEdgeCount The expected number of edges.
 * @return This NetworkBuilder for chaining.
 */
","* Specifies the expected number of edges in the network.
   *
   * @throws IllegalArgumentException if {@code expectedEdgeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,expectedNodeCount,com.google.common.graph.ValueGraphBuilder:expectedNodeCount(int),142,146,"/**
 * Sets the expected node count for the graph.
 * @param expectedNodeCount The expected number of nodes.
 * @return This builder instance for chaining.
 */
","* Specifies the expected number of nodes in the graph.
   *
   * @throws IllegalArgumentException if {@code expectedNodeCount} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ByteArrayByteSource:sizeIfKnown(),600,603,"/**
 * Returns the size as an Optional Long if known, otherwise empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$CharSequenceCharSource:lengthIfKnown(),565,568,"/**
 * Returns the sequence length as an Optional Long, if known.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,sizeIfKnown,com.google.common.io.Files$FileByteSource:sizeIfKnown(),134,141,"/**
 * Returns file size if known, otherwise returns absent.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,sizeIfKnown,com.google.common.io.MoreFiles$PathByteSource:sizeIfKnown(),126,143,"/**
 * Returns file size if known, otherwise returns empty Optional.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createConstantUtf8,"com.google.common.net.MediaType:createConstantUtf8(java.lang.String,java.lang.String)",115,119,"/**
 * Creates a MediaType with UTF-8 charset.
 * @param type The media type (e.g., ""application"")
 * @param subtype The subtype (e.g., ""json"")
 * @return The created MediaType object.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,any,"com.google.common.collect.Iterables:any(java.lang.Iterable,com.google.common.base.Predicate)",627,630,"/**
 * Checks if any element in the iterable satisfies the predicate.
 * @param iterable Iterable to check.
 * @param predicate Predicate to apply to each element.
 * @return True if any element matches, otherwise false.
 */
","* Returns {@code true} if any element in {@code iterable} satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/SmallCharMatcher.java,from,"com.google.common.base.SmallCharMatcher:from(java.util.BitSet,java.lang.String)",86,109,"/**
 * Creates a CharMatcher from a BitSet of characters and description.
 * @param chars BitSet of characters to match.
 * @param description Description of the CharMatcher.
 * @return A SmallCharMatcher instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,containsPattern,com.google.common.base.Predicates:containsPattern(java.lang.String),291,294,"/**
 * Returns a predicate that checks if a CharSequence contains pattern.
 * @param pattern The pattern to search for.
 * @return A predicate that checks for the pattern.
 */
","* Returns a predicate that evaluates to {@code true} if the {@code CharSequence} being tested
   * contains any match for the given regular expression pattern. The test used is equivalent to
   * {@code Pattern.compile(pattern).matcher(arg).find()}
   *
   * @throws IllegalArgumentException if the pattern is invalid
   * @since 3.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$EntrySet:retainAll(java.util.Collection),557,560,"/**
* Retains elements present in the specified collection.
* @param c collection to check against, returns true if modified
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$KeySet:retainAll(java.util.Collection),631,634,"/**
* Retains only the entries of this map that are also in the given collection.
* @param c collection to check against
* @return true if the map was modified
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$Column$Values:retainAll(java.util.Collection),658,661,"/**
* Retains only elements present in the given collection.
* @param c the collection to check against
* @return true if the collection was modified
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class)",167,174,"/**
 * Propagates a Throwable if it's an instance of declaredType.
 * Recursively calls itself if not.
 */
","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, or {@code declaredType}.
   *
   * <p><b>Discouraged</b> in favor of calling {@link #throwIfInstanceOf} and {@link
   * #throwIfUnchecked}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType the single checked exception type declared by the calling method
   * @deprecated Use a combination of {@link #throwIfInstanceOf} and {@link #throwIfUnchecked},
   *     which togther provide the same behavior except that they reject {@code null}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,flattenHierarchy,com.google.common.eventbus.SubscriberRegistry:flattenHierarchy(java.lang.Class),240,243,"/**
 * Retrieves the class hierarchy as an ImmutableSet.
 * @param concreteClass Class to start hierarchy from.
 * @return Set of classes in the hierarchy.
 */
","* Flattens a class's type hierarchy into a set of {@code Class} objects including all
   * superclasses (transitively) and all interfaces implemented by these superclasses.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,platformThreadFactory,com.google.common.util.concurrent.MoreExecutors:platformThreadFactory(),783,800,"/**
 * Returns a ThreadFactory for App Engine or the default.
 * Uses ThreadManager if available, otherwise returns default.
 */","* Returns a default thread factory used to create new threads.
   *
   * <p>When running on AppEngine with access to <a
   * href=""https://cloud.google.com/appengine/docs/standard/java/javadoc/"">AppEngine legacy
   * APIs</a>, this method returns {@code ThreadManager.currentRequestThreadFactory()}. Otherwise,
   * it returns {@link Executors#defaultThreadFactory()}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,enqueueNotification,"com.google.common.cache.LocalCache$Segment:enqueueNotification(java.lang.Object,int,java.lang.Object,int,com.google.common.cache.RemovalCause)",2625,2636,"/**
 * Enqueues a removal notification.
 * @param key The key of the removed entry.
 * @param value The value of the removed entry.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,spliterator,com.google.common.collect.AbstractTable$Values:spliterator(),212,215,"/**
 * Returns a spliterator for the values collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapKeySet.java,spliterator,com.google.common.collect.ImmutableMapKeySet:spliterator(),53,56,"/**
 * Returns a spliterator for the map's keys.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AsMapView:createValues(),901,904,"/**
 * Transforms the set using the provided function.
 * @return A collection of transformed values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createValues,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createValues(),1604,1609,"/**
 * Creates a collection of transformed values from the multimap entries.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,createValues,com.google.common.collect.Tables$TransformedTable:createValues(),505,508,"/**
* Creates a collection of V2 objects by transforming the table values.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,remove,com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries:remove(java.lang.Object),1441,1450,"/**
 * Removes the specified object from the map.
 * @param o the object to remove; returns true if present.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,remove,com.google.common.collect.Collections2$FilteredCollection:remove(java.lang.Object),195,198,"/**
 * Removes the specified element from this collection.
 * @param element element to remove; returns false if absent.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,contains,com.google.common.collect.FluentIterable:contains(java.lang.Object),356,358,"/**
* Checks if the delegate iterable contains the target object.
* @param target The object to search for.
* @return True if found, false otherwise.
*/
","* Returns {@code true} if this fluent iterable contains any object for which {@code
   * equals(target)} is true.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.anyMatch(Predicate.isEqual(target))}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$AsMapView:get(java.lang.Object),916,919,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to look up.
 * @return The value or null if the key is not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,get,com.google.common.collect.Maps$NavigableAsMapView:get(java.lang.Object),1074,1077,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to search for.
 * @return The value or null if the key is not found.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterFiltered,"com.google.common.collect.Multimaps:filterFiltered(com.google.common.collect.FilteredSetMultimap,com.google.common.base.Predicate)",2235,2241,"/**
 * Filters a FilteredSetMultimap based on a predicate.
 * @param multimap The multimap to filter.
 * @param entryPredicate Predicate for filtering entries.
 * @return A new filtered SetMultimap.
 */
","* Support removal operations when filtering a filtered multimap. Since a filtered multimap has
   * iterators that don't support remove, passing one to the FilteredEntryMultimap constructor would
   * lead to a multimap whose removal operations would fail. This method combines the predicates to
   * avoid that problem.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.ListMultimap,com.google.common.base.Predicate)",2067,2077,"/**
 * Filters keys in a ListMultimap based on a predicate.
 * @param unfiltered The ListMultimap to filter.
 * @param keyPredicate Predicate to filter keys.
 * @return A new filtered ListMultimap.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,filter,com.google.common.collect.FluentIterable:filter(java.lang.Class),431,434,"/**
 * Filters the iterable to contain only elements of the specified type.
 * @param type The class of elements to keep.
 * @return A FluentIterable containing only elements of the specified type.
 */
","* Returns the elements from this fluent iterable that are instances of class {@code type}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.
   * This does perform a little more work than necessary, so another option is to insert an
   * unchecked cast at some later point:
   *
   * {@snippet :
   * @SuppressWarnings(""unchecked"") // safe because of ::isInstance check
   * ImmutableList<NewType> result =
   *     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   * }",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,<init>,"com.google.common.collect.Iterators$MergingIterator:<init>(java.lang.Iterable,java.util.Comparator)",1323,1338,"/**
 * Initializes a MergingIterator with iterators and a comparator.
 * @param iterators Iterables of iterators to merge.
 * @param itemComparator Comparator for comparing items.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:entryIterator(),505,558,"/**
 * Returns an iterator over entries of Cut<C> and Range<C>.
 * Iterates through complement ranges based on window bounds.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:descendingEntryIterator(),560,620,"/**
 * Returns a descending iterator over entry-&lt;Cut, Range>&gt;.
 * Iterates through ranges based on complement ranges.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$RangesByUpperBound:descendingEntryIterator(),402,431,"/**
 * Returns a descending iterator of entries (Cut, Range).
 * Returns null if no ranges satisfy the window.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedSet:removeAll(java.util.Collection),611,628,"/**
 * Removes all elements from this set if they are contained in the given collection.
 * @param c Collection of elements to remove.
 * @return True if the set changed as a result of the removal.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSet.java,standardRemoveAll,com.google.common.collect.ForwardingSet:standardRemoveAll(java.util.Collection),76,79,"/**
 * Removes all elements from the set using a GWT-compatible implementation.
 * @param collection Collection of elements to remove.
 * @return True if the set was modified.
 */
","* A sensible definition of {@link #removeAll} in terms of {@link #iterator} and {@link #remove}.
   * If you override {@code iterator} or {@code remove}, you may wish to override {@link #removeAll}
   * to forward to this implementation.
   *
   * @since 7.0 (this version overrides the {@code ForwardingCollection} version as of 12.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,removeAll,com.google.common.collect.Sets$ImprovedAbstractSet:removeAll(java.util.Collection),84,87,"/**
* Removes all elements from this collection if they are contained in the given collection.
* @param c collection containing elements to remove
* @return true if the collection was modified, false otherwise
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,clear,com.google.common.collect.Collections2$FilteredCollection:clear(),149,152,"/**
 * Clears the collection by removing elements matching the predicate.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,removeAll,com.google.common.collect.FilteredMultimapValues:removeAll(java.util.Collection),76,81,"/**
 * Removes entries from the multimap if they satisfy the given predicate.
 * @param c Collection of values to filter entries by
 * @return True if changes were made, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredMultimapValues.java,retainAll,com.google.common.collect.FilteredMultimapValues:retainAll(java.util.Collection),83,88,"/**
 * Retains entries where the value is not present in the given collection.
 * @param c Collection to check for values to remove.
 * @return True if the multimap was modified.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,replaceValues,"com.google.common.collect.AbstractMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",103,110,"/**
 * Replaces values for a key with a new iterable.
 * @param key The key to replace values for.
 * @param values Iterable of new values.
 * @return Collection of removed values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,putAll,"com.google.common.collect.LinkedListMultimap:putAll(java.lang.Object,java.lang.Iterable)",78,91,"/**
* Adds all entries from an iterable into the map's value for the given key.
* @param key the key for which values are added
* @param values iterable of values to add
* @return true if values were added, false otherwise
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,com.google.common.collect.EnumMultiset:create(java.lang.Iterable),66,72,"/**
 * Creates an EnumMultiset from an iterable of enum elements.
 * @param elements Iterable containing enum values to populate multiset.
 * @return An EnumMultiset containing the provided enum elements.
 */
","* Creates a new {@code EnumMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain
   * @throws IllegalArgumentException if {@code elements} is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,addAll,com.google.common.collect.EvictingQueue:addAll(java.util.Collection),117,126,"/**
 * Adds all elements from a collection to this list.
 * Returns true if any elements were added, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newLinkedList,com.google.common.collect.Lists:newLinkedList(java.lang.Iterable),250,256,"/**
 * Creates a new LinkedList from the given Iterable.
 * @param elements Iterable containing elements for the list.
 * @return A new LinkedList containing the elements.
 */
","* Creates a <i>mutable</i> {@code LinkedList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Performance note:</b> {@link ArrayList} and {@link java.util.ArrayDeque} consistently
   * outperform {@code LinkedList} except in certain rare and specific situations. Unless you have
   * spent a lot of time benchmarking your specific needs, use one of those instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code LinkedList} {@linkplain LinkedList#LinkedList(Collection) constructor} directly,
   * taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newArrayDeque,com.google.common.collect.Queues:newArrayDeque(java.lang.Iterable),80,87,"/**
 * Creates an ArrayDeque from an Iterable.
 * @param elements Iterable to populate the deque from.
 * @return An ArrayDeque containing the elements.
 */
","* Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order
   * they are returned by the iterable's iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newConcurrentLinkedQueue,com.google.common.collect.Queues:newConcurrentLinkedQueue(java.lang.Iterable),102,112,"/**
 * Creates a ConcurrentLinkedQueue from an iterable of elements.
 * @param elements Iterable to populate the queue with.
 * @return A ConcurrentLinkedQueue containing the elements.
 */","* Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in
   * the order they are returned by the iterable's iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingDeque,com.google.common.collect.Queues:newLinkedBlockingDeque(java.lang.Iterable),146,155,"/**
 * Creates a LinkedBlockingDeque initialized with elements from iterable.
 * @param elements Iterable containing elements for the deque.
 * @return A new LinkedBlockingDeque containing the elements.
 */
","* Creates a {@code LinkedBlockingDeque} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newLinkedBlockingQueue,com.google.common.collect.Queues:newLinkedBlockingQueue(java.lang.Iterable),185,194,"/**
 * Creates a LinkedBlockingQueue initialized with the given elements.
 * @param elements Iterable containing initial queue elements.
 * @return A new LinkedBlockingQueue.
 */
","* Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing
   * the elements of the specified iterable, in the order they are returned by the iterable's
   * iterator.
   *
   * @param elements the elements that the queue should contain, in order
   * @return a new {@code LinkedBlockingQueue} containing those elements",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityBlockingQueue,com.google.common.collect.Queues:newPriorityBlockingQueue(java.lang.Iterable),223,234,"/**
 * Creates a PriorityBlockingQueue from an iterable of elements.
 * @param elements Iterable of elements to add to the queue
 * @return A PriorityBlockingQueue containing the elements.
 */
","* Creates a {@code PriorityBlockingQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,newPriorityQueue,com.google.common.collect.Queues:newPriorityQueue(java.lang.Iterable),259,268,"/**
 * Creates a priority queue from an iterable of comparable elements.
 * @param elements Iterable containing elements to add to the queue
 * @return PriorityQueue containing the elements
 */
","* Creates a {@code PriorityQueue} containing the given elements.
   *
   * <p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},
   * this priority queue will be ordered according to the same ordering.
   *
   * @since 11.0 (but the bound of {@code E} was changed from {@code Object} to {@code Comparable}
   *     in 15.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newEnumSet,"com.google.common.collect.Sets:newEnumSet(java.lang.Iterable,java.lang.Class)",159,164,"/**
 * Creates an EnumSet from an iterable, using the given element type.
 */
","* Returns a new, <i>mutable</i> {@code EnumSet} instance containing the given elements in their
   * natural order. This method behaves identically to {@link EnumSet#copyOf(Collection)}, but also
   * accepts non-{@code Collection} iterables and empty iterables.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newConcurrentHashSet,com.google.common.collect.Sets:newConcurrentHashSet(java.lang.Iterable),296,300,"/**
 * Creates a ConcurrentHashSet from an iterable of elements.
 * @param elements Iterable containing elements to add to the set.
 * @return A ConcurrentHashSet containing the provided elements.
 */
","* Creates a thread-safe set backed by a hash map and containing the given elements. The set is
   * backed by a {@link ConcurrentHashMap} instance, and thus carries the same concurrency
   * guarantees.
   *
   * <p>Unlike {@code HashSet}, this class does NOT allow {@code null} to be used as an element. The
   * set is serializable.
   *
   * @param elements the elements that the set should contain
   * @return a new thread-safe set containing those elements (minus duplicates)
   * @throws NullPointerException if {@code elements} or any of its contents is null
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newLinkedHashSet,com.google.common.collect.Sets:newLinkedHashSet(java.lang.Iterable),337,346,"/**
 * Creates a new LinkedHashSet from an iterable of elements.
 * @param elements Iterable containing elements for the set.
 * @return A new LinkedHashSet containing the elements.
 */
","* Creates a <i>mutable</i> {@code LinkedHashSet} instance containing the given elements in order.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code LinkedHashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code LinkedHashSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newTreeSet,com.google.common.collect.Sets:newTreeSet(java.lang.Iterable),411,419,"/**
 * Creates a new TreeSet from an iterable of elements.
 * @param elements Iterable containing elements to add to the set.
 * @return A new TreeSet containing the elements.
 */
","* Creates a <i>mutable</i> {@code TreeSet} instance containing the given elements sorted by their
   * natural ordering.
   *
   * <p><b>Note:</b> if mutability is not required, use {@link ImmutableSortedSet#copyOf(Iterable)}
   * instead.
   *
   * <p><b>Note:</b> If {@code elements} is a {@code SortedSet} with an explicit comparator, this
   * method has different behavior than {@link TreeSet#TreeSet(SortedSet)}, which returns a {@code
   * TreeSet} with that comparator.
   *
   * <p><b>Note:</b> this method is now unnecessary and should be treated as deprecated. Instead,
   * use the {@code TreeSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>This method is just a small convenience for creating an empty set and then calling {@link
   * Iterables#addAll}. This method is not very useful and will likely be deprecated in the future.
   *
   * @param elements the elements that the set should contain
   * @return a new {@code TreeSet} containing those elements (minus duplicates)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,next,com.google.common.collect.TreeTraverser$BreadthFirstIterator:next(),288,293,"/**
 * Returns the next element in the iteration. Removes from queue,
 * adds children, and returns the element.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,castOrCopyToCollection,com.google.common.collect.Iterables:castOrCopyToCollection(java.lang.Iterable),313,318,"/**
 * Returns the iterable as a Collection, or creates a new ArrayList.
 */","* Converts an iterable into a collection. If the iterable is already a collection, it is
   * returned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the
   * iterable in the same iteration order.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,getCopy,com.google.common.collect.LinkedListMultimap:getCopy(java.lang.Object),648,650,"/**
 * Returns an unmodifiable list containing the value for the key.
 * @param key The key to retrieve the value for.
 * @return An unmodifiable list containing the value.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newArrayList,com.google.common.collect.Lists:newArrayList(java.lang.Iterable),130,138,"/**
 * Creates a new ArrayList containing elements from the given iterable.
 * @param elements Iterable containing elements to add to the list.
 * @return A new ArrayList containing the elements.
 */
","* Creates a <i>mutable</i> {@code ArrayList} instance containing the given elements; a very thin
   * shortcut for creating an empty list then calling {@link Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toList()}.)
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method. Use
   * the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection) constructor} directly, taking
   * advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(),3108,3112,"/**
* Converts the set to an array of Objects.
* Uses an ArrayList for efficient conversion.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredEntryMap$KeySet:toArray(java.lang.Object[]),3114,3118,"/**
* Converts the collection to an array of type T.
* @param array Array to populate, can be null.
* @return Array containing elements of the collection.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(),2958,2962,"/**
 * Converts the set to an array of Objects.
 * Uses an iterator to populate the array.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toArray,com.google.common.collect.Maps$FilteredMapValues:toArray(java.lang.Object[]),2964,2968,"/**
 * Converts the iterator to an array of type T.
 * @param array Array to populate with elements; may be reused.
 * @return Array containing elements from the iterator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:retainAll(java.util.Collection),967,978,"/**
 * Retains only elements present in the provided collection.
 * @param c collection to check against; returns true if changed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:removeAll(java.util.Collection),998,1009,"/**
 * Removes all columns contained in the given collection.
 * @param c Collection of column keys to remove.
 * @return True if any columns were removed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,retainAll,com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues:retainAll(java.util.Collection),1011,1022,"/**
 * Retains only elements present in the given collection.
 * @param c collection to check against, must not be null
 * @return true if the collection was modified
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newHashSet,com.google.common.collect.Sets:newHashSet(java.lang.Iterable),225,230,"/**
 * Creates a HashSet from an iterable, or its iterator.
 * @param elements Iterable to populate the HashSet with.
 * @return A new HashSet containing elements from the iterable.
 */
","* Creates a <i>mutable</i> {@code HashSet} instance containing the given elements. A very thin
   * convenience for creating an empty set then calling {@link Collection#addAll} or {@link
   * Iterables#addAll}.
   *
   * <p><b>Note:</b> if mutability is not required and the elements are non-null, use {@link
   * ImmutableSet#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link
   * FluentIterable} and call {@code elements.toSet()}.)
   *
   * <p><b>Note:</b> if {@code E} is an {@link Enum} type, use {@link #newEnumSet(Iterable, Class)}
   * instead.
   *
   * <p><b>Note:</b> if {@code elements} is a {@link Collection}, you don't need this method.
   * Instead, use the {@code HashSet} constructor directly, taking advantage of <a
   * href=""https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html#type-inference-instantiation"">""diamond""
   * syntax</a>.
   *
   * <p>Overall, this method is not very useful and will likely be deprecated in the future.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(),227,231,"/**
 * Converts the set to an array of Objects.
 * Uses iterator for efficient conversion.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,toArray,com.google.common.collect.Collections2$FilteredCollection:toArray(java.lang.Object[]),233,237,"/**
 * Converts the collection to an array of type T.
 * @param array Array to populate, can be null.
 * @return Array containing elements of the collection.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,allMatch,com.google.common.collect.FluentIterable:allMatch(com.google.common.base.Predicate),451,453,"/**
* Checks if all elements of the collection match the predicate.
* @param predicate Predicate to apply to each element.
* @return True if all elements match, false otherwise.
*/
","* Returns {@code true} if every element in this fluent iterable satisfies the predicate. If this
   * fluent iterable is empty, {@code true} is returned.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch} (same).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,ceiling,com.google.common.collect.Sets$FilteredNavigableSet:ceiling(java.lang.Object),1366,1369,"/**
 * Returns the greatest element less than or equal to given element.
 * @param e the element to find ceiling for
 * @return ceiling element or null if none exists
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,higher,com.google.common.collect.Sets$FilteredNavigableSet:higher(java.lang.Object),1371,1374,"/**
 * Returns the next higher element than e in the sorted set.
 * @param e the element to find the higher element than
 * @return the next higher element or null if none exists
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(int),204,206,"/**
 * Creates a list iterator starting at the specified index.
 * @param start the starting index for the list iterator
 * @return A ListIterator instance.
 */
","* A sensible default implementation of {@link #listIterator(int)}, in terms of {@link #size},
   * {@link #get(int)}, {@link #set(int, Object)}, {@link #add(int, Object)}, and {@link
   * #remove(int)}. If you override any of these methods, you may wish to override {@link
   * #listIterator(int)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesListMultimap:transform(java.lang.Object,java.util.Collection)",1621,1624,"/**
 * Transforms a collection of values using a transformer.
 * @param key The key for transformation.
 * @param values Values to transform.
 * @return Transformed list of values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transform,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:transform(java.lang.Object,java.util.Collection)",1512,1519,"/**
 * Transforms a collection of values using a function.
 * @param key The key associated with the values.
 * @param values Collection of values to transform.
 * @return Transformed collection of values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asMap,"com.google.common.collect.Maps:asMap(java.util.SortedSet,com.google.common.base.Function)",847,850,"/**
 * Adapts a SortedSet to a SortedMap using the provided function.
 * @param set SortedSet to adapt.
 * @param function Maps keys from the set to map values.
 * @return SortedMap based on the set and function.
 */
","* Returns a view of the sorted set as a map, mapping keys from the set according to the specified
   * function.
   *
   * <p>Specifically, for each {@code k} in the backing set, the returned map has an entry mapping
   * {@code k} to {@code function.apply(k)}. The {@code keySet}, {@code values}, and {@code
   * entrySet} views of the returned map iterate in the same order as the backing set.
   *
   * <p>Modifications to the backing set are read through to the returned map. The returned map
   * supports removal operations if the backing set does. Removal operations write through to the
   * backing set. The returned map does not support put operations.
   *
   * <p><b>Warning:</b> If the function rejects {@code null}, caution is required to make sure the
   * set does not contain {@code null}, because the view cannot stop {@code null} from being added
   * to the set.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of key type {@code K},
   * {@code k.equals(k2)} implies that {@code k2} is also of type {@code K}. Using a key type for
   * which this may not hold, such as {@code ArrayList}, may risk a {@code ClassCastException} when
   * calling methods on the resulting map view.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeIncidentNodesMap,com.google.common.graph.AbstractNetwork:edgeIncidentNodesMap(com.google.common.graph.Network),323,325,"/**
 * Creates map of edge to incident nodes for a network.
 * @param network The network to process.
 * @return Map of edge to list of incident nodes.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,edgeValueMap,com.google.common.graph.AbstractValueGraph:edgeValueMap(com.google.common.graph.ValueGraph),154,160,"/**
 * Creates a map of endpoint pairs to values from the graph.
 * @param graph The graph to extract edge values from.
 * @return A map of endpoint pairs to their corresponding values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$NavigableKeySet:<init>(java.util.NavigableMap),4023,4025,"/**
 * Constructs a NavigableKeySet backed by the given NavigableMap.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3992,3995,"/**
 * Returns a sorted set of the map's keys between fromElement and toElement.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$SortedKeySet:headSet(java.lang.Object),3997,4000,"/**
 * Returns a view of the sorted set containing elements up to, but not including, toElement.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$SortedKeySet:tailSet(java.lang.Object),4002,4005,"/**
 * Returns a sorted set of keys, from fromElement to the end.
 * @param fromElement the starting key element
 * @return SortedSet containing keys >= fromElement
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,createKeySet,com.google.common.collect.StandardRowSortedTable$RowSortedMap:createKeySet(),102,105,"/**
 * Creates a sorted set of keys for this map.
 * Returns a SortedKeySet backed by this map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,keySet,com.google.common.collect.TreeBasedTable$TreeRow:keySet(),202,205,"/**
* Returns a sorted set view of the keys in this map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$ViewCachingAbstractMap:keySet(),3722,3726,"/**
* Returns a set view of the map's keys. Lazily initialized.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$NavigableAsMapView:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1050,1057,"/**
 * Returns a submap containing entries within the specified range.
 * @param fromKey Start key (inclusive).
 * @param toKey End key (inclusive).
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$NavigableAsMapView:headMap(java.lang.Object,boolean)",1059,1062,"/**
 * Returns a view of the map containing entries with keys up to, but not including, toKey.
 * @param toKey Exclusive key for the head map.
 * @param inclusive Whether to include toKey.
 * @return NavigableMap containing head map entries.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$NavigableAsMapView:tailMap(java.lang.Object,boolean)",1064,1067,"/**
 * Returns a tail map, containing entries with keys >= fromKey.
 * @param fromKey Key from which the tail map starts.
 * @param inclusive Whether fromKey is included in the tail map.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$NavigableAsMapView:descendingMap(),1125,1128,"/**
* Returns a descending map backed by the set.
* Uses the set's descending set and the function.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2270,2273,"/**
 * Constructs a TransformedEntriesNavigableMap from a NavigableMap.
 * @param fromMap Source NavigableMap
 * @param transformer Transforms entries from the source map.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.SortedMap,com.google.common.collect.Maps$EntryTransformer)",2013,2018,"/**
 * Transforms entries of a sorted map using a provided transformer.
 * @param fromMap The input sorted map.
 * @param transformer Transforms each map entry.
 * @return A new sorted map with transformed entries.
 */
","* Returns a view of a sorted map whose values are derived from the original sorted map's entries.
   * In contrast to {@link #transformValues}, this method's entry-transformation logic may depend on
   * the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * Map<String, Boolean> options =
   *     ImmutableSortedMap.of(""verbose"", true, ""sort"", false);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : ""yes"" + key;
   *       }
   *     };
   * SortedMap<String, String> transformed =
   *     Maps.transformEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.Map,com.google.common.base.Function)",1824,1829,"/**
 * Transforms values in a map using a function.
 * @param fromMap Source map.
 * @param function Function to apply to each value.
 * @return New map with transformed values.
 */
","* Returns a view of a map where each value is transformed by a function. All other properties of
   * the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Map<String, Integer> map = ImmutableMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * Map<String, Double> transformed = Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,createAsMap,com.google.common.collect.Multimaps$TransformedEntriesMultimap:createAsMap(),1521,1524,"/**
* Creates a Map from the multimap, transforming values.
* @return A Map with transformed values.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createValues,com.google.common.collect.Maps$AbstractFilteredMap:createValues(),2898,2901,"/**
 * Creates a collection of filtered values for the map.
 * Returns a FilteredMapValues object based on the predicate.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$FilteredEntryNavigableMap:values(),3265,3268,"/**
 * Returns a filtered collection of the map's values.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,values,com.google.common.collect.Maps$ViewCachingAbstractMap:values(),3734,3738,"/**
 * Returns a collection of the values in this map.
 * Lazily initializes values if not already present.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,contains,com.google.common.collect.AbstractBiMap$EntrySet:contains(java.lang.Object),437,440,"/**
 * Checks if the map contains a key.
 * @param o the key to check
 * @return true if the map contains the key, false otherwise
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,contains,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:contains(java.lang.Object),1008,1013,"/**
 * Checks if the map contains a key.
 * @param o the key to check
 * @return true if the map contains the key, false otherwise
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:remove(java.lang.Object),1032,1037,"/**
* Removes the specified object from the map.
* @param o the object to remove
* @return true if the object was removed, false otherwise
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,ceilingEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:ceilingEntry(java.lang.Object),2275,2278,"/**
* Returns the entry with the smallest key greater than or equal to the given key.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,firstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:firstEntry(),2295,2298,"/**
* Returns the first entry in the map, transformed if necessary.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,floorEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:floorEntry(java.lang.Object),2300,2303,"/**
* Returns the greatest map entry whose key is <= the given key.
* @param key The key to compare against.
* @return Map entry or null if no such entry exists.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,higherEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:higherEntry(java.lang.Object),2320,2323,"/**
 * Returns the next higher key's entry in this map, or null if none.
 * @param key The key to search from.
 * @return Entry<K, V2> or null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lastEntry(),2330,2333,"/**
 * Returns the last entry in the map, transformed if necessary.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,lowerEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:lowerEntry(java.lang.Object),2335,2338,"/**
* Returns the entry immediately preceding the given key, or null.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollFirstEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollFirstEntry(),2350,2353,"/**
 * Retrieves and removes the first entry, transforming its value.
 * @return Entry with transformed value, or null if empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,pollLastEntry,com.google.common.collect.Maps$TransformedEntriesNavigableMap:pollLastEntry(),2355,2358,"/**
 * Retrieves and removes the last entry in the map.
 * @return Entry<K, V2> or null if the map is empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.AbstractMapBasedMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds a specified number of occurrences of an element.
* @param element element to add
* @param occurrences number of occurrences to add
* @return the previous count of the element
*/
","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.AbstractMapBasedMultiset:remove(java.lang.Object,int)",286,311,"/**
 * Removes specified occurrences of an element.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return original count of the element
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.HashMultiset:count(java.lang.Object),250,254,"/**
 * Counts occurrences of an element.
 * @param element Element to count; null is allowed.
 * @return The count of the element, or 0 if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,count,com.google.common.collect.LinkedHashMultiset:count(java.lang.Object),250,254,"/**
 * Counts the occurrences of an element.
 * @param element The element to count.
 * @return The count of the element, or 0 if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,get,"com.google.common.collect.ImmutableTable:get(java.lang.Object,java.lang.Object)",79,83,"/**
 * Retrieves a value by row and column keys.
 * @param rowKey Row key. @param columnKey Column key.
 * @return Value at the specified row/column, or null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.StandardTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
* Gets a value by row and column keys. Returns null if either key is null.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,add,"com.google.common.collect.ConcurrentHashMultiset:add(java.lang.Object,int)",205,252,"/**
 * Adds occurrences to an element's count. Returns old count.
 * @param element element to add occurrences to
 * @param occurrences number of occurrences to add
 * @return old count of the element
 */
","* Adds a number of occurrences of the specified element to this multiset.
   *
   * @param element the element to add
   * @param occurrences the number of occurrences to add
   * @return the previous count of the element before the operation; possibly zero
   * @throws IllegalArgumentException if {@code occurrences} is negative, or if the resulting amount
   *     would exceed {@link Integer#MAX_VALUE}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,remove,"com.google.common.collect.ConcurrentHashMultiset:remove(java.lang.Object,int)",272,300,"/**
 * Removes specified occurrences of an element.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return original count of the element
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$EntrySet:remove(java.lang.Object),4227,4238,"/**
 * Removes the specified entry from the map.
 * @param o the entry to remove; must be an Entry.
 * @return true if the entry was removed, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$Keys:remove(java.lang.Object,int)",1798,1822,"/**
 * Removes specified occurrences of an element from the multimap.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return Number of elements removed
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,"com.google.common.collect.HashBasedTable:remove(java.lang.Object,java.lang.Object)",158,173,"/**
 * Removes a row/column pair and returns the value.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return Value removed, or null if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$KeySet:remove(java.lang.Object),626,629,"/**
* Removes an object from the table.
* @param obj The object to remove.
* @return True if the object was removed, false otherwise.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column:remove(java.lang.Object),481,484,"/**
 * Removes the specified key's value.
 * @param key The key to remove.
 * @return The removed value or null if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsRow,com.google.common.collect.ImmutableTable:containsRow(java.lang.Object),43,46,"/**
 * Checks if a row with the given key exists in the row map.
 * @param rowKey The key of the row to check.
 * @return True if the row exists, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,containsColumn,com.google.common.collect.ImmutableTable:containsColumn(java.lang.Object),48,51,"/**
* Checks if the column map contains the specified column key.
* @param columnKey The key to check for in the column map.
* @return True if the map contains the key, false otherwise.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.StandardTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
 * Checks if the map contains the specified row and column keys.
 * @param rowKey Row key to check.
 * @param columnKey Column key to check.
 * @return True if both keys exist in the map, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsColumn,com.google.common.collect.HashBasedTable:containsColumn(java.lang.Object),91,102,"/**
 * Checks if any backing map contains the given column key.
 * @param columnKey The key to search for. Returns true if found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,isEmpty,com.google.common.collect.StandardTable$Column$EntrySet:isEmpty(),529,532,"/**
* Checks if the table is empty.
* Returns true if no column exists, false otherwise.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnKeySet:contains(java.lang.Object),753,756,"/**
 * Checks if the collection contains the specified object.
 * @param obj object to check for existence
 * @return true if the object is found, false otherwise
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$ColumnMap:get(java.lang.Object),885,890,"/**
 * Retrieves a column map by key. Returns null if key doesn't exist.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$ColumnMap:containsKey(java.lang.Object),892,895,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the map contains the key, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap:remove(java.lang.Object),897,900,"/**
 * Removes a column by key. Returns the removed map or null.
 * @param key The key of the column to remove.
 * @return The removed map or null if column doesn't exist.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsRow,com.google.common.collect.HashBasedTable:containsRow(java.lang.Object),104,107,"/**
 * Checks if a row with the given key exists.
 * @param rowKey The key of the row to check.
 * @return True if the row exists, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$RowMap:containsKey(java.lang.Object),814,817,"/**
* Checks if the map contains a key.
* @param key The key to check.
* @return True if the map contains the key, false otherwise.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$RowMap:get(java.lang.Object),820,825,"/**
 * Retrieves a row map by key. Returns null if the key doesn't exist.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformEntries,"com.google.common.collect.Multimaps:transformEntries(com.google.common.collect.ListMultimap,com.google.common.collect.Maps$EntryTransformer)",1493,1498,"/**
 * Transforms entries in a ListMultimap using a provided transformer.
 * @param fromMap source ListMultimap
 * @param transformer transforms K, V1 to V2
 * @return new ListMultimap with transformed entries
 */
","* Returns a view of a {@code ListMultimap} whose values are derived from the original multimap's
   * entries. In contrast to {@link #transformValues(ListMultimap, Function)}, this method's
   * entry-transformation logic may depend on the key as well as the value.
   *
   * <p>All other properties of the transformed multimap, such as iteration order, are left intact.
   * For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableMultimap.of(""a"", 1, ""a"", 4, ""b"", 6);
   * EntryTransformer<String, Integer, String> transformer =
   *     new EntryTransformer<String, Integer, String>() {
   *       public String transformEntry(String key, Integer value) {
   *         return key + value;
   *       }
   *     };
   * Multimap<String, String> transformed =
   *     Multimaps.transformEntries(multimap, transformer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {""a""=[""a1"", ""a4""], ""b""=[""b6""]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys and null values provided
   * that the transformer is capable of accepting null inputs. The transformed multimap might
   * contain null values if the transformer sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned multimap
   * doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed multimap.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.Multimap,com.google.common.base.Function)",1334,1341,"/**
 * Transforms values in a Multimap using a Function.
 * @param fromMultimap Multimap to transform
 * @param function Function to apply to each value
 * @return New Multimap with transformed values
 */
","* Returns a view of a multimap where each value is transformed by a function. All other
   * properties of the multimap, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * Multimap<String, Integer> multimap =
   *     ImmutableSetMultimap.of(""a"", 2, ""b"", -3, ""b"", -3, ""a"", 4, ""c"", 6);
   * Function<Integer, String> square = new Function<Integer, String>() {
   *     public String apply(Integer in) {
   *       return Integer.toString(in * in);
   *     }
   * };
   * Multimap<String, String> transformed =
   *     Multimaps.transformValues(multimap, square);
   *   System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[4, 16], b=[9, 9], c=[36]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is. The {@code equals} and {@code hashCode} methods of the returned multimap are meaningless,
   * since there is not a definition of {@code equals} or {@code hashCode} for general collections,
   * and {@code get()} will return a general {@code Collection} as opposed to a {@code List} or a
   * {@code Set}.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,addAll,com.google.common.collect.ImmutableSortedMultiset$Builder:addAll(java.lang.Iterable),535,540,"/**
 * Adds all elements from the given iterable to the builder.
 * @param elements Iterable containing elements to add.
 * @return This builder for chaining.
 */
","* Adds each element of {@code elements} to the {@code ImmutableSortedMultiset}.
     *
     * @param elements the {@code Iterable} to add to the {@code ImmutableSortedMultiset}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is null or contains a null element",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,addAllImpl,"com.google.common.collect.Multisets:addAllImpl(com.google.common.collect.Multiset,java.util.Collection)",897,908,"/**
 * Adds all elements from a collection to the multiset.
 * @param self the multiset to add to
 * @param elements collection of elements to add
 * @return true if the multiset was modified
 */
",An implementation of {@link Multiset#addAll}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,apply,com.google.common.collect.Range:apply(java.lang.Object),417,422,"/**
 * Applies the contains operation on the input.
 * @param input The input to be checked for containment.
 * @return True if the input is contained, false otherwise.
 */
","* @deprecated Provided only to satisfy the {@link Predicate} interface; use {@link #contains}
   *     instead.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,indexOf,com.google.common.collect.RegularContiguousSet:indexOf(java.lang.Object),77,88,"/**
 * Returns the index of the target object within the domain.
 * @param target The object to search for.
 * @return The index or -1 if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,nullableSynchronizedEntry,"com.google.common.collect.Synchronized:nullableSynchronizedEntry(java.util.Map$Entry,java.lang.Object)",1779,1787,"/**
 * Wraps a map entry in a synchronized wrapper, or returns null.
 * @param entry The map entry to wrap.
 * @param mutex The mutex object for synchronization.
 * @return SynchronizedEntry or null if entry is null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedAsMap:<init>(java.util.Map,java.lang.Object)",1398,1400,"/**
 * Constructs a SynchronizedAsMap with the given map and mutex.
 * @param delegate The map to synchronize.
 * @param mutex The mutex object for synchronization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedBiMap:<init>(com.google.common.collect.BiMap,java.lang.Object,com.google.common.collect.BiMap)",1352,1356,"/**
 * Constructs a SynchronizedBiMap with a delegate, mutex, and inverse BiMap.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedMap:<init>(java.util.SortedMap,java.lang.Object)",1285,1287,"/**
 * Constructs a SynchronizedSortedMap using the given delegate and mutex.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,map,"com.google.common.collect.Synchronized:map(java.util.Map,java.lang.Object)",1056,1060,"/**
 * Wraps a map with synchronization.
 * @param map The map to wrap.
 * @param mutex Mutex object for synchronization.
 * @return A synchronized map.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedListMultimap:<init>(com.google.common.collect.ListMultimap,java.lang.Object)",793,795,"/**
 * Constructs a SynchronizedListMultimap with the given delegate and mutex.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:<init>(com.google.common.collect.SetMultimap,java.lang.Object)",838,840,"/**
 * Constructs a SynchronizedSetMultimap with the given delegate and mutex.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,multimap,"com.google.common.collect.Synchronized:multimap(com.google.common.collect.Multimap,java.lang.Object)",586,592,"/**
 * Returns a synchronized multimap or the original if already synchronized.
 * @param multimap The multimap to synchronize.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,table,"com.google.common.collect.Synchronized:table(com.google.common.collect.Table,java.lang.Object)",2033,2036,"/**
 * Wraps a table with synchronization.
 * @param table The table to synchronize.
 * @param mutex Mutex object for synchronization.
 * @return SynchronizedTable instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,toTable,"com.google.common.collect.Tables:toTable(java.util.function.Function,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)",71,84,"/**
 * Creates a TableCollector to populate a table from stream elements.
 * @param rowFunction Maps element to row key.
 * @param columnFunction Maps element to column key.
 * @param valueFunction Maps element to cell value.
 * @param tableSupplier Creates the table to populate.
 */
","* Returns a {@link Collector} that accumulates elements into a {@code Table} created using the
   * specified supplier, whose cells are generated by applying the provided mapping functions to the
   * input elements. Cells are inserted into the generated {@code Table} in encounter order.
   *
   * <p>If multiple input elements map to the same row and column, an {@code IllegalStateException}
   * is thrown when the collection operation is performed.
   *
   * <p>To collect to an {@link ImmutableTable}, use {@link ImmutableTable#toImmutableTable}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,putAll,com.google.common.collect.Tables$TransposeTable:putAll(com.google.common.collect.Table),282,285,"/**
* Adds all entries from a table to the original table.
* @param table The table to add entries from.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeTraverser.java,computeNext,com.google.common.collect.TreeTraverser$PostOrderIterator:computeNext(),228,241,"/**
 * Computes the next element in post-order traversal.
 * Returns the next element or endOfData() if stack is empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escapeSlow,"com.google.common.escape.UnicodeEscaper:escapeSlow(java.lang.String,int)",157,212,"/**
 * Escapes slow characters in a string, handling supplementary chars.
 * @param s input string
 * @param index start index
 * @return escaped string
 */
","* Returns the escaped form of a given literal string, starting at the given index. This method is
   * called by the {@link #escape(String)} method when it discovers that escaping is required. It is
   * protected to allow subclasses to override the fastpath escaping function to inline their
   * escaping test. See {@link CharEscaperBuilder} for an example usage.
   *
   * <p>This method is not reentrant and may only be invoked by the top level {@link
   * #escape(String)} method.
   *
   * @param s the literal string to be escaped
   * @param index the index to start escaping from
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,of,com.google.common.graph.UndirectedMultiNetworkConnections:of(),49,52,"/**
 * Creates a new, empty UndirectedMultiNetworkConnections instance.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removePredecessor,com.google.common.graph.DirectedGraphConnections:removePredecessor(java.lang.Object),427,451,"/**
 * Removes the predecessor of a node from the graph.
 * Updates predecessorCount and orderedNodeConnections if needed.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addPredecessor,"com.google.common.graph.DirectedGraphConnections:addPredecessor(java.lang.Object,java.lang.Object)",488,514,"/**
 * Adds a predecessor to the given node, updating counts and connections.
 * @param node The node to add a predecessor to.
 * @param unused Unused parameter.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,removeSuccessor,com.google.common.graph.DirectedGraphConnections:removeSuccessor(java.lang.Object),453,486,"/**
 * Removes the successor of a node and returns its value.
 * @param node The node to remove the successor from.
 * @return The removed successor value, or null if none.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,addSuccessor,"com.google.common.graph.DirectedGraphConnections:addSuccessor(java.lang.Object,java.lang.Object)",516,544,"/**
 * Adds a successor with a value to a node.
 * @param node the node to add the successor to
 * @param value the value of the successor
 * @return Previous successor value, or null if none existed
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,"com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder,java.util.Map,java.util.Map)",77,93,"/**
 * Constructs a StandardNetwork with provided configurations and data.
 * @param builder Network builder object.
 * @param nodeConnections Node connection map.
 * @param edgeToReferenceNode Edge to node reference map.
 */
","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node and edge maps.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,"com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder,java.util.Map,long)",68,81,"/**
 * Constructs a StandardValueGraph with given builder, connections, and edge count.
 */","* Constructs a graph with the properties specified in {@code builder}, initialized with the given
   * node map.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeEdge,com.google.common.graph.StandardMutableNetwork:removeEdge(java.lang.Object),146,164,"/**
 * Removes an edge from the network. Returns true if found.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeNode,com.google.common.graph.StandardMutableValueGraph:removeNode(java.lang.Object),119,158,"/**
 * Removes a node and its associated edges from the graph.
 * @param node The node to remove.
 * @return True if the node was removed successfully.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,"com.google.common.graph.StandardMutableValueGraph:removeEdge(java.lang.Object,java.lang.Object)",160,178,"/**
 * Removes an edge between two nodes.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return The previous value of the edge, or null if none.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedReferenceNode,com.google.common.graph.StandardNetwork:checkedReferenceNode(java.lang.Object),187,194,"/**
 * Retrieves the reference node for a given edge.
 * @param edge The edge to look up.
 * @return The reference node, or throws exception if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Funnels.java,readResolve,com.google.common.hash.Funnels$StringCharsetFunnel$SerializedForm:readResolve(),136,138,"/**
 * Reconstitutes the object from a serialized representation.
 * @return StringFunnel object initialized with charset.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,copy,"com.google.common.io.CharStreams:copy(java.lang.Readable,java.lang.Appendable)",68,92,"/**
 * Copies data from a Readable to an Appendable.
 * @param from Source of data.
 * @param to Destination for data.
 * @return Number of characters copied.
 */
","* Copies all characters between the {@link Readable} and {@link Appendable} objects. Does not
   * close or flush either object.
   *
   * @param from the object to read from
   * @param to the object to write to
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,decode,com.google.common.io.BaseEncoding:decode(java.lang.CharSequence),215,221,"/**
 * Decodes a CharSequence into a byte array.
 * Throws IllegalArgumentException on decoding errors.
 */
","* Decodes the specified character sequence, and returns the resulting {@code byte[]}. This is the
   * inverse operation to {@link #encode(byte[])}.
   *
   * @throws IllegalArgumentException if the input is not a valid encoded string according to this
   *     encoding.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,ceilingPowerOfTwo,com.google.common.math.BigIntegerMath:ceilingPowerOfTwo(java.math.BigInteger),56,58,"/**
 * Returns the smallest power of 2 >= x.
 * @param x The BigInteger to find the ceiling power of 2 for.
 * @return The ceiling power of 2 as a BigInteger.
 */
","* Returns the smallest power of two greater than or equal to {@code x}. This is equivalent to
   * {@code BigInteger.valueOf(2).pow(log2(x, CEILING))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,floorPowerOfTwo,com.google.common.math.BigIntegerMath:floorPowerOfTwo(java.math.BigInteger),67,69,"/**
* Returns the largest power of 2 less than or equal to x.
*/
","* Returns the largest power of two less than or equal to {@code x}. This is equivalent to {@code
   * BigInteger.valueOf(2).pow(log2(x, FLOOR))}.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,getInstance,com.google.common.collect.MutableClassToInstanceMap:getInstance(java.lang.Class),176,179,"/**
 * Retrieves an instance of the specified type.
 * @param type The class of the instance to retrieve.
 * @return An instance of the type, or null if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,of,"com.google.common.reflect.ClassPath$ResourceInfo:of(java.io.File,java.lang.String,java.lang.ClassLoader)",209,215,"/**
 * Creates a ResourceInfo based on file extension.
 * @param file The file.
 * @param resourceName Resource name.
 * @param loader Class loader.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Constructor),80,82,"/**
 * Creates an Invokable from a constructor.
 * @param constructor Constructor to create Invokable from
 * @return Invokable instance
 */
",Returns {@link Invokable} of {@code constructor}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,from,com.google.common.reflect.Invokable:from(java.lang.reflect.Method),75,77,"/**
 * Creates an Invokable from a given Method.
 * @param method The Method to wrap as an Invokable.
 * @return A new MethodInvokable instance.
 */
",Returns {@link Invokable} of {@code method}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,map,"com.google.common.reflect.TypeResolver$TypeMappingIntrospector:map(com.google.common.reflect.TypeResolver$TypeVariableKey,java.lang.reflect.Type)",416,437,"/**
* Maps a type variable to a type, handling cycles and precedence.
* @param var The type variable key.
* @param arg The type to map to.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractCatchingFuture.java,create,"com.google.common.util.concurrent.AbstractCatchingFuture:create(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",42,50,"/**
 * Creates a ListenableFuture that handles exceptions with a fallback.
 * @param input Future to wrap, exception type, fallback function, executor.
 * @return CatchingFuture that handles exceptions.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,complete,"com.google.common.util.concurrent.AbstractFuture:complete(com.google.common.util.concurrent.AbstractFuture,boolean)",710,772,"/**
 * Completes a future, executing listeners and handling delegation.
 * @param param The future to complete.
 * @param callInterruptTask Whether to call interruptTask.
 */",Unblocks all threads and runs all listeners.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractTransformFuture.java,create,"com.google.common.util.concurrent.AbstractTransformFuture:create(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",48,53,"/**
 * Creates a ListenableFuture that transforms values from another future.
 * @param input The input ListenableFuture.
 * @param function Transformation function.
 * @param executor Executor for asynchronous operations.
 * @return A new ListenableFuture with transformed values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,addAndGet,"com.google.common.util.concurrent.AtomicLongMap:addAndGet(java.lang.Object,long)",108,111,"/**
 * Adds the specified delta to the value associated with key.
 * @param key the key whose value is updated
 * @param delta the value to add
 * @return the new value associated with the key
 */
","* Adds {@code delta} to the value currently associated with {@code key}, and returns the new
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndAdd,"com.google.common.util.concurrent.AtomicLongMap:getAndAdd(java.lang.Object,long)",133,136,"/**
 * Atomically gets the current value and adds delta.
 * @param key The key associated with the value.
 * @param delta The value to add to the current value.
 * @return The previous value associated with the key.
 */
","* Adds {@code delta} to the value currently associated with {@code key}, and returns the old
   * value.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,putAll,com.google.common.util.concurrent.AtomicLongMap:putAll(java.util.Map),219,221,"/**
* Adds all entries from a map to this map.
* @param m the map whose entries are added
*/
","* Copies all of the mappings from the specified map to this map. The effect of this call is
   * equivalent to that of calling {@code put(k, v)} on this map once for each mapping from key
   * {@code k} to value {@code v} in the specified map. The behavior of this operation is undefined
   * if the specified map is modified while the operation is in progress.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FakeTimeLimiter.java,callUninterruptiblyWithTimeout,"com.google.common.util.concurrent.FakeTimeLimiter:callUninterruptiblyWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",73,79,"/**
 * Executes a Callable with a timeout, uninterruptibly.
 * @param callable Callable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit (e.g., SECONDS, MILLISECONDS)
 * @return Result of the Callable, or throws ExecutionException.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/TrustedListenableFutureTask.java,run,com.google.common.util.concurrent.TrustedListenableFutureTask:run(),76,87,"/**
 * Executes the task or nulls it.
 * Executes the assigned task if it exists, then clears the task.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.UndirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",102,107,"/**
 * Adds an in-edge to a node, skipping if it's a self-loop.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractBaseGraph:incidentEdgeOrder(),101,104,"/**
 * Returns an ElementOrder indicating incident edges are unordered.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableGraph:incidentEdgeOrder(),79,82,"/**
 * Returns a stable element order for incident edges.
 * Returns a stable order, preserving original insertion.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,incidentEdgeOrder,com.google.common.graph.ImmutableValueGraph:incidentEdgeOrder(),74,77,"/**
 * Returns a stable element order for incident edges.
 * Returns a stable order, preserving insertion order.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractGraphBuilder.java,<init>,com.google.common.graph.AbstractGraphBuilder:<init>(boolean),40,42,"/**
 * Constructs a new AbstractGraphBuilder with the given directed flag.
 * @param directed whether the graph is directed
 */
","* Creates a new instance with the specified edge directionality.
   *
   * @param directed if true, creates an instance for graphs whose edges are each directed; if
   *     false, creates an instance for graphs whose edges are each undirected.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListenerCallQueue.java,addListener,"com.google.common.util.concurrent.ListenerCallQueue:addListener(java.lang.Object,java.util.concurrent.Executor)",75,79,"/**
 * Adds a listener to be invoked via the provided executor.
 * @param listener The listener to add.
 * @param executor Executor for listener invocation.
 */
","* Adds a listener that will be called using the given executor when events are later {@link
   * #enqueue enqueued} and {@link #dispatch dispatched}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ConverterComposition:correctedDoForward(java.lang.Object),412,415,"/**
 * Correctly forwards the input to both chained objects.
 * @param a The input object to forward.
 * @return Corrected object or null if input is null.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ReverseConverter:correctedDoBackward(java.lang.Object),337,340,"/**
 * Delegates corrected backward operation to the original object.
 * @param a Input object of type A, may be null.
 * @return Result of type B, or null if original returns null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,convert,com.google.common.base.Converter:convert(java.lang.Object),196,198,"/**
 * Converts an A to a B using corrected forwarding.
 * @param a The input object of type A.
 * @return The converted object of type B, or null.
 */
","* Returns a representation of {@code a} as an instance of type {@code B}.
   *
   * @return the converted value; is null <i>if and only if</i> {@code a} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoBackward,com.google.common.base.Converter$ConverterComposition:correctedDoBackward(java.lang.Object),417,420,"/**
 * Correctly performs the backward operation on the given object.
 * @param c The object to operate on; may be null.
 * @return Corrected object or null if input is null.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,correctedDoForward,com.google.common.base.Converter$ReverseConverter:correctedDoForward(java.lang.Object),332,335,"/**
 * Delegates corrected forwarding to the original object's backward method.
 * @param b Input value; may be null.
 * @return Result of the backward method, or null if it returns null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(),240,242,"/**
 * Constructs a new CompactHashMap with the default initial size.
 */",Constructs a new empty instance of {@code CompactHashMap}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,<init>,com.google.common.collect.CompactHashMap:<init>(int),249,251,"/**
* Constructs a CompactHashMap with an expected size.
* @param expectedSize The initial capacity of the map.
*/
","* Constructs a new instance of {@code CompactHashMap} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,init,com.google.common.collect.CompactLinkedHashMap:init(int),115,120,"/**
 * Initializes the circular buffer with an expected size.
 * @param expectedSize The expected size of the buffer.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(),205,207,"/**
 * Constructs a new CompactHashSet with the default initial capacity.
 */",Constructs a new empty instance of {@code CompactHashSet}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,<init>,com.google.common.collect.CompactHashSet:<init>(int),214,216,"/**
 * Constructs a CompactHashSet with an expected size.
 * @param expectedSize The initial capacity estimate.
 */
","* Constructs a new instance of {@code CompactHashSet} with the specified capacity.
   *
   * @param expectedSize the initial capacity of this {@code CompactHashSet}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,init,com.google.common.collect.CompactLinkedHashSet:init(int),132,137,"/**
 * Initializes the circular buffer with an expected size.
 * @param expectedSize The expected number of elements.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$FastMatcher:negate(),970,973,"/**
 * Returns a negated version of this character matcher.
 * Creates a new NegatedFastMatcher wrapping the current matcher.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$AnyOf:negate(),373,376,"/**
 * Returns a CharMatcher that negates this matcher.
 * Creates a new Negated CharMatcher instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaLetter:negate(),373,376,"/**
 * Returns a CharMatcher that negates this matcher.
 * Returns a new Negated CharMatcher.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$JavaUpperCase:negate(),373,376,"/**
 * Returns a CharMatcher that negates this matcher.
 * Returns a new Negated CharMatcher.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$Or:negate(),373,376,"/**
 * Returns a CharMatcher that negates this matcher.
 * Returns a new Negated CharMatcher.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,negate,com.google.common.base.CharMatcher$RangesMatcher:negate(),373,376,"/**
 * Returns a CharMatcher that negates this matcher.
 * Returns a new Negated CharMatcher.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getSimpleName,com.google.common.reflect.ClassPath$ClassInfo:getSimpleName(),330,345,"/**
 * Extracts the simple name of a class, removing numeric prefixes.
 * Returns the class name after the package if it's a top-level class.
 */
","* Returns the simple name of the underlying class as given in the source code.
     *
     * <p>Behaves similarly to {@link Class#getSimpleName()} but does not require the class to be
     * loaded.
     *
     * <p>But note that this class uses heuristics to identify the simple name. See a related
     * discussion in <a href=""https://github.com/google/guava/issues/3349"">issue 3349</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,stats,com.google.common.cache.LocalCache$LocalManualCache:stats(),4907,4915,"/**
 * Returns cache statistics by aggregating segment and global stats.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomListMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",341,344,"/**
 * Constructs a CustomListMultimap from a map and a list factory.
 * @param map Initial map for the multimap.
 * @param factory Factory for creating new lists.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedSetMultimap:<init>(java.util.Map),47,49,"/**
 * Constructs a SortedSetMultimap from a Map.
 * @param map the map to initialize from
 */
","* Creates a new multimap that uses the provided map.
   *
   * @param map place to store the mapping from each key to its corresponding values",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",427,430,"/**
 * Constructs a CustomSetMultimap from a map and a set factory.
 * @param map initial map of keys to sets; @param factory creates sets
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newMultimap,"com.google.common.collect.Multimaps:newMultimap(java.util.Map,com.google.common.base.Supplier)",211,214,"/**
 * Creates a Multimap from a Map and a Collection factory.
 * @param map Initial map data.
 * @param factory Collection factory.
 * @return A new Multimap instance.
 */
","* Creates a new {@code Multimap} backed by {@code map}, whose internal value collections are
   * generated by {@code factory}. Most users should prefer {@link MultimapBuilder}, though a small
   * number of users will need this method to cover map or collection types that {@link
   * MultimapBuilder} does not support.
   *
   * <p><b>Warning: do not use</b> this method when the collections returned by {@code factory}
   * implement either {@link List} or {@code Set}! Use the more specific method {@link
   * #newListMultimap}, {@link #newSetMultimap} or {@link #newSortedSetMultimap} instead, to avoid
   * very surprising behavior from {@link Multimap#equals}.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the collections generated by
   * {@code factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()}, {@link
   * HashMultimap#create()}, {@link LinkedHashMultimap#create()}, {@link
   * LinkedListMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the collections
   * returned by {@code factory}. Those objects should not be manually updated and they should not
   * use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty collections that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(),39,41,"/**
 * Creates a new, empty HashMultiset.
 */","Creates a new, empty {@code HashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(),47,49,"/**
 * Creates a new LinkedHashMultiset.
 * Returns an empty multiset implementation.
 */
","Creates a new, empty {@code LinkedHashMultiset} using the default initial capacity.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,cellSpliterator,com.google.common.collect.ArrayTable:cellSpliterator(),559,563,"/**
 * Creates a spliterator for cells in the data structure.
 * Uses CollectSpliterators for indexed access.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,spliterator,com.google.common.collect.CompactHashMap$EntrySetView:spliterator(),818,825,"/**
 * Returns a Spliterator for the map's entries. Uses delegate if available.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableList:spliterator(),611,614,"/**
 * Returns a Spliterator for the elements in this collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,spliterator,com.google.common.collect.ImmutableSet$Indexed:spliterator(),343,346,"/**
 * Returns a Spliterator for the elements in this collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,spliterator,com.google.common.collect.IndexedImmutableSet:spliterator(),37,40,"/**
 * Returns a Spliterator for the elements in this collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumMultiset.java,create,"com.google.common.collect.EnumMultiset:create(java.lang.Iterable,java.lang.Class)",80,84,"/**
 * Creates an EnumMultiset from an iterable and enum type.
 * @param elements Iterable of enum elements to add.
 * @param type The enum type.
 * @return An EnumMultiset containing the elements.
 */
","* Returns a new {@code EnumMultiset} instance containing the given elements. Unlike {@link
   * EnumMultiset#create(Iterable)}, this method does not produce an exception on an empty iterable.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,<init>,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:<init>(),58,60,"/**
 * Initializes the CRC32cHasher with a 16-byte buffer.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,<init>,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:<init>(int),95,100,"/**
 * Initializes a Murmur3_128Hasher with the given seed value.
 * @param seed Initial seed for hash computation.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,<init>,"com.google.common.hash.SipHashFunction$SipHasher:<init>(int,int,long,long)",121,129,"/**
 * Initializes a SipHasher with custom constants.
 * @param c, d constants; k0, k1 initial hash keys.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,populationStandardDeviation,com.google.common.math.Stats:populationStandardDeviation(),317,319,"/**
 * Calculates the population standard deviation.
 * Returns the square root of the population variance.
 */
","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,sampleStandardDeviation,com.google.common.math.Stats:sampleStandardDeviation(),363,365,"/**
 * Calculates the sample standard deviation.
 * Returns the square root of the sample variance.
 */
","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,populationStandardDeviation,com.google.common.math.StatsAccumulator:populationStandardDeviation(),310,312,"/**
 * Calculates the population standard deviation.
 * Returns the square root of the population variance.
 */
","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values"">
   * population standard deviation</a> of the values. The count must be non-zero.
   *
   * <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
   * is not guaranteed to return zero when the dataset consists of the same value multiple times,
   * due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,sampleStandardDeviation,com.google.common.math.StatsAccumulator:sampleStandardDeviation(),356,358,"/**
 * Calculates the sample standard deviation.
 * Returns the square root of the sample variance.
 */
","* Returns the <a
   * href=""http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation"">
   * corrected sample standard deviation</a> of the values. If this dataset is a sample drawn from a
   * population, this is an estimator of the population standard deviation of the population which
   * is less biased than {@link #populationStandardDeviation()} (the unbiased estimator depends on
   * the distribution). The count must be greater than one.
   *
   * <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
   * times, due to numerical errors. However, it is guaranteed never to return a negative result.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,noneOf,com.google.common.base.CharMatcher:noneOf(java.lang.CharSequence),333,335,"/**
 * Returns a CharMatcher that rejects any char in the sequence.
 * @param sequence The sequence of characters to reject.
 * @return A CharMatcher rejecting chars in the sequence.
 */
","* Returns a {@code char} matcher that matches any BMP character not present in the given
   * character sequence. Returns a bogus matcher if the sequence contains supplementary characters.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,converterTo,com.google.common.base.CaseFormat:converterTo(com.google.common.base.CaseFormat),163,165,"/**
 * Creates a StringConverter for the specified target format.
 * @param targetFormat The CaseFormat to convert to.
 * @return A StringConverter instance.
 */
","* Returns a serializable {@code Converter} that converts strings from this format to {@code
   * targetFormat}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,doAndThen,com.google.common.base.Converter:doAndThen(com.google.common.base.Converter),381,383,"/**
 * Chains this converter with another, applying them sequentially.
 * @param secondConverter The converter to apply after this one.
 * @return A new ConverterComposition combining both converters.
 */
",Package-private non-final implementation of andThen() so only we can override it.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,reverse,com.google.common.base.Converter:reverse(),301,305,"/**
 * Returns a converter that reverses the conversion.
 * Returns cached converter if available, otherwise creates one.
 */
","* Returns the reversed view of this converter, which converts {@code this.convert(a)} back to a
   * value roughly equivalent to {@code a}.
   *
   * <p>The returned converter is serializable if {@code this} converter is.
   *
   * <p><b>Note:</b> you should not override this method. It is non-final for legacy reasons.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,stringConverter,com.google.common.base.Enums:stringConverter(java.lang.Class),105,107,"/**
 * Creates a StringConverter for the given enum class.
 * @param enumClass The enum class to convert from String.
 * @return A StringConverter instance.
 */
","* Returns a serializable converter that converts between strings and {@code enum} values of type
   * {@code enumClass} using {@link Enum#valueOf(Class, String)} and {@link Enum#name()}. The
   * converter will throw an {@code IllegalArgumentException} if the argument is not the name of any
   * enum constant in the specified enum.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,asConverter,com.google.common.collect.Maps:asConverter(com.google.common.collect.BiMap),1599,1601,"/**
 * Creates a Converter from a BiMap.
 * @param bimap The BiMap to use for conversion.
 * @return A Converter using the provided BiMap.
 */
","* Returns a {@link Converter} that converts values using {@link BiMap#get bimap.get()}, and whose
   * inverse view converts values using {@link BiMap#inverse bimap.inverse()}{@code .get()}.
   *
   * <p>To use a plain {@link Map} as a {@link Function}, see {@link
   * com.google.common.base.Functions#forMap(Map)} or {@link
   * com.google.common.base.Functions#forMap(Map, Object)}.
   *
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,drainValueReferenceQueue,com.google.common.collect.MapMakerInternalMap$Segment:drainValueReferenceQueue(java.lang.ref.ReferenceQueue),1386,1398,"/**
 * Drains the value reference queue, reclaiming values up to DRAIN_MAX.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardEquals,com.google.common.collect.ForwardingList:standardEquals(java.lang.Object),225,227,"/**
 * Compares this object to another using Lists.equalsImpl.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
","* A sensible definition of {@link #equals(Object)} in terms of {@link #size} and {@link
   * #iterator}. If you override either of those methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,equals,com.google.common.collect.ImmutableList:equals(java.lang.Object),706,709,"/**
 * Checks for equality using the Lists.equalsImpl method.
 * @param obj The object to compare to.
 * @return True if the lists are equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,create,com.google.common.collect.ConcurrentHashMultiset:create(java.lang.Iterable),104,108,"/**
 * Creates a ConcurrentHashMultiset from an iterable of elements.
 * @param elements iterable of elements to add to the multiset
 * @return ConcurrentHashMultiset containing the elements
 */
","* Creates a new {@code ConcurrentHashMultiset} containing the specified elements, using the
   * default initial capacity, load factor, and concurrency settings.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.Appendable,java.lang.Object[])",120,126,"/**
 * Appends object array to appendable.
 * @param appendable target appendable
 * @param parts object array to append
 * @return the appendable after appending
 */
","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code appendable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Iterable)",141,144,"/**
 * Appends an Iterable of parts to a StringBuilder.
 * @param builder StringBuilder to append to
 * @param parts Iterable of parts to append
 * @return The StringBuilder after appending.
 */
","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.util.Iterator),249,251,"/**
 * Joins elements from an iterator into a single string.
 */","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner$MapJoiner:join(java.util.Map),476,478,"/**
 * Joins map entries into a string representation.
 * @param map The map to join.
 * @return A string containing the map's entries.
 */
","* Returns a string containing the string representation of each entry of {@code map}, using the
     * previously configured separator and key-value separator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toString,com.google.common.cache.CacheBuilderSpec:toString(),236,239,"/**
 * Returns a string representation of the object.
 * Uses MoreObjects.toStringHelper for formatting.
 */
","* Returns a string representation for this CacheBuilderSpec instance. The form of this
   * representation is not guaranteed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,toString,com.google.common.eventbus.EventBus:toString(),269,272,"/**
 * Returns a string representation of the object.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,toString,com.google.common.util.concurrent.Futures$CallbackListener:toString(),1135,1138,"/**
 * Returns a string representation of the object using MoreObjects.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/DeadEvent.java,toString,com.google.common.eventbus.DeadEvent:toString(),66,69,"/**
 * Returns a string representation of the object.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,toString,com.google.common.graph.ElementOrder:toString(),179,186,"/**
 * Returns a string representation of the object.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,toString,com.google.common.util.concurrent.ClosingFuture:toString(),2113,2117,"/**
 * Returns a string representation of the object.
 * Uses toStringHelper for formatted output.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Predicates.java,toString,com.google.common.base.Predicates$ContainsPatternPredicate:toString(),763,771,"/**
 * Returns a string representation of this predicate.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,toString,com.google.common.collect.MapMaker:toString(),294,313,"/**
 * Returns a string representation of this object.
 * Includes initialCapacity, concurrencyLevel, key/value strengths.
 */","* Returns a string representation for this MapMaker instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,toString,com.google.common.cache.CacheBuilder:toString(),1076,1113,"/**
 * Returns a string representation of this cache configuration.
 */","* Returns a string representation for this CacheBuilder instance. The exact form of the returned
   * string is not specified.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheStats.java,toString,com.google.common.cache.CacheStats:toString(),293,303,"/**
 * Returns a string representation of the object's state.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap:<init>(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)",168,202,"/**
 * Initializes the map with provided builder and entry helper.
 * Sets concurrency level, segment count, and creates segments.
 */","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Optional.java,fromJavaUtil,com.google.common.base.Optional:fromJavaUtil(java.util.Optional),129,133,"/**
 * Converts a java.util.Optional to a Guava Optional.
 * @param javaUtilOptional The java.util.Optional to convert.
 * @return A Guava Optional or null if the input is null.
 */
","* Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code
   * java.util.Optional}, or {@code null} if the argument is null.
   *
   * @since 21.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,<init>,com.google.common.collect.FluentIterable$2:<init>(java.lang.Iterable),124,126,"/**
 * Initializes FluentIterable with the provided Iterable.
 * @param iterable The Iterable to delegate to.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,<init>,com.google.common.collect.Iterables$UnmodifiableIterable:<init>(java.lang.Iterable),101,103,"/**
 * Creates an UnmodifiableIterable from the given Iterable.
 * @param iterable The Iterable to wrap.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$ConcatenatedByteSource:sizeIfKnown(),696,723,"/**
 * Returns the total size of sources if known, or absent if not.
 * Accumulates sizes from sources; returns Long.MAX_VALUE on overflow.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sizeIfKnown,com.google.common.io.ByteSource$SlicedByteSource:sizeIfKnown(),544,553,"/**
 * Returns the size of the slice if known, otherwise absent.
 * Uses the size of the underlying ByteSource.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,lengthIfKnown,com.google.common.io.CharSource$ConcatenatedCharSource:lengthIfKnown(),710,721,"/**
 * Calculates the total length if known from all sources.
 * Returns Optional.of(totalLength) or Optional.absent() if any source has an unknown length.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,addPendingString,com.google.common.util.concurrent.AbstractFuture:addPendingString(java.lang.StringBuilder),893,934,"/**
 * Appends pending string information to the given StringBuilder.
 * @param builder StringBuilder to append the pending string to
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromParts,"com.google.common.net.HostAndPort:fromParts(java.lang.String,int)",133,138,"/**
 * Creates a HostAndPort from a host string and port number.
 * @param host The host string to parse.
 * @param port The port number.
 * @return A HostAndPort object.
 */
","* Build a HostAndPort instance from separate host and port values.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host string to parse. Must not contain a port number.
   * @param port a port number from [0..65535]
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number, or {@code port} is out
   *     of range.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostAndPort.java,fromHost,com.google.common.net.HostAndPort:fromHost(java.lang.String),151,155,"/**
 * Creates a HostAndPort from a host string, ensuring no port is present.
 * @param host The host string to parse.
 * @return A HostAndPort object representing the host.
 */
","* Build a HostAndPort instance from a host only.
   *
   * <p>Note: Non-bracketed IPv6 literals are allowed. Use {@link #requireBracketsForIPv6()} to
   * prohibit these.
   *
   * @param host the host-only string to parse. Must not contain a port number.
   * @return if parsing was successful, a populated HostAndPort object.
   * @throws IllegalArgumentException if {@code host} contains a port number.
   * @since 17.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,get,"com.google.common.collect.Iterables:get(java.lang.Iterable,int)",765,771,"/**
 * Retrieves element at position from iterable.
 * @param iterable source iterable
 * @param position index of element to retrieve
 * @return element at the specified position
 */
","* Returns the element at the specified position in an iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws
   * {@code NoSuchElementException} if out of bounds)
   *
   * @param position position of the element to return
   * @return the element at the specified position in {@code iterable}
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of {@code iterable}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,copy,com.google.common.hash.BloomFilter:copy(),148,150,"/**
 * Creates a copy of this BloomFilter with the same parameters.
 */
","* Creates a new {@code BloomFilter} that's a copy of this instance. The new instance is equal to
   * this instance but shares no mutable state.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,<init>,"com.google.common.graph.DirectedMultiNetworkConnections:<init>(java.util.Map,java.util.Map,int)",44,47,"/**
 * Constructs a DirectedMultiNetworkConnections with given edges and self-loop count.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,<init>,"com.google.common.graph.DirectedNetworkConnections:<init>(java.util.Map,java.util.Map,int)",37,39,"/**
 * Constructs a DirectedNetworkConnections object.
 * @param inEdgeMap Incoming edge map.
 * @param outEdgeMap Outgoing edge map.
 * @param selfLoopCount Self-loop count.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,removeInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:removeInEdge(java.lang.Object,boolean)",104,112,"/**
 * Removes an incoming edge and updates predecessor lists.
 * @param edge The edge to remove.
 * @param isSelfLoop True if the edge is a self-loop.
 * @return The removed node.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,of,com.google.common.graph.DirectedGraphConnections:of(com.google.common.graph.ElementOrder),155,176,"/**
 * Creates a DirectedGraphConnections object based on the given order type.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,addInEdge,"com.google.common.graph.DirectedMultiNetworkConnections:addInEdge(java.lang.Object,java.lang.Object,boolean)",124,131,"/**
 * Adds an in-edge and updates the predecessors multiset.
 * @param edge The edge being added.
 * @param node The node the edge points to.
 * @param isSelfLoop Whether the edge is a self-loop.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(int),302,307,"/**
 * Acquires a given number of permits, waits if necessary.
 * @param permits number of permits to acquire
 * @return Time in seconds spent waiting for permits.
 */
","* Acquires the given number of permits from this {@code RateLimiter}, blocking until the request
   * can be granted. Tells the amount of time slept, if any.
   *
   * @param permits the number of permits to acquire
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(java.time.Duration),334,336,"/**
 * Attempts to acquire the lock with a timeout.
 * @param timeout Duration to wait for lock acquisition.
 * @return True if lock acquired, false otherwise.
 */
","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(long,java.util.concurrent.TimeUnit)",350,353,"/**
 * Attempts to acquire a permit, waiting up to timeout.
 * @param timeout Acquisition timeout.
 * @param unit Time unit of the timeout parameter.
 * @return True if acquired, false if timeout expires.
 */
","* Acquires a permit from this {@code RateLimiter} if it can be obtained without exceeding the
   * specified {@code timeout}, or returns {@code false} immediately (without waiting) if the permit
   * would not have been granted before the timeout expired.
   *
   * <p>This method is equivalent to {@code tryAcquire(1, timeout, unit)}.
   *
   * @param timeout the maximum time to wait for the permit. Negative values are treated as zero.
   * @param unit the time unit of the timeout argument
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(int),365,367,"/**
 * Attempts to acquire the specified number of permits.
 * @param permits the number of permits to acquire
 * @return true if acquired, false otherwise
 */
","* Acquires permits from this {@link RateLimiter} if it can be acquired immediately without delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(permits, 0, anyUnit)}.
   *
   * @param permits the number of permits to acquire
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,com.google.common.util.concurrent.RateLimiter:tryAcquire(),378,380,"/**
 * Attempts to acquire the lock.
 * @return True if the lock was acquired, false otherwise.
 */
","* Acquires a permit from this {@link RateLimiter} if it can be acquired immediately without
   * delay.
   *
   * <p>This method is equivalent to {@code tryAcquire(1)}.
   *
   * @return {@code true} if the permit was acquired, {@code false} otherwise
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,tryAcquire,"com.google.common.util.concurrent.RateLimiter:tryAcquire(int,java.time.Duration)",393,395,"/**
 * Attempts to acquire the specified number of permits within the timeout.
 * @param permits Number of permits to acquire.
 * @param timeout Duration to wait for permits.
 * @return True if permits were acquired, false otherwise.
 */
","* Acquires the given number of permits from this {@code RateLimiter} if it can be obtained
   * without exceeding the specified {@code timeout}, or returns {@code false} immediately (without
   * waiting) if the permits would not have been granted before the timeout expired.
   *
   * @param permits the number of permits to acquire
   * @param timeout the maximum time to wait for the permits. Negative values are treated as zero.
   * @return {@code true} if the permits were acquired, {@code false} otherwise
   * @throws IllegalArgumentException if the requested number of permits is negative or zero
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,"com.google.common.util.concurrent.Monitor:enter(long,java.util.concurrent.TimeUnit)",400,423,"/**
 * Attempts to acquire the lock, waiting for a specified duration.
 * @param time Time to wait in the given unit.
 * @param unit TimeUnit of the given time.
 * @return True if the lock was acquired, false otherwise.
 */
","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,<init>,com.google.common.util.concurrent.AbstractService:<init>(),195,195,"/**
 * Protected constructor to prevent direct instantiation.
 */
",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,isIntact,com.google.common.collect.MinMaxPriorityQueue:isIntact(),503,511,"/**
 * Checks if the heap is intact by verifying all indices.
 */
","* Returns {@code true} if the MinMax heap structure holds. This is only used in testing.
   *
   * <p>TODO(kevinb): move to the test class?",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,toCacheBuilder,com.google.common.cache.CacheBuilderSpec:toCacheBuilder(),172,221,"/**
 * Creates a CacheBuilder with configured options.
 * @return CacheBuilder instance with specified settings.
 */
",Returns a CacheBuilder configured according to this instance's specification.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,build,com.google.common.collect.Interners$InternerBuilder:build(),85,90,"/**
 * Builds and returns an Interner instance.
 * Uses weak keys if strong is false.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,tryWeakKeys,com.google.common.collect.Platform:tryWeakKeys(com.google.common.collect.MapMaker),135,138,"/**
 * Returns a MapMaker configured with weak keys.
 * @param mapMaker The MapMaker instance to configure.
 * @return A new MapMaker with weak keys enabled.
 */
","* Configures the given map maker to use weak keys, if possible; does nothing otherwise (i.e., in
   * GWT). This is sometimes acceptable, when only server-side code could generate enough volume
   * that reclamation becomes important.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,checkCurrentState,com.google.common.util.concurrent.AbstractService:checkCurrentState(com.google.common.util.concurrent.Service$State),379,392,"/**
 * Checks if the current service state matches the expected state.
 * Throws IllegalStateException if states don't match.
 */
",Checks that the current state is equal to the expected state.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getEntry,com.google.common.collect.ArrayTable$ArrayMap:getEntry(int),224,244,"/**
 * Returns an entry for the specified index.
 * @param index index of the entry
 * @return Entry object for the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,at,"com.google.common.collect.ArrayTable:at(int,int)",327,332,"/**
 * Retrieves the value at the specified row and column.
 * @param rowIndex Row index.
 * @param columnIndex Column index.
 * @return Value at the specified indices.
 */
","* Returns the value corresponding to the specified row and column indices. The same value is
   * returned by {@code get(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex))}, but this
   * method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @return the value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,set,"com.google.common.collect.ArrayTable:set(int,int,java.lang.Object)",347,355,"/**
 * Sets the element at the given row and column.
 * @param rowIndex row index
 * @param columnIndex column index
 * @param value new value, can be null
 * @return The previous value at the specified position
 */
","* Associates {@code value} with the specified row and column indices. The logic {@code
   * put(rowKeyList().get(rowIndex), columnKeyList().get(columnIndex), value)} has the same
   * behavior, but this method runs more quickly.
   *
   * @param rowIndex position of the row key in {@link #rowKeyList()}
   * @param columnIndex position of the row key in {@link #columnKeyList()}
   * @param value value to store in the table
   * @return the previous value with the specified row and column
   * @throws IndexOutOfBoundsException if either index is negative, {@code rowIndex} is greater than
   *     or equal to the number of allowed row keys, or {@code columnIndex} is greater than or equal
   *     to the number of allowed column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList$1:get(int),115,146,"/**
 * Returns a new ImmutableList view of elements at the specified index.
 * @param index the index of the elements to view
 * @return ImmutableList view of elements at the index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,get,com.google.common.collect.CartesianList:get(int),115,146,"/**
 * Returns an immutable list view of elements at the specified index.
 * @param index the index of the elements to view
 * @return ImmutableList containing elements at the index.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$ReverseImmutableList:get(int),680,684,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,get,com.google.common.collect.ImmutableList$SubList:get(int),490,494,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$CharSequenceAsList:get(int),824,828,"/**
 * Retrieves the character at the specified index.
 * @param index index of the character to retrieve
 * @return character at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverseIndex,com.google.common.collect.Lists$ReverseList:reverseIndex(int),874,878,"/**
 * Calculates the reversed index within the list.
 * @param index The index to reverse.
 * @return The reversed index.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$StringAsImmutableList:get(int),796,800,"/**
 * Returns the character at the specified index in the string.
 * @param index the index of the character to return
 * @return the character at the specified index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,get,com.google.common.collect.SingletonImmutableList:get(int),44,48,"/**
 * Returns the single element stored in this list.
 * @param index Index - always checked to be 0.
 * @return The element stored in the list.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,get,com.google.common.primitives.Booleans$BooleanArrayAsList:get(int),415,419,"/**
 * Returns the element at the specified index.
 * @param index The index of the element to retrieve.
 * @return The element at the given index.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,set,"com.google.common.primitives.Booleans$BooleanArrayAsList:set(int,java.lang.Boolean)",452,459,"/**
 * Sets the element at the specified index to the given Boolean.
 * @param index index of the element to set
 * @param element the Boolean element to set
 * @return the previous element at the index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,get,com.google.common.primitives.Bytes$ByteArrayAsList:get(int),282,286,"/**
 * Returns the element at the specified index.
 * @param index the index of the element to return
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,set,"com.google.common.primitives.Bytes$ByteArrayAsList:set(int,java.lang.Byte)",318,325,"/**
 * Sets the element at the specified index to the given value.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous value at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,get,com.google.common.primitives.Chars$CharArrayAsList:get(int),602,606,"/**
 * Returns the element at the specified index in the list.
 * @param index the index of the element to retrieve
 * @return the element at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,set,"com.google.common.primitives.Chars$CharArrayAsList:set(int,java.lang.Character)",639,646,"/**
 * Sets the element at the specified index to the given element.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous element at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,get,com.google.common.primitives.Doubles$DoubleArrayAsList:get(int),610,614,"/**
 * Returns the element at the specified index.
 * @param index the index of the element to return
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,set,"com.google.common.primitives.Doubles$DoubleArrayAsList:set(int,java.lang.Double)",652,659,"/**
 * Sets the element at the specified index to the given element.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous element at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,get,com.google.common.primitives.Floats$FloatArrayAsList:get(int),604,608,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,set,"com.google.common.primitives.Floats$FloatArrayAsList:set(int,java.lang.Float)",640,647,"/**
 * Sets the element at the specified index to the given value.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous value at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray:get(int),380,383,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
","* Returns the {@code double} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray:get(int),377,380,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
","* Returns the {@code int} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray:get(int),379,382,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
","* Returns the {@code long} value present at the given index.
   *
   * @throws IndexOutOfBoundsException if {@code index} is negative, or greater than or equal to
   *     {@link #length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,get,com.google.common.primitives.Ints$IntArrayAsList:get(int),692,696,"/**
 * Returns the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,set,"com.google.common.primitives.Ints$IntArrayAsList:set(int,java.lang.Integer)",733,740,"/**
 * Sets the element at the specified index to the given element.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous element at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,get,com.google.common.primitives.Longs$LongArrayAsList:get(int),744,748,"/**
 * Returns the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,set,"com.google.common.primitives.Longs$LongArrayAsList:set(int,java.lang.Long)",785,792,"/**
 * Sets the element at the specified index to the given element.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous element at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,get,com.google.common.primitives.Shorts$ShortArrayAsList:get(int),653,657,"/**
 * Returns the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,set,"com.google.common.primitives.Shorts$ShortArrayAsList:set(int,java.lang.Short)",689,696,"/**
 * Sets the element at the specified index to the given element.
 * @param index index of the element to set
 * @param element the element to set at the specified index
 * @return the previous element at the specified index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$LargeLazyStriped:getAt(int),487,499,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the index, or a newly created one.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,getAt,com.google.common.util.concurrent.Striped$SmallLazyStriped:getAt(int),416,438,"/**
 * Retrieves the element at the given index.
 * @param index index of the element to retrieve
 * @return The element at the specified index.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$Any:indexIn(java.lang.CharSequence,int)",1051,1056,"/**
 * Returns the index of the CharSequence, or -1 if out of bounds.
 * @param sequence CharSequence to check.
 * @param start Start index.
 * @return Index or -1 if out of bounds.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher$None:indexIn(java.lang.CharSequence,int)",1149,1154,"/**
 * Returns the index of this string within a sequence, or -1.
 * @param sequence CharSequence to search within
 * @param start Start index for the search
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,"com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence,int)",563,572,"/**
 * Returns the index of the first match in the sequence, or -1.
 * @param sequence CharSequence to search.
 * @param start Start index (inclusive).
 */
","* Returns the index of the first matching BMP character in a character sequence, starting from a
   * given position, or {@code -1} if no character matches after that position.
   *
   * <p>The default implementation iterates over the sequence in forward order, beginning at {@code
   * start}, calling {@link #matches} for each character.
   *
   * @param sequence the character sequence to examine
   * @param start the first index to examine; must be nonnegative and no greater than {@code
   *     sequence.length()}
   * @return the index of the first matching character, guaranteed to be no less than {@code start},
   *     or {@code -1} if no character matches
   * @throws IndexOutOfBoundsException if start is negative or greater than {@code
   *     sequence.length()}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,"com.google.common.collect.AbstractIndexedListIterator:<init>(int,int)",64,68,"/**
 * Constructs an AbstractIndexedListIterator with initial size and position.
 * @param size The number of elements in the list.
 * @param position The initial position of the iterator.
 */
","* Constructs an iterator across a sequence of the given size with the given initial position.
   * That is, the first call to {@link #nextIndex()} will return {@code position}, and the first
   * call to {@link #next()} will return the element at that index, if available. Calls to {@link
   * #previous()} can retrieve the preceding {@code position} elements.
   *
   * @throws IndexOutOfBoundsException if {@code position} is negative or is greater than {@code
   *     size}
   * @throws IllegalArgumentException if {@code size} is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(int,java.lang.Object)",153,157,"/**
 * Inserts the specified element at the specified index.
 * @param index index at which to insert the element
 * @param element element to be inserted
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,"com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(int,java.util.Collection)",165,171,"/**
 * Adds all elements from a collection at the specified index.
 * @param index index to insert elements; must be valid.
 * @param elements collection of elements to add.
 * @throws IllegalArgumentException if index is out of bounds.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reversePosition,com.google.common.collect.Lists$ReverseList:reversePosition(int),880,884,"/**
 * Calculates the reversed position of an index within the list.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,newDataInput,"com.google.common.io.ByteStreams:newDataInput(byte[],int)",316,320,"/**
 * Creates a ByteArrayDataInput from bytes, starting at a given index.
 * @param bytes The byte array.
 * @param start The starting index.
 */
","* Returns a new {@link ByteArrayDataInput} instance to read from the {@code bytes} array,
   * starting at the given position.
   *
   * @throws IndexOutOfBoundsException if {@code start} is negative or greater than the length of
   *     the array",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,"com.google.common.base.Utf8:isWellFormed(byte[],int,int)",123,133,"/**
 * Checks if the byte array segment is well-formed (ASCII).
 * @param bytes The byte array to check.
 * @param off Start index.
 * @param len Length of the segment.
 */
","* Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by
   * {@link #isWellFormed(byte[])}. Note that this can be false even when {@code
   * isWellFormed(bytes)} is true.
   *
   * @param bytes the input buffer
   * @param off the offset in the buffer of the first byte to read
   * @param len the number of bytes to read from the buffer",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,toArrayImpl,"com.google.common.collect.ObjectArrays:toArrayImpl(java.lang.Object[],int,int,java.lang.Object[])",155,166,"/**
 * Copies elements from src to dst array.
 * @param src Source array, offset, len, and destination array.
 * @param <T> Type of the destination array.
 * @return Destination array containing copied elements.
 */
","* Implementation of {@link Collection#toArray(Object[])} for collections backed by an object
   * array. the runtime type of the returned array is that of the specified array. If the collection
   * fits in the specified array, it is returned therein. Otherwise, a new array is allocated with
   * the runtime type of the specified array and the size of the specified collection.
   *
   * <p>If the collection fits in the specified array with room to spare (i.e., the array has more
   * elements than the collection), the element in the array immediately following the end of the
   * collection is set to {@code null}. This is useful in determining the length of the collection
   * <i>only</i> if the caller knows that the collection does not contain any null elements.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ObjectArrays.java,copyAsObjectArray,"com.google.common.collect.ObjectArrays:copyAsObjectArray(java.lang.Object[],int,int)",188,196,"/**
 * Copies a portion of an array to a new Object array.
 * @param elements source array, offset, length
 * @return New Object array containing copied elements.
 */
","* Returns a copy of the specified subrange of the specified array that is literally an Object[],
   * and not e.g. a {@code String[]}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableList.java,subList,"com.google.common.collect.SingletonImmutableList:subList(int,int)",65,69,"/**
 * Returns a sublist of this list, or an empty list if fromIndex == toIndex.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractByteHasher.java,putBytes,"com.google.common.hash.AbstractByteHasher:putBytes(byte[],int,int)",90,96,"/**
 * Updates the hasher with bytes from a given array.
 * @param bytes bytes to hash
 * @param off start index in bytes
 * @param len number of bytes to hash
 * @return this Hasher instance
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,"com.google.common.hash.AbstractHasher:putBytes(byte[],int,int)",69,77,"/**
 * Adds bytes to the hasher.
 * @param bytes the bytes to add
 * @param off the start offset
 * @param len the number of bytes to add
 * @return this
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,writeBytesTo,"com.google.common.hash.HashCode:writeBytesTo(byte[],int,int)",83,89,"/**
 * Writes bytes to a destination array.
 * @param dest Destination array.
 * @param offset Start offset in the array.
 * @param maxLength Maximum number of bytes to write.
 * @return Number of bytes written.
 */
","* Copies bytes from this hash code into {@code dest}.
   *
   * @param dest the byte array into which the hash code will be written
   * @param offset the start offset in the data
   * @param maxLength the maximum number of bytes to write
   * @return the number of bytes written to {@code dest}
   * @throws IndexOutOfBoundsException if there is not enough room in {@code dest}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putBytes,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putBytes(byte[],int,int)",302,314,"/**
 * Adds byte data to the hasher.
 * @param bytes byte array to add
 * @param off offset in the array
 * @param len number of bytes to add
 * @return hasher instance
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base16Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",967,976,"/**
 * Encodes bytes to an Appendable, appending two characters per byte.
 * @param target The target Appendable to write to.
 * @param bytes The byte array to encode.
 * @param off Start offset in the byte array.
 * @param len Number of bytes to encode.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$Base64Encoding:encodeTo(java.lang.Appendable,byte[],int,int)",1008,1023,"/**
* Encodes byte array to an Appendable, handling partial chunks.
* @param target target Appendable
* @param bytes byte array to encode
* @param off start offset in the byte array
* @param len number of bytes to encode
* @throws IOException if an I/O error occurs
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeChunkTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeChunkTo(java.lang.Appendable,byte[],int,int)",692,715,"/**
 * Encodes a byte chunk to an Appendable, using the alphabet.
 * @param target Target Appendable to write encoded data.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,"com.google.common.io.BaseEncoding:encode(byte[],int,int)",154,163,"/**
 * Encodes a byte array to a String.
 * @param bytes bytes to encode
 * @param off start offset in bytes
 * @param len number of bytes to encode
 * @return encoded String
 */
","* Encodes the specified range of the specified byte array, and returns the encoded {@code
   * String}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,read,"com.google.common.io.ByteStreams:read(java.io.InputStream,byte[],int,int)",935,954,"/**
 * Reads up to len bytes from the input stream into the byte array.
 * @param in Input stream to read from.
 * @param b Byte array to read into.
 * @param off Offset into the byte array.
 * @param len Maximum number of bytes to read.
 * @return Actual number of bytes read.
 */
","* Reads some bytes from an input stream and stores them into the buffer array {@code b}. This
   * method blocks until {@code len} bytes of input data have been read into the array, or end of
   * file is detected. The number of bytes read is returned, possibly zero. Does not close the
   * stream.
   *
   * <p>A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
   * calls on the same stream will return zero.
   *
   * <p>If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative,
   * or {@code len} is negative, or {@code off+len} is greater than the length of the array {@code
   * b}, then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes
   * are read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one
   * into {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
   *
   * @param in the input stream to read from
   * @param b the buffer into which the data is read
   * @param off an int specifying the offset into the data
   * @param len an int specifying the number of bytes to read
   * @return the number of bytes read
   * @throws IOException if an I/O error occurs
   * @throws IndexOutOfBoundsException if {@code off} is negative, if {@code len} is negative, or if
   *     {@code off + len} is greater than {@code b.length}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSequenceReader.java,read,"com.google.common.io.CharSequenceReader:read(char[],int,int)",99,112,"/**
 * Reads characters into the buffer.
 * @param cbuf buffer to fill, @param off offset, @param len length
 * @return number of characters read, or -1 if no more data
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(char[],int,int)",295,298,"/**
 * Writes characters to the buffer, performing bounds checks.
 * @param cbuf The character buffer.
 * @param off The offset within the buffer.
 * @param len The number of characters to write.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,write,"com.google.common.io.CharStreams$NullWriter:write(java.lang.String,int,int)",305,308,"/**
 * Writes a portion of the string to the output stream.
 * @param str string to write
 * @param off start offset in the string
 * @param len number of characters to write
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,append,"com.google.common.io.CharStreams$NullWriter:append(java.lang.CharSequence,int,int)",315,319,"/**
 * Appends a character sequence to the writer, checking index bounds.
 * @param csq The sequence to append.
 * @param start Start index in the sequence.
 * @param end End index in the sequence (exclusive).
 * @return This writer.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,subList,"com.google.common.primitives.Booleans$BooleanArrayAsList:subList(int,int)",461,469,"/**
 * Returns a view of the Boolean array as a subList.
 * @param fromIndex start index (inclusive)
 * @param toIndex   end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,"com.google.common.primitives.Booleans:reverse(boolean[],int,int)",554,562,"/**
 * Reverses the portion of array between fromIndex and toIndex (exclusive).
 * @param array array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,subList,"com.google.common.primitives.Bytes$ByteArrayAsList:subList(int,int)",327,335,"/**
 * Returns a view of the byte array as a list from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,"com.google.common.primitives.Bytes:reverse(byte[],int,int)",405,413,"/**
 * Reverses the portion of the array between fromIndex and toIndex.
 * @param array array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,subList,"com.google.common.primitives.Chars$CharArrayAsList:subList(int,int)",648,656,"/**
 * Returns a sublist of characters from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex   end index (exclusive)
 * @return Sublist of characters
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,"com.google.common.primitives.Chars:reverse(char[],int,int)",495,503,"/**
 * Reverses the portion of the array between fromIndex and toIndex.
 * @param array the array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,subList,"com.google.common.primitives.Doubles$DoubleArrayAsList:subList(int,int)",661,669,"/**
 * Returns a view of the list from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,"com.google.common.primitives.Doubles:reverse(double[],int,int)",469,477,"/**
 * Reverses the portion of the array between fromIndex and toIndex.
 * @param array array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,subList,"com.google.common.primitives.Floats$FloatArrayAsList:subList(int,int)",649,657,"/**
 * Returns a view of the list from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,"com.google.common.primitives.Floats:reverse(float[],int,int)",466,474,"/**
 * Reverses the portion of the array between fromIndex and toIndex.
 * @param array array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subArray,"com.google.common.primitives.ImmutableDoubleArray:subArray(int,int)",454,459,"/**
 * Returns a new array containing elements from startIndex to endIndex.
 * @param startIndex start index (inclusive)
 * @param endIndex end index (exclusive)
 * @return Subarray of elements
 */
","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subArray,"com.google.common.primitives.ImmutableIntArray:subArray(int,int)",449,454,"/**
 * Returns a new IntArray containing elements from startIndex to endIndex.
 * @param startIndex start index (inclusive)
 * @param endIndex end index (exclusive)
 */
","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subArray,"com.google.common.primitives.ImmutableLongArray:subArray(int,int)",451,456,"/**
 * Returns a new LongArray containing elements from startIndex to endIndex.
 * @param startIndex start index (inclusive)
 * @param endIndex end index (exclusive)
 * @return new LongArray sub-array
 */
","* Returns a new immutable array containing the values in the specified range.
   *
   * <p><b>Performance note:</b> The returned array has the same full memory footprint as this one
   * does (no actual copying is performed). To reduce memory usage, use {@code subArray(start,
   * end).trimmed()}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,subList,"com.google.common.primitives.Ints$IntArrayAsList:subList(int,int)",742,750,"/**
 * Returns a view of the list between fromIndex and toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,"com.google.common.primitives.Ints:reverse(int[],int,int)",528,536,"/**
 * Reverses the portion of the array from fromIndex to toIndex.
 * @param array array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,subList,"com.google.common.primitives.Longs$LongArrayAsList:subList(int,int)",794,802,"/**
 * Returns a view of the list from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,"com.google.common.primitives.Longs:reverse(long[],int,int)",606,614,"/**
 * Reverses the portion of the array from fromIndex to toIndex (exclusive).
 * @param array array to reverse
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array).subList(fromIndex, toIndex))}, but is likely to be more
   * efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,subList,"com.google.common.primitives.Shorts$ShortArrayAsList:subList(int,int)",698,706,"/**
 * Returns a view of the list between fromIndex and toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,"com.google.common.primitives.Shorts:reverse(short[],int,int)",518,526,"/**
 * Reverses the portion of the array between fromIndex and toIndex.
 * @param array array to reverse
 * @param fromIndex starting index (inclusive)
 * @param toIndex ending index (exclusive)
 */
","* Reverses the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array).subList(fromIndex, toIndex))}, but is likely to be
   * more efficient.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,"com.google.common.primitives.UnsignedBytes:sort(byte[],int,int)",527,537,"/**
 * Sorts a portion of a byte array using flip and sort.
 * @param array Array to sort.
 * @param fromIndex Start index (inclusive).
 * @param toIndex End index (exclusive).
 */
","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned bytes.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,"com.google.common.primitives.UnsignedBytes:sortDescending(byte[],int,int)",556,566,"/**
 * Sorts a portion of the byte array in descending order.
 * @param array Array to sort, fromIndex and toIndex define the range.
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 8-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,"com.google.common.primitives.UnsignedInts:sort(int[],int,int)",235,245,"/**
 * Sorts a portion of the array using flip and sort.
 * @param array array to sort, fromIndex and toIndex define range.
 */
","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,"com.google.common.primitives.UnsignedInts:sortDescending(int[],int,int)",264,274,"/**
 * Sorts a portion of the array in descending order.
 * @param array the array to sort
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,"com.google.common.primitives.UnsignedLongs:sort(long[],int,int)",199,209,"/**
 * Sorts a portion of the array in ascending order.
 * @param array array to sort
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Sorts the array between {@code fromIndex} inclusive and {@code toIndex} exclusive, treating its
   * elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,"com.google.common.primitives.UnsignedLongs:sortDescending(long[],int,int)",228,238,"/**
 * Sorts a portion of the array in descending order.
 * @param array array to sort, fromIndex and toIndex define the range.
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order, interpreting them as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Column$Values:remove(java.lang.Object),648,651,"/**
 * Removes the specified object from the column if present.
 * @param obj The object to remove; null is treated as no-op.
 * @return True if an element was removed, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,filterUpperBounds,com.google.common.reflect.Types:filterUpperBounds(java.lang.Iterable),521,523,"/**
 * Filters out bounds that are equal to Object.class.
 * @param bounds Iterable of Type objects to filter.
 * @return Filtered Iterable of Type objects.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,filter,"com.google.common.collect.Collections2:filter(java.util.Collection,com.google.common.base.Predicate)",85,94,"/**
 * Filters a collection based on a predicate.
 * @param unfiltered Collection to filter.
 * @param predicate Predicate to apply to each element.
 * @return A filtered collection.
 */
","* Returns the elements of {@code unfiltered} that satisfy a predicate. The returned collection is
   * a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting collection's iterator does not support {@code remove()}, but all other
   * collection methods are supported. When given an element that doesn't satisfy the predicate, the
   * collection's {@code add()} and {@code addAll()} methods throw an {@link
   * IllegalArgumentException}. When methods such as {@code removeAll()} and {@code clear()} are
   * called on the filtered collection, only elements that satisfy the filter will be removed from
   * the underlying collection.
   *
   * <p>The returned collection isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered collection's methods, such as {@code size()}, iterate across every
   * element in the underlying collection and determine which elements satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered,
   * predicate)} and use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * <p><b>{@code Stream} equivalent:</b> {@link java.util.stream.Stream#filter Stream.filter}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeys,com.google.common.collect.FilteredKeyMultimap:createKeys(),222,225,"/**
 * Creates a Multiset of keys filtered by the keyPredicate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(char),126,128,"/**
 * Creates a Splitter that uses the given character as a separator.
 * @param separator The character to use for splitting strings.
 * @return A Splitter instance.
 */
","* Returns a splitter that uses the given single-character separator. For example, {@code
   * Splitter.on(',').split(""foo,,bar"")} returns an iterable containing {@code [""foo"", """", ""bar""]}.
   *
   * @param separator the character to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3500,3502,"/**
 * Constructs a LoadingValueReference with an optional old value.
 * @param oldValue The previous value, or null to unset.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,<init>,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch$1:<init>(),463,463,"/**
 * Default constructor for SleepingStopwatch. No-op.
 */
",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,<init>,"com.google.common.base.internal.Finalizer:<init>(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",126,136,"/**
 * Constructs a Finalizer with queue, class, and reference.
 * @param finalizableReferenceClass Class to finalize
 * @param queue Reference queue
 * @param frqReference PhantomReference
 */
",Constructs a new finalizer thread.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,<init>,com.google.common.collect.ImmutableListMultimap$Builder:<init>(),234,234,"/**
 * Default constructor for the Builder class.
 */
","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableListMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,builder,com.google.common.collect.ImmutableMultimap:builder(),129,131,"/**
 * Creates a new builder instance for constructing objects.
 * @return A new Builder object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,com.google.common.collect.ImmutableSetMultimap$Builder:<init>(),262,262,"/**
 * Default constructor for the Builder class.
 */
","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSetMultimap#builder}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingLoadingCache.java,<init>,com.google.common.cache.ForwardingLoadingCache$SimpleForwardingLoadingCache:<init>(com.google.common.cache.LoadingCache),82,84,"/**
 * Constructs a SimpleForwardingLoadingCache with the given delegate.
 * @param delegate The LoadingCache to forward to.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ManualSerializationProxy:<init>(com.google.common.cache.LocalCache),4690,4704,"/**
 * Constructs a ManualSerializationProxy using LocalCache parameters.
 * @param cache The LocalCache whose parameters are used.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:<init>(java.lang.Object),143,145,"/**
 * Sets the key for the list.
 * @param key The key to be set. Can be null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,<init>,com.google.common.collect.ForwardingSortedMultiset:<init>(),49,49,"/**
* Default constructor for ForwardingSortedMultiset.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,<init>,com.google.common.collect.Multisets$UnmodifiableMultiset:<init>(com.google.common.collect.Multiset),134,136,"/**
* Initializes the UnmodifiableMultiset with the given delegate.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,<init>,com.google.common.collect.EvictingQueue:<init>(int),54,58,"/**
 * Constructs a new EvictingQueue with a specified maximum size.
 * @param maxSize The maximum number of elements the queue can hold.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingDeque.java,<init>,com.google.common.collect.ForwardingDeque:<init>(),49,49,"/**
 * Protected constructor for ForwardingDeque. Default implementation.
 */",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingQueue.java,<init>,com.google.common.util.concurrent.ForwardingBlockingQueue:<init>(),46,46,"/**
* Default constructor for ForwardingBlockingQueue.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,<init>,com.google.common.collect.FilteredKeyMultimap$AddRejectingSet:<init>(java.lang.Object),118,120,"/**
* Sets the key for this AddRejectingSet.
* @param key The key to set. Can be null.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,<init>,com.google.common.collect.ForwardingSortedSet:<init>(),65,65,"/**
* Default constructor for ForwardingSortedSet. No-op.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableEntrySet:<init>(java.util.Set),1572,1574,"/**
 * Constructs an unmodifiable entry set from the given set of entries.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$AbstractSerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2822,2835,"/**
 * Constructs an AbstractSerializationProxy with provided parameters.
 * @param delegate The ConcurrentMap to be wrapped.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableMap.java,<init>,com.google.common.collect.ForwardingNavigableMap:<init>(),61,61,"/**
* Protected constructor for creating a ForwardingNavigableMap.
*/
",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap),3455,3457,"/**
* Constructs an UnmodifiableNavigableMap with the given delegate map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$UnmodifiableNavigableMap:<init>(java.util.NavigableMap,com.google.common.collect.Maps$UnmodifiableNavigableMap)",3459,3463,"/**
 * Constructs an UnmodifiableNavigableMap with delegate and descending map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,inverse,com.google.common.collect.Maps$UnmodifiableBiMap:inverse(),1779,1785,"/**
 * Returns the inverse of this bi-map. Lazily initialized.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableBiMap,com.google.common.collect.Maps:unmodifiableBiMap(com.google.common.collect.BiMap),1695,1698,"/**
 * Returns an unmodifiable view of the given BiMap.
 * @param bimap The BiMap to wrap in an unmodifiable view.
 * @return An UnmodifiableBiMap.
 */
","* Returns an unmodifiable view of the specified bimap. This method allows modules to provide
   * users with ""read-only"" access to internal bimaps. Query operations on the returned bimap ""read
   * through"" to the specified bimap, and attempts to modify the returned map, whether direct or via
   * its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned bimap will be serializable if the specified bimap is serializable.
   *
   * @param bimap the bimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified bimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(),59,61,"/**
 * Creates a new MutableClassToInstanceMap.
 * Returns an empty map to store class-instance mappings.
 */
","* Returns a new {@code MutableClassToInstanceMap} instance backed by a {@link HashMap} using the
   * default initial capacity and load factor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,create,com.google.common.collect.MutableClassToInstanceMap:create(java.util.Map),68,71,"/**
 * Creates a MutableClassToInstanceMap from a backing map.
 * @param backingMap Map of class to instance.
 * @return New MutableClassToInstanceMap.
 */
","* Returns a new {@code MutableClassToInstanceMap} instance backed by a given empty {@code
   * backingMap}. The caller surrenders control of the backing map, and thus should not allow any
   * direct references to it to remain accessible.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,of,com.google.common.reflect.ImmutableTypeToInstanceMap:of(),35,37,"/**
 * Creates an empty ImmutableTypeToInstanceMap.
 */",Returns an empty type to instance map.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,transformEntries,com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry:transformEntries(java.util.Iterator),156,159,"/**
 * Transforms an iterator of entries into an iterator of unmodifiable entries.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,<init>,com.google.common.collect.ForwardingSortedSetMultimap:<init>(),42,42,"/**
* Default constructor for ForwardingSortedSetMultimap.
*/",Constructor for use by subclasses.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableListMultimap:<init>(com.google.common.collect.ListMultimap),795,797,"/**
 * Creates an unmodifiable multimap from the given ListMultimap.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:<init>(com.google.common.collect.SetMultimap),825,827,"/**
 * Constructs an UnmodifiableSetMultimap with the given delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableMultimap,com.google.common.collect.Multimaps:unmodifiableMultimap(com.google.common.collect.Multimap),656,662,"/**
 * Returns an unmodifiable Multimap. Returns delegate if already unmodifiable.
 */","* Returns an unmodifiable view of the specified multimap. Query operations on the returned
   * multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,<init>,com.google.common.collect.Tables$UnmodifiableRowSortedMap:<init>(com.google.common.collect.RowSortedTable),647,649,"/**
* Constructs an unmodifiable row-sorted map from a delegate table.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableTable,com.google.common.collect.Tables:unmodifiableTable(com.google.common.collect.Table),534,537,"/**
 * Returns an unmodifiable view of the given table.
 * @param table The table to wrap in an unmodifiable view.
 * @return An UnmodifiableTable wrapping the input table.
 */
","* Returns an unmodifiable view of the specified table. This method allows modules to provide
   * users with ""read-only"" access to internal tables. Query operations on the returned table ""read
   * through"" to the specified table, and attempts to modify the returned table, whether direct or
   * via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * <p>Consider using an {@link ImmutableTable}, which is guaranteed never to change.
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingListenableFuture.java,<init>,com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture:<init>(com.google.common.util.concurrent.ListenableFuture),58,60,"/**
 * Constructs a SimpleForwardingListenableFuture with the given delegate.
 * @param delegate The ListenableFuture to delegate to.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,<init>,com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter:<init>(java.util.concurrent.Future),124,126,"/**
* Constructs a ListenableFutureAdapter with a default executor.
* @param delegate The Future to wrap.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,"com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future,java.util.concurrent.Executor)",84,91,"/**
 * Wraps a Future to make it executable in a pool thread.
 * @param future The Future to wrap.
 * @param executor Executor to run the Future in.
 * @return ListenableFuture that wraps the given Future.
 */
","* Submits a blocking task for the given {@link Future} to provide {@link ListenableFuture}
   * functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by submitting a task to the
   * given executor at the first call to {@code addListener}. The task must be started by the
   * executor promptly, or else the returned {@code ListenableFuture} may fail to work. The task's
   * execution consists of blocking until the input future is {@linkplain Future#isDone() done}, so
   * each call to this method may claim and hold a thread for an arbitrary length of time. Use of
   * bounded executors or other executors that may fail to execute a task promptly may result in
   * deadlocks.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.
   *
   * @since 12.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getIfPresent,com.google.common.cache.ForwardingCache:getIfPresent(java.lang.Object),47,50,"/**
 * Retrieves the value if the given key is present, otherwise null.
 */",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,get,"com.google.common.cache.ForwardingCache:get(java.lang.Object,java.util.concurrent.Callable)",55,58,"/**
 * Retrieves a value by key, loading it if necessary.
 * @param key The key to retrieve.
 * @param valueLoader Callable to load value if not present.
 * @return The value associated with the key.
 */
",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,getAllPresent,com.google.common.cache.ForwardingCache:getAllPresent(java.lang.Iterable),63,70,"/**
 * Returns a map of values for the given keys from the delegate.
 * @param keys keys to retrieve values for
 * @return Map of values or empty map if no keys are present
 */
",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,put,"com.google.common.cache.ForwardingCache:put(java.lang.Object,java.lang.Object)",75,78,"/**
* Puts a key-value pair into the underlying map.
* Delegates to the map implementation.
*/
",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,putAll,com.google.common.cache.ForwardingCache:putAll(java.util.Map),83,86,"/**
* Adds all entries from the given map to this map.
* @param m the map whose entries are added
*/
",* @since 12.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidate,com.google.common.cache.ForwardingCache:invalidate(java.lang.Object),88,91,"/**
 * Invalidates the specified key using the delegate.
 * @param key The key to invalidate.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(java.lang.Iterable),96,100,"/**
 * Invalidates all entries associated with the given keys.
 * @param keys Iterable of keys to invalidate.
 */
",* @since 11.0,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,invalidateAll,com.google.common.cache.ForwardingCache:invalidateAll(),102,105,"/**
 * Invalidates all cached data by delegating to the underlying cache.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,size,com.google.common.cache.ForwardingCache:size(),107,110,"/**
 * Returns the number of elements in this collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,stats,com.google.common.cache.ForwardingCache:stats(),112,115,"/**
 * Returns the cache statistics from the delegate.
 * @return CacheStats object containing cache statistics.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,asMap,com.google.common.cache.ForwardingCache:asMap(),117,120,"/**
 * Returns a concurrent map backed by the delegate map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/ForwardingCache.java,cleanUp,com.google.common.cache.ForwardingCache:cleanUp(),122,125,"/**
 * Delegates cleanup to the underlying delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$EntrySetSerializedForm:readResolve(),431,433,"/**
 * Resolves this object during deserialization.
 * Returns the entry set of the multiset.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,iterator,com.google.common.collect.ImmutableMultiset:iterator(),228,255,"/**
 * Returns an unmodifiable iterator over the map's elements.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyIntoArray,"com.google.common.collect.ImmutableMultiset:copyIntoArray(java.lang.Object[],int)",326,334,"/**
 * Copies elements from the multiset into an array.
 * @param dst Destination array.
 * @param offset Starting offset in the array.
 * @return The updated offset.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset:hashCode(),341,344,"/**
 * Calculates the hash code based on the entry set.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toString,com.google.common.collect.ImmutableMultiset:toString(),346,349,"/**
 * Returns a string representation of the map, using entrySet().
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,remove,com.google.common.collect.Maps$AbstractFilteredMap:remove(java.lang.Object),2893,2896,"/**
* Removes the value associated with the key.
* @param key The key to remove.
* @return The removed value, or null if key not present.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$2:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for a segment.
 * @param segment The segment to add to.
 * @param key The key of the entry.
 * @param hash The hash code.
 * @param next The next entry in the chain.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$4:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for the segment.
 * @param segment The segment to add to.
 * @param key The key. @param hash The hash. @param next Next entry.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$3:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for a segment.
 * @param segment Segment to add entry to.
 * @param key Key for the entry.
 * @param hash Hash code of the key.
 * @param next Next entry in the chain.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$6:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new entry for a segment.
 * @param segment The segment to add to.
 * @param key The key. @param hash The hash. @param next Next entry.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$8:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new reference entry for a given segment.
 * @param segment The segment to create the entry in.
 * @param key The key for the entry.
 * @param hash The hash code for the key.
 * @param next The next entry in the chain.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,newEntry,"com.google.common.cache.LocalCache$EntryFactory$7:newEntry(com.google.common.cache.LocalCache$Segment,java.lang.Object,int,com.google.common.cache.ReferenceEntry)",609,610,"/**
 * Creates a new reference entry for a segment.
 * @param segment The segment to create in.
 * @param key The key. @param hash The hash. @param next Next entry.
 */
","* Creates a new entry.
     *
     * @param segment to create the entry for
     * @param key of the entry
     * @param hash of the key
     * @param next entry in the same bucket",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,<init>,"com.google.common.util.concurrent.Futures$CallbackListener:<init>(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)",1106,1109,"/**
 * Constructs a CallbackListener with a future and callback.
 * @param future The future to monitor.
 * @param callback The callback to execute on completion.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$AccessQueue:poll(),3848,3857,"/**
 * Retrieves and removes the head of the access queue.
 * Returns the entry or null if the queue is empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,poll,com.google.common.cache.LocalCache$WriteQueue:poll(),3708,3717,"/**
 * Retrieves and removes the head of the queue, or null if empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,createSegment,"com.google.common.cache.LocalCache:createSegment(int,long,com.google.common.cache.AbstractCache$StatsCounter)",1762,1765,"/**
 * Creates a new segment with given capacity, weight, and stats.
 * @param initialCapacity Initial segment capacity.
 * @param maxSegmentWeight Max weight for the segment.
 * @param statsCounter Stats counter for the segment.
 * @return New Segment object.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,waitForLoadingValue,"com.google.common.cache.LocalCache$Segment:waitForLoadingValue(com.google.common.cache.ReferenceEntry,java.lang.Object,com.google.common.cache.LocalCache$ValueReference)",2189,2209,"/**
* Waits for a value to load, returns it, or throws an exception.
* @param e ReferenceEntry, valueReference, key - context for loading.
* @return Loaded value or null if loading failed.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,"com.google.common.cache.LocalCache$Segment:setValue(com.google.common.cache.ReferenceEntry,java.lang.Object,java.lang.Object,long)",2030,2041,"/**
 * Sets the value for a reference entry, updating its reference.
 * @param entry The reference entry to update.
 * @param key The key associated with the value.
 * @param value The new value to set.
 * @param now The current timestamp.
 */
",Sets a new value of an entry. Adds newly created entries at the end of the access queue.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,size,com.google.common.collect.FluentIterable:size(),346,348,"/**
 * Returns the number of elements in the delegate iterable.
 */","* Returns the number of elements in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#count}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$OnePlusArrayList:get(int),353,359,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$TwoPlusArrayList:get(int),384,397,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,edgeCount,com.google.common.graph.AbstractBaseGraph:edgeCount(),52,60,"/**
 * Calculates the number of edges in the graph.
 * Returns the total edge count, derived from node degrees.
 */","* Returns the number of edges in this graph; used to calculate the size of {@link Graph#edges()}.
   * This implementation requires O(|N|) time. Classes extending this one may manually keep track of
   * the number of edges as the graph is updated, and override this method for better performance.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractBaseGraph:inDegree(java.lang.Object),147,150,"/**
 * Calculates the in-degree of a node.
 * Returns predecessors size if directed, else returns degree.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractBaseGraph:outDegree(java.lang.Object),152,155,"/**
 * Calculates the out-degree of a node.
 * Returns successors size if directed, else uses degree().
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractGraph:degree(java.lang.Object),136,145,"/**
 * Returns the degree of a node.
 * @param node the node to get the degree of
 * @return the degree of the node
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph:degree(java.lang.Object),136,145,"/**
 * Calculates the degree of a node.
 * Returns sum of predecessors/successors (directed) or neighbors + self-loops (undirected).
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,com.google.common.io.ByteStreams:toByteArray(java.io.InputStream),240,243,"/**
 * Converts an InputStream to a byte array.
 * @param in Input stream to convert.
 * @throws IOException if an I/O error occurs.
 */
","* Reads all bytes from an input stream into a byte array. Does not close the stream.
   *
   * <p><b>Java 9+ users:</b> use {@code in#readAllBytes()} instead.
   *
   * @param in the input stream to read from
   * @return a byte array containing all the bytes from the stream
   * @throws IOException if an I/O error occurs",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,toByteArray,"com.google.common.io.ByteStreams:toByteArray(java.io.InputStream,long)",250,281,"/**
 * Reads bytes from an InputStream into a byte array, up to expectedSize.
 * @param in InputStream to read from.
 * @param expectedSize Expected number of bytes to read.
 * @return Byte array containing read bytes, or null if error.
 */
","* Reads all bytes from an input stream into a byte array. The given expected size is used to
   * create an initial byte array, but if the actual number of bytes read from the stream differs,
   * the correct result will be returned anyway.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,<init>,"com.google.common.collect.AbstractBiMap:<init>(java.util.Map,java.util.Map)",64,66,"/**
 * Constructs a new AbstractBiMap with the given forward and backward maps.
 */",Package-private constructor for creating a map-backed bimap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,<init>,com.google.common.collect.TreeMultiset:<init>(java.util.Comparator),128,134,"/**
 * Constructs a TreeMultiset with the given comparator.
 * Initializes internal data structures for sorted order.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,readObject,com.google.common.collect.TreeMultiset:readObject(java.io.ObjectInputStream),1076,1092,"/**
 * Reconstitutes the multiset from a stream, restoring its state.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,headMultiset,"com.google.common.collect.TreeMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",547,553,"/**
 * Returns a sorted multiset containing elements less than or equal to upperBound.
 * @param upperBound Upper bound for elements in the multiset.
 * @param boundType Type of bound (inclusive/exclusive).
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,tailMultiset,"com.google.common.collect.TreeMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",555,561,"/**
 * Returns a tail multiset with elements >= lowerBound.
 * @param lowerBound Lower bound for the tail multiset.
 * @param boundType  Type of bound (inclusive/exclusive).
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.AbstractBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
 * Puts the specified value to the specified key.
 * @param key The key with which the value is associated.
 * @param value The value to associate with the key.
 * @return The previous value associated with the key, or null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.AbstractBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
 * Puts the given value into both maps, forcing the operation.
 * @param key The key to put.
 * @param value The value to associate with the key.
 * @return The previous value associated with the key.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumBiMap:remove(java.lang.Object),166,170,"/**
 * Removes the specified key's mapping.
 * @param key the key to remove; null allowed
 * @return the previous value or null if absent.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,remove,com.google.common.collect.EnumHashBiMap:remove(java.lang.Object),166,170,"/**
 * Removes the specified key's mapping.
 * @param key the key to remove; null allowed
 * @return the previous value or null if key not present
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$PermutationCollection:iterator(),610,613,"/**
 * Returns an iterator for permutations of the input list.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLastEntry,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:pollLastEntry(),1612,1615,"/**
 * Retrieves and removes the last entry in the map.
 * @return Map.Entry or null if the map is empty
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:descendingKeySet(),1649,1652,"/**
 * Returns a descending navigable set of keys from this map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subMap,"com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:subMap(java.lang.Object,java.lang.Object)",1654,1658,"/**
 * Returns a view of the map's entries between fromKey and toKey.
 * @param fromKey start key (inclusive)
 * @param toKey end key (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:headMap(java.lang.Object),1669,1672,"/**
 * Returns a view of the map containing entries with keys less than toKey.
 * @param toKey The key up to which entries are included.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailMap,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:tailMap(java.lang.Object),1679,1682,"/**
* Returns a tail map with keys >= fromKey (inclusive).
* @param fromKey the key from which to start the tail map
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,keySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:keySet(),1634,1637,"/**
* Returns a navigable set view of the map's keys.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,removeAll,com.google.common.collect.AbstractListMultimap:removeAll(java.lang.Object),92,96,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return List of removed values.
 */
","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,replaceValues,"com.google.common.collect.AbstractMapBasedMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",225,247,"/**
* Replaces values for a key with a new iterable, returns old values.
*/","* {@inheritDoc}
   *
   * <p>The returned collection is immutable.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,removeAll,com.google.common.collect.AbstractSetMultimap:removeAll(java.lang.Object),100,104,"/**
* Removes all elements associated with the given key.
* @param key The key whose elements are to be removed.
* @return Set of removed values.
*/
","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,descendingIterator,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:descendingIterator(),1105,1108,"/**
 * Returns a descending iterator over the set's elements.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,headSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:headSet(java.lang.Object),1110,1113,"/**
* Returns a head set, exclusive of the {@code toElement}.
* @param toElement element to end the head set
* @return head set containing elements less than {@code toElement}
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,subSet,"com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:subSet(java.lang.Object,java.lang.Object)",1120,1124,"/**
* Returns a sub-set of keys between `fromElement` (inclusive) and `toElement` (exclusive).
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,tailSet,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:tailSet(java.lang.Object),1136,1139,"/**
 * Returns a tail set from the given element, inclusive.
 * @param fromElement the starting element for the tail set
 * @return NavigableSet containing elements >= fromElement
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,hasNext,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:hasNext(),471,475,"/**
 * Checks if there's a next element in the delegated iterator.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,next,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:next(),477,482,"/**
 * Returns the next element in the iteration.
 * Delegates to the underlying iterator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,getDelegateIterator,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator:getDelegateIterator(),491,494,"/**
 * Returns the iterator delegate. Validates iterator before returning.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,addAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:addAll(java.util.Collection),517,532,"/**
 * Adds all elements from the given collection to this collection.
 * @param collection Collection of elements to add
 * @return True if the collection was changed, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,clear,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:clear(),546,555,"/**
 * Removes all elements from the list.
 * Resets the internal delegate and updates totalSize.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,removeAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:removeAll(java.util.Collection),568,581,"/**
 * Removes all elements from the collection that are also in the given collection.
 * @param c collection of elements to remove
 * @return true if the collection was modified
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,retainAll,com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection:retainAll(java.util.Collection),583,594,"/**
 * Retains only the elements of this collection that are also in c.
 * @param c collection to compare against
 * @return true if this collection was modified
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet:pollLast(),727,730,"/**
 * Retrieves and removes the last element of the iterator.
 * @return The last element or null if the iterator is empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,get,com.google.common.collect.AbstractSortedSetMultimap:get(java.lang.Object),90,93,"/**
 * Gets the value associated with the given key, from the parent map.
 * @param key The key whose value is to be retrieved.
 * @return The value associated with the key, as a SortedSet.
 */
","* Returns a collection view of all values associated with a key. If no mappings in the multimap
   * have the provided key, an empty collection is returned.
   *
   * <p>Changes to the returned collection will update the underlying multimap, and vice versa.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultimap.java,spliterator,com.google.common.collect.AbstractMultimap$Values:spliterator(),197,200,"/**
 * Returns a {@code Spliterator} for the values in this collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.HashMultiset:setCount(java.lang.Object,int)",314,335,"/**
 * Sets the count for an element.
 * @param element the element to set the count for
 * @param count the new count value
 * @return the old count value
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,setCount,"com.google.common.collect.LinkedHashMultiset:setCount(java.lang.Object,int)",314,335,"/**
 * Sets the count for an element, updating the backing map.
 * @param element Element to set count for.
 * @param count New count value.
 * @return Old count value.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToString,com.google.common.collect.ForwardingCollection:standardToString(),232,234,"/**
 * Returns a string representation of the collection using default format.
 */","* A sensible definition of {@link #toString} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardToString,com.google.common.collect.ForwardingMap:standardToString(),297,299,"/**
 * Returns a string representation of the object using Maps.toStringImpl.
 */","* A sensible definition of {@link #toString} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #toString} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toString,com.google.common.collect.ImmutableMap:toString(),1221,1224,"/**
 * Returns a string representation of the map, using Maps.toStringImpl.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset$EntrySet:snapshot(),586,591,"/**
 * Creates a snapshot of the multiset as a list of entries.
 * @return List of Multiset.Entry objects representing the snapshot.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,<init>,com.google.common.collect.HashMultiset:<init>(int),72,74,"/**
 * Constructs a HashMultiset with the specified number of distinct elements.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashMapWithExpectedSize,com.google.common.collect.Platform:newHashMapWithExpectedSize(int),37,40,"/**
 * Creates a new HashMap with the specified expected size.
 * @param expectedSize The initial capacity of the HashMap.
 * @return A new HashMap with the given expected size.
 */
",Returns the platform preferred implementation of a map based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Graph),62,79,"/**
 * Checks if a graph contains a cycle.
 * @param graph The graph to check.
 * @return True if a cycle exists, false otherwise.
 */
","* Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset
   * of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting
   * and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,get,com.google.common.collect.HashBasedTable$Factory:get(),60,63,"/**
 * Creates a new LinkedHashMap with the expected size.
 * @return A new LinkedHashMap instance.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,"com.google.common.collect.HashBasedTable:create(int,int)",81,86,"/**
 * Creates a HashBasedTable with specified row and cell capacity.
 * @param expectedRows expected number of rows
 * @param expectedCellsPerRow expected cells per row
 * @return HashBasedTable instance
 */
","* Creates an empty {@code HashBasedTable} with the specified map sizes.
   *
   * @param expectedRows the expected number of distinct row keys
   * @param expectedCellsPerRow the expected number of column key / value mappings in each row
   * @throws IllegalArgumentException if {@code expectedRows} or {@code expectedCellsPerRow} is
   *     negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,<init>,com.google.common.collect.LinkedHashMultiset:<init>(int),80,82,"/**
 * Constructs a LinkedHashMultiset with the specified number of distinct elements.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashMapWithExpectedSize,com.google.common.collect.Platform:newLinkedHashMapWithExpectedSize(int),46,49,"/**
 * Creates a LinkedHashMap with the specified expected size.
 * @param expectedSize The initial size of the map.
 * @return A new LinkedHashMap.
 */
","* Returns the platform preferred implementation of an insertion ordered map based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ElementOrder.java,createMap,com.google.common.graph.ElementOrder:createMap(int),189,200,"/**
 * Creates a map with the specified expected size based on the type.
 * @param expectedSize The expected size of the map to create.
 * @return A map implementation.
 */
",Returns an empty mutable map whose keys will respect this {@link ElementOrder}.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:<init>(com.google.common.collect.ImmutableSet$SetBuilderImpl),943,953,"/**
 * Initializes the builder with elements from the provided builder.
 * @param toCopy The SetBuilderImpl to copy elements from.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,retainAll,com.google.common.collect.Maps$EntrySet:retainAll(java.util.Collection),4250,4269,"/**
 * Retains all elements of the specified collection.
 * Handles UnsupportedOperationException by manual retention.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newHashSetWithExpectedSize,com.google.common.collect.Platform:newHashSetWithExpectedSize(int),52,54,"/**
 * Creates a new HashSet with the specified expected size.
 * @param expectedSize The initial size of the HashSet.
 * @return A new HashSet with the expected size.
 */
",Returns the platform preferred implementation of a set based on a hash table.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/EndpointPairIterator.java,<init>,com.google.common.graph.EndpointPairIterator$Undirected:<init>(com.google.common.graph.BaseGraph),118,121,"/**
 * Initializes an Undirected graph with the given base graph.
 * @param graph The base graph for the undirected graph.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Platform.java,newLinkedHashSetWithExpectedSize,com.google.common.collect.Platform:newLinkedHashSetWithExpectedSize(int),65,67,"/**
 * Creates a LinkedHashSet with the specified expected size.
 * @param expectedSize The initial size of the LinkedHashSet.
 * @return A new LinkedHashSet.
 */
","* Returns the platform preferred implementation of an insertion ordered set based on a hash
   * table.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:<init>(com.google.common.collect.ImmutableCollection),530,533,"/**
 * Initializes ServiceManagerState with a collection of services.
 * @param services Immutable collection of Service objects.
 */
","* It is implicitly assumed that all the services are NEW and that they will all remain NEW
     * until all the Listeners are installed and {@link #markReady()} is called. It is our caller's
     * responsibility to only call {@link #markReady()} if all services were new at the time this
     * method was called and when all the listeners were installed.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.AbstractSortedMultiset:pollFirstEntry(),78,88,"/**
 * Retrieves and removes the first entry in the multiset.
 * @return First Entry<E> or null if the multiset is empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.AbstractSortedMultiset:pollLastEntry(),90,100,"/**
 * Retrieves and removes the last entry in the multiset.
 * Returns null if the multiset is empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardFirstEntry(),122,129,"/**
 * Returns the first entry in the multiset, or null if empty.
 */","* A sensible definition of {@link #firstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #firstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardLastEntry(),143,150,"/**
 * Returns the last entry in the multiset, or null if empty.
 * Creates an immutable entry with element and count.
 */
","* A sensible definition of {@link #lastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset} or {@link #entrySet()}, you may wish to override
   * {@link #firstEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollFirstEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollFirstEntry(),163,172,"/**
 * Polls the first entry from the multiset. Returns null if empty.
 */","* A sensible definition of {@link #pollFirstEntry()} in terms of {@code entrySet().iterator()}.
   *
   * <p>If you override {@link #entrySet()}, you may wish to override {@link #pollFirstEntry()} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMultiset.java,standardPollLastEntry,com.google.common.collect.ForwardingSortedMultiset:standardPollLastEntry(),186,195,"/**
 * Polls the last entry from the multiset in descending order.
 * Returns the entry or null if the multiset is empty.
 */
","* A sensible definition of {@link #pollLastEntry()} in terms of {@code
   * descendingMultiset().entrySet().iterator()}.
   *
   * <p>If you override {@link #descendingMultiset()} or {@link #entrySet()}, you may wish to
   * override {@link #pollLastEntry()} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,getEntry,com.google.common.collect.ImmutableMultimap$Keys:getEntry(int),753,757,"/**
 * Returns the entry at the specified index in the multiset.
 * @param index the index of the entry to return
 * @return the entry at the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getEntry,com.google.common.collect.RegularImmutableSortedMultiset:getEntry(int),66,69,"/**
* Returns an Entry for the element at the given index.
* @param index index of the element
* @return Entry containing element and its count
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,toString,com.google.common.collect.TreeMultiset$AvlNode:toString(),1041,1044,"/**
 * Returns a string representation of this element-count entry.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,setCount,"com.google.common.collect.EnumMultiset:setCount(java.lang.Object,int,int)",91,95,"/**
 * Sets the count for a given element.
 * @param element The element to set the count for.
 * @param oldCount The old count value.
 * @param newCount The new count value.
 * @return True if the count was updated successfully.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$PowerSet:equals(java.lang.Object),1759,1766,"/**
 * Checks if this PowerSet is equal to another PowerSet.
 * @param obj Object to compare to, must be a PowerSet.
 * @return True if equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.HashMultiset:entrySet(),83,86,"/**
* Returns the entry set of the multiset. Delegates to superclass.
*/","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,entrySet,com.google.common.collect.LinkedHashMultiset:entrySet(),83,86,"/**
 * Returns the entry set view of the multiset.
 * Delegates to the superclass implementation.
 */
","* {@inheritDoc}
   *
   * <p>Invoking {@link Multiset.Entry#getCount} on an entry in the returned set always returns the
   * current count of that element in the multiset, as opposed to the count at the time the entry
   * was retrieved.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,isEmpty,com.google.common.collect.EnumMultiset:isEmpty(),49,52,"/**
 * Checks if the map is empty.
 * Returns true if the map contains no entries, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,snapshot,com.google.common.collect.ConcurrentHashMultiset:snapshot(),183,192,"/**
 * Creates a list containing all elements in the multiset.
 * Returns a List<E> representing the multiset's elements.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,floor,com.google.common.collect.DescendingImmutableSortedSet:floor(java.lang.Object),91,94,"/**
 * Returns the greatest element less than or equal to the given element.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,lower,com.google.common.collect.DescendingImmutableSortedSet:lower(java.lang.Object),86,89,"/**
 * Returns the greatest element less than the given element.
 * @param element the element to compare against
 * @return the lower element, or null if none exists
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(com.google.common.collect.RangeSet),55,59,"/**
 * Creates a TreeRangeSet from a RangeSet.
 * @param rangeSet The RangeSet to copy.
 * @return A new TreeRangeSet containing the ranges.
 */
",Returns a {@code TreeRangeSet} initialized with the ranges in the specified range set.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,create,com.google.common.collect.TreeRangeSet:create(java.lang.Iterable),70,74,"/**
 * Creates a TreeRangeSet from an iterable of ranges.
 * @param ranges iterable of ranges to add to the set.
 * @return A TreeRangeSet containing the ranges.
 */
","* Returns a {@code TreeRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. An
   * element will be contained in this {@code RangeSet} if and only if it is contained in at least
   * one {@code Range} in {@code ranges}.
   *
   * @since 21.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,<init>,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:<init>(java.util.NavigableMap),461,463,"/**
 * Constructs a ComplementRanges object with a default upper bound.
 * @param positiveRangesByLowerBound Map of ranges to complement.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,asMap,com.google.common.collect.TreeMultimap:asMap(),199,202,"/**
 * Returns a navigable map backed by this multimap.
 * Returns a view of the multimap's keys and associated values.
 */
","* {@inheritDoc}
   *
   * <p>Because a {@code TreeMultimap} has unique sorted keys, this method returns a {@link
   * NavigableMap}, instead of the {@link java.util.Map} specified in the {@link Multimap}
   * interface.
   *
   * @since 14.0 (present with return type {@code SortedMap} since 2.0)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$CellSet:clear(),158,161,"/**
 * Clears the table, delegating to the parent class's clear method.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,clear,com.google.common.collect.AbstractTable$Values:clear(),222,225,"/**
 * Clears the table, delegating to the parent class's clear method.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,iterator,com.google.common.collect.AbstractTable$Values:iterator(),207,210,"/**
 * Returns an iterator over the values in this map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ArrayTable:hashCode(),238,241,"/**
 * Returns the hash code, based on the underlying cell set.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractTable.java,hashCode,com.google.common.collect.ImmutableTable:hashCode(),238,241,"/**
 * Returns the hash code, based on the cell set's hash code.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,cellSet,com.google.common.collect.HashBasedTable:cellSet(),235,238,"/**
* Returns the set of cells, delegating to the superclass.
*/","* {@inheritDoc}
   *
   * <p>The set's iterator traverses the mappings for the first row, the mappings for the second
   * row, and so on.
   *
   * <p>Each cell is an immutable snapshot of a row key / column key / value mapping, taken at the
   * time the cell is returned by a method call to the set or its iterator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,containsValue,com.google.common.collect.ImmutableTable:containsValue(java.lang.Object),388,391,"/**
 * Checks if the map contains the specified value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,values,com.google.common.collect.HashBasedTable:values(),795,798,"/**
 * Returns a collection of the values in this map.
 */","* {@inheritDoc}
   *
   * <p>The collection's iterator traverses the values for the first row, the values for the second
   * row, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,onKeys,com.google.common.collect.Ordering:onKeys(),463,465,"/**
 * Returns an ordering based on the keys of the map entries.
 * Uses the key function to extract keys for comparison.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,ordering,com.google.common.collect.MinMaxPriorityQueue$Builder:ordering(),228,231,"/**
 * Creates an Ordering from the stored Comparator.
 * @return Ordering object based on the Comparator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsFirst,com.google.common.collect.NaturalOrdering:nullsFirst(),45,53,"/**
 * Returns a new Ordering that places nulls before non-null values.
 * Returns a cached Ordering if available, otherwise creates one.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,nullsFirst,com.google.common.collect.NullsLastOrdering:nullsFirst(),57,60,"/**
 * Returns a composite Ordering that places nulls before non-nulls.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NaturalOrdering.java,nullsLast,com.google.common.collect.NaturalOrdering:nullsLast(),55,63,"/**
 * Returns a new Ordering that places nulls last.
 * Casts the result to Ordering<S>.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,nullsLast,com.google.common.collect.NullsFirstOrdering:nullsLast(),63,66,"/**
 * Returns a copy of this Ordering that places nulls last.
 * Delegates to the wrapped Ordering.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,<init>,com.google.common.collect.DescendingImmutableSortedSet:<init>(com.google.common.collect.ImmutableSortedSet),32,35,"/**
 * Constructs a DescendingImmutableSortedSet from a forward sorted set.
 * @param forward The sorted set to create the descending view from.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingMultiset.java,comparator,com.google.common.collect.DescendingMultiset:comparator(),41,48,"/**
 * Returns the comparator for this multiset, or reverse if null.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/GeneralRange.java,reverse,com.google.common.collect.GeneralRange:reverse(),269,285,"/**
 * Returns the reversed range. Creates a new range if reverse is null.
 */",Returns the same range relative to the reversed comparator.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,reverse,com.google.common.collect.Maps$DescendingMap:reverse(java.util.Comparator),4300,4302,"/**
 * Reverses the given comparator to create a reverse ordering.
 * @param forward The comparator to reverse.
 * @return A new Ordering that reverses the input comparator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,<init>,"com.google.common.collect.MinMaxPriorityQueue:<init>(com.google.common.collect.MinMaxPriorityQueue$Builder,int)",241,251,"/**
 * Constructs a MinMaxPriorityQueue with a builder and initial size.
 * @param builder Builder object for configuring the queue.
 * @param queueSize Initial capacity of the queue.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsFirstOrdering.java,reverse,com.google.common.collect.NullsFirstOrdering:reverse(),50,55,"/**
 * Reverses the order and places nulls at the end.
 * Returns a new Ordering object.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/NullsLastOrdering.java,reverse,com.google.common.collect.NullsLastOrdering:reverse(),50,55,"/**
 * Reverses the order and places nulls first.
 * Returns a new Ordering instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,reverse,com.google.common.collect.Sets$DescendingSet:reverse(java.util.Comparator),2246,2248,"/**
 * Reverses the given comparator to create a reverse ordering.
 * @param forward The comparator to reverse.
 * @return A new Ordering that reverses the given comparator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Iterable),1380,1387,"/**
 * Collects and sorts types by their order number.
 * @param types Iterable of types to collect and sort.
 * @return ImmutableList of types sorted by order.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,cellOf,"com.google.common.collect.ImmutableTable:cellOf(java.lang.Object,java.lang.Object,java.lang.Object)",157,162,"/**
 * Creates an immutable cell with the given row key, column key, and value.
 */","* Verifies that {@code rowKey}, {@code columnKey} and {@code value} are non-null, and returns a
   * new entry with those values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,next,com.google.common.collect.StandardTable$CellIterator:next(),255,277,"/**
 * Returns the next cell in the iterator. Advances row/column iterators.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,elementSet,com.google.common.collect.ImmutableMultiset:elementSet(),354,355,"/**
 * Returns an immutable set containing elements of this set.
 */",* @since 21.0 (present with return type {@code Set} since 2.0),,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,"com.google.common.collect.ImmutableMap$Builder:put(java.lang.Object,java.lang.Object)",451,458,"/**
 * Associates the specified key with the given value.
 * @param key The key for the entry.
 * @param value The value for the entry.
 * @return This builder.
 */
","* Associates {@code key} with {@code value} in the built map. If the same key is put more than
     * once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last
     * value put for that key.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",142,144,"/**
 * Creates an immutable map with two entries.
 * @param k1, v1 first entry
 * @param k2, v2 second entry
 * @return ImmutableMap containing the two entries
 */
","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",151,153,"/**
 * Creates an immutable map with three entries.
 * @param k1, k2, k3 keys
 * @param v1, v2, v3 values
 * @return ImmutableMap containing the three entries
 */
","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",160,163,"/**
 * Creates an immutable map with the given key-value pairs.
 * @param k1, k2, k3, k4 keys
 * @param v1, v2, v3, v4 values
 * @return ImmutableMap containing the provided entries
 */
","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,174,"/**
 * Creates an immutable map from the given key-value pairs.
 * @param k1, k2, k3, k4, k5 keys
 * @param v1, v2, v3, v4, v5 values
 * @return ImmutableMap containing the provided entries
 */
","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",182,191,"/**
 * Creates an immutable map with the given key-value pairs.
 * @param k1, v1, ..., k6, v6 keys and values for the map
 * @return An ImmutableMap containing the provided entries
 */
","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",199,209,"/**
* Creates an immutable map from the given key-value pairs.
* @param k1, v1, ..., k7, v7 keys and values to populate the map
* @return ImmutableMap containing the provided entries
*/
","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",217,243,"/**
 * Creates an immutable map from eight key-value pairs.
 */","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",251,280,"/**
 * Creates an immutable map from the given key-value pairs.
 */","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",288,320,"/**
 * Creates an immutable map from the given key-value pairs.
 */","* Returns an immutable map containing the given entries, in order.
   *
   * @throws IllegalArgumentException if duplicate keys are provided
   * @since 31.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntry.java,<init>,"com.google.common.collect.ImmutableMapEntry$NonTerminalImmutableBiMapEntry:<init>(java.lang.Object,java.lang.Object,com.google.common.collect.ImmutableMapEntry,com.google.common.collect.ImmutableMapEntry)",123,130,"/**
 * Constructs a NonTerminalImmutableBiMapEntry.
 * @param key The key.
 * @param value The value.
 * @param nextInKeyBucket Next entry in key bucket.
 * @param nextInValueBucket Next entry in value bucket.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArrayCheckingBucketOverflow,"com.google.common.collect.RegularImmutableMap:fromEntryArrayCheckingBucketOverflow(int,java.util.Map$Entry[],boolean)",104,172,"/**
 * Creates an immutable map from an array of entries.
 * @param n number of entries, must match entryArray.length
 * @param entryArray array of entries
 * @param throwIfDuplicateKeys whether to throw on duplicate keys
 * @return ImmutableMap containing the entries
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,makeImmutable,com.google.common.collect.RegularImmutableMap:makeImmutable(java.util.Map$Entry),213,215,"/**
 * Creates an immutable map entry from a given entry.
 * @param entry The entry to make immutable.
 * @return An ImmutableMapEntry.
 */
",Makes an entry usable internally by a new ImmutableMap.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,put,com.google.common.collect.ImmutableListMultimap$Builder:put(java.util.Map$Entry),265,270,"/**
* Adds an entry to the map and returns the builder.
* @param entry The entry to add.
* @return This builder instance.
*/
","* {@inheritDoc}
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(java.lang.Iterable),265,271,"/**
 * Adds all entries from the given iterable to the map.
 * @param entries Iterable of entries to add.
 * @return This builder.
 */
","* Adds entries to the built multimap.
     *
     * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,put,com.google.common.collect.ImmutableSetMultimap$Builder:put(java.util.Map$Entry),314,319,"/**
* Adds an entry to the map and returns the builder.
* @param entry The entry to add.
* @return This builder instance.
*/
","* Adds an entry to the built multimap if it is not already present.
     *
     * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfDouble:trySplit(),376,399,"/**
 * Attempts to split the spliterator into two sub-spliterators.
 * @return A new spliterator representing the first half, or null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectSpliterators.java,trySplit,com.google.common.collect.CollectSpliterators$FlatMapSpliteratorOfLong:trySplit(),376,399,"/**
 * Attempts to split the spliterator into two sub-spliterators.
 * @return A new spliterator or null if splitting is not possible.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multiset.java,spliterator,com.google.common.collect.Multiset:spliterator(),481,484,"/**
 * Returns a spliterator for the elements in this multiset.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,"com.google.common.collect.Sets$FilteredNavigableSet:<init>(java.util.NavigableSet,com.google.common.base.Predicate)",1348,1350,"/**
* Constructs a FilteredNavigableSet with the given set and predicate.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredSortedSet:subSet(java.lang.Object,java.lang.Object)",1309,1313,"/**
 * Returns a sorted set containing elements from fromElement to toElement.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,com.google.common.collect.Sets$FilteredSortedSet:headSet(java.lang.Object),1315,1318,"/**
 * Returns a sorted set containing elements less than {@code toElement}.
 * @param toElement the element to end the set; exclusive boundary
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,com.google.common.collect.Sets$FilteredSortedSet:tailSet(java.lang.Object),1320,1323,"/**
 * Returns a sorted set containing elements from fromElement to the end.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.SortedSet,com.google.common.base.Predicate)",1229,1240,"/**
 * Filters a sorted set based on a predicate.
 * @param unfiltered The set to filter.
 * @param predicate The filter condition.
 * @return A new filtered SortedSet.
 */
","* Returns the elements of a {@code SortedSet}, {@code unfiltered}, that satisfy a predicate. The
   * returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,getValue,com.google.common.collect.CompactHashMap$MapEntry:getValue(),911,932,"/**
 * Returns the value associated with the key. Returns null if absent.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,firstEntryIndex,com.google.common.collect.CompactHashMap:firstEntryIndex(),608,610,"/**
 * Returns the index of the first entry, or -1 if empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,clear,com.google.common.collect.CompactLinkedHashMap:clear(),288,299,"/**
 * Clears the linked hash map. Resets pointers and clears links.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,trimToSize,com.google.common.collect.CompactHashMap:trimToSize(),1070,1090,"/**
* Trims the map to the current size, potentially resizing.
*/","* Ensures that this {@code CompactHashMap} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,trimToSize,com.google.common.collect.CompactHashSet:trimToSize(),655,675,"/**
 * Trims the set to the current size, potentially resizing.
 */","* Ensures that this {@code CompactHashSet} has the smallest representation in memory, given its
   * current size.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,firstEntryIndex,com.google.common.collect.CompactHashSet:firstEntryIndex(),522,524,"/**
 * Returns the index of the first entry, or -1 if empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,clear,com.google.common.collect.CompactLinkedHashSet:clear(),247,260,"/**
 * Clears the linked list. Resets pointers and clears arrays.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,allocArrays,com.google.common.collect.CompactLinkedHashMap:allocArrays(),122,127,"/**
* Allocates an array of long values and returns the size.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,allocArrays,com.google.common.collect.CompactLinkedHashSet:allocArrays(),139,145,"/**
 * Allocates arrays for predecessor and successor.
 * @return The expected size of the arrays.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,setSucceeds,"com.google.common.collect.CompactLinkedHashMap:setSucceeds(int,int)",167,179,"/**
 * Updates succeeds relationship between nodes.
 * @param pred predecessor node
 * @param succ successor node
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,insertEntry,"com.google.common.collect.CompactLinkedHashSet:insertEntry(int,java.lang.Object,int,int)",193,198,"/**
* Inserts an entry and updates succeed links.
* @param entryIndex index of the entry
* @param object object to insert
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,readResolve,com.google.common.collect.EmptyContiguousSet$SerializedForm:readResolve(),157,159,"/**
 * Reconstitutes this set from a serialized form.
 * @return A new EmptyContiguousSet with the original domain.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,readResolve,com.google.common.collect.RegularContiguousSet$SerializedForm:readResolve(),253,255,"/**
 * Reconstitutes this set from a serialized form.
 * @return A new RegularContiguousSet instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyContiguousSet.java,createDescendingSet,com.google.common.collect.EmptyContiguousSet:createDescendingSet(),177,181,"/**
 * Creates an empty descending sorted set using natural order.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,emptySet,com.google.common.collect.ImmutableSetMultimap:emptySet(java.util.Comparator),648,652,"/**
 * Returns an empty ImmutableSet or ImmutableSortedSet.
 * @param valueComparator Comparator for sorted set, null for unordered.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,emptyMap,com.google.common.collect.ImmutableSortedMap:emptyMap(java.util.Comparator),119,126,"/**
 * Returns an empty ImmutableSortedMap with the given comparator.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,<init>,com.google.common.collect.RegularImmutableSortedMultiset:<init>(java.util.Comparator),47,52,"/**
 * Constructs a new RegularImmutableSortedMultiset with a comparator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Cut.java,canonical,com.google.common.collect.Cut$BelowAll:canonical(com.google.common.collect.DiscreteDomain),187,194,"/**
 * Returns a cut below the minimum value of the domain.
 * @param domain The discrete domain.
 * @return A cut object.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap:getEntry(java.lang.Comparable),126,135,"/**
 * Retrieves the entry for the given key.
 * @param key the key to search for
 * @return Entry if found, otherwise null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,isEmpty,com.google.common.collect.Range:isEmpty(),398,400,"/**
 * Checks if the range is empty.
 * @return True if lowerBound equals upperBound, false otherwise.
 */
","* Returns {@code true} if this range is of the form {@code [v..v)} or {@code (v..v]}. (This does
   * not encompass ranges of the form {@code (v..v)}, because such ranges are <i>invalid</i> and
   * can't be constructed at all.)
   *
   * <p>Note that certain discrete ranges such as the integer range {@code (3..4)} are <b>not</b>
   * considered empty, even though they contain no actual values. In these cases, it may be helpful
   * to preprocess ranges with {@link #canonical(DiscreteDomain)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,equals,com.google.common.collect.Range:equals(java.lang.Object),662,669,"/**
 * Checks if two Range objects are equal based on bounds.
 * @param object Object to compare to, must be a Range.
 * @return True if ranges are equal, false otherwise.
 */
","* Returns {@code true} if {@code object} is a range having the same endpoints and bound types as
   * this range. Note that discrete ranges such as {@code (1..4)} and {@code [2..3]} are <b>not</b>
   * equal to one another, despite the fact that they each contain precisely the same set of values.
   * Similarly, empty ranges are not equal unless they have exactly the same representation, so
   * {@code [3..3)}, {@code (3..3]}, {@code (4..4]} are all unequal.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$RangesByUpperBound:get(java.lang.Object),342,360,"/**
 * Retrieves a range associated with the given cut key.
 * @param key The cut key to search for.
 * @return The range if found, otherwise null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,create,"com.google.common.collect.Range:create(com.google.common.collect.Cut,com.google.common.collect.Cut)",132,134,"/**
 * Creates a new Range object with the given lower and upper bounds.
 * @param lowerBound The lower bound of the range.
 * @param upperBound The upper bound of the range.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet:encloses(com.google.common.collect.Range),148,153,"/**
 * Checks if this range encloses the given range.
 * @param range the range to check
 * @return true if this range encloses the given range
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,rangeEnclosing,com.google.common.collect.TreeRangeSet:rangeEnclosing(com.google.common.collect.Range),155,161,"/**
 * Finds a range that encloses the given range.
 * @param range The range to enclose.
 * @return Enclosing range or null if none exists.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardAdd,com.google.common.collect.ForwardingList:standardAdd(java.lang.Object),136,139,"/**
 * Adds the element to the end of the list, at index size().
 * @param element The element to add.
 * @return True.
 */
","* A sensible default implementation of {@link #add(Object)}, in terms of {@link #add(int,
   * Object)}. If you override {@link #add(int, Object)}, you may wish to override {@link
   * #add(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardIterator,com.google.common.collect.ForwardingList:standardIterator(),181,183,"/**
 * Returns a standard iterator for the list.
 */","* A sensible default implementation of {@link #iterator}, in terms of {@link #listIterator()}. If
   * you override {@link #listIterator()}, you may wish to override {@link #iterator} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingList.java,standardListIterator,com.google.common.collect.ForwardingList:standardListIterator(),192,194,"/**
 * Returns a list iterator over the list from the beginning.
 */","* A sensible default implementation of {@link #listIterator()}, in terms of {@link
   * #listIterator(int)}. If you override {@link #listIterator(int)}, you may wish to override
   * {@link #listIterator()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,asMap,com.google.common.collect.ForwardingMultimap:asMap(),49,52,"/**
* Returns a map view of the composite collection's entries.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,clear,com.google.common.collect.ForwardingMultimap:clear(),54,57,"/**
 * Clears the collection by calling the delegate's clear method.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsEntry,"com.google.common.collect.ForwardingMultimap:containsEntry(java.lang.Object,java.lang.Object)",59,62,"/**
 * Checks if the map contains a key-value pair.
 * @param key The key to check.
 * @param value The value to check.
 * @return True if the map contains the entry, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsKey,com.google.common.collect.ForwardingMultimap:containsKey(java.lang.Object),64,67,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the key exists, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,containsValue,com.google.common.collect.ForwardingMultimap:containsValue(java.lang.Object),69,72,"/**
 * Checks if the map contains a specific value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,entries,com.google.common.collect.ForwardingMultimap:entries(),74,77,"/**
 * Returns a collection of this map's entries.
 * Delegates to the underlying map's entries method.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,get,com.google.common.collect.ForwardingMultimap:get(java.lang.Object),79,82,"/**
 * Retrieves values associated with the given key from the delegate.
 * @param key The key to retrieve values for.
 * @return Collection of values or null if key not present.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,isEmpty,com.google.common.collect.ForwardingMultimap:isEmpty(),84,87,"/**
 * Checks if the underlying collection is empty.
 * Delegates to the underlying collection's isEmpty() method.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keys,com.google.common.collect.ForwardingMultimap:keys(),89,92,"/**
 * Returns a multiset containing the keys of this multiset.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,keySet,com.google.common.collect.ForwardingMultimap:keySet(),94,97,"/**
 * Returns the set of keys from the underlying map.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,put,"com.google.common.collect.ForwardingMultimap:put(java.lang.Object,java.lang.Object)",99,103,"/**
* Puts a key-value pair into the delegate map.
* @param key The key to put.
* @param value The value to associate with the key.
* @return True if the put was successful.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,"com.google.common.collect.ForwardingMultimap:putAll(java.lang.Object,java.lang.Iterable)",105,109,"/**
 * Delegates putAll operation to the underlying delegate.
 * @param key The key for the putAll operation.
 * @param values Iterable of values to put.
 * @return True if putAll was invoked, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,putAll,com.google.common.collect.ForwardingMultimap:putAll(com.google.common.collect.Multimap),111,115,"/**
 * Adds all entries from the given multimap to this multimap.
 * @param multimap the multimap to add entries from
 * @return true if the multimap was changed, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,remove,"com.google.common.collect.ForwardingMultimap:remove(java.lang.Object,java.lang.Object)",117,121,"/**
 * Removes a key-value pair from the underlying map.
 * @param key The key of the entry to remove.
 * @param value The value of the entry to remove.
 * @return True if the entry was removed, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,removeAll,com.google.common.collect.ForwardingMultimap:removeAll(java.lang.Object),123,127,"/**
 * Removes all elements associated with the given key.
 * @param key The key whose elements should be removed.
 * @return Collection of removed elements.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,replaceValues,"com.google.common.collect.ForwardingMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",129,133,"/**
 * Replaces values for a key using the delegate's implementation.
 * @param key The key for which values are replaced.
 * @param values Iterable of new values.
 * @return Collection of replaced values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,size,com.google.common.collect.ForwardingMultimap:size(),135,138,"/**
 * Returns the number of elements in this collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,values,com.google.common.collect.ForwardingMultimap:values(),140,143,"/**
 * Returns a collection of the values in this map.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,equals,com.google.common.collect.ForwardingMultimap:equals(java.lang.Object),145,150,"/**
 * Checks for equality with another object, delegates to the delegate.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultimap.java,hashCode,com.google.common.collect.ForwardingMultimap:hashCode(),152,155,"/**
 * Returns the hash code, delegating to the underlying delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,count,com.google.common.collect.TreeMultiset:count(java.lang.Object),242,255,"/**
 * Counts occurrences of an element within the range.
 * @param element Element to count; returns 0 if invalid.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,firstNode,com.google.common.collect.TreeMultiset:firstNode(),394,415,"/**
 * Finds the first node within the specified range.
 * Returns null if no such node exists.
 */",Returns the first node in the tree that is in range.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,lastNode,com.google.common.collect.TreeMultiset:lastNode(),417,438,"/**
 * Returns the last node within the specified range.
 * Returns null if no such node exists.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBasedTable.java,create,com.google.common.collect.HashBasedTable:create(com.google.common.collect.Table),95,100,"/**
 * Creates a new HashBasedTable from the given Table.
 * @param table The table to copy from.
 * @return A new HashBasedTable containing the data.
 */
","* Creates a {@code HashBasedTable} with the same mappings as the specified table.
   *
   * @param table the table to copy
   * @throws NullPointerException if any of the row keys, column keys, or values in {@code table} is
   *     null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(),100,103,"/**
 * Creates a new TreeBasedTable with natural ordering for rows/cols.
 */
","* Creates an empty {@code TreeBasedTable} that uses the natural orderings of both row and column
   * keys.
   *
   * <p>The method signature specifies {@code R extends Comparable} with a raw {@link Comparable},
   * instead of {@code R extends Comparable<? super R>}, and the same for {@code C}. That's
   * necessary to support classes defined without generics.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,"com.google.common.collect.TreeBasedTable:create(java.util.Comparator,java.util.Comparator)",111,116,"/**
 * Creates a new TreeBasedTable with given row and column comparators.
 */
","* Creates an empty {@code TreeBasedTable} that is ordered by the specified comparators.
   *
   * @param rowComparator the comparator that orders the row keys
   * @param columnComparator the comparator that orders the column keys",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(int),76,79,"/**
 * Creates a new HashBiMap with the specified expected size.
 */","* Constructs a new, empty bimap with the specified expected size.
   *
   * @param expectedSize the expected number of entries
   * @throws IllegalArgumentException if the specified expected size is negative",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,containsKey,com.google.common.collect.CompactHashMap:containsKey(java.lang.Object),502,506,"/**
 * Checks if the map contains the specified key.
 * Uses delegate map if available, otherwise uses indexOf.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,get,com.google.common.collect.CompactHashMap:get(java.lang.Object),508,520,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to search for.
 * @return The value or null if the key is not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashSet:moveLastEntry(int,int)",200,212,"/**
 * Moves the last entry to a new index, updating successors.
 * @param dstIndex Destination index for the last entry.
 * @param mask Mask value for the move operation.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$EntrySetView:remove(java.lang.Object),840,871,"/**
* Removes the specified entry from the map.
* @param o the entry to remove
* @return true if successfully removed, false otherwise
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,removeHelper,com.google.common.collect.CompactHashMap:removeHelper(java.lang.Object),534,559,"/**
 * Removes the entry associated with the key.
 * @param key The key of the entry to remove.
 * @return The old value or NOT_FOUND if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,remove,com.google.common.collect.CompactHashSet:remove(java.lang.Object),448,477,"/**
 * Removes the specified object from the set. Returns true if removed.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,put,"com.google.common.collect.HashBiMap:put(java.lang.Object,java.lang.Object)",288,292,"/**
* Puts the specified value to the specified key.
* @param key key to associate with the value
* @param value value to associate with the key
* @return Previous value, or null if key was not present
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,forcePut,"com.google.common.collect.HashBiMap:forcePut(java.lang.Object,java.lang.Object)",328,332,"/**
 * Forces the put operation, returning the previous value.
 * @param key The key to put.
 * @param value The value to associate with the key.
 * @return The previous value associated with the key.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,builder,com.google.common.collect.ImmutableBiMap:builder(),290,292,"/**
 * Creates a new builder instance for constructing objects.
 * @return A new Builder object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,<init>,com.google.common.collect.ImmutableClassToInstanceMap$Builder:<init>(),97,97,"/**
 * Constructs a new Builder instance.
 */
",Creates a new builder.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,<init>,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:<init>(),64,64,"/**
 * Private constructor to prevent direct instantiation of Builder.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,makeBuilder,com.google.common.collect.ImmutableSortedMap$SerializedForm:makeBuilder(int),1152,1155,"/**
 * Creates a new builder with the specified size and comparator.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,naturalOrder,com.google.common.collect.ImmutableSortedMap:naturalOrder(),567,569,"/**
 * Returns a builder that orders elements using natural ordering.
 */","* Returns a builder that creates immutable sorted maps whose keys are ordered by their natural
   * ordering. The sorted maps use {@link Ordering#natural()} as the comparator.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,orderedBy,com.google.common.collect.ImmutableSortedMap:orderedBy(java.util.Comparator),579,581,"/**
 * Creates a new Builder instance, using the provided comparator.
 * @param comparator Comparator for ordering keys.
 * @return A new Builder instance.
 */
","* Returns a builder that creates immutable sorted maps with an explicit comparator. If the
   * comparator has a more general type than the map's keys, such as creating a {@code
   * SortedMap<Integer, String>} with a {@code Comparator<Number>}, use the {@link Builder}
   * constructor instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,reverseOrder,com.google.common.collect.ImmutableSortedMap:reverseOrder(),587,589,"/**
 * Returns a Builder using the reverse natural order.
 * Uses Ordering.natural().reverse() for reverse sorting.
 */
","* Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of
   * their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,of,"com.google.common.collect.ImmutableMap:of(java.lang.Object,java.lang.Object)",133,135,"/**
 * Creates an immutable map with the given key-value pair.
 */","* Returns an immutable map containing a single entry. This map behaves and performs comparably to
   * {@link Collections#singletonMap} but will not accept a null key or value. It is preferable
   * mainly for consistency and maintainability of your code.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,inverse,com.google.common.collect.ImmutableBiMap:inverse(),582,583,"/**
* Returns an immutable inverse of this bi-map. Maps values to keys.
*/","* {@inheritDoc}
   *
   * <p>The inverse of an {@code ImmutableBiMap} is another {@code ImmutableBiMap}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,combine,com.google.common.collect.ImmutableBiMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),419,424,"/**
* Combines with another builder, delegating to super class.
* @param builder The builder to combine with.
* @return This builder instance.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,combine,com.google.common.collect.ImmutableSortedMap$Builder:combine(com.google.common.collect.ImmutableMap$Builder),697,702,"/**
 * Combines with another builder, then returns this builder.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,builder,com.google.common.collect.ImmutableList:builder(),759,761,"/**
 * Creates a new Builder instance.
 * Returns a Builder object for constructing objects of type E.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,orderedBy,com.google.common.collect.ImmutableSortedSet:orderedBy(java.util.Comparator),396,398,"/**
 * Creates a new Builder instance with the given comparator.
 * @param comparator Comparator to define the order.
 * @return A new Builder instance.
 */
","* Returns a builder that creates immutable sorted sets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedSet<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,reverseOrder,com.google.common.collect.ImmutableSortedSet:reverseOrder(),404,406,"/**
 * Returns a Builder using reverse natural order.
 * Returns a new Builder instance.
 */
","* Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse
   * of their natural ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,naturalOrder,com.google.common.collect.ImmutableSortedSet:naturalOrder(),414,416,"/**
 * Returns a builder that sorts elements using natural ordering.
 */
","* Returns a builder that creates immutable sorted sets whose elements are ordered by their
   * natural ordering. The sorted sets use {@link Ordering#natural()} as the comparator. This method
   * provides more type-safety than {@link #builder}, as it can be called only for classes that
   * implement {@link Comparable}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,reverse,com.google.common.collect.ImmutableList:reverse(),633,635,"/**
 * Returns a reversed view of the list.
 * Returns the original list if size <= 1.
 */
","* Returns a view of this immutable list in reverse order. For example, {@code ImmutableList.of(1,
   * 2, 3).reverse()} is equivalent to {@code ImmutableList.of(3, 2, 1)}.
   *
   * @return a view of this immutable list in reverse order
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,charactersOf,com.google.common.collect.Lists:charactersOf(java.lang.String),749,751,"/**
 * Returns an ImmutableList of characters from the given string.
 * @param string The string to convert.
 * @return An ImmutableList containing the string's characters.
 */
","* Returns a view of the specified string as an immutable list of {@code Character} values.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createValues,com.google.common.collect.RegularImmutableMap:createValues(),372,375,"/**
 * Creates an immutable collection of values for the map.
 * @return Immutable collection of values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,of,com.google.common.collect.ImmutableList:of(java.lang.Object),98,100,"/**
 * Creates an immutable list containing a single element.
 * @param e1 The element to be the sole item in the list.
 * @return An ImmutableList containing only the provided element.
 */
","* Returns an immutable list containing a single element. This list behaves and performs
   * comparably to {@link Collections#singletonList}, but will not accept a null element. It is
   * preferable mainly for consistency and maintainability of your code.
   *
   * @throws NullPointerException if the element is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,entries,com.google.common.collect.ImmutableSetMultimap:entries(),594,598,"/**
 * Returns an immutable set of entries. Lazily initialized.
 */","* Returns an immutable collection of all key-value pairs in the multimap. Its iterator traverses
   * the values for the first key, the values for the second key, and so on.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,of,com.google.common.collect.ImmutableSet:of(java.lang.Object),91,93,"/**
 * Creates an immutable set containing a single element.
 * @param e1 The element to be added to the set.
 * @return An immutable set with the given element.
 */
","* Returns an immutable set containing the given element. Preferred over {@link
   * Collections#singleton} for code consistency, {@code null} rejection, and because the return
   * type conveys the immutability guarantee.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,iterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:iterator(),62,65,"/**
 * Returns an unmodifiable iterator over the entries.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$Indexed:iterator(),338,341,"/**
 * Returns an unmodifiable iterator over the elements in this set.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,iterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:iterator(),396,399,"/**
 * Returns an unmodifiable iterator for the list.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/IndexedImmutableSet.java,iterator,com.google.common.collect.IndexedImmutableSet:iterator(),32,35,"/**
 * Returns an unmodifiable iterator over the elements in this collection.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,iterator,com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet:iterator(),264,267,"/**
 * Returns an iterator over entries in the map.
 * Uses the underlying list's iterator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,iterator,com.google.common.collect.RegularImmutableSortedSet:iterator(),69,72,"/**
 * Returns an unmodifiable iterator for the elements in this collection.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,hashCode,com.google.common.collect.Sets$CartesianSet:hashCode(),1626,1646,"/**
 * Calculates the hash code for the set of sets.
 * Uses a complex formula for consistent results.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,charset,com.google.common.net.MediaType:charset(),857,875,"/**
 * Returns the charset, parsing if necessary.
 * Returns Optional<Charset>, null if absent.
 */
","* Returns an optional charset for the value of the charset parameter if it is specified.
   *
   * @throws IllegalStateException if multiple charset values have been set for this media type
   * @throws IllegalCharsetNameException if a charset value is present, but illegal
   * @throws UnsupportedCharsetException if a charset value is present, but no support is available
   *     in this instance of the Java virtual machine",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotation,com.google.common.reflect.Parameter:getAnnotation(java.lang.Class),77,86,"/**
 * Retrieves an annotation of specified type.
 * @param annotationType Annotation type to search for.
 * @return Annotation instance or null if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$WildcardTypeImpl:toString(),502,512,"/**
 * Returns a string representation of the type bounds.
 * Uses lowerBounds and upperBounds to construct the string.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopAsync,com.google.common.util.concurrent.ServiceManager:stopAsync(),340,346,"/**
 * Stops all managed services asynchronously.
 * Returns the ServiceManager instance for chaining.
 */","* Initiates service {@linkplain Service#stopAsync shutdown} if necessary on all the services
   * being managed.
   *
   * @return this",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,isHealthy,com.google.common.util.concurrent.ServiceManager:isHealthy(),390,397,"/**
 * Checks if all services are running. Returns true if all are, false otherwise.
 */
","* Returns true if all services are currently in the {@linkplain State#RUNNING running} state.
   *
   * <p>Users who want more detailed information should use the {@link #servicesByState} method to
   * get detailed information about which services are not running.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,writeReplace,com.google.common.collect.ImmutableBiMap:writeReplace(),635,639,"/**
* Returns a SerializedForm object for serialization.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,<init>,com.google.common.collect.ImmutableSet$Builder:<init>(),481,483,"/**
 * Constructs a new Builder with an initial capacity of 0.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builderWithExpectedSize,com.google.common.collect.ImmutableSet:builderWithExpectedSize(int),449,452,"/**
 * Creates a new Builder with the specified expected size.
 * @param expectedSize The initial capacity of the builder.
 */
","* Returns a new builder, expecting the specified number of distinct elements to be added.
   *
   * <p>If {@code expectedSize} is exactly the number of distinct elements added to the builder
   * before {@link Builder#build} is called, the builder is likely to perform better than an unsized
   * {@link #builder()} would have.
   *
   * <p>It is not specified if any performance benefits apply if {@code expectedSize} is close to,
   * but not exactly, the number of distinct elements added to the builder.
   *
   * @since 23.1",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$Builder:copy(),510,513,"/**
 * Creates a copy of the underlying implementation.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,subListUnchecked,"com.google.common.collect.ImmutableSortedAsList:subListUnchecked(int,int)",76,86,"/**
 * Returns a sublist of this sorted set.
 * @param fromIndex start index (inclusive)
 * @param toIndex   end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,spliterator,com.google.common.collect.ImmutableSortedAsList:spliterator(),88,95,"/**
 * Returns a spliterator for the list, enabling efficient parallel processing.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,lastIndexOf,com.google.common.collect.ImmutableSortedAsList:lastIndexOf(java.lang.Object),64,68,"/**
* Returns the last index of the target object in this set.
* Delegates to indexOf, returning -1 if target is absent.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedAsList.java,contains,com.google.common.collect.ImmutableSortedAsList:contains(java.lang.Object),70,74,"/**
 * Checks if the set contains the target object.
 * @param target The object to search for.
 * @return True if found, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,hashCode,com.google.common.collect.ImmutableRangeMap:hashCode(),404,407,"/**
 * Returns the hash code, based on the ranges' hash code.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,equals,com.google.common.collect.ImmutableRangeMap:equals(java.lang.Object),409,416,"/**
 * Checks if this RangeMap is equal to another RangeMap.
 * @param o The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,writeReplace,com.google.common.collect.ImmutableRangeMap:writeReplace(),454,456,"/**
 * Returns an object to be used during deserialization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,writeReplace,com.google.common.collect.ImmutableSortedMap:writeReplace(),1160,1164,"/**
 * Returns a SerializedForm instance to control serialization.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,"com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",284,289,"/**
* Adds all values from the given iterable to the map for the key.
* @param key the key to associate with the values
* @param values iterable of values to add
* @return this builder
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,putAll,com.google.common.collect.ImmutableMultimap$Builder:putAll(com.google.common.collect.Multimap),322,329,"/**
 * Adds all entries from the given multimap to this builder.
 * @param multimap multimap to add entries from
 * @return this builder
 */
","* Stores another multimap's entries in the built multimap. The generated multimap's key and
     * value orderings correspond to the iteration ordering of the {@code multimap.asMap()} view,
     * with new keys and values following any existing keys and values.
     *
     * @throws NullPointerException if any key or value in {@code multimap} is null. The builder is
     *     left in an invalid state.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,combine,com.google.common.collect.ImmutableMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),353,361,"/**
 * Combines another builder's entries into this builder.
 * @param other The builder to combine from.
 * @return This builder.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,"com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Object,java.lang.Iterable)",333,338,"/**
* Adds all values from the given iterable to the specified key.
* @param key the key to associate the values with
* @param values iterable of values to add
* @return this builder
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,throwDeleteFailed,"com.google.common.io.MoreFiles:throwDeleteFailed(java.nio.file.Path,java.util.Collection)",786,804,"/**
 * Throws a FileSystemException if file deletion fails, including suppressed IOExceptions.
 */","* Throws an exception indicating that one or more files couldn't be deleted when deleting {@code
   * path} or its contents.
   *
   * <p>If there is only one exception in the collection, and it is a {@link NoSuchFileException}
   * thrown because {@code path} itself didn't exist, then throws that exception. Otherwise, the
   * thrown exception contains all the exceptions in the given collection as suppressed exceptions.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/SimpleTimeLimiter.java,callWithTimeout,"com.google.common.util.concurrent.SimpleTimeLimiter:callWithTimeout(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit,boolean)",110,133,"/**
 * Executes a Callable with a timeout.
 * @param callable Callable to execute.
 * @param timeoutDuration Timeout duration.
 * @param timeoutUnit Timeout unit.
 * @return Result of the Callable.
 * @throws Exception If timeout or execution error.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,com.google.common.collect.Iterators:concat(java.util.Iterator),556,559,"/**
 * Concatenates multiple iterators into a single iterator.
 * @param inputs Iterators to concatenate; can be empty.
 * @return A new iterator containing elements from all inputs.
 */
","* Combines multiple iterators into a single iterator. The returned iterator iterates across the
   * elements of each iterator in {@code inputs}. The input iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.
   *
   * @throws NullPointerException if any of the provided iterators is null",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,readObject,com.google.common.collect.LinkedListMultimap:readObject(java.io.ObjectInputStream),854,867,"/**
 * Reconstitutes the map from a stream.
 * @param stream ObjectInputStream to read from.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,lastIndexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:lastIndexOf(java.lang.Object),668,672,"/**
 * Returns the last index of the object in the list.
 * @param object the object to search for
 * @return last index or -1 if not found
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList:contains(java.lang.Object),435,438,"/**
 * Checks if the collection contains the given object.
 * @param object The object to search for.
 * @return True if the object is found, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,indexOf,com.google.common.collect.ImmutableList$ReverseImmutableList:indexOf(java.lang.Object),662,666,"/**
 * Returns the index of the first occurrence of the object.
 * @param object the object to search for
 * @return the index or -1 if not found
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,nextEntry,com.google.common.collect.MapMakerInternalMap$HashIterator:nextEntry(),2613,2620,"/**
 * Returns the next element in the sequence.
 * Throws NoSuchElementException if no next element exists.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",632,638,"/**
 * Creates a new StrongKeyDummyValueSegment with the given capacity.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",439,446,"/**
 * Creates a new StrongKeyStrongValueSegment.
 * @param map The map to which this segment belongs.
 * @param initialCapacity Initial capacity of the segment.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",537,543,"/**
 * Creates a new StrongKeyWeakValueSegment.
 * @param map The map.
 * @param initialCapacity Initial segment capacity.
 * @return New StrongKeyWeakValueSegment instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",744,749,"/**
 * Creates a new WeakKeyDummyValueSegment with the given capacity.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",833,839,"/**
 * Creates a new WeakKeyStrongValueSegment with the given capacity.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newSegment,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newSegment(com.google.common.collect.MapMakerInternalMap,int)",933,938,"/**
 * Creates a new WeakKeyWeakValueSegment with the given capacity.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getLiveEntry,"com.google.common.collect.MapMakerInternalMap$Segment:getLiveEntry(java.lang.Object,int)",1435,1437,"/**
 * Retrieves a live entry for the given key and hash.
 * @param key The key to search for.
 * @param hash The hash code of the key.
 * @return The live entry or null if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,getEntry,com.google.common.collect.MapMakerInternalMap:getEntry(java.lang.Object),2368,2374,"/**
 * Retrieves an entry by key. Returns null if key is null.
 */","* Returns the internal entry for the specified key. The entry may be computing or partially
   * collected. Does not impact recency ordering.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",1498,1553,"/**
 * Associates the specified value with the key in this map.
 * @param key key for the mapping
 * @param value value for the mapping
 * @param onlyIfAbsent if true, only adds if key absent
 * @return previous value or null if new
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",1624,1669,"/**
 * Replaces the value associated with a key if present.
 * @param key The key of the entry to replace.
 * @param hash Hash code of the key.
 * @param oldValue The expected old value.
 * @param newValue The new value. Returns true if replaced.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap$Segment:replace(java.lang.Object,int,java.lang.Object)",1671,1710,"/**
 * Replaces the value for a given key. Returns the old value, or null if not found.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int)",1712,1751,"/**
 * Removes the entry associated with the given key and hash.
 * @param key the key of the entry to remove
 * @param hash the hash code of the key
 * @return the value of the removed entry, or null if not found
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap$Segment:remove(java.lang.Object,int,java.lang.Object)",1753,1792,"/**
* Removes the entry with the given key, hash, and value.
* Returns true if removed, false otherwise.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,run,com.google.common.collect.MapMakerInternalMap$CleanupMapTask:run(),2285,2295,"/**
 * Runs cleanup on all segments of the referenced map.
 * Throws CancellationException if the map is null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,postReadCleanup,com.google.common.collect.MapMakerInternalMap$Segment:postReadCleanup(),1988,1992,"/**
 * Performs cleanup after a read operation, if threshold is met.
 */","* Performs routine cleanup following a read. Normally cleanup happens during writes, or from
     * the cleanupExecutor. If cleanup is not observed after a sufficient number of reads, try
     * cleaning up from the read thread.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$EntrySet:clear(),2781,2784,"/**
 * Clears the map, removing all key-value mappings.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$KeySet:clear(),2703,2706,"/**
* Clears the map, removing all key-value pairs.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,clear,com.google.common.collect.MapMakerInternalMap$Values:clear(),2732,2735,"/**
 * Clears the map, removing all key-value pairs.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,newEntry,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",966,975,"/**
 * Creates a new WeakKeyWeakValueEntry, linked or unlinked.
 * @param segment Segment the entry belongs to.
 * @param key Key for the entry.
 * @param hash Hash code of the key.
 * @param next Next entry in the linked list (optional).
 * @return New WeakKeyWeakValueEntry instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardContainsKey,com.google.common.collect.ForwardingSortedMap:standardContainsKey(java.lang.Object),132,143,"/**
 * Checks if the sorted map contains the key.
 * @param key The key to check. Returns true if present.
 */
","* A sensible definition of {@link #containsKey} in terms of the {@code firstKey()} method of
   * {@link #tailMap}. If you override {@link #tailMap}, you may wish to override {@link
   * #containsKey} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedMap.java,standardSubMap,"com.google.common.collect.ForwardingSortedMap:standardSubMap(java.lang.Object,java.lang.Object)",152,155,"/**
 * Returns a submap with keys from fromKey to toKey (inclusive).
 * @param fromKey start key
 * @param toKey end key
 * @return SortedMap containing keys between fromKey and toKey
 */
","* A sensible default implementation of {@link #subMap(Object, Object)} in terms of {@link
   * #headMap(Object)} and {@link #tailMap(Object)}. In some situations, you may wish to override
   * {@link #subMap(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,size,com.google.common.collect.ForwardingMap:size(),67,70,"/**
 * Returns the size of the delegated collection.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,isEmpty,com.google.common.collect.ForwardingMap:isEmpty(),72,75,"/**
 * Checks if the underlying collection is empty.
 * Returns true if empty, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,remove,com.google.common.collect.ForwardingMap:remove(java.lang.Object),77,81,"/**
 * Removes the specified key's mapping.
 * @param key the key whose mapping to be removed
 * @return the removed value, or null if not found
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,clear,com.google.common.collect.ForwardingMap:clear(),83,86,"/**
 * Clears the underlying data structure.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsKey,com.google.common.collect.ForwardingMap:containsKey(java.lang.Object),88,91,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the key exists, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,containsValue,com.google.common.collect.ForwardingMap:containsValue(java.lang.Object),93,96,"/**
 * Checks if the map contains a specific value.
 * @param value Value to search for. Returns true if found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,get,com.google.common.collect.ForwardingMap:get(java.lang.Object),98,101,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to look up.
 * @return The value or null if the key is not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,put,"com.google.common.collect.ForwardingMap:put(java.lang.Object,java.lang.Object)",103,107,"/**
* Puts the specified value to the specified key in the delegate.
* @param key The key with which the value is to be associated.
* @param value The value to be associated with the key.
* @return The previous value associated with the key, or null.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,putAll,com.google.common.collect.ForwardingMap:putAll(java.util.Map),109,112,"/**
* Adds all entries from the given map to this map.
* @param map the map whose entries are added
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,keySet,com.google.common.collect.ForwardingMap:keySet(),114,117,"/**
* Returns the key set of the delegate map.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,values,com.google.common.collect.ForwardingMap:values(),119,122,"/**
 * Returns a collection of the values in this map.
 * Delegates to the underlying map's values() method.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,entrySet,com.google.common.collect.ForwardingMap:entrySet(),124,127,"/**
* Returns the entry set view of the map's entries.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,equals,com.google.common.collect.ForwardingMap:equals(java.lang.Object),129,132,"/**
 * Checks if this object is equal to another object.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,hashCode,com.google.common.collect.ForwardingMap:hashCode(),134,137,"/**
 * Returns the hash code, delegating to the underlying delegate object.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map,com.google.common.base.Equivalence)",527,540,"/**
 * Computes the difference between two maps using a value equivalence.
 * @param left Left map.
 * @param right Right map.
 * @param valueEquivalence Equivalence for comparing values.
 * @return MapDifference object representing the difference.
 */
","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @param valueEquivalence the equivalence relationship to use to compare values
   * @return the difference between the two maps
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.SortedMap,java.util.Map)",559,573,"/**
 * Calculates the difference between two sorted maps.
 * @param left Left sorted map.
 * @param right Right map.
 * @return SortedMapDifference representing the difference.
 */
","* Computes the difference between two sorted maps, using the comparator of the left map, or
   * {@code Ordering.natural()} if the left map uses the natural ordering of its elements. This
   * difference is an immutable snapshot of the state of the maps at the time this method is called.
   * It will never change, even if the maps change at a later time.
   *
   * <p>Since this method uses {@code TreeMap} instances internally, the keys of the right map must
   * all compare as distinct according to the comparator of the left map.
   *
   * <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call
   * {@code left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.lang.String,java.util.concurrent.Executor)",36,38,"/**
 * Constructs an AsyncEventBus with identifier and executor.
 */
","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events. Assigns {@code
   * identifier} as the bus's name for logging purposes.
   *
   * @param identifier short name for the bus, for logging purposes.
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,"com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor,com.google.common.eventbus.SubscriberExceptionHandler)",49,51,"/**
 * Creates an AsyncEventBus with a given executor and exception handler.
 */
","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.
   * @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.
   *     See {@link SubscriberExceptionHandler} for more information.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/AsyncEventBus.java,<init>,com.google.common.eventbus.AsyncEventBus:<init>(java.util.concurrent.Executor),59,61,"/**
 * Constructs an AsyncEventBus with a provided executor.
 * @param executor Executor for asynchronous event handling.
 */
","* Creates a new AsyncEventBus that will use {@code executor} to dispatch events.
   *
   * @param executor Executor to use to dispatch events. It is the caller's responsibility to shut
   *     down the executor after the last event has been posted to this event bus.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(java.lang.String),175,178,"/**
 * Creates an EventBus with a given identifier.
 * @param identifier EventBus identifier.
 */
","* Creates a new EventBus with the given {@code identifier}.
   *
   * @param identifier a brief name for this bus, for logging purposes. Should be a valid Java
   *     identifier.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(com.google.common.eventbus.SubscriberExceptionHandler),186,188,"/**
 * Constructs an EventBus with default name and dispatchers.
 * @param exceptionHandler Handler for exceptions during event handling.
 */
","* Creates a new EventBus with the given {@link SubscriberExceptionHandler}.
   *
   * @param exceptionHandler Handler for subscriber exceptions.
   * @since 16.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinChild(int),617,619,"/**
* Finds the index of the minimum child of a node.
* @param index index of the parent node
* @return index of the minimum child
*/
",Returns the minimum child or {@code -1} if no child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,findMinGrandChild,com.google.common.collect.MinMaxPriorityQueue$Heap:findMinGrandChild(int),622,628,"/**
 * Finds the minimum grandchild of a node at the given index.
 * Returns -1 if no grandchild exists.
 */
",Returns the minimum grand child or -1 if no grand child exists.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,peekLast,com.google.common.collect.MinMaxPriorityQueue:peekLast(),390,392,"/**
 * Retrieves and removes the last element of the list, or null if empty.
 */","* Retrieves, but does not remove, the greatest element of this queue, or returns {@code null} if
   * the queue is empty.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,bubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:bubbleUp(int,java.lang.Object)",565,576,"/**
 * Moves element x up the heap until heap property is restored.
 * @param index Index of the element to move up.
 * @param x The element to be moved.
 */
",Bubbles a value from {@code index} up the appropriate heap if required.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:get(java.lang.Object),873,876,"/**
 * Retrieves a sorted set of values associated with the given key.
 * @param key the key to retrieve values for
 * @return unmodifiable sorted set of values or an empty set
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,valueComparator,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:valueComparator(),888,891,"/**
 * Returns the value comparator from the delegate.
 * @return Value comparator or null if the delegate doesn't have one.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardContains,com.google.common.collect.ForwardingMultiset:standardContains(java.lang.Object),114,117,"/**
 * Checks if the collection contains the given object.
 * @param object The object to search for.
 * @return True if found, false otherwise.
 */
","* A sensible definition of {@link #contains} in terms of {@link #count}. If you override {@link
   * #count}, you may wish to override {@link #contains} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAdd,com.google.common.collect.ForwardingMultiset:standardAdd(java.lang.Object),154,157,"/**
 * Adds an element to the collection and returns true.
 * @param element The element to add.
 * @return True after adding the element.
 */
","* A sensible definition of {@link #add(Object)} in terms of {@link #add(Object, int)}. If you
   * override {@link #add(Object, int)}, you may wish to override {@link #add(Object)} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardRemove,com.google.common.collect.ForwardingMultiset:standardRemove(java.lang.Object),178,181,"/**
 * Removes a single instance of the element.
 * @param element element to remove
 * @return true if removed, false otherwise
 */
","* A sensible definition of {@link #remove(Object)} in terms of {@link #remove(Object, int)}. If
   * you override {@link #remove(Object, int)}, you may wish to override {@link #remove(Object)} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardClear,com.google.common.collect.ForwardingMultiset:standardClear(),126,129,"/**
* Clears the map entries using the entry set iterator.
*/
","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #clear} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardCount,com.google.common.collect.ForwardingMultiset:standardCount(java.lang.Object),138,145,"/**
 * Counts occurrences of an object in the entry set.
 * @param object The object to count. Returns 0 if not found.
 */
","* A sensible, albeit inefficient, definition of {@link #count} in terms of {@link #entrySet}. If
   * you override {@link #entrySet}, you may wish to override {@link #count} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardHashCode,com.google.common.collect.ForwardingMultiset:standardHashCode(),296,298,"/**
 * Calculates the hash code based on the entry set's hash code.
 */","* A sensible definition of {@link #hashCode} as {@code entrySet().hashCode()} . If you override
   * {@link #entrySet}, you may wish to override {@link #hashCode} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardToString,com.google.common.collect.ForwardingMultiset:standardToString(),307,310,"/**
 * Returns a string representation of the map, using entry set.
 */","* A sensible definition of {@link #toString} as {@code entrySet().toString()} . If you override
   * {@link #entrySet}, you may wish to override {@link #toString} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,toArray,com.google.common.collect.ImmutableCollection:toArray(),193,197,"/**
 * Returns an array representation of this collection.
 * Delegates to toArray(T[] a).
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,toArray,com.google.common.collect.CompactLinkedHashSet:toArray(java.lang.Object[]),236,240,"/**
 * Converts this collection to an array of type T.
 * @param a array of type T to store the elements in
 * @return array containing elements of this collection
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(java.lang.Object[]),255,257,"/**
 * Converts collection to an array of type T.
 * @param array The array to convert, can be null.
 * @return An array of type T.
 */
","* A sensible definition of {@link #toArray(Object[])} in terms of {@link #size} and {@link
   * #iterator}. If you override either of these methods, you may wish to override {@link #toArray}
   * to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,toArray,com.google.common.collect.Synchronized$SynchronizedAsMapEntries:toArray(java.lang.Object[]),1000,1006,"/**
 * Converts the collection to an array of type T.
 * @param array The array to populate, may be reused.
 * @return An array containing the collection elements.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,max,com.google.common.collect.ReverseOrdering:max(java.lang.Iterable),88,91,"/**
 * Returns the maximum element of the given iterable.
 * Uses forwardOrder.min() to achieve this.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ReverseOrdering.java,min,com.google.common.collect.ReverseOrdering:min(java.lang.Iterable),67,70,"/**
 * Returns the minimum element of the iterable.
 * @param iterable iterable to find the minimum from
 * @return the minimum element in the iterable
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,descendingSet,com.google.common.collect.Maps$6:descendingSet(),155,158,"/**
 * Returns a descending sorted set backed by the delegate set.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardPollLast,com.google.common.collect.ForwardingNavigableSet:standardPollLast(),141,143,"/**
 * Polls the last element from the iterator.
 * Returns the element or null if empty.
 */
","* A sensible definition of {@link #pollLast} in terms of the {@code descendingIterator} method.
   * If you override {@link #descendingIterator} you may wish to override {@link #pollLast} to
   * forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLast,com.google.common.collect.ForwardingNavigableSet:standardLast(),150,153,"/**
 * Returns the last element using a descending iterator.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,java.lang.Object)",209,213,"/**
 * Returns a sorted subset from fromElement (inclusive) to toElement (exclusive).
 */","* A sensible definition of {@link #subSet(Object, Object)} in terms of the {@link #subSet(Object,
   * boolean, Object, boolean)} method. If you override {@link #subSet(Object, boolean, Object,
   * boolean)}, you may wish to override {@link #subSet(Object, Object)} to forward to this
   * implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,subSet,"com.google.common.collect.Maps$6:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",181,188,"/**
 * Returns a view of the portion of this set between fromElement and toElement.
 * @param fromElement lower bound (inclusive or exclusive)
 * @param fromInclusive true for inclusive, false for exclusive
 * @param toElement upper bound (inclusive or exclusive)
 * @param toInclusive true for inclusive, false for exclusive
 * @return a view of the set between the specified elements
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardLower,com.google.common.collect.ForwardingNavigableSet:standardLower(java.lang.Object),71,73,"/**
 * Returns the element immediately preceding {@code e} in the set.
 * @param e the element to find the predecessor of
 * @return the predecessor element, or null if none exists
 */
","* A sensible definition of {@link #lower} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #lower} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardFloor,com.google.common.collect.ForwardingNavigableSet:standardFloor(java.lang.Object),85,87,"/**
 * Returns the element immediately preceding 'e' in the set, or null.
 */","* A sensible definition of {@link #floor} in terms of the {@code descendingIterator} method of
   * {@link #headSet(Object, boolean)}. If you override {@link #headSet(Object, boolean)}, you may
   * wish to override {@link #floor} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHeadSet,com.google.common.collect.ForwardingNavigableSet:standardHeadSet(java.lang.Object),225,227,"/**
* Returns a sorted set containing elements less than `toElement`.
* @param toElement element to which the head set extends, exclusive.
*/
","* A sensible definition of {@link #headSet(Object)} in terms of the {@link #headSet(Object,
   * boolean)} method. If you override {@link #headSet(Object, boolean)}, you may wish to override
   * {@link #headSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,headSet,"com.google.common.collect.Maps$6:headSet(java.lang.Object,boolean)",215,218,"/**
 * Returns a view of the set containing elements up to `toElement`.
 * @param toElement element to end the view, inclusive or exclusive
 * @param inclusive whether to include `toElement`
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardCeiling,com.google.common.collect.ForwardingNavigableSet:standardCeiling(java.lang.Object),99,101,"/**
* Returns the next higher element than 'e' in the sorted set, or null.
*/","* A sensible definition of {@link #ceiling} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #ceiling} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardHigher,com.google.common.collect.ForwardingNavigableSet:standardHigher(java.lang.Object),113,115,"/**
 * Returns the next higher element than 'e' or null if none.
 */","* A sensible definition of {@link #higher} in terms of the {@code iterator} method of {@link
   * #tailSet(Object, boolean)}. If you override {@link #tailSet(Object, boolean)}, you may wish to
   * override {@link #higher} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardSubSet,"com.google.common.collect.ForwardingNavigableSet:standardSubSet(java.lang.Object,boolean,java.lang.Object,boolean)",195,201,"/**
 * Returns a sub-set by lower (inclusive) and upper (exclusive) bounds.
 */","* A sensible definition of {@link #subSet(Object, boolean, Object, boolean)} in terms of the
   * {@code headSet} and {@code tailSet} methods. In many cases, you may wish to override {@link
   * #subSet(Object, boolean, Object, boolean)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,standardTailSet,com.google.common.collect.ForwardingNavigableSet:standardTailSet(java.lang.Object),239,241,"/**
* Returns a sorted set containing elements not less than fromElement.
* @param fromElement the lower bound, inclusive
* @return a new sorted set
*/
","* A sensible definition of {@link #tailSet(Object)} in terms of the {@link #tailSet(Object,
   * boolean)} method. If you override {@link #tailSet(Object, boolean)}, you may wish to override
   * {@link #tailSet(Object)} to forward to this implementation.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,tailSet,"com.google.common.collect.Maps$6:tailSet(java.lang.Object,boolean)",229,232,"/**
 * Returns a tail set from the given element, inclusive or exclusive.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,comparator,com.google.common.collect.ForwardingSortedSet:comparator(),70,73,"/**
 * Returns the comparator used for ordering elements, or null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,first,com.google.common.collect.ForwardingSortedSet:first(),75,79,"/**
 * Returns the first element from the underlying delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.ForwardingSortedSet:headSet(java.lang.Object),81,84,"/**
 * Returns elements lexicographically less than toElement.
 * @param toElement element to return elements before.
 * @return SortedSet of elements less than toElement.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,last,com.google.common.collect.ForwardingSortedSet:last(),86,90,"/**
 * Returns the last element of the list.
 * Delegates to the underlying list implementation.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.ForwardingSortedSet:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
 * Returns a sorted set containing elements from fromElement to toElement.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.ForwardingSortedSet:tailSet(java.lang.Object),97,100,"/**
 * Returns a sorted set containing elements from fromElement to the end.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedMultisets.java,descendingIterator,com.google.common.collect.SortedMultisets$NavigableElementSet:descendingIterator(),128,131,"/**
 * Returns a descending iterator over the set's elements.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$Row:remove(java.lang.Object),367,376,"/**
 * Removes the specified key's mapping.
 * @param key the key to remove
 * @return the removed value, or null if not found
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,clear,com.google.common.collect.StandardTable$Row:clear(),378,385,"/**
 * Clears the internal row map and maintains the empty invariant.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,headMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:headMap(java.lang.Object),122,127,"/**
 * Returns a view of the table's rows with keys up to (not including) toKey.
 * @param toKey the exclusive upper bound for keys in the view.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,subMap,"com.google.common.collect.StandardRowSortedTable$RowSortedMap:subMap(java.lang.Object,java.lang.Object)",129,135,"/**
 * Returns a view of the sorted table from fromKey to toKey (exclusive).
 * @param fromKey start key
 * @param toKey end key
 * @return SortedMap containing rows within the specified range
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,tailMap,com.google.common.collect.StandardRowSortedTable$RowSortedMap:tailMap(java.lang.Object),137,142,"/**
 * Returns a tail map containing entries whose keys are >= fromKey.
 * @param fromKey the key from which the tail map starts
 * @return a SortedMap representing the tail map
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.StandardRowSortedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of row keys.
* Returns the keyset of the underlying row map.
*/
","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowMap,com.google.common.collect.TreeBasedTable:rowMap(),85,88,"/**
 * Returns the row map, casting the result to SortedMap.
 */","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,rowKeySet,com.google.common.collect.HashBasedTable:rowKeySet(),665,668,"/**
 * Returns a set of row keys.
 * Returns the keySet from the internal rowMap.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,"com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet,java.lang.Object)",1576,1580,"/**
 * Wraps a NavigableSet with synchronization.
 * @param navigableSet The set to synchronize.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingSet,"com.google.common.collect.Synchronized:typePreservingSet(java.util.Set,java.lang.Object)",947,954,"/**
 * Returns a type-preserving set, SortedSet if input is SortedSet.
 * @param set The input set.
 * @param mutex Optional mutex for thread safety.
 * @return A type-preserving Set.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,iterator,com.google.common.collect.Synchronized$SynchronizedAsMapValues:iterator(),1447,1456,"/**
 * Returns an iterator over transformed collections of values.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedList:add(int,java.lang.Object)",380,385,"/**
 * Adds an element at the specified index, synchronized.
 * @param index Index to insert the element.
 * @param element Element to add.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addAll,"com.google.common.collect.Synchronized$SynchronizedList:addAll(int,java.util.Collection)",387,392,"/**
 * Adds all elements from the given collection to the list at index.
 * @param index index to add the collection's elements
 * @param c collection of elements to add
 * @return true if the list was modified
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedList:get(int),394,399,"/**
 * Retrieves the element at the specified index, thread-safe.
 * @param index Index of the element to retrieve.
 * @return The element at the given index.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,indexOf,com.google.common.collect.Synchronized$SynchronizedList:indexOf(java.lang.Object),401,406,"/**
 * Returns the index of the first occurrence of object o.
 * Synchronized to prevent race conditions.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastIndexOf,com.google.common.collect.Synchronized$SynchronizedList:lastIndexOf(java.lang.Object),408,413,"/**
 * Returns the last index of the specified element in the list.
 * @param o the element to search for
 * @return the last index or -1 if not found
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(),415,418,"/**
 * Returns a list iterator over the list.
 * Delegates to the underlying list's iterator.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listIterator,com.google.common.collect.Synchronized$SynchronizedList:listIterator(int),420,423,"/**
 * Returns a list iterator over the list from the specified index.
 * @param index starting index for the list iterator
 * @return ListIterator over the list from the given index
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedList:remove(int),425,430,"/**
 * Removes the element at the given index.
 * @param index Index of the element to remove.
 * @return The removed element.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,set,"com.google.common.collect.Synchronized$SynchronizedList:set(int,java.lang.Object)",432,437,"/**
 * Sets the element at the specified index, thread-safe.
 * @param index Index of the element to set.
 * @param element Element to be set at the index.
 * @return The element previously at the index.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceAll,com.google.common.collect.Synchronized$SynchronizedList:replaceAll(java.util.function.UnaryOperator),439,444,"/**
 * Replaces all elements matching a predicate with the result of an operator.
 * @param operator The operator to apply to each element.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sort,com.google.common.collect.Synchronized$SynchronizedList:sort(java.util.Comparator),446,451,"/**
 * Sorts the list using the provided comparator, synchronized.
 * @param c Comparator to use for sorting, or null for natural order.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subList,"com.google.common.collect.Synchronized$SynchronizedList:subList(int,int)",453,458,"/**
 * Returns a view of the list between fromIndex and toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedList:equals(java.lang.Object),460,468,"/**
 * Checks if this object is equal to another object.
 * @param o the object to compare to
 * @return true if objects are equal, false otherwise
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedList:hashCode(),470,475,"/**
 * Calculates the hash code, synchronizing access to the delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,count,com.google.common.collect.Synchronized$SynchronizedMultiset:count(java.lang.Object),511,516,"/**
 * Counts occurrences of object 'o', synchronizing access.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,add,"com.google.common.collect.Synchronized$SynchronizedMultiset:add(java.lang.Object,int)",518,523,"/**
 * Adds an element and increments count, thread-safe.
 * @param e element to add, can be null. @param n increment value.
 * @return Updated count after addition.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,"com.google.common.collect.Synchronized$SynchronizedMultiset:remove(java.lang.Object,int)",525,530,"/**
 * Removes an object from the list, synchronized.
 * @param o object to remove, can be null.
 * @param n number of occurrences to remove.
 * @return Number of elements actually removed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int)",532,537,"/**
 * Sets the count for a given element, wrapped in a synchronized block.
 * @param element The element to set the count for.
 * @param count The new count value.
 * @return The updated count value.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setCount,"com.google.common.collect.Synchronized$SynchronizedMultiset:setCount(java.lang.Object,int,int)",539,544,"/**
 * Sets the count for an element, wrapped in a synchronized block.
 * @param element The element to set the count for.
 * @param oldCount The old count value.
 * @param newCount The new count value.
 * @return True if the count was successfully set.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,elementSet,com.google.common.collect.Synchronized$SynchronizedMultiset:elementSet(),546,554,"/**
 * Returns a set containing all elements in the collection.
 * Thread-safe, lazily initializes the set.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entrySet,com.google.common.collect.Synchronized$SynchronizedMultiset:entrySet(),556,564,"/**
 * Returns a set view of the multiset entries. Synchronized.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedMultiset:equals(java.lang.Object),566,574,"/**
 * Checks if this object is equal to another object.
 * @param o The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedMultiset:hashCode(),576,581,"/**
 * Returns the hash code, synchronized to prevent race conditions.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedDeque:delegate(),1906,1909,"/**
 * Returns the underlying delegate Deque. Casts to Deque<E>.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,element,com.google.common.collect.Synchronized$SynchronizedQueue:element(),1857,1862,"/**
 * Returns the next element in the iteration.
 * Synchronized to prevent concurrent modification.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offer,com.google.common.collect.Synchronized$SynchronizedQueue:offer(java.lang.Object),1864,1869,"/**
 * Offers the specified element to the underlying queue.
 * Synchronized using mutex. Returns true if successful, false otherwise.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peek,com.google.common.collect.Synchronized$SynchronizedQueue:peek(),1871,1876,"/**
 * Retrieves and removes the head of the queue, or null if empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,poll,com.google.common.collect.Synchronized$SynchronizedQueue:poll(),1878,1883,"/**
 * Retrieves and removes the head of the queue, or null if empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,remove,com.google.common.collect.Synchronized$SynchronizedQueue:remove(),1885,1890,"/**
 * Removes and returns the next element from the underlying collection.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,equals,com.google.common.collect.Synchronized$SynchronizedSet:equals(java.lang.Object),282,290,"/**
 * Checks if this object is equal to another object.
 * @param o The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,hashCode,com.google.common.collect.Synchronized$SynchronizedSet:hashCode(),292,297,"/**
 * Returns the hash code, synchronizing access to the delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSet:delegate(),313,316,"/**
 * Returns the sorted set delegate. Casts the superclass delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,values,com.google.common.collect.Synchronized$SynchronizedBiMap:values(),1363,1371,"/**
 * Returns a set view of the values of this map, synchronized.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,forcePut,"com.google.common.collect.Synchronized$SynchronizedBiMap:forcePut(java.lang.Object,java.lang.Object)",1373,1378,"/**
 * Forces the key-value pair into the map, regardless of constraints.
 * @param key The key to insert.
 * @param value The value to associate with the key.
 * @return The previously associated value, or null.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedAsMap:get(java.lang.Object),1402,1408,"/**
 * Retrieves values associated with the given key.
 * Returns a type-preserving collection or null if absent.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableMap:delegate(),1609,1612,"/**
* Returns the underlying NavigableMap delegate.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedMap:comparator(),1294,1299,"/**
 * Returns the comparator used for ordering keys, or null.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:firstKey(),1301,1306,"/**
 * Returns the first key in the map.
 * Synchronized to prevent concurrent modification.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastKey,com.google.common.collect.Synchronized$SynchronizedSortedMap:lastKey(),1315,1320,"/**
 * Returns the last key in the map.
 * Synchronized to prevent race conditions.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedListMultimap:get(java.lang.Object),802,807,"/**
 * Retrieves a list associated with the given key.
 * @param key The key to look up.
 * @return List of values or an empty list if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",816,821,"/**
 * Replaces values associated with a key, synchronizing access.
 * @param key Key for value replacement.
 * @param values New values to replace the old ones.
 * @return List of replaced values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSetMultimap:get(java.lang.Object),847,852,"/**
 * Retrieves values associated with the given key.
 * @param key the key to retrieve values for
 * @return Set of values associated with the key.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSetMultimap:removeAll(java.lang.Object),854,859,"/**
 * Removes all elements associated with the given key.
 * @param key The key whose mappings will be removed.
 * @return A set containing all elements removed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",861,866,"/**
 * Replaces values for a key, synchronizing access.
 * @param key The key for which values are replaced.
 * @param values Iterable of new values.
 * @return Set of replaced values.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,entries,com.google.common.collect.Synchronized$SynchronizedSetMultimap:entries(),868,876,"/**
 * Returns a set view of the map's entries.
 * Uses synchronized access to ensure thread safety.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:delegate(),897,900,"/**
 * Returns the underlying SortedSetMultimap delegate.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Queues.java,synchronizedDeque,com.google.common.collect.Queues:synchronizedDeque(java.util.Deque),490,493,"/**
 * Returns a synchronized deque backed by the given deque.
 * @param deque the deque to be synchronized
 * @return a synchronized deque
 */
","* Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing deque is accomplished
   * through the returned deque.
   *
   * <p>It is imperative that the user manually synchronize on the returned deque when accessing any
   * of the deque's iterators:
   *
   * {@snippet :
   * Deque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque());
   * ...
   * deque.add(element);  // Needn't be in synchronized block
   * ...
   * synchronized (deque) {  // Must synchronize on deque!
   *   Iterator<E> i = deque.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned deque will be serializable if the specified deque is serializable.
   *
   * @param deque the deque to be wrapped in a synchronized view
   * @return a synchronized view of the specified deque
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,typePreservingCollection,"com.google.common.collect.Synchronized:typePreservingCollection(java.util.Collection,java.lang.Object)",933,945,"/**
 * Returns a type-preserving collection (SortedSet, Set, List, or Collection).
 * @param collection Input collection
 * @param mutex Optional mutex object
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rangeContains,com.google.common.collect.TreeBasedTable$TreeRow:rangeContains(java.lang.Object),219,223,"/**
 * Checks if the range contains the object.
 * @param o The object to check. Returns true if contained.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateLeft,com.google.common.collect.TreeMultiset$AvlNode:rotateLeft(),976,986,"/**
 * Performs a left rotation on the current node.
 * Returns the new root of the subtree after rotation.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rotateRight,com.google.common.collect.TreeMultiset$AvlNode:rotateRight(),988,998,"/**
 * Performs a right rotation on the current node.
 * Updates height and count information.
 * @return The new root of the subtree after rotation.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,aggregateForEntries,com.google.common.collect.TreeMultiset:aggregateForEntries(com.google.common.collect.TreeMultiset$Aggregate),166,176,"/**
 * Calculates aggregate value within a specified range.
 * @param aggr Aggregate object to perform aggregation.
 * @return Aggregate value within the range.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedCharEscaper.java,<init>,"com.google.common.escape.ArrayBasedCharEscaper:<init>(java.util.Map,char,char)",65,69,"/**
 * Constructs an ArrayBasedCharEscaper with a replacement map.
 * @param replacementMap Map of characters to their escaped strings.
 * @param safeMin The inclusive lower bound of safe characters.
 * @param safeMax The inclusive upper bound of safe characters.
 */
","* Creates a new ArrayBasedCharEscaper instance with the given replacement map and specified safe
   * range. If {@code safeMax < safeMin} then no characters are considered safe.
   *
   * <p>If a character has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/CharEscaperBuilder.java,toEscaper,com.google.common.escape.CharEscaperBuilder:toEscaper(),124,126,"/**
 * Creates an Escaper instance from the character array.
 * @return An Escaper object wrapping the character array.
 */
","* Convert this builder into a char escaper which is just a decorator around the underlying array
   * of replacement char[]s.
   *
   * @return an escaper that escapes based on the underlying array.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java,<init>,"com.google.common.escape.ArrayBasedUnicodeEscaper:<init>(java.util.Map,int,int,java.lang.String)",72,78,"/**
 * Creates an ArrayBasedUnicodeEscaper with a replacement map.
 * @param replacementMap Char to String map for escaping.
 * @param safeMin Minimum safe character code.
 * @param safeMax Maximum safe character code.
 * @param unsafeReplacement Replacement for unsafe chars.
 */
","* Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
   * safe range. If {@code safeMax < safeMin} then no code points are considered safe.
   *
   * <p>If a code point has no mapped replacement then it is checked against the safe range. If it
   * lies outside that, then {@link #escapeUnsafe} is called, otherwise no escaping is performed.
   *
   * @param replacementMap a map of characters to their escaped representations
   * @param safeMin the lowest character value in the safe range
   * @param safeMax the highest character value in the safe range
   * @param unsafeReplacement the default replacement for unsafe characters or null if no default
   *     replacement is required",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,checkedConnections,com.google.common.graph.StandardNetwork:checkedConnections(java.lang.Object),178,185,"/**
 * Retrieves checked network connections for a given node.
 * @param node The node to retrieve connections for.
 * @return NetworkConnections object.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,checkedConnections,com.google.common.graph.StandardValueGraph:checkedConnections(java.lang.Object),159,166,"/**
 * Retrieves connections for a given node.
 * @param node The node to retrieve connections for.
 * @return GraphConnections object, or throws exception if not found.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnectingInternal,"com.google.common.graph.StandardValueGraph:hasEdgeConnectingInternal(java.lang.Object,java.lang.Object)",172,175,"/**
 * Checks if nodeU has a direct edge to nodeV.
 * @param nodeU source node
 * @param nodeV destination node
 * @return true if an edge exists, false otherwise
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefaultInternal,"com.google.common.graph.StandardValueGraph:edgeValueOrDefaultInternal(java.lang.Object,java.lang.Object,java.lang.Object)",177,186,"/**
 * Returns the edge value between nodeU and nodeV, or defaultValue.
 * @param nodeU source node
 * @param nodeV target node
 * @param defaultValue value if edge doesn't exist
 * @return edge value or defaultValue
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,newTraversal,com.google.common.graph.Traverser$2:newTraversal(),345,345,"/**
* Creates a new traversal object for the graph.
* @return A new Traversal object.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytesInternal,com.google.common.hash.AbstractStreamingHasher:putBytesInternal(java.nio.ByteBuffer),110,134,"/**
 * Puts bytes from a buffer into the hasher, handling partial fills.
 * @param readBuffer ByteBuffer to read bytes from.
 * @return Hasher instance for chaining.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putByte,com.google.common.hash.AbstractStreamingHasher:putByte(byte),146,152,"/**
* Adds a byte to the buffer and munches if full.
* @param b The byte to add.
* @return The current Hasher instance.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putShort,com.google.common.hash.AbstractStreamingHasher:putShort(short),154,160,"/**
 * Adds a short value to the buffer.
 * @param s the short value to add
 * @return this hasher object for chaining
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putChar,com.google.common.hash.AbstractStreamingHasher:putChar(char),162,168,"/**
* Adds a character to the buffer and munches if full.
* @param c character to add
* @return The Hasher instance for chaining.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putInt,com.google.common.hash.AbstractStreamingHasher:putInt(int),170,176,"/**
 * Adds an integer to the buffer.
 * @param i the integer to add
 * @return this Hasher object for chaining
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putLong,com.google.common.hash.AbstractStreamingHasher:putLong(long),178,184,"/**
 * Adds a long to the buffer.
 * @param l The long value to add.
 * @return The current Hasher instance for chaining.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,fingerprint,"com.google.common.hash.FarmHashFingerprint64:fingerprint(byte[],int,int)",67,80,"/**
 * Calculates a fingerprint of byte array based on its length.
 * @param bytes byte array
 * @param offset start offset
 * @param length length of the data to fingerprint
 * @return long fingerprint value
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,fingerprint,"com.google.common.hash.Fingerprint2011:fingerprint(byte[],int,int)",58,74,"/**
 * Computes a 64-bit fingerprint of byte array.
 * @param bytes byte array to fingerprint
 * @param offset start offset in the byte array
 * @param length length of the data to fingerprint
 * @return 64-bit fingerprint value
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromBytes,com.google.common.hash.HashCode:fromBytes(byte[]),237,240,"/**
 * Creates a HashCode from a byte array.
 * @param bytes The byte array to create the HashCode from.
 * @return A HashCode object.
 */
","* Creates a {@code HashCode} from a byte array. The array is defensively copied to preserve the
   * immutability contract of {@code HashCode}. The array cannot be empty.
   *
   * @since 15.0 (since 12.0 in HashCodes)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashCode.java,fromString,com.google.common.hash.HashCode:fromString(java.lang.String),335,350,"/**
 * Creates a HashCode from a string. String must be at least 2 chars.
 */","* Creates a {@code HashCode} from a hexadecimal ({@code base 16}) encoded string. The string must
   * be at least 2 characters long, and contain only valid, lower-cased hexadecimal characters.
   *
   * <p>This method accepts the exact format generated by {@link #toString}. If you require more
   * lenient {@code base 16} decoding, please use {@link com.google.common.io.BaseEncoding#decode}
   * (and pass the result to {@link #fromBytes}).
   *
   * @since 15.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineOrdered,com.google.common.hash.Hashing:combineOrdered(java.lang.Iterable),698,712,"/**
 * Combines multiple HashCode objects into a single HashCode.
 * @param hashCodes Iterable of HashCode objects to combine.
 * @return Combined HashCode.
 */
","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an ordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in the <i>same</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,combineUnordered,com.google.common.hash.Hashing:combineUnordered(java.lang.Iterable),723,736,"/**
 * Combines an iterable of HashCode objects into a single HashCode.
 * Requires at least one HashCode and all must have same bit length.
 */
","* Returns a hash code, having the same bit length as each of the input hash codes, that combines
   * the information of these hash codes in an unordered fashion. That is, whenever two equal hash
   * codes are produced by two calls to this method, it is <i>as likely as possible</i> that each
   * was computed from the <i>same</i> input hash codes in <i>some</i> order.
   *
   * @throws IllegalArgumentException if {@code hashCodes} is empty, or the hash codes do not all
   *     have the same bit length",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MacHashFunction.java,hash,com.google.common.hash.MacHashFunction$MacHasher:hash(),134,139,"/**
 * Calculates the hash code based on the MAC's finalization.
 * @return HashCode object representing the calculated hash.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/MessageDigestHashFunction.java,hash,com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher:hash(),161,168,"/**
 * Calculates the hash code for the current state.
 * Returns a HashCode object representing the hash.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,makeHash,com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher:makeHash(),169,189,"/**
 * Calculates a hash code based on the object's length.
 * Returns a HashCode object representing the calculated hash.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,makeHash,com.google.common.hash.Crc32cHashFunction$Crc32cHasher:makeHash(),114,122,"/**
 * Calculates the hash code by processing remaining data and inverting crc0.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,fmix,"com.google.common.hash.Murmur3_32HashFunction:fmix(int,int)",259,267,"/**
 * Mixes a hash value with a length.
 * @param h1 initial hash value
 * @param length length to mix in
 * @return Mixed hash value as HashCode object
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/ChecksumHashFunction.java,hash,com.google.common.hash.ChecksumHashFunction$ChecksumHasher:hash(),91,104,"/**
 * Calculates the hash code based on the checksum value and bits.
 * @return HashCode object representing the calculated hash value.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,makeHash,com.google.common.hash.SipHashFunction$SipHasher:makeHash(),145,155,"/**
 * Calculates the hash code by combining internal state variables.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacMd5,com.google.common.hash.Hashing:hmacMd5(byte[]),318,320,"/**
 * Computes HMAC-MD5 hash using the provided key.
 * @param key The secret key for HMAC-MD5 calculation.
 * @return HMAC-MD5 hash object.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * MD5 (128 hash bits) hash function and a {@link SecretKeySpec} created from the given byte array
   * and the MD5 algorithm.
   *
   * <p>If you are designing a new system that needs HMAC, prefer {@link #hmacSha256} or other
   * future-proof algorithms <a
   * href=""https://datatracker.ietf.org/doc/html/rfc6151#section-2.3"">over {@code hmacMd5}</a>.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha1,com.google.common.hash.Hashing:hmacSha1(byte[]),342,344,"/**
 * Creates an HMAC-SHA1 hash function from a byte key.
 * @param key The secret key to use for the HMAC.
 * @return An HmacSHA1 hash function.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-1 (160 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-1 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha256,com.google.common.hash.Hashing:hmacSha256(byte[]),366,368,"/**
 * Creates an HMAC-SHA256 HashFunction from a byte key.
 * @param key The secret key as a byte array.
 * @return HMAC-SHA256 HashFunction.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-256 (256 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-256 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,hmacSha512,com.google.common.hash.Hashing:hmacSha512(byte[]),390,392,"/**
 * Calculates HMAC-SHA512 hash using the provided key.
 * @param key The secret key for HMAC calculation.
 * @return HMAC-SHA512 HashFunction object.
 */
","* Returns a hash function implementing the Message Authentication Code (MAC) algorithm, using the
   * SHA-512 (512 hash bits) hash function and a {@link SecretKeySpec} created from the given byte
   * array and the SHA-512 algorithm.
   *
   * @param key the key material of the secret key
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,<init>,com.google.common.io.ByteSource$EmptyByteSource:<init>(),652,654,"/**
 * Creates an empty ByteSource with an empty byte array.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,wrap,com.google.common.io.ByteSource:wrap(byte[]),427,429,"/**
 * Wraps a byte array as a ByteSource.
 * @param b The byte array to wrap.
 * @return A ByteSource backed by the given byte array.
 */
","* Returns a view of the given byte array as a {@link ByteSource}. To view only a specific range
   * in the array, use {@code ByteSource.wrap(b).slice(offset, length)}.
   *
   * <p>Note that the given byte array may be passed directly to methods on, for example, {@code
   * OutputStream} (when {@code copyTo(OutputStream)} is called on the resulting {@code
   * ByteSource}). This could allow a malicious {@code OutputStream} implementation to modify the
   * contents of the array, but provides better performance in the normal case.
   *
   * @since 15.0 (since 14.0 as {@code ByteStreams.asByteSource(byte[])}).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base16Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",992,995,"/**
 * Creates a new Base16Encoding instance with the given alphabet.
 * @param alphabet The alphabet to use for encoding.
 * @param paddingChar Optional padding character.
 * @return A new Base16Encoding instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,newInstance,"com.google.common.io.BaseEncoding$Base64Encoding:newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)",1049,1052,"/**
 * Creates a new Base64Encoding instance with the given alphabet and padding.
 * @param alphabet The alphabet to use.
 * @param paddingChar Optional padding character.
 * @return A new Base64Encoding object.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,omitPadding,com.google.common.io.BaseEncoding$StandardBaseEncoding:omitPadding(),851,854,"/**
 * Returns a BaseEncoding without padding.
 * Returns original if no padding, otherwise creates a new instance.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,withPadChar,com.google.common.io.BaseEncoding$StandardBaseEncoding:withPadChar(char),856,864,"/**
 * Returns a new BaseEncoding with the specified padding character.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,<init>,com.google.common.io.CharSource$EmptyCharSource:<init>(),677,679,"/**
 * Initializes an EmptyCharSource with an empty string.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,wrap,com.google.common.io.CharSource:wrap(java.lang.CharSequence),492,496,"/**
 * Wraps a CharSequence for efficient character access.
 * Uses StringCharSource for Strings, CharSequenceCharSource otherwise.
 */
","* Returns a view of the given character sequence as a {@link CharSource}. The behavior of the
   * returned {@code CharSource} and any {@code Reader} instances created by it is unspecified if
   * the {@code charSequence} is mutated while it is being read, so don't do that.
   *
   * @since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$AsByteSource:openStream(),524,527,"/**
 * Opens an input stream for reading characters using the charset.
 * @return InputStream for reading characters.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.lang.Iterable),109,111,"/**
* Writes an iterable of lines to the output stream.
* Uses system line separator.
*/
","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeLines,com.google.common.io.CharSink:writeLines(java.util.stream.Stream),132,134,"/**
 * Writes lines from a stream to the output, using default line separator.
 * @param lines Stream of character sequences to write.
 * @throws IOException if an I/O error occurs.
 */
","* Writes the given lines of text to this sink with each line (including the last) terminated with
   * the operating system's default line separator. This method is equivalent to {@code
   * writeLines(lines, System.getProperty(""line.separator""))}.
   *
   * @throws IOException if an I/O error occurs while writing to this sink
   * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/FileBackedOutputStream.java,write,com.google.common.io.FileBackedOutputStream:write(byte[]),207,210,"/**
 * Writes a byte array to the output stream.
 * @param b the byte array to be written
 * @throws IOException if an I/O error occurs
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ReaderInputStream.java,read,"com.google.common.io.ReaderInputStream:read(byte[],int,int)",129,191,"/**
 * Reads bytes from the input stream into the provided byte array.
 * @param b destination array
 * @param off offset into the array
 * @param len number of bytes to read
 * @return number of bytes read, or -1 if end of stream
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$ConcatenatedByteSource:openStream(),681,684,"/**
 * Opens an input stream from multiple sources.
 * @return InputStream from multiple sources, or null.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MultiInputStream.java,skip,com.google.common.io.MultiInputStream:skip(long),107,120,"/**
 * Skips specified bytes from the input stream.
 * @param n number of bytes to skip; returns skipped bytes.
 * @throws IOException if an I/O error occurs
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,openStream,com.google.common.io.CharSource$ConcatenatedCharSource:openStream(),695,698,"/**
* Opens a reader from the configured sources.
* Returns a MultiReader iterating through them.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$Partition:get(int),718,724,"/**
 * Returns a view of the list from the specified index.
 * @param index the starting index of the view
 * @return a sublist of the list
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double,com.google.common.hash.BloomFilter$Strategy)",438,463,"/**
 * Creates a BloomFilter with specified parameters.
 * @param funnel Funnel for hashing elements.
 * @param expectedInsertions Expected number of insertions.
 * @param fpp False positive probability.
 * @param strategy BloomFilter strategy.
 * @return A new BloomFilter instance.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,readFrom,"com.google.common.hash.BloomFilter:readFrom(java.io.InputStream,com.google.common.hash.Funnel)",618,661,"/**
 * Reads a BloomFilter from an InputStream.
 * @param in InputStream to read from.
 * @param funnel Funnel function for hashing elements.
 * @throws IOException if an I/O error occurs.
 */
","* Reads a byte stream, which was written by {@linkplain #writeTo(OutputStream)}, into a {@code
   * BloomFilter}.
   *
   * <p>The {@code Funnel} to be used is not encoded in the stream, so it must be provided here.
   * <b>Warning:</b> the funnel provided <b>must</b> behave identically to the one used to populate
   * the original Bloom filter!
   *
   * @throws IOException if the InputStream throws an {@code IOException}, or if its data does not
   *     appear to be a BloomFilter serialized using the {@linkplain #writeTo(OutputStream)} method.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,mean,com.google.common.math.DoubleMath:mean(java.lang.Iterable),488,493,"/**
 * Calculates the mean of a collection of numbers.
 * @param values iterable of Number objects
 * @return the arithmetic mean of the numbers
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of
   * {@code values}.
   *
   * <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
   * the arithmetic mean of the population.
   *
   * @param values a nonempty series of values, which will be converted to {@code double} values
   *     (this may cause loss of precision)
   * @throws IllegalArgumentException if {@code values} is empty or contains any non-finite value
   * @deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite
   *     values.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,log2,"com.google.common.math.DoubleMath:log2(double,java.math.RoundingMode)",239,279,"/**
 * Calculates the base-2 logarithm of a double, rounded according to mode.
 * @param x The double value. Must be positive and finite.
 * @param mode Rounding mode to apply.
 * @return The base-2 logarithm of x.
 */
","* Returns the base 2 logarithm of a double value, rounded with the specified rounding mode to an
   * {@code int}.
   *
   * <p>Regardless of the rounding mode, this is faster than {@code (int) log2(x)}.
   *
   * @throws IllegalArgumentException if {@code x <= 0.0}, {@code x} is NaN, or {@code x} is
   *     infinite",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundIntermediate,"com.google.common.math.DoubleMath:roundIntermediate(double,java.math.RoundingMode)",53,111,"/**
 * Rounds a double value according to the specified rounding mode.
 * @param x the double value to round
 * @param mode the rounding mode to use
 * @return the rounded double value
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,ensureTableCapacity,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:ensureTableCapacity(int),846,859,"/**
* Ensures the hash table has sufficient capacity.
* Expands the table if needed, based on minCapacity.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,hashFloodingDetected,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:hashFloodingDetected(java.lang.Object[]),889,925,"/**
 * Detects hash flooding in a hash table.
 * @param hashTable The hash table to check.
 * @return True if hash flooding is detected, false otherwise.
 */","* Checks the whole hash table for poor hash distribution. Takes O(n) in the worst case, O(n /
     * log n) on average.
     *
     * <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many
     * exactly matching hash codes, which would cause construction to take O(n^2), but can't detect
     * e.g. hash codes adversarially designed to go into ascending table locations, which keeps
     * construction O(n) (as desired) but then can have O(n) queries later.
     *
     * <p>If this returns false, then no query can take more than O(log n).
     *
     * <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains
     * operations take expected O(1) time but with high probability take O(log n) for at least some
     * element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)
     *
     * <p>This method may return {@code true} even on truly random input, but {@code
     * ImmutableSetTest} tests that the probability of that is low.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offer,com.google.common.collect.TopKSelector:offer(java.lang.Object),138,159,"/**
 * Adds an element to the buffer, maintaining sorted order.
 * @param elem The element to add.
 */
","* Adds {@code elem} as a candidate for the top {@code k} elements. This operation takes amortized
   * O(1) time.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Alphabet:<init>(java.lang.String,char[])",445,447,"/**
 * Constructs an Alphabet with provided name and character array.
 * @param name Alphabet name.
 * @param chars Character array for the alphabet.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$Alphabet:ignoreCase(),494,517,"/**
 * Creates a new Alphabet with case ignored.
 * Returns a new Alphabet instance with ignoreCase set to true.
 */",Returns an equivalent {@code Alphabet} except it ignores case.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,growIfNeeded,com.google.common.collect.MinMaxPriorityQueue:growIfNeeded(),958,965,"/**
 * Increases the queue's capacity if it's full.
 * Calculates and copies elements to a larger array.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,"com.google.common.collect.TopKSelector:least(int,java.util.Comparator)",79,82,"/**
 * Creates a TopKSelector to find the k smallest elements.
 * @param k the number of smallest elements to select
 * @param comparator comparator for ordering elements
 */
","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,"com.google.common.collect.TopKSelector:greatest(int,java.util.Comparator)",101,104,"/**
 * Creates a TopKSelector to find the k largest elements.
 * @param k The number of largest elements to select.
 * @param comparator Comparator for ordering the elements.
 */
","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the specified comparator, and returns them via {@link #topK} in descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$VerticalLinearTransformation:inverse(),262,266,"/**
 * Returns the inverse of this linear transformation.
 * Creates and caches inverse if not already computed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,and,"com.google.common.math.LinearTransformation$LinearTransformationBuilder:and(double,double)",82,90,"/**
 * Creates a new LinearTransformation based on two points (x1,y1) and (x2,y2).
 */","* Finish building an instance which also maps {@code x = x2} to {@code y = y2}. These values
     * must not both be identical to the values given in the first mapping. If only the {@code x}
     * values are identical, the transformation is vertical. If only the {@code y} values are
     * identical, the transformation is horizontal (i.e. the slope is zero).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,leastSquaresFit,com.google.common.math.PairedStats:leastSquaresFit(),181,198,"/**
 * Calculates a least-squares linear transformation.
 * Returns LinearTransformation or forNaN if conditions aren't met.
 */","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset must have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,leastSquaresFit,com.google.common.math.PairedStatsAccumulator:leastSquaresFit(),214,231,"/**
 * Calculates a least squares linear transformation.
 * Returns LinearTransformation or forNaN if conditions fail.
 */","* Returns a linear transformation giving the best fit to the data according to <a
   * href=""http://mathworld.wolfram.com/LeastSquaresFitting.html"">Ordinary Least Squares linear
   * regression</a> of {@code y} as a function of {@code x}. The count must be greater than one, and
   * either the {@code x} or {@code y} data must have a non-zero population variance (i.e. {@code
   * xStats().populationVariance() > 0.0 || yStats().populationVariance() > 0.0}). The result is
   * guaranteed to be horizontal if there is variance in the {@code x} data but not the {@code y}
   * data, and vertical if there is variance in the {@code y} data but not the {@code x} data.
   *
   * <p>This fit minimizes the root-mean-square error in {@code y} as a function of {@code x}. This
   * error is defined as the square root of the mean of the squares of the differences between the
   * actual {@code y} values of the data and the values predicted by the fit for the {@code x}
   * values (i.e. it is the square root of the mean of the squares of the vertical distances between
   * the data points and the best fit line). For this fit, this error is a fraction {@code sqrt(1 -
   * R*R)} of the population standard deviation of {@code y}, where {@code R} is the Pearson's
   * correlation coefficient (as given by {@link #pearsonsCorrelationCoefficient()}).
   *
   * <p>The corresponding root-mean-square error in {@code x} as a function of {@code y} is a
   * fraction {@code sqrt(1/(R*R) - 1)} of the population standard deviation of {@code x}. This fit
   * does not normally minimize that error: to do that, you should swap the roles of {@code x} and
   * {@code y}.
   *
   * <h3>Non-finite values</h3>
   *
   * <p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link
   * Double#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link
   * LinearTransformation#forNaN()}.
   *
   * @throws IllegalStateException if the dataset is empty or contains a single pair of values, or
   *     both the {@code x} and {@code y} dataset have zero population variance",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LinearTransformation.java,inverse,com.google.common.math.LinearTransformation$RegularLinearTransformation:inverse(),206,210,"/**
 * Returns the inverse of this linear transformation.
 * Creates and caches if not already computed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,isPrime,com.google.common.math.LongMath:isPrime(long),984,1036,"/**
 * Checks if a long is prime using a combination of methods.
 * @param n The number to check for primality.
 * @return True if n is prime, false otherwise.
 */","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,log10,"com.google.common.math.BigIntegerMath:log10(java.math.BigInteger,java.math.RoundingMode)",141,206,"/**
 * Calculates the floor of the base-10 logarithm of a BigInteger.
 * @param x BigInteger value to calculate log10 for, must be positive.
 * @param mode RoundingMode to use for the calculation.
 */
","* Returns the base-10 logarithm of {@code x}, rounded according to the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x <= 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code x}
   *     is not a power of ten",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,binomial,"com.google.common.math.LongMath:binomial(int,int)",791,849,"/**
 * Calculates the binomial coefficient (n choose k).
 * @param n non-negative integer
 * @param k non-negative integer, k <= n
 * @return binomial coefficient, may be Long.MAX_VALUE on overflow
 */
","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, or {@link Long#MAX_VALUE} if the result does not fit in a {@code long}.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStats.java,toString,com.google.common.math.PairedStats:toString(),240,254,"/**
 * Returns a string representation of the object.
 * Includes stats if population covariance exists.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,meanOf,com.google.common.math.Stats:meanOf(java.lang.Iterable),474,476,"/**
 * Calculates the mean of a collection of numbers.
 * @param values Iterable of Number objects
 * @return The arithmetic mean of the numbers.
 */
","* Returns the <a href=""http://en.wikipedia.org/wiki/Arithmetic_mean"">arithmetic mean</a> of the
   * values. The count must be non-zero.
   *
   * <p>The definition of the mean is the same as {@link Stats#mean}.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)
   * @throws IllegalArgumentException if the dataset is empty",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,add,"com.google.common.math.PairedStatsAccumulator:add(double,double)",46,67,"/**
 * Adds two values and updates statistics for correlation calculation.
 * @param x The first value to add.
 * @param y The second value to add.
 */
",Adds the given pair of values to the dataset.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.lang.Iterable),84,88,"/**
 * Adds all numbers from the iterable to the collection as doubles.
 */","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.Iterator),96,100,"/**
 * Adds all numbers from the iterator to the collection.
 * @param values Iterator of Number objects to add.
 */
","* Adds the given values to the dataset.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.Stats),171,176,"/**
 * Adds all stats from the given Stats object.
 * @param values Stats object containing values to add.
 */
","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(com.google.common.math.StatsAccumulator),184,189,"/**
* Adds all stats from another accumulator.
* @param values Accumulator whose stats to merge.
*/
","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.
   *
   * @since 28.2",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectInPlace,"com.google.common.math.Quantiles:selectInPlace(int,double[],int,int)",537,565,"/**
* Selects the element at the 'required' index in the range [from,to].
*/","* Performs an in-place selection to find the element which would appear at a given index in a
   * dataset if it were sorted. The following preconditions should hold:
   *
   * <ul>
   *   <li>{@code required}, {@code from}, and {@code to} should all be indexes into {@code array};
   *   <li>{@code required} should be in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range [0, {@code from}) should be less than or equal
   *       to all the values with indexes in the range [{@code from}, {@code to}];
   *   <li>all the values with indexes in the range ({@code to}, {@code array.length - 1}] should be
   *       greater than or equal to all the values with indexes in the range [{@code from}, {@code
   *       to}].
   * </ul>
   *
   * This method will reorder the values with indexes in the range [{@code from}, {@code to}] such
   * that all the values with indexes in the range [{@code from}, {@code required}) are less than or
   * equal to the value with index {@code required}, and all the values with indexes in the range
   * ({@code required}, {@code to}] are greater than or equal to that value. Therefore, the value at
   * {@code required} is the value which would appear at that index in the sorted dataset.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.util.stream.DoubleStream),279,288,"/**
 * Adds all elements from a DoubleStream to the builder.
 * @param stream Stream of doubles to add.
 * @return This builder instance.
 */
","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,addAll,com.google.common.primitives.ImmutableDoubleArray$Builder:addAll(java.lang.Iterable),249,258,"/**
 * Adds all elements from the given iterable to the builder.
 * @param values iterable of doubles to add.
 * @return this builder.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableDoubleArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,writeReplace,com.google.common.primitives.ImmutableDoubleArray:writeReplace(),639,641,"/**
 * Returns a trimmed version of the object for serialization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,contains,com.google.common.primitives.ImmutableDoubleArray$AsList:contains(java.lang.Object),504,507,"/**
 * Checks if the collection contains the target object.
 * @param target The object to search for.
 * @return True if found, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.util.stream.IntStream),276,285,"/**
 * Adds all elements from the IntStream to the builder.
 * @param stream IntStream containing elements to add.
 * @return This builder instance.
 */
","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,addAll,com.google.common.primitives.ImmutableIntArray$Builder:addAll(java.lang.Iterable),246,255,"/**
 * Adds all elements from the given iterable to the builder.
 * @param values Iterable of integers to add.
 * @return This builder instance.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableIntArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,writeReplace,com.google.common.primitives.ImmutableIntArray:writeReplace(),629,631,"/**
 * Returns a trimmed version of the object for serialization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.util.stream.LongStream),278,287,"/**
 * Adds all elements from a LongStream to the builder.
 * @param stream The LongStream to add elements from.
 * @return This builder instance.
 */
","* Appends all values from {@code stream}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.
     *
     * @since 22.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicDoubleArray.java,readObject,com.google.common.util.concurrent.AtomicDoubleArray:readObject(java.io.ObjectInputStream),317,326,"/**
 * Reads object data from input stream.
 * Populates the 'longs' AtomicLongArray from deserialized data.
 */
","Reconstitutes the instance from a stream (that is, deserializes it).",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,addAll,com.google.common.primitives.ImmutableLongArray$Builder:addAll(java.lang.Iterable),248,257,"/**
 * Adds all elements from the given iterable to the builder.
 * @param values Iterable of Long values to add.
 * @return This builder instance.
 */
","* Appends {@code values}, in order, to the end of the values the built {@link
     * ImmutableLongArray} will contain.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,writeReplace,com.google.common.primitives.ImmutableLongArray:writeReplace(),631,633,"/**
 * Returns a trimmed version of the object for serialization.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,tryParse,com.google.common.primitives.Ints:tryParse(java.lang.String),816,818,"/**
 * Tries to parse a string to an Integer.
 * @param string The string to parse.
 * @return Integer parsed from string, or null if parsing fails.
 */
","* Parses the specified string as a signed decimal integer value. The ASCII character {@code '-'}
   * (<code>'&#92;u002D'</code>) is recognized as the minus sign.
   *
   * <p>Unlike {@link Integer#parseInt(String)}, this method returns {@code null} instead of
   * throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
   * and returns {@code null} if non-ASCII digits are present in the string.
   *
   * <p>Note that strings prefixed with ASCII {@code '+'} are rejected, even though {@link
   * Integer#parseInt(String)} accepts them.
   *
   * @param string the string representation of an integer value
   * @return the integer value represented by {@code string}, or {@code null} if {@code string} has
   *     a length of zero or cannot be parsed as an integer value
   * @throws NullPointerException if {@code string} is {@code null}
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInteger.java,valueOf,com.google.common.primitives.UnsignedInteger:valueOf(java.lang.String),105,107,"/**
 * Parses a string to an UnsignedInteger, using base 10.
 * @param string The string to parse.
 * @return The UnsignedInteger value.
 */
","* Returns an {@code UnsignedInteger} holding the value of the specified {@code String}, parsed as
   * an unsigned {@code int} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code int}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,dividedBy,com.google.common.primitives.UnsignedLong:dividedBy(com.google.common.primitives.UnsignedLong),160,162,"/**
 * Divides this UnsignedLong by another.
 * @param val The divisor UnsignedLong value.
 * @return The quotient of the division.
 */
","* Returns the result of dividing this by {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,"com.google.common.primitives.UnsignedLongs:toString(long,int)",459,502,"/**
 * Converts a long to a string representation in the specified radix.
 * @param x The long value to convert.
 * @param radix The radix (base) to use for the conversion.
 */","* Returns a string representation of {@code x} for the given radix, where {@code x} is treated as
   * unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long, int)} instead.
   *
   * @param x the value to convert to a string.
   * @param radix the radix to use while working with {@code x}
   * @throws IllegalArgumentException if {@code radix} is not between {@link Character#MIN_RADIX}
   *     and {@link Character#MAX_RADIX}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,mulMod,"com.google.common.math.LongMath$MillerRabinTester$2:mulMod(long,long,long)",1166,1166,"/**
 * Calculates (a * b) % m, preventing overflow.
 * @param a base
 * @param b base
 * @param m modulus
 * @return result of the modular multiplication
 */
",Returns a * b mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/LongMath.java,squareMod,"com.google.common.math.LongMath$MillerRabinTester$2:squareMod(long,long)",1169,1169,"/**
 * Calculates (a * a) % m.
 * @param a The base number.
 * @param m The modulus.
 * @return The result of the modular squaring operation.
 */
",Returns a^2 mod m.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,mod,com.google.common.primitives.UnsignedLong:mod(com.google.common.primitives.UnsignedLong),169,171,"/**
 * Calculates the modulo of this UnsignedLong with another.
 * @param val The divisor.
 * @return The remainder of the division.
 */
","* Returns this modulo {@code val}.
   *
   * @since 14.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,valueOf,com.google.common.primitives.UnsignedLong:valueOf(java.lang.String),107,110,"/**
 * Parses a String to an UnsignedLong.
 * @param string String to parse, base is 10.
 * @return UnsignedLong representation of the string.
 */
","* Returns an {@code UnsignedLong} holding the value of the specified {@code String}, parsed as an
   * unsigned {@code long} value.
   *
   * @throws NumberFormatException if the string does not contain a parsable unsigned {@code long}
   *     value",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardEquals,com.google.common.collect.ForwardingMapEntry:standardEquals(java.lang.Object),96,103,"/**
 * Checks if two Entry objects are equal based on key and value.
 * @param object The object to compare to, must be an Entry.
 * @return True if equal, false otherwise.
 */
","* A sensible definition of {@link #equals(Object)} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #equals(Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardHashCode,com.google.common.collect.ForwardingMapEntry:standardHashCode(),112,116,"/**
 * Calculates a standard hash code based on key and value.
 * Returns 0 if either key or value is null.
 */
","* A sensible definition of {@link #hashCode()} in terms of {@link #getKey()} and {@link
   * #getValue()}. If you override either of these methods, you may wish to override {@link
   * #hashCode()} to forward to this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,standardToString,com.google.common.collect.ForwardingMapEntry:standardToString(),125,127,"/**
 * Returns a string representation of the key-value pair.
 * @return String combining the key and value with an equals sign.
 */
","* A sensible definition of {@link #toString} in terms of {@link #getKey} and {@link #getValue}.
   * If you override either of these methods, you may wish to override {@link #equals} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1:setValue(java.lang.Object),72,77,"/**
* Sets a value using the delegate, returning the set value.
* @param value The value to set; can be null.
* @return The value that was set.
*/
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.MutableClassToInstanceMap$1:setValue(java.lang.Object),72,77,"/**
 * Sets the value. Delegates to the underlying delegate.
 * @param value The value to set.
 * @return The value that was set.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMapEntry.java,setValue,com.google.common.collect.StandardTable$Row$2:setValue(java.lang.Object),72,77,"/**
 * Sets the value. Delegates to the underlying delegate.
 * @param value The value to set.
 * @return The value that was set.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,equals,com.google.common.reflect.Invokable:equals(java.lang.Object),210,217,"/**
 * Checks if two Invokables are equal based on owner type and member.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isArray,com.google.common.reflect.TypeToken:isArray(),526,528,"/**
 * Checks if the component is an array.
 * @return True if it's an array, false otherwise.
 */
","* Returns true if this type is known to be an array type, such as {@code int[]}, {@code T[]},
   * {@code <? extends Map<String, Integer>[]>} etc.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySupertype,com.google.common.reflect.TypeToken:getArraySupertype(java.lang.Class),1226,1249,"/**
 * Gets the supertype of an array type.
 * @param supertype The supertype of the array.
 * @return The supertype as a TypeToken.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(),92,97,"/**
* Retrieves the result of the computation.
* @return The result or throws exceptions on failure.
*/",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ExecutorService),461,468,"/**
 * Decorates an ExecutorService to a ListeningExecutorService.
 * Handles ScheduledExecutorService as well.
 */
","* Creates an {@link ExecutorService} whose {@code submit} and {@code invokeAll} methods submit
   * {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as well
   * as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningExecutorService} never calls the delegate's {@code submit}, {@code
   * invokeAll}, and {@code invokeAny} methods, so any special handling of tasks must be implemented
   * in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code ListeningExecutorService}, it is
   * returned untouched, and the rest of this documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,listeningDecorator,com.google.common.util.concurrent.MoreExecutors:listeningDecorator(java.util.concurrent.ScheduledExecutorService),486,492,"/**
 * Returns a ListeningScheduledExecutorService, or wraps the delegate.
 * @param delegate The ScheduledExecutorService to decorate.
 * @return A ListeningScheduledExecutorService.
 */
","* Creates a {@link ScheduledExecutorService} whose {@code submit} and {@code invokeAll} methods
   * submit {@link ListenableFutureTask} instances to the given delegate executor. Those methods, as
   * well as {@code execute} and {@code invokeAny}, are implemented in terms of calls to {@code
   * delegate.execute}. All other methods are forwarded unchanged to the delegate. This implies that
   * the returned {@code ListeningScheduledExecutorService} never calls the delegate's {@code
   * submit}, {@code invokeAll}, and {@code invokeAny} methods, so any special handling of tasks
   * must be implemented in the delegate's {@code execute} method or by wrapping the returned {@code
   * ListeningScheduledExecutorService}.
   *
   * <p>If the delegate executor was already an instance of {@code
   * ListeningScheduledExecutorService}, it is returned untouched, and the rest of this
   * documentation does not apply.
   *
   * @since 10.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,long,java.util.concurrent.TimeUnit)",675,759,"/**
 * Executes tasks from collection, returning the result of first completed.
 * @param executorService Executor service to run tasks.
 * @param tasks Callable tasks to execute.
 */
","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CollectionFuture.java,<init>,"com.google.common.util.concurrent.CollectionFuture$ListFuture:<init>(com.google.common.collect.ImmutableCollection,boolean)",87,92,"/**
 * Creates a ListFuture from a collection of futures.
 * @param futures Futures to wrap.
 * @param allMustSucceed Whether all futures must succeed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,callAsync,"com.google.common.util.concurrent.Futures$FutureCombiner:callAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",719,722,"/**
 * Creates a CombinedFuture to execute an AsyncCallable.
 * @param combiner AsyncCallable to execute.
 * @param executor Executor for asynchronous execution.
 * @return CombinedFuture instance.
 */
","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * AsyncCallable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,call,"com.google.common.util.concurrent.Futures$FutureCombiner:call(java.util.concurrent.Callable,java.util.concurrent.Executor)",744,747,"/**
 * Creates a CombinedFuture to execute a Callable with an executor.
 * @param combiner Callable to execute.
 * @param executor Executor to run the Callable.
 * @return CombinedFuture instance.
 */
","* Creates the {@link ListenableFuture} which will return the result of calling {@link
     * Callable#call} in {@code combiner} when all futures complete, using the specified {@code
     * executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>If the combiner throws an {@code ExecutionException}, the cause of the thrown {@code
     * ExecutionException} will be extracted and returned as the cause of the new {@code
     * ExecutionException} that gets thrown by the returned combined future.
     *
     * <p>Canceling this future will attempt to cancel all the component futures.
     *
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even if you don't care about the value of the future, you should
     *     typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,processCompleted,com.google.common.util.concurrent.AggregateFuture:processCompleted(com.google.common.collect.ImmutableCollection),302,324,"/**
 * Processes completed futures, collects values, and releases resources.
 * Handles exceptions and clears seen exceptions.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLock,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)",623,675,"/**
 * Checks if lock acquisition is safe; throws exception if unsafe.
 * @param policy Policy to handle potential deadlocks.
 * @param acquiredLock Lock already acquired.
 */
","* Checks the acquisition-ordering between {@code this}, which is about to be acquired, and the
     * specified {@code acquiredLock}.
     *
     * <p>When this method returns, the {@code acquiredLock} should be in either the {@code
     * preAcquireLocks} map, for the case in which it is safe to acquire {@code this} after the
     * {@code acquiredLock}, or in the {@code disallowedPriorLocks} map, in which case it is not
     * safe.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheLoader.java,reload,"com.google.common.cache.CacheLoader$1:reload(java.lang.Object,java.lang.Object)",96,101,"/**
 * Reloads a value associated with a key.
 * @param key The key to reload.
 * @param oldValue The old value associated with the key.
 * @return A ListenableFuture representing the reload operation.
 */
","* Computes or retrieves a replacement value corresponding to an already-cached {@code key}. This
   * method is called when an existing cache entry is refreshed by {@link
   * CacheBuilder#refreshAfterWrite}, or through a call to {@link LoadingCache#refresh}.
   *
   * <p>This implementation synchronously delegates to {@link #load}. It is recommended that it be
   * overridden with an asynchronous implementation when using {@link
   * CacheBuilder#refreshAfterWrite}.
   *
   * <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
   *
   * @param key the non-null key whose value should be loaded
   * @param oldValue the non-null old value corresponding to {@code key}
   * @return the future new value associated with {@code key}; <b>must not be null, must not return
   *     null</b>
   * @throws Exception if unable to reload the result
   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is
   *     treated like any other {@code Exception} in all respects except that, when it is caught,
   *     the thread's interrupt status is set
   * @since 11.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,com.google.common.util.concurrent.ClosingFuture:<init>(com.google.common.util.concurrent.ListenableFuture),631,633,"/**
 * Creates a ClosingFuture wrapping a ListenableFuture.
 * @param future The future to wrap.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,offer,com.google.common.collect.ForwardingQueue:offer(java.lang.Object),57,61,"/**
 * Offers the specified element to the underlying queue.
 * @param o the element to offer
 * @return True if the offer was successful, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,poll,com.google.common.collect.ForwardingQueue:poll(),63,67,"/**
 * Retrieves and removes the head of the queue, or null if empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,remove,com.google.common.collect.ForwardingQueue:remove(),69,74,"/**
 * Removes and returns the next element from the delegate.
 * @return The next element or null if the delegate is empty.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,peek,com.google.common.collect.ForwardingQueue:peek(),76,79,"/**
 * Peeks at the head of the deque without removing it.
 * @return The head element or null if the deque is empty.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,element,com.google.common.collect.ForwardingQueue:element(),81,85,"/**
 * Returns the next element produced by this iterator.
 * Delegates to the underlying iterator's element() method.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,cancel,com.google.common.util.concurrent.ForwardingFuture:cancel(boolean),46,50,"/**
 * Attempts to cancel the future.
 * @param mayInterruptIfRunning Whether to interrupt if running.
 * @return True if cancellation was initiated, false otherwise.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isCancelled,com.google.common.util.concurrent.ForwardingFuture:isCancelled(),52,55,"/**
 * Checks if the operation is cancelled.
 * Delegates to the underlying delegate's isCancelled method.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,isDone,com.google.common.util.concurrent.ForwardingFuture:isDone(),57,60,"/**
 * Checks if the task is done by delegating to the underlying implementation.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,com.google.common.util.concurrent.ForwardingFuture:get(),62,67,"/**
 * Retrieves the result of the computation from the delegate.
 * @return The computed value, or null if the delegate is null.
 * @throws InterruptedException, ExecutionException if errors occur.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingFuture.java,get,"com.google.common.util.concurrent.ForwardingFuture:get(long,java.util.concurrent.TimeUnit)",69,75,"/**
 * Retrieves the value with a specified timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout.
 * @return The value or throws exception on timeout.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,statusFuture,com.google.common.util.concurrent.ClosingFuture:statusFuture(),651,653,"/**
 * Returns a ListenableFuture representing the status of the future.
 */","* Returns a future that finishes when this step does. Calling {@code get()} on the returned
   * future returns {@code null} if the step is successful or throws the same exception that would
   * be thrown by calling {@code finishToFuture().get()} if this were the last step. Calling {@code
   * cancel()} on the returned future has no effect on the {@code ClosingFuture} pipeline.
   *
   * <p>{@code statusFuture} differs from most methods on {@code ClosingFuture}: You can make calls
   * to {@code statusFuture} <i>in addition to</i> the call you make to {@link #finishToFuture()} or
   * a derivation method <i>on the same instance</i>. This is important because calling {@code
   * statusFuture} alone does not provide a way to close the pipeline.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submitAsync,"com.google.common.util.concurrent.ExecutionSequencer:submitAsync(com.google.common.util.concurrent.AsyncCallable,java.util.concurrent.Executor)",175,264,"/**
* Submits an async callable to an executor, returning a future.
* @param callable The async callable to execute.
* @param executor The executor to run the callable with.
*/
","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to the future returned from {@code
   * callable} or a callable that has begun to execute, but if the output future is cancelled before
   * {@link AsyncCallable#call()} is invoked, {@link AsyncCallable#call()} will not be invoked.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator,java.util.concurrent.Future,java.lang.Class)",52,67,"/**
 * Retrieves a value from a Future, handling specified exceptions.
 * @param validator Validator for exception class.
 * @param future Future to retrieve from.
 * @param exceptionClass Exception class to wrap.
 * @return Value from the Future.
 */
","Implementation of {@link Futures#getChecked(Future, Class)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",70,87,"/**
 * Retrieves the result of a Future with a timeout, throwing a checked exception.
 * @param future Future to retrieve the result from.
 * @param exceptionClass Expected exception type.
 * @param timeout Timeout duration.
 * @param unit Timeout unit.
 * @return Result of the Future.
 * @throws X Exception of specified type.
 */
","Implementation of {@link Futures#getChecked(Future, Class, long, TimeUnit)}.",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,checkExceptionClassValidity,com.google.common.util.concurrent.FuturesGetChecked:checkExceptionClassValidity(java.lang.Class),296,307,"/**
 * Validates an exception class for use with Futures.getChecked.
 * @param exceptionClass The exception class to validate.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStartingEvent,com.google.common.util.concurrent.AbstractService:enqueueStartingEvent(),530,532,"/**
 * Enqueues the STARTING_EVENT to the listeners queue.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueRunningEvent,com.google.common.util.concurrent.AbstractService:enqueueRunningEvent(),534,536,"/**
 * Enqueues the RUNNING_EVENT for listeners to process.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueStoppingEvent,com.google.common.util.concurrent.AbstractService:enqueueStoppingEvent(com.google.common.util.concurrent.Service$State),538,546,"/**
 * Enqueues a stopping event based on the 'from' state.
 * @param from The state from which stopping is initiated.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueTerminatedEvent,com.google.common.util.concurrent.AbstractService:enqueueTerminatedEvent(com.google.common.util.concurrent.Service$State),548,566,"/**
 * Enqueues a terminated event based on the 'from' state.
 * @param from The state from which termination occurred.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,enqueueFailedEvent,"com.google.common.util.concurrent.AbstractService:enqueueFailedEvent(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",568,582,"/**
 * Enqueues a failed event to notify listeners, passing the state and cause.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueStoppedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueStoppedEvent(),728,730,"/**
 * Enqueues the STOPPED_EVENT to the listeners queue.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueHealthyEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueHealthyEvent(),732,734,"/**
 * Enqueues a HEALTHY_EVENT to the listeners queue.
 */",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,enqueueFailedEvent,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:enqueueFailedEvent(com.google.common.util.concurrent.Service),736,749,"/**
 * Enqueues a failure event for a service to be processed by listeners.
 * @param service The service that failed.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,leave,com.google.common.util.concurrent.Monitor:leave(),929,939,"/**
 * Releases the lock held by the current thread.
 * Signals the next waiting thread if this is the last release.
 */
",Leaves this monitor. May be called only by a thread currently occupying this monitor.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,await,"com.google.common.util.concurrent.Monitor:await(com.google.common.util.concurrent.Monitor$Guard,boolean)",1178,1191,"/**
 * Waits for a guard to be satisfied, optionally signaling first.
 * @param guard The guard to wait for.
 * @param signalBeforeWaiting Whether to signal before waiting.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitUninterruptibly,"com.google.common.util.concurrent.Monitor:awaitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)",1193,1206,"/**
 * Awaits a guard condition, optionally signaling before waiting.
 * @param guard The guard to wait for.
 * @param signalBeforeWaiting Whether to signal before waiting.
 */
",,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,awaitNanos,"com.google.common.util.concurrent.Monitor:awaitNanos(com.google.common.util.concurrent.Monitor$Guard,long,boolean)",1209,1233,"/**
 * Awaits condition satisfaction, waiting up to nanos.
 * Signals next waiter before waiting if requested.
 */",Caller should check before calling that guard is not satisfied.,,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",403,415,"/**
 * Wraps a future with a timeout. Returns the future if done.
 * @param delegate The future to wrap.
 * @param time Timeout duration.
 * @param unit Time unit for timeout.
 * @param scheduledExecutor Executor for timeout scheduling.
 * @return ListenableFuture with timeout.
 */
","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 19.0",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,scheduleAsync,"com.google.common.util.concurrent.Futures:scheduleAsync(com.google.common.util.concurrent.AsyncCallable,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",229,235,"/**
 * Schedules a callable to run after a delay.
 * @param callable The callable to execute.
 * @param delay The delay before execution.
 * @param executorService ExecutorService to use.
 * @return ListenableFuture representing the scheduled task.
 */
","* Schedules {@code callable} on the specified {@code executor}, returning a {@code Future}.
   *
   * @throws RejectedExecutionException if the task cannot be scheduled for execution
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,4
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Enums.java,getIfPresent,"com.google.common.base.Enums:getIfPresent(java.lang.Class,java.lang.String)",67,71,"/**
 * Retrieves an enum constant by its string value.
 * @param enumClass Enum class to search within.
 * @param value String value of the enum constant.
 * @return Enum constant or an empty Optional if not found.
 */
","* Returns an optional enum constant for the given type, using {@link Enum#valueOf}. If the
   * constant does not exist, {@link Optional#absent} is returned. A common use case is for parsing
   * user input or falling back to a default enum constant. For example, {@code
   * Enums.getIfPresent(Country.class, countryInput).or(Country.DEFAULT);}
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,tryFind,"com.google.common.collect.Iterables:tryFind(java.lang.Iterable,com.google.common.base.Predicate)",699,701,"/**
 * Finds the first element in iterable matching the predicate.
 * @param iterable iterable to search
 * @param predicate predicate to apply to each element
 * @return Optional containing the element, or empty if none match
 */
","* Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the
   * given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in {@code iterable}, a NullPointerException will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isEmpty,com.google.common.collect.Collections2$FilteredCollection:isEmpty(),169,172,"/**
 * Checks if the collection contains no elements matching the predicate.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,anyMatch,com.google.common.collect.FluentIterable:anyMatch(com.google.common.base.Predicate),441,443,"/**
 * Checks if any element in the collection matches the predicate.
 * @param predicate Predicate to apply to each element.
 * @return True if any element matches, otherwise false.
 */
","* Returns {@code true} if any element in this fluent iterable satisfies the predicate.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch} (same).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,isEmpty,com.google.common.collect.Maps$FilteredEntryNavigableMap:isEmpty(),3285,3288,"/**
 * Checks if the map is empty based on the entry predicate.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedPositive,"com.google.common.base.CharMatcher:precomputedPositive(int,java.util.BitSet,java.lang.String)",447,464,"/**
 * Creates a CharMatcher based on totalCharacters and a BitSet.
 * @param totalCharacters Number of characters to consider.
 * @param table BitSet representing character presence.
 * @param description Description of the CharMatcher.
 */",* Helper method for {@link #precomputedInternal} that doesn't test if the negation is cheaper.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Throwables.java,propagateIfPossible,"com.google.common.base.Throwables:propagateIfPossible(java.lang.Throwable,java.lang.Class,java.lang.Class)",187,196,"/**
 * Propagates checked exceptions if possible, recursively.
 * @param throwable The exception to propagate.
 * @param declaredType1, declaredType2 Exception types.
 */
","* Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link
   * RuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}.
   *
   * @param throwable the Throwable to possibly propagate
   * @param declaredType1 any checked exception type declared by the calling method
   * @param declaredType2 any other checked exception type declared by the calling method
   * @deprecated Use a combination of two calls to {@link #throwIfInstanceOf} and one call to {@link
   *     #throwIfUnchecked}, which togther provide the same behavior except that they reject {@code
   *     null}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,com.google.common.io.Closer:rethrow(java.lang.Throwable),130,136,"/**
 * Wraps a Throwable as a RuntimeException and re-throws it.
 * Checks for IOException and unchecked exceptions.
 */
","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException} or {@code Error}. Otherwise, it will be rethrown wrapped
   * in a {@code RuntimeException}. <b>Note:</b> Be sure to declare all of the checked exception
   * types your try block can throw when calling an overload of this method so as to avoid losing
   * the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e);}
   * to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class)",152,160,"/**
 * Rethrows a Throwable as a RuntimeException, checking types.
 * @param e The Throwable to rethrow.
 * @param declaredType Exception type to check.
 * @throws X if declaredType is found.
 */
","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of the given type.
   * Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b> Be sure to
   * declare all of the checked exception types your try block can throw when calling an overload of
   * this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X when the given throwable is of the declared type X",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,close,com.google.common.io.Closer:close(),195,218,"/**
 * Closes all resources in the stack, suppressing exceptions.
 */","* Closes all {@code Closeable} instances that have been added to this {@code Closer}. If an
   * exception was thrown in the try block and passed to one of the {@code exceptionThrown} methods,
   * any exceptions thrown when attempting to close a closeable will be suppressed. Otherwise, the
   * <i>first</i> exception to be thrown from an attempt to close a closeable will be thrown and any
   * additional exceptions that are thrown after that will be suppressed.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,newThread,"com.google.common.util.concurrent.MoreExecutors:newThread(java.lang.String,java.lang.Runnable)",838,851,"/**
 * Creates a new thread with the given name and runnable.
 * @param name Thread name.
 * @param runnable Runnable to execute in the thread.
 * @return The newly created Thread object.
 */
","* Creates a thread using {@link #platformThreadFactory}, and sets its name to {@code name} unless
   * changing the name is forbidden by the security manager.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeCollectedEntry,com.google.common.cache.LocalCache$Segment:removeCollectedEntry(com.google.common.cache.ReferenceEntry),3279,3289,"/**
 * Removes a collected entry, notifies, and removes it from queues.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2025,2038,"/**
 * Filters keys in a SetMultimap based on the provided predicate.
 * @param unfiltered The SetMultimap to filter.
 * @param keyPredicate Predicate to filter keys.
 * @return A new filtered SetMultimap.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2206,2213,"/**
 * Filters entries in a SetMultimap based on the provided predicate.
 * @param unfiltered The SetMultimap to filter.
 * @param entryPredicate Predicate to determine which entries to keep.
 * @return A filtered SetMultimap.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotation,com.google.common.reflect.Parameter:getDeclaredAnnotation(java.lang.Class),112,116,"/**
 * Retrieves a declared annotation of the specified type.
 * @param annotationType The class of the annotation to retrieve.
 * @return The annotation or null if not found.
 */
",* @since 18.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,mergeSorted,"com.google.common.collect.Iterators:mergeSorted(java.lang.Iterable,java.util.Comparator)",1302,1308,"/**
 * Merges sorted iterators into a single unmodifiable iterator.
 * @param iterators Iterable of sorted iterators.
 * @param comparator Comparator for merging elements.
 */
","* Returns an iterator over the merged contents of all given {@code iterators}, traversing every
   * element of the input iterators. Equivalent entries will not be de-duplicated.
   *
   * <p>Callers must ensure that the source {@code iterators} are in non-descending order as this
   * method does not sort its input.
   *
   * <p>For any equivalent elements across all {@code iterators}, it is undefined which element is
   * returned first.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:size(),622,625,"/**
 * Returns the number of elements in this map.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,removeAll,com.google.common.collect.Maps$EntrySet:removeAll(java.util.Collection),4240,4248,"/**
 * Removes all elements from this collection that are also in the given collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap:remove(java.lang.Object),198,222,"/**
 * Removes values associated with the given key and returns them.
 * @param key The key to remove values for.
 * @return Collection of removed values or null if key not found.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Object[])",293,296,"/**
 * Converts an iterable to an array, reusing the provided array if possible.
 * @param iterable The iterable to convert.
 * @param array Array to hold the converted elements.
 * @return An array containing the elements from the iterable.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,com.google.common.collect.Iterables:toArray(java.lang.Iterable),304,306,"/**
 * Converts an iterable to an array.
 * @param iterable The iterable to convert.
 * @return An array containing the iterable's elements.
 */
","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,replaceValues,"com.google.common.collect.LinkedListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",621,646,"/**
 * Replaces values associated with a key, returns old values.
 * @param key The key for values to be replaced.
 * @param values Iterable of new values.
 * @return List of old values.
 */
","* {@inheritDoc}
   *
   * <p>If any entries for the specified {@code key} already exist in the multimap, their values are
   * changed in-place without affecting the iteration order.
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,removeAll,com.google.common.collect.LinkedListMultimap:removeAll(java.lang.Object),657,670,"/**
 * Removes all values associated with the given key.
 * @param key The key whose values should be removed.
 * @return A list of the removed values.
 */
","* {@inheritDoc}
   *
   * <p>The returned list is immutable and implements {@link java.util.RandomAccess}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,sortedCopy,com.google.common.collect.AllEqualOrdering:sortedCopy(java.lang.Iterable),41,44,"/**
 * Returns a sorted copy of the provided iterable.
 * @param iterable The iterable to copy and sort.
 * @return A new list containing the sorted elements.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationIterator:<init>(java.util.List,java.util.Comparator)",509,512,"/**
 * Initializes the iterator with a list and comparator.
 * @param list The initial list of elements.
 * @param comparator Comparator for ordering elements.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,newCopyOnWriteArrayList,com.google.common.collect.Lists:newCopyOnWriteArrayList(java.lang.Iterable),283,294,"/**
 * Creates a CopyOnWriteArrayList from an Iterable.
 * @param elements Iterable containing elements for the list.
 * @return A new CopyOnWriteArrayList containing the elements.
 */
","* Creates a {@code CopyOnWriteArrayList} instance containing the given elements.
   *
   * @param elements the elements that the list should contain, in order
   * @return a new {@code CopyOnWriteArrayList} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,newCopyOnWriteArraySet,com.google.common.collect.Sets:newCopyOnWriteArraySet(java.lang.Iterable),479,490,"/**
 * Creates a new CopyOnWriteArraySet from the given iterable elements.
 * @param elements Iterable containing elements for the new set.
 * @return A new CopyOnWriteArraySet containing the elements.
 */
","* Creates a {@code CopyOnWriteArraySet} instance containing the given elements.
   *
   * @param elements the elements that the set should contain, in order
   * @return a new {@code CopyOnWriteArraySet} containing those elements
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",271,303,"/**
 * Searches a sorted list for a key using binary search.
 * @param list Sorted list to search.
 * @param key Key to search for.
 * @return Index of key if found, otherwise index where it would be inserted.
 */
","* Searches the specified list for the specified object using the binary search algorithm. The
   * list must be sorted into ascending order according to the specified comparator (as by the
   * {@link Collections#sort(List, Comparator) Collections.sort(List, Comparator)} method), prior to
   * making this call. If it is not sorted, the results are undefined.
   *
   * <p>If there are elements in the list which compare as equal to the key, the choice of {@link
   * KeyPresentBehavior} decides which index is returned. If no elements compare as equal to the
   * key, the choice of {@link KeyAbsentBehavior} decides which index is returned.
   *
   * <p>This method runs in log(n) time on random-access lists, which offer near-constant-time
   * access to each list element.
   *
   * @param list the list to be searched.
   * @param key the value to be searched for.
   * @param comparator the comparator by which the list is ordered.
   * @param presentBehavior the specification for what to do if at least one element of the list
   *     compares as equal to the key.
   * @param absentBehavior the specification for what to do if no elements of the list compare as
   *     equal to the key.
   * @return the index determined by the {@code KeyPresentBehavior}, if the key is in the list;
   *     otherwise the index determined by the {@code KeyAbsentBehavior}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,bulkGet,com.google.common.util.concurrent.Striped:bulkGet(java.lang.Iterable),141,184,"/**
 * Retrieves a list of values associated with the provided keys.
 * @param keys Iterable of keys to fetch values for.
 * @return An unmodifiable list of values (L) for the keys.
 */
","* Returns the stripes that correspond to the passed objects, in ascending (as per {@link
   * #getAt(int)}) order. Thus, threads that use the stripes in the order returned by this method
   * are guaranteed to not deadlock each other.
   *
   * <p>It should be noted that using a {@code Striped<L>} with relatively few stripes, and {@code
   * bulkGet(keys)} with a relative large number of keys can cause an excessive number of shared
   * stripes (much like the birthday paradox, where much fewer than anticipated birthdays are needed
   * for a pair of them to match). Please consider carefully the implications of the number of
   * stripes, the intended concurrency level, and the typical number of keys used in a {@code
   * bulkGet(keys)} operation. See <a href=""http://www.mathpages.com/home/kmath199.htm"">Balls in
   * Bins model</a> for mathematical formulas that can be used to estimate the probability of
   * collisions.
   *
   * @param keys arbitrary non-null keys
   * @return the stripes corresponding to the objects (one per each object, derived by delegating to
   *     {@link #get(Object)}; may contain duplicates), in an increasing index order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:get(java.lang.Object),1626,1629,"/**
 * Retrieves values associated with the given key.
 * @param key The key to retrieve values for.
 * @return List of values associated with the key.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesListMultimap:removeAll(java.lang.Object),1631,1635,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return List of removed values.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,get,com.google.common.collect.Multimaps$TransformedEntriesMultimap:get(java.lang.Object),1547,1550,"/**
 * Retrieves values associated with the given key.
 * @param key The key to retrieve values for.
 * @return Collection of values for the key, or null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,removeAll,com.google.common.collect.Multimaps$TransformedEntriesMultimap:removeAll(java.lang.Object),1588,1592,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return Collection of removed values.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$SortedAsMapView:subMap(java.lang.Object,java.lang.Object)",1005,1008,"/**
 * Returns a sorted map view of the portion of this map between fromKey and toKey.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$SortedAsMapView:headMap(java.lang.Object),1010,1013,"/**
 * Returns a sorted map containing entries with keys up to `toKey`.
 * @param toKey The exclusive upper bound for keys.
 * @return SortedMap with keys less than `toKey`.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$SortedAsMapView:tailMap(java.lang.Object),1015,1018,"/**
 * Returns a sorted map view of elements whose keys are >= fromKey.
 * @param fromKey key from which to start the tail map
 * @return SortedMap containing elements from fromKey onwards
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,equals,com.google.common.graph.AbstractNetwork:equals(java.lang.Object),253,266,"/**
 * Checks if two Network objects are equal based on their properties.
 * @param obj The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,hashCode,com.google.common.graph.AbstractNetwork:hashCode(),268,271,"/**
 * Returns the hash code value for this edge.
 * Uses the hash code of the incident nodes map.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,toString,com.google.common.graph.AbstractNetwork:toString(),274,286,"/**
 * Returns a string representation of the graph's properties.
 */",Returns a string representation of this network.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,equals,com.google.common.graph.AbstractValueGraph:equals(java.lang.Object),121,134,"/**
 * Checks if this ValueGraph is equal to another ValueGraph.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,hashCode,com.google.common.graph.AbstractValueGraph:hashCode(),136,139,"/**
 * Returns the hash code value for this object.
 * Delegates to the hash code of the edgeValueMap.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractValueGraph.java,toString,com.google.common.graph.AbstractValueGraph:toString(),142,152,"/**
 * Returns a string representation of the graph.
 * Includes directed status, self-loops, nodes, and edges.
 */
",Returns a string representation of this graph.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,navigableKeySet,com.google.common.collect.AbstractNavigableMap:navigableKeySet(),140,143,"/**
 * Returns a navigable set view of the keys in this map.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$DescendingMap:navigableKeySet(),4414,4418,"/**
* Returns a navigable set view of the map's keys.
* Lazily initializes if not already created.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingEntryIterator,com.google.common.collect.Maps$NavigableAsMapView:descendingEntryIterator(),1110,1113,"/**
* Returns an iterator over map entries in descending order.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformEntries,"com.google.common.collect.Maps:transformEntries(java.util.NavigableMap,com.google.common.collect.Maps$EntryTransformer)",2068,2074,"/**
 * Transforms entries in a NavigableMap using a transformer.
 * @param fromMap source NavigableMap
 * @param transformer transforms entries (K, V1) -> V2
 * @return Transformed NavigableMap with V2 values.
 */
","* Returns a view of a navigable map whose values are derived from the original navigable map's
   * entries. In contrast to {@link #transformValues}, this method's entry-transformation logic may
   * depend on the key as well as the value.
   *
   * <p>All other properties of the transformed map, such as iteration order, are left intact. For
   * example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Boolean> options = Maps.newTreeMap();
   * options.put(""verbose"", false);
   * options.put(""sort"", true);
   * EntryTransformer<String, Boolean, String> flagPrefixer =
   *     new EntryTransformer<String, Boolean, String>() {
   *       public String transformEntry(String key, Boolean value) {
   *         return value ? key : (""yes"" + key);
   *       }
   *     };
   * NavigableMap<String, String> transformed =
   *     LabsMaps.transformNavigableEntries(options, flagPrefixer);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {sort=yessort, verbose=verbose}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys and null values provided that
   * the transformer is capable of accepting null inputs. The transformed map might contain null
   * values if the transformer sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
   * map to be a view, but it means that the transformer will be applied many times for bulk
   * operations like {@link Map#containsValue} and {@link Object#toString}. For this to perform
   * well, {@code transformer} should be fast. To avoid lazy evaluation when the returned map
   * doesn't need to be a view, copy the returned map into a new map of your choosing.
   *
   * <p><b>Warning:</b> This method assumes that for any instance {@code k} of {@code
   * EntryTransformer} key type {@code K}, {@code k.equals(k2)} implies that {@code k2} is also of
   * type {@code K}. Using an {@code EntryTransformer} key type for which this may not hold, such as
   * {@code ArrayList}, may risk a {@code ClassCastException} when calling methods on the
   * transformed map.
   *
   * @since 13.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:headMap(java.lang.Object),2243,2246,"/**
 * Returns a sorted map containing entries whose keys are less than {@code toKey}.
 * @param toKey The key to which all keys in the returned map are less than.
 * @return A sorted map with keys less than {@code toKey}.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesSortedMap:subMap(java.lang.Object,java.lang.Object)",2254,2257,"/**
 * Returns a sorted map containing entries between fromKey and toKey (inclusive).
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesSortedMap:tailMap(java.lang.Object),2259,2262,"/**
 * Returns a tail map with keys >= fromKey.
 * @param fromKey the key from which the tail map starts
 * @return a SortedMap containing entries with keys >= fromKey
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.SortedMap,com.google.common.base.Function)",1862,1868,"/**
 * Transforms values in a sorted map using a function.
 * @param fromMap The input sorted map.
 * @param function Function to apply to each value.
 * @return A new sorted map with transformed values.
 */
","* Returns a view of a sorted map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * SortedMap<String, Integer> map = ImmutableSortedMap.of(""a"", 4, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * SortedMap<String, Double> transformed =
   *      Maps.transformValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,asMap,com.google.common.collect.Multimaps$UnmodifiableMultimap:asMap(),701,711,"/**
 * Returns a map representing the multimap, keys are unique.
 * Returns unmodifiable map, creates if not already created.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,row,com.google.common.collect.Tables$TransformedTable:row(java.lang.Object),471,474,"/**
 * Transforms values in a row from a table.
 * @param rowKey Key of the row to transform.
 * @return Map with transformed values.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,column,com.google.common.collect.Tables$TransformedTable:column(java.lang.Object),476,479,"/**
 * Retrieves column values, transforming them using a function.
 * @param columnKey Column identifier.
 * @return Map of transformed values.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$TransformedTable:rowMap(),510,513,"/**
 * Returns a row-oriented map, transforming column values.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$TransformedTable:columnMap(),515,519,"/**
 * Returns a map of columns to maps of row keys to values.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,columnMap,com.google.common.collect.Tables$UnmodifiableTable:columnMap(),574,577,"/**
 * Returns an unmodifiable map of column-specific data.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableTable:rowMap(),607,610,"/**
 * Returns an unmodifiable map of rows to columns and values.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.HashMultiset:add(java.lang.Object,int)",264,284,"/**
 * Adds a specified number of occurrences of an element.
 * @param element element to add
 * @param occurrences number of occurrences to add
 * @return the previous count of the element
 */
","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,add,"com.google.common.collect.LinkedHashMultiset:add(java.lang.Object,int)",264,284,"/**
* Adds a specified number of occurrences of an element.
* @param element element to add
* @param occurrences number of occurrences to add
* @return the previous count of the element
*/
","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if the call would result in more than {@link
   *     Integer#MAX_VALUE} occurrences of {@code element} in this multiset.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.HashMultiset:remove(java.lang.Object,int)",286,311,"/**
 * Removes specified occurrences of an element.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return initial count of the element
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultiset.java,remove,"com.google.common.collect.LinkedHashMultiset:remove(java.lang.Object,int)",286,311,"/**
 * Removes specified occurrences of an element.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return original count of the element
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,contains,"com.google.common.collect.ImmutableTable:contains(java.lang.Object,java.lang.Object)",383,386,"/**
 * Checks if a row-column pair exists in the table.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return True if the pair exists, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,"com.google.common.collect.HashBasedTable:get(java.lang.Object,java.lang.Object)",114,117,"/**
 * Gets a value by row and column keys. Returns null if either key is null.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,get,com.google.common.collect.StandardTable$Column:get(java.lang.Object),471,474,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to look up.
 * @return The value or null if the key is not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsMapping,"com.google.common.collect.StandardTable:containsMapping(java.lang.Object,java.lang.Object,java.lang.Object)",192,195,"/**
 * Checks if a mapping exists: value equals the retrieved value.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,"com.google.common.collect.HashBasedTable:contains(java.lang.Object,java.lang.Object)",86,89,"/**
 * Checks if the map contains the specified row and column keys.
 * @param rowKey Row key to check.
 * @param columnKey Column key to check.
 * @return True if both keys exist; otherwise, false.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$Column$KeySet:contains(java.lang.Object),621,624,"/**
* Checks if the table contains the given object.
* @param obj The object to check for.
* @return True if the object is present, false otherwise.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,containsKey,com.google.common.collect.StandardTable$Column:containsKey(java.lang.Object),476,479,"/**
* Checks if the table contains the specified key.
* @param key The key to check.
* @return True if the key exists, false otherwise.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,contains,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:contains(java.lang.Object),929,939,"/**
 * Checks if the column contains the given entry.
 * @param obj The entry to check.
 * @return True if the column contains the entry, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,transformValues,"com.google.common.collect.Multimaps:transformValues(com.google.common.collect.ListMultimap,com.google.common.base.Function)",1378,1385,"/**
 * Transforms values in a ListMultimap using a provided function.
 * @param fromMultimap Multimap to transform.
 * @param function Function to apply to each value.
 * @return New ListMultimap with transformed values.
 */
","* Returns a view of a {@code ListMultimap} where each value is transformed by a function. All
   * other properties of the multimap, such as iteration order, are left intact. For example, the
   * code:
   *
   * {@snippet :
   * ListMultimap<String, Integer> multimap =
   *      ImmutableListMultimap.of(""a"", 4, ""a"", 16, ""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * ListMultimap<String, Double> transformed = Multimaps.transformValues(map,
   *     sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=[2.0, 4.0], b=[3.0]}}.
   *
   * <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
   * supports removal operations, and these are reflected in the underlying multimap.
   *
   * <p>It's acceptable for the underlying multimap to contain null keys, and even null values
   * provided that the function is capable of accepting null input. The transformed multimap might
   * contain null values, if the function sometimes gives a null result.
   *
   * <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
   * is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned
   * multimap to be a view, but it means that the function will be applied many times for bulk
   * operations like {@link Multimap#containsValue} and {@code Multimap.toString()}. For this to
   * perform well, {@code function} should be fast. To avoid lazy evaluation when the returned
   * multimap doesn't need to be a view, copy the returned multimap into a new multimap of your
   * choosing.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMultiset.java,addAll,com.google.common.collect.AbstractMultiset:addAll(java.util.Collection),105,109,"/**
 * Adds all elements from a collection to this multiset.
 * @param elementsToAdd Collection of elements to add.
 * @return True if the multiset was modified.
 */
","* {@inheritDoc}
   *
   * <p>This implementation is highly efficient when {@code elementsToAdd} is itself a {@link
   * Multiset}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMultiset.java,standardAddAll,com.google.common.collect.ForwardingMultiset:standardAddAll(java.util.Collection),166,169,"/**
 * Adds all elements from the given collection to this multiset.
 * @param elementsToAdd Collection of elements to add
 * @return True if the multiset was modified.
 */
","* A sensible definition of {@link #addAll(Collection)} in terms of {@link #add(Object)} and
   * {@link #add(Object, int)}. If you override either of these methods, you may wish to override
   * {@link #addAll(Collection)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,asMap,com.google.common.collect.Synchronized$SynchronizedMultimap:asMap(),740,748,"/**
 * Returns a map view of the collection's elements.
 * Returns a synchronized map.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,inverse,com.google.common.collect.Synchronized$SynchronizedBiMap:inverse(),1380,1388,"/**
 * Returns a reverse view of the map.
 * @return A BiMap with keys and values swapped.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:<init>(java.util.NavigableMap,java.lang.Object)",1605,1607,"/**
 * Constructs a SynchronizedNavigableMap using the given delegate and mutex.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedMap,"com.google.common.collect.Synchronized:sortedMap(java.util.SortedMap,java.lang.Object)",1277,1280,"/**
 * Wraps a SortedMap with synchronization.
 * @param sortedMap The SortedMap to synchronize.
 * @param mutex Mutex object for synchronization.
 * @return A synchronized SortedMap.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,row,com.google.common.collect.Synchronized$SynchronizedTable:row(java.lang.Object),2132,2137,"/**
 * Retrieves a row from the delegate map.
 * @param rowKey The key for the row to retrieve.
 * @return A map representing the row.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,column,com.google.common.collect.Synchronized$SynchronizedTable:column(java.lang.Object),2139,2144,"/**
 * Retrieves a column from the underlying map.
 * @param columnKey Key for the column to retrieve.
 * @return Map containing the column data.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,rowMap,com.google.common.collect.Synchronized$SynchronizedTable:rowMap(),2174,2179,"/**
 * Returns a map of rows to column-value maps, synchronized.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,columnMap,com.google.common.collect.Synchronized$SynchronizedTable:columnMap(),2181,2186,"/**
 * Returns a map of column maps, synchronized for thread safety.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,listMultimap,"com.google.common.collect.Synchronized:listMultimap(com.google.common.collect.ListMultimap,java.lang.Object)",782,788,"/**
 * Returns a synchronized ListMultimap or the original if already synchronized.
 * @param multimap The ListMultimap to synchronize.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,<init>,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap,java.lang.Object)",893,895,"/**
 * Constructs a SynchronizedSortedSetMultimap with the given delegate and mutex.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,setMultimap,"com.google.common.collect.Synchronized:setMultimap(com.google.common.collect.SetMultimap,java.lang.Object)",826,832,"/**
 * Returns a synchronized SetMultimap or the original if already synchronized.
 * @param multimap The SetMultimap to synchronize.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedMultimap,com.google.common.collect.Multimaps:synchronizedMultimap(com.google.common.collect.Multimap),639,643,"/**
 * Returns a synchronized Multimap backed by the given map.
 * @param multimap the Multimap to synchronize
 * @return a synchronized Multimap
 */
","* Returns a synchronized (thread-safe) multimap backed by the specified multimap. In order to
   * guarantee serial access, it is critical that <b>all</b> access to the backing multimap is
   * accomplished through the returned multimap.
   *
   * <p>It is imperative that the user manually synchronize on the returned multimap when accessing
   * any of its collection views:
   *
   * {@snippet :
   * Multimap<K, V> multimap = Multimaps.synchronizedMultimap(
   *     HashMultimap.<K, V>create());
   * ...
   * Collection<V> values = multimap.get(key);  // Needn't be in synchronized block
   * ...
   * synchronized (multimap) {  // Synchronizing on multimap, not values!
   *   Iterator<V> i = values.iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>Note that the generated multimap's {@link Multimap#removeAll} and {@link
   * Multimap#replaceValues} methods return collections that aren't synchronized.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped in a synchronized view
   * @return a synchronized view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,synchronizedTable,com.google.common.collect.Tables:synchronizedTable(com.google.common.collect.Table),699,703,"/**
 * Wraps a Table for synchronized access.
 * @param table The Table to be synchronized.
 * @return A synchronized Table.
 */
","* Returns a synchronized (thread-safe) table backed by the specified table. In order to guarantee
   * serial access, it is critical that <b>all</b> access to the backing table is accomplished
   * through the returned table.
   *
   * <p>It is imperative that the user manually synchronize on the returned table when accessing any
   * of its collection views:
   *
   * {@snippet :
   * Table<R, C, V> table = Tables.synchronizedTable(HashBasedTable.<R, C, V>create());
   * ...
   * Map<C, V> row = table.row(rowKey);  // Needn't be in synchronized block
   * ...
   * synchronized (table) {  // Synchronizing on table, not row!
   *   Iterator<Entry<C, V>> i = row.entrySet().iterator(); // Must be in synchronized block
   *   while (i.hasNext()) {
   *     foo(i.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the table to be wrapped in a synchronized view
   * @return a synchronized view of the specified table
   * @since 22.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/escape/UnicodeEscaper.java,escape,com.google.common.escape.UnicodeEscaper:escape(java.lang.String),100,106,"/**
 * Escapes a string, replacing special characters.
 * @param string The string to escape.
 * @return The escaped string.
 */
","* Returns the escaped form of a given literal string.
   *
   * <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
   * use this method. If an input string ends with an unmatched high surrogate character, then this
   * method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
   * href=""http://en.wikipedia.org/wiki/UTF-16"">UTF-16</a> before calling this method.
   *
   * <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
   * efficiency by inlining the implementation of {@link #nextEscapeIndex(CharSequence, int, int)}
   * directly. Doing this for {@link com.google.common.net.PercentEscaper} more than doubled the
   * performance for unescaped strings (as measured by {@code CharEscapersBenchmark}).
   *
   * @param string the literal string to be escaped
   * @return the escaped form of {@code string}
   * @throws NullPointerException if {@code string} is null
   * @throws IllegalArgumentException if invalid surrogate characters are encountered",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeNode,com.google.common.graph.StandardMutableGraph:removeNode(java.lang.Object),60,63,"/**
 * Removes a node from the backing value graph.
 * @param node The node to remove.
 * @return True if the node was removed, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,"com.google.common.graph.StandardMutableGraph:removeEdge(java.lang.Object,java.lang.Object)",65,68,"/**
 * Removes an edge between two nodes.
 * @param nodeU The starting node.
 * @param nodeV The ending node.
 * @return True if edge was removed, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,removeEdge,com.google.common.graph.StandardMutableValueGraph:removeEdge(com.google.common.graph.EndpointPair),180,185,"/**
 * Removes the edge between the given endpoints.
 * @param endpoints The endpoints of the edge to remove.
 * @return The removed edge value, or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.StandardNetwork:incidentNodes(java.lang.Object),135,141,"/**
 * Gets incident nodes for an edge.
 * @param edge The edge to examine.
 * @return EndpointPair containing incident nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toStringBuilder,com.google.common.io.CharStreams:toStringBuilder(java.lang.Readable),174,182,"/**
 * Converts a Readable object to a StringBuilder.
 * @param r Readable object to convert; throws IOException.
 * @return StringBuilder containing the content of the Readable.
 */
","* Reads all characters from a {@link Readable} object into a new {@link StringBuilder} instance.
   * Does not close the {@code Readable}.
   *
   * @param r the object to read from
   * @return a {@link StringBuilder} containing all the characters
   * @throws IOException if an I/O error occurs",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,visitParameterizedType,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:visitParameterizedType(java.lang.reflect.ParameterizedType),393,404,"/**
 * Processes a parameterized type, mapping type variables to arguments.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,catching,"com.google.common.util.concurrent.Futures:catching(com.google.common.util.concurrent.ListenableFuture,java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",298,306,"/**
 * Creates a ListenableFuture that catches exceptions of a type.
 * @param input Future to wrap.
 * @param exceptionType Exception type to catch.
 * @param fallback Fallback function.
 * @param executor Executor for fallback.
 * @return ListenableFuture with exception handling.
 */
","* Returns a {@code Future} whose result is taken from the given primary {@code input} or, if the
   * primary input fails with the given {@code exceptionType}, from the result provided by the
   * {@code fallback}. {@link Function#apply} is not invoked until the primary input has failed, so
   * if the primary input succeeds, it is never invoked. If, during the invocation of {@code
   * fallback}, an exception is thrown, this exception is used as the result of the output {@code
   * Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * ListenableFuture<Integer> fetchCounterFuture = ...;
   *
   * // Falling back to a zero counter in case an exception happens when
   * // processing the RPC to fetch counters.
   * ListenableFuture<Integer> faultTolerantFuture = Futures.catching(
   *     fetchCounterFuture, FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * @param input the primary input {@code Future}
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if {@code input} fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code input.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if {@code input} fails
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture:cancel(boolean),342,410,"/**
 * Attempts to cancel the future.
 * @param mayInterruptIfRunning whether to interrupt running threads
 * @return true if cancellation succeeded, false otherwise
 */
","* {@inheritDoc}
   *
   * <p>If a cancellation attempt succeeds on a {@code Future} that had previously been {@linkplain
   * #setFuture set asynchronously}, then the cancellation will also be propagated to the delegate
   * {@code Future} that was supplied in the {@code setFuture} call.
   *
   * <p>Rather than override this method to perform additional cancellation work or cleanup,
   * subclasses should override {@link #afterDone}, consulting {@link #isCancelled} and {@link
   * #wasInterrupted} as necessary. This ensures that the work is done even if the future is
   * cancelled without a call to {@code cancel}, such as by calling {@code
   * setFuture(cancelledFuture)}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,set,com.google.common.util.concurrent.AbstractFuture:set(java.lang.Object),487,495,"/**
 * Atomically sets the value. Returns true if successful, false otherwise.
 */
","* Sets the result of this {@code Future} unless this {@code Future} has already been cancelled or
   * set (including {@linkplain #setFuture set asynchronously}). When a call to this method returns,
   * the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b> the call was
   * accepted (in which case it returns {@code true}). If it returns {@code false}, the {@code
   * Future} may have previously been set asynchronously, in which case its result may not be known
   * yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param value the value to be used as the result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setException,com.google.common.util.concurrent.AbstractFuture:setException(java.lang.Throwable),512,520,"/**
 * Atomically sets the exception and completes the task if successful.
 * @param throwable The exception to set.
 * @return True if set successfully, false otherwise.
 */
","* Sets the failed result of this {@code Future} unless this {@code Future} has already been
   * cancelled or set (including {@linkplain #setFuture set asynchronously}). When a call to this
   * method returns, the {@code Future} is guaranteed to be {@linkplain #isDone done} <b>only if</b>
   * the call was accepted (in which case it returns {@code true}). If it returns {@code false}, the
   * {@code Future} may have previously been set asynchronously, in which case its result may not be
   * known yet. That result, though not yet known, cannot be overridden by a call to a {@code set*}
   * method, only by a call to {@link #cancel}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param throwable the exception to be used as the failed result
   * @return true if the attempt was accepted, completing the {@code Future}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,setFuture,com.google.common.util.concurrent.AbstractFuture:setFuture(com.google.common.util.concurrent.ListenableFuture),551,603,"/**
 * Sets a future value or cancellation. Returns true if successful.
 * @param future The future to set, or null if canceling.
 */
","* Sets the result of this {@code Future} to match the supplied input {@code Future} once the
   * supplied {@code Future} is done, unless this {@code Future} has already been cancelled or set
   * (including ""set asynchronously,"" defined below).
   *
   * <p>If the supplied future is {@linkplain #isDone done} when this method is called and the call
   * is accepted, then this future is guaranteed to have been completed with the supplied future by
   * the time this method returns. If the supplied future is not done and the call is accepted, then
   * the future will be <i>set asynchronously</i>. Note that such a result, though not yet known,
   * cannot be overridden by a call to a {@code set*} method, only by a call to {@link #cancel}.
   *
   * <p>If the call {@code setFuture(delegate)} is accepted and this {@code Future} is later
   * cancelled, cancellation will be propagated to {@code delegate}. Additionally, any call to
   * {@code setFuture} after any cancellation will propagate cancellation to the supplied {@code
   * Future}.
   *
   * <p>Note that, even if the supplied future is cancelled and it causes this future to complete,
   * it will never trigger interruption behavior. In particular, it will not cause this future to
   * invoke the {@link #interruptTask} method, and the {@link #wasInterrupted} method will not
   * return {@code true}.
   *
   * <p>Beware of completing a future while holding a lock. Its listeners may do slow work or
   * acquire other locks, risking deadlocks.
   *
   * @param future the future to delegate to
   * @return true if the attempt was accepted, indicating that the {@code Future} was not previously
   *     cancelled or set.
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,transform,"com.google.common.util.concurrent.Futures:transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)",486,490,"/**
 * Transforms a ListenableFuture using a function and executor.
 * @param input Future to transform.
 * @param function Function to apply.
 * @param executor Executor for asynchronous execution.
 */
","* Returns a new {@code Future} whose result is derived from the result of the given {@code
   * Future}. If {@code input} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> queryFuture = ...;
   * ListenableFuture<List<Row>> rowsFuture =
   *     transform(queryFuture, QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * @param input The future to transform
   * @param function A Function to transform the results of the provided future to the results of
   *     the returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.
   * @since 9.0 (in 2.0 as {@code compose})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,incrementAndGet,com.google.common.util.concurrent.AtomicLongMap:incrementAndGet(java.lang.Object),91,94,"/**
 * Atomically increments the counter for the given key by 1.
 * @param key The key whose counter is incremented.
 * @return The updated counter value.
 */
","* Increments by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,decrementAndGet,com.google.common.util.concurrent.AtomicLongMap:decrementAndGet(java.lang.Object),99,102,"/**
 * Decrements the counter associated with the key by 1.
 * @param key The key for which to decrement the counter.
 * @return The new value of the counter.
 */
","* Decrements by one the value currently associated with {@code key}, and returns the new value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndIncrement,com.google.common.util.concurrent.AtomicLongMap:getAndIncrement(java.lang.Object),116,119,"/**
 * Atomically increments the value associated with the key.
 * @param key The key whose value is to be incremented.
 * @return The incremented value.
 */","* Increments by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,getAndDecrement,com.google.common.util.concurrent.AtomicLongMap:getAndDecrement(java.lang.Object),124,127,"/**
 * Atomically gets the value and decrements it by one.
 * @param key The key whose value is to be decremented.
 * @return The previous value associated with the key.
 */","* Decrements by one the value currently associated with {@code key}, and returns the old value.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AtomicLongMap.java,create,com.google.common.util.concurrent.AtomicLongMap:create(java.util.Map),74,78,"/**
 * Creates an AtomicLongMap from a given map.
 * @param m Map to initialize the AtomicLongMap with.
 * @return A new AtomicLongMap containing the data from the map.
 */
",Creates an {@code AtomicLongMap} with the same mappings as the specified {@code Map}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractGraph:incidentEdgeOrder(),101,104,"/**
 * Returns an ElementOrder for incident edges, unordered.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph:incidentEdgeOrder(),101,104,"/**
 * Returns an edge order for incident edges, unordered.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,<init>,com.google.common.graph.GraphBuilder:<init>(boolean),77,79,"/**
 * Constructs a GraphBuilder with the specified direction.
 * @param directed whether the graph is directed
 */
",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,<init>,com.google.common.graph.NetworkBuilder:<init>(boolean),82,84,"/**
 * Constructs a NetworkBuilder with the specified directed flag.
 */",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,<init>,com.google.common.graph.ValueGraphBuilder:<init>(boolean),79,81,"/**
 * Constructs a ValueGraphBuilder with the specified direction.
 * @param directed if the graph is directed
 */
",Creates a new instance with the specified edge directionality.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,addListener,"com.google.common.util.concurrent.AbstractService:addListener(com.google.common.util.concurrent.Service$Listener,java.util.concurrent.Executor)",510,513,"/**
 * Adds a listener and executor to the listeners list.
 * @param listener The listener to add.
 * @param executor The executor for the listener.
 */
",* @since 13.0,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",579,581,"/**
 * Adds a listener to be notified by the listeners list.
 * @param listener The listener to add.
 * @param executor Executor for asynchronous listener execution.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,apply,com.google.common.base.Converter:apply(java.lang.Object),447,470,"/**
 * Applies a conversion to the input 'a' and returns the result.
 */",* @deprecated Provided to satisfy the {@code Function} interface; use {@link #convert} instead.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,create,com.google.common.collect.CompactHashMap:create(),97,100,"/**
 * Creates a new, empty CompactHashMap instance.
 */",Creates an empty {@code CompactHashMap} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,createWithExpectedSize,com.google.common.collect.CompactHashMap:createWithExpectedSize(int),111,114,"/**
 * Creates a new CompactHashMap with the specified expected size.
 * @param expectedSize Initial capacity for the map.
 * @return A new CompactHashMap instance.
 */
","* Creates a {@code CompactHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashMap} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,"com.google.common.collect.CompactLinkedHashMap:<init>(int,boolean)",110,113,"/**
 * Constructs a CompactLinkedHashMap with initial size and access order.
 * @param expectedSize Initial capacity of the map.
 * @param accessOrder Whether access order is used.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(),85,87,"/**
 * Creates a new, empty CompactHashSet.
 * Returns an empty set to store elements.
 */
",Creates an empty {@code CompactHashSet} instance.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(),126,126,"/**
* Constructs a new, empty CompactLinkedHashSet.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,createWithExpectedSize,com.google.common.collect.CompactHashSet:createWithExpectedSize(int),126,129,"/**
 * Creates a new CompactHashSet with the specified expected size.
 * @param expectedSize The initial capacity for the set.
 * @return A new CompactHashSet instance.
 */
","* Creates a {@code CompactHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without growth.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactHashSet} with enough capacity to hold {@code expectedSize}
   *     elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,<init>,com.google.common.collect.CompactLinkedHashSet:<init>(int),128,130,"/**
 * Constructs a CompactLinkedHashSet with an expected size.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newListMultimap,"com.google.common.collect.Multimaps:newListMultimap(java.util.Map,com.google.common.base.Supplier)",330,334,"/**
 * Creates a new ListMultimap from a map and a list factory.
 * @param map source map; key type K, value type Collection<V>
 * @param factory list factory for values
 * @return A new ListMultimap instance
 */
","* Creates a new {@code ListMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link List} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. The multimap's {@code get}, {@code
   * removeAll}, and {@code replaceValues} methods return {@code RandomAccess} lists if the factory
   * does. However, the multimap's {@code get} method returns instances of a different class than
   * does {@code factory.get()}.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the lists generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedListMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link ArrayListMultimap#create()} and {@link
   * LinkedListMultimap#create()} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the lists returned by
   * {@code factory}. Those objects should not be manually updated, they should be empty when
   * provided, and they should not use soft, weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty lists that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedKeySortedSetMultimap.java,<init>,com.google.common.collect.AbstractSortedKeySortedSetMultimap:<init>(java.util.SortedMap),39,41,"/**
* Constructs a SortedSetMultimap from a SortedMap.
* @param map The map used to initialize the multimap.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,"com.google.common.collect.Multimaps$CustomSortedSetMultimap:<init>(java.util.Map,com.google.common.base.Supplier)",535,539,"/**
 * Constructs a CustomSortedSetMultimap from a map and a factory.
 * @param map Initial map of keys to sorted sets.
 * @param factory Factory for creating sorted sets.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSetMultimap,"com.google.common.collect.Multimaps:newSetMultimap(java.util.Map,com.google.common.base.Supplier)",416,420,"/**
 * Creates a new SetMultimap from a map and a set factory.
 * @param map Source map.
 * @param factory Set creation factory.
 * @return New SetMultimap instance.
 */
","* Creates a new {@code SetMultimap} that uses the provided map and factory. It can generate a
   * multimap based on arbitrary {@link Map} and {@link Set} classes. Most users should prefer
   * {@link MultimapBuilder}, though a small number of users will need this method to cover map or
   * collection types that {@link MultimapBuilder} does not support.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link HashMultimap#create()}, {@link
   * LinkedHashMultimap#create()}, {@link TreeMultimap#create()}, and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sets that will each hold all values for a given key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMultiset,"com.google.common.collect.CollectCollectors:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",152,165,"/**
 * Converts a stream to an ImmutableMultiset based on element & count.
 * @param elementFunction Extracts element from input.
 * @param countFunction Provides count for each element.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,<init>,com.google.common.collect.ImmutableMultiset$Builder:<init>(),483,485,"/**
 * Constructs a new Builder with a LinkedHashMultiset.
 */","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableMultiset#builder}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,spliterator,com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:spliterator(),67,70,"/**
 * Returns a spliterator for the map entries.
 * Returns a Spliterator for iterating over map entries.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,spliterator,com.google.common.collect.ImmutableSortedMap$1EntrySet:spliterator(),611,614,"/**
 * Returns a Spliterator for the elements in this collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,spliterator,com.google.common.collect.RegularImmutableSortedSet:spliterator(),80,83,"/**
 * Returns a spliterator for the elements of this collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Crc32cHashFunction.java,newHasher,com.google.common.hash.Crc32cHashFunction:newHasher(),35,38,"/**
 * Creates a new Crc32cHasher instance.
 * Returns a new hasher object for CRC32c calculations.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_128HashFunction.java,newHasher,com.google.common.hash.Murmur3_128HashFunction:newHasher(),63,66,"/**
 * Creates a new Hasher instance using Murmur3_128Hasher.
 * @return A new Hasher object seeded with the current seed.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/SipHashFunction.java,newHasher,com.google.common.hash.SipHashFunction:newHasher(),71,74,"/**
 * Creates a new Hasher instance using SipHasher.
 * @return A new SipHasher object.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,toString,com.google.common.math.Stats:toString(),445,458,"/**
 * Returns a string representation of the statistics.
 * Includes count, mean, std dev, min, and max if count > 0.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Converter.java,andThen,com.google.common.base.Converter:andThen(com.google.common.base.Converter),376,378,"/**
 * Combines this converter with another to convert A -> B -> C.
 * @param secondConverter Converter from B to C
 * @return Combined converter
 */
","* Returns a converter whose {@code convert} method applies {@code secondConverter} to the result
   * of this converter. Its {@code reverse} method applies the converters in reverse order.
   *
   * <p>The returned converter is serializable if {@code this} converter and {@code secondConverter}
   * are.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,equals,com.google.common.collect.Sets$CartesianSet:equals(java.lang.Object),1611,1624,"/**
 * Checks if two CartesianSets are equal based on their axes.
 * @param object the object to compare to
 * @return true if the sets are equal, false otherwise
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$TypeVariableImpl:equals(java.lang.Object),438,462,"/**
 * Checks if this TypeVariable is equal to another object.
 * @param obj Object to compare with, can be null.
 * @return True if objects are equal, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,equals,com.google.common.reflect.Types$WildcardTypeImpl:equals(java.lang.Object),487,495,"/**
 * Checks if this wildcard type is equal to another wildcard type.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,appendTo,"com.google.common.base.Joiner:appendTo(java.lang.StringBuilder,java.lang.Object[])",168,173,"/**
 * Appends object array parts to the given StringBuilder.
 * @param builder StringBuilder to append to
 * @param parts Object array to append
 * @return StringBuilder with appended parts
 */
","* Appends the string representation of each of {@code parts}, using the previously configured
   * separator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,
   * Iterable)}, except that it does not throw {@link IOException}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Iterable),193,233,"/**
 * Joins elements of an iterable into a single string, using separator.
 * @param parts Iterable of elements to join.
 * @return Joined string.
 */
","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,create,com.google.common.collect.MapMakerInternalMap:create(com.google.common.collect.MapMaker),205,223,"/**
 * Creates a MapMakerInternalMap based on the builder's strength settings.
 */",Returns a fresh {@link MapMakerInternalMap} as specified by the given {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,createWithDummyValues,com.google.common.collect.MapMakerInternalMap:createWithDummyValues(com.google.common.collect.MapMaker),235,250,"/**
 * Creates a MapMakerInternalMap with dummy values based on builder strengths.
 */","* Returns a fresh {@link MapMakerInternalMap} with {@link MapMaker.Dummy} values but otherwise as
   * specified by the given {@code builder}. The returned {@link MapMakerInternalMap} will be
   * optimized to saved memory. Since {@link MapMaker.Dummy} is a singleton, we don't need to store
   * any values at all. Because of this optimization, {@code build.getValueStrength()} must be
   * {@link Strength#STRONG}.
   *
   * <p>This method is intended to only be used by the internal implementation of {@link Interners},
   * since a map of dummy values is the exact use case there.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,concat,com.google.common.collect.FluentIterable:concat(java.lang.Iterable),252,256,"/**
 * Concatenates multiple iterables into a single FluentIterable.
 * @param inputs Iterables to concatenate; may be empty.
 */
","* Returns a fluent iterable that combines several iterables. The returned iterable has an
   * iterator that traverses the elements of each iterable in {@code inputs}. The input iterators
   * are not polled until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>{@code Stream} equivalent:</b> to concatenate an arbitrary number of streams, use {@code
   * Stream.of(stream1, stream2, ...).flatMap(s -> s)}. If the sources are iterables, use {@code
   * Stream.of(iter1, iter2, ...).flatMap(Streams::stream)}.
   *
   * @throws NullPointerException if any of the provided iterables is {@code null}
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,toString,com.google.common.util.concurrent.AbstractFuture:toString(),859,877,"/**
 * Returns a string representation of this future, including status.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,get,com.google.common.collect.FluentIterable:get(int),835,838,"/**
 * Retrieves the element at the specified position.
 * @param position the index of the element to retrieve
 * @return the element at the given position
 */","* Returns the element at the specified position in this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (but note
   * that this throws different exception types, and throws an exception if {@code null} would be
   * returned).
   *
   * @param position position of the element to return
   * @return the element at the specified position in this fluent iterable
   * @throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to
   *     the size of this fluent iterable",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,of,com.google.common.graph.DirectedMultiNetworkConnections:of(),49,54,"/**
 * Creates a new, empty DirectedMultiNetworkConnections instance.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,newConnections,com.google.common.graph.StandardMutableValueGraph:newConnections(),187,191,"/**
 * Creates a new GraphConnections object based on graph direction.
 * @return GraphConnections instance (directed or undirected).
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,acquire,com.google.common.util.concurrent.RateLimiter:acquire(),288,291,"/**
 * Acquires a lock with a default timeout (1).
 * @return The lock acquisition time in milliseconds.
 */
","* Acquires a single permit from this {@code RateLimiter}, blocking until the request can be
   * granted. Tells the amount of time slept, if any.
   *
   * <p>This method is equivalent to {@code acquire(1)}.
   *
   * @return time spent sleeping to enforce rate, in seconds; 0.0 if not rate-limited
   * @since 16.0 (present in 13.0 with {@code void} return type})",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enter,com.google.common.util.concurrent.Monitor:enter(java.time.Duration),391,393,"/**
 * Enters a timed event.
 * @param time The duration of the timed event.
 * @return True if entry was successful.
 */
","* Enters this monitor. Blocks at most the given time.
   *
   * @return whether the monitor was entered
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",709,726,"/**
 * Attempts to enter the guard, returning true if satisfied.
 * @param guard The guard to enter.
 * @param time The timeout duration.
 * @param unit The time unit of the timeout.
 */
","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(com.google.common.cache.CacheBuilderSpec),329,332,"/**
 * Creates a CacheBuilder from a CacheBuilderSpec.
 * @param spec CacheBuilderSpec object to create builder from.
 * @return CacheBuilder instance.
 */
","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   *
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newStrongInterner,com.google.common.collect.Interners:newStrongInterner(),103,105,"/**
 * Creates a strong interner.
 * Returns a new builder configured for strong interning.
 */
","* Returns a new thread-safe interner which retains a strong reference to each instance it has
   * interned, thus preventing these instances from being garbage-collected. If this retention is
   * acceptable, this implementation may perform better than {@link #newWeakInterner}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,newWeakInterner,com.google.common.collect.Interners:newWeakInterner(),113,116,"/**
 * Creates a new weak-typed {@link Interner}.
 * Returns a builder configured for weak references.
 */","* Returns a new thread-safe interner which retains a weak reference to each instance it has
   * interned, and so does not prevent these instances from being garbage-collected. This most
   * likely does not perform as well as {@link #newStrongInterner}, but is the best alternative when
   * the memory usage of that implementation is unacceptable.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,entrySpliterator,com.google.common.collect.ArrayTable$ArrayMap:entrySpliterator(),256,259,"/**
 * Returns a Spliterator for the map's entries.
 * Uses CollectSpliterators for indexed iteration.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Column:getValue(int),628,631,"/**
 * Retrieves the value at the specified index.
 * @param index The index of the value to retrieve.
 * @return The value at the index, or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable$Row:getValue(int),720,723,"/**
 * Retrieves the value at the specified row and column index.
 * @param index Column index to retrieve.
 * @return Value at the specified index, or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,get,"com.google.common.collect.ArrayTable:get(java.lang.Object,java.lang.Object)",436,441,"/**
 * Retrieves a value at the specified row and column.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return Value at the row/column or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,getValue,com.google.common.collect.ArrayTable:getValue(int),587,591,"/**
 * Retrieves a value at the specified index in the grid.
 * @param index The index of the value to retrieve.
 * @return The value at the given index, or null if out of bounds.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Column:setValue(int,java.lang.Object)",633,636,"/**
* Sets the value at the given index.
* @param index The index to set.
* @param newValue The new value to set.
* @return The previous value at the index.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,setValue,"com.google.common.collect.ArrayTable$Row:setValue(int,java.lang.Object)",725,728,"/**
 * Sets the value at the specified index.
 * @param index index of the value to set
 * @param newValue new value to set, can be null
 * @return The previous value at the index.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,put,"com.google.common.collect.ArrayTable:put(java.lang.Object,java.lang.Object,java.lang.Object)",457,467,"/**
 * Puts a value into the table at the specified row and column.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @param value Value to set.
 * @return Previous value or null if new.
 */
","* {@inheritDoc}
   *
   * @throws IllegalArgumentException if {@code rowKey} is not in {@link #rowKeySet()} or {@code
   *     columnKey} is not in {@link #columnKeySet()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,erase,"com.google.common.collect.ArrayTable:erase(java.lang.Object,java.lang.Object)",516,524,"/**
 * Erases a cell value at the given row and column keys.
 * @param rowKey Row key.
 * @param columnKey Column key.
 * @return The erased value or null if row/column not found.
 */
","* Associates the value {@code null} with the specified keys, assuming both keys are valid. If
   * either key is null or isn't among the keys provided during construction, this method has no
   * effect.
   *
   * <p>This method is equivalent to {@code put(rowKey, columnKey, null)} when both provided keys
   * are valid.
   *
   * @param rowKey row key of mapping to be erased
   * @param columnKey column key of mapping to be erased
   * @return the value previously associated with the keys, or {@code null} if no mapping existed
   *     for the keys",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,remove,com.google.common.collect.Lists$ReverseList:remove(int),896,900,"/**
 * Removes the element at the given index.
 * @param index the index of the element to remove
 * @return the removed element, or null if index is out of bounds
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,set,"com.google.common.collect.Lists$ReverseList:set(int,java.lang.Object)",907,911,"/**
 * Sets the element at the specified index with the given element.
 * @param index the index of the element to set
 * @param element the element to set at the specified index
 * @return the element previously at the specified index
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,get,com.google.common.collect.Lists$ReverseList:get(int),913,917,"/**
 * Retrieves the element at the specified index.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,get,com.google.common.primitives.ImmutableDoubleArray$AsList:get(int),499,502,"/**
 * Retrieves the element at the specified index from the parent.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray:equals(java.lang.Object),570,588,"/**
 * Checks if this array is equal to another ImmutableDoubleArray.
 * @param object Object to compare to, must be ImmutableDoubleArray.
 * @return True if arrays are equal, false otherwise.
 */
","* Returns {@code true} if {@code object} is an {@code ImmutableDoubleArray} containing the same
   * values as this one, in the same order. Values are compared as if by {@link Double#equals}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,get,com.google.common.primitives.ImmutableIntArray$AsList:get(int),494,497,"/**
 * Delegates to the parent's get method for the specified index.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray:equals(java.lang.Object),565,583,"/**
 * Checks if this array is equal to another ImmutableIntArray.
 * @param object The object to compare to.
 * @return True if the arrays are equal, false otherwise.
 */
","* Returns {@code true} if {@code object} is an {@code ImmutableIntArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,get,com.google.common.primitives.ImmutableLongArray$AsList:get(int),496,499,"/**
 * Retrieves the element at the specified index from the parent.
 * @param index the index of the element to retrieve
 * @return the element at the given index
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray:equals(java.lang.Object),567,585,"/**
 * Checks if two ImmutableLongArray objects are equal.
 * @param object The object to compare to.
 * @return True if objects are equal, false otherwise.
 */
","* Returns {@code true} if {@code object} is an {@code ImmutableLongArray} containing the same
   * values as this one, in the same order.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts a string to a new format based on the provided CaseFormat.
 * @param format The format to apply (e.g., UPPER_CAMEL)
 * @param s The string to convert
 * @return The converted string
 */
",Enum values can override for performance reasons.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,indexIn,com.google.common.base.CharMatcher:indexIn(java.lang.CharSequence),544,546,"/**
 * Returns the index of the first occurrence of sequence in this string.
 */","* Returns the index of the first matching BMP character in a character sequence, or {@code -1} if
   * no matching character is present.
   *
   * <p>The default implementation iterates over the sequence in forward order calling {@link
   * #matches} for each character.
   *
   * @param sequence the character sequence to examine from the beginning
   * @return an index, or {@code -1} if no character matches",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeTokenIfPresent,com.google.common.net.MediaType$Tokenizer:consumeTokenIfPresent(com.google.common.base.CharMatcher),1152,1158,"/**
 * Consumes and returns a token from the input string if present.
 * @param matcher CharMatcher to identify the token's end.
 * @return The consumed token, or the remaining input if none.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractIndexedListIterator.java,<init>,com.google.common.collect.AbstractIndexedListIterator:<init>(int),50,52,"/**
 * Constructor for AbstractIndexedListIterator with default initial offset.
 * @param size The number of elements in the list.
 */
","* Constructs an iterator across a sequence of the given size whose initial position is 0. That
   * is, the first call to {@link #next()} will return the first element (or throw {@link
   * NoSuchElementException} if {@code size} is zero).
   *
   * @throws IllegalArgumentException if {@code size} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,add,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:add(java.lang.Object),147,151,"/**
* Adds an element to the list.
* @param v Element to add; can be null.
* @return True after adding the element.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,addAll,com.google.common.collect.FilteredKeyMultimap$AddRejectingList:addAll(java.util.Collection),159,163,"/**
 * Adds all elements from the given collection to the list.
 * @param collection Collection of elements to add.
 * @return True after adding all elements.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,add,"com.google.common.collect.Lists$ReverseList:add(int,java.lang.Object)",886,889,"/**
 * Adds an element at the specified index in the list.
 * @param index index for insertion
 * @param element element to be added
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,listIterator,com.google.common.collect.Lists$ReverseList:listIterator(int),935,1003,"/**
 * Returns a list iterator over the list starting at the specified index.
 * @param index the index to start the list iterator
 * @return a ListIterator over the list
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getTeredoInfo,com.google.common.net.InetAddresses:getTeredoInfo(java.net.Inet6Address),823,842,"/**
 * Parses a Teredo IPv6 address and extracts relevant information.
 * @param ip the Teredo IPv6 address to parse
 * @return A TeredoInfo object containing parsed details.
 */
","* Returns the Teredo information embedded in a Teredo address.
   *
   * @param ip {@link Inet6Address} to be examined for embedded Teredo information
   * @return extracted {@code TeredoInfo}
   * @throws IllegalArgumentException if the argument is not a valid IPv6 Teredo address",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Utf8.java,isWellFormed,com.google.common.base.Utf8:isWellFormed(byte[]),110,112,"/**
 * Checks if the byte array is well-formed.
 * Delegates to the overloaded method with start/end indices.
 */
","* Returns {@code true} if {@code bytes} is a <i>well-formed</i> UTF-8 byte sequence according to
   * Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be
   * decoded. For example, some versions of the JDK decoder will accept ""non-shortest form"" byte
   * sequences, but encoding never reproduces these. Such byte sequences are <i>not</i> considered
   * well-formed.
   *
   * <p>This method returns {@code true} if and only if {@code Arrays.equals(bytes, new
   * String(bytes, UTF_8).getBytes(UTF_8))} does, but is more efficient in both time and space.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(java.lang.Object[]),713,727,"/**
 * Converts the map's keys to an array. Uses provided array if possible.
 * @param a Array to store keys, may be reused.
 * @return Array containing the map's keys.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(java.lang.Object[]),1035,1049,"/**
* Converts the map's values to an array of type T.
* @param a array of type T to store the values in.
* @return Array containing the map's values.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,toArray,com.google.common.collect.CompactHashSet:toArray(java.lang.Object[]),635,649,"/**
 * Copies elements to array {@code a}. If not enough space, a new array is created.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$KeySetView:toArray(),702,711,"/**
 * Returns an array representing the collection's keys.
 * Returns an empty array if the underlying map is null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,toArray,com.google.common.collect.CompactHashMap$ValuesView:toArray(),1024,1033,"/**
 * Returns an array representing the collection's values.
 * Returns an empty array if needsAllocArrays() is true.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(byte[]),63,67,"/**
 * Adds the given bytes to the hasher.
 * @param bytes The bytes to add.
 * @return The hasher instance for chaining.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putBytes,com.google.common.hash.AbstractHasher:putBytes(java.nio.ByteBuffer),79,91,"/**
 * Adds bytes from a ByteBuffer to the hasher.
 * @param b ByteBuffer containing bytes to add.
 * @return The hasher instance for chaining.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.Hasher:putBytes(byte[],int,int)",66,68,"/**
* Adds byte array to the hasher.
* @param bytes byte array to add
* @param off start offset in the array
* @param len number of bytes to add
* @return hasher object
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hashing.java,makeHash,com.google.common.hash.Hashing$ConcatenatedHashFunction:makeHash(com.google.common.hash.Hasher[]),798,807,"/**
 * Combines hashes from multiple Hashers into a single HashCode.
 * @param hashers array of Hashers to combine
 * @return HashCode representing the combined hashes
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encodeTo,"com.google.common.io.BaseEncoding$StandardBaseEncoding:encodeTo(java.lang.Appendable,byte[],int,int)",683,690,"/**
 * Encodes byte array to Appendable in chunks.
 * @param target The target Appendable to write to.
 * @param bytes The byte array to encode.
 * @param off Start offset in the byte array.
 * @param len Number of bytes to encode.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,encode,com.google.common.io.BaseEncoding:encode(byte[]),146,148,"/**
 * Encodes a byte array into a String.
 * @param bytes The byte array to encode.
 * @return The encoded String.
 */
","Encodes the specified byte array, and returns the encoded {@code String}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,toString,com.google.common.io.ByteSource$ByteArrayByteSource:toString(),640,645,"/**
 * Returns a string representation of the ByteSource.
 * Truncates the base16 encoding to 30 chars for brevity.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[],int,int)",813,819,"/**
 * Reads exactly {@code len} bytes from the input stream into the buffer.
 * @param in Input stream to read from.
 * @param b Buffer to store the bytes.
 * @param off Offset in the buffer.
 * @param len Number of bytes to read.
 * @throws IOException if an I/O error occurs.
 */
","* Attempts to read {@code len} bytes from the stream into the given array starting at {@code
   * off}, with the same behavior as {@link DataInput#readFully(byte[], int, int)}. Does not close
   * the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @param off an int specifying the offset into the data.
   * @param len an int specifying the number of bytes to read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,reverse,com.google.common.primitives.Booleans:reverse(boolean[]),539,542,"/**
 * Reverses the order of elements in the boolean array.
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Booleans.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int,int,int)",590,612,"/**
 * Rotates a boolean array segment by a distance.
 * @param array array to rotate
 * @param distance rotation distance
 * @param fromIndex start index
 * @param toIndex end index (exclusive)
 */
","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Booleans.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,reverse,com.google.common.primitives.Bytes:reverse(byte[]),390,393,"/**
 * Reverses the order of elements in the byte array.
 * @param array The byte array to be reversed.
 */
","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Bytes.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int,int,int)",441,463,"/**
 * Rotates a portion of the array by the given distance.
 * @param array array to rotate, distance is the shift amount.
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is somewhat
   * faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,"com.google.common.primitives.SignedBytes:sortDescending(byte[],int,int)",211,216,"/**
 * Sorts a portion of the byte array in descending order.
 * @param array The byte array to sort.
 * @param fromIndex Start index (inclusive).
 * @param toIndex End index (exclusive).
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,"com.google.common.primitives.Chars:sortDescending(char[],int,int)",467,472,"/**
 * Sorts a portion of the character array in descending order.
 * @param array array to sort, fromIndex and toIndex define the range.
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,reverse,com.google.common.primitives.Chars:reverse(char[]),480,483,"/**
 * Reverses the order of elements in the character array.
 * @param array The character array to be reversed.
 */
","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Chars.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int,int,int)",531,553,"/**
 * Rotates a portion of the array by the given distance.
 * @param array array to rotate, distance is the shift amount
 * @param fromIndex start index, toIndex end index (exclusive)
 */
","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Chars.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,"com.google.common.primitives.Doubles:sortDescending(double[],int,int)",441,446,"/**
 * Sorts a portion of the array in descending order.
 * @param array Array to sort.
 * @param fromIndex Start index (inclusive).
 * @param toIndex End index (exclusive).
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,reverse,com.google.common.primitives.Doubles:reverse(double[]),454,457,"/**
 * Reverses the order of elements in the given double array.
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Doubles.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int,int,int)",505,527,"/**
 * Rotates a portion of the array by the given distance.
 * @param array array to rotate, distance is the rotation distance.
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Bytes.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,"com.google.common.primitives.Floats:sortDescending(float[],int,int)",438,443,"/**
 * Sorts a portion of the array in descending order.
 * @param array Array to sort.
 * @param fromIndex Start index (inclusive).
 * @param toIndex End index (exclusive).
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,reverse,com.google.common.primitives.Floats:reverse(float[]),451,454,"/**
 * Reverses the elements in the input float array.
 * @param array The float array to be reversed.
 */
","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Floats.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int,int,int)",502,524,"/**
 * Rotates a portion of an array by a given distance.
 * @param array array to rotate, distance is the rotation distance.
 */","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Floats.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,subList,"com.google.common.primitives.ImmutableDoubleArray$AsList:subList(int,int)",519,522,"/**
 * Returns a portion of the array as a List.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,subList,"com.google.common.primitives.ImmutableIntArray$AsList:subList(int,int)",514,517,"/**
 * Returns a portion of the list as a new List.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,subList,"com.google.common.primitives.ImmutableLongArray$AsList:subList(int,int)",516,519,"/**
 * Returns a portion of the list as a Long list.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,"com.google.common.primitives.Ints:sortDescending(int[],int,int)",500,505,"/**
 * Sorts a portion of the array in descending order.
 * @param array array to sort, fromIndex and toIndex define range.
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,reverse,com.google.common.primitives.Ints:reverse(int[]),513,516,"/**
 * Reverses the elements in the given integer array in-place.
 */","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Ints.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int,int,int)",564,612,"/**
* Rotates a portion of the array by a given distance.
* @param array array to rotate
* @param distance rotation distance
* @param fromIndex start index of the section to rotate
* @param toIndex end index of the section to rotate
*/","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Ints.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,"com.google.common.primitives.Longs:sortDescending(long[],int,int)",578,583,"/**
 * Sorts a portion of the array in descending order.
 * @param array Array to sort, fromIndex and toIndex define range.
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,reverse,com.google.common.primitives.Longs:reverse(long[]),591,594,"/**
 * Reverses the elements in the provided array in-place.
 * @param array The array to be reversed.
 */
","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Longs.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int,int,int)",642,664,"/**
 * Rotates a portion of the array by the given distance.
 * @param array array to rotate
 * @param distance rotation distance
 * @param fromIndex start index
 * @param toIndex end index
 */
","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Longs.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,"com.google.common.primitives.Shorts:sortDescending(short[],int,int)",490,495,"/**
 * Sorts a portion of the array in descending order.
 * @param array array to sort, fromIndex & toIndex define range.
 */
","* Sorts the elements of {@code array} between {@code fromIndex} inclusive and {@code toIndex}
   * exclusive in descending order.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,reverse,com.google.common.primitives.Shorts:reverse(short[]),503,506,"/**
 * Reverses the order of elements in a short array.
 * @param array The short array to be reversed.
 */
","* Reverses the elements of {@code array}. This is equivalent to {@code
   * Collections.reverse(Shorts.asList(array))}, but is likely to be more efficient.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int,int,int)",554,576,"/**
 * Rotates a short array segment by a given distance.
 * @param array array to rotate, distance is the rotation amount
 */
","* Performs a right rotation of {@code array} between {@code fromIndex} inclusive and {@code
   * toIndex} exclusive. This is equivalent to {@code
   * Collections.rotate(Shorts.asList(array).subList(fromIndex, toIndex), distance)}, but is
   * considerably faster and avoids allocations and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @throws IndexOutOfBoundsException if {@code fromIndex < 0}, {@code toIndex > array.length}, or
   *     {@code toIndex > fromIndex}
   * @since 32.0.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sort,com.google.common.primitives.UnsignedBytes:sort(byte[]),516,519,"/**
 * Sorts the byte array in ascending order.
 * Uses the provided array and sorts it in place.
 */
","* Sorts the array, treating its elements as unsigned bytes.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedBytes.java,sortDescending,com.google.common.primitives.UnsignedBytes:sortDescending(byte[]),545,548,"/**
* Sorts a byte array in descending order.
* @param array The byte array to be sorted.
*/
","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 8-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sort,com.google.common.primitives.UnsignedInts:sort(int[]),224,227,"/**
 * Sorts the provided integer array in ascending order.
 * @param array The array to be sorted.
 */
","* Sorts the array, treating its elements as unsigned 32-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedInts.java,sortDescending,com.google.common.primitives.UnsignedInts:sortDescending(int[]),253,256,"/**
 * Sorts an integer array in descending order.
 * @param array The array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 32-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sort,com.google.common.primitives.UnsignedLongs:sort(long[]),188,191,"/**
 * Sorts the provided long array in ascending order.
 * @param array The long array to be sorted.
 */
","* Sorts the array, treating its elements as unsigned 64-bit integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,sortDescending,com.google.common.primitives.UnsignedLongs:sortDescending(long[]),217,220,"/**
 * Sorts the input array in descending order.
 * @param array The array to be sorted.
 */","* Sorts the elements of {@code array} in descending order, interpreting them as unsigned 64-bit
   * integers.
   *
   * @since 23.1",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,delegate,com.google.common.collect.FilteredKeyMultimap$Entries:delegate(),192,195,"/**
* Filters entries using a predicate.
* Returns a filtered collection of map entries.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,toString,com.google.common.util.concurrent.ServiceManager:toString(),437,442,"/**
 * Returns a string representation of the ServiceManager.
 * Includes services, excluding NoOpService instances.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,on,com.google.common.base.Splitter:on(java.lang.String),166,195,"/**
 * Creates a splitter that splits by the given separator string.
 * @param separator The string used to split the input.
 * @return A Splitter instance.
 */
","* Returns a splitter that uses the given fixed string as a separator. For example, {@code
   * Splitter.on("", "").split(""foo, bar,baz"")} returns an iterable containing {@code [""foo"",
   * ""bar,baz""]}.
   *
   * @param separator the literal, nonempty string to recognize as a separator
   * @return a splitter, with default settings, that recognizes that separator",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(char),442,444,"/**
 * Sets the key-value separator character.
 * @param separator The separator character.
 * @return The splitter with the specified separator.
 */
","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$ComputingValueReference:<init>(com.google.common.cache.LocalCache$ValueReference),3628,3630,"/**
 * Initializes a ComputingValueReference with an existing ValueReference.
 * @param oldValue The ValueReference to initialize from.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingValueReference:<init>(),3496,3498,"/**
 * Default constructor. Initializes with a null value.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,createFromSystemTimer,com.google.common.util.concurrent.RateLimiter$SleepingStopwatch:createFromSystemTimer(),474,490,"/**
 * Creates a SleepingStopwatch backed by a system timer.
 * Returns a new SleepingStopwatch instance.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/internal/Finalizer.java,startFinalizer,"com.google.common.base.internal.Finalizer:startFinalizer(java.lang.Class,java.lang.ref.ReferenceQueue,java.lang.ref.PhantomReference)",62,110,"/**
 * Starts a finalizer thread for a FinalizableReference.
 * @param finalizableReferenceClass FinalizableReference class
 * @param queue Reference queue
 * @param frqReference PhantomReference
 */
","* Starts the Finalizer thread. FinalizableReferenceQueue calls this method reflectively.
   *
   * @param finalizableReferenceClass FinalizableReference.class.
   * @param queue a reference queue that the thread will poll.
   * @param frqReference a phantom reference to the FinalizableReferenceQueue, which will be queued
   *     either when the FinalizableReferenceQueue is no longer referenced anywhere, or when its
   *     close() method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,builder,com.google.common.collect.ImmutableListMultimap:builder(),193,195,"/**
 * Creates a new builder instance for constructing objects.
 * @return A new Builder object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,builder,com.google.common.collect.ImmutableSetMultimap:builder(),221,223,"/**
 * Creates a new builder instance for constructing objects.
 * @return A new Builder object.
 */
",Returns a new {@link Builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LoadingSerializationProxy:<init>(com.google.common.cache.LocalCache),4795,4797,"/**
 * Initializes the LoadingSerializationProxy with a LocalCache.
 * @param cache The LocalCache to associate with this proxy.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalManualCache:writeReplace(),4926,4928,"/**
 * Returns a proxy for manual serialization of the cache.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableMultiset,com.google.common.collect.Multisets:unmodifiableMultiset(com.google.common.collect.Multiset),106,114,"/**
 * Returns an unmodifiable Multiset. Returns the input if already unmodifiable.
 * @param multiset The multiset to wrap in an unmodifiable view.
 */
","* Returns an unmodifiable view of the specified multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param multiset the multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,<init>,com.google.common.collect.UnmodifiableSortedMultiset:<init>(com.google.common.collect.SortedMultiset),40,42,"/**
 * Constructs an UnmodifiableSortedMultiset with the given delegate.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EvictingQueue.java,create,com.google.common.collect.EvictingQueue:create(int),66,68,"/**
 * Creates a new EvictingQueue with the specified maximum size.
 * @param maxSize The maximum number of elements the queue can hold.
 * @return A new EvictingQueue instance.
 */
","* Creates and returns a new evicting queue that will hold up to {@code maxSize} elements.
   *
   * <p>When {@code maxSize} is zero, elements will be evicted immediately after being added to the
   * queue.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingBlockingDeque.java,<init>,com.google.common.collect.ForwardingBlockingDeque:<init>(),56,56,"/**
 * Constructs a new ForwardingBlockingDeque. No-op constructor.
 */",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ForwardingBlockingDeque.java,<init>,com.google.common.util.concurrent.ForwardingBlockingDeque:<init>(),54,54,"/**
* Constructs a new ForwardingBlockingDeque. No-op constructor.
*/
",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,get,com.google.common.collect.FilteredKeyMultimap:get(java.lang.Object),103,112,"/**
 * Retrieves values associated with the given key.
 * Returns values, empty collection, or AddRejecting collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingNavigableSet.java,<init>,com.google.common.collect.ForwardingNavigableSet:<init>(),56,56,"/**
* Default constructor for ForwardingNavigableSet.
*/
",Constructor for use by subclasses.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$UnmodifiableNavigableSet:<init>(java.util.NavigableSet),1963,1966,"/**
 * Creates an unmodifiable navigable set from a navigable set delegate.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableEntrySet,com.google.common.collect.Maps:unmodifiableEntrySet(java.util.Set),1482,1485,"/**
 * Returns an unmodifiable set of entries from the given set.
 * @param entrySet The set of entries to make unmodifiable.
 * @return An unmodifiable set of entries.
 */
","* Returns an unmodifiable view of the specified set of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}, as do any operations that would
   * modify the returned set.
   *
   * @param entrySet the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,<init>,"com.google.common.collect.MapMakerInternalMap$SerializationProxy:<init>(com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.collect.MapMakerInternalMap$Strength,com.google.common.base.Equivalence,com.google.common.base.Equivalence,int,java.util.concurrent.ConcurrentMap)",2883,2892,"/**
 * Constructs a SerializationProxy with provided parameters.
 * @param delegate The ConcurrentMap to wrap.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,unmodifiableNavigableMap,com.google.common.collect.Maps:unmodifiableNavigableMap(java.util.NavigableMap),3432,3443,"/**
 * Returns an unmodifiable NavigableMap.
 * @param map The NavigableMap to unmodifiable.
 * @return An unmodifiable NavigableMap.
 */
","* Returns an unmodifiable view of the specified navigable map. Query operations on the returned
   * map read through to the specified map, and attempts to modify the returned map, whether direct
   * or via its views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * <p>This method's signature will not permit you to convert a {@code NavigableMap<? extends K,
   * V>} to a {@code NavigableMap<K, V>}. If it permitted this, the returned map's {@code
   * comparator()} method might return a {@code Comparator<? extends K>}, which works only on a
   * particular subtype of {@code K}, but promise that it's a {@code Comparator<? super K>}, which
   * must work on any type of {@code K}.
   *
   * @param map the navigable map for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable map
   * @since 12.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingMap(),3584,3590,"/**
 * Returns a reverse-ordered view of the map.
 * Lazily initialized if not already created.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,readResolve,com.google.common.collect.MutableClassToInstanceMap$SerializedForm:readResolve(),202,204,"/**
 * Reconstitutes a serialized object. Uses backingMap to create object.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableListMultimap,com.google.common.collect.Multimaps:unmodifiableListMultimap(com.google.common.collect.ListMultimap),1007,1013,"/**
 * Returns an unmodifiable ListMultimap. Returns the delegate if already unmodifiable.
 */","* Returns an unmodifiable view of the specified {@code ListMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,<init>,com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap:<init>(com.google.common.collect.SortedSetMultimap),864,866,"/**
 * Creates an unmodifiable view of the given sorted set multimap.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSetMultimap,com.google.common.collect.Multimaps:unmodifiableSetMultimap(com.google.common.collect.SetMultimap),923,929,"/**
 * Returns an unmodifiable SetMultimap, or the delegate if already unmodifiable.
 */","* Returns an unmodifiable view of the specified {@code SetMultimap}. Query operations on the
   * returned multimap ""read through"" to the specified multimap, and attempts to modify the returned
   * multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,unmodifiableRowSortedTable,com.google.common.collect.Tables:unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable),632,641,"/**
 * Returns an unmodifiable view of the given RowSortedTable.
 * The table's row type remains mutable.
 */
","* Returns an unmodifiable view of the specified row-sorted table. This method allows modules to
   * provide users with ""read-only"" access to internal tables. Query operations on the returned
   * table ""read through"" to the specified table, and attempts to modify the returned table, whether
   * direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned table will be serializable if the specified table is serializable.
   *
   * @param table the row-sorted table for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified table
   * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,<init>,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask:<init>(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.ScheduledFuture)",587,591,"/**
 * Constructs a ListenableScheduledTask with delegate futures.
 * @param listenableDelegate The listenable future delegate.
 * @param scheduledDelegate The scheduled future delegate.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/JdkFutureAdapters.java,listenInPoolThread,com.google.common.util.concurrent.JdkFutureAdapters:listenInPoolThread(java.util.concurrent.Future),56,62,"/**
 * Wraps a Future as a ListenableFuture, if not already one.
 * @param future The Future to wrap.
 * @return A ListenableFuture.
 */
","* Assigns a thread to the given {@link Future} to provide {@link ListenableFuture} functionality.
   *
   * <p><b>Warning:</b> If the input future does not already implement {@code ListenableFuture}, the
   * returned future will emulate {@link ListenableFuture#addListener} by taking a thread from an
   * internal, unbounded pool at the first call to {@code addListener} and holding it until the
   * future is {@linkplain Future#isDone() done}.
   *
   * <p>Prefer to create {@code ListenableFuture} instances with {@link SettableFuture}, {@link
   * MoreExecutors#listeningDecorator( java.util.concurrent.ExecutorService)}, {@link
   * ListenableFutureTask}, {@link AbstractFuture}, and other utilities over creating plain {@code
   * Future} instances to be upgraded to {@code ListenableFuture} after the fact.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,hashCode,com.google.common.collect.ImmutableMultiset$EntrySet:hashCode(),401,404,"/**
* Returns the hash code of this immutable multiset.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,addCallback,"com.google.common.util.concurrent.Futures:addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",1095,1099,"/**
 * Adds a callback to a ListenableFuture to be executed on an executor.
 * @param future The future to add the callback to.
 * @param callback The callback to be executed.
 * @param executor The executor to run the callback on.
 */
","* Registers separate success and failure callbacks to be run when the {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Exceptions thrown by a {@code callback} will be propagated up to the executor. Any exception
   * thrown during {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an
   * exception thrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught
   * and logged.
   *
   * <p>Example:
   *
   * {@snippet :
   * ListenableFuture<QueryResult> future = ...;
   * Executor e = ...
   * addCallback(future,
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, e);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the warnings the {@link MoreExecutors#directExecutor} documentation.
   *
   * <p>For a more general interface to attach a completion listener to a {@code Future}, see {@link
   * ListenableFuture#addListener addListener}.
   *
   * @param future The future attach the callback to.
   * @param callback The callback to invoke when {@code future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.
   * @since 10.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",246,322,"/**
 * Constructs a LocalCache with the provided builder and loader.
 * @param builder CacheBuilder configuring cache parameters.
 * @param loader CacheLoader to load values for cache entries.
 */
","* Creates a new, empty map with the specified strategy, initial capacity and concurrency level.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractGraph:inDegree(java.lang.Object),147,150,"/**
 * Calculates the in-degree of a node.
 * Returns predecessors size if directed, else degree.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph:inDegree(java.lang.Object),147,150,"/**
 * Calculates the in-degree of a node.
 * Returns predecessors size if directed, else degree.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractGraph:outDegree(java.lang.Object),152,155,"/**
 * Returns the out-degree of a node.
 * Returns successor count if directed, else total degree.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph:outDegree(java.lang.Object),152,155,"/**
 * Calculates the out-degree of a node.
 * Returns successors size if directed, else returns degree.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,degree,com.google.common.graph.AbstractValueGraph$1:degree(java.lang.Object),136,145,"/**
 * Returns the degree of a node.
 * @param node the node to get the degree of
 * @return the degree of the node
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,read,com.google.common.io.MoreFiles$PathByteSource:read(),160,165,"/**
 * Reads the entire file content into a byte array.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,<init>,"com.google.common.collect.EnumBiMap:<init>(java.lang.Class,java.lang.Class)",90,95,"/**
 * Constructs a new EnumBiMap with specified key and value types.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,<init>,com.google.common.collect.EnumHashBiMap:<init>(java.lang.Class),78,82,"/**
 * Initializes the bi-map with an EnumMap and HashMap.
 * @param keyType The class of the enum keys.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(),77,80,"/**
 * Creates a new TreeMultiset with natural ordering.
 * Returns a TreeMultiset instance.
 */
","* Creates a new, empty multiset, sorted according to the elements' natural order. All elements
   * inserted into the multiset must implement the {@code Comparable} interface. Furthermore, all
   * such elements must be <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a
   * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the multiset. If the
   * user attempts to add an element to the multiset that violates this constraint (for example, the
   * user attempts to add a string element to a set whose elements are integers), the {@code
   * add(Object)} call will throw a {@code ClassCastException}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.util.Comparator),93,99,"/**
 * Creates a new TreeMultiset.
 * @param comparator Comparator for ordering elements, or null for natural order.
 * @return A new TreeMultiset instance.
 */
","* Creates a new, empty multiset, sorted according to the specified comparator. All elements
   * inserted into the multiset must be <i>mutually comparable</i> by the specified comparator:
   * {@code comparator.compare(e1, e2)} must not throw a {@code ClassCastException} for any elements
   * {@code e1} and {@code e2} in the multiset. If the user attempts to add an element to the
   * multiset that violates this constraint, the {@code add(Object)} call will throw a {@code
   * ClassCastException}.
   *
   * @param comparator the comparator that will be used to sort this multiset. A null value
   *     indicates that the elements' <i>natural ordering</i> should be used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.AbstractBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the given map to this map.
* @param map the map whose entries are added
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,put,"com.google.common.collect.EnumBiMap:put(java.lang.Object,java.lang.Object)",124,128,"/**
 * Puts the specified value to the specified key in both maps.
 * @param key The key with which the value is to be associated.
 * @param value The value to be associated with the key.
 * @return The previous value associated with the key, or null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,forcePut,"com.google.common.collect.EnumBiMap:forcePut(java.lang.Object,java.lang.Object)",130,134,"/**
 * Puts the given value into both maps, forcing the put operation.
 * @param key The key to put.
 * @param value The value to put.
 * @return The previous value associated with the key, or null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,navigableKeySet,com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap:navigableKeySet(),1644,1647,"/**
* Returns a navigable set view of the map's keys.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractListMultimap.java,replaceValues,"com.google.common.collect.AbstractListMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",105,109,"/**
 * Replaces values associated with a key, delegating to superclass.
 * @param key The key for value replacement.
 * @param values Iterable of new values.
 * @return List of replaced values.
 */
","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",114,118,"/**
 * Replaces values for a key, delegating to the superclass.
 * @param key The key for which values are replaced.
 * @param values Iterable of new values for the key.
 * @return Set of replaced values.
 */
","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link Collection} specified in the {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,removeAll,com.google.common.collect.AbstractSortedSetMultimap:removeAll(java.lang.Object),102,106,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return SortedSet of removed values.
 */
","* Removes all values associated with a given key. The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractMapBasedMultimap.java,pollLast,com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet:pollLast(),1095,1098,"/**
 * Retrieves and removes the last element of the iterator.
 * @return The last element or null if the iterator is empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toString,com.google.common.collect.ImmutableRangeMap:toString(),418,421,"/**
 * Returns a string representation of the range collection.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(),575,578,"/**
 * Converts the collection to an array of Objects.
 * Uses the snapshot to create the array.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset$EntrySet:toArray(java.lang.Object[]),580,584,"/**
 * Converts the collection to an array of type T.
 * @param array Array to populate with collection elements.
 * @return Array populated with collection elements.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(int),50,52,"/**
 * Creates a new HashMultiset with the specified number of distinct elements.
 */
","* Creates a new, empty {@code HashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,"com.google.common.collect.ArrayListMultimap:<init>(int,int)",118,122,"/**
 * Constructs a new ArrayListMultimap with initial capacity.
 * @param expectedKeys initial capacity for keys
 * @param expectedValuesPerKey expected values per key
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,"com.google.common.collect.HashMultimap:<init>(int,int)",109,113,"/**
 * Constructs a HashMultimap with expected key/value counts.
 * @param expectedKeys expected number of keys
 * @param expectedValuesPerKey expected values per key
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(com.google.common.collect.Multimap),115,118,"/**
 * Constructs a HashMultimap from another Multimap.
 * @param multimap the Multimap to copy from
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,readObject,com.google.common.collect.HashMultimap:readObject(java.io.ObjectInputStream),143,152,"/**
 * Reconstitutes the multimap from a stream.
 * Reads data, initializes internal state, and populates the map.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(int),184,186,"/**
 * Constructs a LinkedListMultimap with an expected number of keys.
 * @param expectedKeys Initial capacity for keys.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,hasCycle,com.google.common.graph.Graphs:hasCycle(com.google.common.graph.Network),88,97,"/**
 * Checks if the network contains a cycle.
 * Returns true if cycle is found, false otherwise.
 */
","* Returns true if {@code network} has at least one cycle. A cycle is defined as a non-empty
   * subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)
   * starting and ending with the same node.
   *
   * <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(int),58,60,"/**
 * Creates a new LinkedHashMultiset allowing distinctElements.
 * @param distinctElements the maximum number of distinct elements
 * @return a new LinkedHashMultiset instance
 */
","* Creates a new, empty {@code LinkedHashMultiset} with the specified expected number of distinct
   * elements.
   *
   * @param distinctElements the expected number of distinct elements
   * @throws IllegalArgumentException if {@code distinctElements} is negative",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,<init>,"com.google.common.collect.LinkedHashMultimap:<init>(int,int)",264,271,"/**
 * Constructs a LinkedHashMultimap with specified capacities.
 * @param keyCapacity Initial capacity for keys.
 * @param valueSetCapacity Expected values per key.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,readObject,com.google.common.collect.LinkedHashMultimap:readObject(java.io.ObjectInputStream),633,660,"/**
 * Reconstitutes the multimap from a serialized ObjectInputStream.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,<init>,com.google.common.graph.StandardNetwork:<init>(com.google.common.graph.NetworkBuilder),65,71,"/**
 * Constructs a StandardNetwork using the provided builder.
 */",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,<init>,com.google.common.graph.StandardValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),56,62,"/**
 * Constructs a StandardValueGraph with default initial capacity.
 * @param builder Graph builder instance used for initialization.
 */
",Constructs a graph with the properties specified in {@code builder}.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,forceJdk,com.google.common.collect.ImmutableSet$Builder:forceJdk(),497,501,"/**
 * Replaces the current implementation with a JdkBackedSetBuilderImpl.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copy,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:copy(),964,967,"/**
 * Creates a copy of this SetBuilderImpl.
 * Returns a new SetBuilderImpl with the same initial state.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,createCollection,com.google.common.collect.HashMultimap:createCollection(),127,130,"/**
 * Creates a new HashSet with the expected size.
 * @return A new HashSet with initial capacity.
 */
","* {@inheritDoc}
   *
   * <p>Creates an empty {@code HashSet} for a collection of values for one key.
   *
   * @return a new {@code HashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$HashSetSupplier:get(),221,224,"/**
 * Creates a new HashSet with the expected size.
 * @return A new HashSet.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,createCollection,com.google.common.collect.LinkedHashMultimap:createCollection(),280,283,"/**
 * Creates a new LinkedHashSet with the specified expected size.
 */","* {@inheritDoc}
   *
   * <p>Creates an empty {@code LinkedHashSet} for a collection of values for one key.
   *
   * @return a new {@code LinkedHashSet} containing a collection of values for one key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MultimapBuilder.java,get,com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier:get(),235,238,"/**
 * Creates a new LinkedHashSet with the expected size.
 * @return A LinkedHashSet with the specified expected size.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollFirstEntry,com.google.common.collect.TreeMultiset:pollFirstEntry(),78,88,"/**
 * Retrieves and removes the first entry in the multiset.
 * Returns the entry or null if the multiset is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedMultiset.java,pollLastEntry,com.google.common.collect.TreeMultiset:pollLastEntry(),90,100,"/**
 * Retrieves and removes the last entry in the multiset.
 * Returns null if the multiset is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,firstEntry,com.google.common.collect.RegularImmutableSortedMultiset:firstEntry(),79,82,"/**
 * Returns the first entry in the map, or null if empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,lastEntry,com.google.common.collect.RegularImmutableSortedMultiset:lastEntry(),84,87,"/**
* Returns the last entry in the map, or null if empty.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(),168,171,"/**
 * Returns an array representation of the collection.
 * Uses the snapshot to create the array.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ConcurrentHashMultiset.java,toArray,com.google.common.collect.ConcurrentHashMultiset:toArray(java.lang.Object[]),173,177,"/**
 * Converts the collection to an array of type T.
 * @param array The array to copy into, may be reused.
 * @return An array containing the collection elements.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,createDescendingSet,com.google.common.collect.ContiguousSet:createDescendingSet(),243,247,"/**
 * Creates an immutable sorted set in descending order.
 * Returns a DescendingImmutableSortedSet view of this set.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,createDescendingSet,com.google.common.collect.ImmutableRangeSet$AsSet:createDescendingSet(),696,699,"/**
 * Creates an immutable sorted set in descending order.
 * Returns a new set with elements in reverse sorted order.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,comparator,com.google.common.collect.Maps$DescendingMap:comparator(),4285,4297,"/**
 * Returns a comparator for the map's keys.
 * Uses natural ordering if no comparator is defined.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,comparator,com.google.common.collect.Sets$DescendingSet:comparator(),2234,2243,"/**
 * Returns a comparator for the elements of this collection.
 * Returns reversed comparator if forward comparator is null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,"com.google.common.collect.ImmutableTable$Builder:put(java.lang.Object,java.lang.Object,java.lang.Object)",220,224,"/**
* Adds a cell to the table.
* @param rowKey Row key of the cell.
* @param columnKey Column key of the cell.
* @param value Value of the cell.
* @return This builder instance.
*/
","* Associates the ({@code rowKey}, {@code columnKey}) pair with {@code value} in the built
     * table. Duplicate key pairs are not allowed and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,size,com.google.common.collect.ImmutableMultiset$EntrySet:size(),383,386,"/**
 * Returns the number of elements in this set.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,"com.google.common.collect.ImmutableBiMap$Builder:put(java.lang.Object,java.lang.Object)",355,360,"/**
* Adds a key-value pair to the map and returns the builder.
*/
","* Associates {@code key} with {@code value} in the built bimap. Duplicate keys or values are
     * not allowed, and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,put,"com.google.common.collect.ImmutableClassToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",105,109,"/**
 * Adds a key-value pair to the map builder.
 * @param key The key (Class)
 * @param value The value (T)
 * @return This builder for chaining.
 */
","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,putAll,com.google.common.collect.ImmutableClassToInstanceMap$Builder:putAll(java.util.Map),118,126,"/**
 * Adds all entries from the map to the builder.
 * @param map Map of class to object to add.
 * @return This builder.
 */
","* Associates all of {@code map's} keys and values in the built map. Duplicate keys are not
     * allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null
     * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,put,com.google.common.collect.ImmutableMap$Builder:put(java.util.Map$Entry),467,470,"/**
 * Adds a key-value pair to the builder, using the provided entry.
 */","* Adds the given {@code entry} to the map, making it immutable if necessary. If the same key is
     * put more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will
     * keep the last value put for that key.
     *
     * @since 11.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,"com.google.common.collect.ImmutableSortedMap$Builder:put(java.lang.Object,java.lang.Object)",628,633,"/**
* Puts the specified key-value pair into the map and returns 'this'.
*/","* Associates {@code key} with {@code value} in the built map. Duplicate keys, according to the
     * comparator (which might be the keys' natural order), are not allowed, and will cause {@link
     * #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(java.lang.Class,java.lang.Object)",70,74,"/**
 * Associates a key-value pair to the map builder.
 * @param key The key (Class type).
 * @param value The value of type T extending B.
 * @return This builder instance for chaining.
 */
","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,put,"com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:put(com.google.common.reflect.TypeToken,java.lang.Object)",80,84,"/**
* Associates a key with a value in the map builder.
* @param key The key to associate with the value.
* @param value The value to associate with the key.
*/
","* Associates {@code key} with {@code value} in the built map. Duplicate keys are not allowed,
     * and will cause {@link #build} to fail.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(java.lang.Iterable),277,282,"/**
* Adds all entries from the given iterable to the map.
* @param entries iterable containing key-value entries
* @return this builder object
*/
","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(java.lang.Iterable),326,331,"/**
* Adds all entries from the given iterable to the map.
* @param entries Iterable of entries to add.
* @return This builder for chaining.
*/
","* {@inheritDoc}
     *
     * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.NavigableSet,com.google.common.base.Predicate)",1266,1278,"/**
 * Filters a NavigableSet based on the provided predicate.
 * @param unfiltered The set to filter.
 * @param predicate The filter condition.
 * @return A new filtered NavigableSet.
 */
","* Returns the elements of a {@code NavigableSet}, {@code unfiltered}, that satisfy a predicate.
   * The returned set is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting set's iterator does not support {@code remove()}, but all other set methods
   * are supported. When given an element that doesn't satisfy the predicate, the set's {@code
   * add()} and {@code addAll()} methods throw an {@link IllegalArgumentException}. When methods
   * such as {@code removeAll()} and {@code clear()} are called on the filtered set, only elements
   * that satisfy the filter will be removed from the underlying set.
   *
   * <p>The returned set isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered set's methods, such as {@code size()}, iterate across every element in
   * the underlying set and determine which elements satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy {@code Iterables.filter(unfiltered, predicate)} and
   * use the copy.
   *
   * <p><b>Warning:</b> {@code predicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals. (See {@link
   * Iterables#filter(Iterable, Class)} for related functionality.)
   *
   * @since 14.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,filter,"com.google.common.collect.Sets:filter(java.util.Set,com.google.common.base.Predicate)",1189,1203,"/**
 * Filters a set based on the provided predicate.
 * @param unfiltered The set to filter.
 * @param predicate The predicate to apply.
 * @return A new filtered set.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$KeySetView:forEach(java.util.function.Consumer),754,765,"/**
 * Performs the specified action on each key in the map.
 * @param action The action to perform on each key.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap$ValuesView:forEach(java.util.function.Consumer),1000,1011,"/**
 * Performs the given action on each value in the map.
 * @param action The consumer to apply to each value.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashMap:convertToHashFloodingResistantImplementation(),296,308,"/**
 * Converts the map to a hash flooding resistant implementation.
 * Copies all entries to a new map and updates internal data.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,forEach,com.google.common.collect.CompactHashMap:forEach(java.util.function.BiConsumer),782,793,"/**
 * Applies the given action to each key-value pair in the map.
 * @param action BiConsumer to apply to each entry.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactHashSet:convertToHashFloodingResistantImplementation(),260,271,"/**
 * Converts the set to a hash-flooding resistant implementation.
 * Returns the new implementation.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,forEach,com.google.common.collect.CompactHashSet:forEach(java.util.function.Consumer),602,613,"/**
 * Performs the given action on each element in this set.
 * @param action The action to perform.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,insertEntry,"com.google.common.collect.CompactLinkedHashMap:insertEntry(int,java.lang.Object,java.lang.Object,int,int)",181,187,"/**
 * Inserts an entry into the map and updates succeeder pointers.
 * @param entryIndex Index of the entry to insert.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,accessEntry,com.google.common.collect.CompactLinkedHashMap:accessEntry(int),189,199,"/**
 * Moves an entry to the end of the list, maintaining order.
 * @param index The index of the entry to move.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,moveLastEntry,"com.google.common.collect.CompactLinkedHashMap:moveLastEntry(int,int)",201,212,"/**
 * Moves the last entry to a new index, updating links and succeeds.
 * @param dstIndex Destination index for the last entry.
 * @param mask Mask value for the move operation.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,<init>,"com.google.common.collect.ImmutableSetMultimap:<init>(com.google.common.collect.ImmutableMap,int,java.util.Comparator)",513,519,"/**
 * Constructs a new ImmutableSetMultimap.
 * @param map initial map of keys to sets of values
 * @param size initial size
 * @param valueComparator comparator for values in sets
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,buildOrThrow,com.google.common.collect.ImmutableSortedMap$Builder:buildOrThrow(),727,739,"/**
 * Builds an ImmutableSortedMap based on the current size.
 * Returns an empty map if size is 0, or constructs map.
 */","* Returns a newly-created immutable sorted map, or throws an exception if any two keys are
     * equal.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)
     * @since 31.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,emptyMultiset,com.google.common.collect.ImmutableSortedMultiset:emptyMultiset(java.util.Comparator),317,324,"/**
 * Returns an empty ImmutableSortedMultiset with the given comparator.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap:get(java.lang.Comparable),120,124,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value associated with the key, or null if absent.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,put,"com.google.common.collect.ImmutableRangeMap$Builder:put(com.google.common.collect.Range,java.lang.Object)",123,130,"/**
 * Adds a range-value pair to the builder.
 * @param range The range to associate with the value.
 * @param value The value to associate with the range.
 */
","* Associates the specified range with the specified value.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,add,com.google.common.collect.ImmutableRangeSet$Builder:add(com.google.common.collect.Range),772,777,"/**
 * Adds a range to the list.
 * @param range The range to add. Returns this builder.
 */
","* Add the specified range to this builder. Adjacent ranges are permitted and will be merged,
     * but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if {@code range} is empty",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,entryIterator,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:entryIterator(),768,793,"/**
 * Returns an iterator over the map entries within the subrange.
 * Returns an empty iterator if the subrange is empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,entryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:entryIterator(),773,813,"/**
 * Returns an iterator over the entries of ranges within the restriction.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,descendingEntryIterator,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:descendingEntryIterator(),815,849,"/**
 * Returns a descending iterator of entries (Cut, Range) within restriction.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,replaceRangeWithSameLowerBound,com.google.common.collect.TreeRangeSet:replaceRangeWithSameLowerBound(com.google.common.collect.Range),267,273,"/**
 * Updates the ranges map with the given range. Removes if empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,complement,com.google.common.collect.ImmutableRangeSet:complement(),384,398,"/**
 * Returns the complement of this range set.
 * C must implement Comparable.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,readResolve,com.google.common.collect.Range:readResolve(),704,710,"/**
 * Resolves object during deserialization. Returns singleton if ALL, else self.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$AsMapOfRanges:get(java.lang.Object),361,371,"/**
 * Retrieves a value associated with a Range key.
 * @param key the key, expected to be a Range object.
 * @return the value or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap:subRangeMap(com.google.common.collect.Range),384,391,"/**
 * Returns a range map representing the portion within the subRange.
 * @param subRange The range to create a sub-range map for.
 * @return A new RangeMap representing the specified range.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$RangesByUpperBound:size(),433,439,"/**
 * Returns the number of entries in the windowed range.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,isEmpty,com.google.common.collect.TreeRangeSet$RangesByUpperBound:isEmpty(),441,446,"/**
 * Checks if the data structure is empty.
 * Returns true if empty, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet:subRangeSet(com.google.common.collect.Range),857,860,"/**
 * Returns a view of this RangeSet over the specified range.
 * Returns this RangeSet if view is the entire range.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$RangesByUpperBound:containsKey(java.lang.Object),337,340,"/**
* Checks if the map contains a key.
* @param key The key to check.
* @return True if the key exists in the map, false otherwise.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,span,com.google.common.collect.ImmutableRangeMap:span(),215,223,"/**
 * Returns the span of ranges, from the first to the last.
 * Throws NoSuchElementException if ranges is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,get,com.google.common.collect.ImmutableRangeSet$ComplementRanges:get(int),349,368,"/**
* Retrieves the Range at the given index.
* @param index the index of the Range to retrieve
* @return the Range object at the specified index
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,span,com.google.common.collect.ImmutableRangeSet:span(),212,218,"/**
 * Returns the span of the ranges, or throws NoSuchElementException.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,intersection,com.google.common.collect.Range:intersection(com.google.common.collect.Range),536,557,"/**
 * Returns the intersection of this range with another range.
 * @param connectedRange the range to intersect with
 * @return the intersection range, or the other range if fully contained
 */
","* Returns the maximal range {@linkplain #encloses enclosed} by both this range and {@code
   * connectedRange}, if such a range exists.
   *
   * <p>For example, the intersection of {@code [1..5]} and {@code (3..7)} is {@code (3..5]}. The
   * resulting range may be empty; for example, {@code [1..5)} intersected with {@code [5..7)}
   * yields the empty range {@code [5..5)}.
   *
   * <p>The intersection exists if and only if the two ranges are {@linkplain #isConnected
   * connected}.
   *
   * <p>The intersection operation is commutative, associative and idempotent, and its identity
   * element is {@link Range#all}).
   *
   * @throws IllegalArgumentException if {@code isConnected(connectedRange)} is {@code false}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,gap,com.google.common.collect.Range:gap(com.google.common.collect.Range),576,597,"/**
 * Calculates the gap between two ranges.
 * Throws exception if ranges overlap.
 * @param otherRange the other range to compare with
 * @return a new Range representing the gap
 */
","* Returns the maximal range lying between this range and {@code otherRange}, if such a range
   * exists. The resulting range may be empty if the two ranges are adjacent but non-overlapping.
   *
   * <p>For example, the gap of {@code [1..5]} and {@code (7..10)} is {@code (5..7]}. The resulting
   * range may be empty; for example, the gap between {@code [1..5)} {@code [5..7)} yields the empty
   * range {@code [5..5)}.
   *
   * <p>The gap exists if and only if the two ranges are either disconnected or immediately adjacent
   * (any intersection must be an empty range).
   *
   * <p>The gap operation is commutative.
   *
   * @throws IllegalArgumentException if this range and {@code otherRange} have a nonempty
   *     intersection
   * @since 27.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,span,com.google.common.collect.Range:span(com.google.common.collect.Range),610,622,"/**
 * Returns the overlapping range with another range.
 * @param other The other range to intersect with.
 * @return The intersection range, or the other range if fully contained.
 */","* Returns the minimal range that {@linkplain #encloses encloses} both this range and {@code
   * other}. For example, the span of {@code [1..3]} and {@code (5..7)} is {@code [1..7)}.
   *
   * <p><i>If</i> the input ranges are {@linkplain #isConnected connected}, the returned range can
   * also be called their <i>union</i>. If they are not, note that the span might contain values
   * that are not contained in either input range.
   *
   * <p>Like {@link #intersection(Range) intersection}, this operation is commutative, associative
   * and idempotent. Unlike it, it is always well-defined for any two input ranges.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Range.java,canonical,com.google.common.collect.Range:canonical(com.google.common.collect.DiscreteDomain),648,653,"/**
 * Creates a canonical Range based on the given domain.
 * @param domain DiscreteDomain to use for canonicalization
 * @return Canonical Range object.
 */
","* Returns the canonical form of this range in the given domain. The canonical form has the
   * following properties:
   *
   * <ul>
   *   <li>equivalence: {@code a.canonical().contains(v) == a.contains(v)} for all {@code v} (in
   *       other words, {@code ContiguousSet.create(a.canonical(domain), domain).equals(
   *       ContiguousSet.create(a, domain))}
   *   <li>uniqueness: unless {@code a.isEmpty()}, {@code ContiguousSet.create(a,
   *       domain).equals(ContiguousSet.create(b, domain))} implies {@code
   *       a.canonical(domain).equals(b.canonical(domain))}
   *   <li>idempotence: {@code a.canonical(domain).canonical(domain).equals(a.canonical(domain))}
   * </ul>
   *
   * <p>Furthermore, this method guarantees that the range returned will be one of the following
   * canonical forms:
   *
   * <ul>
   *   <li>[start..end)
   *   <li>[start..+∞)
   *   <li>(-∞..end) (only if type {@code C} is unbounded below)
   *   <li>(-∞..+∞) (only if type {@code C} is unbounded below)
   * </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,"com.google.common.collect.RegularContiguousSet:range(com.google.common.collect.BoundType,com.google.common.collect.BoundType)",216,221,"/**
 * Creates a range with specified lower and upper bound types.
 * @param lowerBoundType Lower bound type
 * @param upperBoundType Upper bound type
 * @return A Range object with the given bound types.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,<init>,"com.google.common.collect.TreeRangeMap$RangeMapEntry:<init>(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",99,101,"/**
 * Constructs a RangeMapEntry with given lower/upper bounds and value.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap$SubRangeMap:span(),500,526,"/**
 * Returns the span of keys covered by this range map.
 * Returns Range<K> representing the covered span.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,span,com.google.common.collect.TreeRangeMap:span(),195,205,"/**
 * Returns the span of keys covered by this range map.
 * @return Range representing the span of keys.
 * @throws NoSuchElementException if the range map is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,span,com.google.common.collect.TreeRangeSet:span(),163,175,"/**
 * Returns the span (lowerBound, upperBound) of all ranges.
 * Throws NoSuchElementException if ranges are empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,getCount,com.google.common.collect.TreeMultiset$1:getCount(),1037,1039,"/**
 * Returns the number of elements.
 * @return The element count.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,forEachEntry,com.google.common.collect.TreeMultiset:forEachEntry(java.util.function.ObjIntConsumer),532,540,"/**
 * Applies the consumer to each entry in the range.
 * @param action The consumer to apply to each entry.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(),66,68,"/**
 * Creates a new HashBiMap with the default initial capacity.
 * @return A new HashBiMap instance.
 */
","Returns a new, empty {@code HashBiMap} with the default initial capacity (16).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,create,com.google.common.collect.HashBiMap:create(java.util.Map),85,90,"/**
 * Creates a HashBiMap from the given map.
 * @param map source map to populate the bi-map
 * @return A new HashBiMap containing the map's entries
 */
","* Constructs a new bimap containing initial values from {@code map}. The bimap is created with an
   * initial capacity sufficient to hold the mappings in the specified map.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,of,com.google.common.graph.DirectedNetworkConnections:of(),41,44,"/**
 * Creates a new, empty DirectedNetworkConnections instance.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,of,com.google.common.graph.UndirectedNetworkConnections:of(),41,43,"/**
 * Creates an empty UndirectedNetworkConnections instance.
 * Uses a HashBiMap for efficient connections.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap:remove(java.lang.Object),522,532,"/**
 * Removes the mapping for a key.
 * @param key the key whose mapping to be removed
 * @return the previous value or null if key not found
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashBiMap.java,replaceAll,com.google.common.collect.HashBiMap:replaceAll(java.util.function.BiFunction),580,588,"/**
 * Replaces all values using the provided function.
 * @param function Function to apply to each key-value pair.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,builder,com.google.common.collect.ImmutableClassToInstanceMap:builder(),74,76,"/**
 * Creates and returns a new Builder instance.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,of,"com.google.common.collect.ImmutableClassToInstanceMap:of(java.lang.Class,java.lang.Object)",65,68,"/**
 * Creates an ImmutableClassToInstanceMap from a class and instance.
 * @param <B> Base type
 * @param <T> Subtype of B
 * @param type Class of the instance
 * @param value Instance of the class
 * @return ImmutableClassToInstanceMap containing the class-instance mapping
 */
","* Returns an {@code ImmutableClassToInstanceMap} containing a single entry.
   *
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumMap.java,asImmutable,com.google.common.collect.ImmutableEnumMap:asImmutable(java.util.EnumMap),42,52,"/**
 * Converts an EnumMap to an ImmutableMap. Handles size 0, 1, and >1 cases.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,column,com.google.common.collect.SingletonImmutableTable:column(java.lang.Object),47,53,"/**
 * Returns a map containing the value for the given column.
 * @param columnKey The column key.
 * @return Map with column key and its value, or empty map.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,columnMap,com.google.common.collect.SingletonImmutableTable:columnMap(),55,58,"/**
 * Returns a map containing the single column with its single row/value.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,rowMap,com.google.common.collect.SingletonImmutableTable:rowMap(),60,63,"/**
 * Returns a row map with the single row and column value.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,values,com.google.common.collect.ImmutableBiMap:values(),589,592,"/**
 * Returns the values of this map as an immutable set.
 */
","* Returns an immutable set of the values in this map, in the same order they appear in {@link
   * #entrySet}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,readResolve,com.google.common.collect.RegularImmutableBiMap$InverseSerializedForm:readResolve(),335,337,"/**
 * Restores the object from a serialized form using the forward object.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,getEntry,com.google.common.collect.DescendingImmutableSortedMultiset:getEntry(int),60,63,"/**
* Retrieves an entry from the forward map at the given index.
* @param index index of the entry to retrieve
* @return Entry object at the specified index
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap:asDescendingMapOfRanges(),317,325,"/**
 * Returns a descending map of ranges to values.
 * Uses reversed ranges and values for descending order.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asDescendingSetOfRanges,com.google.common.collect.ImmutableRangeSet:asDescendingSetOfRanges(),311,317,"/**
 * Returns a descending set of ranges. Returns empty set if ranges is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,descendingMap,com.google.common.collect.ImmutableSortedMap:descendingMap(),1109,1126,"/**
 * Returns a reverse-ordered view of the map.
 * Returns cached map if available, otherwise creates a new one.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,reverse,com.google.common.collect.Lists:reverse(java.util.List),847,861,"/**
 * Reverses the given list. Handles ImmutableList, ReverseList, and RandomAccess.
 */","* Returns a reversed view of the specified list. For example, {@code
   * Lists.reverse(Arrays.asList(1, 2, 3))} returns a list containing {@code 3, 2, 1}. The returned
   * list is backed by this list, so changes in the returned list are reflected in this list, and
   * vice-versa. The returned list supports all of the optional list operations supported by this
   * list.
   *
   * <p>The returned list is random-access if the specified list is random access.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,descendingIterator,com.google.common.collect.RegularImmutableSortedSet:descendingIterator(),74,78,"/**
 * Returns a descending iterator over the elements in the set.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,createDescendingSet,com.google.common.collect.RegularImmutableSortedSet:createDescendingSet(),319,325,"/**
 * Creates an immutable sorted set with elements in descending order.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$StringAsImmutableList:subList(int,int)",785,789,"/**
 * Returns a sublist of characters from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Object[]),291,300,"/**
 * Creates an immutable list from an array.
 * @param elements array to copy from
 * @return ImmutableList containing array elements
 */
","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,"com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[],int)",368,390,"/**
 * Converts an array to an ImmutableList. Handles empty, single, and multiple elements.
 */","* Views the array as an immutable list. Copies if the specified range does not cover the complete
   * array. Does not check for nulls.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList:subList(int,int)",453,466,"/**
 * Returns a sublist of this list, from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
","* Returns an immutable list of the elements between the specified {@code fromIndex}, inclusive,
   * and {@code toIndex}, exclusive. (If {@code fromIndex} and {@code toIndex} are equal, the empty
   * immutable list is returned.)
   *
   * <p><b>Note:</b> in almost all circumstances, the returned {@link ImmutableList} retains a
   * strong reference to {@code this}, which may prevent the original list from being garbage
   * collected. If you want the original list to be eligible for garbage collection, you should
   * create and use a copy of the sub list (e.g., {@code
   * ImmutableList.copyOf(originalList.subList(...))}).",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,of,"com.google.common.collect.ImmutableRangeMap:of(com.google.common.collect.Range,java.lang.Object)",80,82,"/**
 * Creates an immutable RangeMap from a range and a value.
 * @param range The range for the entry.
 * @param value The value associated with the range.
 */
",Returns an immutable range map mapping a single range to a single value.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$SerializedForm:readResolve(),855,863,"/**
 * Reconstitutes this range set from a serialized form.
 * Returns a RangeSet based on the serialized ranges.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,of,com.google.common.collect.ImmutableRangeSet:of(com.google.common.collect.Range),92,101,"/**
 * Creates an ImmutableRangeSet from a Range.
 * @param range The range to create the set from.
 * @return An ImmutableRangeSet containing the range.
 */
","* Returns an immutable range set containing the specified single range. If {@link Range#isEmpty()
   * range.isEmpty()}, this is equivalent to {@link ImmutableRangeSet#of()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,of,"com.google.common.collect.ImmutableSortedMap:of(java.util.Comparator,java.lang.Object,java.lang.Object)",146,150,"/**
 * Creates an immutable sorted map with one entry.
 * @param comparator Comparator for keys.
 * @param k1 Key.
 * @param v1 Value.
 */
",Returns an immutable map containing a single entry.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableSet.java,asList,com.google.common.collect.SingletonImmutableSet:asList(),60,63,"/**
 * Returns a new immutable list containing the single element.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/TempFileCreator.java,userPermissions,com.google.common.io.TempFileCreator$JavaNioCreator:userPermissions(),166,199,"/**
 * Returns a PermissionSupplier to set user ACLs. Returns IOException on failure.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector:collectTypes(java.lang.Object),1376,1378,"/**
* Collects types into an ImmutableList.
* @param type The type to collect.
* @return An ImmutableList containing the type.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableEnumSet.java,asImmutable,com.google.common.collect.ImmutableEnumSet:asImmutable(java.util.EnumSet),42,51,"/**
 * Converts an EnumSet to an ImmutableSet for efficiency.
 * @param set The EnumSet to convert.
 * @return An ImmutableSet containing the set's elements.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,get,com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets:get(java.lang.Object),1146,1150,"/**
 * Returns the set containing the value for the given key, or null.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:build(),801,825,"/**
 * Builds an ImmutableSet based on the 'distinct' count.
 * Returns an ImmutableSet containing the distinct elements.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Object[]),253,255,"/**
 * Creates an immutable set from the given array elements.
 * @param elements array of elements to create the set from
 * @return ImmutableSet containing the array elements
 */
","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source array.
   *
   * @throws NullPointerException if any of {@code elements} is null
   * @since 3.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createEntrySet,com.google.common.collect.SingletonImmutableBiMap:createEntrySet(),87,90,"/**
 * Creates an immutable set containing a single entry.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableBiMap.java,createKeySet,com.google.common.collect.SingletonImmutableBiMap:createKeySet(),92,95,"/**
 * Creates an immutable set containing the single key.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createCellSet,com.google.common.collect.SingletonImmutableTable:createCellSet(),70,73,"/**
 * Creates an immutable set containing a single cell.
 * @return ImmutableSet containing the cell.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SingletonImmutableTable.java,createValues,com.google.common.collect.SingletonImmutableTable:createValues(),75,78,"/**
 * Creates an immutable set containing the single value.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,adjacentEdges,com.google.common.graph.AbstractNetwork:adjacentEdges(java.lang.Object),163,170,"/**
 * Returns edges incident to the endpoints of the given edge.
 * @param edge the edge to find adjacent edges for
 * @return Set of adjacent edges
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,iterator,com.google.common.collect.ImmutableSet$CachingAsList:iterator(),338,341,"/**
 * Returns an unmodifiable iterator over the elements in this collection.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,containsAll,com.google.common.collect.RegularImmutableSortedSet:containsAll(java.util.Collection),104,154,"/**
 * Checks if this multiset contains all elements of the target collection.
 * Optimizes for sorted collections with the same comparator.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,isAnnotationPresent,com.google.common.reflect.Parameter:isAnnotationPresent(java.lang.Class),72,75,"/**
 * Checks if a specific annotation is present.
 * @param annotationType The annotation class to check for.
 * @return True if annotation is present, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,builder,com.google.common.collect.ImmutableSet:builder(),433,435,"/**
 * Creates a new Builder instance.
 * Returns a Builder object for constructing the object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valuesBuilder,com.google.common.collect.ImmutableSetMultimap:valuesBuilder(java.util.Comparator),654,659,"/**
 * Creates an ImmutableSet.Builder, sorted if comparator is provided.
 * @param valueComparator Comparator for sorted set, null for unordered.
 * @return ImmutableSet.Builder instance.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyIfNecessary,com.google.common.collect.ImmutableSet$Builder:copyIfNecessary(),503,508,"/**
* Copies the data if forceCopy is true, then resets forceCopy.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,putAll,com.google.common.collect.ImmutableListMultimap$Builder:putAll(com.google.common.collect.Multimap),298,303,"/**
 * Adds all entries from the multimap to this multimap.
 * @param multimap multimap whose entries are added
 * @return this builder
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,combine,com.google.common.collect.ImmutableListMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),305,310,"/**
 * Combines with another multimap builder, then returns this builder.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,combine,com.google.common.collect.ImmutableSetMultimap$Builder:combine(com.google.common.collect.ImmutableMultimap$Builder),356,361,"/**
 * Combines with another multimap builder, then returns this builder.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,putAll,com.google.common.collect.ImmutableSetMultimap$Builder:putAll(com.google.common.collect.Multimap),346,354,"/**
 * Adds all entries from the multimap to this builder.
 * @param multimap Multimap whose entries are added.
 * @return This builder.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator)",502,507,"/**
 * Concatenates two iterators into a single iterator.
 * @param a First iterator.
 * @param b Second iterator.
 * @return Concatenated iterator.
 */
","* Combines two iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}. The source iterators are not
   * polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator)",517,523,"/**
 * Concatenates three iterators into a single iterator.
 * @param a, b, c Iterators to concatenate.
 * @return A new iterator containing elements from all iterators.
 */
","* Combines three iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}. The source iterators are not polled until necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,concat,"com.google.common.collect.Iterators:concat(java.util.Iterator,java.util.Iterator,java.util.Iterator,java.util.Iterator)",534,544,"/**
 * Concatenates four iterators into a single iterator.
 * @param a, b, c, d Iterators to concatenate.
 * @return A new iterator containing elements from all iterators.
 */
","* Combines four iterators into a single iterator. The returned iterator iterates across the
   * elements in {@code a}, followed by the elements in {@code b}, followed by the elements in
   * {@code c}, followed by the elements in {@code d}. The source iterators are not polled until
   * necessary.
   *
   * <p>The returned iterator supports {@code remove()} when the corresponding input iterator
   * supports it.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getSubscribers,com.google.common.eventbus.SubscriberRegistry:getSubscribers(java.lang.Object),125,140,"/**
 * Gets an iterator over subscribers for the given event type.
 * @param event The event to find subscribers for.
 * @return An iterator of subscribers.
 */
","* Gets an iterator representing an immutable snapshot of all subscribers to the given event at
   * the time this method is called.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,contains,com.google.common.collect.ImmutableList$ReverseImmutableList:contains(java.lang.Object),657,660,"/**
 * Checks if the list contains the given object.
 * @param object the object to search for
 * @return true if the list contains the object, false otherwise
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,getDone,com.google.common.util.concurrent.ClosingFuture$Peeker:getDone(com.google.common.util.concurrent.ClosingFuture),1151,1157,"/**
 * Retrieves the done value from a ClosingFuture.
 * @param closingFuture Future to get the done value from.
 * @return Done value of the future, or null if it's null.
 */
","* Returns the value of {@code closingFuture}.
     *
     * @throws ExecutionException if {@code closingFuture} is a failed step
     * @throws CancellationException if the {@code closingFuture}'s future was cancelled
     * @throws IllegalArgumentException if {@code closingFuture} is not one of the futures passed to
     *     {@link #whenAllComplete(Iterable)} or {@link #whenAllComplete(Iterable)}
     * @throws IllegalStateException if called outside of a call to {@link
     *     CombiningCallable#call(DeferredCloser, Peeker)} or {@link
     *     AsyncCombiningCallable#call(DeferredCloser, Peeker)}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,put,"com.google.common.collect.MapMakerInternalMap:put(java.lang.Object,java.lang.Object)",2423,2430,"/**
 * Associates the specified value with the given key in the segment.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return The previous value associated with the key, or null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putIfAbsent,"com.google.common.collect.MapMakerInternalMap:putIfAbsent(java.lang.Object,java.lang.Object)",2432,2439,"/**
 * Atomically puts the value if the key is not already associated.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return Previous value or null if key was not present
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object,java.lang.Object)",2468,2478,"/**
 * Replaces the value associated with the given key.
 * @param key The key whose value is to be replaced.
 * @param oldValue The old value to be replaced.
 * @param newValue The new value to be associated.
 * @return True if the replacement was successful.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,replace,"com.google.common.collect.MapMakerInternalMap:replace(java.lang.Object,java.lang.Object)",2480,2487,"/**
 * Replaces the value associated with the given key.
 * @param key The key whose value is to be replaced.
 * @param value The new value to associate with the key.
 * @return The previous value associated with the key.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object),2448,2456,"/**
 * Removes the value associated with the given key.
 * @param key The key to remove; null is allowed.
 * @return The removed value, or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,"com.google.common.collect.MapMakerInternalMap:remove(java.lang.Object,java.lang.Object)",2458,2466,"/**
 * Removes a key-value pair. Returns true if found and removed.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,"com.google.common.collect.MapMakerInternalMap$Segment:get(java.lang.Object,int)",1439,1454,"/**
 * Retrieves value associated with the given key.
 * @param key The key to retrieve.
 * @param hash The hash code of the key.
 * @return The value or null if not found.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,"com.google.common.collect.MapMakerInternalMap$Segment:containsKey(java.lang.Object,int)",1456,1467,"/**
 * Checks if the map contains a value for the given key.
 * @param key The key to check.
 * @param hash The hash code of the key.
 * @return True if the key exists, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsValue,com.google.common.collect.MapMakerInternalMap$Segment:containsValue(java.lang.Object),1473,1496,"/**
 * Checks if the map contains the specified value.
 * @param value value to search for
 * @return true if value is present, false otherwise
 */
","* This method is a convenience for testing. Code should call {@link
     * MapMakerInternalMap#containsValue} directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,copy,"com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper:copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)",940,956,"/**
 * Copies a WeakKeyWeakValueEntry.
 * @param segment Segment containing the entry.
 * @param entry Entry to copy.
 * @param newNext Next entry in the chain.
 * @return A copy of the entry, or null if key is collected.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,put,"com.google.common.collect.MutableClassToInstanceMap:put(java.lang.Class,java.lang.Object)",153,158,"/**
 * Puts a key-value pair into the map.
 * @param key The key.
 * @param value The value.
 * @return The previous value or null if absent.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putAll,com.google.common.collect.MutableClassToInstanceMap:putAll(java.util.Map),160,167,"/**
 * Adds all entries from a map to this map, casting keys.
 * @param map Map to add entries from.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardRemove,com.google.common.collect.ForwardingMap:standardRemove(java.lang.Object),160,171,"/**
 * Removes the entry for the given key.
 * @param key The key of the entry to remove.
 * @return The value of the removed entry, or null.
 */
","* A sensible, albeit inefficient, definition of {@link #remove} in terms of the {@code iterator}
   * method of {@link #entrySet}. If you override {@link #entrySet}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * <p>Alternately, you may wish to override {@link #remove} with {@code keySet().remove}, assuming
   * that approach would not lead to an infinite loop.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardClear,com.google.common.collect.ForwardingMap:standardClear(),180,182,"/**
 * Clears the map entries by iterating and removing them.
 */
","* A sensible definition of {@link #clear} in terms of the {@code iterator} method of {@link
   * #entrySet}. In many cases, you may wish to override {@link #clear} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardIsEmpty,com.google.common.collect.ForwardingMap:standardIsEmpty(),264,266,"/**
 * Checks if the standard entry set is empty.
 * Returns true if empty, false otherwise.
 */
","* A sensible definition of {@link #isEmpty} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #isEmpty} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingMap.java,standardHashCode,com.google.common.collect.ForwardingMap:standardHashCode(),286,288,"/**
 * Calculates a standard hash code based on the entry set.
 */","* A sensible definition of {@link #hashCode} in terms of the {@code iterator} method of {@link
   * #entrySet}. If you override {@link #entrySet}, you may wish to override {@link #hashCode} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/MutableTypeToInstanceMap.java,entrySet,com.google.common.reflect.MutableTypeToInstanceMap:entrySet(),96,99,"/**
 * Returns a set of entries, wrapping the parent's entry set.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,difference,"com.google.common.collect.Maps:difference(java.util.Map,java.util.Map)",502,511,"/**
 * Calculates the difference between two maps.
 * @param left  The left map.
 * @param right The right map.
 * @return A MapDifference object representing the difference.
 */
","* Computes the difference between two maps. This difference is an immutable snapshot of the state
   * of the maps at the time this method is called. It will never change, even if the maps change at
   * a later time.
   *
   * <p>Since this method uses {@code HashMap} instances internally, the keys of the supplied maps
   * must be well-behaved with respect to {@link Object#equals} and {@link Object#hashCode}.
   *
   * <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call {@code
   * left.equals(right)} instead of this method.
   *
   * @param left the map to treat as the ""left"" map for purposes of comparison
   * @param right the map to treat as the ""right"" map for purposes of comparison
   * @return the difference between the two maps",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,<init>,com.google.common.eventbus.EventBus:<init>(),165,167,"/**
 * Constructs an EventBus with the default name ""default"".
 */
","Creates a new EventBus named ""default"".",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,crossOver,"com.google.common.collect.MinMaxPriorityQueue$Heap:crossOver(int,java.lang.Object)",702,712,"/**
 * Performs crossover operation. Swaps elements if minChild exists and ordering is correct.
 * @param index Current index. @param x Element to crossover.
 * @return Index of the swapped element.
 */
","* Crosses an element over to the opposite heap by moving it one level down (or up if there are
     * no elements below it).
     *
     * <p>Returns the new position of the element.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHoleAt,com.google.common.collect.MinMaxPriorityQueue$Heap:fillHoleAt(int),721,728,"/**
 * Fills a hole in the queue by traversing to its min grandchild.
 * @param index index of the hole to fill
 * @return index of the last visited node
 */
","* Fills the hole at {@code index} by moving in the least of its grandchildren to this position,
     * then recursively filling the new hole created.
     *
     * @return the position of the new hole (where the lowest grandchild moved from, that had no
     *     grandchild to replace it)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,writeReplace,com.google.common.collect.ImmutableCollection:writeReplace(),392,397,"/**
 * Serializes the collection as an ImmutableList.SerializedForm.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,headSet,com.google.common.collect.Maps$5:headSet(java.lang.Object),81,84,"/**
* Returns elements lexicographically less than toElement.
* @param toElement element to return elements before (exclusive)
* @return SortedSet of elements less than toElement.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,subSet,"com.google.common.collect.Maps$5:subSet(java.lang.Object,java.lang.Object)",92,95,"/**
 * Returns a sorted set containing elements from fromElement to toElement.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardContains,com.google.common.collect.ForwardingSortedSet:standardContains(java.lang.Object),109,120,"/**
 * Checks if the set contains the object using standard comparison.
 * @param object The object to check for containment.
 * @return True if the object is contained, false otherwise.
 */
","* A sensible definition of {@link #contains} in terms of the {@code first()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #contains} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardRemove,com.google.common.collect.ForwardingSortedSet:standardRemove(java.lang.Object),129,147,"/**
* Removes the specified object from the sorted set, if present.
* Returns true if an element was removed, false otherwise.
*/
","* A sensible definition of {@link #remove} in terms of the {@code iterator()} method of {@link
   * #tailSet}. If you override {@link #tailSet}, you may wish to override {@link #remove} to
   * forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,standardSubSet,"com.google.common.collect.ForwardingSortedSet:standardSubSet(java.lang.Object,java.lang.Object)",156,159,"/**
 * Returns a sorted set containing elements between fromElement and toElement.
 */","* A sensible default implementation of {@link #subSet(Object, Object)} in terms of {@link
   * #headSet(Object)} and {@link #tailSet(Object)}. In some situations, you may wish to override
   * {@link #subSet(Object, Object)} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSet.java,tailSet,com.google.common.collect.Maps$5:tailSet(java.lang.Object),97,100,"/**
 * Returns a sorted set containing elements from fromElement to the end.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardRowSortedTable.java,rowKeySet,com.google.common.collect.TreeBasedTable:rowKeySet(),74,77,"/**
* Returns a sorted set of row keys.
* Casts the keyset of the rowMap to SortedSet<R>.
*/
","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedSet}, instead of the {@code Set} specified in the {@link
   * Table} interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableSet,com.google.common.collect.Synchronized:navigableSet(java.util.NavigableSet),1582,1585,"/**
 * Returns a navigable set.
 * @param navigableSet The navigable set to return.
 * @return The navigable set.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addFirst,com.google.common.collect.Synchronized$SynchronizedDeque:addFirst(java.lang.Object),1911,1916,"/**
 * Adds the specified element to the beginning of the list.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,addLast,com.google.common.collect.Synchronized$SynchronizedDeque:addLast(java.lang.Object),1918,1923,"/**
 * Adds the specified element to the end of the list, thread-safe.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerFirst,com.google.common.collect.Synchronized$SynchronizedDeque:offerFirst(java.lang.Object),1925,1930,"/**
 * Offers an element to the delegate queue first, synchronized.
 * @param e the element to offer
 * @return true if successful, false otherwise
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,offerLast,com.google.common.collect.Synchronized$SynchronizedDeque:offerLast(java.lang.Object),1932,1937,"/**
 * Offers an element to the tail of the delegate queue.
 * Synchronized using the mutex.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirst,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirst(),1939,1944,"/**
 * Removes and returns the first element.
 * Synchronized access to the underlying delegate.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLast,com.google.common.collect.Synchronized$SynchronizedDeque:removeLast(),1946,1951,"/**
 * Removes and returns the last element.
 * Delegates to the underlying collection.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedDeque:pollFirst(),1953,1958,"/**
 * Retrieves and removes the first element, or null if empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedDeque:pollLast(),1960,1965,"/**
 * Retrieves and removes the last element, or null if empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getFirst,com.google.common.collect.Synchronized$SynchronizedDeque:getFirst(),1967,1972,"/**
 * Returns the first element from the underlying delegate.
 * Thread-safe access to the delegate's first element.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,getLast,com.google.common.collect.Synchronized$SynchronizedDeque:getLast(),1974,1979,"/**
 * Returns the last element of the underlying collection.
 * Synchronized access to the delegate's getLast method.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekFirst,com.google.common.collect.Synchronized$SynchronizedDeque:peekFirst(),1981,1986,"/**
 * Retrieves and returns the first element without removing it.
 * @return The first element or null if the deque is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,peekLast,com.google.common.collect.Synchronized$SynchronizedDeque:peekLast(),1988,1993,"/**
 * Retrieves and removes the last element without removing it.
 * @return The last element or null if the queue is empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeFirstOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeFirstOccurrence(java.lang.Object),1995,2000,"/**
 * Removes the first occurrence of the specified element.
 * @param o element to remove; null allowed
 * @return true if removed, false otherwise
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeLastOccurrence,com.google.common.collect.Synchronized$SynchronizedDeque:removeLastOccurrence(java.lang.Object),2002,2007,"/**
 * Removes the last occurrence of the specified element.
 * @param o element to remove; returns true if removed.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,push,com.google.common.collect.Synchronized$SynchronizedDeque:push(java.lang.Object),2009,2014,"/**
 * Adds an element to the deque in a thread-safe manner.
 * @param e the element to add
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pop,com.google.common.collect.Synchronized$SynchronizedDeque:pop(),2016,2021,"/**
 * Removes and returns the top element from the underlying delegate.
 * @return The top element, or null if the delegate is empty.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedDeque:descendingIterator(),2023,2028,"/**
 * Returns a descending iterator over the elements in the set.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,delegate,com.google.common.collect.Synchronized$SynchronizedNavigableSet:delegate(),1469,1472,"/**
* Returns the underlying NavigableSet implementation.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,comparator,com.google.common.collect.Synchronized$SynchronizedSortedSet:comparator(),318,323,"/**
* Returns the comparator used for sorting, or null if none.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedSortedSet:subSet(java.lang.Object,java.lang.Object)",325,330,"/**
 * Returns a sorted set containing elements from fromElement to toElement.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:headSet(java.lang.Object),332,337,"/**
 * Returns a sorted set containing elements up to (not including) toElement.
 * @param toElement the element to end the set before
 * @return a SortedSet containing elements less than toElement
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedSortedSet:tailSet(java.lang.Object),339,344,"/**
 * Returns a sorted set containing elements greater than or equal to fromElement.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,first,com.google.common.collect.Synchronized$SynchronizedSortedSet:first(),346,351,"/**
 * Returns the first element from the underlying collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,last,com.google.common.collect.Synchronized$SynchronizedSortedSet:last(),353,358,"/**
 * Returns the last element of the underlying collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingEntry(java.lang.Object),1614,1619,"/**
* Returns the least entry whose key is greater than or equal to the given key.
*/",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceilingKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:ceilingKey(java.lang.Object),1621,1626,"/**
 * Returns the smallest key greater than or equal to the given key.
 * @param key The key to compare against.
 * @return The ceiling key, or null if none exists.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingKeySet(),1630,1638,"/**
 * Returns a descending key set, synchronized on the mutex.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,firstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:firstEntry(),1652,1657,"/**
 * Returns the first entry in the map, or null if empty.
 * Uses synchronized entry for thread safety.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorEntry(java.lang.Object),1659,1664,"/**
 * Returns the floor entry (<= key), or null if none exists.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floorKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:floorKey(java.lang.Object),1666,1671,"/**
 * Returns the greatest key <= the given key, or null if none.
 * @param key The key to find the floor key for.
 * @return The floor key, or null if no such key exists.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherEntry(java.lang.Object),1685,1690,"/**
 * Returns the next higher entry based on the key.
 * @param key the key to compare against
 * @return the next higher entry or null if none
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higherKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:higherKey(java.lang.Object),1692,1697,"/**
 * Returns the next higher key than the given key, or null if none.
 * @param key the key to find the next higher key for
 * @return the next higher key, or null if none exists
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lastEntry(),1699,1704,"/**
 * Returns the last entry in the map, or null if empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerEntry(java.lang.Object),1706,1711,"/**
 * Returns the entry immediately before the given key, or null.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lowerKey,com.google.common.collect.Synchronized$SynchronizedNavigableMap:lowerKey(java.lang.Object),1713,1718,"/**
 * Returns the greatest key strictly less than the given key.
 * @param key the key to compare against
 * @return the lower key, or null if none exists
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableKeySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:navigableKeySet(),1727,1735,"/**
 * Returns a synchronized navigable key set view of the map's keys.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirstEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollFirstEntry(),1737,1742,"/**
 * Retrieves and removes the first entry in the map.
 * @return First Entry<K, V> or null if empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLastEntry,com.google.common.collect.Synchronized$SynchronizedNavigableMap:pollLastEntry(),1744,1749,"/**
 * Retrieves and removes the last entry in the map.
 * Returns the entry or null if the map is empty.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,removeAll,com.google.common.collect.SetMultimap:removeAll(java.lang.Object),73,75,"/**
 * Removes all elements of the set whose keys are equal to key.
 * @param key The key to compare against. Returns a set.
 */","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,get,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:get(java.lang.Object),902,907,"/**
 * Retrieves a sorted set associated with the given key.
 * @param key the key to retrieve the sorted set for
 * @return SortedSet object or an empty set if not found
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:removeAll(java.lang.Object),909,914,"/**
 * Removes all entries for the given key.
 * @param key The key whose entries to remove.
 * @return A sorted set of removed values.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,replaceValues,"com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",916,921,"/**
 * Replaces values for a key with the provided iterable.
 * @param key key to replace values for
 * @param values new values to replace with
 * @return SortedSet of replaced values.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,valueComparator,com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap:valueComparator(),923,928,"/**
 * Returns the value comparator, synchronized.
 * @return Comparator for values, or null.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,subMap,"com.google.common.collect.TreeBasedTable$TreeRow:subMap(java.lang.Object,java.lang.Object)",225,229,"/**
 * Returns a sorted submap from fromKey to toKey (inclusive).
 * @param fromKey start key
 * @param toKey end key
 * @return SortedMap containing keys between fromKey and toKey
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,headMap,com.google.common.collect.TreeBasedTable$TreeRow:headMap(java.lang.Object),231,235,"/**
 * Returns a sorted map containing entries with keys less than toKey.
 * @param toKey the exclusive upper bound key
 * @return a SortedMap with keys less than toKey
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,tailMap,com.google.common.collect.TreeBasedTable$TreeRow:tailMap(java.lang.Object),237,241,"/**
 * Returns a sorted map containing entries with keys >= fromKey.
 * @param fromKey Key from which to start the tail map.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,containsKey,com.google.common.collect.TreeBasedTable$TreeRow:containsKey(java.lang.Object),296,299,"/**
* Checks if the map contains the specified key.
* Uses rangeContains and super.containsKey.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,put,"com.google.common.collect.TreeBasedTable$TreeRow:put(java.lang.Object,java.lang.Object)",301,305,"/**
 * Puts a key-value pair into the map, validating the key.
 * @param key The key to put.
 * @param value The value associated with the key.
 * @return The previous value or null if key was new.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,rebalance,com.google.common.collect.TreeMultiset$AvlNode:rebalance(),950,970,"/**
* Rebalances the AVL tree node based on balance factor.
* Returns the rebalanced node.
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,size,com.google.common.collect.TreeMultiset:size(),228,231,"/**
 * Returns the number of elements in this map.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,distinctElements,com.google.common.collect.TreeMultiset:distinctElements(),233,236,"/**
 * Returns the number of distinct elements in the collection.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.StandardNetwork:incidentEdges(java.lang.Object),130,133,"/**
 * Returns the incident edges of a node, filtered and validated.
 * @param node The node to get incident edges for.
 * @return A set of incident edges.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.StandardNetwork:adjacentNodes(java.lang.Object),143,146,"/**
 * Returns the adjacent nodes of the given node.
 * @param node The node to find adjacent nodes for.
 * @return A set of adjacent nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.StandardNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
 * Returns edges connecting nodeU to nodeV.
 * @param nodeU source node
 * @param nodeV destination node
 * @return Set of edges connecting the nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.StandardNetwork:inEdges(java.lang.Object),158,161,"/**
 * Returns the incoming edges for a given node.
 * @param node The node to retrieve in-edges for.
 * @return Set of incoming edges.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.StandardNetwork:outEdges(java.lang.Object),163,166,"/**
 * Returns the set of outgoing edges for a given node.
 * @param node The node to retrieve outgoing edges for.
 * @return Set of outgoing edges.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,predecessors,com.google.common.graph.StandardNetwork:predecessors(java.lang.Object),168,171,"/**
 * Returns the predecessors of a node, filtering invalid ones.
 * @param node The node to get predecessors for.
 * @return Set of predecessors.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.StandardNetwork:successors(java.lang.Object),173,176,"/**
 * Returns the successors of a node, validating them.
 * @param node The node to find successors for.
 * @return A set of successor nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.StandardValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
 * Returns the adjacent nodes of the given node.
 * @param node The node to find adjacent nodes for.
 * @return Set of adjacent nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.StandardValueGraph:predecessors(java.lang.Object),108,111,"/**
 * Returns the predecessors of a node, filtering invalid ones.
 * @param node The node to find predecessors for.
 * @return Set of valid predecessor nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.StandardValueGraph:successors(java.lang.Object),113,116,"/**
 * Returns the successors of the given node.
 * @param node The node to get successors for.
 * @return A set of successor nodes.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.StandardValueGraph:incidentEdges(java.lang.Object),118,129,"/**
 * Returns incident edges for a node.
 * @param node the node to get incident edges for
 * @return Set of EndpointPair<N> representing incident edges
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.StandardValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
 * Checks if an edge connects two nodes.
 * @param nodeU The first node.
 * @param nodeV The second node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.StandardValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
 * Checks if an edge connects the given endpoints.
 * @param endpoints The pair of endpoints to check.
 * @return True if an edge connects the endpoints.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
 * Returns the edge value or defaultValue if not present.
 * @param nodeU Source node.
 * @param nodeV Target node.
 * @param defaultValue Default value if edge is absent.
 * @return Edge value or defaultValue.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.StandardValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
 * Returns the edge value or a default value if not present.
 * @param endpoints Endpoint pair to check.
 * @param defaultValue Default value if edge is absent.
 * @return Edge value or default value.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,"com.google.common.hash.AbstractStreamingHasher:putBytes(byte[],int,int)",92,96,"/**
 * Adds bytes to the hasher.
 * @param bytes The bytes to add.
 * @param off  Offset within the bytes array.
 * @param len  Number of bytes to add.
 * @return  Hasher instance for chaining.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractStreamingHasher.java,putBytes,com.google.common.hash.AbstractStreamingHasher:putBytes(java.nio.ByteBuffer),98,108,"/**
 * Puts bytes from a ByteBuffer into the hasher.
 * @param readBuffer ByteBuffer to read bytes from.
 * @return Hasher object for chaining.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/FarmHashFingerprint64.java,hashBytes,"com.google.common.hash.FarmHashFingerprint64:hashBytes(byte[],int,int)",49,53,"/**
 * Calculates the hash code of a byte array segment.
 * @param input byte array, @param off offset, @param len length
 * @return HashCode object representing the hash
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Fingerprint2011.java,hashBytes,"com.google.common.hash.Fingerprint2011:hashBytes(byte[],int,int)",40,44,"/**
 * Calculates a hash code from a byte array segment.
 * @param input Byte array. @param off Start offset. @param len Length.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashInt,com.google.common.hash.Murmur3_32HashFunction:hashInt(int),108,114,"/**
 * Calculates a hash code for an integer input.
 * @param input The integer to hash.
 * @return HashCode object representing the hash.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashLong,com.google.common.hash.Murmur3_32HashFunction:hashLong(long),116,128,"/**
 * Computes a hash code for a long value.
 * @param input The long value to hash.
 * @return A HashCode object representing the hash.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashUnencodedChars,com.google.common.hash.Murmur3_32HashFunction:hashUnencodedChars(java.lang.CharSequence),130,149,"/**
 * Computes a hash code for the unencoded characters of a CharSequence.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashString,"com.google.common.hash.Murmur3_32HashFunction:hashString(java.lang.CharSequence,java.nio.charset.Charset)",151,220,"/**
 * Computes a hash code for the input CharSequence using the given charset.
 * @param input CharSequence to hash
 * @param charset Charset to use for encoding
 * @return Hash code value
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,hashBytes,"com.google.common.hash.Murmur3_32HashFunction:hashBytes(byte[],int,int)",222,238,"/**
 * Computes a hash code for a byte array segment.
 * @param input byte array
 * @param off start index
 * @param len number of bytes to hash
 * @return HashCode value
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long,double)",433,436,"/**
 * Creates a Bloom filter with a default hashing strategy.
 * @param funnel Funnel for hashing elements.
 * @param expectedInsertions Expected number of insertions.
 * @param fpp False positive probability.
 * @return New BloomFilter instance.
 */
","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToInt,"com.google.common.math.DoubleMath:roundToInt(double,java.math.RoundingMode)",127,135,"/**
 * Rounds a double to the nearest integer using the given mode.
 * @param x the double to round
 * @param mode the rounding mode to use
 */
","* Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Integer.MIN_VALUE} or greater than {@code
   *           Integer.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToLong,"com.google.common.math.DoubleMath:roundToLong(double,java.math.RoundingMode)",154,162,"/**
 * Rounds a double to a long according to the specified rounding mode.
 * @param x The double value to round.
 * @param mode The rounding mode to use.
 */
","* Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding
   * mode, if possible.
   *
   * @throws ArithmeticException if
   *     <ul>
   *       <li>{@code x} is infinite or NaN
   *       <li>{@code x}, after being rounded to a mathematical integer using the specified rounding
   *           mode, is either less than {@code Long.MIN_VALUE} or greater than {@code
   *           Long.MAX_VALUE}
   *       <li>{@code x} is not a mathematical integer and {@code mode} is {@link
   *           RoundingMode#UNNECESSARY}
   *     </ul>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/DoubleMath.java,roundToBigInteger,"com.google.common.math.DoubleMath:roundToBigInteger(double,java.math.RoundingMode)",183,195,"/**
* Rounds a double to a BigInteger, handling potential overflow.
* @param x the double to round
* @param mode rounding mode to apply
*/
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,insertInHashTable,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:insertInHashTable(java.lang.Object),760,780,"/**
 * Inserts an element into the hash table.
 * @param e element to insert; returns this or a JDK backed builder.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,review,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:review(),787,799,"/**
 * Reviews and potentially rebuilds the hash table.
 * Returns a new builder if hash flooding is detected.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,combine,com.google.common.collect.TopKSelector:combine(com.google.common.collect.TopKSelector),242,248,"/**
 * Combines elements from another TopKSelector into this one.
 * @param other The other TopKSelector to combine from.
 * @return This TopKSelector instance.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.util.Iterator),269,273,"/**
 * Adds all elements from the iterator to the queue.
 * @param elements Iterator of elements to add.
 */
","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}. The iterator is
   * consumed after this operation completes.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterator}, prefer
   * {@link Ordering#leastOf(Iterator, int)}, which provides a simpler API for that use case.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base16Encoding:<init>(java.lang.String,java.lang.String)",954,956,"/**
 * Constructs a Base16Encoding with a custom alphabet.
 * @param name Name of the alphabet.
 * @param alphabetChars Alphabet characters as a string.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$Base64Encoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",999,1001,"/**
 * Creates a Base64Encoding with a custom alphabet and padding.
 * @param name Alphabet name, alphabetChars: alphabet chars, paddingChar: padding char
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,<init>,"com.google.common.io.BaseEncoding$StandardBaseEncoding:<init>(java.lang.String,java.lang.String,java.lang.Character)",619,621,"/**
 * Constructs a StandardBaseEncoding with a given alphabet.
 * @param name Encoding name
 * @param alphabetChars Alphabet characters
 * @param paddingChar Optional padding character
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$Alphabet:upperCase(),564,575,"/**
 * Converts the alphabet to uppercase.
 * Returns a new Alphabet object or original if already uppercase.
 */",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$Alphabet:lowerCase(),577,588,"/**
 * Converts the alphabet to lowercase.
 * Returns a new Alphabet instance or original if already lowercase.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,ignoreCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:ignoreCase(),907,915,"/**
 * Returns a BaseEncoding that ignores case.
 * Uses a cached instance if available.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,least,com.google.common.collect.TopKSelector:least(int),69,71,"/**
 * Returns a TopKSelector for the least k elements, using natural ordering.
 * @param k The number of least elements to select.
 */
","* Returns a {@code TopKSelector} that collects the lowest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * ascending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,greatest,com.google.common.collect.TopKSelector:greatest(int),91,93,"/**
 * Creates a TopKSelector to find the k greatest elements.
 * @param k The number of greatest elements to select.
 */
","* Returns a {@code TopKSelector} that collects the greatest {@code k} elements added to it,
   * relative to the natural ordering of the elements, and returns them via {@link #topK} in
   * descending order.
   *
   * @throws IllegalArgumentException if {@code k < 0} or {@code k > Integer.MAX_VALUE / 2}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/IntMath.java,isPrime,com.google.common.math.IntMath:isPrime(int),725,728,"/**
 * Checks if a number is prime using LongMath.
 * @param n the integer to check
 * @return true if prime, false otherwise
 */
","* Returns {@code true} if {@code n} is a <a
   * href=""http://mathworld.wolfram.com/PrimeNumber.html"">prime number</a>: an integer <i>greater
   * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.
   * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be
   * factored into smaller positive integers).
   *
   * <p>To test larger numbers, use {@link LongMath#isPrime} or {@link BigInteger#isProbablePrime}.
   *
   * @throws IllegalArgumentException if {@code n} is negative
   * @since 20.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,binomial,"com.google.common.math.BigIntegerMath:binomial(int,int)",465,511,"/**
 * Calculates the binomial coefficient (n choose k).
 * @param n non-negative integer
 * @param k non-negative integer, k <= n
 * @return binomial coefficient as a BigInteger
 */
","* Returns {@code n} choose {@code k}, also known as the binomial coefficient of {@code n} and
   * {@code k}, that is, {@code n! / (k! (n - k)!)}.
   *
   * <p><b>Warning:</b> the result can take as much as <i>O(k log n)</i> space.
   *
   * @throws IllegalArgumentException if {@code n < 0}, {@code k < 0}, or {@code k > n}",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.lang.Iterable),103,107,"/**
 * Calculates statistics (min, max, sum, count) from a number iterable.
 * @param values Iterable of Number objects to calculate stats from.
 * @return Stats object containing the calculated statistics.
 */
","* Returns statistics over a dataset containing the given values.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.Iterator),116,120,"/**
 * Calculates statistics from an iterator of numbers.
 * @param values Iterator of Number objects to analyze.
 * @return Stats object containing calculated statistics.
 */
","* Returns statistics over a dataset containing the given values. The iterator will be completely
   * consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/PairedStatsAccumulator.java,addAll,com.google.common.math.PairedStatsAccumulator:addAll(com.google.common.math.PairedStats),73,92,"/**
 * Adds all stats from the given PairedStats object.
 * Updates sumOfProductsOfDeltas based on existing yStats.
 */","* Adds the given statistics to the dataset, as if the individual values used to compute the
   * statistics had been added directly.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.DoubleStream),166,170,"/**
 * Calculates stats from a DoubleStream.
 * @param values Stream of double values to analyze.
 * @return Stats object containing calculated statistics.
 */
","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Double>} rather than a {@code DoubleStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.IntStream),182,186,"/**
 * Calculates stats from an IntStream.
 * @param values IntStream of numerical values.
 * @return Stats object containing calculated statistics.
 */
","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Integer>} rather than an {@code IntStream}, you should collect
   * the values using {@link #toStats()} instead.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Stats.java,of,com.google.common.math.Stats:of(java.util.stream.LongStream),199,203,"/**
 * Calculates stats from a LongStream.
 * @param values Stream of long values to analyze.
 * @return Stats object containing calculated statistics.
 */
","* Returns statistics over a dataset containing the given values. The stream will be completely
   * consumed by this method.
   *
   * <p>If you have a {@code Stream<Long>} rather than a {@code LongStream}, you should collect the
   * values using {@link #toStats()} instead.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.DoubleStream),142,144,"/**
* Adds all elements from the provided DoubleStream to the stats.
* @param values The DoubleStream whose elements to add.
*/
","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.IntStream),152,154,"/**
 * Adds all elements from the IntStream to the StatsAccumulator.
 * @param values IntStream containing values to add.
 */
","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/StatsAccumulator.java,addAll,com.google.common.math.StatsAccumulator:addAll(java.util.stream.LongStream),163,165,"/**
 * Adds all elements from the LongStream to the StatsAccumulator.
 */","* Adds the given values to the dataset. The stream will be completely consumed by this method.
   *
   * @param values a series of values, which will be converted to {@code double} values (this may
   *     cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
   * @since 28.2 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/Quantiles.java,selectAllInPlace,"com.google.common.math.Quantiles:selectAllInPlace(int[],int,int,double[],int,int)",627,653,"/**
 * Selects elements in-place based on requirements, recursively.
 * @param allRequired Array of selection requirements.
 * @param requiredFrom Start index for requirements.
 * @param requiredTo End index for requirements.
 * @param array Array to modify.
 * @param from Start index for array selection.
 * @param to End index for array selection.
 */
","* Performs an in-place selection, like {@link #selectInPlace}, to select all the indexes {@code
   * allRequired[i]} for {@code i} in the range [{@code requiredFrom}, {@code requiredTo}]. These
   * indexes must be sorted in the array and must all be in the range [{@code from}, {@code to}].",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,copyOf,com.google.common.primitives.ImmutableDoubleArray:copyOf(java.lang.Iterable),164,169,"/**
 * Creates an ImmutableDoubleArray from an Iterable of Doubles.
 */","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,copyOf,com.google.common.primitives.ImmutableIntArray:copyOf(java.lang.Iterable),161,166,"/**
 * Creates an ImmutableIntArray from an Iterable of Integers.
 */","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,copyOf,com.google.common.primitives.ImmutableLongArray:copyOf(java.lang.Iterable),163,168,"/**
 * Creates an ImmutableLongArray from an Iterable of Long values.
 */
","* Returns an immutable array containing the given values, in order.
   *
   * <p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code
   * values} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link
   * Builder#addAll(Iterable)}, with all the performance implications associated with that.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(int),262,264,"/**
 * Converts the long value to a string in the specified radix.
 * @param radix The base to use for the conversion.
 */
","* Returns a string representation of the {@code UnsignedLong} value, in base {@code radix}. If
   * {@code radix < Character.MIN_RADIX} or {@code radix > Character.MAX_RADIX}, the radix {@code
   * 10} is used.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLongs.java,toString,com.google.common.primitives.UnsignedLongs:toString(long),444,446,"/**
 * Converts a long to its string representation in base 10.
 */","* Returns a string representation of x, where x is treated as unsigned.
   *
   * <p><b>Java 8+ users:</b> use {@link Long#toUnsignedString(long)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,equals,com.google.common.reflect.Parameter:equals(java.lang.Object),139,146,"/**
 * Checks if this parameter is equal to another Parameter object.
 * @param obj The object to compare to.
 * @return True if equal, false otherwise.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,invokeAnyImpl,"com.google.common.util.concurrent.MoreExecutors:invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService,java.util.Collection,boolean,java.time.Duration)",658,669,"/**
 * Invokes any of the given Callable tasks, with optional timeout.
 * @param executorService Executor service to run tasks.
 * @param tasks Callable tasks to execute.
 * @param timed Whether to use a timeout.
 * @param timeout Timeout duration.
 * @return Result of the first completed task.
 * @throws InterruptedException, ExecutionException, TimeoutException
 */
","* An implementation of {@link ExecutorService#invokeAny} for {@link ListeningExecutorService}
   * implementations.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,run,"com.google.common.util.concurrent.Futures$FutureCombiner:run(java.lang.Runnable,java.util.concurrent.Executor)",765,775,"/**
 * Runs a Runnable in an Executor and returns a ListenableFuture.
 * @param combiner Runnable to execute
 * @param executor Executor to run the Runnable on
 * @return ListenableFuture representing the task execution
 */
","* Creates the {@link ListenableFuture} which will return the result of running {@code combiner}
     * when all Futures complete. {@code combiner} will run using {@code executor}.
     *
     * <p>If the combiner throws a {@code CancellationException}, the returned future will be
     * cancelled.
     *
     * <p>Canceling this Future will attempt to cancel all the component futures.
     *
     * @since 23.6
     * @return a future whose result is based on {@code combiner} (or based on the input futures
     *     passed to {@code whenAllSucceed}, if that is the method you used to create this {@code
     *     FutureCombiner}). Even though the future never produces a value other than {@code null},
     *     you should typically check whether it failed: See <a
     *     href=""https://errorprone.info/bugpattern/FutureReturnValueIgnored"">https://errorprone.info/bugpattern/FutureReturnValueIgnored</a>.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AggregateFuture.java,decrementCountAndMaybeComplete,com.google.common.util.concurrent.AggregateFuture:decrementCountAndMaybeComplete(com.google.common.collect.ImmutableCollection),292,300,"/**
 * Decrements the count and completes processing if count reaches zero.
 * @param futures Futures to process upon completion.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,checkAcquiredLocks,"com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy,java.util.List)",608,612,"/**
 * Checks each acquired lock against the given policy.
 * @param policy Policy to validate against.
 * @param acquiredLocks Locks to check.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,from,com.google.common.util.concurrent.ClosingFuture:from(com.google.common.util.concurrent.ListenableFuture),450,452,"/**
 * Creates a ClosingFuture wrapping the given ListenableFuture.
 * @param future The ListenableFuture to wrap.
 * @return A new ClosingFuture instance.
 */
","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>{@code future}'s value will not be closed when the pipeline is done even if {@code V}
   * implements {@link Closeable}. In order to start a pipeline with a value that will be closed
   * when the pipeline is done, use {@link #submit(ClosingCallable, Executor)} instead.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,derive,com.google.common.util.concurrent.ClosingFuture:derive(com.google.common.util.concurrent.FluentFuture),1115,1119,"/**
 * Creates a ClosingFuture derived from a FluentFuture.
 * @param future The FluentFuture to derive from.
 * @return A new ClosingFuture wrapping the input future.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPoll,com.google.common.collect.ForwardingQueue:standardPoll(),121,127,"/**
 * Retrieves and removes the head of the queue, or null if empty.
 */","* A sensible definition of {@link #poll} in terms of {@link #remove}. If you override {@link
   * #remove}, you may wish to override {@link #poll} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingQueue.java,standardPeek,com.google.common.collect.ForwardingQueue:standardPeek(),107,113,"/**
 * Attempts to peek at the element; returns null if empty.
 */
","* A sensible definition of {@link #peek} in terms of {@link #element}. If you override {@link
   * #element}, you may wish to override {@link #peek} to forward to this implementation.
   *
   * @since 7.0",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ExecutionSequencer.java,submit,"com.google.common.util.concurrent.ExecutionSequencer:submit(java.util.concurrent.Callable,java.util.concurrent.Executor)",149,166,"/**
 * Submits a Callable to the executor and wraps it in a ListenableFuture.
 * @param callable The Callable to execute.
 * @param executor Executor to run the callable.
 * @return ListenableFuture that tracks the Callable's execution.
 */
","* Enqueues a task to run when the previous task (if any) completes.
   *
   * <p>Cancellation does not propagate from the output future to a callable that has begun to
   * execute, but if the output future is cancelled before {@link Callable#call()} is invoked,
   * {@link Callable#call()} will not be invoked.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,getChecked,"com.google.common.util.concurrent.FuturesGetChecked:getChecked(java.util.concurrent.Future,java.lang.Class)",44,49,"/**
 * Retrieves a value from a Future, throwing a specific exception type.
 * @param future Future to retrieve from
 * @param exceptionClass Exception class to throw
 * @return Value from the Future
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,long,java.util.concurrent.TimeUnit)",1324,1332,"/**
 * Gets the result of a Future, throwing an exception of type X.
 * @param future The Future to get the result from.
 * @param exceptionClass The exception class to throw on failure.
 * @param timeout Timeout value.
 * @param unit Timeout unit.
 * @return The result of the Future.
 */
","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}) and calling the constructor via
   * reflection. If the exception did not already have a cause, one is set by calling {@link
   * Throwable#initCause(Throwable)} on it. If no such constructor exists, an {@code
   * IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get} and with different parameter order)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FuturesGetChecked.java,validateClass,com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator:validateClass(java.lang.Class),159,183,"/**
 * Validates an exception class, caches it if valid, and limits cache size.
 */
",,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStopped,com.google.common.util.concurrent.AbstractService:notifyStopped(),436,456,"/**
 * Notifies listeners that the service has stopped.
 * Transitions service to TERMINATED state, if applicable.
 */","* Implementing classes should invoke this method once their service has stopped. It will cause
   * the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link
   * State#TERMINATED}.
   *
   * @throws IllegalStateException if the service is not one of {@link State#STOPPING}, {@link
   *     State#STARTING}, or {@link State#RUNNING}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyFailed,com.google.common.util.concurrent.AbstractService:notifyFailed(java.lang.Throwable),463,487,"/**
 * Notifies the system of a failure, updating state and dispatching events.
 * @param cause The Throwable object representing the failure.
 */
","* Invoke this method to transition the service to the {@link State#FAILED}. The service will
   * <b>not be stopped</b> if it is running. Invoke this method when a service has failed critically
   * or otherwise cannot be started nor stopped.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,tryStartTiming,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:tryStartTiming(com.google.common.util.concurrent.Service),539,549,"/**
 * Starts a stopwatch for the given service, if one doesn't exist.
 * @param service The service to start a stopwatch for.
 */
","* Attempts to start the timer immediately prior to the service being started via {@link
     * Service#startAsync()}.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,transitionService,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:transitionService(com.google.common.util.concurrent.Service,com.google.common.util.concurrent.Service$State,com.google.common.util.concurrent.Service$State)",673,726,"/**
 * Transitions a service from one state to another.
 * @param service The service to transition.
 * @param from The initial state.
 * @param to The target state.
 */","* Updates the state with the given service transition.
     *
     * <p>This method performs the main logic of ServiceManager in the following steps.
     *
     * <ol>
     *   <li>Update the {@link #servicesByState()}
     *   <li>Update the {@link #startupTimers}
     *   <li>Based on the new state queue listeners to run
     *   <li>Run the listeners (outside of the lock)
     * </ol>",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard),472,491,"/**
 * Waits until the guard condition is met, potentially signaling.
 * @param guard The guard to wait on.
 * @throws InterruptedException If interrupted while waiting.
 */
","* Enters this monitor when the guard is satisfied. Blocks indefinitely, but may be interrupted.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard),823,830,"/**
 * Waits for a guard to become satisfied.
 * Throws IllegalMonitorStateException if preconditions are not met.
 */
","* Waits for the guard to be satisfied. Waits indefinitely, but may be interrupted. May be called
   * only by a thread currently occupying this monitor.
   *
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),570,589,"/**
 * Waits on a guard until it's satisfied, uninterruptibly.
 * @param guard The guard to wait on.
 */
",Enters this monitor when the guard is satisfied. Blocks indefinitely.,,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard),870,877,"/**
 * Waits for a guard to be satisfied without interruption.
 * Throws IllegalMonitorStateException if not holding the lock.
 */
","* Waits for the guard to be satisfied. Waits indefinitely. May be called only by a thread
   * currently occupying this monitor.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",514,567,"/**
 * Attempts to enter the condition, waiting if necessary.
 * @param guard The condition to wait for.
 * @param time The maximum wait time.
 * @param unit The time unit of the timeout.
 * @return True if the condition is satisfied, false otherwise.
 */
","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",608,667,"/**
 * Attempts to acquire the lock until the given time elapses.
 * @param guard Guard to satisfy.
 * @param time Timeout duration.
 * @param unit Time unit of the timeout.
 * @return True if acquired, false otherwise.
 */
","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",851,864,"/**
 * Waits for a guard to be satisfied, with a timeout.
 * @param guard The guard to wait for.
 * @param time Timeout duration.
 * @param unit Time unit for the timeout.
 * @return True if guard is satisfied, false if timeout.
 */
","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,java.util.concurrent.TimeUnit)",896,926,"/**
 * Waits uninterruptibly for a guard to become satisfied within a time.
 * @param guard The guard to wait on.
 * @param time The timeout duration.
 * @param unit The time unit of the timeout.
 * @return True if the guard was satisfied, false if timeout.
 */
","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(long,java.util.concurrent.TimeUnit,java.util.concurrent.ScheduledExecutorService)",289,295,"/**
 * Sets a timeout for the future, using the provided executor.
 * @param timeout Timeout duration.
 * @param unit TimeUnit of the timeout.
 * @param scheduledExecutor Executor for timeout scheduling.
 */
","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param unit the time unit of the time parameter
   * @param scheduledExecutor The executor service to enforce the timeout.",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,withTimeout,"com.google.common.util.concurrent.Futures:withTimeout(com.google.common.util.concurrent.ListenableFuture,java.time.Duration,java.util.concurrent.ScheduledExecutorService)",384,389,"/**
 * Wraps a ListenableFuture with a timeout.
 * @param delegate Future to wrap, time timeout duration, executor scheduler
 */
","* Returns a future that delegates to another but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified duration expires.
   *
   * <p>The delegate future is interrupted and cancelled if it times out.
   *
   * @param delegate The future to delegate to.
   * @param time when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,5
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,firstMatch,com.google.common.collect.FluentIterable:firstMatch(com.google.common.base.Predicate),464,467,"/**
 * Returns the first element matching the predicate, or empty.
 * @param predicate Predicate to apply to each element.
 */
","* Returns an {@link Optional} containing the first element in this fluent iterable that satisfies
   * the given predicate, if such an element exists.
   *
   * <p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}
   * is matched in this fluent iterable, a {@link NullPointerException} will be thrown.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputedInternal,com.google.common.base.CharMatcher:precomputedInternal(),417,442,"/**
 * Creates a CharMatcher, precomputing if possible for efficiency.
 * @return CharMatcher instance, either precomputed or negated.
 */
","* This is the actual implementation of {@link #precomputed}, but we bounce calls through a method
   * on {@link Platform} so that we can have different behavior in GWT.
   *
   * <p>This implementation tries to be smart in a number of ways. It recognizes cases where the
   * negation is cheaper to precompute than the matcher itself; it tries to build small hash tables
   * for matchers that only match a few characters, and so on. In the worst-case scenario, it
   * constructs an eight-kilobyte bit array and queries that. In many situations this produces a
   * matcher which is faster to query than the original.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Closer.java,rethrow,"com.google.common.io.Closer:rethrow(java.lang.Throwable,java.lang.Class,java.lang.Class)",177,186,"/**
 * Rethrows a Throwable as a RuntimeException after checks.
 * @param e Throwable to rethrow
 * @param declaredType1 Type to check for
 * @param declaredType2 Another type to check for
 * @throws IOException, X1, X2 if conditions are met
 */
","* Stores the given throwable and rethrows it. It will be rethrown as is if it is an {@code
   * IOException}, {@code RuntimeException}, {@code Error} or a checked exception of either of the
   * given types. Otherwise, it will be rethrown wrapped in a {@code RuntimeException}. <b>Note:</b>
   * Be sure to declare all of the checked exception types your try block can throw when calling an
   * overload of this method so as to avoid losing the original exception type.
   *
   * <p>This method always throws, and as such should be called as {@code throw closer.rethrow(e,
   * ...);} to ensure the compiler knows that it will throw.
   *
   * @return this method does not return; it always throws
   * @throws IOException when the given throwable is an IOException
   * @throws X1 when the given throwable is of the declared type X1
   * @throws X2 when the given throwable is of the declared type X2",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,write,com.google.common.io.ByteSink:write(byte[]),98,104,"/**
 * Writes an array of bytes to the output stream.
 * @param bytes The byte array to write.
 * @throws IOException If an I/O error occurs.
 */
","* Writes all the given bytes to this sink.
   *
   * @throws IOException if an I/O occurs while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSink.java,writeFrom,com.google.common.io.ByteSink:writeFrom(java.io.InputStream),113,120,"/**
 * Writes data from an input stream to the open output stream.
 * @param input The input stream to read from.
 * @return Number of bytes written.
 */
","* Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code
   * input}.
   *
   * @return the number of bytes written
   * @throws IOException if an I/O occurs while reading from {@code input} or writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,sliceStream,com.google.common.io.ByteSource$SlicedByteSource:sliceStream(java.io.InputStream),505,527,"/**
* Skips bytes from an input stream or limits its length.
* @param in Input stream to process.
* @return Limited input stream.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource:isEmpty(),151,165,"/**
 * Checks if the stream is empty. Returns true if empty, false otherwise.
 */","* Returns whether the source has zero bytes. The default implementation first checks {@link
   * #sizeIfKnown}, returning true if it's known to be zero and false if it's known to be non-zero.
   * If the size is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code sizeIfKnown} returns zero, it is <i>possible</i> that bytes
   * are actually available for reading. (For example, some special files may return a size of 0
   * despite actually having content when read.) This means that a source may return {@code true}
   * from {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource:size(),204,229,"/**
 * Returns the size of the data source. Uses cached size if available.
 */","* Returns the size of this source in bytes, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #sizeIfKnown}.
   *
   * <p>The default implementation calls {@link #sizeIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, read (or {@link
   * InputStream#skip(long) skip}, if possible) to the end of the stream and return the total number
   * of bytes that were read.
   *
   * <p>Note that for some sources that implement {@link #sizeIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of bytes
   * than would be returned by reading all of the bytes (for example, some special files may return
   * a size of 0 despite actually having content when read).
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of bytes if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the size of this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(java.io.OutputStream),249,262,"/**
 * Copies the stream to the given output stream.
 * @param output the output stream to copy to
 * @return number of bytes copied
 * @throws IOException if an I/O error occurs
 */
","* Copies the contents of this byte source to the given {@code OutputStream}. Does not close
   * {@code output}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     output}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,copyTo,com.google.common.io.ByteSource:copyTo(com.google.common.io.ByteSink),271,285,"/**
 * Copies data from the input stream to the provided sink.
 * @param sink ByteSink to copy data to
 * @return Number of bytes copied
 */
","* Copies the contents of this byte source to the given {@code ByteSink}.
   *
   * @return the number of bytes copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(),292,305,"/**
 * Reads all bytes from the input stream.
 * Returns byte array or throws IOException.
 */
","* Reads the full contents of this byte source as a byte array.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource:read(com.google.common.io.ByteProcessor),316,330,"/**
 * Reads bytes from stream using processor.
 * @param processor Processor to handle the bytes.
 * @return Result of the processor.
 * @throws IOException if an I/O error occurs.
 */
","* Reads the contents of this byte source using the given {@code processor} to process bytes as
   * they are read. Stops when all bytes have been read or the consumer returns {@code false}.
   * Returns the result produced by the processor.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,contentEquals,com.google.common.io.ByteSource:contentEquals(com.google.common.io.ByteSource),349,361,"/**
 * Compares contents of this ByteSource with another.
 * @param other The other ByteSource to compare with.
 * @throws IOException if an I/O error occurs.
 */
","* Checks that the contents of this byte source are equal to the contents of the given byte
   * source.
   *
   * @throws IOException if an I/O error occurs while reading from this source or {@code other}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,write,com.google.common.io.CharSink:write(java.lang.CharSequence),94,100,"/**
 * Writes a character sequence to the output stream.
 * @param charSequence The sequence of characters to write.
 * @throws IOException If an I/O error occurs.
 */
","* Writes the given character sequence to this sink.
   *
   * @throws IOException if an I/O error while writing to this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSink.java,writeFrom,com.google.common.io.CharSink:writeFrom(java.lang.Readable),167,174,"/**
 * Writes data from a readable to an output stream.
 * @param readable Source of data to be written.
 * @return Number of characters written.
 */
","* Writes all the text from the given {@link Readable} (such as a {@link Reader}) to this sink.
   * Does not close {@code readable} if it is {@code Closeable}.
   *
   * @return the number of characters written
   * @throws IOException if an I/O error occurs while reading from {@code readable} or writing to
   *     this sink",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource$StringCharSource:copyTo(com.google.common.io.CharSink),657,670,"/**
 * Copies the string sequence to the provided CharSink.
 * @param sink CharSink to write to
 * @return Number of characters written
 * @throws IOException if an I/O error occurs
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource:length(),213,228,"/**
 * Returns the length of the stream.
 * Uses cached value if available, otherwise reads from stream.
 */
","* Returns the length of this source in chars, even if doing so requires opening and traversing an
   * entire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.
   *
   * <p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If
   * absent, it will fall back to a heavyweight operation that will open a stream, {@link
   * Reader#skip(long) skip} to the end of the stream, and return the total number of chars that
   * were skipped.
   *
   * <p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient
   * implementation, it is <i>possible</i> that this method will return a different number of chars
   * than would be returned by reading all of the chars.
   *
   * <p>In either case, for mutable sources such as files, a subsequent read may return a different
   * number of chars if the contents are changed.
   *
   * @throws IOException if an I/O error occurs while reading the length of this source
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(java.lang.Appendable),247,260,"/**
 * Copies stream content to an Appendable.
 * @param appendable Destination for the copied content.
 * @return Number of characters copied.
 * @throws IOException If an I/O error occurs.
 */
","* Appends the contents of this source to the given {@link Appendable} (such as a {@link Writer}).
   * Does not close {@code appendable} if it is {@code Closeable}.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     appendable}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,copyTo,com.google.common.io.CharSource:copyTo(com.google.common.io.CharSink),269,283,"/**
 * Copies data to a CharSink.
 * @param sink CharSink to copy data to.
 * @return Number of characters copied.
 * @throws IOException if an I/O error occurs.
 */
","* Copies the contents of this source to the given sink.
   *
   * @return the number of characters copied
   * @throws IOException if an I/O error occurs while reading from this source or writing to {@code
   *     sink}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readFirstLine,com.google.common.io.CharSource:readFirstLine(),312,322,"/**
 * Reads and returns the first line from the buffered stream.
 * @return The first line as a String, or null if EOF.
 * @throws IOException if an I/O error occurs.
 */
","* Reads the first line of this source as a string. Returns {@code null} if this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(com.google.common.io.LineProcessor),366,380,"/**
 * Reads lines from a stream using a LineProcessor.
 * @param processor Processes each line; returns the result.
 * @return Result of the LineProcessor, or null if applicable.
 * @throws IOException if an I/O error occurs.
 */
","* Reads lines of text from this source, processing each line as it is read using the given {@link
   * LineProcessor processor}. Stops when all lines have been processed or the processor returns
   * {@code false} and returns the result produced by the processor.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source or if {@code
   *     processor} throws an {@code IOException}
   * @since 16.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource:isEmpty(),416,430,"/**
 * Checks if the stream is empty. Returns true if empty.
 */","* Returns whether the source has zero chars. The default implementation first checks {@link
   * #lengthIfKnown}, returning true if it's known to be zero and false if it's known to be
   * non-zero. If the length is not known, it falls back to opening a stream and checking for EOF.
   *
   * <p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that
   * chars are actually available for reading. This means that a source may return {@code true} from
   * {@code isEmpty()} despite having readable content.
   *
   * @throws IOException if an I/O error occurs
   * @since 15.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,read,com.google.common.io.Files$FileByteSource:read(),151,162,"/**
 * Reads the entire input stream into a byte array.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,mapInternal,"com.google.common.io.Files:mapInternal(java.io.File,java.nio.channels.FileChannel$MapMode,long)",696,712,"/**
 * Maps a file into memory.
 * @param file The file to map.
 * @param mode The map mode (READ_ONLY or READ_WRITE).
 * @param size The size of the mapping, or -1 for the whole file.
 * @return MappedByteBuffer object.
 * @throws IOException if an I/O error occurs.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors$Application:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",263,283,"/**
* Adds a delayed shutdown hook to gracefully terminate the service.
* @param service ExecutorService to shut down
* @param terminationTimeout Timeout for termination
* @param timeUnit TimeUnit of the timeout
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expand,com.google.common.cache.LocalCache$Segment:expand(),2865,2932,"/**
 * Expands the table to double its capacity when needed.
 * Reclassifies entries to new bins based on hash.
 */
",Expands the table if possible.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntryFromChain,"com.google.common.cache.LocalCache$Segment:removeEntryFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry)",3261,3277,"/**
 * Removes an entry from the chain and copies preceding entries.
 * @param first First entry in the chain.
 * @param entry Entry to remove.
 * @return New first entry after removal.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterKeys,"com.google.common.collect.Multimaps:filterKeys(com.google.common.collect.Multimap,com.google.common.base.Predicate)",1980,1996,"/**
 * Filters keys in a Multimap based on the provided predicate.
 * @param unfiltered The Multimap to filter.
 * @param keyPredicate Predicate to filter keys.
 * @return A new Multimap with filtered keys.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,checkHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:checkHealthy(),759,771,"/**
 * Verifies the health of services; throws IllegalStateException if unhealthy.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.SetMultimap,com.google.common.base.Predicate)",2138,2142,"/**
 * Filters values in a SetMultimap based on a predicate.
 * @param unfiltered The SetMultimap to filter.
 * @param valuePredicate Predicate for filtering values.
 * @return Filtered SetMultimap.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterEntries,"com.google.common.collect.Multimaps:filterEntries(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2169,2179,"/**
 * Filters multimap entries based on the provided predicate.
 * @param unfiltered The multimap to filter.
 * @param entryPredicate Predicate to apply to each entry.
 * @return A new filtered Multimap.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned multimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a key/value pair that
   * doesn't satisfy the predicate, multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose keys satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,createColumnKeyIterator,com.google.common.collect.TreeBasedTable:createColumnKeyIterator(),309,338,"/**
 * Creates an iterator for column keys, removing duplicates based on comparator.
 */",Overridden column iterator to return columns values in globally sorted order.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,remove,com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl:remove(java.lang.Object),198,222,"/**
 * Removes values associated with the given key.
 * @param key The key to remove values for.
 * @return Collection of removed values, or null if key not found.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompoundOrdering.java,<init>,com.google.common.collect.CompoundOrdering:<init>(java.lang.Iterable),38,42,"/**
 * Creates a CompoundOrdering from an iterable of comparators.
 * @param comparators Iterable of comparators to combine.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.lang.Iterable),556,573,"/**
 * Creates an ImmutableBiMap from a given iterable of entries.
 */","* Returns an immutable bimap containing the given entries. The returned bimap iterates over
   * entries in the same order as the original iterable.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.lang.Iterable),713,731,"/**
 * Creates an immutable map from the given entries.
 * @param entries iterable of map entries
 * @return ImmutableMap containing the entries
 */
","* Returns an immutable map containing the specified entries. The returned map iterates over
   * entries in the same order as the original iterable.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @throws IllegalArgumentException if two entries have the same key
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,toArray,"com.google.common.collect.Iterables:toArray(java.lang.Iterable,java.lang.Class)",287,291,"/**
 * Converts an iterable to an array of the specified type.
 * @param iterable Iterable to convert
 * @param type Array component type
 * @return Array containing elements from the iterable
 */
","* Copies an iterable's elements into an array.
   *
   * @param iterable the iterable to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterable have been copied",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.lang.Iterable)",296,311,"/**
 * Creates an immutable sorted set from an iterable using the given comparator.
 */","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compare()}, only the
   * first one specified is included. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,sortedCopy,com.google.common.collect.Ordering:sortedCopy(java.lang.Iterable),862,867,"/**
 * Creates a sorted copy of the provided iterable elements.
 * @param elements Iterable to be copied and sorted.
 * @return A new list containing the sorted elements.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,iterator,com.google.common.collect.Collections2$OrderedPermutationCollection:iterator(),485,488,"/**
 * Returns an iterator for ordered permutations of the input list.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedLists.java,binarySearch,"com.google.common.collect.SortedLists:binarySearch(java.util.List,com.google.common.base.Function,java.lang.Object,java.util.Comparator,com.google.common.collect.SortedLists$KeyPresentBehavior,com.google.common.collect.SortedLists$KeyAbsentBehavior)",237,246,"/**
 * Performs binary search on a list transformed by keyFunction.
 * @param list List to search.
 * @param keyFunction Function to extract key from list elements.
 * @param key Search key.
 * @return Index of the key, or -1 if not found.
 */
","* Binary searches the list for the specified key, using the specified key function.
   *
   * <p>Equivalent to {@link #binarySearch(List, Object, Comparator, KeyPresentBehavior,
   * KeyAbsentBehavior)} using {@link Lists#transform(List, Function) Lists.transform(list,
   * keyFunction)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ListMultimap.java,removeAll,com.google.common.collect.ListMultimap:removeAll(java.lang.Object),61,63,"/**
 * Removes all values associated with the given key.
 * @param key The key whose values are to be removed.
 * @return A list of the removed values.
 */
","* {@inheritDoc}
   *
   * <p>Because the values for a given key may have duplicates and follow the insertion ordering,
   * this method returns a {@link List}, instead of the {@link java.util.Collection} specified in
   * the {@link Multimap} interface.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,remove,"com.google.common.collect.Multimaps$TransformedEntriesMultimap:remove(java.lang.Object,java.lang.Object)",1582,1586,"/**
 * Removes the specified value from the entry associated with key.
 * @param key the key of the entry
 * @param value the value to remove
 * @return true if the value was removed
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractNavigableMap.java,keySet,com.google.common.collect.AbstractNavigableMap:keySet(),145,148,"/**
 * Returns a navigable set view of the map's keys.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$DescendingMap:keySet(),4407,4410,"/**
* Returns a navigable set view of the map's keys.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:descendingMap(),2290,2293,"/**
* Returns a descending map backed by the entry set.
* Uses the transformer to convert values.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object,boolean)",2315,2318,"/**
 * Returns a view of the map's entries up to, but not including, toKey.
 * @param toKey  end key (exclusive)
 * @param inclusive whether to include toKey
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",2360,2368,"/**
 * Returns a view of the map's entries between fromKey and toKey.
 * @param fromKey start key (inclusive)
 * @param toKey end key (inclusive)
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object,boolean)",2380,2383,"/**
 * Returns a tail map with keys >= fromKey, inclusive.
 * @param fromKey Key from which to start the tail map.
 * @param inclusive Whether fromKey is included in the map.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,transformValues,"com.google.common.collect.Maps:transformValues(java.util.NavigableMap,com.google.common.base.Function)",1903,1910,"/**
 * Transforms values in a NavigableMap using a Function.
 * @param fromMap Input NavigableMap
 * @param function Function to apply to each value
 * @return New NavigableMap with transformed values
 */
","* Returns a view of a navigable map where each value is transformed by a function. All other
   * properties of the map, such as iteration order, are left intact. For example, the code:
   *
   * {@snippet :
   * NavigableMap<String, Integer> map = Maps.newTreeMap();
   * map.put(""a"", 4);
   * map.put(""b"", 9);
   * Function<Integer, Double> sqrt = (Integer in) -> Math.sqrt((int) in);
   * NavigableMap<String, Double> transformed =
   *      Maps.transformNavigableValues(map, sqrt);
   * System.out.println(transformed);
   * }
   *
   * ... prints {@code {a=2.0, b=3.0}}.
   *
   * <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
   * removal operations, and these are reflected in the underlying map.
   *
   * <p>It's acceptable for the underlying map to contain null keys, and even null values provided
   * that the function is capable of accepting null input. The transformed map might contain null
   * values, if the function sometimes gives a null result.
   *
   * <p>The returned map is not thread-safe or serializable, even if the underlying map is.
   *
   * <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
   * to be a view, but it means that the function will be applied many times for bulk operations
   * like {@link Map#containsValue} and {@code Map.toString()}. For this to perform well, {@code
   * function} should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
   * view, copy the returned map into a new map of your choosing.
   *
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Tables.java,rowMap,com.google.common.collect.Tables$UnmodifiableRowSortedMap:rowMap(),656,660,"/**
 * Returns an unmodifiable sorted map of rows.
 * Key: Row key, Value: Unmodifiable map of column-value pairs.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,put,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:put(java.lang.Object,java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)",141,150,"/**
 * Puts a value into the table at the given row and column.
 * Merges if the cell exists, otherwise creates a new cell.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,removeMapping,"com.google.common.collect.StandardTable:removeMapping(java.lang.Object,java.lang.Object,java.lang.Object)",198,205,"/**
* Removes a mapping if it exists.
* @param rowKey Row key of the mapping.
* @param columnKey Column key of the mapping.
* @param value Value of the mapping.
* @return True if mapping was removed, false otherwise.
*/
","Remove a row key / column key / value mapping, if present.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/StandardTable.java,remove,com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet:remove(java.lang.Object),941,953,"/**
 * Removes the specified object (Entry) from the column.
 * @param obj The object to remove. Returns true if removed.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,computeToString,com.google.common.net.MediaType:computeToString(),1236,1250,"/**
 * Creates a string representation of the object, including type, subtype, and parameters.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,"com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap,java.lang.Object)",1593,1597,"/**
 * Wraps a NavigableMap with synchronization.
 * @param navigableMap The NavigableMap to synchronize.
 * @param mutex Synchronization mutex.
 * @return Synchronized NavigableMap.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:headMap(java.lang.Object),1308,1313,"/**
 * Returns a view of the sorted map with keys strictly less than toKey.
 * @param toKey the exclusive upper bound key
 * @return a SortedMap containing elements with keys < toKey
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedSortedMap:subMap(java.lang.Object,java.lang.Object)",1322,1327,"/**
 * Returns a sorted map containing entries between fromKey and toKey.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedSortedMap:tailMap(java.lang.Object),1329,1334,"/**
 * Returns a tail map with keys >= fromKey.
 * @param fromKey the key from which the tail map starts
 * @return a SortedMap containing tail elements
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedListMultimap,com.google.common.collect.Multimaps:synchronizedListMultimap(com.google.common.collect.ListMultimap),990,994,"/**
 * Returns a synchronized ListMultimap.
 * @param multimap The ListMultimap to synchronize.
 * @return A synchronized ListMultimap.
 */
","* Returns a synchronized (thread-safe) {@code ListMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,sortedSetMultimap,"com.google.common.collect.Synchronized:sortedSetMultimap(com.google.common.collect.SortedSetMultimap,java.lang.Object)",881,888,"/**
 * Returns a synchronized SortedSetMultimap or the original if already synchronized.
 * @param multimap The SortedSetMultimap to synchronize.
 * @param mutex Mutex object for synchronization.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSetMultimap,com.google.common.collect.Multimaps:synchronizedSetMultimap(com.google.common.collect.SetMultimap),906,910,"/**
 * Returns a synchronized view of the given SetMultimap.
 * @param multimap The SetMultimap to synchronize.
 * @return A synchronized SetMultimap.
 */
","* Returns a synchronized (thread-safe) {@code SetMultimap} backed by the specified multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,removeEdge,com.google.common.graph.StandardMutableGraph:removeEdge(com.google.common.graph.EndpointPair),70,74,"/**
 * Removes an edge between two nodes.
 * @param endpoints The pair of nodes connected by edge.
 * @return True if edge removed, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentNodes,com.google.common.graph.ImmutableNetwork:incidentNodes(java.lang.Object),135,141,"/**
 * Gets incident nodes for an edge.
 * @param edge The edge to examine.
 * @return EndpointPair containing the incident nodes.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharStreams.java,toString,com.google.common.io.CharStreams:toString(java.lang.Readable),162,164,"/**
 * Converts a Readable object to a String.
 * @param r The Readable object to convert.
 * @return The String representation of the Readable.
 */
","* Reads all characters from a {@link Readable} object into a {@link String}. Does not close the
   * {@code Readable}.
   *
   * @param r the object to read from
   * @return a string containing all the characters
   * @throws IOException if an I/O error occurs",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,catching,"com.google.common.util.concurrent.FluentFuture:catching(java.lang.Class,com.google.common.base.Function,java.util.concurrent.Executor)",190,195,"/**
 * Catches exceptions of a specific type and applies a fallback.
 * @param exceptionType Exception type to catch.
 * @param fallback Function to apply on exception.
 * @param executor Executor for fallback function.
 * @return A FluentFuture that handles the specified exception.
 */
","* Returns a {@code Future} whose result is taken from this {@code Future} or, if this {@code
   * Future} fails with the given {@code exceptionType}, from the result provided by the {@code
   * fallback}. {@link Function#apply} is not invoked until the primary input has failed, so if the
   * primary input succeeds, it is never invoked. If, during the invocation of {@code fallback}, an
   * exception is thrown, this exception is used as the result of the output {@code Future}.
   *
   * <p>Usage example:
   *
   * {@snippet :
   * // Falling back to a zero counter in case an exception happens when processing the RPC to fetch
   * // counters.
   * ListenableFuture<Integer> faultTolerantFuture =
   *     fetchCounters().catching(FetchException.class, x -> 0, directExecutor());
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#exceptionally}. It
   * can also serve some of the use cases of {@link java.util.concurrent.CompletableFuture#handle}
   * and {@link java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link
   * #transform}.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against the input's exception. ""The input's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@code input.get()} or, if {@code get()} throws a
   *     different kind of exception, that exception itself. To avoid hiding bugs and other
   *     unrecoverable errors, callers should prefer more specific types, avoiding {@code
   *     Throwable.class} in particular.
   * @param fallback the {@link Function} to be called if the input fails with the expected
   *     exception type. The function's argument is the input's exception. ""The input's exception""
   *     means the cause of the {@link ExecutionException} thrown by {@code this.get()} or, if
   *     {@code get()} throws a different kind of exception, that exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,cancel,com.google.common.util.concurrent.AbstractFuture$TrustedFuture:cancel(boolean),122,126,"/**
 * Cancels the execution of this task, possibly interrupting it.
 * @param mayInterruptIfRunning if true, interrupt if running
 * @return true if cancellation was requested, false otherwise
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,cancel,com.google.common.util.concurrent.Futures$InCompletionOrderFuture:cancel(boolean),954,970,"/**
 * Cancels the future, recording output cancellation if successful.
 * @param interruptIfRunning whether to interrupt running task
 * @return true if cancellation succeeded, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,recordInputCompletion,"com.google.common.util.concurrent.Futures$InCompletionOrderState:recordInputCompletion(com.google.common.collect.ImmutableList,int)",1019,1040,"/**
 * Records completion of an input future and notifies delegates.
 * @param delegates List of delegate futures.
 * @param inputFutureIndex Index of the completed future.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadFuture,"com.google.common.cache.LocalCache$LoadingValueReference:loadFuture(java.lang.Object,com.google.common.cache.CacheLoader)",3547,3575,"/**
 * Loads or reloads a value from the cache using the provided loader.
 * @param key Cache key.
 * @param loader Cache loader.
 * @return ListenableFuture holding the loaded value.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,transform,"com.google.common.util.concurrent.FluentFuture:transform(com.google.common.base.Function,java.util.concurrent.Executor)",373,376,"/**
 * Transforms the Future's value using the given function.
 * @param function Function to apply to the Future's value.
 * @param executor Executor for the function.
 * @return Transformed FluentFuture.
 */
","* Returns a new {@code Future} whose result is derived from the result of this {@code Future}. If
   * this input {@code Future} fails, the returned {@code Future} fails with the same exception (and
   * the function is not invoked). Example usage:
   *
   * {@snippet :
   * ListenableFuture<List<Row>> rowsFuture =
   *     queryFuture.transform(QueryResult::getRows, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>The returned {@code Future} attempts to keep its cancellation state in sync with that of the
   * input future. That is, if the returned {@code Future} is cancelled, it will attempt to cancel
   * the input, and if the input is cancelled, the returned {@code Future} will receive a callback
   * in which it will attempt to cancel itself.
   *
   * <p>An example use of this method is to convert a serializable object returned from an RPC into
   * a POJO.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#thenApply} and
   * {@link java.util.concurrent.CompletableFuture#thenApplyAsync}. It can also serve some of the
   * use cases of {@link java.util.concurrent.CompletableFuture#handle} and {@link
   * java.util.concurrent.CompletableFuture#handleAsync} when used along with {@link #catching}.
   *
   * @param function A Function to transform the results of this future to the results of the
   *     returned future.
   * @param executor Executor to run the function in.
   * @return A future that holds result of the transformation.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,incidentEdgeOrder,com.google.common.graph.AbstractValueGraph$1:incidentEdgeOrder(),101,104,"/**
 * Returns an ElementOrder indicating incident edges are unordered.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,directed,com.google.common.graph.GraphBuilder:directed(),82,84,"/**
 * Creates a GraphBuilder for a directed graph.
 * @return GraphBuilder instance for building a directed graph.
 */
",Returns a {@link GraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,undirected,com.google.common.graph.GraphBuilder:undirected(),87,89,"/**
 * Creates a GraphBuilder for undirected graphs.
 * Returns a new GraphBuilder instance.
 */
",Returns a {@link GraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,from,com.google.common.graph.GraphBuilder:from(com.google.common.graph.Graph),98,103,"/**
 * Creates a GraphBuilder from an existing Graph.
 * @param graph The graph to build from.
 * @return A GraphBuilder configured with graph properties.
 */
","* Returns a {@link GraphBuilder} initialized with all properties queryable from {@code graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Graph} interface,
   * such as {@link Graph#isDirected()}. Other properties, such as {@link #expectedNodeCount(int)},
   * are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,copy,com.google.common.graph.GraphBuilder:copy(),185,192,"/**
 * Creates a new GraphBuilder with the same configuration.
 * @return A new GraphBuilder instance.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,directed,com.google.common.graph.NetworkBuilder:directed(),87,89,"/**
 * Creates a directed network builder.
 * Returns a new NetworkBuilder for directed graph creation.
 */
",Returns a {@link NetworkBuilder} for building directed networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,undirected,com.google.common.graph.NetworkBuilder:undirected(),92,94,"/**
 * Creates an undirected network builder.
 * Returns a new NetworkBuilder instance for undirected graphs.
 */
",Returns a {@link NetworkBuilder} for building undirected networks.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,from,com.google.common.graph.NetworkBuilder:from(com.google.common.graph.Network),104,110,"/**
 * Creates a NetworkBuilder from an existing Network.
 * @param network The Network to copy configuration from.
 * @return A NetworkBuilder initialized with the Network's settings.
 */
","* Returns a {@link NetworkBuilder} initialized with all properties queryable from {@code
   * network}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link Network} interface,
   * such as {@link Network#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,directed,com.google.common.graph.ValueGraphBuilder:directed(),84,86,"/**
 * Creates a ValueGraphBuilder for a directed graph.
 * Returns a new ValueGraphBuilder configured for directed edges.
 */
",Returns a {@link ValueGraphBuilder} for building directed graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,undirected,com.google.common.graph.ValueGraphBuilder:undirected(),89,91,"/**
 * Creates a ValueGraphBuilder for an undirected graph.
 * Returns a new ValueGraphBuilder with undirected mode enabled.
 */
",Returns a {@link ValueGraphBuilder} for building undirected graphs.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,from,com.google.common.graph.ValueGraphBuilder:from(com.google.common.graph.ValueGraph),101,106,"/**
 * Creates a ValueGraphBuilder from an existing ValueGraph.
 * @param graph The ValueGraph to copy configuration from.
 * @return A ValueGraphBuilder initialized with graph's settings.
 */
","* Returns a {@link ValueGraphBuilder} initialized with all properties queryable from {@code
   * graph}.
   *
   * <p>The ""queryable"" properties are those that are exposed through the {@link ValueGraph}
   * interface, such as {@link ValueGraph#isDirected()}. Other properties, such as {@link
   * #expectedNodeCount(int)}, are not set in the new builder.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,copy,com.google.common.graph.ValueGraphBuilder:copy(),193,200,"/**
 * Creates a new ValueGraphBuilder with the same configuration.
 * @return A new ValueGraphBuilder instance.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,addListener,"com.google.common.util.concurrent.ServiceManager:addListener(com.google.common.util.concurrent.ServiceManager$Listener,java.util.concurrent.Executor)",259,261,"/**
 * Adds a listener to the state, executing on the provided executor.
 */","* Registers a {@link Listener} to be {@linkplain Executor#execute executed} on the given
   * executor. The listener will not have previous state changes replayed, so it is suggested that
   * listeners are added before any of the managed services are {@linkplain Service#startAsync
   * started}.
   *
   * <p>{@code addListener} guarantees execution ordering across calls to a given listener but not
   * across calls to multiple listeners. Specifically, a given listener will have its callbacks
   * invoked in the same order as the underlying service enters those states. Additionally, at most
   * one of the listener's callbacks will execute at once. However, multiple listeners' callbacks
   * may execute concurrently, and listeners may execute in an order different from the one in which
   * they were registered.
   *
   * <p>RuntimeExceptions thrown by a listener will be caught and logged. Any exception thrown
   * during {@code Executor.execute} (e.g., a {@code RejectedExecutionException}) will be caught and
   * logged.
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener ListenableFuture.addListener}
   * documentation.
   *
   * @param listener the listener to run when the manager changes state
   * @param executor the executor in which the listeners callback methods will be run.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(int),106,108,"/**
 * Constructs a CompactLinkedHashMap with an expected size.
 * @param expectedSize Initial capacity of the map.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(),56,58,"/**
 * Creates a new, empty CompactLinkedHashSet.
 * Returns an instance of CompactLinkedHashSet.
 */
",Creates an empty {@code CompactLinkedHashSet} instance.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,create,com.google.common.collect.CompactHashSet:create(java.util.Collection),96,101,"/**
 * Creates a CompactHashSet from a collection.
 * @param collection Collection to initialize the set with.
 * @return A new CompactHashSet containing elements from the collection.
 */
","* Creates a <i>mutable</i> {@code CompactHashSet} instance containing the elements of the given
   * collection in unspecified order.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactHashSet} containing those elements (minus duplicates)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashSet:createWithExpectedSize(int),97,100,"/**
 * Creates a new CompactLinkedHashSet with the specified expected size.
 */","* Creates a {@code CompactLinkedHashSet} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashSet} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator)",113,117,"/**
 * Constructs a TreeMultimap with custom key and value comparators.
 * @param keyComparator Comparator for keys.
 * @param valueComparator Comparator for values.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,newSortedSetMultimap,"com.google.common.collect.Multimaps:newSortedSetMultimap(java.util.Map,com.google.common.base.Supplier)",523,527,"/**
 * Creates a new SortedSetMultimap from a map and a sorted set factory.
 * @param map initial map of keys to sorted sets
 * @param factory factory for creating sorted sets
 * @return A new SortedSetMultimap instance.
 */
","* Creates a new {@code SortedSetMultimap} that uses the provided map and factory. It can generate
   * a multimap based on arbitrary {@link Map} and {@link SortedSet} classes.
   *
   * <p>The {@code factory}-generated and {@code map} classes determine the multimap iteration
   * order. They also specify the behavior of the {@code equals}, {@code hashCode}, and {@code
   * toString} methods for the multimap and its returned views. However, the multimap's {@code get}
   * method returns instances of a different class than {@code factory.get()} does.
   *
   * <p>The multimap is serializable if {@code map}, {@code factory}, the sets generated by {@code
   * factory}, and the multimap contents are all serializable.
   *
   * <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
   * {@code map} and the instances generated by {@code factory} are. Concurrent read operations will
   * work correctly. To allow concurrent update operations, wrap the multimap with a call to {@link
   * #synchronizedSortedSetMultimap}.
   *
   * <p>Call this method only when the simpler methods {@link TreeMultimap#create()} and {@link
   * TreeMultimap#create(Comparator, Comparator)} won't suffice.
   *
   * <p>Note: the multimap assumes complete ownership over of {@code map} and the sets returned by
   * {@code factory}. Those objects should not be manually updated and they should not use soft,
   * weak, or phantom references.
   *
   * @param map place to store the mapping from each key to its corresponding values
   * @param factory supplier of new, empty sorted sets that will each hold all values for a given
   *     key
   * @throws IllegalArgumentException if {@code map} is not empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,com.google.common.collect.ImmutableMultiset:toImmutableMultiset(),69,71,"/**
 * Returns a Collector that accumulates elements into an ImmutableMultiset.
 */","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableMultiset}. Elements iterate in order by the <i>first</i> appearance of that element in
   * encounter order.
   *
   * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,toImmutableMultiset,"com.google.common.collect.ImmutableMultiset:toImmutableMultiset(java.util.function.Function,java.util.function.ToIntFunction)",84,89,"/**
 * Creates a collector to build an ImmutableMultiset from elements.
 * @param elementFunction Extracts element from input.
 * @param countFunction Returns count for an element.
 */
","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableMultiset} whose
   * elements are the result of applying {@code elementFunction} to the inputs, with counts equal to
   * the result of applying {@code countFunction} to the inputs.
   *
   * <p>If the mapped elements contain duplicates (according to {@link Object#equals}), the first
   * occurrence in encounter order appears in the resulting multiset, with count equal to the sum of
   * the outputs of {@code countFunction.applyAsInt(t)} for each {@code t} mapped to that element.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,builder,com.google.common.collect.ImmutableMultiset:builder(),453,455,"/**
 * Creates a new Builder instance for constructing objects.
 * @return A new Builder object.
 */
","* Returns a new builder. The generated builder is equivalent to the builder created by the {@link
   * Builder} constructor.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Joiner.java,join,com.google.common.base.Joiner:join(java.lang.Object[]),257,261,"/**
 * Joins array elements into a single string.
 * @param parts Array of objects to join.
 * @return Joined string.
 */
","* Returns a string containing the string representation of each of {@code parts}, using the
   * previously configured separator between each.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,join,com.google.common.collect.FluentIterable:join(com.google.common.base.Joiner),819,821,"/**
 * Joins the elements of the collection using the provided Joiner.
 * @param joiner Joiner object to use for joining.
 * @return String containing the joined elements.
 */
","* Returns a {@link String} containing all of the elements of this fluent iterable joined with
   * {@code joiner}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code joiner.join(stream.iterator())}, or, if you are not
   * using any optional {@code Joiner} features, {@code
   * stream.collect(Collectors.joining(delimiter)}.
   *
   * @since 18.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,simplifyPath,com.google.common.io.Files:simplifyPath(java.lang.String),734,778,"/**
 * Simplifies a file path by resolving redundant components.
 * @param pathname The file path to simplify.
 * @return Simplified file path string.
 */
","* Returns the lexically cleaned form of the path name, <i>usually</i> (but not always) equivalent
   * to the original. The following heuristics are used:
   *
   * <ul>
   *   <li>empty string becomes .
   *   <li>. stays as .
   *   <li>fold out ./
   *   <li>fold out ../ when possible
   *   <li>collapse multiple slashes
   *   <li>delete trailing slashes (unless the path is just ""/"")
   * </ul>
   *
   * <p>These heuristics do not always match the behavior of the filesystem. In particular, consider
   * the path {@code a/../b}, which {@code simplifyPath} will change to {@code b}. If {@code a} is a
   * symlink to {@code x}, {@code a/../b} may refer to a sibling of {@code x}, rather than the
   * sibling of {@code a} referred to by {@code b}.
   *
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,toString,com.google.common.reflect.Types$ParameterizedTypeImpl:toString(),281,293,"/**
 * Returns a string representation of the method.
 * Includes owner type and argument names.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,doParseTrieToBuilder,"com.google.thirdparty.publicsuffix.TrieParser:doParseTrieToBuilder(java.util.Deque,java.lang.CharSequence,int,com.google.common.collect.ImmutableMap$Builder)",64,114,"/**
 * Parses an encoded trie to build a map of public suffix types.
 * @param stack  Deque for intermediate domain segments.
 * @param encoded Encoded trie string.
 * @param start  Starting index in the encoded string.
 * @param builder Builder for the public suffix type map.
 * @return Number of characters consumed from the encoded string.
 */
","* Parses a trie node and returns the number of characters consumed.
   *
   * @param stack The prefixes that precede the characters represented by this node. Each entry of
   *     the stack is in reverse order.
   * @param encoded The serialized trie.
   * @param start An index in the encoded serialized trie to begin reading characters from.
   * @param builder A map builder to which all entries will be added.
   * @return The number of characters consumed from {@code encoded}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMaker.java,makeMap,com.google.common.collect.MapMaker:makeMap(),283,288,"/**
 * Creates a concurrent map, either a ConcurrentHashMap or MapMakerInternalMap.
 * @return A ConcurrentMap implementation.
 */
","* Builds a thread-safe map. This method does not alter the state of this {@code MapMaker}
   * instance, so it can be invoked again to create multiple independent maps.
   *
   * <p>The bulk operations {@code putAll}, {@code equals}, and {@code clear} are not guaranteed to
   * be performed atomically on the returned map. Additionally, {@code size} and {@code
   * containsValue} are implemented as bulk read operations, and thus may fail to observe concurrent
   * writes.
   *
   * @return a serializable concurrent map having the requested features",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,<init>,com.google.common.collect.Interners$InternerImpl:<init>(com.google.common.collect.MapMaker),123,126,"/**
 * Constructs an InternerImpl with the given MapMaker.
 * @param mapMaker Configures the underlying map.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,transformAndConcat,com.google.common.collect.FluentIterable:transformAndConcat(com.google.common.base.Function),497,500,"/**
 * Transforms elements and concatenates the resulting iterables.
 * @param function Function to transform each element.
 * @return A FluentIterable containing transformed elements.
 */
","* Applies {@code function} to each element of this fluent iterable and returns a fluent iterable
   * with the concatenated combination of results. {@code function} returns an Iterable of results.
   *
   * <p>The returned fluent iterable's iterator supports {@code remove()} if this function-returned
   * iterables' iterator does. After a successful {@code remove()} call, the returned fluent
   * iterable no longer contains the corresponding element.
   *
   * <p><b>{@code Stream} equivalent:</b> {@link Stream#flatMap} (using a function that produces
   * streams, not iterables).
   *
   * @since 13.0 (required {@code Function<E, Iterable<T>>} until 14.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterables.java,concat,com.google.common.collect.Iterables:concat(java.lang.Iterable),483,486,"/**
 * Concatenates multiple iterables into a single iterable.
 * @param inputs Iterables to concatenate.
 * @return A new iterable containing all elements.
 */
","* Combines multiple iterables into a single iterable. The returned iterable has an iterator that
   * traverses the elements of each iterable in {@code inputs}. The input iterators are not polled
   * until necessary.
   *
   * <p>The returned iterable's iterator supports {@code remove()} when the corresponding input
   * iterator supports it.
   *
   * <p><b>Java 8+ users:</b> The {@code Stream} equivalent of this method is {@code
   * Streams.concat(...)}.
   *
   * @throws NullPointerException if any of the provided iterables is null",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture:get(long,java.util.concurrent.TimeUnit)",233,239,"/**
 * Retrieves a value after a specified timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit for the timeout.
 * @return The retrieved value.
 */
","* {@inheritDoc}
   *
   * <p>The default {@link AbstractFuture} implementation throws {@code InterruptedException} if the
   * current thread is interrupted during the call, even if the value is already available.
   *
   * @throws CancellationException {@inheritDoc}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNodeInternal,com.google.common.graph.StandardMutableValueGraph:addNodeInternal(java.lang.Object),78,83,"/**
 * Adds a new node to the graph and returns its connections.
 * @param node The node to add.
 * @return GraphConnections object for the new node.
 */
","* Adds {@code node} to the graph and returns the associated {@link GraphConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterIf,"com.google.common.util.concurrent.Monitor:enterIf(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",699,701,"/**
 * Attempts to enter the guard within the specified duration.
 * @param guard The guard to enter.
 * @param time Duration to wait, saturated to fit in nanos.
 */
","* Enters this monitor if the guard is satisfied. Blocks at most the given time acquiring the
   * lock, but does not wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,valuesSpliterator,com.google.common.collect.ArrayTable:valuesSpliterator(),801,804,"/**
 * Returns a spliterator over the values of this map.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableDoubleArray.java,equals,com.google.common.primitives.ImmutableDoubleArray$AsList:equals(java.lang.Object),530,552,"/**
* Checks if this AsList is equal to another list.
* Compares parent arrays for equality.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableIntArray.java,equals,com.google.common.primitives.ImmutableIntArray$AsList:equals(java.lang.Object),525,547,"/**
* Checks if this AsList is equal to another list.
* Compares parent lists; returns false if sizes differ.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/ImmutableLongArray.java,equals,com.google.common.primitives.ImmutableLongArray$AsList:equals(java.lang.Object),527,549,"/**
* Checks if this list is equal to another list.
* Compares parent lists; returns false if sizes differ.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$1:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts a string to a new format based on the provided format.
 * @param format CaseFormat to apply
 * @param s string to convert
 * @return converted string
 */
",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$2:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts a string to a different case format.
 * @param format CaseFormat enum specifying the target format
 * @param s input string to convert
 * @return converted string
 */
",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,convert,"com.google.common.base.CaseFormat$5:convert(com.google.common.base.CaseFormat,java.lang.String)",136,155,"/**
 * Converts a string to a different case format.
 * @param format CaseFormat enum defining conversion rules.
 * @param s String to convert.
 * @return Converted string.
 */
",Enum values can override for performance reasons.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,to,"com.google.common.base.CaseFormat:to(com.google.common.base.CaseFormat,java.lang.String)",129,133,"/**
 * Converts a string to a specified case format.
 * @param format Target CaseFormat.
 * @param str String to convert.
 * @return Converted string.
 */
","* Converts the specified {@code String str} from this format to the specified {@code format}. A
   * ""best effort"" approach is taken; if {@code str} does not conform to the assumed format, then
   * the behavior of this method is undefined but we make a reasonable effort at converting anyway.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesNoneOf,com.google.common.base.CharMatcher:matchesNoneOf(java.lang.CharSequence),530,532,"/**
 * Checks if the CharSequence does not contain the sequence.
 * @param sequence the CharSequence to search for
 * @return true if the sequence is not found, false otherwise
 */
","* Returns {@code true} if a character sequence contains no matching BMP characters. Equivalent to
   * {@code !matchesAnyOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches no characters in the sequence, including when the
   *     sequence is empty",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,removeFrom,com.google.common.base.CharMatcher:removeFrom(java.lang.CharSequence),618,645,"/**
 * Removes the leading characters that match the regex.
 * @param sequence CharSequence to remove from
 * @return Modified string with leading characters removed
 */
","* Returns a string containing all non-matching characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').removeFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""bzr""}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,char)",680,694,"/**
 * Replaces characters in sequence with replacement char.
 * @param sequence CharSequence to modify
 * @param replacement Char to replace matching chars with
 * @return Modified string
 */
","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement character. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""radar"", 'o')
   * }
   *
   * ... returns {@code ""rodor""}.
   *
   * <p>The default implementation uses {@link #indexIn(CharSequence)} to find the first matching
   * character, then iterates the remainder of the sequence calling {@link #matches(char)} for each
   * character.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the character to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,consumeToken,com.google.common.net.MediaType$Tokenizer:consumeToken(com.google.common.base.CharMatcher),1160,1165,"/**
 * Consumes a token from the input based on the provided matcher.
 * @param matcher CharMatcher to use for token identification.
 * @return The consumed token string.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getEmbeddedIPv4ClientAddress,com.google.common.net.InetAddresses:getEmbeddedIPv4ClientAddress(java.net.Inet6Address),918,932,"/**
 * Extracts an embedded IPv4 address from an Inet6Address.
 * @param ip The Inet6Address to check.
 * @return The embedded Inet4Address or null if not found.
 */
","* Examines the Inet6Address to extract the embedded IPv4 client address if the InetAddress is an
   * IPv6 address of one of the specified address types that contain an embedded IPv4 address.
   *
   * <p>NOTE: ISATAP addresses are explicitly excluded from this method due to their trivial
   * spoofability. With other transition addresses spoofing involves (at least) infection of one's
   * BGP routing table.
   *
   * @param ip {@link Inet6Address} to be examined for embedded IPv4 client address
   * @return {@link Inet4Address} of embedded IPv4 client address
   * @throws IllegalArgumentException if the argument does not have a valid embedded IPv4 address",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHasher.java,putString,"com.google.common.hash.AbstractHasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",57,61,"/**
 * Puts a string into the hasher using the given charset.
 * @param charSequence String to hash
 * @param charset Charset to use for encoding
 * @return Hasher object for chaining
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.Hasher:putBytes(byte[]),62,64,"/**
 * Puts the given bytes into the hasher.
 * @param bytes The bytes to be added to the hasher.
 * @return The hasher object.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,"com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[],int,int)",66,68,"/**
 * Adds bytes to the hasher.
 * @param bytes The bytes to add.
 * @param off Offset within the bytes array.
 * @param len Number of bytes to add.
 * @return The hasher object.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,"com.google.common.hash.AbstractHashFunction:hashBytes(byte[],int,int)",64,68,"/**
 * Calculates the hash code for a byte array segment.
 * @param input Array to hash, @param off Start index, @param len Length
 * @return HashCode object representing the hash.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingInputStream.java,read,"com.google.common.hash.HashingInputStream:read(byte[],int,int)",64,72,"/**
 * Reads bytes from the input stream and updates the hasher.
 * @param bytes buffer to store read bytes
 * @param off offset in the buffer
 * @param len maximum number of bytes to read
 * @return Number of bytes read, or -1 if EOF.
 */
","* Reads the specified bytes of data from the underlying input stream and updates the hasher with
   * the bytes read.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/HashingOutputStream.java,write,"com.google.common.hash.HashingOutputStream:write(byte[],int,int)",55,59,"/**
 * Writes the specified byte array to the output stream and updates the hasher.
 * @param bytes The byte array to write.
 * @param off Offset from the beginning of the array.
 * @param len Number of bytes to write.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteStreams.java,readFully,"com.google.common.io.ByteStreams:readFully(java.io.InputStream,byte[])",797,799,"/**
 * Reads all bytes from the input stream into the provided byte array.
 * @param in The InputStream to read from.
 * @param b The byte array to fill.
 * @throws IOException if an I/O error occurs.
 */
","* Attempts to read enough bytes from the stream to fill the given byte array, with the same
   * behavior as {@link DataInput#readFully(byte[])}. Does not close the stream.
   *
   * @param in the input stream to read from.
   * @param b the buffer into which the data is read.
   * @throws EOFException if this stream reaches the end before reading all the bytes.
   * @throws IOException if an I/O error occurs.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,"com.google.common.io.LittleEndianDataInputStream:readFully(byte[],int,int)",68,71,"/**
 * Reads data fully into the provided byte array.
 * @param b buffer to read into
 * @param off offset in the buffer
 * @param len number of bytes to read
 * @throws IOException if an I/O error occurs
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Booleans.java,rotate,"com.google.common.primitives.Booleans:rotate(boolean[],int)",574,576,"/**
* Rotates elements in a boolean array by a specified distance.
*/
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Booleans.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Bytes.java,rotate,"com.google.common.primitives.Bytes:rotate(byte[],int)",425,427,"/**
 * Rotates elements in a byte array by a specified distance.
 * @param array The byte array to rotate.
 * @param distance The number of positions to rotate.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is somewhat faster.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/SignedBytes.java,sortDescending,com.google.common.primitives.SignedBytes:sortDescending(byte[]),200,203,"/**
 * Sorts the byte array in descending order.
 * @param array The byte array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,sortDescending,com.google.common.primitives.Chars:sortDescending(char[]),456,459,"/**
 * Sorts a char array in descending order.
 * @param array The char array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Chars.java,rotate,"com.google.common.primitives.Chars:rotate(char[],int)",515,517,"/**
 * Rotates an array by a specified distance.
 * @param array The array to rotate.
 * @param distance The distance to rotate by.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Chars.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,sortDescending,com.google.common.primitives.Doubles:sortDescending(double[]),427,430,"/**
 * Sorts the input array in descending order.
 * @param array The array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Double#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Doubles.java,rotate,"com.google.common.primitives.Doubles:rotate(double[],int)",489,491,"/**
 * Rotates an array by a specified distance.
 * @param array The array to rotate.
 * @param distance The number of positions to rotate.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Bytes.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,sortDescending,com.google.common.primitives.Floats:sortDescending(float[]),424,427,"/**
* Sorts an array of floats in descending order.
* @param array The array to be sorted.
*/
","* Sorts the elements of {@code array} in descending order.
   *
   * <p>Note that this method uses the total order imposed by {@link Float#compare}, which treats
   * all NaN values as equal and 0.0 as greater than -0.0.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Floats.java,rotate,"com.google.common.primitives.Floats:rotate(float[],int)",486,488,"/**
 * Rotates an array by a specified distance.
 * @param array The array to rotate.
 * @param distance The number of positions to rotate.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Floats.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,sortDescending,com.google.common.primitives.Ints:sortDescending(int[]),489,492,"/**
 * Sorts an integer array in descending order.
 * @param array The array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Ints.java,rotate,"com.google.common.primitives.Ints:rotate(int[],int)",548,550,"/**
 * Rotates an array to the right by a specified distance.
 * @param array The array to rotate.
 * @param distance The number of positions to rotate.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Ints.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,sortDescending,com.google.common.primitives.Longs:sortDescending(long[]),567,570,"/**
 * Sorts the input array in descending order.
 * @param array The array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Longs.java,rotate,"com.google.common.primitives.Longs:rotate(long[],int)",626,628,"/**
 * Rotates an array to the right by a specified distance.
 * @param array The array to rotate.
 * @param distance The number of positions to rotate.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Longs.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,sortDescending,com.google.common.primitives.Shorts:sortDescending(short[]),479,482,"/**
 * Sorts a short array in descending order.
 * @param array The short array to be sorted.
 */
","* Sorts the elements of {@code array} in descending order.
   *
   * @since 23.1",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/Shorts.java,rotate,"com.google.common.primitives.Shorts:rotate(short[],int)",538,540,"/**
 * Rotates the array elements by a given distance.
 * @param array The array to rotate.
 * @param distance The number of positions to rotate.
 */
","* Performs a right rotation of {@code array} of ""distance"" places, so that the first element is
   * moved to index ""distance"", and the element at index {@code i} ends up at index {@code (distance
   * + i) mod array.length}. This is equivalent to {@code Collections.rotate(Shorts.asList(array),
   * distance)}, but is considerably faster and avoids allocation and garbage collection.
   *
   * <p>The provided ""distance"" may be negative, which will rotate left.
   *
   * @since 32.0.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,delegate,com.google.common.collect.ForwardingCollection:delegate(),56,57,"/**
 * Returns the delegate collection for this collection.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Splitter.java,withKeyValueSeparator,com.google.common.base.Splitter:withKeyValueSeparator(java.lang.String),432,434,"/**
 * Sets the key-value separator.
 * @param separator Separator string for key-value pairs.
 * @return Chainable splitter with the specified separator.
 */
","* Returns a {@code MapSplitter} which splits entries based on this splitter, and splits entries
   * into keys and values using the specified separator.
   *
   * @since 10.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,com.google.common.util.concurrent.RateLimiter:create(double),117,132,"/**
 * Creates a RateLimiter with the specified permits per second.
 * @param permitsPerSecond the rate of permits per second
 * @return a RateLimiter instance
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,long,java.util.concurrent.TimeUnit)",193,198,"/**
 * Creates a RateLimiter with specified permits/second, warmup, and unit.
 * @param permitsPerSecond permits per second
 * @param warmupPeriod warmup period in the given unit
 * @param unit time unit for the warmup period
 * @return a RateLimiter instance
 */
","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @param unit the time unit of the warmupPeriod argument
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,writeReplace,com.google.common.cache.LocalCache$LocalLoadingCache:writeReplace(),4979,4982,"/**
 * Returns a LoadingSerializationProxy for serialization.
 * Used to ensure proper cache initialization on deserialization.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,keys,com.google.common.collect.Multimaps$UnmodifiableMultimap:keys(),732,739,"/**
 * Returns a multiset containing the keys in this multiset.
 * Returns an unmodifiable multiset view.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,unmodifiableSortedMultiset,com.google.common.collect.Multisets:unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset),244,248,"/**
 * Returns an unmodifiable view of the given sorted multiset.
 * @param sortedMultiset the sorted multiset to wrap
 * @return an unmodifiable sorted multiset
 */
","* Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned
   * multiset ""read through"" to the specified multiset, and attempts to modify the returned multiset
   * result in an {@link UnsupportedOperationException}.
   *
   * <p>The returned multiset will be serializable if the specified multiset is serializable.
   *
   * @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated
   * @return an unmodifiable view of the multiset
   * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,descendingMultiset,com.google.common.collect.UnmodifiableSortedMultiset:descendingMultiset(),66,75,"/**
 * Returns a descending multiset view of this sorted multiset.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyListMultimap.java,get,com.google.common.collect.FilteredKeyListMultimap:get(java.lang.Object),41,44,"/**
 * Retrieves a list associated with the given key, from the parent map.
 * @param key The key to retrieve the list for.
 * @return The list associated with the key, or null.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeySetMultimap.java,get,com.google.common.collect.FilteredKeySetMultimap:get(java.lang.Object),43,46,"/**
 * Retrieves the set associated with the given key, from the parent map.
 * @param key The key to retrieve the set for.
 * @return The set associated with the key, or null.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$DescendingSet:<init>(java.util.NavigableSet),2151,2153,"/**
 * Initializes a DescendingSet with a forward NavigableSet.
 * @param forward The NavigableSet to use for forward traversal.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$UnmodifiableNavigableSet:descendingSet(),2027,2035,"/**
 * Returns a descending view of this set.
 * Returns an unmodifiable view.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,unmodifiableNavigableSet,com.google.common.collect.Sets:unmodifiableNavigableSet(java.util.NavigableSet),1950,1956,"/**
 * Returns an unmodifiable NavigableSet view of the given set.
 * Returns the set if already unmodifiable.
 */
","* Returns an unmodifiable view of the specified navigable set. This method allows modules to
   * provide users with ""read-only"" access to internal navigable sets. Query operations on the
   * returned set ""read through"" to the specified set, and attempts to modify the returned set,
   * whether direct or via its collection views, result in an {@code UnsupportedOperationException}.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#unmodifiableNavigableSet}.
   *
   * @param set the navigable set for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified navigable set
   * @since 12.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,entries,com.google.common.collect.Multimaps$UnmodifiableSetMultimap:entries(),843,846,"/**
* Returns an unmodifiable set view of the map's entries.
*/",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableEntries,com.google.common.collect.Multimaps:unmodifiableEntries(java.util.Collection),1058,1064,"/**
 * Returns an unmodifiable collection of entries.
 * Handles Set types for optimized unmodifiable view.
 */
","* Returns an unmodifiable view of the specified collection of entries. The {@link Entry#setValue}
   * operation throws an {@link UnsupportedOperationException}. If the specified collection is a
   * {@code Set}, the returned collection is also a {@code Set}.
   *
   * @param entries the entries for which to return an unmodifiable view
   * @return an unmodifiable view of the entries",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,writeReplace,com.google.common.collect.MapMakerInternalMap:writeReplace(),2791,2799,"/**
 * Returns a replacement for this map when serialized.
 * Creates a SerializationProxy for custom serialization.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3612,3620,"/**
 * Returns a submap with keys between fromKey and toKey (inclusive/exclusive).
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object,boolean)",3627,3630,"/**
 * Returns a view of the map containing entries with keys less than toKey.
 * @param toKey Exclusive key for the head map.
 * @param inclusive Whether to include toKey.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object,boolean)",3637,3640,"/**
 * Returns a tail map with keys >= fromKey, inclusive.
 * @param fromKey Key from which to start the tail map.
 * @param inclusive Whether fromKey is included in the map.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableSortedSetMultimap,com.google.common.collect.Multimaps:unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap),974,980,"/**
 * Returns an unmodifiable view of the given SortedSetMultimap.
 * Returns the delegate if already unmodifiable.
 */
","* Returns an unmodifiable view of the specified {@code SortedSetMultimap}. Query operations on
   * the returned multimap ""read through"" to the specified multimap, and attempts to modify the
   * returned multimap, either directly or through the multimap's views, result in an {@code
   * UnsupportedOperationException}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param delegate the multimap for which an unmodifiable view is to be returned
   * @return an unmodifiable view of the specified multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",549,555,"/**
 * Schedules a task for execution after a specified delay.
 * @param command Runnable to execute
 * @param delay Delay before execution
 * @param unit Time unit of the delay
 * @return ListenableScheduledFuture representing the scheduled task
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,schedule,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)",557,563,"/**
 * Schedules a Callable to run after a delay.
 * @param callable The Callable to execute.
 * @param delay The delay before execution.
 * @param unit The time unit of the delay.
 * @return ListenableScheduledFuture wrapping the task.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleAtFixedRate,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",565,571,"/**
 * Schedules a task to run at a fixed rate.
 * @param command The task to execute.
 * @param initialDelay Initial delay before first execution.
 * @param period Period between executions.
 * @param unit Time unit for initialDelay and period.
 * @return ListenableScheduledFuture for task management.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,scheduleWithFixedDelay,"com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator:scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",573,580,"/**
 * Schedules a task to run with a fixed delay between executions.
 * @param command Runnable to execute
 * @param initialDelay Initial delay before first execution
 * @param delay Delay between executions
 * @param unit Time unit for initialDelay and delay
 * @return ListenableScheduledFuture representing the scheduled task
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,eventuallyClosing,"com.google.common.util.concurrent.ClosingFuture:eventuallyClosing(com.google.common.util.concurrent.ListenableFuture,java.util.concurrent.Executor)",475,493,"/**
 * Creates a ClosingFuture that closes the AutoCloseable on success.
 * @param future The future wrapping the AutoCloseable.
 * @param closingExecutor Executor for closing the resource.
 * @return A ClosingFuture that manages closing.
 */
","* Starts a {@link ClosingFuture} pipeline with a {@link ListenableFuture}.
   *
   * <p>If {@code future} succeeds, its value will be closed (using {@code closingExecutor)}) when
   * the pipeline is done, even if the pipeline is canceled or fails.
   *
   * <p>Cancelling the pipeline will not cancel {@code future}, so that the pipeline can access its
   * value in order to close it.
   *
   * @param future the future to create the {@code ClosingFuture} from. For discussion of the
   *     future's result type {@code C}, see {@link DeferredCloser#eventuallyClose(Object,
   *     Executor)}.
   * @param closingExecutor the future's result will be closed on this executor
   * @deprecated Creating {@link Future}s of closeable types is dangerous in general because the
   *     underlying value may never be closed if the {@link Future} is canceled after its operation
   *     begins. Consider replacing code that creates {@link ListenableFuture}s of closeable types,
   *     including those that pass them to this method, with {@link #submit(ClosingCallable,
   *     Executor)} in order to ensure that resources do not leak. Or, to start a pipeline with a
   *     {@link ListenableFuture} that doesn't create values that should be closed, use {@link
   *     ClosingFuture#from}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,addCallback,"com.google.common.util.concurrent.FluentFuture:addCallback(com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)",415,417,"/**
* Adds a callback to be executed when the Future completes.
* @param callback Callback to run on completion.
* @param executor Executor for the callback execution.
*/
","* Registers separate success and failure callbacks to be run when this {@code Future}'s
   * computation is {@linkplain java.util.concurrent.Future#isDone() complete} or, if the
   * computation is already complete, immediately.
   *
   * <p>The callback is run on {@code executor}. There is no guaranteed ordering of execution of
   * callbacks, but any callback added through this method is guaranteed to be called once the
   * computation is complete.
   *
   * <p>Example:
   *
   * {@snippet :
   * future.addCallback(
   *     new FutureCallback<QueryResult>() {
   *       public void onSuccess(QueryResult result) {
   *         storeInCache(result);
   *       }
   *       public void onFailure(Throwable t) {
   *         reportError(t);
   *       }
   *     }, executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link #addListener} documentation. All its warnings about heavyweight
   * listeners are also applicable to heavyweight callbacks passed to this method.
   *
   * <p>For a more general interface to attach a completion listener, see {@link #addListener}.
   *
   * <p>This method is similar to {@link java.util.concurrent.CompletableFuture#whenComplete} and
   * {@link java.util.concurrent.CompletableFuture#whenCompleteAsync}. It also serves the use case
   * of {@link java.util.concurrent.CompletableFuture#thenAccept} and {@link
   * java.util.concurrent.CompletableFuture#thenAcceptAsync}.
   *
   * @param callback The callback to invoke when this {@code Future} is completed.
   * @param executor The executor to run {@code callback} when the future completes.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,"com.google.common.cache.LocalCache$LocalLoadingCache:<init>(com.google.common.cache.CacheBuilder,com.google.common.cache.CacheLoader)",4938,4941,"/**
 * Constructs a LocalLoadingCache with a CacheBuilder and CacheLoader.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,<init>,com.google.common.cache.LocalCache$LocalManualCache:<init>(com.google.common.cache.CacheBuilder),4838,4840,"/**
 * Constructs a LocalManualCache using the provided CacheBuilder.
 * @param builder CacheBuilder to configure the cache.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,inDegree,com.google.common.graph.AbstractValueGraph$1:inDegree(java.lang.Object),147,150,"/**
 * Calculates the in-degree of a node.
 * Uses predecessors for directed graphs, degree otherwise.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractBaseGraph.java,outDegree,com.google.common.graph.AbstractValueGraph$1:outDegree(java.lang.Object),152,155,"/**
 * Calculates the out-degree of a node.
 * Returns successors size if directed, else uses degree().
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,"com.google.common.collect.EnumBiMap:create(java.lang.Class,java.lang.Class)",69,72,"/**
 * Creates a new EnumBiMap with specified key and value types.
 * @param keyType Key enum type.
 * @param valueType Value enum type.
 * @return New EnumBiMap instance.
 */
","* Returns a new, empty {@code EnumBiMap} using the specified key and value types.
   *
   * @param keyType the key type
   * @param valueType the value type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.lang.Class),56,59,"/**
 * Creates a new EnumHashBiMap with the given key type.
 * @param keyType The enum class to use as keys.
 * @return A new EnumHashBiMap instance.
 */
","* Returns a new, empty {@code EnumHashBiMap} using the specified key type.
   *
   * @param keyType the key type",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,create,com.google.common.collect.TreeMultiset:create(java.lang.Iterable),110,115,"/**
 * Creates a TreeMultiset from an iterable of elements.
 * @param elements iterable containing elements to add
 * @return A new TreeMultiset containing the elements.
 */
","* Creates an empty multiset containing the given initial elements, sorted according to the
   * elements' natural order.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * <p>The type specification is {@code <E extends Comparable>}, instead of the more specific
   * {@code <E extends Comparable<? super E>>}, to support classes defined without generics.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,<init>,com.google.common.collect.ImmutableSortedMultiset$Builder:<init>(java.util.Comparator),461,463,"/**
 * Constructs a new Builder using the provided comparator.
 * @param comparator Comparator for element ordering.
 */
","* Creates a new builder. The returned builder is equivalent to the builder generated by {@link
     * ImmutableSortedMultiset#orderedBy(Comparator)}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the given map to this map.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractBiMap.java,putAll,com.google.common.collect.EnumHashBiMap:putAll(java.util.Map),187,192,"/**
* Adds all entries from the given map to this map.
* @param map the map whose entries are added
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,replaceValues,"com.google.common.collect.AbstractSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",118,122,"/**
 * Replaces values for a key with values from an iterable.
 * @param key The key to replace values for.
 * @param values Iterable of new values.
 * @return SortedSet of values (cast from superclass).
 */
","* Stores a collection of values with the same key, replacing any existing values for that key.
   * The returned collection is immutable.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link Collection} specified in the {@link
   * Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,replaceValues,"com.google.common.collect.SetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",86,88,"/**
 * Replaces values for a key with the provided iterable.
 * @param key The key to replace values for.
 * @param values Iterable of new values.
 * @return The replaced values.
 */
","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultiset.java,create,com.google.common.collect.HashMultiset:create(java.lang.Iterable),61,66,"/**
 * Creates a HashMultiset from an iterable of elements.
 * @param elements iterable containing elements to add
 * @return A HashMultiset containing the elements.
 */
","* Creates a new {@code HashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,"com.google.common.collect.ArrayListMultimap:create(int,int)",95,98,"/**
 * Creates a new ArrayListMultimap with specified expected sizes.
 * @param expectedKeys Initial expected number of keys.
 * @param expectedValuesPerKey Initial expected values per key.
 */
","* Constructs an empty {@code ArrayListMultimap} with enough capacity to hold the specified
   * numbers of keys and values without resizing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(),114,116,"/**
 * Constructs a new ArrayListMultimap with default key/value counts.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,<init>,com.google.common.collect.ArrayListMultimap:<init>(com.google.common.collect.Multimap),124,131,"/**
 * Copies entries from another multimap.
 * @param multimap Multimap to copy from.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,"com.google.common.collect.HashMultimap:create(int,int)",84,87,"/**
 * Creates a new HashMultimap with initial capacity estimates.
 * @param expectedKeys Expected number of keys.
 * @param expectedValuesPerKey Expected values per key.
 */
","* Constructs an empty {@code HashMultimap} with enough capacity to hold the specified numbers of
   * keys and values without rehashing.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()}, which
   * provides more control over the underlying data structure.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,<init>,com.google.common.collect.HashMultimap:<init>(),105,107,"/**
 * Constructs a new HashMultimap with default initial capacity.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(com.google.common.collect.Multimap),100,103,"/**
 * Creates a HashMultimap from a given Multimap.
 * @param multimap The Multimap to copy.
 * @return A new HashMultimap containing the same entries.
 */
","* Constructs a {@code HashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(int),163,166,"/**
 * Creates a new LinkedListMultimap with the specified expected keys.
 */","* Constructs an empty {@code LinkedListMultimap} with enough capacity to hold the specified
   * number of keys without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @throws IllegalArgumentException if {@code expectedKeys} is negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(),180,182,"/**
 * Constructs a LinkedListMultimap with an initial capacity of 12.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,<init>,com.google.common.collect.LinkedListMultimap:<init>(com.google.common.collect.Multimap),188,191,"/**
 * Creates a LinkedListMultimap from another Multimap.
 * @param multimap The Multimap to copy from.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultiset.java,create,com.google.common.collect.LinkedHashMultiset:create(java.lang.Iterable),69,74,"/**
 * Creates a LinkedHashMultiset containing elements from the iterable.
 * @param elements Iterable of elements to add to the multiset.
 * @return A new LinkedHashMultiset.
 */
","* Creates a new {@code LinkedHashMultiset} containing the specified elements.
   *
   * <p>This implementation is highly efficient when {@code elements} is itself a {@link Multiset}.
   *
   * @param elements the elements that the multiset should contain",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(),91,94,"/**
 * Creates a new LinkedHashMultimap with default capacities.
 * Returns the newly created multimap instance.
 */
","Creates a new, empty {@code LinkedHashMultimap} with the default initial capacities.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,"com.google.common.collect.LinkedHashMultimap:create(int,int)",105,109,"/**
 * Creates a new LinkedHashMultimap with specified capacities.
 * @param expectedKeys Initial capacity for keys.
 * @param expectedValuesPerKey Initial capacity per key.
 * @return A new LinkedHashMultimap instance.
 */
","* Constructs an empty {@code LinkedHashMultimap} with enough capacity to hold the specified
   * numbers of keys and values without rehashing.
   *
   * @param expectedKeys the expected number of distinct keys
   * @param expectedValuesPerKey the expected average number of values per key
   * @throws IllegalArgumentException if {@code expectedKeys} or {@code expectedValuesPerKey} is
   *     negative",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,<init>,com.google.common.graph.StandardMutableNetwork:<init>(com.google.common.graph.NetworkBuilder),47,49,"/**
 * Constructs a StandardMutableNetwork using the provided builder.
 */
",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,<init>,com.google.common.graph.StandardMutableValueGraph:<init>(com.google.common.graph.AbstractGraphBuilder),50,53,"/**
 * Constructs a StandardMutableValueGraph using the provided builder.
 * @param builder Graph builder for initializing the graph.
 */
",Constructs a mutable graph with the properties specified in {@code builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,put,com.google.common.collect.ImmutableTable$Builder:put(com.google.common.collect.Table$Cell),230,243,"/**
* Adds a cell to the builder. Handles immutable cells differently.
* @param cell The cell to add.
* @return This builder for chaining.
*/
","* Adds the given {@code cell} to the table, making it immutable if necessary. Duplicate key
     * pairs are not allowed and will cause {@link #build} to fail.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,put,com.google.common.collect.ImmutableBiMap$Builder:put(java.util.Map$Entry),368,373,"/**
 * Adds the given entry to the map and returns the builder.
 */","* Adds the given {@code entry} to the bimap. Duplicate keys or values are not allowed, and will
     * cause {@link #build} to fail.
     *
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.lang.Iterable),492,501,"/**
 * Adds all entries from the given iterable to the map.
 * @param entries Iterable of entries to add.
 * @return This builder.
 */
","* Adds all of the given entries to the built map. If the same key is put more than once, {@link
     * #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep the last value put for
     * that key.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,put,com.google.common.collect.ImmutableSortedMap$Builder:put(java.util.Map$Entry),642,647,"/**
* Adds an entry to the map and returns the builder.
* @param entry The entry to add.
* @return This builder instance.
*/
","* Adds the given {@code entry} to the map, making it immutable if necessary. Duplicate keys,
     * according to the comparator (which might be the keys' natural order), are not allowed, and
     * will cause {@link #build} to fail.
     *
     * @since 11.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,descendingSet,com.google.common.collect.Sets$FilteredNavigableSet:descendingSet(),1386,1389,"/**
 * Returns a descending set, filtered by the predicate.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$FilteredNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1402,1410,"/**
 * Returns a subset of elements between fromElement and toElement.
 * @param fromElement start element (inclusive or exclusive)
 * @param toElement end element (inclusive or exclusive)
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$FilteredNavigableSet:headSet(java.lang.Object,boolean)",1412,1415,"/**
 * Returns a head set of the sorted set, up to `toElement`.
 * @param toElement Element to end the head set (exclusive/inclusive).
 * @param inclusive Whether to include `toElement`.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$FilteredNavigableSet:tailSet(java.lang.Object,boolean)",1417,1420,"/**
 * Returns a tail set from the specified element, inclusive.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,filterCollection,"com.google.common.collect.FilteredEntryMultimap:filterCollection(java.util.Collection,com.google.common.base.Predicate)",92,99,"/**
 * Filters a collection based on the provided predicate.
 * @param collection Collection to filter.
 * @param predicate Predicate to apply to each element.
 * @return Filtered collection.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createKeySet,com.google.common.collect.FilteredKeyMultimap:createKeySet(),98,101,"/**
 * Creates a key set filtered by the key predicate.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryMap:<init>(java.util.Map,com.google.common.base.Predicate)",3010,3013,"/**
 * Initializes a FilteredEntryMap with a map and a predicate.
 * @param unfiltered the unfiltered map
 * @param entryPredicate the predicate for filtering entries
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createEntrySet,com.google.common.collect.Maps$FilteredKeyMap:createEntrySet(),2983,2986,"/**
 * Creates a filtered entry set based on the predicate.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,createKeySet,com.google.common.collect.Maps$FilteredKeyMap:createKeySet(),2988,2991,"/**
 * Creates a filtered key set based on the key predicate.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createElementSet,com.google.common.collect.Multisets$FilteredMultiset:createElementSet(),343,346,"/**
* Filters the element set based on the defined predicate.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,createEntrySet,com.google.common.collect.Multisets$FilteredMultiset:createEntrySet(),353,356,"/**
 * Creates an entry set filtered by the predicate.
 * Uses unfiltered entry set and applies the predicate.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,"com.google.common.graph.AbstractNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",172,182,"/**
 * Returns edges connecting nodeU and nodeV.
 * Uses outEdges or inEdges based on size comparison.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,put,"com.google.common.collect.CompactHashMap:put(java.lang.Object,java.lang.Object)",334,398,"/**
* Associates the specified value with the specified key in the map.
* @param key key for the mapping
* @param value value for the mapping
* @return the previous value or null if key was not present
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashMap:convertToHashFloodingResistantImplementation(),134,140,"/**
 * Converts map to hash flooding resistant implementation.
 * Clears links after conversion. Returns the converted map.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,add,com.google.common.collect.CompactHashSet:add(java.lang.Object),294,352,"/**
 * Adds the specified element to this set if it is not already present.
 * @param object the element to be added
 * @return true if the set changed, false otherwise
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,convertToHashFloodingResistantImplementation,com.google.common.collect.CompactLinkedHashSet:convertToHashFloodingResistantImplementation(),147,154,"/**
 * Converts to a hash-flooding resistant implementation.
 * Clears predecessor and successor references.
 * @return The converted Set implementation.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EmptyImmutableSetMultimap.java,<init>,com.google.common.collect.EmptyImmutableSetMultimap:<init>(),33,35,"/**
 * Constructs an empty, immutable multimap.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,asMultimap,com.google.common.collect.ImmutableMap:asMultimap(),1116,1125,"/**
 * Returns this view as an {@code ImmutableSetMultimap}.
 * Creates a new multimap if {@code multimapView} is null.
 */
","* Returns a multimap view of the map.
   *
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,build,com.google.common.collect.ImmutableSortedMap$Builder:build(),714,717,"/**
 * Builds the sorted map. Returns the map or throws an exception.
 */
","* Returns a newly-created immutable sorted map.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if any two keys are equal according to the comparator (which
     *     might be the keys' natural order)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,descendingMultiset,com.google.common.collect.ImmutableSortedMultiset:descendingMultiset(),338,348,"/**
 * Returns a descending version of this multiset.
 * Returns a cached instance if available, otherwise creates one.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap:get(java.lang.Comparable),484,487,"/**
 * Gets the value associated with the given key, if within subrange.
 * @param key the key to retrieve
 * @return the value or null if the key is outside the subrange.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,putAll,com.google.common.collect.ImmutableRangeMap$Builder:putAll(com.google.common.collect.RangeMap),133,139,"/**
 * Adds all entries from the given RangeMap to this RangeMap.
 * @param rangeMap the RangeMap to copy entries from
 * @return this builder
 */
",Copies all associations from the specified range map into this builder.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(java.lang.Iterable),796,802,"/**
 * Adds all ranges from the iterable to the builder.
 * @param ranges iterable of Range objects to add
 * @return this builder
 */
","* Add all of the specified ranges to this builder. Adjacent ranges are permitted and will be
     * merged, but overlapping ranges will cause an exception when {@link #build()} is called.
     *
     * @throws IllegalArgumentException if any inserted ranges are empty
     * @since 21.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,size,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:size(),851,854,"/**
 * Returns the number of elements in this map.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet:add(com.google.common.collect.Range),177,222,"/**
 * Adds a range to the range set, coalescing if necessary.
 * @param rangeToAdd The range to add, must not be empty.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet:remove(com.google.common.collect.Range),224,265,"/**
 * Removes a range from the collection.
 * @param rangeToRemove The range to remove.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$AsMapOfRanges:containsKey(java.lang.Object),356,359,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the key exists, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersectRanges,com.google.common.collect.ImmutableRangeSet:intersectRanges(com.google.common.collect.Range),445,512,"/**
 * Returns ranges intersecting the given range.
 * @param range The range to intersect with existing ranges.
 * @return ImmutableList of intersecting ranges.
 */
","* Returns a list containing the nonempty intersections of {@code range} with the ranges in this
   * range set.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,create,"com.google.common.collect.ContiguousSet:create(com.google.common.collect.Range,com.google.common.collect.DiscreteDomain)",62,95,"/**
 * Creates a contiguous set defined by a range and discrete domain.
 * @param range Range defining the set's bounds.
 * @param domain Discrete domain of the set.
 * @return ContiguousSet object.
 */
","* Returns a {@code ContiguousSet} containing the same values in the given domain {@linkplain
   * Range#contains contained} by the range.
   *
   * @throws IllegalArgumentException if neither range nor the domain has a lower bound, or if
   *     neither has an upper bound
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,get,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:get(java.lang.Object),659,690,"/**
 * Retrieves the value associated with the given range key.
 * @param key the range key to search for
 * @return the value or null if not found.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,getEntry,com.google.common.collect.TreeRangeMap$SubRangeMap:getEntry(java.lang.Comparable),489,498,"/**
 * Gets the entry for the given key, intersecting with the subrange.
 * @param key The key to search for.
 * @return The entry or null if not found within the subrange.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,subRangeMap,com.google.common.collect.TreeRangeMap$SubRangeMap:subRangeMap(com.google.common.collect.Range),586,593,"/**
 * Returns a range map containing only the entries within the range.
 * @param range The range to extract.
 * @return A RangeMap containing the entries within the range.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Range),472,479,"/**
 * Returns a submap of ranges within the given window.
 * @param subWindow Range representing the desired sub-window.
 * @return NavigableMap of ranges within the subWindow.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Range),305,311,"/**
 * Returns a submap of ranges within the given window.
 * @param window Range representing the window to filter ranges.
 * @return Submap of ranges within the window, or empty map.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,encloses,com.google.common.collect.TreeRangeSet$SubRangeSet:encloses(com.google.common.collect.Range),872,879,"/**
 * Checks if this range set encloses the given range.
 * @param range The range to check for enclosure.
 * @return True if the range is enclosed, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subRangeSet,com.google.common.collect.TreeRangeSet$SubRangeSet:subRangeSet(com.google.common.collect.Range),917,926,"/**
 * Returns a range set representing the intersection with view.
 * @param view The range to intersect with.
 * @return RangeSet representing the intersection.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Range),704,711,"/**
 * Returns a submap of ranges within the provided window.
 * @param window Range representing the window to filter ranges.
 * @return NavigableMap of ranges within the window.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:get(java.lang.Object),744,771,"/**
 * Retrieves a Range by key (Cut). Returns null if not found.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,intersects,com.google.common.collect.TreeRangeSet:intersects(com.google.common.collect.Range),133,146,"/**
 * Checks if this range intersects with the given range.
 * @param range The range to check for intersection.
 * @return True if an intersection exists, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalesce,"com.google.common.collect.TreeRangeMap:coalesce(com.google.common.collect.Range,java.lang.Object,java.util.Map$Entry)",173,181,"/**
 * Returns a range if it matches the given value and entry.
 * @param range The range to check.
 * @param value The value to match.
 * @param entry The entry to compare.
 * @return The spanned range or the original range.
 */
","Returns the range that spans the given range and entry, if the entry can be coalesced.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,asSet,com.google.common.collect.ImmutableRangeSet:asSet(com.google.common.collect.DiscreteDomain),547,568,"/**
 * Returns a sorted set view of the elements in this range set.
 * @param domain the discrete domain of the elements
 * @return ImmutableSortedSet containing the elements
 */
","* Returns an {@link ImmutableSortedSet} containing the same values in the given domain
   * {@linkplain RangeSet#contains contained} by this range set.
   *
   * <p><b>Note:</b> {@code a.asSet(d).equals(b.asSet(d))} does not imply {@code a.equals(b)}! For
   * example, {@code a} and {@code b} could be {@code [2..4]} and {@code (1..5)}, or the empty
   * ranges {@code [3..3)} and {@code [4..4)}.
   *
   * <p><b>Warning:</b> Be extremely careful what you do with the {@code asSet} view of a large
   * range set (such as {@code ImmutableRangeSet.of(Range.greaterThan(0))}). Certain operations on
   * such a set can be performed efficiently, but others (such as {@link Set#hashCode} or {@link
   * Collections#frequency}) can cause major performance problems.
   *
   * <p>The returned set's {@link Object#toString} method returns a shorthand form of the set's
   * contents, such as {@code ""[1..100]}""}.
   *
   * @throws IllegalArgumentException if neither this range nor the domain has a lower bound, or if
   *     neither has an upper bound",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,range,com.google.common.collect.RegularContiguousSet:range(),211,214,"/**
 * Returns the range with both endpoints inclusive (CLOSED).
 * @return Range object representing the inclusive range.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putRangeMapEntry,"com.google.common.collect.TreeRangeMap:putRangeMapEntry(com.google.common.collect.Cut,com.google.common.collect.Cut,java.lang.Object)",207,209,"/**
 * Adds a range map entry to the map, defined by lower/upper bounds & value.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,newConnections,com.google.common.graph.StandardMutableNetwork:newConnections(),166,174,"/**
 * Creates a new NetworkConnections instance based on graph properties.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,remove,com.google.common.collect.CompactHashMap$Itr:remove(),651,659,"/**
 * Removes the element at the specified index.
 * Adjusts currentIndex and expectedModCount accordingly.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,com.google.common.collect.CollectCollectors$EnumMapAccumulator:toImmutableMap(),338,340,"/**
 * Converts the current map to an ImmutableMap. Returns empty if null.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOfEnumMap,com.google.common.collect.ImmutableMap:copyOfEnumMap(java.util.EnumMap),733,741,"/**
 * Copies an EnumMap to an ImmutableEnumMap.
 * @param original The EnumMap to copy.
 * @return An ImmutableEnumMap containing the original's entries.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,immutableEnumMap,com.google.common.collect.Maps:immutableEnumMap(java.util.Map),157,182,"/**
 * Creates an ImmutableMap from a Map with Enum keys.
 * @param map The source Map.
 * @return An ImmutableMap containing the key-value pairs.
 */
","* Returns an immutable map instance containing the given entries. Internally, the returned map
   * will be backed by an {@link EnumMap}.
   *
   * <p>The iteration order of the returned map follows the enum's iteration order, not the order in
   * which the elements appear in the given map.
   *
   * @param map the map to make an immutable copy of
   * @return an immutable map containing those entries
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowMap,com.google.common.collect.ImmutableTable:rowMap(),380,381,"/**
 * Returns an immutable map of rows to column-value maps.
 */","* {@inheritDoc}
   *
   * <p>The value {@code Map<C, V>} instances in the returned map are {@link ImmutableMap} instances
   * as well.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,asDescendingMapOfRanges,com.google.common.collect.ImmutableRangeMap$2:asDescendingMapOfRanges(),317,325,"/**
 * Returns a descending map of ranges to values.
 * Uses reversed ranges and values for descending order.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,subList,"com.google.common.collect.Lists$ReverseList:subList(int,int)",924,928,"/**
 * Returns a sublist of elements in reverse order.
 * @param fromIndex start index (inclusive)
 * @param toIndex   end index (exclusive)
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,descendingIterator,com.google.common.collect.ImmutableSortedSet:descendingIterator(),845,847,"/**
 * Returns an iterator over elements in descending order.
 */",* @since 12.0,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,readResolve,com.google.common.collect.ImmutableList$SerializedForm:readResolve(),736,738,"/**
 * Returns the deserialized object, a copy of the 'elements' array.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,<init>,"com.google.common.reflect.Parameter:<init>(com.google.common.reflect.Invokable,int,com.google.common.reflect.TypeToken,java.lang.annotation.Annotation[],java.lang.Object)",49,60,"/**
 * Constructor to initialize a TypeDescription.
 * @param declaration Invokable; position, type, annotations, annotatedType.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$TypeVariableImpl:<init>(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",401,406,"/**
 * Constructs a TypeVariableImpl with a generic declaration, name, and bounds.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,build,com.google.common.collect.ImmutableList$Builder:build(),922,926,"/**
 * Builds an immutable list from the current contents.
 * Sets copyOnWrite to true.
 * @return ImmutableList containing the elements.
 */
",* Returns a newly-created {@code ImmutableList} based on the contents of the {@code Builder}.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,asImmutableList,com.google.common.collect.ImmutableList:asImmutableList(java.lang.Object[]),360,362,"/**
 * Converts an array to an ImmutableList.
 * @param elements array to convert
 * @return ImmutableList containing the array elements
 */
","* Views the array as an immutable list. Does not check for nulls; does not copy.
   *
   * <p>The array must be internally created.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$JdkBackedSetBuilderImpl:build(),969,984,"/**
 * Builds an ImmutableSet based on the 'distinct' value.
 * Returns an empty, single-element, or populated set.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,build,com.google.common.collect.ImmutableSortedSet$Builder:build(),586,596,"/**
 * Builds an ImmutableSortedSet. Returns an empty set if n is 0.
 */","* Returns a newly-created {@code ImmutableSortedSet} based on the contents of the {@code
     * Builder} and its comparator.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableBiMap.java,create,"com.google.common.collect.JdkBackedImmutableBiMap:create(int,java.util.Map$Entry[])",35,53,"/**
 * Creates an ImmutableBiMap from an array of entries.
 * @param n the size of the array
 * @param entryArray array of entries to populate the map
 * @return an ImmutableBiMap containing the entries
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMap.java,create,"com.google.common.collect.JdkBackedImmutableMap:create(int,java.util.Map$Entry[],boolean)",41,86,"/**
 * Creates an ImmutableMap from an array of entries.
 * @param n size of the map
 * @param entryArray array of map entries
 * @param throwIfDuplicateKeys whether to throw on duplicate keys
 * @return ImmutableMap containing the entries
 */
","* Creates an {@code ImmutableMap} backed by a JDK HashMap. Used when probable hash flooding is
   * detected. This implementation may replace the entries in entryArray with its own entry objects
   * (though they will have the same key/value contents), and will take ownership of entryArray.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$ReverseImmutableList:subList(int,int)",674,678,"/**
 * Returns a sublist of this list, reversed to maintain order.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,subList,"com.google.common.collect.ImmutableList$SubList:subList(int,int)",496,500,"/**
 * Returns a sublist of this list, from fromIndex to toIndex.
 * @param fromIndex start index (inclusive)
 * @param toIndex end index (exclusive)
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap:subRangeMap(com.google.common.collect.Range),327,402,"/**
 * Returns a range map containing only the ranges overlapping `range`.
 * @param range The range to filter by.
 * @return A new ImmutableRangeMap.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,getSubSet,"com.google.common.collect.RegularImmutableSortedSet:getSubSet(int,int)",289,298,"/**
 * Returns a sorted set containing elements from newFromIndex to newToIndex.
 * @param newFromIndex start index (inclusive)
 * @param newToIndex end index (exclusive)
 * @return Sub-set of the sorted set.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,findSuffixOfType,com.google.common.net.InternetDomainName:findSuffixOfType(com.google.common.base.Optional),213,239,"/**
 * Finds the index of a suffix matching the desired type.
 * @param desiredType The desired PublicSuffixType to match.
 */
","* Returns the index of the leftmost part of the suffix, or -1 if not found. Note that the value
   * defined as a suffix may not produce {@code true} results from {@link #isPublicSuffix()} or
   * {@link #isRegistrySuffix()} if the domain ends with an excluded domain pattern such as {@code
   * ""nhs.uk""}.
   *
   * <p>If a {@code desiredType} is specified, this method only finds suffixes of the given type.
   * Otherwise, it finds the first suffix of any type.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.util.Map$Entry[],int)",498,561,"/**
 * Creates an ImmutableSortedMap from an array of entries.
 * @param comparator Comparator for keys.
 * @param sameComparator Whether comparators are the same.
 * @param entryArray Array of map entries.
 * @param size Size of the entry array.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSet,com.google.common.collect.CollectCollectors$EnumSetAccumulator:toImmutableSet(),133,140,"/**
 * Converts the internal set to an ImmutableSet.
 * Clears the internal set after conversion.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOfEnumSet,com.google.common.collect.ImmutableSet:copyOfEnumSet(java.util.EnumSet),272,275,"/**
 * Creates an immutable set from an EnumSet.
 * @param enumSet The EnumSet to copy.
 * @return An ImmutableSet containing the elements of enumSet.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableEnumSet,com.google.common.collect.Sets:immutableEnumSet(java.lang.Iterable),121,141,"/**
 * Creates an immutable set from an iterable of enum elements.
 * @param elements Iterable containing enum values.
 * @return An ImmutableSet containing the elements.
 */
","* Returns an immutable set instance containing the given enum elements. Internally, the returned
   * set will be backed by an {@link EnumSet}.
   *
   * <p>The iteration order of the returned set follows the enum's iteration order, not the order in
   * which the elements appear in the given collection.
   *
   * @param elements the elements, all of the same {@code enum} type, that the set should contain
   * @return an immutable set containing those elements, minus duplicates",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,readResolve,com.google.common.collect.ImmutableSet$SerializedForm:readResolve(),411,413,"/**
 * Restores the object from a serialized form, returning a copy.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,createValues,com.google.common.collect.ImmutableTable:createValues(),323,324,"/**
 * Creates an immutable collection of values for this map entry.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,equals,com.google.common.collect.RegularImmutableSortedSet:equals(java.lang.Object),170,205,"/**
 * Checks if two sets are equal. Returns true if they are.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,combine,com.google.common.collect.ImmutableSet$Builder:combine(com.google.common.collect.ImmutableSet$Builder),554,569,"/**
* Combines this builder with another builder, merging their implementations.
* @param other The other builder to combine with.
* @return This builder, with merged implementation.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,iterator,com.google.common.graph.AbstractBaseGraph$2:iterator(),732,733,"/**
 * Returns an unmodifiable iterator for the elements in this collection.
 */","* Scope the return type to {@link UnmodifiableIterator} to ensure this is an unmodifiable view.
     *
     * @since 20.0 (present with return type {@link Iterator} since 2.0)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,incidentEdgeIterator,com.google.common.graph.DirectedGraphConnections:incidentEdgeIterator(java.lang.Object),367,411,"/**
 * Returns an iterator over incident edges, avoiding double self-loops.
 * @param thisNode the node to find incident edges for
 * @return Iterator of EndpointPair<N> representing incident edges
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,post,com.google.common.eventbus.EventBus:post(java.lang.Object),259,267,"/**
 * Posts an event to subscribers. Recursively posts DeadEvent if no subscribers.
 */","* Posts an event to all registered subscribers. This method will return successfully after the
   * event has been posted to all subscribers, and regardless of any exceptions thrown by
   * subscribers.
   *
   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not
   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.
   *
   * @param event event to post.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,setValue,com.google.common.collect.MapMakerInternalMap$WriteThroughEntry:setValue(java.lang.Object),2660,2664,"/**
* Sets the value associated with the key, then calls super.setValue.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,putAll,com.google.common.collect.MapMakerInternalMap:putAll(java.util.Map),2441,2446,"/**
* Adds all entries from the given map to this map.
* @param m the map whose entries are added
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Interners.java,intern,com.google.common.collect.Interners$InternerImpl:intern(java.lang.Object),128,157,"/**
 * Returns the interned version of the given sample object.
 * Returns the sample itself if not already interned.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$HashIterator:remove(),2622,2627,"/**
 * Removes the last element returned by the iterator.
 * Requires that the iterator has been advanced at least once.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$KeySet:remove(java.lang.Object),2698,2701,"/**
* Removes an object from the map.
* @param o object to remove
* @return true if the object was present, false otherwise
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,remove,com.google.common.collect.MapMakerInternalMap$EntrySet:remove(java.lang.Object),2761,2769,"/**
 * Removes the entry if the given object is a valid entry.
 * @param o entry to remove; returns true if removed.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,get,com.google.common.collect.MapMakerInternalMap:get(java.lang.Object),2355,2362,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve. Returns null if null.
 * @return The value associated with the key, or null.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,containsKey,com.google.common.collect.MapMakerInternalMap:containsKey(java.lang.Object),2376,2383,"/**
 * Checks if the map contains a key.
 * @param key The key to check, may be null.
 * @return True if the key exists, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MutableClassToInstanceMap.java,putInstance,"com.google.common.collect.MutableClassToInstanceMap:putInstance(java.lang.Class,java.lang.Object)",169,174,"/**
 * Puts an instance of the given type with the given value.
 * @param type The class of the instance to put.
 * @param value The instance to put. Returns the instance.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,tryCrossOverAndBubbleUp,"com.google.common.collect.MinMaxPriorityQueue$Heap:tryCrossOverAndBubbleUp(int,int,java.lang.Object)",538,562,"/**
 * Attempts crossover and bubble-up operation. Returns MoveDesc if successful, null otherwise.
 */","* Tries to move {@code toTrickle} from a min to a max level and bubble up there. If it moved
     * before {@code removeIndex} this method returns a pair as described in {@link #removeAt}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,rowComparator,com.google.common.collect.TreeBasedTable:rowComparator(),144,154,"/**
 * Returns the comparator used for ordering rows.
 * Uses requireNonNull to ensure comparator is not null.
 */
","* Returns the comparator that orders the rows. With natural ordering, {@link Ordering#natural()}
   * is returned.
   *
   * @deprecated Use {@code table.rowKeySet().comparator()} instead.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,synchronizedNavigableSet,com.google.common.collect.Sets:synchronizedNavigableSet(java.util.NavigableSet),2112,2117,"/**
 * Returns a synchronized NavigableSet backed by the given set.
 * @param navigableSet The NavigableSet to synchronize.
 * @return A synchronized NavigableSet.
 */
","* Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable set is accomplished through the returned navigable set (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned sorted set when
   * iterating over it or any of its {@code descendingSet}, {@code subSet}, {@code headSet}, or
   * {@code tailSet} views.
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   *  ...
   * synchronized (set) {
   *   // Must be in the synchronized block
   *   Iterator<E> it = set.iterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
   * NavigableSet<E> set2 = set.descendingSet().headSet(foo);
   *  ...
   * synchronized (set) { // Note: set, not set2!!!
   *   // Must be in the synchronized block
   *   Iterator<E> it = set2.descendingIterator();
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable set will be serializable if the specified navigable set is
   * serializable.
   *
   * <p><b>Java 8+ users and later:</b> Prefer {@link Collections#synchronizedNavigableSet}.
   *
   * @param navigableSet the navigable set to be ""wrapped"" in a synchronized navigable set.
   * @return a synchronized view of the specified navigable set.
   * @since 13.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,ceiling,com.google.common.collect.Synchronized$SynchronizedNavigableSet:ceiling(java.lang.Object),1474,1479,"/**
 * Returns the greatest element less than or equal to given element.
 * @param e the element to compare
 * @return the ceiling element or null if none exists
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingIterator,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingIterator(),1481,1484,"/**
 * Returns a descending iterator for the set.
 * Delegates to the underlying set's iterator.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:descendingSet(),1488,1498,"/**
 * Returns a descending view of the set, backed by the delegate.
 * Returns null if the set is empty.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,floor,com.google.common.collect.Synchronized$SynchronizedNavigableSet:floor(java.lang.Object),1500,1505,"/**
 * Returns the greatest element in this set less than or equal to given element.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object,boolean)",1507,1512,"/**
 * Returns a view of the set containing elements up to `toElement`.
 * @param toElement element to end the view, inclusive if specified
 * @return NavigableSet containing elements up to `toElement`
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,higher,com.google.common.collect.Synchronized$SynchronizedNavigableSet:higher(java.lang.Object),1519,1524,"/**
 * Returns the next higher element than the given element.
 * @param e the element to find the next higher element from
 * @return the next higher element or null if none exists
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,lower,com.google.common.collect.Synchronized$SynchronizedNavigableSet:lower(java.lang.Object),1526,1531,"/**
 * Returns the element immediately preceding the given element.
 * Uses the delegate's lower method, synchronized for thread safety.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollFirst,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollFirst(),1533,1538,"/**
 * Retrieves and removes the first element, or null if empty.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,pollLast,com.google.common.collect.Synchronized$SynchronizedNavigableSet:pollLast(),1540,1545,"/**
 * Retrieves and removes the last element, or null if empty.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",1547,1554,"/**
 * Returns a view of the set between {@code fromElement} and {@code toElement}.
 * @param fromElement lower bound (inclusive if fromInclusive is true)
 * @param fromInclusive whether fromElement is inclusive
 * @param toElement upper bound (inclusive if toInclusive is true)
 * @param toInclusive whether toElement is inclusive
 * @return NavigableSet view of the set between the specified elements
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object,boolean)",1561,1566,"/**
 * Returns a tail set from the given element, inclusive or exclusive.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,keySet,com.google.common.collect.Synchronized$SynchronizedNavigableMap:keySet(),1720,1723,"/**
 * Returns a navigable set view of the map's keys.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,removeAll,com.google.common.collect.ForwardingSetMultimap:removeAll(java.lang.Object),56,60,"/**
 * Removes all elements of the set whose keys are equal to {@code key}.
 * @param key The key to compare with elements' keys.
 * @return Set of removed elements.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset$AvlNode:add(java.util.Comparator,java.lang.Object,int,int[])",675,719,"/**
 * Adds an element to the AVL tree, updating counts and rebalancing.
 * @param comparator Comparator for element comparison.
 * @param e Element to add.
 * @param count Count associated with the element.
 * @param result Result array to indicate duplicate addition.
 * @return This node or a rebalanced node.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMin,com.google.common.collect.TreeMultiset$AvlNode:removeMin(com.google.common.collect.TreeMultiset$AvlNode),912,921,"/**
 * Removes the minimum element from the subtree rooted at node.
 * Recursively removes from left subtree, rebalances.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,removeMax,com.google.common.collect.TreeMultiset$AvlNode:removeMax(com.google.common.collect.TreeMultiset$AvlNode),924,933,"/**
 * Removes the node with the maximum element from the subtree.
 * @param node The root of the subtree to remove from.
 * @return The new root of the subtree after removal.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,incidentEdges,com.google.common.graph.ImmutableNetwork:incidentEdges(java.lang.Object),130,133,"/**
 * Returns incident edges of a node, validating them.
 * @param node The node to get incident edges for.
 * @return A set of incident edges.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,adjacentNodes,com.google.common.graph.ImmutableNetwork:adjacentNodes(java.lang.Object),143,146,"/**
 * Returns the adjacent nodes of a given node.
 * @param node The node to find adjacent nodes for.
 * @return Set of adjacent nodes.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,edgesConnecting,"com.google.common.graph.ImmutableNetwork:edgesConnecting(java.lang.Object,java.lang.Object)",148,156,"/**
 * Returns edges connecting nodeU to nodeV.
 * @param nodeU source node
 * @param nodeV destination node
 * @return Set of edges connecting nodeU and nodeV
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,inEdges,com.google.common.graph.ImmutableNetwork:inEdges(java.lang.Object),158,161,"/**
 * Returns the incoming edges of a node.
 * @param node The node to get in-edges for.
 * @return A set of incoming edges.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,outEdges,com.google.common.graph.ImmutableNetwork:outEdges(java.lang.Object),163,166,"/**
 * Returns the set of outgoing edges for the given node.
 * @param node The node to get outgoing edges for.
 * @return Set of outgoing edges.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardNetwork.java,successors,com.google.common.graph.ImmutableNetwork:successors(java.lang.Object),173,176,"/**
 * Returns the successors of a node, filtering invalid ones.
 * @param node The node to find successors for.
 * @return Set of successors after invalidation.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,adjacentNodes,com.google.common.graph.ImmutableValueGraph:adjacentNodes(java.lang.Object),103,106,"/**
 * Returns the adjacent nodes of the given node.
 * @param node The node to find adjacent nodes for.
 * @return A set of adjacent nodes.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,predecessors,com.google.common.graph.ImmutableValueGraph:predecessors(java.lang.Object),108,111,"/**
 * Returns the predecessors of a given node.
 * @param node The node to find predecessors for.
 * @return Set of predecessors of the node.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,successors,com.google.common.graph.ImmutableValueGraph:successors(java.lang.Object),113,116,"/**
* Returns the successors of a node, filtering invalid ones.
* @param node The node to get successors for.
* @return Set of valid successor nodes.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,incidentEdges,com.google.common.graph.ImmutableValueGraph:incidentEdges(java.lang.Object),118,129,"/**
 * Returns incident edges for a node.
 * @param node the node to get incident edges for
 * @return Set of EndpointPair<N> representing incident edges
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,"com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(java.lang.Object,java.lang.Object)",131,134,"/**
 * Checks if an edge connects two nodes.
 * @param nodeU The first node.
 * @param nodeV The second node.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,hasEdgeConnecting,com.google.common.graph.ImmutableValueGraph:hasEdgeConnecting(com.google.common.graph.EndpointPair),136,141,"/**
 * Checks if an edge connects the given endpoints.
 * @param endpoints Endpoint pair to check.
 * @return True if an edge exists, false otherwise.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(java.lang.Object,java.lang.Object,java.lang.Object)",143,146,"/**
 * Gets edge value or default if not present.
 * @param nodeU Source node.
 * @param nodeV Target node.
 * @param defaultValue Default value if edge not found.
 * @return Edge value or defaultValue.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardValueGraph.java,edgeValueOrDefault,"com.google.common.graph.ImmutableValueGraph:edgeValueOrDefault(com.google.common.graph.EndpointPair,java.lang.Object)",148,152,"/**
 * Gets the edge value for given endpoints, or defaultValue if absent.
 * @param endpoints Endpoint pair.
 * @param defaultValue Value to return if edge is not found.
 * @return Edge value or defaultValue.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int,double)",407,410,"/**
 * Creates a BloomFilter with the given funnel, insertions, and FPP.
 * @param funnel Funnel for hashing elements.
 * @param expectedInsertions Expected number of insertions.
 * @param fpp False positive probability.
 * @return A new BloomFilter instance.
 */
","* Creates a {@link BloomFilter} with the expected number of insertions and expected false
   * positive probability.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @param fpp the desired false positive probability (must be positive and less than 1.0)
   * @return a {@code BloomFilter}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,long)",509,512,"/**
 * Creates a Bloom filter with the given funnel and expected insertions.
 * @param funnel Funnel for hashing elements.
 * @param expectedInsertions Expected number of insertions.
 * @return A BloomFilter instance.
 */
","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}
   * @since 19.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,approximateElementCount,com.google.common.hash.BloomFilter:approximateElementCount(),221,234,"/**
 * Estimates the number of elements added using HyperLogLog algorithm.
 */","* Returns an estimate for the total number of distinct elements that have been added to this
   * Bloom filter. This approximation is reasonably accurate if it does not exceed the value of
   * {@code expectedInsertions} that was used when constructing the filter.
   *
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,toX,"com.google.common.math.BigIntegerMath$BigIntegerToDoubleRounder:toX(double,java.math.RoundingMode)",344,347,"/**
 * Rounds a double to a BigInteger using the specified rounding mode.
 * @param d the double to round
 * @param mode the rounding mode to use
 * @return the rounded BigInteger
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtApproxWithDoubles,com.google.common.math.BigIntegerMath:sqrtApproxWithDoubles(java.math.BigInteger),297,300,"/**
 * Approximates the square root of a BigInteger using doubles.
 * @param x The BigInteger to calculate the square root of.
 * @return An approximate BigInteger square root.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$RegularSetBuilderImpl:add(java.lang.Object),743,758,"/**
 * Adds an element to the set builder.
 * @param e element to add
 * @return This set builder instance for chaining.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,build,com.google.common.collect.ImmutableSet$Builder:build(),571,577,"/**
 * Builds and returns an immutable set from the internal representation.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,least,"com.google.common.collect.Comparators:least(int,java.util.Comparator)",132,142,"/**
 * Returns a collector that finds the least k elements.
 * @param k number of least elements to collect
 * @param comparator comparator for ordering elements
 */
","* Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified
   * {@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(least(2, comparingInt(String::length)))
   * // returns {""foo"", ""quux""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n
   * log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.util.Iterator,int)",781,802,"/**
 * Returns the {@code k} least elements from the iterator.
 * @param iterator Iterator of elements to select from.
 * @param k Number of least elements to return.
 * @return List containing the {@code k} least elements.
 */
","* Returns the {@code k} least elements from the given iterator according to this ordering, in
   * order from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TopKSelector.java,offerAll,com.google.common.collect.TopKSelector:offerAll(java.lang.Iterable),257,259,"/**
* Adds all elements from the given iterable to this collection.
* @param elements Iterable containing elements to add.
*/
","* Adds each member of {@code elements} as a candidate for the top {@code k} elements. This
   * operation takes amortized linear time in the length of {@code elements}.
   *
   * <p>If all input data to this {@code TopKSelector} is in a single {@code Iterable}, prefer
   * {@link Ordering#leastOf(Iterable, int)}, which provides a simpler API for that use case.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,upperCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:upperCase(),887,895,"/**
 * Returns a BaseEncoding instance with uppercase alphabet.
 * Lazily initializes if not already created.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/BaseEncoding.java,lowerCase,com.google.common.io.BaseEncoding$StandardBaseEncoding:lowerCase(),897,905,"/**
 * Returns a BaseEncoding instance with lowercase alphabet.
 * Caches the result for efficiency.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/primitives/UnsignedLong.java,toString,com.google.common.primitives.UnsignedLong:toString(),252,255,"/**
 * Returns a string representation of the value.
 * Uses UnsignedLongs.toString for conversion.
 */
","Returns a string representation of the {@code UnsignedLong} value, in base 10.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,aboutToAcquire,com.google.common.util.concurrent.CycleDetectingLockFactory:aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock),713,721,"/**
 * Checks acquired locks before acquiring a lock.
 * Updates the list of acquired locks if necessary.
 */
",* CycleDetectingLock implementations must call this method before attempting to acquire the lock.,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transform,"com.google.common.util.concurrent.ClosingFuture:transform(com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",688,705,"/**
 * Transforms the future's value using the provided function.
 * @param function Function to apply to the future's value.
 * @param executor Executor for asynchronous execution.
 * @return A ClosingFuture representing the transformed value.
 */
","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its value. The function can use a {@link DeferredCloser} to capture objects to be closed
   * when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transform((closer, result) -> result.getRows(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to the value of the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,transformAsync,"com.google.common.util.concurrent.ClosingFuture:transformAsync(com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",782,798,"/**
 * Transforms the future asynchronously using the given function.
 * @param function Function to transform the future's result.
 * @param executor Executor for asynchronous execution.
 * @return A ClosingFuture representing the transformed result.
 */
","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * that returns a {@code ClosingFuture} to its value. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
   * captured by the returned {@link ClosingFuture}).
   *
   * <p>If this {@code ClosingFuture} succeeds, the derived one will be equivalent to the one
   * returned by the function.
   *
   * <p>If this {@code ClosingFuture} fails, the function will not be called, and the derived {@code
   * ClosingFuture} will be equivalent to this one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}. But if the exception is thrown after the function creates a {@code
   * ClosingFuture}, then none of the closeable objects in that {@code ClosingFuture} will be
   * closed.
   *
   * <p>Usage guidelines for this method:
   *
   * <ul>
   *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
   *       {@code ClosingFuture}. If possible, prefer calling {@link #transform(ClosingFunction,
   *       Executor)} instead, with a function that returns the next value directly.
   *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
   *       for every closeable object this step creates in order to capture it for later closing.
   *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
   *       ClosingFuture} call {@link #from(ListenableFuture)}.
   *   <li>In case this step doesn't create new closeables, you can adapt an API that returns a
   *       {@link ListenableFuture} to return a {@code ClosingFuture} by wrapping it with a call to
   *       {@link #withoutCloser(AsyncFunction)}
   * </ul>
   *
   * <p>Example usage:
   *
   * {@snippet :
   * // Result.getRowsClosingFuture() returns a ClosingFuture.
   * ClosingFuture<List<Row>> rowsFuture =
   *     queryFuture.transformAsync((closer, result) -> result.getRowsClosingFuture(), executor);
   *
   * // Result.writeRowsToOutputStreamFuture() returns a ListenableFuture that resolves to the
   * // number of written rows. openOutputFile() returns a FileOutputStream (which implements
   * // Closeable).
   * ClosingFuture<Integer> rowsFuture2 =
   *     queryFuture.transformAsync(
   *         (closer, result) -> {
   *           FileOutputStream fos = closer.eventuallyClose(openOutputFile(), closingExecutor);
   *           return ClosingFuture.from(result.writeRowsToOutputStreamFuture(fos));
   *      },
   *      executor);
   *
   * // Result.getRowsFuture() returns a ListenableFuture (no new closeables are created).
   * ClosingFuture<List<Row>> rowsFuture3 =
   *     queryFuture.transformAsync(withoutCloser(Result::getRowsFuture), executor);
   *
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   * (Specifically, {@code directExecutor} functions should avoid heavyweight operations inside
   * {@code AsyncClosingFunction.apply}. Any heavyweight operations should occur in other threads
   * responsible for completing the returned {@code ClosingFuture}.)
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param function transforms the value of this step to a {@code ClosingFuture} with the value of
   *     the derived step
   * @param executor executor to run the function in
   * @return the derived step
   * @throws IllegalStateException if a {@code ClosingFuture} has already been derived from this
   *     one, or if this {@code ClosingFuture} has already been {@linkplain #finishToFuture()
   *     finished}",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",879,896,"/**
 * Catches exceptions of a specific type and applies a fallback function.
 * @param exceptionType Exception type to catch.
 * @param fallback Fallback function to apply on exception.
 * @param executor Executor for asynchronous execution.
 * @return ClosingFuture with the result of the fallback.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsyncMoreGeneric,"com.google.common.util.concurrent.ClosingFuture:catchingAsyncMoreGeneric(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",975,991,"/**
* Catches exceptions of a specific type and applies a fallback.
* @param exceptionType Exception type to catch.
* @param fallback Fallback function to apply on exception.
* @param executor Executor for async execution.
* @return A ClosingFuture wrapping the result.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class)",1220,1227,"/**
 * Gets the Future's value, throwing X if it's done with an error.
 * @param future Future to get the value from.
 * @param exceptionClass Class of exception to check.
 * @return The Future's value.
 */
","* Returns the result of {@link Future#get()}, converting most exceptions to a new instance of the
   * given checked exception type. This reduces boilerplate for a common use of {@code Future} in
   * which it is unnecessary to programmatically distinguish between exception types or to extract
   * other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 19.0 (in 10.0 as {@code get})",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,getChecked,"com.google.common.util.concurrent.Futures:getChecked(java.util.concurrent.Future,java.lang.Class,java.time.Duration)",1272,1279,"/**
 * Gets the result of a Future, throwing an exception if it fails.
 * @param future Future to retrieve the result from
 * @param exceptionClass Exception class to check
 * @param timeout Timeout duration
 * @return Result of the Future
 */
","* Returns the result of {@link Future#get(long, TimeUnit)}, converting most exceptions to a new
   * instance of the given checked exception type. This reduces boilerplate for a common use of
   * {@code Future} in which it is unnecessary to programmatically distinguish between exception
   * types or to extract other information from the exception instance.
   *
   * <p>Exceptions from {@code Future.get} are treated as follows:
   *
   * <ul>
   *   <li>Any {@link ExecutionException} has its <i>cause</i> wrapped in an {@code X} if the cause
   *       is a checked exception, an {@link UncheckedExecutionException} if the cause is a {@code
   *       RuntimeException}, or an {@link ExecutionError} if the cause is an {@code Error}.
   *   <li>Any {@link InterruptedException} is wrapped in an {@code X} (after restoring the
   *       interrupt).
   *   <li>Any {@link TimeoutException} is wrapped in an {@code X}.
   *   <li>Any {@link CancellationException} is propagated untouched, as is any other {@link
   *       RuntimeException} (though {@code get} implementations are discouraged from throwing such
   *       exceptions).
   * </ul>
   *
   * <p>The overall principle is to continue to treat every checked exception as a checked
   * exception, every unchecked exception as an unchecked exception, and every error as an error. In
   * addition, the cause of any {@code ExecutionException} is wrapped in order to ensure that the
   * new stack trace matches that of the current thread.
   *
   * <p>Instances of {@code exceptionClass} are created by choosing an arbitrary public constructor
   * that accepts zero or more arguments, all of type {@code String} or {@code Throwable}
   * (preferring constructors with at least one {@code String}, then preferring constructors with at
   * least one {@code Throwable}) and calling the constructor via reflection. If the exception did
   * not already have a cause, one is set by calling {@link Throwable#initCause(Throwable)} on it.
   * If no such constructor exists, an {@code IllegalArgumentException} is thrown.
   *
   * @throws X if {@code get} throws any checked exception except for an {@code ExecutionException}
   *     whose cause is not itself a checked exception
   * @throws UncheckedExecutionException if {@code get} throws an {@code ExecutionException} with a
   *     {@code RuntimeException} as its cause
   * @throws ExecutionError if {@code get} throws an {@code ExecutionException} with an {@code
   *     Error} as its cause
   * @throws CancellationException if {@code get} throws a {@code CancellationException}
   * @throws IllegalArgumentException if {@code exceptionClass} extends {@code RuntimeException} or
   *     does not have a suitable constructor
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,reschedule,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:reschedule(),607,648,"/**
 * Reschedules the task, initializing or updating the cancellation delegate.
 * @return Cancellable object to cancel the rescheduled task.
 */
","* Atomically reschedules this task and assigns the new future to {@link
       * #cancellationDelegate}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,startAsync,com.google.common.util.concurrent.AbstractService:startAsync(),244,263,"/**
 * Starts the service asynchronously. Throws IllegalStateException if already started.
 * @return The Service instance itself.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,stopAsync,com.google.common.util.concurrent.AbstractService:stopAsync(),265,301,"/**
 * Stops the service asynchronously. Returns the service instance.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,notifyStarted,com.google.common.util.concurrent.AbstractService:notifyStarted(),400,426,"/**
 * Transitions service to RUNNING or STOPPING state after startup.
 */","* Implementing classes should invoke this method once their service has started. It will cause
   * the service to transition from {@link State#STARTING} to {@link State#RUNNING}.
   *
   * @throws IllegalStateException if the service is not {@link State#STARTING}.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startAsync,com.google.common.util.concurrent.ServiceManager:startAsync(),271,289,"/**
 * Starts all services asynchronously. Returns the ServiceManager instance.
 */","* Initiates service {@linkplain Service#startAsync startup} on all the services being managed. It
   * is only valid to call this method if all of the services are {@linkplain State#NEW new}.
   *
   * @return this
   * @throws IllegalStateException if any of the Services are not {@link State#NEW new} when the
   *     method is called.",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,starting,com.google.common.util.concurrent.ServiceManager$ServiceListener:starting(),790,799,"/**
 * Transitions service to STARTING state and logs start event.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,running,com.google.common.util.concurrent.ServiceManager$ServiceListener:running(),801,807,"/**
 * Transitions the service to the RUNNING state if possible.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,stopping,com.google.common.util.concurrent.ServiceManager$ServiceListener:stopping(com.google.common.util.concurrent.Service$State),809,815,"/**
 * Transitions the service to STOPPING state from the given state.
 * @param from The previous state of the service.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,terminated,com.google.common.util.concurrent.ServiceManager$ServiceListener:terminated(com.google.common.util.concurrent.Service$State),817,831,"/**
 * Transitions the service to the TERMINATED state from the given state.
 * @param from The previous state of the service.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,failed,"com.google.common.util.concurrent.ServiceManager$ServiceListener:failed(com.google.common.util.concurrent.Service$State,java.lang.Throwable)",833,855,"/**
 * Handles service failure, logs error, and transitions to FAILED state.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,com.google.common.util.concurrent.AbstractService:awaitRunning(),303,311,"/**
 * Blocks until the thread has reached the RUNNING state.
 * Uses monitor to ensure exclusive access and state check.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,com.google.common.util.concurrent.AbstractService:awaitTerminated(),338,346,"/**
 * Blocks until this thread terminates. Uses monitor for synchronization.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(),607,610,"/**
* Waits for the stopped state, then releases the guard.
*/
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhen,"com.google.common.util.concurrent.Monitor:enterWhen(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",502,504,"/**
 * Attempts to enter the guard within the given duration.
 * @param guard The guard to enter.
 * @param time The duration to wait, in Duration units.
 * @throws InterruptedException If interrupted while waiting.
 */
","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied, and may be
   * interrupted.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitRunning,"com.google.common.util.concurrent.AbstractService:awaitRunning(long,java.util.concurrent.TimeUnit)",321,336,"/**
 * Waits for the executor to reach the RUNNING state, with a timeout.
 * @param timeout Timeout duration
 * @param unit TimeUnit of the timeout
 * @throws TimeoutException if timeout expires
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractService.java,awaitTerminated,"com.google.common.util.concurrent.AbstractService:awaitTerminated(long,java.util.concurrent.TimeUnit)",356,376,"/**
 * Waits until terminated, with a timeout. Throws TimeoutException if it fails.
 */",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,enterWhenUninterruptibly,"com.google.common.util.concurrent.Monitor:enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",598,600,"/**
 * Attempts to enter the guard uninterruptibly within a duration.
 * @param guard the guard to enter
 * @param time the maximum time to wait, in Duration units
 */
","* Enters this monitor when the guard is satisfied. Blocks at most the given time, including both
   * the time to acquire the lock and the time to wait for the guard to be satisfied.
   *
   * @return whether the monitor was entered, which guarantees that the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitFor,"com.google.common.util.concurrent.Monitor:waitFor(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",840,842,"/**
 * Waits for a guard to become true, up to the specified duration.
 * @param guard The guard to wait for.
 * @param time The maximum time to wait.
 * @throws InterruptedException If interrupted while waiting.
 */
","* Waits for the guard to be satisfied. Waits at most the given time, and may be interrupted. May
   * be called only by a thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @throws InterruptedException if interrupted while waiting
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Monitor.java,waitForUninterruptibly,"com.google.common.util.concurrent.Monitor:waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,java.time.Duration)",886,888,"/**
 * Waits uninterruptibly for a guard to signal, or timeout.
 * @param guard The guard to wait on.
 * @param time The maximum duration to wait.
 * @return True if the guard signals within the duration.
 */
","* Waits for the guard to be satisfied. Waits at most the given time. May be called only by a
   * thread currently occupying this monitor.
   *
   * @return whether the guard is now satisfied
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitStopped(long,java.util.concurrent.TimeUnit)",612,624,"/**
 * Waits for services to stop, throwing TimeoutException if it times out.
 * @param timeout Timeout duration.
 * @param unit Time unit for the timeout.
 */
",,,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/FluentFuture.java,withTimeout,"com.google.common.util.concurrent.FluentFuture:withTimeout(java.time.Duration,java.util.concurrent.ScheduledExecutorService)",272,277,"/**
 * Sets a timeout for the Future, using the provided executor.
 * @param timeout Duration for the timeout.
 * @param scheduledExecutor Executor for timeout scheduling.
 * @return Future with timeout applied.
 */
","* Returns a future that delegates to this future but will finish early (via a {@link
   * TimeoutException} wrapped in an {@link ExecutionException}) if the specified timeout expires.
   * If the timeout expires, not only will the output future finish, but also the input future
   * ({@code this}) will be cancelled and interrupted.
   *
   * @param timeout when to time out the future
   * @param scheduledExecutor The executor service to enforce the timeout.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,6
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/Platform.java,precomputeCharMatcher,com.google.common.base.Platform:precomputeCharMatcher(com.google.common.base.CharMatcher),37,39,"/**
 * Returns a precomputed CharMatcher from the given CharMatcher.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(byte[],java.io.File)",268,270,"/**
 * Writes a byte array to a file.
 * @param from The byte array to write.
 * @param to The file to write to.
 */
","* Overwrites a file with the contents of a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)}.
   *
   * @param from the bytes to write
   * @param to the destination file
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openStream,com.google.common.io.ByteSource$SlicedByteSource:openStream(),495,498,"/**
 * Opens an input stream for reading the data source.
 * Delegates to the underlying ByteSource's openStream.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,openBufferedStream,com.google.common.io.ByteSource$SlicedByteSource:openBufferedStream(),500,503,"/**
* Opens a buffered stream, applying a slice to the underlying stream.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$ConcatenatedByteSource:isEmpty(),686,694,"/**
 * Checks if all sources are empty.
 * Returns true if all sources are empty, false otherwise.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,isEmpty,com.google.common.io.ByteSource$SlicedByteSource:isEmpty(),539,542,"/**
 * Checks if the stream is empty, considering both length and superclass.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,size,com.google.common.io.ByteSource$ConcatenatedByteSource:size(),725,740,"/**
 * Returns the total size of all sources.
 * Returns Long.MAX_VALUE on overflow.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,hash,com.google.common.io.ByteSource:hash(com.google.common.hash.HashFunction),337,341,"/**
 * Computes a hash using the provided HashFunction.
 * @param hashFunction The function to use for hashing.
 * @return Hash object representing the computed hash.
 */
","* Hashes the contents of this byte source using the given hash function.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.OutputStream)",300,302,"/**
* Copies a file to an output stream.
* @param from Source file to copy.
* @param to Output stream to write to.
*/
","* Copies all bytes from a file to an output stream.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, OutputStream)}.
   *
   * @param from the source file
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,copy,"com.google.common.io.Resources:copy(java.net.URL,java.io.OutputStream)",171,173,"/**
 * Copies data from a URL to an OutputStream.
 * @param from The URL to copy from.
 * @param to The OutputStream to copy to.
 */
","* Copies all bytes from a URL to an output stream.
   *
   * @param from the URL to read from
   * @param to the output stream
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.io.File)",323,326,"/**
 * Copies a file from the source to the destination.
 * @param from Source file to be copied.
 * @param to Destination file.
 */
","* Copies all the bytes from one file to another.
   *
   * <p>Copying is not an atomic operation - in the case of an I/O error, power loss, process
   * termination, or other problems, {@code to} may not be a complete copy of {@code from}. If you
   * need to guard against those conditions, you should employ other file-level synchronization.
   *
   * <p><b>Warning:</b> If {@code to} represents an existing file, that file will be overwritten
   * with the contents of {@code from}. If {@code to} and {@code from} refer to the <i>same</i>
   * file, the contents of that file will be deleted.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...)}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,read,com.google.common.io.ByteSource$AsCharSource:read(),464,474,"/**
 * Reads the entire content as a String, using the specified charset.
 * @throws IOException if an I/O error occurs during reading
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toByteArray,com.google.common.io.Files:toByteArray(java.io.File),236,238,"/**
 * Reads a file and returns its content as a byte array.
 * @param file The file to read.
 * @throws IOException if an I/O error occurs.
 */
","* Reads all bytes from a file into a byte array.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#readAllBytes}.
   *
   * @param file the file to read from
   * @return a byte array containing all the bytes from file
   * @throws IllegalArgumentException if the file is bigger than the largest possible byte array
   *     (2^31 - 1)
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toByteArray,com.google.common.io.Resources:toByteArray(java.net.URL),94,96,"/**
 * Converts a URL to a byte array.
 * @param url The URL to convert.
 * @return Byte array representation of the URL content.
 */
","* Reads all bytes from a URL into a byte array.
   *
   * @param url the URL to read from
   * @return a byte array containing all the bytes from the URL
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readBytes,"com.google.common.io.Files:readBytes(java.io.File,com.google.common.io.ByteProcessor)",600,610,"/**
 * Reads file bytes using a processor.
 * @param file File to read.
 * @param processor Processor for handling bytes.
 * @return Result of the processor.
 */
","* Process the bytes of a file.
   *
   * <p>(If this seems too complicated, maybe you're looking for {@link #toByteArray}.)
   *
   * @param file the file to read
   * @param processor the object to which the bytes of the file are passed.
   * @return the result of the byte processor
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asByteSource(file).read(processor)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,equal,"com.google.common.io.Files:equal(java.io.File,java.io.File)",372,390,"/**
 * Checks if two files are equal, comparing length and content.
 * @param file1 The first file to compare.
 * @param file2 The second file to compare.
 * @throws IOException if an I/O error occurs during comparison.
 */
","* Returns true if the given files exist, are not directories, and contain the same bytes.
   *
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,equal,"com.google.common.io.MoreFiles:equal(java.nio.file.Path,java.nio.file.Path)",363,383,"/**
 * Checks if two paths are equal, using file size and content comparison.
 */","* Returns true if the files located by the given paths exist, are not directories, and contain
   * the same bytes.
   *
   * @throws IOException if an I/O error occurs
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,write,"com.google.common.io.Files:write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",282,288,"/**
 * Writes a CharSequence to a file using a specified charset.
 * @param from CharSequence to write
 * @param to File to write to
 * @param charset Charset for encoding
 */
","* Writes a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to write
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset).write(from)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,append,"com.google.common.io.Files:append(java.lang.CharSequence,java.io.File,java.nio.charset.Charset)",358,365,"/**
 * Appends a CharSequence to a file using a specified charset.
 * @param from CharSequence to append
 * @param to File to append to
 * @param charset Charset for encoding
 */
","* Appends a character sequence (such as a string) to a file using the given character set.
   *
   * @param from the character sequence to append
   * @param to the destination file
   * @param charset the charset used to encode the output stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSink(to, charset, FileWriteMode.APPEND).write(from)}. This
   *     method is scheduled to be removed in October 2019.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,length,com.google.common.io.CharSource$ConcatenatedCharSource:length(),723,730,"/**
 * Returns the total length of all sources.
 * Returns the sum of the lengths of all CharSource objects.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,copy,"com.google.common.io.Files:copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)",338,345,"/**
 * Copies a file's content to an Appendable, using the given charset.
 */","* Copies all characters from a file to an appendable object, using the given character set.
   *
   * @param from the source file
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param to the appendable object
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(from, charset).copyTo(to)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readFirstLine,"com.google.common.io.Files:readFirstLine(java.io.File,java.nio.charset.Charset)",519,526,"/**
 * Reads the first line from a file using the specified charset.
 * @param file The file to read.
 * @param charset The character encoding to use.
 * @return The first line or null if the file is empty.
 */
","* Reads the first line from a file. The line does not include line-termination characters, but
   * does include other leading and trailing whitespace.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return the first line, or null if the file is empty
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readFirstLine()}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset)",544,563,"/**
 * Reads all lines from a file using the specified charset.
 * @param file The file to read.
 * @param charset The character encoding to use.
 * @return A list of strings, each representing a line.
 */
","* Reads all of the lines from a file. The lines do not include line-termination characters, but
   * do include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Files.asCharSource(file, charset).readLines()}.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link
   * java.nio.file.Files#readAllLines(java.nio.file.Path, Charset)}.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,readLines,"com.google.common.io.Files:readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)",577,587,"/**
 * Reads lines from a file using a LineProcessor.
 * @param file File to read.
 * @param charset Charset to use.
 * @param callback LineProcessor to process each line.
 * @return Result of the LineProcessor.
 */
","* Streams lines from a {@link File}, stopping when our callback returns false, or we have read
   * all of the lines.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the {@link LineProcessor} to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).readLines(callback)}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)",122,127,"/**
 * Reads lines from a URL using a charset and processor.
 * @param url URL to read from. @param charset Charset to use.
 * @param callback Processor for each line.
 * @return Result of the processor, or null.
 */
","* Streams lines from a URL, stopping when our callback returns false, or we have read all of the
   * lines.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @param callback the LineProcessor to use to handle the lines
   * @return the output of processing the lines
   * @throws IOException if an I/O error occurs",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,isEmpty,com.google.common.io.CharSource$ConcatenatedCharSource:isEmpty(),700,708,"/**
 * Checks if all sources are empty.
 * Returns true if all sources are empty, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode)",668,670,"/**
 * Maps a file into memory.
 * @param file The file to map.
 * @param mode The mapping mode (e.g., READ_ONLY).
 * @throws IOException If an I/O error occurs.
 */
","* Fully maps a file in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)} using the requested {@link
   * MapMode}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,"com.google.common.io.Files:map(java.io.File,java.nio.channels.FileChannel$MapMode,long)",691,694,"/**
 * Maps a file into memory.
 * @param file The file to map.
 * @param mode The mapping mode.
 * @param size The size of the mapping.
 * @return A MappedByteBuffer object.
 * @throws IOException If an I/O error occurs.
 */
","* Maps a file in to memory as per {@link FileChannel#map(java.nio.channels.FileChannel.MapMode,
   * long, long)} using the requested {@link MapMode}.
   *
   * <p>Files are mapped from offset 0 to {@code size}.
   *
   * <p>If the mode is {@link MapMode#READ_WRITE} and the file does not exist, it will be created
   * with the requested {@code size}. Thus this method is useful for creating memory mapped files
   * which do not yet exist.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @param mode the mode to use when mapping {@code file}
   * @return a buffer reflecting {@code file}
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",238,244,"/**
 * Creates an ExecutorService for graceful executor shutdown.
 * @param executor ThreadPoolExecutor to manage
 * @return ExecutorService for controlled termination
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",250,256,"/**
 * Creates and configures a ScheduledExecutorService.
 * @param executor Base executor, timeout, and time unit are used.
 * @return Configured ScheduledExecutorService.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,long,java.util.concurrent.TimeUnit)",224,230,"/**
 * Adds a delayed shutdown hook to the given ExecutorService.
 * @param service ExecutorService to shutdown.
 * @param terminationTimeout Termination timeout.
 * @param timeUnit Time unit for termination timeout.
 */
","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeValueFromChain,"com.google.common.cache.LocalCache$Segment:removeValueFromChain(com.google.common.cache.ReferenceEntry,com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,com.google.common.cache.LocalCache$ValueReference,com.google.common.cache.RemovalCause)",3240,3259,"/**
 * Removes a value from the chain and notifies listeners.
 * @param first First entry in the chain.
 * @return Updated first entry or null.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeLoadingValue,"com.google.common.cache.LocalCache$Segment:removeLoadingValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference)",3372,3404,"/**
 * Removes a loading value from the map if it matches the key/hash.
 * @param key The key of the value to remove.
 * @param hash Hash code of the key.
 * @param valueReference The reference to the value to remove.
 * @return True if a value was removed, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(),583,590,"/**
 * Blocks until the component is healthy, then releases.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager$ServiceManagerState:awaitHealthy(long,java.util.concurrent.TimeUnit)",592,605,"/**
 * Waits for services to become healthy within a timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit for the timeout.
 * @throws TimeoutException if services don't become healthy.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,filterValues,"com.google.common.collect.Multimaps:filterValues(com.google.common.collect.Multimap,com.google.common.base.Predicate)",2106,2109,"/**
 * Filters a multimap's values based on the given predicate.
 * @param unfiltered Multimap to filter.
 * @param valuePredicate Predicate to apply to each value.
 * @return A new multimap with filtered values.
 */
","* Returns a multimap containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned multimap is a live view of {@code unfiltered}; changes to one affect
   * the other.
   *
   * <p>The resulting multimap's views have iterators that don't support {@code remove()}, but all
   * other methods are supported by the multimap and its views. When adding a value that doesn't
   * satisfy the predicate, the multimap's {@code put()}, {@code putAll()}, and {@code
   * replaceValues()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * multimap or its views, only mappings whose value satisfy the filter will be removed from the
   * underlying multimap.
   *
   * <p>The returned multimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered multimap's methods, such as {@code size()}, iterate across every
   * key/value mapping in the underlying multimap and determine which satisfy the filter. When a
   * live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the
   * copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,compound,com.google.common.collect.Ordering:compound(java.lang.Iterable),508,511,"/**
 * Creates a compound ordering from an iterable of comparators.
 * @param comparators Comparators to combine for ordering.
 * @return A CompoundOrdering instance.
 */
","* Returns an ordering which tries each given comparator in order until a non-zero result is
   * found, returning that result, and returning zero only if all comparators return zero. The
   * returned ordering is based on the state of the {@code comparators} iterable at the time it was
   * provided to this method.
   *
   * <p>The returned ordering is equivalent to that produced using {@code
   * Ordering.from(comp1).compound(comp2).compound(comp3) . . .}.
   *
   * <p>The returned object is serializable if each of the {@code comparators} is serializable.
   *
   * <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a {@link
   * HashSet}, will produce non-deterministic results.
   *
   * <p><b>Java 8+ users:</b> Use a chain of calls to {@link Comparator#thenComparing(Comparator)},
   * or {@code comparatorCollection.stream().reduce(Comparator::thenComparing).get()} (if the
   * collection might be empty, also provide a default comparator as the {@code identity} parameter
   * to {@code reduce}).
   *
   * @param comparators the comparators to try in order",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,copyOf,com.google.common.collect.ImmutableBiMap:copyOf(java.util.Map),534,545,"/**
 * Returns a copy of the map as an ImmutableBiMap.
 * @param map The map to copy.
 * @return A new ImmutableBiMap containing the map's entries.
 */
","* Returns an immutable bimap containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>The returned {@code BiMap} iterates over entries in the same order as the {@code entrySet}
   * of the original map.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws IllegalArgumentException if two keys have the same value or two values have the same
   *     key
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:startupTimes(),641,659,"/**
 * Returns startup times of services, sorted by duration.
 * @return ImmutableMap of Service to startup time in milliseconds.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toArray,com.google.common.collect.FluentIterable:toArray(java.lang.Class),779,782,"/**
 * Converts the iterable to an array of the specified type.
 * @param type The type of the array to be created.
 * @return An array containing the elements of the iterable.
 */
","* Returns an array containing all of the elements from this fluent iterable in iteration order.
   *
   * <p><b>{@code Stream} equivalent:</b> if an object array is acceptable, use {@code
   * stream.toArray()}; if {@code type} is a class literal such as {@code MyType.class}, use {@code
   * stream.toArray(MyType[]::new)}. Otherwise use {@code stream.toArray( len -> (E[])
   * Array.newInstance(type, len))}.
   *
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of this fluent iterable have been
   *     copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Iterators.java,toArray,"com.google.common.collect.Iterators:toArray(java.util.Iterator,java.lang.Class)",350,355,"/**
 * Converts an iterator to an array of the specified type.
 * @param iterator Iterator to convert.
 * @param type Array component type.
 * @return Array containing elements from the iterator.
 */
","* Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code
   * hasNext()} method will return {@code false}.
   *
   * @param iterator the iterator to copy
   * @param type the type of the elements
   * @return a newly-allocated array into which all the elements of the iterator have been copied",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedSet,com.google.common.collect.FluentIterable:toSortedSet(java.util.Comparator),669,672,"/**
 * Returns a sorted set from this multiset, using the given comparator.
 */
","* Returns an {@code ImmutableSortedSet} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}, with duplicates (determined by
   * {@code comparator.compare(x, y) == 0}) removed. To produce an {@code ImmutableSortedSet} sorted
   * by its natural ordering, use {@code toSortedSet(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSortedSet#toImmutableSortedSet} to
   * {@code stream.collect()}.
   *
   * @param comparator the function by which to sort set elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSortedSet()}).",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.lang.Iterable),214,220,"/**
 * Creates an ImmutableSortedSet from the given iterable.
 * Uses natural ordering of elements.
 */
","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Collection)",328,331,"/**
 * Creates an immutable sorted set from a collection.
 * @param comparator Comparator for sorting elements.
 * @param elements Collection to create the set from.
 */
","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersects,com.google.common.collect.ImmutableRangeSet:intersects(com.google.common.collect.Range),162,180,"/**
 * Checks if this range intersects with another range.
 * @param otherRange The range to check for intersection.
 * @return True if an intersection exists, false otherwise.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,encloses,com.google.common.collect.ImmutableRangeSet:encloses(com.google.common.collect.Range),182,193,"/**
 * Checks if this range encloses the given range.
 * @param otherRange The range to check for enclosure.
 * @return True if this range encloses the other range.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,rangeContaining,com.google.common.collect.ImmutableRangeSet:rangeContaining(java.lang.Comparable),195,210,"/**
 * Finds the range containing the given value.
 * @param value The value to check.
 * @return The containing range or null if not found.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingListMultimap.java,removeAll,com.google.common.collect.ForwardingListMultimap:removeAll(java.lang.Object),51,55,"/**
 * Removes all elements associated with the given key.
 * @param key The key to remove elements for.
 * @return List of removed elements.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,removeAll,com.google.common.collect.Synchronized$SynchronizedListMultimap:removeAll(java.lang.Object),809,814,"/**
 * Removes all values associated with the given key.
 * @param key The key to remove values for.
 * @return List of removed values.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:headMap(java.lang.Object),2310,2313,"/**
 * Returns a view of the map's entries with keys strictly less than toKey.
 * @param toKey The exclusive endpoint for the head map.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$TransformedEntriesNavigableMap:subMap(java.lang.Object,java.lang.Object)",2370,2373,"/**
* Returns a sub-map with keys between fromKey (inclusive) and toKey (exclusive).
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$TransformedEntriesNavigableMap:tailMap(java.lang.Object),2375,2378,"/**
 * Returns a tail map with keys >= fromKey.
 * @param fromKey the key from which to start the tail map
 * @return a tail map containing entries with keys >= fromKey
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RowSortedTable.java,rowMap,com.google.common.collect.RowSortedTable:rowMap(),55,56,"/**
 * Returns a sorted map of rows, mapping row keys to column-value maps.
 */","* {@inheritDoc}
   *
   * <p>This method returns a {@link SortedMap}, instead of the {@code Map} specified in the {@link
   * Table} interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,combine,"com.google.common.collect.TableCollectors$ImmutableTableCollectorState:combine(com.google.common.collect.TableCollectors$ImmutableTableCollectorState,java.util.function.BinaryOperator)",157,164,"/**
 * Combines this state with another, merging values using the merger.
 * @param other The state to combine with.
 * @param merger The BinaryOperator to merge values.
 * @return This state after combining.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,toString,com.google.common.net.MediaType:toString(),1225,1234,"/**
 * Returns a string representation of the object, using lazy computation.
 */
","* Returns the string representation of this media type in the format described in <a
   * href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,descendingMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:descendingMap(),1642,1650,"/**
 * Returns a descending view of the map, sorted by keys.
 * Uses a synchronized wrapper to ensure thread safety.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object,boolean)",1673,1678,"/**
 * Returns a view of the map's entries with keys strictly less than toKey.
 * @param toKey the exclusive key
 * @return NavigableMap containing the head map
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",1751,1757,"/**
 * Returns a submap containing entries within the specified range.
 * @param fromKey start key (inclusive or exclusive)
 * @param toKey end key (inclusive or exclusive)
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object,boolean)",1764,1769,"/**
 * Returns a tail map with keys >= fromKey (inclusive).
 * @param fromKey Key from which to start the tail map.
 * @return Tail map view.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,navigableMap,com.google.common.collect.Synchronized:navigableMap(java.util.NavigableMap),1587,1591,"/**
 * Returns a copy of the navigable map, or the original if null.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,synchronizedSortedSetMultimap,com.google.common.collect.Multimaps:synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap),957,961,"/**
 * Returns a synchronized SortedSetMultimap.
 * @param multimap The SortedSetMultimap to synchronize.
 * @return A synchronized SortedSetMultimap.
 */
","* Returns a synchronized (thread-safe) {@code SortedSetMultimap} backed by the specified
   * multimap.
   *
   * <p>You must follow the warnings described in {@link #synchronizedMultimap}.
   *
   * <p>The returned multimap will be serializable if the specified multimap is serializable.
   *
   * @param multimap the multimap to be wrapped
   * @return a synchronized view of the specified multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,read,com.google.common.io.CharSource:read(),290,300,"/**
 * Reads the entire content from the stream as a String.
 * @throws IOException if an I/O error occurs.
 */
","* Reads the contents of this source as a string.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAsync,"com.google.common.cache.LocalCache$Segment:loadAsync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2307,2324,"/**
 * Loads a value asynchronously.
 * @param key The key to load.
 * @return A ListenableFuture representing the load process.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,createWithExpectedSize,com.google.common.collect.CompactLinkedHashMap:createWithExpectedSize(int),76,79,"/**
 * Creates a new CompactLinkedHashMap with the specified expected size.
 */
","* Creates a {@code CompactLinkedHashMap} instance, with a high enough ""initial capacity"" that it
   * <i>should</i> hold {@code expectedSize} elements without rebuilding internal data structures.
   *
   * @param expectedSize the number of elements you expect to add to the returned set
   * @return a new, empty {@code CompactLinkedHashMap} with enough capacity to hold {@code
   *     expectedSize} elements without resizing
   * @throws IllegalArgumentException if {@code expectedSize} is negative",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,<init>,com.google.common.collect.CompactLinkedHashMap:<init>(),102,104,"/**
 * Constructs a CompactLinkedHashMap with the default initial size.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashSet.java,create,com.google.common.collect.CompactLinkedHashSet:create(java.util.Collection),67,72,"/**
 * Creates a CompactLinkedHashSet from a collection.
 * @param collection Collection to create the set from.
 * @return A new CompactLinkedHashSet containing collection elements.
 */
","* Creates a <i>mutable</i> {@code CompactLinkedHashSet} instance containing the elements of the
   * given collection in the order returned by the collection's iterator.
   *
   * @param collection the elements that the set should contain
   * @return a new {@code CompactLinkedHashSet} containing those elements (minus duplicates)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(),84,87,"/**
 * Creates a new TreeMultimap with natural ordering for keys/values.
 */
",* Creates an empty {@code TreeMultimap} ordered by the natural ordering of its keys and values.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,"com.google.common.collect.TreeMultimap:create(java.util.Comparator,java.util.Comparator)",96,99,"/**
 * Creates a new TreeMultimap with specified key and value comparators.
 */
","* Creates an empty {@code TreeMultimap} instance using explicit comparators. Neither comparator
   * may be null; use {@link Ordering#natural()} to specify natural order.
   *
   * @param keyComparator the comparator that determines the key ordering
   * @param valueComparator the comparator that determines the value ordering",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,<init>,"com.google.common.collect.TreeMultimap:<init>(java.util.Comparator,java.util.Comparator,com.google.common.collect.Multimap)",119,125,"/**
 * Constructs a TreeMultimap from a Multimap.
 * @param keyComparator Comparator for keys
 * @param valueComparator Comparator for values
 * @param multimap Multimap to copy from
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
 * Creates a new artificial type variable with given upper bounds.
 * @param upperBounds Type array representing the upper bounds.
 * @return A new artificial type variable.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,readObject,com.google.common.collect.MapMakerInternalMap$SerializationProxy:readObject(java.io.ObjectInputStream),2899,2905,"/**
 * Deserializes the object from the input stream.
 * Reads MapMaker, initializes delegate, and entries.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,<init>,com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode:<init>(java.lang.String),600,602,"/**
 * Constructs a LockGraphNode with the given lock name.
 * @param lockName The name of the lock. Must not be null.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Striped.java,<init>,"com.google.common.util.concurrent.Striped$LargeLazyStriped:<init>(int,com.google.common.base.Supplier)",480,485,"/**
 * Constructs a LargeLazyStriped with given stripes and supplier.
 * @param stripes number of stripes
 * @param supplier supplier for creating L objects
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractFuture.java,get,"com.google.common.util.concurrent.AbstractFuture$TrustedFuture:get(long,java.util.concurrent.TimeUnit)",99,105,"/**
* Gets the value with a specified timeout.
* @param timeout Timeout duration
* @param unit Time unit for the timeout
* @return The value or null if timed out.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,addNode,com.google.common.graph.StandardMutableValueGraph:addNode(java.lang.Object),60,71,"/**
 * Adds a node to the set. Returns true if added, false otherwise.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(java.lang.Object,java.lang.Object,java.lang.Object)",85,110,"/**
 * Adds an edge between nodes with a given value.
 * @param nodeU Source node.
 * @param nodeV Destination node.
 * @param value Edge value.
 * @return Previous value of the edge, or null if new.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doForward,com.google.common.base.CaseFormat$StringConverter:doForward(java.lang.String),178,181,"/**
* Forwards the input string, converting its format.
* @param s The string to forward and convert.
* @return The converted string.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CaseFormat.java,doBackward,com.google.common.base.CaseFormat$StringConverter:doBackward(java.lang.String),183,186,"/**
 * Converts a string from the source format to the target format.
 * @param s The string to convert.
 * @return The converted string.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAllOf,com.google.common.base.CharMatcher$Negated:matchesAllOf(java.lang.CharSequence),1530,1533,"/**
* Checks if the original string matches none of the characters in sequence.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,matchesAnyOf,com.google.common.base.CharMatcher:matchesAnyOf(java.lang.CharSequence),496,498,"/**
 * Checks if the sequence matches any of the defined patterns.
 * @param sequence CharSequence to check against patterns.
 * @return True if any pattern matches, false otherwise.
 */
","* Returns {@code true} if a character sequence contains at least one matching BMP character.
   * Equivalent to {@code !matchesNoneOf(sequence)}.
   *
   * <p>The default implementation iterates over the sequence, invoking {@link #matches} for each
   * character, until this returns {@code true} or the end is reached.
   *
   * @param sequence the character sequence to examine, possibly empty
   * @return {@code true} if this matcher matches at least one character in the sequence
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,retainFrom,com.google.common.base.CharMatcher:retainFrom(java.lang.CharSequence),657,659,"/**
 * Removes the negated sequence from the given sequence.
 * @param sequence CharSequence to remove from.
 * @return The resulting CharSequence.
 */
","* Returns a string containing all matching BMP characters of a character sequence, in order. For
   * example:
   *
   * {@snippet :
   * CharMatcher.is('a').retainFrom(""bazaar"")
   * }
   *
   * ... returns {@code ""aaa""}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,replaceFrom,"com.google.common.base.CharMatcher:replaceFrom(java.lang.CharSequence,java.lang.CharSequence)",714,742,"/**
* Replaces occurrences of a sequence with a replacement sequence.
* @param sequence The sequence to be replaced.
* @param replacement The replacement sequence.
*/
","* Returns a string copy of the input character sequence, with each matching BMP character
   * replaced by a given replacement sequence. For example:
   *
   * {@snippet :
   * CharMatcher.is('a').replaceFrom(""yaha"", ""oo"")
   * }
   *
   * ... returns {@code ""yoohoo""}.
   *
   * <p><b>Note:</b> If the replacement is a fixed string with only one character, you are better
   * off calling {@link #replaceFrom(CharSequence, char)} directly.
   *
   * @param sequence the character sequence to replace matching characters in
   * @param replacement the characters to append to the result string in place of each matching
   *     character in {@code sequence}
   * @return the new string",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,getCoercedIPv4Address,com.google.common.net.InetAddresses:getCoercedIPv4Address(java.net.InetAddress),997,1039,"/**
 * Coerces an InetAddress to an Inet4Address, handling special cases.
 * @param ip The InetAddress to coerce.
 * @return An Inet4Address representation of the input.
 */
","* Coerces an IPv6 address into an IPv4 address.
   *
   * <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables,
   * accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses.
   * This method does so by hashing 64 bits of the IPv6 address into {@code 224.0.0.0/3} (64 bits
   * into 29 bits):
   *
   * <ul>
   *   <li>If the IPv6 address contains an embedded IPv4 address, the function hashes that.
   *   <li>Otherwise, it hashes the upper 64 bits of the IPv6 address.
   * </ul>
   *
   * <p>A ""coerced"" IPv4 address is equivalent to itself.
   *
   * <p>NOTE: This method is failsafe for security purposes: ALL IPv6 addresses (except localhost
   * (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4
   * address that might permit elevated privileges.
   *
   * @param ip {@link InetAddress} to ""coerce""
   * @return {@link Inet4Address} represented ""coerced"" address
   * @since 7.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Murmur3_32HashFunction.java,putString,"com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher:putString(java.lang.CharSequence,java.nio.charset.Charset)",353,397,"/**
* Puts a string into the hasher using UTF-8 encoding.
* @param input CharSequence to hash
* @param charset Charset to use for encoding
* @return Hasher object (for chaining)
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/Hasher.java,putBytes,com.google.common.hash.AbstractCompositeHashFunction$1:putBytes(byte[]),62,64,"/**
 * Puts bytes into the hasher.
 * @param bytes The byte array to hash.
 * @return The hasher instance.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/AbstractHashFunction.java,hashBytes,com.google.common.hash.AbstractHashFunction:hashBytes(byte[]),59,62,"/**
 * Calculates the hash code of a byte array.
 * @param input The byte array to hash.
 * @return HashCode object representing the hash.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/LittleEndianDataInputStream.java,readFully,com.google.common.io.LittleEndianDataInputStream:readFully(byte[]),63,66,"/**
 * Reads all bytes from the stream into the provided byte array.
 * @param b the byte array to fill
 * @throws IOException if an I/O error occurs
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,iterator,com.google.common.collect.ForwardingCollection:iterator(),59,62,"/**
 * Returns an iterator for the list.
 * Delegates to the underlying list's iterator.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,size,com.google.common.collect.ForwardingCollection:size(),64,67,"/**
 * Returns the number of elements in this collection.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,removeAll,com.google.common.collect.ForwardingCollection:removeAll(java.util.Collection),69,73,"/**
 * Removes all elements from the collection if they are contained in the given collection.
 * @param collection Collection containing elements to be removed.
 * @return True if the collection was modified, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,isEmpty,com.google.common.collect.ForwardingCollection:isEmpty(),75,78,"/**
 * Checks if the underlying collection is empty.
 * Delegates to the underlying collection's isEmpty() method.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,contains,com.google.common.collect.ForwardingCollection:contains(java.lang.Object),80,83,"/**
 * Checks if the collection contains the given object.
 * @param object The object to search for.
 * @return True if the object is present, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,add,com.google.common.collect.ForwardingCollection:add(java.lang.Object),85,89,"/**
 * Adds an element to the delegate collection.
 * @param element The element to add.
 * @return True if the addition was successful, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,remove,com.google.common.collect.ForwardingCollection:remove(java.lang.Object),91,95,"/**
 * Removes the specified object from the delegate collection.
 * @param object The object to remove. Returns true if removed.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,containsAll,com.google.common.collect.ForwardingCollection:containsAll(java.util.Collection),97,100,"/**
* Checks if this collection contains all elements of the given collection.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,addAll,com.google.common.collect.ForwardingCollection:addAll(java.util.Collection),102,106,"/**
 * Adds all elements from the given collection to the delegate.
 * @param collection Collection of elements to add
 * @return True if the delegate was modified, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,retainAll,com.google.common.collect.ForwardingCollection:retainAll(java.util.Collection),108,112,"/**
 * Retains elements present in the specified collection.
 * @param collection Collection to filter elements against.
 * @return True if the set was modified, false otherwise.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,clear,com.google.common.collect.ForwardingCollection:clear(),114,117,"/**
 * Clears the collection by delegating to the underlying collection.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(),119,122,"/**
 * Converts this collection to an array.
 * @return An array containing all collection elements.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,toArray,com.google.common.collect.ForwardingCollection:toArray(java.lang.Object[]),124,129,"/**
 * Copies elements to the provided array.
 * @param array the array to copy to, can be null
 * @return the provided array with copied elements
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/RateLimiter.java,create,"com.google.common.util.concurrent.RateLimiter:create(double,java.time.Duration)",165,167,"/**
 * Creates a RateLimiter with given permits/second and warmup.
 * @param permitsPerSecond Rate of requests allowed per second.
 * @param warmupPeriod Duration to warm up the rate limiter.
 */
","* Creates a {@code RateLimiter} with the specified stable throughput, given as ""permits per
   * second"" (commonly referred to as <i>QPS</i>, queries per second), and a <i>warmup period</i>,
   * during which the {@code RateLimiter} smoothly ramps up its rate, until it reaches its maximum
   * rate at the end of the period (as long as there are enough requests to saturate it). Similarly,
   * if the {@code RateLimiter} is left <i>unused</i> for a duration of {@code warmupPeriod}, it
   * will gradually return to its ""cold"" state, i.e. it will go through the same warming up process
   * as when it was first created.
   *
   * <p>The returned {@code RateLimiter} is intended for cases where the resource that actually
   * fulfills the requests (e.g., a remote server) needs ""warmup"" time, rather than being
   * immediately accessed at the stable (maximum) rate.
   *
   * <p>The returned {@code RateLimiter} starts in a ""cold"" state (i.e. the warmup period will
   * follow), and if it is left unused for long enough, it will return to that state.
   *
   * @param permitsPerSecond the rate of the returned {@code RateLimiter}, measured in how many
   *     permits become available per second
   * @param warmupPeriod the duration of the period where the {@code RateLimiter} ramps up its rate,
   *     before reaching its stable (maximum) rate
   * @throws IllegalArgumentException if {@code permitsPerSecond} is negative or zero or {@code
   *     warmupPeriod} is negative
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,headMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",97,100,"/**
 * Returns a sorted multiset containing elements less than or equal to upperBound.
 * @param upperBound The upper bound for elements in the multiset.
 * @param boundType The bound type (inclusive or exclusive).
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,subMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:subMultiset(java.lang.Object,com.google.common.collect.BoundType,java.lang.Object,com.google.common.collect.BoundType)",102,110,"/**
 * Returns a view of the multiset containing elements between bounds.
 * @param lowerBound Lower bound (inclusive).
 * @param upperBound Upper bound (inclusive).
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,tailMultiset,"com.google.common.collect.UnmodifiableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",112,115,"/**
 * Returns a tail multiset from the sorted set, inclusive of lowerBound.
 * @param lowerBound lower bound for the tail multiset
 * @param boundType inclusion bound type (inclusive/exclusive)
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,unmodifiableCollectionSubclass,com.google.common.collect.AbstractSortedSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),59,67,"/**
 * Returns an unmodifiable SortedSet view of the given collection.
 * Handles NavigableSet and SortedSet types.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,navigableKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:navigableKeySet(),3597,3600,"/**
 * Returns a navigable set view of the keys, unmodifiable.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingKeySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:descendingKeySet(),3602,3605,"/**
 * Returns a descending key set, unmodifiable.
 * Delegates to the underlying set's descending key set.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomMultimap:unmodifiableCollectionSubclass(java.util.Collection),240,254,"/**
* Returns an unmodifiable view of the given collection.
* Uses specialized unmodifiable methods if possible.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,unmodifiableCollectionSubclass,com.google.common.collect.Multimaps$CustomSetMultimap:unmodifiableCollectionSubclass(java.util.Collection),447,457,"/**
 * Returns an unmodifiable view of the collection, type-safe.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,subSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:subSet(java.lang.Object,boolean,java.lang.Object,boolean)",2042,2050,"/**
 * Returns a view of the set between {@code fromElement} and {@code toElement}.
 * @param fromElement start element (inclusive or exclusive)
 * @param toElement end element (inclusive or exclusive)
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,headSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:headSet(java.lang.Object,boolean)",2052,2055,"/**
 * Returns a headSet view of the set, up to `toElement`.
 * @param toElement element to end the view, inclusive if specified
 * @param inclusive whether to include `toElement` in the view
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,tailSet,"com.google.common.collect.Sets$UnmodifiableNavigableSet:tailSet(java.lang.Object,boolean)",2057,2060,"/**
 * Returns a tail set from the specified element, inclusive.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/UnmodifiableSortedMultiset.java,createElementSet,com.google.common.collect.UnmodifiableSortedMultiset:createElementSet(),54,57,"/**
 * Returns an unmodifiable navigable set of elements.
 * Uses the delegate's element set.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SetMultimap.java,entries,com.google.common.collect.SetMultimap:entries(),97,98,"/**
 * Returns a Set of Map.Entry objects representing the map's entries.
 */","* {@inheritDoc}
   *
   * <p>Because a {@code SetMultimap} has unique values for a given key, this method returns a
   * {@link Set}, instead of the {@link java.util.Collection} specified in the {@link Multimap}
   * interface.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$UnmodifiableNavigableMap:subMap(java.lang.Object,java.lang.Object)",3607,3610,"/**
 * Returns a sorted map containing entries with keys between fromKey and toKey.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:headMap(java.lang.Object),3622,3625,"/**
 * Returns a sorted map containing entries whose keys are less than toKey.
 * @param toKey the key to which all keys are less than
 * @return a sorted map with keys less than toKey
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$UnmodifiableNavigableMap:tailMap(java.lang.Object),3632,3635,"/**
 * Returns a sorted map with keys >= fromKey (inclusive).
 * @param fromKey the key from which to start the tail map
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",43,44,"/**
 * Schedules a task for future execution after a specified delay.
 * @param command Runnable task to execute.
 * @param delay Delay before execution.
 * @param unit Time unit of the delay.
 * @return ListenableScheduledFuture representing the scheduled task.
 */
",* @since 15.0 (previously returned ScheduledFuture),,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(com.google.common.cache.CacheLoader),1029,1033,"/**
 * Creates a LoadingCache using the provided CacheLoader.
 * @param loader Loads values for the cache.
 * @return A new LoadingCache instance.
 */
","* Builds a cache, which either returns an already-loaded value for a given key or atomically
   * computes or retrieves it using the supplied {@code CacheLoader}. If another thread is currently
   * loading the value for this key, simply waits for that thread to finish and returns its loaded
   * value. Note that multiple threads can concurrently load values for distinct keys.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @param loader the cache loader used to obtain new values
   * @return a cache having the requested features",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,build,com.google.common.cache.CacheBuilder:build(),1047,1051,"/**
 * Builds a local cache instance based on this cache configuration.
 * @return A LocalCache instance.
 */
","* Builds a cache which does not automatically load values when keys are requested.
   *
   * <p>Consider {@link #build(CacheLoader)} instead, if it is feasible to implement a {@code
   * CacheLoader}.
   *
   * <p>This method does not alter the state of this {@code CacheBuilder} instance, so it can be
   * invoked again to create multiple independent caches.
   *
   * @return a cache having the requested features
   * @since 11.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,orderedBy,com.google.common.collect.ImmutableSortedMultiset:orderedBy(java.util.Comparator),407,409,"/**
 * Creates a Builder with the given comparator for ordering.
 * @param comparator Comparator to define the order.
 * @return A new Builder instance.
 */
","* Returns a builder that creates immutable sorted multisets with an explicit comparator. If the
   * comparator has a more general type than the set being generated, such as creating a {@code
   * SortedMultiset<Integer>} with a {@code Comparator<Number>}, use the {@link Builder} constructor
   * instead.
   *
   * @throws NullPointerException if {@code comparator} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,reverseOrder,com.google.common.collect.ImmutableSortedMultiset:reverseOrder(),419,421,"/**
 * Returns a builder that sorts elements in reverse natural order.
 */
","* Returns a builder that creates immutable sorted multisets whose elements are ordered by the
   * reverse of their natural ordering.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,naturalOrder,com.google.common.collect.ImmutableSortedMultiset:naturalOrder(),433,435,"/**
 * Creates a Builder using the natural ordering of elements.
 * @return A Builder instance with natural ordering.
 */
","* Returns a builder that creates immutable sorted multisets whose elements are ordered by their
   * natural ordering. The sorted multisets use {@link Ordering#natural()} as the comparator. This
   * method provides more type-safety than {@link #builder}, as it can be called only for classes
   * that implement {@link Comparable}.
   *
   * <p>Note: the type parameter {@code E} extends {@code Comparable<?>} rather than {@code
   * Comparable<? super E>} in order to accommodate users of obsolete javac versions affected by <a
   * href=""https://bugs.openjdk.org/browse/JDK-6468354"">JDK-6468354</a>.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumBiMap.java,create,com.google.common.collect.EnumBiMap:create(java.util.Map),83,88,"/**
 * Creates a new EnumBiMap from a Map.
 * @param map The map to initialize the EnumBiMap with.
 * @return A new EnumBiMap containing the map's entries.
 */
","* Returns a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumBiMap}, the new bimap has the same types as the provided map. Otherwise, the
   * specified map must contain at least one mapping, in order to determine the key and value types.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} instance and contains no
   *     mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/EnumHashBiMap.java,create,com.google.common.collect.EnumHashBiMap:create(java.util.Map),71,76,"/**
 * Creates a new EnumHashBiMap from a given map.
 * @param map The map to initialize the BiMap with.
 * @return A new EnumHashBiMap containing the map's entries.
 */
","* Constructs a new bimap with the same mappings as the specified map. If the specified map is an
   * {@code EnumHashBiMap} or an {@link EnumBiMap}, the new bimap has the same key type as the input
   * bimap. Otherwise, the specified map must contain at least one mapping, in order to determine
   * the key type.
   *
   * @param map the map whose mappings are to be placed in this map
   * @throws IllegalArgumentException if map is not an {@code EnumBiMap} or an {@code EnumHashBiMap}
   *     instance and contains no mappings",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SortedSetMultimap.java,replaceValues,"com.google.common.collect.SortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",88,90,"/**
 * Replaces the values associated with the given key.
 * @param key The key whose values are to be replaced.
 * @param values New values to replace the old ones.
 * @return The previous values associated with the key.
 */
","* Stores a collection of values with the same key, replacing any existing values for that key.
   *
   * <p>Because a {@code SortedSetMultimap} has unique sorted values for a given key, this method
   * returns a {@link SortedSet}, instead of the {@link java.util.Collection} specified in the
   * {@link Multimap} interface.
   *
   * <p>Any duplicates in {@code values} will be stored in the multimap once.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",62,66,"/**
 * Replaces values for a key using the delegate.
 * @param key The key for which to replace values.
 * @param values Iterable of new values to replace the old ones.
 * @return Set of replaced values.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,isPermutation,"com.google.common.collect.Collections2:isPermutation(java.util.List,java.util.List)",694,701,"/**
 * Checks if two lists are permutations of each other.
 * @param first The first list.
 * @param second The second list.
 * @return True if lists are permutations, false otherwise.
 */
",Returns {@code true} if the second list is a permutation of the first.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:predecessorsMultiset(),69,76,"/**
 * Returns a multiset of predecessors. Lazily initializes if null.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successorsMultiset,com.google.common.graph.DirectedMultiNetworkConnections:successorsMultiset(),85,92,"/**
 * Returns a Multiset of successors, caching for efficiency.
 * Returns a new Multiset if the cached one is null.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodesMultiset,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodesMultiset(),65,72,"/**
 * Returns a Multiset of adjacent nodes, caching for efficiency.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(),77,80,"/**
 * Creates a new, empty ArrayListMultimap with nullable keys/values.
 */","* Creates a new, empty {@code ArrayListMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayListMultimap.java,create,com.google.common.collect.ArrayListMultimap:create(com.google.common.collect.Multimap),109,112,"/**
 * Creates an ArrayListMultimap from a given Multimap.
 * @param multimap The Multimap to copy.
 * @return A new ArrayListMultimap containing the data.
 */
","* Constructs an {@code ArrayListMultimap} with the same mappings as the specified multimap.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().arrayListValues().build(multimap)}, which provides more control over
   * the underlying data structure.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/HashMultimap.java,create,com.google.common.collect.HashMultimap:create(),66,69,"/**
 * Creates a new, empty HashMultimap.
 * Returns a HashMultimap with no entries.
 */
","* Creates a new, empty {@code HashMultimap} with the default initial capacities.
   *
   * <p>You may also consider the equivalent {@code
   * MultimapBuilder.hashKeys().hashSetValues().build()}, which provides more control over the
   * underlying data structure.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(),151,154,"/**
 * Creates a new, empty LinkedListMultimap.
 * Supports nullable keys and values.
 */
","Creates a new, empty {@code LinkedListMultimap} with the default initial capacity.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedListMultimap.java,create,com.google.common.collect.LinkedListMultimap:create(com.google.common.collect.Multimap),175,178,"/**
 * Creates a LinkedListMultimap from a given Multimap.
 * @param multimap The Multimap to copy.
 * @return A new LinkedListMultimap.
 */
","* Constructs a {@code LinkedListMultimap} with the same mappings as the specified {@code
   * Multimap}. The new multimap has the same {@link Multimap#entries()} iteration order as the
   * input multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/LinkedHashMultimap.java,create,com.google.common.collect.LinkedHashMultimap:create(com.google.common.collect.Multimap),119,124,"/**
 * Creates a LinkedHashMultimap from a given Multimap.
 * @param multimap the Multimap to copy from
 * @return a new LinkedHashMultimap containing the data.
 */
","* Constructs a {@code LinkedHashMultimap} with the same mappings as the specified multimap. If a
   * key-value mapping appears multiple times in the input multimap, it only appears once in the
   * constructed multimap. The new multimap has the same {@link Multimap#entries()} iteration order
   * as the input multimap, except for excluding duplicate mappings.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,build,com.google.common.graph.NetworkBuilder:build(),194,196,"/**
 * Creates a new MutableNetwork instance from the current builder.
 * @return A MutableNetwork object.
 */
",Returns an empty {@link MutableNetwork} with the properties of this {@link NetworkBuilder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,<init>,com.google.common.graph.StandardMutableGraph:<init>(com.google.common.graph.AbstractGraphBuilder),35,37,"/**
 * Constructs a StandardMutableGraph using the provided builder.
 * @param builder Graph builder to initialize the graph.
 */
",Constructs a {@link MutableGraph} with the properties specified in {@code builder}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,build,com.google.common.graph.ValueGraphBuilder:build(),189,191,"/**
 * Creates a new MutableValueGraph instance based on the current configuration.
 */
","* Returns an empty {@link MutableValueGraph} with the properties of this {@link
   * ValueGraphBuilder}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,putAll,com.google.common.collect.ImmutableTable$Builder:putAll(com.google.common.collect.Table),251,257,"/**
 * Adds all cells from the given table to this builder.
 * @param table The table to copy cells from.
 * @return This builder.
 */
","* Associates all of the given table's keys and values in the built table. Duplicate row key
     * column key pairs are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code table} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.lang.Iterable),395,400,"/**
* Adds all entries from the given iterable to the map.
* @param entries Iterable of entries to add.
* @return This builder for chaining.
*/
","* Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed,
     * and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,putAll,com.google.common.collect.ImmutableMap$Builder:putAll(java.util.Map),479,482,"/**
* Adds all entries from the given map to this builder.
* @param map map containing key-value pairs to add
* @return this builder
*/
","* Associates all of the given map's keys and values in the built map. If the same key is put
     * more than once, {@link #buildOrThrow} will fail, while {@link #buildKeepingLast} will keep
     * the last value put for that key.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.lang.Iterable),671,676,"/**
* Adds all entries from the given iterable to the map.
* @param entries Iterable of entries to add.
* @return This builder for chaining.
*/
","* Adds all the given entries to the built map. Duplicate keys, according to the comparator
     * (which might be the keys' natural order), are not allowed, and will cause {@link #build} to
     * fail.
     *
     * @throws NullPointerException if any key, value, or entry is null
     * @since 19.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap$AsMap:get(java.lang.Object),186,196,"/**
 * Retrieves a collection of values associated with the given key.
 * @param key The key to retrieve values for.
 * @return Collection of values or null if empty/not found.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,get,com.google.common.collect.FilteredEntryMultimap:get(java.lang.Object),124,127,"/**
 * Retrieves values associated with the given key, filtering them.
 * @param key The key to retrieve values for.
 * @return A filtered collection of values.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,createEntries,com.google.common.collect.FilteredEntryMultimap:createEntries(),129,132,"/**
 * Creates a filtered collection of entries from unfiltered entries.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
 * Removes entries from the map if the predicate is true.
 * @param predicate Predicate to apply to each map entry.
 * @return True if any entries were removed/modified.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate,com.google.common.collect.BiMap)",3377,3381,"/**
 * Constructs a FilteredEntryBiMap with a delegate, predicate, and inverse BiMap.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryNavigableMap:<init>(java.util.NavigableMap,com.google.common.base.Predicate)",3238,3243,"/**
 * Constructs a FilteredEntryNavigableMap with a filter predicate.
 * @param unfiltered The original navigable map.
 * @param entryPredicate Filter for map entries.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntrySortedMap:<init>(java.util.SortedMap,com.google.common.base.Predicate)",3126,3129,"/**
 * Constructs a FilteredEntrySortedMap with a predicate.
 * @param unfiltered The original sorted map.
 * @param entryPredicate Filter condition for map entries.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$AbstractFilteredMap,com.google.common.base.Predicate)",2803,2807,"/**
 * Filters an AbstractFilteredMap based on a predicate.
 * @param map The map to filter.
 * @param entryPredicate Filter condition for map entries.
 * @return A new filtered map.
 */
","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,degree,com.google.common.graph.AbstractNetwork:degree(java.lang.Object),144,151,"/**
 * Calculates the degree of a node.
 * @param node the node to calculate the degree of
 * @return the degree of the node
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgesConnecting,com.google.common.graph.AbstractNetwork:edgesConnecting(com.google.common.graph.EndpointPair),184,188,"/**
 * Returns edges connecting two nodes.
 * @param endpoints EndpointPair containing the two nodes.
 * @return Set of edges connecting the nodes.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,"com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(java.lang.Object,java.lang.Object)",205,216,"/**
 * Returns the edge connecting nodeU and nodeV, or null if none.
 * Throws exception if multiple edges connect the nodes.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,setValue,com.google.common.collect.CompactHashMap$MapEntry:setValue(java.lang.Object),934,950,"/**
* Sets the value associated with the key.
* @param value The new value to associate with the key.
* @return The previous value or null if the map is null.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashMap.java,readObject,com.google.common.collect.CompactHashMap:readObject(java.io.ObjectInputStream),1126,1140,"/**
 * Reads the object from the input stream during deserialization.
 * @param stream ObjectInputStream to read from.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactHashSet.java,readObject,com.google.common.collect.CompactHashSet:readObject(java.io.ObjectInputStream),707,720,"/**
 * Reads object stream to deserialize the collection.
 * @param stream ObjectInputStream to read from.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",209,227,"/**
 * Collects elements to an immutable sorted map.
 * @param comparator Comparator for keys.
 * @param keyFunction Function to extract key from element.
 * @param valueFunction Function to extract value from element.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",70,73,"/**
 * Returns a multiset containing elements less than or equal to upperBound.
 * @param upperBound The upper bound for elements in the multiset.
 * @param boundType The type of bound (inclusive or exclusive).
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.DescendingImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",75,78,"/**
 * Returns a tail multiset with elements >= lowerBound.
 * @param lowerBound lower bound for elements
 * @param boundType bound type (inclusive/exclusive)
 * @return tail multiset
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,addAll,com.google.common.collect.ImmutableRangeSet$Builder:addAll(com.google.common.collect.RangeSet),784,787,"/**
 * Adds all ranges from the given RangeSet.
 * @param ranges RangeSet to add ranges from
 * @return this Builder
 */
","* Add all ranges from the specified range set to this builder. Adjacent ranges are permitted
     * and will be merged, but overlapping ranges will cause an exception when {@link #build()} is
     * called.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,combine,com.google.common.collect.ImmutableRangeSet$Builder:combine(com.google.common.collect.ImmutableRangeSet$Builder),804,808,"/**
 * Combines another builder's ranges into this builder.
 * @param builder The builder to combine ranges from.
 * @return This builder, for chaining.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$Complement:remove(com.google.common.collect.Range),661,664,"/**
 * Removes a range. Effectively adds the range to the set.
 * @param rangeToRemove The range to remove.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$SubRangeSet:add(com.google.common.collect.Range),890,898,"/**
 * Adds a range to the set, ensuring it's within the restriction.
 * @param rangeToAdd The range to add.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,add,com.google.common.collect.TreeRangeSet$Complement:add(com.google.common.collect.Range),656,659,"/**
* Removes a range from the tree range set.
* @param rangeToAdd The range to remove.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,remove,com.google.common.collect.TreeRangeSet$SubRangeSet:remove(com.google.common.collect.Range),900,905,"/**
 * Removes a range if it intersects with the restriction.
 * @param rangeToRemove The range to remove.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,clear,com.google.common.collect.TreeRangeSet$SubRangeSet:clear(),912,915,"/**
* Removes the current restriction from the TreeRangeSet.
*/",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subRangeSet,com.google.common.collect.ImmutableRangeSet:subRangeSet(com.google.common.collect.Range),515,526,"/**
 * Returns the intersection of this set with the given range.
 * @param range The range to intersect with.
 * @return A new ImmutableRangeSet representing the intersection.
 */
",Returns a view of the intersection of this range set with the given range.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(int,int)",105,107,"/**
 * Returns a contiguous set of integers from lower to upper (inclusive).
 */","* Returns a nonempty contiguous set containing all {@code int} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closed,"com.google.common.collect.ContiguousSet:closed(long,long)",117,119,"/**
 * Returns a contiguous set containing all longs from lower to upper (inclusive).
 */","* Returns a nonempty contiguous set containing all {@code long} values from {@code lower}
   * (inclusive) to {@code upper} (inclusive). (These are the same values contained in {@code
   * Range.closed(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(int,int)",129,131,"/**
 * Returns a contiguous set of integers from lower (inclusive) to upper (exclusive).
 */","* Returns a contiguous set containing all {@code int} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ContiguousSet.java,closedOpen,"com.google.common.collect.ContiguousSet:closedOpen(long,long)",141,143,"/**
 * Returns a contiguous set containing longs from lower (inclusive) to upper (exclusive).
 */","* Returns a contiguous set containing all {@code long} values from {@code lower} (inclusive) to
   * {@code upper} (exclusive). If the endpoints are equal, an empty set is returned. (These are the
   * same values contained in {@code Range.closedOpen(lower, upper)}.)
   *
   * @throws IllegalArgumentException if {@code lower} is greater than {@code upper}
   * @since 23.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,size,com.google.common.collect.ImmutableRangeSet$AsSet:size(),580,595,"/**
 * Returns the number of elements in this contiguous set.
 * Calculates size if not already computed, using ranges.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,indexOf,com.google.common.collect.ImmutableRangeSet$AsSet:indexOf(java.lang.Object),678,694,"/**
* Returns the index of the target object in this set.
* @param target the object to find
* @return index of target or -1 if not found
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersectionInCurrentDomain,com.google.common.collect.RegularContiguousSet:intersectionInCurrentDomain(com.google.common.collect.Range),47,51,"/**
 * Returns the intersection of this range with another range.
 * @param other The other range to intersect with.
 * @return Intersection set or an empty set if disjoint.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,intersection,com.google.common.collect.RegularContiguousSet:intersection(com.google.common.collect.ContiguousSet),195,209,"/**
 * Returns the intersection of this contiguous set with another.
 * @param other the other set
 * @return a new ContiguousSet representing the intersection
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,containsKey,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:containsKey(java.lang.Object),654,657,"/**
* Checks if the map contains a key.
* @param key The key to check.
* @return True if the key exists, false otherwise.
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",481,488,"/**
 * Returns a sub-map of the range [fromKey, toKey).
 * @param fromKey start of the range (inclusive)
 * @param toKey end of the range (exclusive)
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",490,493,"/**
 * Returns a view of the map's elements with keys strictly less than toKey.
 * @param toKey Exclusive key for the head map.
 * @param inclusive Whether to include toKey (false).
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",495,498,"/**
 * Returns a tail map that contains all entries whose keys
 * are greater than or equal to fromKey.
 * @param fromKey Key from which to start the tail map.
 * @param inclusive Whether fromKey is included.
 * @return Tail map.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",313,320,"/**
 * Returns a sub-map of the range [fromKey, toKey).
 * @param fromKey start of the range (inclusive)
 * @param toKey end of the range (exclusive)
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:headMap(com.google.common.collect.Cut,boolean)",322,325,"/**
 * Returns a view of the map's elements with keys strictly less than toKey.
 * @param toKey The key to which elements are less than.
 * @param inclusive Whether to include toKey (exclusive).
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$RangesByUpperBound:tailMap(com.google.common.collect.Cut,boolean)",327,330,"/**
 * Returns a tail map containing entries with keys >= fromKey.
 * @param fromKey Key from which to start the tail map.
 * @param inclusive Whether fromKey is included in the tail map.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,subMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:subMap(com.google.common.collect.Cut,boolean,com.google.common.collect.Cut,boolean)",713,722,"/**
 * Returns a sub-map of the ranges between fromKey and toKey.
 * @param fromKey start key (inclusive/exclusive based on flag)
 * @param fromInclusive true for inclusive, false for exclusive
 * @param toKey end key (inclusive/exclusive based on flag)
 * @param toInclusive true for inclusive, false for exclusive
 * @return NavigableMap containing the sub-map
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,headMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:headMap(com.google.common.collect.Cut,boolean)",724,727,"/**
 * Returns a view of the map's head map.
 * @param toKey Cut value marking the exclusive upper bound.
 * @param inclusive if true, the toKey is included in the head map.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,tailMap,"com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:tailMap(com.google.common.collect.Cut,boolean)",729,732,"/**
 * Returns a tail map that contains all entries whose keys
 * are greater than or equal to fromKey (inclusive).
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound:containsKey(java.lang.Object),739,742,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the key exists in the map.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,coalescedRange,"com.google.common.collect.TreeRangeMap:coalescedRange(com.google.common.collect.Range,java.lang.Object)",159,170,"/**
 * Coalesces a range with neighboring entries using provided value.
 * @param range The range to coalesce.
 * @param value The value to use for coalescing.
 * @return The coalesced range.
 */
",Computes the coalesced range for the given range+value - does not mutate the map.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,readResolve,com.google.common.collect.ImmutableRangeSet$AsSetSerializedForm:readResolve(),732,734,"/**
 * Reconstitutes a ImmutableRangeSet from deserialized data.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap:remove(com.google.common.collect.Range),211,259,"/**
 * Removes a range from the range map, potentially splitting ranges.
 * @param rangeToRemove Range to remove from the range map.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,split,com.google.common.collect.TreeRangeMap:split(com.google.common.collect.Cut),261,278,"/**
 * Splits a range map entry at the given cut point.
 * @param cut The cut point at which to split the entry.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNodeInternal,com.google.common.graph.StandardMutableNetwork:addNodeInternal(java.lang.Object),69,74,"/**
 * Adds a node to the network and returns its connections.
 * @param node The node to add.
 * @return NetworkConnections object for the added node.
 */
","* Adds {@code node} to the graph and returns the associated {@link NetworkConnections}.
   *
   * @throws IllegalStateException if {@code node} is already present",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",257,283,"/**
 * Creates a Collector to accumulate values into an ImmutableEnumMap.
 * @param keyFunction Extracts the key (Enum) from input.
 * @param valueFunction Extracts the value from input.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumMap,"com.google.common.collect.CollectCollectors:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",285,309,"/**
 * Collects elements into an immutable EnumMap using provided functions.
 * @param keyFunction Extracts the enum key from each element.
 * @param valueFunction Extracts the value from each element.
 * @param mergeFunction Combines values for duplicate keys.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,copyOf,com.google.common.collect.ImmutableMap:copyOf(java.util.Map),687,703,"/**
 * Returns an immutable map backed by the given map.
 * Returns the original map if it's an immutable view.
 */","* Returns an immutable map containing the same entries as {@code map}. The returned map iterates
   * over entries in the same order as the {@code entrySet} of the original map. If {@code map}
   * somehow contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,row,com.google.common.collect.ImmutableTable:row(java.lang.Object),362,367,"/**
 * Retrieves a row map for the given row key.
 * @param rowKey The key representing the row.
 * @return ImmutableMap containing row data, or an empty map.
 */
","* {@inheritDoc}
   *
   * @throws NullPointerException if {@code rowKey} is {@code null}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,rowKeySet,com.google.common.collect.ImmutableTable:rowKeySet(),369,372,"/**
 * Returns a set of row keys in the table.
 * Uses the rowMap's keyset for efficiency.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,removeRange,"com.google.common.collect.Lists$ReverseList:removeRange(int,int)",902,905,"/**
* Removes a range of elements from this list.
* @param fromIndex start index (inclusive)
* @param toIndex end index (exclusive)
*/
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,iterator,com.google.common.collect.DescendingImmutableSortedSet:iterator(),47,50,"/**
 * Returns a descending iterator over the elements in the set.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,lower,com.google.common.collect.ImmutableSortedSet:lower(java.lang.Object),721,725,"/**
 * Returns the greatest element < e, or null if none exists.
 * @param e the element to compare against
 * @return the lower element or null
 */
",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,floor,com.google.common.collect.ImmutableSortedSet:floor(java.lang.Object),730,733,"/**
 * Returns the greatest element of the set less than or equal to given element.
 */",* @since 12.0,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,last,com.google.common.collect.ImmutableSortedSet:last(),757,760,"/**
 * Returns the last element in the sorted set.
 * Uses descending iterator to find the last element.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newTypeVariableImpl,"com.google.common.reflect.Types:newTypeVariableImpl(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.reflect.Type[])",316,324,"/**
 * Creates a new TypeVariable proxy.
 * @param genericDeclaration The declaring class/interface.
 * @param name Type variable name.
 * @param bounds Type variable bounds.
 * @return A TypeVariable proxy instance.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Iterator),272,283,"/**
 * Creates an immutable list from the given iterator.
 * @param elements Iterator providing elements for the list.
 */
","* Returns an immutable list containing the given elements, in order.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,build,com.google.common.collect.ImmutableRangeMap$Builder:build(),153,170,"/**
 * Builds an ImmutableRangeMap from the entries.
 * Sorts entries, validates ranges, and constructs the map.
 */","* Returns an {@code ImmutableRangeMap} containing the associations previously added to this
     * builder.
     *
     * @throws IllegalArgumentException if any two ranges inserted into this builder overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,copyOf,com.google.common.collect.ImmutableRangeMap:copyOf(com.google.common.collect.RangeMap),84,98,"/**
 * Creates an immutable copy of the given RangeMap.
 * @param rangeMap The RangeMap to copy.
 * @return An immutable copy of the RangeMap.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,build,com.google.common.collect.ImmutableRangeSet$Builder:build(),815,845,"/**
 * Builds an ImmutableRangeSet from the internal list of ranges.
 * Returns an ImmutableRangeSet or a specialized instance.
 */","* Returns an {@code ImmutableRangeSet} containing the ranges added to this builder.
     *
     * @throws IllegalArgumentException if any input ranges have nonempty overlap",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSortedEntries,"com.google.common.collect.ImmutableSortedMultiset:copyOfSortedEntries(java.util.Comparator,java.util.Collection)",297,315,"/**
 * Creates a sorted multiset from a collection of entries.
 * @param comparator Comparator for sorting the elements.
 * @param entries Collection of entries to create multiset from.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedGraphConnections.java,ofImmutable,"com.google.common.graph.DirectedGraphConnections:ofImmutable(java.lang.Object,java.lang.Iterable,com.google.common.base.Function)",178,231,"/**
 * Creates a DirectedGraphConnections from edges and a value function.
 * @param thisNode The node to build connections for.
 * @param incidentEdges Iterable of edges.
 * @param successorNodeToValueFn Function to get value of successor.
 * @return DirectedGraphConnections object.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,parseJavaClassPath,com.google.common.reflect.ClassPath:parseJavaClassPath(),636,651,"/**
 * Parses the Java classpath and returns a list of URLs.
 */","* Returns the URLs in the class path specified by the {@code java.class.path} {@linkplain
   * System#getProperty system property}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getParameters,com.google.common.reflect.Invokable:getParameters(),271,284,"/**
 * Returns a list of Parameter objects for this method.
 */","* Returns all declared parameters of this {@code Invokable}. Note that if this is a constructor
   * of a non-static inner class, unlike {@link Constructor#getParameterTypes}, the hidden {@code
   * this} parameter of the enclosing class is excluded from the returned parameters.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getExceptionTypes,com.google.common.reflect.Invokable:getExceptionTypes(),287,297,"/**
 * Returns a list of exception types.
 * Converts generic exception types to TypeToken objects.
 */
",Returns all declared exception types of this {@code Invokable}.,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,collectTypes,com.google.common.reflect.TypeToken$TypeCollector$3:collectTypes(java.lang.Iterable),1380,1387,"/**
 * Collects and sorts types from an iterable.
 * @param types Iterable of types to be sorted.
 * @return Sorted list of types.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,usedInGenericType,com.google.common.reflect.Types$JavaVersion:usedInGenericType(java.lang.reflect.Type[]),644,650,"/**
 * Processes an array of types, applying usedInGenericType to each.
 * @param types Array of Type objects to process.
 * @return ImmutableList of processed Type objects.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,wrapTasks,com.google.common.util.concurrent.WrappingExecutorService:wrapTasks(java.util.Collection),83,90,"/**
 * Wraps a collection of Callable tasks.
 * @param tasks Collection of Callable tasks to wrap.
 * @return ImmutableList of wrapped Callable tasks.
 */
","* Wraps a collection of tasks.
   *
   * @throws NullPointerException if any element of {@code tasks} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,com.google.common.collect.ImmutableList:sortedCopyOf(java.lang.Iterable),317,323,"/**
 * Returns a sorted copy of the given iterable.
 * @param elements Iterable of comparable elements
 * @return Sorted ImmutableList containing the elements
 */
","* Returns an immutable list containing the given elements, sorted according to their natural
   * order. The sorting algorithm used is stable, so elements that compare as equal will stay in the
   * order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(elements)}; if you want a {@code List} you can use its {@code
   * asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted().collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,sortedCopyOf,"com.google.common.collect.ImmutableList:sortedCopyOf(java.util.Comparator,java.lang.Iterable)",340,348,"/**
 * Returns a sorted copy of the given iterable.
 * @param comparator Comparator for sorting elements.
 * @param elements Iterable to be sorted and copied.
 */
","* Returns an immutable list containing the given elements, in sorted order relative to the
   * specified comparator. The sorting algorithm used is stable, so elements that compare as equal
   * will stay in the order in which they appear in the input.
   *
   * <p>If your data has no duplicates, or you wish to deduplicate elements, use {@code
   * ImmutableSortedSet.copyOf(comparator, elements)}; if you want a {@code List} you can use its
   * {@code asList()} view.
   *
   * <p><b>Java 8+ users:</b> If you want to convert a {@link java.util.stream.Stream} to a sorted
   * {@code ImmutableList}, use {@code stream.sorted(comparator).collect(toImmutableList())}.
   *
   * @throws NullPointerException if any element in the input is null
   * @since 21.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMapEntrySet.java,<init>,"com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet:<init>(com.google.common.collect.ImmutableMap,java.util.Map$Entry[])",42,44,"/**
 * Constructs a RegularEntrySet with an ImmutableMap and Entry array.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/JdkBackedImmutableMultiset.java,create,com.google.common.collect.JdkBackedImmutableMultiset:create(java.util.Collection),40,57,"/**
 * Creates an ImmutableMultiset from a collection of map entries.
 * @param entries Collection of map entries (element, count)
 * @return An ImmutableMultiset containing the entries.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableAsList.java,<init>,"com.google.common.collect.RegularImmutableAsList:<init>(com.google.common.collect.ImmutableCollection,java.lang.Object[])",42,44,"/**
 * Creates an ImmutableAsList from a delegate and array.
 * @param delegate ImmutableCollection delegate
 * @param array Array to be wrapped in the list
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedSet,com.google.common.collect.CollectCollectors:toImmutableSortedSet(java.util.Comparator),82,90,"/**
 * Creates a collector for immutable sorted sets using a comparator.
 * @param comparator Comparator for sorting elements.
 * @return Collector to build an ImmutableSortedSet.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,readResolve,com.google.common.collect.ImmutableSortedSet$SerializedForm:readResolve(),868,871,"/**
 * Reconstitutes the object from a serialized form.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,"com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Comparator,java.util.Iterator)",280,283,"/**
 * Creates an ImmutableSortedSet from an iterator, using the given comparator.
 */","* Returns an immutable sorted set containing the given elements sorted by the given {@code
   * Comparator}. When multiple elements are equivalent according to {@code compareTo()}, only the
   * first one specified is included.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableBiMap:fromEntryArray(int,java.util.Map$Entry[])",68,114,"/**
 * Creates a BiMap from an array of entries.
 * @param n number of entries, must match entryArray.length
 * @param entryArray array of map entries
 * @return ImmutableBiMap created from the entries
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildJdkBacked,com.google.common.collect.ImmutableMap$Builder:buildJdkBacked(),629,644,"/**
 * Creates a JDK-backed ImmutableMap. For testing only; valueComparator not supported.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,fromEntryArray,"com.google.common.collect.RegularImmutableMap:fromEntryArray(int,java.util.Map$Entry[],boolean)",87,102,"/**
 * Creates an ImmutableMap from an array of entries.
 * @param n size of the array, must match array length
 * @param entryArray array of map entries
 * @param throwIfDuplicateKeys whether to throw on duplicate keys
 */
","* Creates an ImmutableMap from the first n entries in entryArray. This implementation may replace
   * the entries in entryArray with its own entry objects (though they will have the same key/value
   * contents), and may take ownership of entryArray.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,subRangeMap,com.google.common.collect.ImmutableRangeMap$2:subRangeMap(com.google.common.collect.Range),327,402,"/**
 * Returns a range map containing only the ranges overlapping range.
 * @param range The range to filter by.
 * @return A new ImmutableRangeMap.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,getSubMap,"com.google.common.collect.ImmutableSortedMap:getSubMap(int,int)",919,928,"/**
 * Returns a submap from fromIndex (inclusive) to toIndex (exclusive).
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,getSubMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:getSubMultiset(int,int)",117,128,"/**
 * Returns a multiset containing elements from from to to.
 * @param from start index (inclusive)
 * @param to end index (exclusive)
 * @return Sub-multiset of elements within the specified range
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,headSetImpl,"com.google.common.collect.RegularImmutableSortedSet:headSetImpl(java.lang.Object,boolean)",247,250,"/**
 * Returns a head set of elements up to `toElement`.
 * @param toElement element to end the head set
 * @param inclusive whether to include `toElement`
 * @return head set of elements
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,tailSetImpl,"com.google.common.collect.RegularImmutableSortedSet:tailSetImpl(java.lang.Object,boolean)",267,270,"/**
 * Returns a tail set from the specified element.
 * @param fromElement The first element of the tail set.
 * @param inclusive Whether fromElement is inclusive.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffixIndex,com.google.common.net.InternetDomainName:publicSuffixIndex(),180,187,"/**
 * Returns the index of the public suffix. Caches the result.
 */","* The index in the {@link #parts()} list at which the public suffix begins. For example, for the
   * domain name {@code myblog.blogspot.co.uk}, the value would be 1 (the index of the {@code
   * blogspot} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no public
   * suffix was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffixIndex,com.google.common.net.InternetDomainName:registrySuffixIndex(),195,202,"/**
 * Returns the index of the registry suffix. Caches the result.
 */","* The index in the {@link #parts()} list at which the registry suffix begins. For example, for
   * the domain name {@code myblog.blogspot.co.uk}, the value would be 2 (the index of the {@code
   * co} part). The value is negative (specifically, {@link #NO_SUFFIX_FOUND}) if no registry suffix
   * was found.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,fromEntries,"com.google.common.collect.ImmutableSortedMap:fromEntries(java.util.Comparator,boolean,java.lang.Iterable)",486,496,"/**
 * Creates an ImmutableSortedMap from entries with a comparator.
 * @param comparator Comparator for keys.
 * @param sameComparator Whether comparator is same as backing map.
 * @param entries Iterable of entries to add.
 */
","* Accepts a collection of possibly-null entries. If {@code sameComparator}, then it is assumed
   * that they do not need to be sorted or checked for dupes.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableEnumSetGeneric,com.google.common.collect.CollectCollectors:toImmutableEnumSetGeneric(),97,105,"/**
 * Creates a collector for immutable EnumSets.
 * Uses EnumSetAccumulator for efficient accumulation.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Collection),175,207,"/**
 * Returns an immutable set containing the elements of the collection.
 * @param elements collection to copy
 * @return ImmutableSet containing the collection's elements
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$EntrySet:contains(java.lang.Object),2746,2759,"/**
 * Checks if the given entry is contained in the map.
 * @param o the entry to check
 * @return true if the entry is contained, false otherwise
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MapMakerInternalMap.java,contains,com.google.common.collect.MapMakerInternalMap$KeySet:contains(java.lang.Object),2693,2696,"/**
 * Checks if the map contains the specified key.
 * @param o the key to check
 * @return true if the map contains the key, false otherwise
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,fillHole,"com.google.common.collect.MinMaxPriorityQueue:fillHole(int,java.lang.Object)",444,464,"/**
 * Fills a hole at the given index with 'toTrickle', bubbles up.
 * @param index hole index
 * @param toTrickle element to fill the hole with
 * @return MoveDesc object if moved, null otherwise
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeBasedTable.java,create,com.google.common.collect.TreeBasedTable:create(com.google.common.collect.TreeBasedTable),122,129,"/**
 * Creates a new TreeBasedTable with the same comparators, copying all data.
 * @param table The table to copy from.
 * @return A new TreeBasedTable with copied data.
 */
","* Creates a {@code TreeBasedTable} with the same mappings and sort order as the specified {@code
   * TreeBasedTable}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:headSet(java.lang.Object),1514,1517,"/**
 * Returns a sorted set containing elements up to (but not including) toElement.
 * @param toElement the element to end the set before
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subSet,"com.google.common.collect.Synchronized$SynchronizedNavigableSet:subSet(java.lang.Object,java.lang.Object)",1556,1559,"/**
 * Returns a sorted set containing elements from fromElement (inclusive) to toElement (exclusive).
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailSet,com.google.common.collect.Synchronized$SynchronizedNavigableSet:tailSet(java.lang.Object),1568,1571,"/**
 * Returns a sorted set containing elements from fromElement to the end.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,add,"com.google.common.collect.TreeMultiset:add(java.lang.Object,int)",257,277,"/**
 * Adds an element with specified occurrences to the AVL tree.
 * @param element element to add
 * @param occurrences number of occurrences, must be non-negative
 * @return Number of elements with the added element
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,deleteMe,com.google.common.collect.TreeMultiset$AvlNode:deleteMe(),885,909,"/**
 * Deletes this node, maintaining AVL tree properties.
 * Returns the new top node after deletion.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/hash/BloomFilter.java,create,"com.google.common.hash.BloomFilter:create(com.google.common.hash.Funnel,int)",484,487,"/**
 * Creates a Bloom filter with the given funnel and expected insertions.
 * @param funnel Funnel for hashing elements.
 * @param expectedInsertions Expected number of insertions.
 * @return A new BloomFilter instance.
 */
","* Creates a {@link BloomFilter} with the expected number of insertions and a default expected
   * false positive probability of 3%.
   *
   * <p>Note that overflowing a {@code BloomFilter} with significantly more elements than specified,
   * will result in its saturation, and a sharp deterioration of its false positive probability.
   *
   * <p>The constructed {@code BloomFilter} will be serializable if the provided {@code Funnel<T>}
   * is.
   *
   * <p>It is recommended that the funnel be implemented as a Java enum. This has the benefit of
   * ensuring proper serialization and deserialization, which is important since {@link #equals}
   * also relies on object identity of funnels.
   *
   * @param funnel the funnel of T's that the constructed {@code BloomFilter} will use
   * @param expectedInsertions the number of expected insertions to the constructed {@code
   *     BloomFilter}; must be positive
   * @return a {@code BloomFilter}",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrtFloor,com.google.common.math.BigIntegerMath:sqrtFloor(java.math.BigInteger),253,295,"/**
 * Calculates the floor of the square root of a BigInteger.
 * @param x The BigInteger to calculate the floor of the sqrt of.
 * @return The floor of the square root of x.
 */",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$Builder:add(java.lang.Object),515,523,"/**
 * Adds an element to the underlying collection.
 * @param element The element to add.
 * @return This builder for chaining.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,add,com.google.common.collect.ImmutableSet$EmptySetBuilderImpl:add(java.lang.Object),665,668,"/**
 * Adds an element to the set builder and returns the builder.
 * @param e element to add
 * @return the set builder with the element added
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawTypes,com.google.common.reflect.TypeToken:getRawTypes(),1093,1125,"/**
 * Extracts raw type classes from a runtime type.
 * @return ImmutableSet of raw type classes.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Comparators.java,greatest,"com.google.common.collect.Comparators:greatest(int,java.util.Comparator)",164,167,"/**
 * Returns a collector finding the {@code k} greatest elements.
 * @param k Number of greatest elements to find.
 * @param comparator Comparator for element ordering.
 */
","* Returns a {@code Collector} that returns the {@code k} greatest (relative to the specified
   * {@code Comparator}) input elements, in descending order, as an unmodifiable {@code List}. Ties
   * are broken arbitrarily.
   *
   * <p>For example:
   *
   * {@snippet :
   * Stream.of(""foo"", ""quux"", ""banana"", ""elephant"")
   *     .collect(greatest(2, comparingInt(String::length)))
   * // returns {""elephant"", ""banana""}
   * }
   *
   * <p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log
   * k)), as opposed to e.g. {@code Stream.sorted(comparator.reversed()).limit(k)}, which currently
   * takes O(n log n) time and O(n) space.
   *
   * @throws IllegalArgumentException if {@code k < 0}
   * @since 22.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,leastOf,"com.google.common.collect.Ordering:leastOf(java.lang.Iterable,int)",745,763,"/**
 * Returns the k smallest elements from the iterable.
 * @param iterable The iterable to extract elements from.
 * @param k The number of smallest elements to return.
 */
","* Returns the {@code k} least elements of the given iterable according to this ordering, in order
   * from least to greatest. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.least(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} least elements in ascending
   *     order
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.util.Iterator,int)",842,844,"/**
 * Returns the {@code k} greatest elements from the iterator.
 * @param iterator Iterator of elements to consider.
 * @param k The number of greatest elements to return.
 */
","* Returns the {@code k} greatest elements from the given iterator according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterator).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 14.0",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catching,"com.google.common.util.concurrent.ClosingFuture:catching(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$ClosingFunction,java.util.concurrent.Executor)",873,876,"/**
 * Catches exceptions of a specific type and returns a value.
 * @param exceptionType Exception type to catch.
 * @param fallback Fallback function to compute value.
 * @param executor Executor for fallback function.
 * @return ClosingFuture with the result or exception.
 */
","* Returns a new {@code ClosingFuture} pipeline step derived from this one by applying a function
   * to its exception if it is an instance of a given exception type. The function can use a {@link
   * DeferredCloser} to capture objects to be closed when the pipeline is done.
   *
   * <p>If this {@code ClosingFuture} succeeds or fails with a different exception type, the
   * function will not be called, and the derived {@code ClosingFuture} will be equivalent to this
   * one.
   *
   * <p>If the function throws an exception, that exception is used as the result of the derived
   * {@code ClosingFuture}.
   *
   * <p>Example usage:
   *
   * {@snippet :
   * ClosingFuture<QueryResult> queryFuture =
   *     queryFuture.catching(
   *         QueryException.class, (closer, x) -> Query.emptyQueryResult(), executor);
   * }
   *
   * <p>When selecting an executor, note that {@code directExecutor} is dangerous in some cases. See
   * the discussion in the {@link ListenableFuture#addListener} documentation. All its warnings
   * about heavyweight listeners are also applicable to heavyweight functions passed to this method.
   *
   * <p>After calling this method, you may not call {@link #finishToFuture()}, {@link
   * #finishToValueAndCloser(ValueAndCloserConsumer, Executor)}, or any other derivation method on
   * the original {@code ClosingFuture} instance.
   *
   * @param exceptionType the exception type that triggers use of {@code fallback}. The exception
   *     type is matched against this step's exception. ""This step's exception"" means the cause of
   *     the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself. To avoid hiding bugs and other unrecoverable errors, callers should
   *     prefer more specific types, avoiding {@code Throwable.class} in particular.
   * @param fallback the function to be called if this step fails with the expected exception type.
   *     The function's argument is this step's exception. ""This step's exception"" means the cause
   *     of the {@link ExecutionException} thrown by {@link Future#get()} on the {@link Future}
   *     underlying this step or, if {@code get()} throws a different kind of exception, that
   *     exception itself.
   * @param executor the executor that runs {@code fallback} if the input fails",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,catchingAsync,"com.google.common.util.concurrent.ClosingFuture:catchingAsync(java.lang.Class,com.google.common.util.concurrent.ClosingFuture$AsyncClosingFunction,java.util.concurrent.Executor)",967,972,"/**
 * Catches exceptions of specified type and executes fallback.
 * @param exceptionType Exception type to catch.
 * @param fallback Fallback function to execute.
 * @param executor Executor for fallback.
 * @return ClosingFuture with fallback result.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,call,com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable:call(),596,601,"/**
 * Executes the wrapped runnable and reschedules the task.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/AbstractScheduledService.java,schedule,"com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler:schedule(com.google.common.util.concurrent.AbstractService,java.util.concurrent.ScheduledExecutorService,java.lang.Runnable)",721,725,"/**
 * Schedules a task for execution.
 * @param service Service context.
 * @param executor Executor service.
 * @param runnable Task to execute.
 * @return Cancellable object.
 */
",,,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(),353,355,"/**
 * Awaits the state to be stopped. Delegates to the internal state.
 */","* Waits for the all the services to reach a terminal state. After this method returns all
   * services will either be {@linkplain Service.State#TERMINATED terminated} or {@linkplain
   * Service.State#FAILED failed}.",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,"com.google.common.util.concurrent.ServiceManager:awaitStopped(long,java.util.concurrent.TimeUnit)",379,382,"/**
 * Waits for the state to be stopped, with a timeout.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout.
 */
","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have stopped within the deadline",,,True,7
/home/yfx/codecomment/codecomment/project/java/com/google/common/base/CharMatcher.java,precomputed,com.google.common.base.CharMatcher:precomputed(),401,403,"/**
 * Returns a precomputed CharMatcher instance for efficiency.
 */
","* Returns a {@code char} matcher functionally equivalent to this one, but which may be faster to
   * query than the original; your mileage may vary. Precomputation takes time and requires more
   * memory, so it is only likely to be worthwhile if the precomputed matcher is queried very often.
   *
   * <p>This method has no effect (returns {@code this}) when called in GWT: it's unclear whether a
   * precomputed matcher is faster, but it certainly would consume more memory (which doesn't seem
   * like a worthwhile tradeoff in a browser).",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,hash,"com.google.common.io.Files:hash(java.io.File,com.google.common.hash.HashFunction)",622,629,"/**
 * Calculates the hash code of a file using the given hash function.
 * @param file The file to hash.
 * @param hashFunction The hash function to use.
 * @return The hash code of the file.
 */
","* Computes the hash code of the {@code file} using {@code hashFunction}.
   *
   * @param file the file to read
   * @param hashFunction the hash function to use to hash the data
   * @return the {@link HashCode} of all of the bytes in the file
   * @throws IOException if an I/O error occurs
   * @since 12.0
   * @deprecated Prefer {@code asByteSource(file).hash(hashFunction)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,move,"com.google.common.io.Files:move(java.io.File,java.io.File)",492,506,"/**
 * Moves a file from the specified source to the destination.
 * Copies if rename fails, then deletes originals.
 */
","* Moves a file from one path to another. This method can rename a file and/or move it to a
   * different directory. In either case {@code to} must be the target path for the file itself; not
   * just the new name for the file or the path to the new parent directory.
   *
   * <p><b>{@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#move}.
   *
   * @param from the source file
   * @param to the destination file
   * @throws IOException if an I/O error occurs
   * @throws IllegalArgumentException if {@code from.equals(to)}",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,readLines,"com.google.common.io.Resources:readLines(java.net.URL,java.nio.charset.Charset)",142,162,"/**
 * Reads lines from a URL using the specified charset.
 * @param url URL to read from.
 * @param charset Character encoding to use.
 * @return List of strings, each representing a line.
 * @throws IOException if an I/O error occurs.
 */
","* Reads all of the lines from a URL. The lines do not include line-termination characters, but do
   * include other leading and trailing whitespace.
   *
   * <p>This method returns a mutable {@code List}. For an {@code ImmutableList}, use {@code
   * Resources.asCharSource(url, charset).readLines()}.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a mutable {@link List} containing all the lines
   * @throws IOException if an I/O error occurs",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,map,com.google.common.io.Files:map(java.io.File),646,649,"/**
 * Maps a file to a MappedByteBuffer with read-only access.
 * @param file The file to map.
 * @return A MappedByteBuffer representing the file.
 */
","* Fully maps a file read-only in to memory as per {@link
   * FileChannel#map(java.nio.channels.FileChannel.MapMode, long, long)}.
   *
   * <p>Files are mapped from offset 0 to its length.
   *
   * <p>This only works for files ≤ {@link Integer#MAX_VALUE} bytes.
   *
   * @param file the file to map
   * @return a read-only buffer reflecting {@code file}
   * @throws FileNotFoundException if the {@code file} does not exist
   * @throws IOException if an I/O error occurs
   * @see FileChannel#map(MapMode, long, long)
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),246,248,"/**
 * Returns an exiting executor service for the given executor.
 * @param executor The ThreadPoolExecutor to create an exiting executor for.
 * @return An ExecutorService for exiting tasks.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",106,112,"/**
 * Gets an exiting executor service.
 * @param executor ThreadPoolExecutor to terminate
 * @param terminationTimeout Timeout for termination
 * @param timeUnit TimeUnit of the timeout
 * @return ExecutorService for exiting tasks
 */
","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors$Application:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),258,261,"/**
 * Returns an exiting ScheduledExecutorService for graceful shutdown.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,long,java.util.concurrent.TimeUnit)",167,174,"/**
 * Returns an exiting ScheduledExecutorService.
 * @param executor Executor to use.
 * @param terminationTimeout Termination timeout.
 * @param timeUnit Time unit for the timeout.
 */
","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @param timeUnit unit of time for the time parameter
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,addDelayedShutdownHook,"com.google.common.util.concurrent.MoreExecutors:addDelayedShutdownHook(java.util.concurrent.ExecutorService,java.time.Duration)",207,211,"/**
 * Adds a delayed shutdown hook to an ExecutorService.
 * @param service ExecutorService to shutdown.
 * @param terminationTimeout Duration for termination.
 */
","* Add a shutdown hook to wait for thread completion in the given {@link ExecutorService service}.
   * This is useful if the given service uses daemon threads, and we want to keep the JVM from
   * exiting immediately on shutdown, instead giving these daemon threads a chance to terminate
   * normally.
   *
   * @param service ExecutorService which uses daemon threads
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,"com.google.common.cache.LocalCache$Segment:reclaimKey(com.google.common.cache.ReferenceEntry,int)",3292,3325,"/**
 * Reclaims a key-value entry from the cache. Returns true if found.
 */",Removes an entry whose key has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,"com.google.common.cache.LocalCache$Segment:reclaimValue(java.lang.Object,int,com.google.common.cache.LocalCache$ValueReference)",3328,3370,"/**
 * Reclaims a value from the map based on key, hash, and reference.
 */",Removes an entry whose value has been garbage collected.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeEntry,"com.google.common.cache.LocalCache$Segment:removeEntry(com.google.common.cache.ReferenceEntry,int,com.google.common.cache.RemovalCause)",3406,3435,"/**
 * Removes an entry from the map.
 * @param entry Entry to remove.
 * @param hash Hash code of the key.
 * @param cause Reason for removal.
 * @return True if entry was removed, false otherwise.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(),299,301,"/**
 * Awaits the healthy state of the underlying component.
 */","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy}. The manager
   * will become healthy after all the component services have reached the {@linkplain State#RUNNING
   * running} state.
   *
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,"com.google.common.util.concurrent.ServiceManager:awaitHealthy(long,java.util.concurrent.TimeUnit)",329,332,"/**
 * Waits until the state is healthy, or timeout expires.
 * @param timeout Timeout duration.
 * @param unit Time unit of the timeout (e.g., SECONDS).
 */
","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @param unit the time unit of the timeout argument
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",46,50,"/**
 * Creates a DirectedNetworkConnections with immutable maps and self-loop count.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedNetworkConnections:ofImmutable(java.util.Map),45,47,"/**
 * Creates an UndirectedNetworkConnections from a map.
 * @param incidentEdges Map of edges to nodes.
 * @return UndirectedNetworkConnections object.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupTimes,com.google.common.util.concurrent.ServiceManager:startupTimes(),419,421,"/**
 * Returns startup times for each service.
 * @return ImmutableMap of Service to startup time (Long)
 */
","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time in millis, the map entries will be
   *     ordered by startup time.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getDeclaredAnnotationsByType,com.google.common.reflect.Parameter:getDeclaredAnnotationsByType(java.lang.Class),121,128,"/**
 * Retrieves declared annotations of a specific type.
 * @param annotationType The class of the annotation to retrieve.
 * @return Array of annotations of the specified type.
 */
",* @since 18.0,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Collection),246,252,"/**
 * Creates an ImmutableSortedSet from a Collection, using natural order.
 * @param elements Collection to copy; elements must be comparable.
 * @return ImmutableSortedSet containing the elements.
 */
","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included. To create a copy of a {@code SortedSet} that preserves the comparator,
   * call {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Set<String>}, then {@code ImmutableSortedSet.copyOf(s)}
   * returns an {@code ImmutableSortedSet<String>} containing each of the strings in {@code s},
   * while {@code ImmutableSortedSet.of(s)} returns an {@code ImmutableSortedSet<Set<String>>}
   * containing one element (the given set itself).
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code elements} is an {@code
   * ImmutableSortedSet}, it may be returned instead of a copy.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null
   * @since 7.0 (source-compatible since 2.0)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,headMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:headMap(java.lang.Object),1680,1683,"/**
* Returns a sorted map containing entries with keys less than toKey.
* @param toKey the exclusive upper bound for keys in the returned map.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,subMap,"com.google.common.collect.Synchronized$SynchronizedNavigableMap:subMap(java.lang.Object,java.lang.Object)",1759,1762,"/**
 * Returns a sorted map containing entries between fromKey and toKey.
 * @param fromKey start key (inclusive)
 * @param toKey end key (exclusive)
 * @return SortedMap with entries between the specified keys.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Synchronized.java,tailMap,com.google.common.collect.Synchronized$SynchronizedNavigableMap:tailMap(java.lang.Object),1771,1774,"/**
 * Returns a sorted map containing entries greater than or equal to fromKey.
 * @param fromKey the key from which to start inclusion
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,synchronizedNavigableMap,com.google.common.collect.Maps:synchronizedNavigableMap(java.util.NavigableMap),3692,3697,"/**
 * Returns a synchronized NavigableMap backed by the given map.
 * @param navigableMap The NavigableMap to synchronize.
 * @return A synchronized NavigableMap.
 */
","* Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In
   * order to guarantee serial access, it is critical that <b>all</b> access to the backing
   * navigable map is accomplished through the returned navigable map (or its views).
   *
   * <p>It is imperative that the user manually synchronize on the returned navigable map when
   * iterating over any of its collection views, or the collections views of any of its {@code
   * descendingMap}, {@code subMap}, {@code headMap} or {@code tailMap} views.
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set = map.navigableKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not set!
   *   Iterator<K> it = set.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>or:
   *
   * {@snippet :
   * NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
   * NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);
   *
   * // Needn't be in synchronized block
   * NavigableSet<K> set2 = map2.descendingKeySet();
   *
   * synchronized (map) { // Synchronizing on map, not map2 or set2!
   *   Iterator<K> it = set2.iterator(); // Must be in synchronized block
   *   while (it.hasNext()) {
   *     foo(it.next());
   *   }
   * }
   * }
   *
   * <p>Failure to follow this advice may result in non-deterministic behavior.
   *
   * <p>The returned navigable map will be serializable if the specified navigable map is
   * serializable.
   *
   * @param navigableMap the navigable map to be ""wrapped"" in a synchronized navigable map.
   * @return a synchronized view of the specified navigable map.
   * @since 13.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Files.java,toString,"com.google.common.io.Files:toString(java.io.File,java.nio.charset.Charset)",250,256,"/**
 * Reads file content as a string using specified charset.
 * @param file The file to read.
 * @param charset The charset to use.
 * @return String representation of file content.
 */
","* Reads all characters from a file into a {@link String}, using the given character set.
   *
   * @param file the file to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the file
   * @throws IOException if an I/O error occurs
   * @deprecated Prefer {@code asCharSource(file, charset).read()}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/Resources.java,toString,"com.google.common.io.Resources:toString(java.net.URL,java.nio.charset.Charset)",107,109,"/**
 * Reads URL content as a String using the specified charset.
 * @param url URL to read
 * @param charset Character encoding
 * @return String representation of the URL content
 */
","* Reads all characters from a URL into a {@link String}, using the given character set.
   *
   * @param url the URL to read from
   * @param charset the charset used to decode the input stream; see {@link StandardCharsets} for
   *     helpful predefined constants
   * @return a string containing all the characters from the URL
   * @throws IOException if an I/O error occurs.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CompactLinkedHashMap.java,create,com.google.common.collect.CompactLinkedHashMap:create(),62,65,"/**
 * Creates a new, empty CompactLinkedHashMap.
 * Returns an instance of CompactLinkedHashMap.
 */
",Creates an empty {@code CompactLinkedHashMap} instance.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultimap.java,create,com.google.common.collect.TreeMultimap:create(com.google.common.collect.Multimap),107,111,"/**
 * Creates a TreeMultimap from a Multimap, using natural ordering.
 * @param multimap The Multimap to convert.
 * @return A new TreeMultimap.
 */
","* Constructs a {@code TreeMultimap}, ordered by the natural ordering of its keys and values, with
   * the same mappings as the specified multimap.
   *
   * @param multimap the multimap whose contents are copied to this multimap",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,captureAsTypeVariable,com.google.common.reflect.TypeResolver$WildcardCapturer$1:captureAsTypeVariable(java.lang.reflect.Type[]),500,504,"/**
 * Creates a new artificial type variable with given upper bounds.
 * @param upperBounds Type array representing the upper bounds.
 * @return A new artificial TypeVariable.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String,boolean)",244,248,"/**
 * Creates a ReentrantLock, either standard or cycle-detecting.
 * @param lockName Lock name for cycle detection (optional)
 * @param fair Whether the lock is fair or not.
 * @return A ReentrantLock instance.
 */
","* Creates a {@link ReentrantLock} with the given fairness policy. The {@code lockName} is used in
   * the warning or exception output to help identify the locks involved in the detected deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,"com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String,boolean)",260,264,"/**
 * Creates a ReentrantReadWriteLock, fair or cycle-detecting.
 * @param lockName Lock name for cycle detection.
 * @param fair Whether locks are granted fairly.
 * @return A ReentrantReadWriteLock instance.
 */
","* Creates a {@link ReentrantReadWriteLock} with the given fairness policy. The {@code lockName}
   * is used in the warning or exception output to help identify the locks involved in the detected
   * deadlock.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,createNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:createNodes(java.lang.Class),301,322,"/**
 * Creates a map of enum values to LockGraphNodes, initializing locks.
 */","* For a given Enum type, creates an immutable map from each of the Enum's values to a
   * corresponding LockGraphNode, with the {@code allowedPriorLocks} and {@code
   * disallowedPriorLocks} prepopulated with nodes according to the natural ordering of the
   * associated Enum values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,addNode,com.google.common.graph.StandardMutableGraph:addNode(java.lang.Object),44,47,"/**
 * Adds a node to the backing value graph.
 * @param node The node to add.
 * @return True if the node was added, false otherwise.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,"com.google.common.graph.StandardMutableGraph:putEdge(java.lang.Object,java.lang.Object)",49,52,"/**
 * Adds an edge between two nodes.
 * @param nodeU The first node.
 * @param nodeV The second node.
 * @return True if edge was successfully added, false otherwise.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableValueGraph.java,putEdgeValue,"com.google.common.graph.StandardMutableValueGraph:putEdgeValue(com.google.common.graph.EndpointPair,java.lang.Object)",112,117,"/**
 * Puts an edge value between two nodes.
 * @param endpoints EndpointPair defining the edge.
 * @param value Value to associate with the edge.
 * @return The previous value associated with the edge.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validatePart,"com.google.common.net.InternetDomainName:validatePart(java.lang.String,boolean)",307,351,"/**
* Validates a domain part string.
* @param part The domain part to validate.
* @param isFinalPart True if this is the final part.
* @return True if the part is valid, false otherwise.
*/
","* Helper method for {@link #validateSyntax(List)}. Validates that one part of a domain name is
   * valid.
   *
   * @param part The domain name part to be validated
   * @param isFinalPart Is this the final (rightmost) domain part?
   * @return Whether the part is valid",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InetAddresses.java,coerceToInteger,com.google.common.net.InetAddresses:coerceToInteger(java.net.InetAddress),1059,1061,"/**
 * Converts an InetAddress to an integer representation.
 */
","* Returns an integer representing an IPv4 address regardless of whether the supplied argument is
   * an IPv4 address or not.
   *
   * <p>IPv6 addresses are <b>coerced</b> to IPv4 addresses before being converted to integers.
   *
   * <p>As long as there are applications that assume that all IP addresses are IPv4 addresses and
   * can therefore be converted safely to integers (for whatever purpose) this function can be used
   * to handle IPv6 addresses as well until the application is suitably fixed.
   *
   * <p>NOTE: an IPv6 address coerced to an IPv4 address can only be used for such purposes as
   * rudimentary identification or indexing into a collection of real {@link InetAddress}es. They
   * cannot be used as real addresses for the purposes of network communication.
   *
   * @param ip {@link InetAddress} to convert
   * @return {@code int}, ""coerced"" if ip is not an IPv4 address
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardContains,com.google.common.collect.ForwardingCollection:standardContains(java.lang.Object),138,140,"/**
 * Checks if the collection contains the given object.
 * @param object The object to search for.
 * @return True if found, false otherwise.
 */
","* A sensible definition of {@link #contains} in terms of {@link #iterator}. If you override
   * {@link #iterator}, you may wish to override {@link #contains} to forward to this
   * implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemove,com.google.common.collect.ForwardingCollection:standardRemove(java.lang.Object),170,179,"/**
 * Removes the specified object from the collection.
 * @param object The object to remove. Returns true if removed.
 */
","* A sensible definition of {@link #remove} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #remove} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRemoveAll,com.google.common.collect.ForwardingCollection:standardRemoveAll(java.util.Collection),188,190,"/**
 * Removes all elements from the set that are contained in the collection.
 * @param collection Collection of elements to remove.
 * @return True if the set was modified, false otherwise.
 */
","* A sensible definition of {@link #removeAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #removeAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardRetainAll,com.google.common.collect.ForwardingCollection:standardRetainAll(java.util.Collection),199,201,"/**
 * Retains elements present in the specified collection.
 * @param collection Collection to compare against.
 * @return True if any changes occurred.
 */
","* A sensible definition of {@link #retainAll} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #retainAll} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardClear,com.google.common.collect.ForwardingCollection:standardClear(),210,212,"/**
 * Clears the iterator, effectively emptying the collection.
 */
","* A sensible definition of {@link #clear} in terms of {@link #iterator}, using the iterator's
   * {@code remove} method. If you override {@link #iterator}, you may wish to override {@link
   * #clear} to forward to this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardIsEmpty,com.google.common.collect.ForwardingCollection:standardIsEmpty(),221,223,"/**
 * Checks if the standard iterator has no more elements.
 * Returns true if empty, false otherwise.
 */
","* A sensible definition of {@link #isEmpty} as {@code !iterator().hasNext}. If you override
   * {@link #isEmpty}, you may wish to override {@link #isEmpty} to forward to this implementation.
   * Alternately, it may be more efficient to implement {@code isEmpty} as {@code size() == 0}.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingCollection.java,standardToArray,com.google.common.collect.ForwardingCollection:standardToArray(),243,246,"/**
 * Converts the collection to an array of Objects.
 * @return An array containing all collection elements.
 */
","* A sensible definition of {@link #toArray()} in terms of {@link #toArray(Object[])}. If you
   * override {@link #toArray(Object[])}, you may wish to override {@link #toArray} to forward to
   * this implementation.
   *
   * @since 7.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AbstractSortedSetMultimap.java,createUnmodifiableEmptyCollection,com.google.common.collect.AbstractSortedSetMultimap:createUnmodifiableEmptyCollection(),54,57,"/**
 * Creates and wraps an empty collection as an unmodifiable set.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,keySet,com.google.common.collect.Maps$UnmodifiableNavigableMap:keySet(),3592,3595,"/**
* Returns a navigable set view of the map's keys.
*/",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,createEntries,com.google.common.collect.FilteredEntrySetMultimap:createEntries(),58,61,"/**
 * Creates a filtered set of entries based on the predicate.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSetMultimap.java,entries,com.google.common.collect.ForwardingSetMultimap:entries(),46,49,"/**
 * Returns a set view of the map's entries.
 * Delegates to the underlying map's entries method.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ListeningScheduledExecutorService.java,schedule,"com.google.common.util.concurrent.ListeningScheduledExecutorService:schedule(java.lang.Runnable,java.time.Duration)",51,54,"/**
 * Schedules a task after a specified delay.
 * @param command Runnable task to execute.
 * @param delay Duration delay before execution.
 * @return ListenableScheduledFuture representing the scheduled task.
 */
","* Duration-based overload of {@link #schedule(Runnable, long, TimeUnit)}.
   *
   * @since 29.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$LoadingSerializationProxy:readObject(java.io.ObjectInputStream),4799,4803,"/**
* Reads object stream, recreates CacheBuilder, and initializes autoDelegate.
*/
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,readObject,com.google.common.cache.LocalCache$ManualSerializationProxy:readObject(java.io.ObjectInputStream),4765,4769,"/**
 * Reads object stream, recreates cache builder, and initializes delegate.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ForwardingSortedSetMultimap.java,replaceValues,"com.google.common.collect.ForwardingSortedSetMultimap:replaceValues(java.lang.Object,java.lang.Iterable)",57,60,"/**
 * Replaces values for a key with a new iterable.
 * @param key The key for which to replace values.
 * @param values New values to replace the old ones.
 * @return SortedSet of replaced values, or an empty set.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,predecessors,com.google.common.graph.DirectedMultiNetworkConnections:predecessors(),64,67,"/**
 * Returns the set of predecessors of this element.
 * Returns an unmodifiable set.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,successors,com.google.common.graph.DirectedMultiNetworkConnections:successors(),80,83,"/**
 * Returns the successors of this directed graph vertex.
 * Returns an unmodifiable set of successor vertex IDs.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,adjacentNodes,com.google.common.graph.UndirectedMultiNetworkConnections:adjacentNodes(),60,63,"/**
 * Returns a set of adjacent nodes.
 * Uses the underlying multiset to obtain the adjacent nodes.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,findAllSubscribers,com.google.common.eventbus.SubscriberRegistry:findAllSubscribers(java.lang.Object),156,165,"/**
 * Finds all subscribers within a listener, mapping event types to subscribers.
 * @param listener Object containing subscriber methods
 * @return Multimap of event types to Subscriber objects
 */
",* Returns all subscribers for the given listener grouped by the type of event they subscribe to.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Network,java.lang.Iterable)",576,594,"/**
* Creates a subgraph induced by the given nodes from the network.
* @param network The original network.
* @param nodes Nodes to include in the subgraph.
* @return A new MutableNetwork representing the induced subgraph.
*/
","* Returns the subgraph of {@code network} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Network#edges() edges}
   * from {@code network} for which the {@link Network#incidentNodes(Object) incident nodes} are
   * both contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Network),626,640,"/**
 * Creates a mutable copy of the given network.
 * @param network The network to copy.
 * @return A new MutableNetwork with the same nodes and edges.
 */
",Creates a mutable copy of {@code network} with the same nodes and edges.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork$Builder:<init>(com.google.common.graph.NetworkBuilder),160,162,"/**
* Initializes the builder with a built network.
* @param networkBuilder Network builder to use for building.
*/
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,build,com.google.common.graph.GraphBuilder:build(),181,183,"/**
 * Creates a new mutable graph based on the current graph builder.
 * @return A new StandardMutableGraph instance.
 */
",Returns an empty {@link MutableGraph} with the properties of this {@link GraphBuilder}.,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.ValueGraph,java.lang.Iterable)",545,566,"/**
 * Creates a subgraph induced by the given nodes from the graph.
 * @param graph The original graph.
 * @param nodes The nodes to include in the subgraph.
 * @return A new subgraph containing only the specified nodes and edges.
 */
","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * (and associated edge values) from {@code graph} for which both nodes are contained by {@code
   * nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.ValueGraph),609,623,"/**
 * Creates a mutable copy of the given ValueGraph.
 * @param graph The ValueGraph to copy.
 * @return A new MutableValueGraph containing the same nodes and edges.
 */
","Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph$Builder:<init>(com.google.common.graph.ValueGraphBuilder),133,138,"/**
 * Constructs a Builder with a copied ValueGraphBuilder.
 * @param graphBuilder The ValueGraphBuilder to copy from.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,putAll,com.google.common.collect.ImmutableBiMap$Builder:putAll(java.util.Map),381,386,"/**
 * Adds all entries from the given map to the builder.
 * @param map map containing key-value pairs to add
 * @return this builder
 */
","* Associates all of the given map's keys and values in the built bimap. Duplicate keys or
     * values are not allowed, and will cause {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,putAll,com.google.common.collect.ImmutableSortedMap$Builder:putAll(java.util.Map),656,661,"/**
* Adds all entries from the given map to the builder.
* @param map map containing key-value pairs to add
* @return this builder instance
*/
","* Associates all of the given map's keys and values in the built map. Duplicate keys, according
     * to the comparator (which might be the keys' natural order), are not allowed, and will cause
     * {@link #build} to fail.
     *
     * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,containsKey,com.google.common.collect.FilteredEntryMultimap$AsMap:containsKey(java.lang.Object),176,179,"/**
 * Checks if the map contains the specified key.
 * @param key The key to check.
 * @return True if the key exists in the map, false otherwise.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntrySetMultimap.java,get,com.google.common.collect.FilteredEntrySetMultimap:get(java.lang.Object),43,46,"/**
 * Retrieves the set of values associated with the given key.
 * @param key The key to retrieve the set for.
 * @return The set of values or null if the key is not present.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredEntryMultimap.java,removeEntriesIf,com.google.common.collect.FilteredEntryMultimap$Keys$1:removeEntriesIf(com.google.common.base.Predicate),154,172,"/**
 * Removes entries from the map if the predicate is true.
 * @param predicate Predicate to apply to each map entry.
 * @return True if any entries were removed/modified.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,<init>,"com.google.common.collect.Maps$FilteredEntryBiMap:<init>(com.google.common.collect.BiMap,com.google.common.base.Predicate)",3371,3375,"/**
 * Creates a FilteredEntryBiMap with a predicate and inverse predicate.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryNavigableMap,com.google.common.base.Predicate)",2824,2831,"/**
 * Filters a NavigableMap based on two predicates.
 * @param map The map to filter.
 * @param entryPredicate Filter predicate for entries.
 * @return A new filtered NavigableMap.
 */
","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * navigable map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,com.google.common.collect.Maps$FilteredEntrySortedMap:headMap(java.lang.Object),3208,3211,"/**
 * Returns a view of the sorted map's head map up to `toKey`.
 * @param toKey the key up to which the head map is returned.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntrySortedMap:subMap(java.lang.Object,java.lang.Object)",3213,3216,"/**
 * Returns a sorted map containing entries between fromKey and toKey.
 * @param fromKey starting key (inclusive)
 * @param toKey ending key (exclusive)
 * @return SortedMap containing entries within the specified range
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,com.google.common.collect.Maps$FilteredEntrySortedMap:tailMap(java.lang.Object),3218,3221,"/**
 * Returns a tail map with keys >= fromKey.
 * @param fromKey the key from which the tail map starts
 * @return a SortedMap containing entries with keys >= fromKey
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntrySortedMap,com.google.common.base.Predicate)",2813,2818,"/**
 * Filters a SortedMap based on a combined predicate.
 * @param map The SortedMap to filter.
 * @param entryPredicate Predicate for filtering entries.
 * @return A new filtered SortedMap.
 */
","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * sorted map.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.Map,com.google.common.base.Predicate)",2428,2435,"/**
 * Filters a map based on a predicate applied to its keys.
 * @param unfiltered The map to filter.
 * @param keyPredicate Predicate for filtering keys.
 * @return A new filtered map.
 */
","* Returns a map containing the mappings in {@code unfiltered} whose keys satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.Map,com.google.common.base.Predicate)",2684,2690,"/**
 * Filters map entries based on the provided predicate.
 * @param unfiltered The map to filter.
 * @param entryPredicate Predicate to apply to each entry.
 * @return A filtered map containing entries matching the predicate.
 */
","* Returns a map containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,inDegree,com.google.common.graph.AbstractNetwork:inDegree(java.lang.Object),153,156,"/**
 * Calculates the in-degree of a node.
 * Returns in-degree if directed, else returns the degree.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,outDegree,com.google.common.graph.AbstractNetwork:outDegree(java.lang.Object),158,161,"/**
 * Calculates the out-degree of a node.
 * Returns out-degree if directed, else returns total degree.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,"com.google.common.graph.AbstractNetwork:edgeConnecting(java.lang.Object,java.lang.Object)",194,197,"/**
 * Returns an edge connecting nodeU and nodeV, or empty Optional.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnectingOrNull,com.google.common.graph.AbstractNetwork:edgeConnectingOrNull(com.google.common.graph.EndpointPair),218,222,"/**
 * Gets the edge connecting the two endpoints, or null if none.
 * @param endpoints Pair of endpoints to check.
 * @return The edge or null if no edge exists.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function)",80,86,"/**
 * Collects elements to an ImmutableSortedMap.
 * @param comparator Comparator for keys.
 * @param keyFunction Extracts key from element.
 * @param valueFunction Extracts value from element.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements. The generated map is sorted by the specified comparator.
   *
   * <p>If the mapped keys contain duplicates (according to the specified comparator), an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSet,com.google.common.collect.ImmutableRangeSet$AsSet:subSet(com.google.common.collect.Range),638,640,"/**
 * Returns a sorted set containing elements within the specified range.
 * @param range The range defining the subset's bounds.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Comparable,boolean)",53,56,"/**
 * Returns a head set, elements less than or equal to toElement.
 * @param toElement Element to return elements up to (inclusive if true)
 * @param inclusive Whether to include toElement in the result
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",58,70,"/**
 * Returns a subSet within the domain, defined by from/to elements.
 * @param fromElement start element (inclusive if specified)
 * @param toElement end element (inclusive if specified)
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Comparable,boolean)",72,75,"/**
 * Returns a tail set containing elements >= fromElement.
 * @param fromElement The lower bound of the tail set.
 * @param inclusive Whether fromElement is inclusive.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,get,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:get(java.lang.Object),627,643,"/**
 * Retrieves a Range by Cut key. Returns null if not found or invalid key.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:remove(java.lang.Object),692,703,"/**
 * Removes the value associated with the given key (Range).
 * @param key the key (Range) to remove
 * @return the removed value, or null if the key was not found.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,removeEntryIf,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:removeEntryIf(com.google.common.base.Predicate),710,721,"/**
 * Removes entries matching the predicate.
 * @param predicate Predicate to filter entries for removal.
 * @return True if any entries were removed.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap:clear(),561,564,"/**
 * Removes the specified subrange from the TreeRangeMap.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap:remove(com.google.common.collect.Range),566,571,"/**
 * Removes a range if it intersects with the subRange.
 * @param range The range to remove.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap:put(com.google.common.collect.Range,java.lang.Object)",137,144,"/**
 * Inserts a value associated with the given range.
 * @param range Range to associate with the value.
 * @param value Value to insert.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addNode,com.google.common.graph.StandardMutableNetwork:addNode(java.lang.Object),51,62,"/**
 * Adds a node to the set. Returns true if added, false otherwise.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(java.lang.Object,java.lang.Object,java.lang.Object)",76,118,"/**
 * Adds a directed edge between nodes. Returns true if added.
 * @param nodeU source node
 * @param nodeV destination node
 * @param edge the edge connecting the nodes
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function)",198,203,"/**
 * Creates an ImmutableEnumMap collector.
 * @param keyFunction Extracts the enum key from an object.
 * @param valueFunction Extracts the value from an object.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, an {@code IllegalArgumentException} is thrown when
   * the collection operation is performed. (This differs from the {@code Collector} returned by
   * {@link java.util.stream.Collectors#toMap(java.util.function.Function,
   * java.util.function.Function) Collectors.toMap(Function, Function)}, which throws an {@code
   * IllegalStateException}.)
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toImmutableEnumMap,"com.google.common.collect.Maps:toImmutableEnumMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",216,222,"/**
 * Creates an ImmutableEnumMap collector.
 * @param keyFunction Maps input to enum key.
 * @param valueFunction Maps input to value.
 * @param mergeFunction Merges values for duplicate keys.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements. The
   * resulting implementation is specialized for enum key types. The returned map and its views will
   * iterate over keys in their enum definition order, not encounter order.
   *
   * <p>If the mapped keys contain duplicates, the values are merged using the specified merging
   * function.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractCache.java,getAllPresent,com.google.common.cache.AbstractCache:getAllPresent(java.lang.Iterable),67,81,"/**
 * Retrieves values for given keys, returning an immutable map.
 * @param keys iterable of keys to retrieve values for
 * @return ImmutableMap containing key-value pairs if present
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/AbstractLoadingCache.java,getAll,com.google.common.cache.AbstractLoadingCache:getAll(java.lang.Iterable),58,67,"/**
 * Retrieves values for given keys, avoiding duplicates.
 * @param keys Iterable of keys to retrieve values for.
 * @return ImmutableMap containing key-value pairs.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",198,207,"/**
 * Converts a stream to an immutable map.
 * @param keyFunction Extracts the key from an element.
 * @param valueFunction Extracts the value from an element.
 * @param mergeFunction Merges values for duplicate keys.
 * @return An ImmutableMap containing the mapped values.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,columnMap,com.google.common.collect.DenseImmutableTable:columnMap(),283,288,"/**
 * Returns a map of column to row-value map.
 * Casts and copies the internal column map.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,rowMap,com.google.common.collect.DenseImmutableTable:rowMap(),290,295,"/**
 * Returns a row map (R -> Map<C, V>) as an immutable map.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,columnMap,com.google.common.collect.SparseImmutableTable:columnMap(),96,101,"/**
 * Returns a map of columns to row-value maps. Casts and copies.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,rowMap,com.google.common.collect.SparseImmutableTable:rowMap(),103,108,"/**
 * Returns a row map.
 * @return ImmutableMap of row data (R -> Map<C, V>)
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/DirectedMultiNetworkConnections.java,ofImmutable,"com.google.common.graph.DirectedMultiNetworkConnections:ofImmutable(java.util.Map,java.util.Map,int)",56,60,"/**
 * Creates a DirectedMultiNetworkConnections with immutable maps.
 * @param inEdges Incoming edge map.
 * @param outEdges Outgoing edge map.
 * @param selfLoopCount Number of self-loops.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedGraphConnections.java,ofImmutable,com.google.common.graph.UndirectedGraphConnections:ofImmutable(java.util.Map),60,62,"/**
 * Creates an UndirectedGraphConnections from a map.
 * @param adjacentNodeValues Map of nodes to their values.
 * @return An UndirectedGraphConnections object.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/UndirectedMultiNetworkConnections.java,ofImmutable,com.google.common.graph.UndirectedMultiNetworkConnections:ofImmutable(java.util.Map),54,56,"/**
 * Creates an immutable UndirectedMultiNetworkConnections from a map.
 * @param incidentEdges Map of edge to node.
 * @return Immutable UndirectedMultiNetworkConnections object.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,getTypeMappings,com.google.common.reflect.TypeResolver$TypeMappingIntrospector:getTypeMappings(java.lang.reflect.Type),380,385,"/**
 * Retrieves type mappings from a given context type.
 * @param contextType The type to introspect for mappings.
 * @return ImmutableMap of TypeVariableKey to Type.
 */
","* Returns type mappings using type parameters and type arguments found in the generic
     * superclass and the super interfaces of {@code contextClass}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,create,"com.google.common.collect.ImmutableTable$SerializedForm:create(com.google.common.collect.ImmutableTable,int[],int[])",472,480,"/**
 * Creates a SerializedForm from a table and cell indices.
 * @param table The ImmutableTable to serialize.
 * @param cellRowIndices Row indices of cells to serialize.
 * @param cellColumnIndices Column indices of cells to serialize.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,iterator,com.google.common.collect.ImmutableSortedSet:iterator(),628,629,"/**
 * Returns an unmodifiable iterator over the elements in this collection.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,higher,com.google.common.collect.DescendingImmutableSortedSet:higher(java.lang.Object),101,104,"/**
 * Returns the next higher element than the given element.
 * @param element the element to find the next higher element for
 * @return the next higher element or null if none exists
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,ceiling,com.google.common.collect.DescendingImmutableSortedSet:ceiling(java.lang.Object),96,99,"/**
 * Returns the smallest element greater than or equal to given element.
 * @param element the element to compare
 * @return the ceiling element or null if none exists
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lastKey,com.google.common.collect.ImmutableSortedMap:lastKey(),914,917,"/**
 * Returns the last key in the key set.
 * @return The last key, or null if the set is empty.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/ByteSource.java,concat,com.google.common.io.ByteSource:concat(java.util.Iterator),396,398,"/**
 * Concatenates ByteSources from an iterator into a single ByteSource.
 */","* Concatenates multiple {@link ByteSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code ByteSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource$CharSequenceCharSource:readLines(),603,606,"/**
 * Reads lines from the iterator and returns them as an immutable list.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,concat,com.google.common.io.CharSource:concat(java.util.Iterator),465,467,"/**
 * Concatenates multiple CharSources into a single CharSource.
 * @param sources Iterator of CharSources to concatenate.
 */
","* Concatenates multiple {@link CharSource} instances into a single source. Streams returned from
   * the source will contain the concatenated data from the streams of the underlying sources.
   *
   * <p>Only one underlying stream will be open at a time. Closing the concatenated stream will
   * close the open underlying stream.
   *
   * <p>Note: The input {@code Iterator} will be copied to an {@code ImmutableList} when this method
   * is called. This will fail if the iterator is infinite and may cause problems if the iterator
   * eagerly fetches data for each source when iterated (rather than producing sources that only
   * load data through their streams). Prefer using the {@link #concat(Iterable)} overload if
   * possible.
   *
   * @param sources the sources to concatenate
   * @return a {@code CharSource} containing the concatenated data
   * @throws NullPointerException if any of {@code sources} is {@code null}
   * @since 15.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableRangeMap,"com.google.common.collect.CollectCollectors:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",343,355,"/**
 * Creates a Collector to build an ImmutableRangeMap from input objects.
 * @param keyFunction Extracts the key (Range) from an input object.
 * @param valueFunction Extracts the value from an input object.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,createRangeMap,com.google.common.collect.ImmutableRangeMap$SerializedForm:createRangeMap(),443,449,"/**
 * Creates a RangeMap from the internal mapOfRanges.
 * @return A RangeMap containing the data from mapOfRanges.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(java.lang.Iterable),135,137,"/**
 * Creates an immutable range set from an iterable of ranges.
 */","* Returns an {@code ImmutableRangeSet} containing each of the specified disjoint ranges.
   * Overlapping ranges and empty ranges are forbidden, though adjacent ranges are permitted and
   * will be merged.
   *
   * @throws IllegalArgumentException if any ranges overlap or are empty
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.lang.Iterable)",259,276,"/**
 * Creates an immutable sorted multiset from an iterable, using the given comparator.
 */","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}. This method iterates over {@code elements} at most once.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOfSorted,com.google.common.collect.ImmutableSortedMultiset:copyOfSorted(com.google.common.collect.SortedMultiset),292,295,"/**
 * Creates an immutable sorted multiset from a sorted multiset.
 * @param sortedMultiset The sorted multiset to copy.
 * @return An ImmutableSortedMultiset containing the same elements.
 */
","* Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by
   * the same {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always
   * uses the natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedMultiset} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedMultiset} or any of its elements is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassLoaderUrls,com.google.common.reflect.ClassPath:getClassLoaderUrls(java.lang.ClassLoader),622,630,"/**
 * Gets URLs from a ClassLoader, parsing Java classpath if needed.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$ParameterizedTypeImpl:<init>(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])",257,264,"/**
 * Constructs a ParameterizedTypeImpl with owner, raw type, and arguments.
 * @param ownerType Owner type, can be null.
 * @param rawType Raw type class.
 * @param typeArguments Type arguments for the generic type.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,<init>,"com.google.common.reflect.Types$WildcardTypeImpl:<init>(java.lang.reflect.Type[],java.lang.reflect.Type[])",470,475,"/**
 * Constructs a WildcardType with specified lower and upper bounds.
 * @param lowerBounds Lower bounds for the wildcard type.
 * @param upperBounds Upper bounds for the wildcard type.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection),114,118,"/**
 * Executes all given Callable tasks and returns a list of Futures.
 * @param tasks Collection of Callable tasks to execute.
 * @return List of Future objects representing task results.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAll,"com.google.common.util.concurrent.WrappingExecutorService:invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)",120,125,"/**
 * Executes multiple Callable tasks with a timeout.
 * @param tasks Collection of Callable tasks.
 * @param timeout Timeout value.
 * @param unit Time unit for the timeout.
 * @return List of Futures representing task results.
 * @throws InterruptedException if interrupted while waiting.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection),127,131,"/**
 * Executes tasks from the collection and returns the result of the first to complete.
 * @param tasks Collection of Callable tasks.
 * @return Result of the first completed task.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/WrappingExecutorService.java,invokeAny,"com.google.common.util.concurrent.WrappingExecutorService:invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)",133,138,"/**
 * Executes tasks from the collection and returns the result of the first completed task.
 * @param tasks Collection of Callable tasks.
 * @param timeout Timeout value.
 * @param unit Time unit for the timeout.
 * @return Result of the first completed task.
 * @throws InterruptedException, ExecutionException, TimeoutException
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,<init>,"com.google.common.collect.Collections2$OrderedPermutationCollection:<init>(java.lang.Iterable,java.util.Comparator)",439,443,"/**
 * Creates an ordered permutation collection from an iterable.
 * @param input Iterable to create the collection from.
 * @param comparator Comparator to define the order.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,immutableSortedCopy,com.google.common.collect.Ordering:immutableSortedCopy(java.lang.Iterable),885,887,"/**
 * Returns a sorted immutable copy of the given elements.
 * @param elements Iterable elements to be sorted and copied.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableBiMap.java,createEntrySet,com.google.common.collect.RegularImmutableBiMap:createEntrySet(),153,158,"/**
 * Creates an immutable set of entries for the map.
 * Returns an empty set if the map is empty.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMap.java,createEntrySet,com.google.common.collect.RegularImmutableMap:createEntrySet(),307,310,"/**
* Creates an immutable set view of the map's entries.
*/
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,buildJdkBacked,com.google.common.collect.ImmutableMultiset$Builder:buildJdkBacked(),594,600,"/**
 * Creates a JdkBackedImmutableMultiset from the stored contents.
 * Returns an empty multiset if contents is empty.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableMultiset.java,create,com.google.common.collect.RegularImmutableMultiset:create(java.util.Collection),43,85,"/**
 * Creates an ImmutableMultiset from a collection of entries.
 * @param entries Collection of entries to create the multiset from
 * @return ImmutableMultiset containing the entries
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableCollection.java,asList,com.google.common.collect.ImmutableCollection:asList(),361,370,"/**
 * Returns a copy of this collection as an immutable list.
 */
","* Returns an {@code ImmutableList} containing the same elements, in the same order, as this
   * collection.
   *
   * <p><b>Performance note:</b> in most cases this method can return quickly without actually
   * copying anything. The exact circumstances under which the copy is performed are undefined and
   * subject to change.
   *
   * @since 2.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,createAsList,com.google.common.collect.ImmutableSet$CachingAsList:createAsList(),321,323,"/**
 * Creates an immutable list from the current collection.
 * @return An ImmutableList containing the collection's elements.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSet.java,createAsList,com.google.common.collect.RegularImmutableSet:createAsList(),111,116,"/**
 * Creates an immutable list from the table's elements.
 * Returns an empty list if the table is empty.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,toImmutableSortedSet,com.google.common.collect.ImmutableSortedSet:toImmutableSortedSet(java.util.Comparator),81,84,"/**
 * Creates a collector to accumulate elements into an ImmutableSortedSet.
 * @param comparator Comparator for sorting the elements.
 */
","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableSortedSet}, ordered by the specified comparator.
   *
   * <p>If the elements contain duplicates (according to the comparator), only the first duplicate
   * in encounter order will appear in the result.
   *
   * @since 21.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOf,com.google.common.collect.ImmutableSortedSet:copyOf(java.util.Iterator),265,271,"/**
 * Creates an ImmutableSortedSet from the given iterator.
 * Uses natural ordering of elements.
 */
","* Returns an immutable sorted set containing the given elements sorted by their natural ordering.
   * When multiple elements are equivalent according to {@code compareTo()}, only the first one
   * specified is included.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildOrThrow,com.google.common.collect.ImmutableBiMap$Builder:buildOrThrow(),451,481,"/**
 * Builds an ImmutableBiMap. Returns empty map if size is 0.
 */","* Returns a newly-created immutable bimap, or throws an exception if any key or value was added
     * more than once. The iteration order of the returned bimap is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added
     * @since 31.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,buildJdkBacked,com.google.common.collect.ImmutableBiMap$Builder:buildJdkBacked(),498,515,"/**
 * Builds a JDK-backed ImmutableBiMap. Used for testing only.
 * @return ImmutableBiMap with the map's contents.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(boolean),529,580,"/**
 * Builds an immutable map from the builder's entries.
 * @param throwIfDuplicateKeys if true, throws exception on duplicate keys
 * @return ImmutableMap containing the entries.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,"com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object,boolean)",955,958,"/**
 * Returns a view of the sorted map from first to but excluding toKey.
 * @param toKey key up to which the head map is returned
 * @param inclusive whether to include toKey
 */
","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than (or equal to, if {@code inclusive}) {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,"com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object,boolean)",1026,1029,"/**
 * Returns a tail map of the sorted map, keys >= fromKey.
 * @param fromKey Key from which the tail map starts.
 * @param inclusive Whether fromKey is included in the tail map.
 */
","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than (or equal to, if {@code inclusive}) {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.
   *
   * @since 12.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,headMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:headMultiset(java.lang.Object,com.google.common.collect.BoundType)",106,109,"/**
 * Returns a view of the multiset containing elements up to upperBound.
 * @param upperBound The upper bound for elements in the view.
 * @param boundType The type of bound (open or closed).
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedMultiset.java,tailMultiset,"com.google.common.collect.RegularImmutableSortedMultiset:tailMultiset(java.lang.Object,com.google.common.collect.BoundType)",111,115,"/**
 * Returns a tail multiset containing elements >= lowerBound.
 * @param lowerBound lower bound for the tail multiset
 * @param boundType inclusivity of the lower bound (OPEN/CLOSED)
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableSortedSet.java,subSetImpl,"com.google.common.collect.RegularImmutableSortedSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",261,265,"/**
 * Returns a sub-set from 'fromElement' to 'toElement' (inclusive/exclusive).
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isPublicSuffix,com.google.common.net.InternetDomainName:isPublicSuffix(),382,384,"/**
 * Checks if this domain part is a public suffix.
 * Returns true if it is, false otherwise.
 */
","* Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla
   * Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A public suffix
   * is one under which Internet users can directly register names, such as {@code com}, {@code
   * co.uk} or {@code pvt.k12.wy.us}. Examples of domain names that are <i>not</i> public suffixes
   * include {@code google.com}, {@code foo.co.uk}, and {@code myblog.blogspot.com}.
   *
   * <p>Public suffixes are a proper superset of {@linkplain #isRegistrySuffix() registry suffixes}.
   * The list of public suffixes additionally contains privately owned domain names under which
   * Internet users can register subdomains. An example of a public suffix that is not a registry
   * suffix is {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i>
   * registry suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasPublicSuffix,com.google.common.net.InternetDomainName:hasPublicSuffix(),398,400,"/**
 * Checks if the domain has a public suffix.
 * Returns true if a public suffix is found, false otherwise.
 */
","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * including if it is a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}. This is the recommended method for determining whether a domain is potentially
   * an addressable host.
   *
   * <p>Note that this method is equivalent to {@link #hasRegistrySuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderPublicSuffix,com.google.common.net.InternetDomainName:isUnderPublicSuffix(),424,426,"/**
 * Checks if the domain is under a public suffix.
 * @return True if under a public suffix, false otherwise.
 */
","* Indicates whether this domain name ends in a {@linkplain #isPublicSuffix() public suffix},
   * while not being a public suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code myblog.blogspot.com}, but not for {@code com},
   * {@code co.uk}, {@code google.invalid}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether it will probably be possible to set cookies on
   * the domain, though even that depends on individual browsers' implementations of cookie
   * controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopPrivateDomain,com.google.common.net.InternetDomainName:isTopPrivateDomain(),440,442,"/**
 * Checks if the domain is a top-level private domain.
 * Returns true if the public suffix index is 1, false otherwise.
 */
","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isPublicSuffix() public suffix}. For example, returns {@code true} for {@code
   * google.com} {@code foo.co.uk}, and {@code myblog.blogspot.com}, but not for {@code
   * www.google.com}, {@code co.uk}, or {@code blogspot.com}.
   *
   * <p>This method can be used to determine whether a domain is probably the highest level for
   * which cookies may be set, though even that depends on individual browsers' implementations of
   * cookie controls. See <a href=""http://www.ietf.org/rfc/rfc2109.txt"">RFC 2109</a> for details.
   *
   * @since 6.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isRegistrySuffix,com.google.common.net.InternetDomainName:isRegistrySuffix(),491,493,"/**
 * Checks if the current registry suffix is the root suffix.
 */","* Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset
   * of the Mozilla Foundation's <a href=""http://publicsuffix.org/"">Public Suffix List</a> (PSL). A
   * registry suffix is one under which Internet users can directly register names via a domain name
   * registrar, and have such registrations lawfully protected by internet-governing bodies such as
   * ICANN. Examples of registry suffixes include {@code com}, {@code co.uk}, and {@code
   * pvt.k12.wy.us}. Examples of domain names that are <i>not</i> registry suffixes include {@code
   * google.com} and {@code foo.co.uk}.
   *
   * <p>Registry suffixes are a proper subset of {@linkplain #isPublicSuffix() public suffixes}. The
   * list of public suffixes additionally contains privately owned domain names under which Internet
   * users can register subdomains. An example of a public suffix that is not a registry suffix is
   * {@code blogspot.com}. Note that it is true that all public suffixes <i>have</i> registry
   * suffixes, since domain name registries collectively control all internet domain names.
   *
   * <p>For considerations on whether the public suffix or registry suffix designation is more
   * suitable for your application, see <a
   * href=""https://github.com/google/guava/wiki/InternetDomainNameExplained"">this article</a>.
   *
   * @return {@code true} if this domain name appears exactly on the public suffix list as part of
   *     the registry suffix section (labelled ""ICANN"").
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,hasRegistrySuffix,com.google.common.net.InternetDomainName:hasRegistrySuffix(),506,508,"/**
 * Checks if a registry suffix exists.
 * @return True if a suffix is found, false otherwise.
 */
","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * including if it is a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code com}, but not for {@code invalid} or {@code
   * google.invalid}.
   *
   * <p>Note that this method is equivalent to {@link #hasPublicSuffix()} because all registry
   * suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isUnderRegistrySuffix,com.google.common.net.InternetDomainName:isUnderRegistrySuffix(),528,530,"/**
 * Checks if the current domain is under a registry suffix.
 * @return True if under a suffix, false otherwise.
 */
","* Indicates whether this domain name ends in a {@linkplain #isRegistrySuffix() registry suffix},
   * while not being a registry suffix itself. For example, returns {@code true} for {@code
   * www.google.com}, {@code foo.co.uk} and {@code blogspot.com}, but not for {@code com}, {@code
   * co.uk}, or {@code google.invalid}.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isTopDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:isTopDomainUnderRegistrySuffix(),543,545,"/**
 * Checks if the domain is a top-level domain under a registry suffix.
 */","* Indicates whether this domain name is composed of exactly one subdomain component followed by a
   * {@linkplain #isRegistrySuffix() registry suffix}. For example, returns {@code true} for {@code
   * google.com}, {@code foo.co.uk}, and {@code blogspot.com}, but not for {@code www.google.com},
   * {@code co.uk}, or {@code myblog.blogspot.com}.
   *
   * <p><b>Warning:</b> This method should not be used to determine the probable highest level
   * parent domain for which cookies may be set. Use {@link #topPrivateDomain()} for that purpose.
   *
   * @since 23.3",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable,java.util.Comparator)",419,423,"/**
 * Creates an immutable sorted map from entries and a comparator.
 * @param entries Iterable of entries to populate the map.
 * @param comparator Comparator for sorting the keys.
 */
","* Returns an immutable map containing the given entries, with keys sorted by the provided
   * comparator.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfSorted,com.google.common.collect.ImmutableSortedMap:copyOfSorted(java.util.SortedMap),435,453,"/**
 * Returns an immutable sorted map backed by the given sorted map.
 * @param map The sorted map to copy.
 * @return An immutable sorted map.
 */
","* Returns an immutable map containing the same entries as the provided sorted map, with the same
   * ordering.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOfInternal,"com.google.common.collect.ImmutableSortedMap:copyOfInternal(java.util.Map,java.util.Comparator)",455,475,"/**
 * Creates an ImmutableSortedMap from a Map, using the provided comparator.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,valueSet,"com.google.common.collect.ImmutableSetMultimap:valueSet(java.util.Comparator,java.util.Collection)",641,646,"/**
 * Creates an immutable set or sorted set from the given values.
 * @param valueComparator Comparator for sorted set (null for unordered)
 * @param values Collection of values to include.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,create,com.google.common.collect.Sets$CartesianSet:create(java.util.List),1543,1580,"/**
 * Creates a Cartesian product of sets.
 * @param sets List of sets to form the Cartesian product.
 * @return CartesianSet containing the product.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,immutableCopy,com.google.common.collect.Sets$SetView:immutableCopy(),602,613,"/**
 * Creates an immutable copy of the set.
 * Uses a builder to avoid unnecessary iterations.
 */
","* Returns an immutable copy of the current contents of this set view. Does not support null
     * elements.
     *
     * <p><b>Warning:</b> this may have unexpected results if a backing set of this view uses a
     * nonstandard notion of equivalence, for example if it is a {@link TreeSet} using a comparator
     * that is inconsistent with {@link Object#equals(Object)}.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$ClassSet:rawTypes(),786,793,"/**
 * Returns a set of raw types that extend or equal the type parameter T.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$TypeSet:rawTypes(),703,709,"/**
 * Returns a set of raw types that are superclasses of T.
 * Uses TypeCollector to gather super types.
 */
","Returns the raw types of the types in this set, in the same order.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAt,com.google.common.collect.MinMaxPriorityQueue:removeAt(int),407,442,"/**
 * Removes the element at the specified index.
 * @param index index of the element to remove
 * @return MoveDesc object describing changes, or null
 */
","* Removes the element at position {@code index}.
   *
   * <p>Normally this method leaves the elements at up to {@code index - 1}, inclusive, untouched.
   * Under these circumstances, it returns {@code null}.
   *
   * <p>Occasionally, in order to maintain the heap invariant, it must swap a later element of the
   * list with one before {@code index}. Under these circumstances it returns a pair of elements as
   * a {@link MoveDesc}. The first one is the element that was previously at the end of the heap and
   * is now at some position before {@code index}. The second element is the one that was swapped
   * down to replace the element at {@code index}. This fact is used by iterator.remove so as to
   * visit elements during a traversal once and only once.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset$AvlNode:remove(java.util.Comparator,java.lang.Object,int,int[])",721,771,"/**
 * Removes elements equal to 'e' using the comparator.
 * @param comparator Comparator for element comparison.
 * @param e Element to remove.
 * @param count Number of elements to remove.
 * @return Updated AvlNode or null if deleted.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int[])",773,820,"/**
 * Sets the count for an element in the AVL tree.
 * @param comparator Comparator for element comparison.
 * @param e Element to set count for.
 * @param count New count value.
 * @param result Result array to track added elements.
 * @return This node or a new rebalanced node.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset$AvlNode:setCount(java.util.Comparator,java.lang.Object,int,int,int[])",822,883,"/**
 * Sets the count of an element in the AVL tree, updating counts.
 * @param comparator Comparator for element comparison.
 * @param e Element to set count for.
 * @param expectedCount Expected count.
 * @param newCount New count.
 * @param result Result array to track count changes.
 * @return This node or a new node after rebalancing.
 */",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/math/BigIntegerMath.java,sqrt,"com.google.common.math.BigIntegerMath:sqrt(java.math.BigInteger,java.math.RoundingMode)",218,251,"/**
 * Calculates the square root of a BigInteger with specified rounding.
 * @param x BigInteger to find the square root of.
 * @param mode Rounding mode to apply.
 */
","* Returns the square root of {@code x}, rounded with the specified rounding mode.
   *
   * @throws IllegalArgumentException if {@code x < 0}
   * @throws ArithmeticException if {@code mode} is {@link RoundingMode#UNNECESSARY} and {@code
   *     sqrt(x)} is not an integer",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.util.Iterator),233,244,"/**
 * Creates an immutable set from an iterator of elements.
 * @param elements Iterator providing elements for the set.
 * @return Immutable set containing elements from the iterator.
 */
","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterator.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJarFile,"com.google.common.reflect.ClassPath$LocationInfo:scanJarFile(java.util.jar.JarFile,com.google.common.collect.ImmutableSet$Builder)",492,501,"/**
 * Scans a JarFile and adds ResourceInfo objects to the builder.
 * @param file JarFile to scan
 * @param builder Builder to add ResourceInfo objects to
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,java.lang.String,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",521,548,"/**
 * Recursively scans a directory for resources, building a set.
 * @param directory Directory to scan.
 * @param packagePrefix Resource path prefix.
 */","* Recursively scan the given directory, adding resources for each file encountered. Symlinks
     * which have already been traversed in the current tree path will be skipped to eliminate
     * cycles; otherwise symlinks are traversed.
     *
     * @param directory the root of the directory to scan
     * @param packagePrefix resource path prefix inside {@code classloader} for any files found
     *     under {@code directory}
     * @param currentPath canonical files already visited in the current directory tree path, for
     *     cycle elimination",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathFromManifest,"com.google.common.reflect.ClassPath:getClassPathFromManifest(java.io.File,java.util.jar.Manifest)",577,601,"/**
 * Extracts classpath entries from a JAR's manifest.
 * @param jarFile The JAR file.
 * @param manifest The JAR's manifest.
 * @return ImmutableSet of File objects representing classpath entries.
 */
","* Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according
   * to <a
   * href=""http://docs.oracle.com/javase/8/docs/technotes/guides/jar/jar.html#Main_Attributes"">JAR
   * File Specification</a>. If {@code manifest} is null, it means the jar file has no manifest, and
   * an empty set will be returned.",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getRawType,com.google.common.reflect.TypeToken:getRawType(),193,199,"/**
 * Returns the raw type of this type variable or wildcard.
 */
","* Returns the raw type of {@code T}. Formally speaking, if {@code T} is returned by {@link
   * java.lang.reflect.Method#getGenericReturnType}, the raw type is what's returned by {@link
   * java.lang.reflect.Method#getReturnType} of the same method object. Specifically:
   *
   * <ul>
   *   <li>If {@code T} is a {@code Class} itself, {@code T} itself is returned.
   *   <li>If {@code T} is a {@link ParameterizedType}, the raw type of the parameterized type is
   *       returned.
   *   <li>If {@code T} is a {@link GenericArrayType}, the returned type is the corresponding array
   *       class. For example: {@code List<Integer>[] => List[]}.
   *   <li>If {@code T} is a type variable or a wildcard type, the raw type of the first upper bound
   *       is returned. For example: {@code <X extends Foo> => Foo}.
   * </ul>",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,someRawTypeIsSubclassOf,com.google.common.reflect.TypeToken:someRawTypeIsSubclassOf(java.lang.Class),885,892,"/**
 * Checks if any raw type is a subclass or equal to superclass.
 * @param superclass The class to check against.
 * @return True if a raw type is a subclass/equal, false otherwise.
 */
",,,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,greatestOf,"com.google.common.collect.Ordering:greatestOf(java.lang.Iterable,int)",820,824,"/**
 * Returns the {@code k} greatest elements from the iterable.
 * Delegates to {@code leastOf} after reversing the iterable.
 */
","* Returns the {@code k} greatest elements of the given iterable according to this ordering, in
   * order from greatest to least. If there are fewer than {@code k} elements present, all will be
   * included.
   *
   * <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
   * elements are equivalent, it is undefined which will come first.
   *
   * <p><b>Java 8+ users:</b> Use {@code Streams.stream(iterable).collect(Comparators.greatest(k,
   * thisComparator))} instead.
   *
   * @return an immutable {@code RandomAccess} list of the {@code k} greatest elements in
   *     <i>descending order</i>
   * @throws IllegalArgumentException if {@code k} is negative
   * @since 8.0",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitStopped,com.google.common.util.concurrent.ServiceManager:awaitStopped(java.time.Duration),366,368,"/**
 * Waits for the stopped state, with a timeout.
 * @param timeout The maximum time to wait.
 * @throws TimeoutException if the timeout expires.
 */
","* Waits for the all the services to reach a terminal state for no more than the given time. After
   * this method returns all services will either be {@linkplain Service.State#TERMINATED
   * terminated} or {@linkplain Service.State#FAILED failed}.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have stopped within the deadline
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,8
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor),127,131,"/**
 * Returns an exiting executor service from the Application.
 * @param executor The ThreadPoolExecutor to use.
 * @return An ExecutorService.
 */
","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor,java.time.Duration)",85,91,"/**
 * Gets an exiting executor service with a given termination timeout.
 * @param executor ThreadPoolExecutor to shut down
 * @param terminationTimeout Duration for termination
 * @return ExecutorService for exiting tasks
 */
","* Converts the given ThreadPoolExecutor into an ExecutorService that exits when the application
   * is complete. It does so by using daemon threads and adding a shutdown hook to wait for their
   * completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newFixedThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor),189,194,"/**
 * Returns the exiting scheduled executor service from the application.
 * @param executor The ScheduledThreadPoolExecutor instance.
 * @return The exiting ScheduledExecutorService.
 */
","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This method waits 120 seconds before continuing with JVM termination, even if the executor
   * has not finished its work.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @return an unmodifiable version of the input which will not hang the JVM",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/MoreExecutors.java,getExitingScheduledExecutorService,"com.google.common.util.concurrent.MoreExecutors:getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor,java.time.Duration)",146,152,"/**
 * Gets an exiting ScheduledExecutorService with a timeout.
 * @param executor Executor to shut down; timeout duration.
 * @return Exiting ScheduledExecutorService.
 */","* Converts the given ScheduledThreadPoolExecutor into a ScheduledExecutorService that exits when
   * the application is complete. It does so by using daemon threads and adding a shutdown hook to
   * wait for their completion.
   *
   * <p>This is mainly for fixed thread pools. See {@link Executors#newScheduledThreadPool(int)}.
   *
   * @param executor the executor to modify to make sure it exits when the application is finished
   * @param terminationTimeout how long to wait for the executor to finish before terminating the
   *     JVM
   * @return an unmodifiable version of the input which will not hang the JVM
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimKey,com.google.common.cache.LocalCache:reclaimKey(com.google.common.cache.ReferenceEntry),1737,1740,"/**
 * Reclaims a key from the appropriate segment.
 * @param entry The ReferenceEntry to reclaim.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,reclaimValue,com.google.common.cache.LocalCache:reclaimValue(com.google.common.cache.LocalCache$ValueReference),1731,1735,"/**
 * Reclaims a value from a value reference within the segment.
 * @param valueReference The reference to reclaim the value from.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,expireEntries,com.google.common.cache.LocalCache$Segment:expireEntries(long),2606,2621,"/**
 * Expels expired entries from the map's recency and access queues.
 * @param now current timestamp to check expiration
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,evictEntries,com.google.common.cache.LocalCache$Segment:evictEntries(com.google.common.cache.ReferenceEntry),2644,2666,"/**
 * Evicts entries from the segment to maintain weight limit.
 * @param newest The newest ReferenceEntry to consider.
 */","* Performs eviction if the segment is over capacity. Avoids flushing the entire cache if the
     * newest entry exceeds the maximum weight all on its own.
     *
     * @param newest the most recently added entry",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,awaitHealthy,com.google.common.util.concurrent.ServiceManager:awaitHealthy(java.time.Duration),314,316,"/**
 * Waits until the service is healthy, up to the given timeout.
 * @param timeout The maximum time to wait, in Duration.
 * @throws TimeoutException if the service doesn't become healthy.
 */
","* Waits for the {@link ServiceManager} to become {@linkplain #isHealthy() healthy} for no more
   * than the given time. The manager will become healthy after all the component services have
   * reached the {@linkplain State#RUNNING running} state.
   *
   * @param timeout the maximum time to wait
   * @throws TimeoutException if not all of the services have finished starting within the deadline
   * @throws IllegalStateException if the service manager reaches a state from which it cannot
   *     become {@linkplain #isHealthy() healthy}.
   * @since 28.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,startupDurations,com.google.common.util.concurrent.ServiceManager:startupDurations(),431,435,"/**
 * Returns startup durations as a map of Service to Duration.
 */","* Returns the service load times. This value will only return startup times for services that
   * have finished starting.
   *
   * @return Map of services and their corresponding startup time, the map entries will be ordered
   *     by startup time.
   * @since 31.0 (but only since 33.4.0 in the Android flavor)",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Parameter.java,getAnnotationsByType,com.google.common.reflect.Parameter:getAnnotationsByType(java.lang.Class),96,99,"/**
 * Retrieves annotations of a specific type.
 * @param annotationType The class of the annotation to retrieve.
 * @return Array of annotations of the specified type.
 */
",* @since 18.0,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantLock(java.lang.String),236,238,"/**
 * Creates a new ReentrantLock with the given name.
 * @param lockName Name of the lock for debugging/monitoring.
 * @return A new ReentrantLock instance.
 */
","Equivalent to {@code newReentrantLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newReentrantReadWriteLock,com.google.common.util.concurrent.CycleDetectingLockFactory:newReentrantReadWriteLock(java.lang.String),251,253,"/**
 * Creates a ReentrantReadWriteLock with the given name.
 * @param lockName Name of the lock (for debugging/monitoring)
 * @return New ReentrantReadWriteLock instance.
 */
","Equivalent to {@code newReentrantReadWriteLock(lockName, false)}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,getOrCreateNodes,com.google.common.util.concurrent.CycleDetectingLockFactory:getOrCreateNodes(java.lang.Class),283,293,"/**
 * Retrieves or creates a map of enum to LockGraphNode for a type.
 * @param clazz Enum class; returns map or creates one if absent.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableGraph.java,putEdge,com.google.common.graph.StandardMutableGraph:putEdge(com.google.common.graph.EndpointPair),54,58,"/**
 * Adds an edge between two nodes.
 * @param endpoints The pair of nodes to connect.
 * @return True if edge added, false otherwise.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,validateSyntax,com.google.common.net.InternetDomainName:validateSyntax(java.util.List),270,287,"/**
 * Validates the syntax of each part in the provided list.
 * @param parts List of strings to validate. Returns true if valid.
 */
","* Validation method used by {@code from} to ensure that the domain name is syntactically valid
   * according to RFC 1035.
   *
   * @return Is the domain name syntactically valid?",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,register,com.google.common.eventbus.SubscriberRegistry:register(java.lang.Object),74,91,"/**
 * Registers a listener to receive events of various types.
 * @param listener The listener object containing subscriber methods.
 */
",Registers all subscriber methods on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,unregister,com.google.common.eventbus.SubscriberRegistry:unregister(java.lang.Object),94,114,"/**
 * Unregisters a listener from all registered event types.
 * Throws IllegalArgumentException if unregistration fails.
 */
",Unregisters all subscribers on the given listener object.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/NetworkBuilder.java,immutable,com.google.common.graph.NetworkBuilder:immutable(),119,122,"/**
 * Creates an ImmutableNetwork.Builder from the current NetworkBuilder.
 */","* Returns an {@link ImmutableNetwork.Builder} with the properties of this {@link NetworkBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableNetwork}.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,inducedSubgraph,"com.google.common.graph.Graphs:inducedSubgraph(com.google.common.graph.Graph,java.lang.Iterable)",519,535,"/**
 * Creates a subgraph induced by the given nodes from the graph.
 * @param graph The original graph.
 * @param nodes Nodes to include in the subgraph.
 * @return The induced subgraph.
 */
","* Returns the subgraph of {@code graph} induced by {@code nodes}. This subgraph is a new graph
   * that contains all of the nodes in {@code nodes}, and all of the {@link Graph#edges() edges}
   * from {@code graph} for which both nodes are contained by {@code nodes}.
   *
   * @throws IllegalArgumentException if any element in {@code nodes} is not a node in the graph",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,copyOf,com.google.common.graph.Graphs:copyOf(com.google.common.graph.Graph),597,606,"/**
 * Creates a mutable copy of the given graph.
 * @param graph The graph to copy.
 * @return A new MutableGraph containing the same nodes and edges.
 */
",Creates a mutable copy of {@code graph} with the same nodes and edges.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,<init>,com.google.common.graph.ImmutableGraph$Builder:<init>(com.google.common.graph.GraphBuilder),136,140,"/**
 * Constructs a Builder with a mutable graph copy from the given builder.
 * @param graphBuilder The GraphBuilder to copy from.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ValueGraphBuilder.java,immutable,com.google.common.graph.ValueGraphBuilder:immutable(),119,122,"/**
 * Creates an ImmutableValueGraph.Builder from the current ValueGraph.
 * @return ImmutableValueGraph.Builder instance
 */
","* Returns an {@link ImmutableValueGraph.Builder} with the properties of this {@link
   * ValueGraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableValueGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterFiltered,"com.google.common.collect.Maps:filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap,com.google.common.base.Predicate)",2837,2842,"/**
 * Filters a BiMap based on a combined predicate.
 * @param map The BiMap to filter.
 * @param entryPredicate Predicate for filtering entries.
 * @return A new filtered BiMap.
 */
","* Support {@code clear()}, {@code removeAll()}, and {@code retainAll()} when filtering a filtered
   * map.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.NavigableMap,com.google.common.base.Predicate)",2753,2761,"/**
 * Filters entries in a NavigableMap based on the given predicate.
 * @param unfiltered The map to filter.
 * @param entryPredicate Predicate to filter entries.
 * @return A new filtered NavigableMap.
 */
","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:headSet(java.lang.Object),3158,3161,"/**
 * Returns a sorted set containing elements up to, but not including, toElement.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subSet,"com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:subSet(java.lang.Object,java.lang.Object)",3152,3156,"/**
 * Returns a sorted set of keys from fromElement (inclusive) to toElement (exclusive).
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailSet,com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet:tailSet(java.lang.Object),3163,3166,"/**
 * Returns a sorted set of keys from {@code fromElement} to the end.
 * @param fromElement the starting key element
 * @return SortedSet of keys from {@code fromElement} to end.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(java.util.SortedMap,com.google.common.base.Predicate)",2718,2725,"/**
 * Filters entries of a sorted map based on a predicate.
 * @param unfiltered The sorted map to filter.
 * @param entryPredicate Predicate to filter entries.
 * @return A new filtered SortedMap.
 */
","* Returns a sorted map containing the mappings in {@code unfiltered} that satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the map's {@code
   * put()} and {@code putAll()} methods throw an {@link IllegalArgumentException}. Similarly, the
   * map's entries have a {@link Entry#setValue} method that throws an {@link
   * IllegalArgumentException} when the existing key and the provided value don't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings that satisfy the filter will be removed from the underlying map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 11.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FilteredKeyMultimap.java,createAsMap,com.google.common.collect.FilteredKeyMultimap:createAsMap(),217,220,"/**
 * Creates a filtered map from the underlying unfiltered map.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.Map,com.google.common.base.Predicate)",2558,2561,"/**
 * Filters a map's entries based on a predicate applied to values.
 * @param unfiltered The map to filter.
 * @param valuePredicate Predicate to test each value.
 * @return A new map containing only matching entries.
 */
","* Returns a map containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned map is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/AbstractNetwork.java,edgeConnecting,com.google.common.graph.AbstractNetwork:edgeConnecting(com.google.common.graph.EndpointPair),199,203,"/**
 * Finds an edge connecting two nodes.
 * @param endpoints EndpointPair containing the two nodes.
 * @return Optional containing the edge or empty if not found.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Comparable,boolean)",642,645,"/**
 * Returns a head set of elements up to `toElement`.
 * @param toElement Element to end the set, inclusive if specified.
 * @param inclusive Whether `toElement` is inclusive.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Comparable,boolean,java.lang.Comparable,boolean)",647,657,"/**
 * Returns a sub-set of the sorted set based on provided bounds.
 * @param fromElement Start element for the sub-set.
 * @param fromInclusive True if 'fromElement' is inclusive.
 * @param toElement End element for the sub-set.
 * @param toInclusive True if 'toElement' is inclusive.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Comparable,boolean)",659,662,"/**
 * Returns a tail set from the given element.
 * @param fromElement The lower bound of the tail set.
 * @param inclusive Whether the fromElement is inclusive.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,headSetImpl,"com.google.common.collect.RegularContiguousSet:headSetImpl(java.lang.Object,boolean)",53,56,"/**
 * Returns a head set, elements less than or equal to toElement.
 * @param toElement Element to return elements up to (inclusive if true)
 * @param inclusive Whether to include toElement in the result.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,subSetImpl,"com.google.common.collect.RegularContiguousSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",58,70,"/**
 * Returns a subSet within the domain, defined by the given range.
 * @param fromElement start element (inclusive/exclusive)
 * @param toElement end element (inclusive/exclusive)
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularContiguousSet.java,tailSetImpl,"com.google.common.collect.RegularContiguousSet:tailSetImpl(java.lang.Object,boolean)",72,75,"/**
 * Returns a tail set containing elements >= fromElement.
 * @param fromElement The lower bound of the tail set.
 * @param inclusive True if bound is inclusive, false otherwise.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeSet.java,containsKey,com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound:containsKey(java.lang.Object),645,648,"/**
 * Checks if the map contains a key.
 * @param key The key to check.
 * @return True if the key exists in the map, false otherwise.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,remove,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1:remove(java.lang.Object),692,703,"/**
 * Removes the value associated with the given key (Range).
 * @param key the key (Range) to remove
 * @return the removed value, or null if the key was not found.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,clear,com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap:clear(),705,708,"/**
 * Clears the contents of the underlying SubRangeMap.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,put,"com.google.common.collect.TreeRangeMap$SubRangeMap:put(com.google.common.collect.Range,java.lang.Object)",528,533,"/**
 * Puts a value into the TreeRangeMap within the specified range.
 * @param range Range to put the value into.
 * @param value Value to be stored.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",146,156,"/**
 * Adds or updates a value for the given range.
 * @param range Range for which to store the value.
 * @param value Value to associate with the range.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap:putAll(com.google.common.collect.RangeMap),183,188,"/**
 * Copies all entries from the given range map into this map.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,addEdge,"com.google.common.graph.StandardMutableNetwork:addEdge(com.google.common.graph.EndpointPair,java.lang.Object)",120,125,"/**
* Adds an edge between two nodes.
* @param endpoints Pair of nodes to connect.
* @param edge The edge to add. Returns true on success.
*/
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",108,114,"/**
 * Creates an ImmutableMap collector from a stream of objects.
 * @param keyFunction Extracts the key from each element.
 * @param valueFunction Extracts the value from each element.
 * @param mergeFunction Merges values for duplicate keys.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}), the
   * values are merged using the specified merging function. If the merging function returns {@code
   * null}, then the collector removes the value that has been computed for the key thus far (though
   * future occurrences of the key would reinsert it).
   *
   * <p>Entries will appear in the encounter order of the first occurrence of the key.
   *
   * @since 21.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,connectionsOf,"com.google.common.graph.ImmutableGraph:connectionsOf(com.google.common.graph.Graph,java.lang.Object)",96,104,"/**
 * Returns graph connections for a given node.
 * @param graph The graph to analyze.
 * @param node The node to get connections for.
 * @return GraphConnections object.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,connectionsOf,"com.google.common.graph.ImmutableValueGraph:connectionsOf(com.google.common.graph.ValueGraph,java.lang.Object)",96,106,"/**
 * Returns graph connections for a given node.
 * @param graph ValueGraph to analyze.
 * @param node Node to find connections for.
 * @return GraphConnections object.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,connectionsOf,"com.google.common.graph.ImmutableNetwork:connectionsOf(com.google.common.graph.Network,java.lang.Object)",104,119,"/**
 * Returns network connections for a node, directed or undirected.
 * @param network The network to analyze.
 * @param node The node to get connections for.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DescendingImmutableSortedSet.java,descendingIterator,com.google.common.collect.DescendingImmutableSortedSet:descendingIterator(),74,78,"/**
 * Returns a descending iterator over the set's elements.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,first,com.google.common.collect.ImmutableSortedSet:first(),752,755,"/**
 * Returns the first element of the collection.
 * Uses the iterator to retrieve the first element.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,toImmutableRangeMap,"com.google.common.collect.ImmutableRangeMap:toImmutableRangeMap(java.util.function.Function,java.util.function.Function)",62,67,"/**
 * Creates an ImmutableRangeMap from a stream of objects.
 * @param keyFunction Extracts the key (Range) from an object.
 * @param valueFunction Extracts the value from an object.
 */
","* Returns a {@code Collector} that accumulates the input elements into a new {@code
   * ImmutableRangeMap}. As in {@link Builder}, overlapping ranges are not permitted.
   *
   * @since 23.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeMap.java,readResolve,com.google.common.collect.ImmutableRangeMap$SerializedForm:readResolve(),435,441,"/**
 * Resolves this RangeMap from a serialized form.
 * Returns an empty RangeMap if mapOfRanges is empty.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.lang.Iterable),211,217,"/**
 * Creates a copy of the sorted multiset from the given iterable.
 * Uses natural ordering for elements.
 */
","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering. To create a copy of a {@code SortedMultiset} that preserves the comparator, call
   * {@link #copyOfSorted} instead. This method iterates over {@code elements} at most once.
   *
   * <p>Note that if {@code s} is a {@code Multiset<String>}, then {@code
   * ImmutableSortedMultiset.copyOf(s)} returns an {@code ImmutableSortedMultiset<String>}
   * containing each of the strings in {@code s}, while {@code ImmutableSortedMultiset.of(s)}
   * returns an {@code ImmutableSortedMultiset<Multiset<String>>} containing one element (the given
   * multiset itself).
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,build,com.google.common.collect.ImmutableSortedMultiset$Builder:build(),560,563,"/**
 * Builds an ImmutableSortedMultiset from the current contents.
 * Returns a new immutable multiset.
 */","* Returns a newly-created {@code ImmutableSortedMultiset} based on the contents of the {@code
     * Builder}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getClassPathEntries,com.google.common.reflect.ClassPath:getClassPathEntries(java.lang.ClassLoader),603,620,"/**
 * Retrieves classpath entries for a classloader, including parent entries.
 * @param classloader ClassLoader to retrieve classpath entries for.
 * @return ImmutableMap of File -> ClassLoader for classpath entries.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveWildcardType,com.google.common.reflect.TypeResolver:resolveWildcardType(java.lang.reflect.WildcardType),245,249,"/**
 * Resolves a wildcard type by resolving its lower and upper bounds.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardType,"com.google.common.reflect.TypeToken:canonicalizeWildcardType(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)",1031,1041,"/**
 * Canonicalizes a wildcard type by refining its upper bounds.
 * @param declaration TypeVariable for bounds checking.
 * @param type WildcardType to canonicalize.
 * @return Canonicalized WildcardType.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOf,com.google.common.reflect.Types:subtypeOf(java.lang.reflect.Type),147,150,"/**
 * Creates a wildcard type with the given upper bound.
 * @param upperBound The upper bound for the wildcard type.
 */
",Returns a new {@link WildcardType} with {@code upperBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,supertypeOf,com.google.common.reflect.Types:supertypeOf(java.lang.reflect.Type),153,156,"/**
 * Creates a wildcard type with the given lower bound.
 * @param lowerBound The lower bound of the wildcard type.
 */
",Returns a new {@link WildcardType} with {@code lowerBound}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,"com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable,java.util.Comparator)",429,432,"/**
 * Returns ordered permutations of elements based on the comparator.
 * @param elements iterable elements
 * @param comparator comparator for ordering elements
 */
","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable} using
   * the specified {@link Comparator} for establishing the lexicographical ordering.
   *
   * <p>Examples:
   *
   * {@snippet :
   * for (List<String> perm : orderedPermutations(asList(""b"", ""c"", ""a""))) {
   *   println(perm);
   * }
   * // -> [""a"", ""b"", ""c""]
   * // -> [""a"", ""c"", ""b""]
   * // -> [""b"", ""a"", ""c""]
   * // -> [""b"", ""c"", ""a""]
   * // -> [""c"", ""a"", ""b""]
   * // -> [""c"", ""b"", ""a""]
   *
   * for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {
   *   println(perm);
   * }
   * // -> [1, 1, 2, 2]
   * // -> [1, 2, 1, 2]
   * // -> [1, 2, 2, 1]
   * // -> [2, 1, 1, 2]
   * // -> [2, 1, 2, 1]
   * // -> [2, 2, 1, 1]
   * }
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Elements that compare equal are considered equal and no new permutations are created by
   * swapping them.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @param comparator a comparator for the iterable's elements.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException If the specified iterable is null, has any null elements, or if
   *     the specified comparator is null.
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSortedList,com.google.common.collect.FluentIterable:toSortedList(java.util.Comparator),636,639,"/**
 * Returns a sorted immutable list based on the given comparator.
 * @param comparator Comparator to define the sort order.
 */
","* Returns an {@code ImmutableList} containing all of the elements from this {@code
   * FluentIterable} in the order specified by {@code comparator}. To produce an {@code
   * ImmutableList} sorted by its natural ordering, use {@code toSortedList(Ordering.natural())}.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.sorted(comparator).collect()}.
   *
   * @param comparator the function by which to sort list elements
   * @throws NullPointerException if any element of this iterable is {@code null}
   * @since 14.0 (since 13.0 as {@code toSortedImmutableList()}).",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyFromEntries,com.google.common.collect.ImmutableMultiset:copyFromEntries(java.util.Collection),217,224,"/**
 * Creates an ImmutableMultiset from a collection of entries.
 * @param entries Collection of entries to create the multiset from.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableAsList.java,readResolve,com.google.common.collect.ImmutableAsList$SerializedForm:readResolve(),71,73,"/**
 * Returns a list view of the internal collection.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.util.Collection),258,265,"/**
 * Creates an immutable list from a collection.
 * Returns existing ImmutableList if possible, else constructs new one.
 */
","* Returns an immutable list containing the given elements, in order.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>Note that if {@code list} is a {@code List<String>}, then {@code ImmutableList.copyOf(list)}
   * returns an {@code ImmutableList<String>} containing each of the strings in {@code list}, while
   * {@code ImmutableList.of(list)} returns an {@code ImmutableList<List<String>>} containing one
   * element (the given list itself).
   *
   * <p>This method is safe to use even when {@code elements} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,getValue,com.google.common.collect.SparseImmutableTable:getValue(int),125,131,"/**
 * Retrieves the value at the specified index.
 * @param index index of the value to retrieve
 * @return The value at the given index.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,asList,com.google.common.collect.ImmutableSet$CachingAsList:asList(),311,319,"/**
 * Returns a list view of the collection. Lazily initialized.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,build,com.google.common.collect.ImmutableBiMap$Builder:build(),437,440,"/**
 * Builds an immutable bi-map. Returns the built bi-map.
 */","* Returns a newly-created immutable bimap. The iteration order of the returned bimap is the
     * order in which entries were inserted into the builder, unless {@link #orderEntriesByValue}
     * was called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys or values. The {@code build()} method
     * will soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys or values were added",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildOrThrow,com.google.common.collect.ImmutableMap$Builder:buildOrThrow(),606,608,"/**
 * Builds the map or throws an exception if building fails.
 * @return The built immutable map.
 */
","* Returns a newly-created immutable map, or throws an exception if any key was added more than
     * once. The iteration order of the returned map is the order in which entries were inserted
     * into the builder, unless {@link #orderEntriesByValue} was called, in which case entries are
     * sorted by value.
     *
     * @throws IllegalArgumentException if duplicate keys were added
     * @since 31.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,buildKeepingLast,com.google.common.collect.ImmutableMap$Builder:buildKeepingLast(),625,627,"/**
 * Builds an immutable map, excluding the last inserted entry.
 */","* Returns a newly-created immutable map, using the last value for any key that was added more
     * than once. The iteration order of the returned map is the order in which entries were
     * inserted into the builder, unless {@link #orderEntriesByValue} was called, in which case
     * entries are sorted by value. If a key was added more than once, it appears in iteration order
     * based on the first time it was added, again unless {@link #orderEntriesByValue} was called.
     *
     * <p>In the current implementation, all values associated with a given key are stored in the
     * {@code Builder} object, even though only one of them will be used in the built map. If there
     * can be many repeated keys, it may be more space-efficient to use a {@link
     * java.util.LinkedHashMap LinkedHashMap} and {@link ImmutableMap#copyOf(Map)} rather than
     * {@code ImmutableMap.Builder}.
     *
     * @since 31.1",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,headMap,com.google.common.collect.ImmutableSortedMap:headMap(java.lang.Object),939,942,"/**
 * Returns a view of the map containing entries with keys < toKey.
 * @param toKey The exclusive key to end the head map.
 */
","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are less
   * than {@code toKey}.
   *
   * <p>The {@link SortedMap#headMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code toKey} greater than an earlier {@code
   * toKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code toKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerEntry,com.google.common.collect.ImmutableSortedMap:lowerEntry(java.lang.Object),1031,1034,"/**
* Returns the entry immediately preceding the given key.
* @param key The key.
* @return The lower entry or null if none exists.
*/
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorEntry,com.google.common.collect.ImmutableSortedMap:floorEntry(java.lang.Object),1041,1044,"/**
* Returns the greatest entry whose key is <= the given key.
* @param key the key to compare against
* @return the floor entry or null if none exists
*/
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",988,999,"/**
 * Returns a submap with keys between fromKey and toKey (inclusive/exclusive).
 * @param fromKey start key
 * @param fromInclusive whether fromKey is inclusive
 * @param toKey end key
 * @param toInclusive whether toKey is inclusive
 * @return submap
 */
","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey} to {@code toKey}, inclusive or exclusive as indicated by the boolean
   * flags.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.
   *
   * @since 12.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,tailMap,com.google.common.collect.ImmutableSortedMap:tailMap(java.lang.Object),1010,1013,"/**
 * Returns a tail map of the sorted map, starting with fromKey.
 * @param fromKey the key from which the tail map starts
 */
","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys are
   * greater than or equals to {@code fromKey}.
   *
   * <p>The {@link SortedMap#tailMap} documentation states that a submap of a submap throws an
   * {@link IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code
   * fromKey}. However, this method doesn't throw an exception in that situation, but instead keeps
   * the original {@code fromKey}.",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingEntry,com.google.common.collect.ImmutableSortedMap:ceilingEntry(java.lang.Object),1051,1054,"/**
 * Returns the least entry whose key is greater than or equal to the given key.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherEntry,com.google.common.collect.ImmutableSortedMap:higherEntry(java.lang.Object),1061,1064,"/**
 * Returns the first entry with key greater than the given key.
 * @param key The key to compare against.
 * @return The higher entry, or null if none exists.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.lang.Iterable),402,409,"/**
 * Creates an ImmutableSortedMap from the given entries, using natural ordering.
 * @param entries Iterable of entries to copy.
 * @return ImmutableSortedMap containing the entries.
 */
","* Returns an immutable map containing the given entries, with keys sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSortedMap,"com.google.common.collect.CollectCollectors:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",229,242,"/**
 * Collects elements to an immutable sorted map.
 * @param comparator Comparator for keys.
 * @param keyFunction Extracts key from element.
 * @param valueFunction Extracts value from element.
 * @param mergeFunction Merges values for duplicate keys.
 * @return ImmutableSortedMap containing collected elements.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map),367,373,"/**
 * Creates an immutable sorted map from the given map.
 * Uses natural ordering of keys.
 */
","* Returns an immutable map containing the same entries as {@code map}, sorted by the natural
   * ordering of the keys.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the keys in {@code map} are not mutually comparable
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to their natural ordering",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,copyOf,"com.google.common.collect.ImmutableSortedMap:copyOf(java.util.Map,java.util.Comparator)",386,389,"/**
 * Creates an immutable sorted map from a map, using the given comparator.
 * @param map source map
 * @param comparator comparator for keys
 * @return ImmutableSortedMap
 */
","* Returns an immutable map containing the same entries as {@code map}, with keys sorted by the
   * provided comparator.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws IllegalArgumentException if any two keys are equal according to the comparator",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,cartesianProduct,com.google.common.collect.Sets:cartesianProduct(java.util.List),1476,1478,"/**
 * Calculates the Cartesian product of a list of sets.
 * @param sets A list of sets to compute the product of.
 * @return A set of lists representing the Cartesian product.
 */
","* Returns every possible list that can be formed by choosing one element from each of the given
   * sets in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the sets. For example:
   *
   * {@snippet :
   * Sets.cartesianProduct(ImmutableList.of(
   *     ImmutableSet.of(1, 2),
   *     ImmutableSet.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a set containing six lists:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : sets.get(0)) {
   *   for (B b1 : sets.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input set is empty, the Cartesian product will also be empty. If no sets at
   * all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of sets of size {@code m, n, p} is a
   * set of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian set is constructed, the input sets are merely copied. Only as the resulting set is
   * iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param sets the sets to choose elements from, in the order that the elements chosen from those
   *     sets should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable set containing immutable lists
   * @throws NullPointerException if {@code sets}, any one of the {@code sets}, or any element of a
   *     provided set is null
   * @throws IllegalArgumentException if the cartesian product size exceeds the {@code int} range
   * @since 2.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeExact,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:removeExact(java.lang.Object),849,857,"/**
 * Removes the first occurrence of the target object from the queue.
 * @param target the object to remove
 * @return true if removed, false otherwise
 */
","Removes only this exact instance, not others that are equals()",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeAndGet,com.google.common.collect.MinMaxPriorityQueue:removeAndGet(int),478,482,"/**
 * Removes and returns the element at the specified index.
 * @param index Index of the element to remove.
 * @return The element removed, or null if index is invalid.
 */
",Removes and returns the value at {@code index}.,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,remove,"com.google.common.collect.TreeMultiset:remove(java.lang.Object,int)",279,301,"/**
 * Removes specified occurrences of an element from the tree.
 * @param element element to remove
 * @param occurrences number of occurrences to remove
 * @return Number of elements removed.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int)",303,323,"/**
 * Sets the count for an element in the range.
 * @param element Element to set count for.
 * @param count New count value. Returns updated count.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeMultiset.java,setCount,"com.google.common.collect.TreeMultiset:setCount(java.lang.Object,int,int)",325,347,"/**
 * Sets the count for an element in the AVL tree.
 * @param element The element to update.
 * @param oldCount The old count.
 * @param newCount The new count.
 * @return True if the count was updated.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSet.java,copyOf,com.google.common.collect.ImmutableSet:copyOf(java.lang.Iterable),221,225,"/**
 * Creates an immutable set from the given iterable.
 * @param elements Iterable to copy elements from.
 * @return ImmutableSet containing the elements.
 */
","* Returns an immutable set containing each of {@code elements}, minus duplicates, in the order
   * each appears first in the source iterable. This method iterates over {@code elements} only
   * once.
   *
   * <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
   * is unnecessary; for example, {@code copyOf(copyOf(anArrayList))} should copy the data only
   * once. This reduces the expense of habitually making defensive copies at API boundaries.
   * However, the precise conditions for skipping the copy operation are undefined.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanDirectory,"com.google.common.reflect.ClassPath$LocationInfo:scanDirectory(java.io.File,com.google.common.collect.ImmutableSet$Builder)",503,508,"/**
 * Scans a directory and populates a set of ResourceInfo objects.
 * @param directory Directory to scan
 * @param builder Builder for ResourceInfo set
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanJar,"com.google.common.reflect.ClassPath$LocationInfo:scanJar(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",465,490,"/**
 * Scans a JAR file and its classpath for resources.
 * @param file JAR file to scan
 * @param scannedUris Set to track scanned files
 * @param builder Builder for ResourceInfo objects
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundAsSuperclass,com.google.common.reflect.TypeToken:boundAsSuperclass(java.lang.reflect.Type),325,333,"/**
 * Returns TypeToken of superclass bound, null if bound is interface.
 */",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,boundsAsInterfaces,com.google.common.reflect.TypeToken:boundsAsInterfaces(java.lang.reflect.Type[]),364,374,"/**
 * Extracts interfaces from type bounds.
 * @param bounds Array of type bounds to check.
 * @return ImmutableList of interfaces found in the bounds.
 */
",,,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,constructor,com.google.common.reflect.TypeToken:constructor(java.lang.reflect.Constructor),629,661,"/**
 * Creates an Invokable for the given constructor.
 * @param constructor Constructor to wrap; must be for the type.
 * @return Invokable instance for the constructor.
 */
","* Returns the {@link Invokable} for {@code constructor}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(java.lang.reflect.Type),487,520,"/**
* Checks if this type is a subtype of the given supertype.
* Handles wildcard types and array types appropriately.
*/
","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,method,com.google.common.reflect.TypeToken:method(java.lang.reflect.Method),590,622,"/**
 * Creates an Invokable for the given method, resolving generic types.
 * @param method The method to create an Invokable for.
 * @return An Invokable object.
 */
","* Returns the {@link Invokable} for {@code method}, which must be a member of {@code T}.
   *
   * @since 14.0",,,True,9
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainKeyReferenceQueue,com.google.common.cache.LocalCache$Segment:drainKeyReferenceQueue(),2475,2487,"/**
 * Drains key reference queue, reclaiming keys up to DRAIN_MAX.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainValueReferenceQueue,com.google.common.cache.LocalCache$Segment:drainValueReferenceQueue(),2489,2501,"/**
 * Drains the value reference queue, reclaiming values from the map.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryExpireEntries,com.google.common.cache.LocalCache$Segment:tryExpireEntries(long),2595,2604,"/**
 * Expire entries if lock acquired.
 * @param now current timestamp for expiration
 */
",Cleanup expired entries when the lock is available.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/CycleDetectingLockFactory.java,newInstanceWithExplicitOrdering,"com.google.common.util.concurrent.CycleDetectingLockFactory:newInstanceWithExplicitOrdering(java.lang.Class,com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)",272,281,"/**
 * Creates a new WithExplicitOrdering instance for an enum.
 * @param enumClass Enum class to order.
 * @param policy Ordering policy to use.
 * @return WithExplicitOrdering instance.
 */
",Creates a {@code CycleDetectingLockFactory.WithExplicitOrdering<E>}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,register,com.google.common.eventbus.EventBus:register(java.lang.Object),235,237,"/**
 * Registers an object with the subscriber list.
 * @param object The object to register.
 */
","* Registers all subscriber methods on {@code object} to receive events.
   *
   * @param object object whose subscriber methods should be registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/EventBus.java,unregister,com.google.common.eventbus.EventBus:unregister(java.lang.Object),245,247,"/**
 * Unregisters an object from the subscriber list.
 * @param object The object to unregister.
 */
","* Unregisters all subscriber methods on a registered {@code object}.
   *
   * @param object object whose subscriber methods should be unregistered.
   * @throws IllegalArgumentException if the object was not previously registered.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/GraphBuilder.java,immutable,com.google.common.graph.GraphBuilder:immutable(),115,118,"/**
 * Returns an ImmutableGraph.Builder for the graph.
 * Uses the underlying GraphBuilder.
 */
","* Returns an {@link ImmutableGraph.Builder} with the properties of this {@link GraphBuilder}.
   *
   * <p>The returned builder can be used for populating an {@link ImmutableGraph}.
   *
   * <p>Note that the returned builder will always have {@link #incidentEdgeOrder} set to {@link
   * ElementOrder#stable()}, regardless of the value that was set in this builder.
   *
   * @since 28.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterEntries,"com.google.common.collect.Maps:filterEntries(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2790,2797,"/**
 * Filters entries in a BiMap based on the provided predicate.
 * @param unfiltered The BiMap to filter.
 * @param entryPredicate Predicate to filter entries.
 * @return A new filtered BiMap.
 */
","* Returns a bimap containing the mappings in {@code unfiltered} that satisfy a predicate. The
   * returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's
   * {@code put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have an {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the existing key and the provided value
   * don't satisfy the predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying bimap and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,descendingMap,com.google.common.collect.Maps$FilteredEntryNavigableMap:descendingMap(),3335,3338,"/**
* Returns a descending map view, filtered by the entry predicate.
*/",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,subMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:subMap(java.lang.Object,boolean,java.lang.Object,boolean)",3340,3348,"/**
 * Returns a submap containing entries within the specified range.
 * @param fromKey start key (inclusive)
 * @param toKey end key (inclusive)
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,headMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:headMap(java.lang.Object,boolean)",3350,3353,"/**
 * Returns a view of the map's entries up to, but not including, toKey.
 * @param toKey The key to end the head map.
 * @param inclusive If true, toKey is included in the head map.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,tailMap,"com.google.common.collect.Maps$FilteredEntryNavigableMap:tailMap(java.lang.Object,boolean)",3355,3358,"/**
 * Returns a tail map with keys >= fromKey (inclusive).
 * @param fromKey Key from which to start the tail map.
 * @param inclusive Whether fromKey is included.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.NavigableMap,com.google.common.base.Predicate)",2496,2503,"/**
 * Filters a NavigableMap based on a predicate applied to its keys.
 * @param unfiltered The map to filter.
 * @param keyPredicate Predicate to apply to the keys.
 * @return A new filtered NavigableMap.
 */
","* Returns a navigable map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.NavigableMap,com.google.common.base.Predicate)",2621,2626,"/**
 * Filters a NavigableMap based on a predicate applied to its values.
 * @param unfiltered The map to filter.
 * @param valuePredicate Predicate to apply to each value.
 * @return A new filtered NavigableMap.
 */
","* Returns a navigable map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(java.util.SortedMap,com.google.common.base.Predicate)",2463,2468,"/**
 * Filters a sorted map based on a predicate applied to its keys.
 * @param unfiltered The map to filter.
 * @param keyPredicate Predicate to apply to each key.
 * @return A new sorted map with filtered keys.
 */
","* Returns a sorted map containing the mappings in {@code unfiltered} whose keys satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a key that doesn't satisfy the predicate, the map's {@code put()} and
   * {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose keys satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code keyPredicate} must be <i>consistent with equals</i>, as documented at
   * {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(java.util.SortedMap,com.google.common.base.Predicate)",2589,2593,"/**
 * Filters a SortedMap's values based on a predicate.
 * @param unfiltered The map to filter.
 * @param valuePredicate Predicate to apply to each value.
 * @return A new SortedMap with filtered values.
 */
","* Returns a sorted map containing the mappings in {@code unfiltered} whose values satisfy a
   * predicate. The returned map is a live view of {@code unfiltered}; changes to one affect the
   * other.
   *
   * <p>The resulting map's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the map
   * and its views. When given a value that doesn't satisfy the predicate, the map's {@code put()},
   * {@code putAll()}, and {@link Entry#setValue} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered map
   * or its views, only mappings whose values satisfy the filter will be removed from the underlying
   * map.
   *
   * <p>The returned map isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered map's methods, such as {@code size()}, iterate across every key/value
   * mapping in the underlying map and determine which satisfy the filter. When a live view is
   * <i>not</i> needed, it may be faster to copy the filtered map and use the copy.
   *
   * <p><b>Warning:</b> {@code valuePredicate} must be <i>consistent with equals</i>, as documented
   * at {@link Predicate#apply}. Do not provide a predicate such as {@code
   * Predicates.instanceOf(ArrayList.class)}, which is inconsistent with equals.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,headSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:headSetImpl(java.lang.Object,boolean)",642,645,"/**
 * Returns a head set of the sorted set up to the specified element.
 * @param toElement Element to return elements up to (exclusive/inclusive).
 * @param inclusive Whether the 'toElement' is inclusive or exclusive.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,subSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:subSetImpl(java.lang.Object,boolean,java.lang.Object,boolean)",647,657,"/**
 * Returns a sub-set of the sorted set based on given bounds.
 * @param fromElement start element (inclusive or exclusive)
 * @param fromInclusive true if fromElement is inclusive
 * @param toElement end element (inclusive or exclusive)
 * @param toInclusive true if toElement is inclusive
 * @return SortedSet containing elements within the range.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,tailSetImpl,"com.google.common.collect.ImmutableRangeSet$AsSet:tailSetImpl(java.lang.Object,boolean)",659,662,"/**
 * Returns a tail set from the given element.
 * @param fromElement The lower bound (inclusive or exclusive).
 * @param inclusive Whether the lower bound is inclusive.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putCoalescing,"com.google.common.collect.TreeRangeMap$SubRangeMap:putCoalescing(com.google.common.collect.Range,java.lang.Object)",535,545,"/**
 * Merges a range-value pair, coalescing overlapping ranges.
 * @param range The range to merge.
 * @param value The value associated with the range.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,putAll,com.google.common.collect.TreeRangeMap$SubRangeMap:putAll(com.google.common.collect.RangeMap),547,559,"/**
 * Adds all entries from a range map.
 * @param rangeMap The range map to add.
 * @throws IllegalArgumentException if span is not enclosed.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,firstKey,com.google.common.collect.ImmutableSortedMap:firstKey(),909,912,"/**
 * Returns the first key in the key set.
 * Uses the keySet() method to achieve this.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,readResolve,com.google.common.collect.ImmutableSortedMultiset$SerializedForm:readResolve(),586,593,"/**
 * Reconstitutes the Multiset from its serialized form.
 * Returns the reconstituted Multiset object.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,"com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Comparator,java.util.Iterator)",243,247,"/**
 * Creates an immutable sorted multiset from an iterator.
 * @param comparator Comparator for sorting elements.
 * @param elements Iterator providing elements for the multiset.
 */
","* Returns an immutable sorted multiset containing the given elements sorted by the given {@code
   * Comparator}.
   *
   * @throws NullPointerException if {@code comparator} or any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,locationsFrom,com.google.common.reflect.ClassPath:locationsFrom(java.lang.ClassLoader),395,401,"/**
 * Creates a set of LocationInfo from classpath entries for a classloader.
 */","* Returns all locations that {@code classloader} and parent loaders load classes and resources
   * from. Callers can {@linkplain LocationInfo#scanResources scan} individual locations selectively
   * or even in parallel.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,subtypeOfComponentType,com.google.common.reflect.Types:subtypeOfComponentType(java.lang.reflect.Type[]),198,214,"/**
 * Finds a subtype of a component type from the bounds.
 * Returns the subtype or null if none found.
 */
","* Returns {@code ? extends X} if any of {@code bounds} is a subtype of {@code X[]}; or null
   * otherwise.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Types.java,newArrayType,com.google.common.reflect.Types:newArrayType(java.lang.reflect.Type),61,75,"/**
 * Creates a new array type based on the component type.
 * Handles wildcard types, otherwise uses current Java version.
 */",Returns the array type of {@code componentType}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,orderedPermutations,com.google.common.collect.Collections2:orderedPermutations(java.lang.Iterable),378,381,"/**
 * Generates ordered permutations of elements using natural ordering.
 * @param elements Iterable of elements to permute.
 * @return Collection of ordered permutations.
 */
","* Returns a {@link Collection} of all the permutations of the specified {@link Iterable}.
   *
   * <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
   * Generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
   * first permutation will be in ascending order, and the last will be in descending order.
   *
   * <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one
   * permutation, instead of two. This is why the elements have to implement {@link Comparable}.
   *
   * <p>An empty iterable has only one permutation, which is an empty list.
   *
   * <p>This method is equivalent to {@code Collections2.orderedPermutations(list,
   * Ordering.natural())}.
   *
   * @param elements the original iterable whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original iterable.
   * @throws NullPointerException if the specified iterable is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.lang.Iterable),182,197,"/**
 * Creates an immutable multiset from the given iterable.
 * Returns existing multiset if it's immutable and complete.
 */","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,copyOf,com.google.common.collect.ImmutableMultiset:copyOf(java.util.Iterator),205,209,"/**
 * Creates an immutable multiset from an iterator of elements.
 * @param elements Iterator providing the elements for the multiset.
 */
","* Returns an immutable multiset containing the given elements, in the ""grouped iteration order""
   * described in the class documentation.
   *
   * @throws NullPointerException if any of {@code elements} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multisets.java,copyHighestCountFirst,com.google.common.collect.Multisets:copyHighestCountFirst(com.google.common.collect.Multiset),1150,1156,"/**
 * Copies multiset, sorts entries by count (highest first), returns immutable copy.
 */","* Returns a copy of {@code multiset} as an {@link ImmutableMultiset} whose iteration order puts
   * the highest count first, with ties broken by the iteration order of the original multiset.
   *
   * @since 11.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CartesianList.java,create,com.google.common.collect.CartesianList:create(java.util.List),40,50,"/**
 * Creates a Cartesian product from a list of lists.
 * Returns an empty list if any input list is empty.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$OrderedPermutationIterator:computeNext(),514,522,"/**
 * Computes and returns the next permutation in the sequence.
 * Returns endOfData() if no more permutations exist.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,computeNext,com.google.common.collect.Collections2$PermutationIterator:computeNext(),646,654,"/**
 * Computes and returns the next permutation in the list.
 * Returns endOfData() if no more permutations exist.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Collections2.java,permutations,com.google.common.collect.Collections2:permutations(java.util.Collection),589,591,"/**
 * Generates all permutations of the input collection.
 * @param elements Collection of elements to permute.
 * @return A Collection of Lists, each representing a permutation.
 */
","* Returns a {@link Collection} of all the permutations of the specified {@link Collection}.
   *
   * <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations
   * generation, described in Knuth's ""The Art of Computer Programming"", Volume 4, Chapter 7,
   * Section 7.2.1.2.
   *
   * <p>If the input list contains equal elements, some of the generated permutations will be equal.
   *
   * <p>An empty collection has only one permutation, which is an empty list.
   *
   * @param elements the original collection whose elements have to be permuted.
   * @return an immutable {@link Collection} containing all the different permutations of the
   *     original collection.
   * @throws NullPointerException if the specified collection is null or has any null elements.
   * @since 12.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableList.java,copyOf,com.google.common.collect.ImmutableList:copyOf(java.lang.Iterable),234,239,"/**
 * Creates an immutable list from an iterable.
 * @param elements iterable to copy; must not be null
 * @return ImmutableList containing elements from iterable
 */
","* Returns an immutable list containing the given elements, in order. If {@code elements} is a
   * {@link Collection}, this method behaves exactly as {@link #copyOf(Collection)}; otherwise, it
   * behaves exactly as {@code copyOf(elements.iterator()}.
   *
   * @throws NullPointerException if {@code elements} contains a null element",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,copyOf,com.google.common.collect.ImmutableRangeSet:copyOf(com.google.common.collect.RangeSet),110,125,"/**
 * Returns an immutable copy of the range set.
 * Returns the original if it's an immutable, full range set.
 */",Returns an immutable copy of the specified {@code RangeSet}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedSet.java,copyOfSorted,com.google.common.collect.ImmutableSortedSet:copyOfSorted(java.util.SortedSet),347,355,"/**
 * Creates an immutable sorted set from a sorted set.
 * @param sortedSet The sorted set to copy.
 * @return An immutable sorted set.
 */
","* Returns an immutable sorted set containing the elements of a sorted set, sorted by the same
   * {@code Comparator}. That behavior differs from {@link #copyOf(Iterable)}, which always uses the
   * natural ordering of the elements.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * <p>This method is safe to use even when {@code sortedSet} is a synchronized or concurrent
   * collection that is currently being modified by another thread.
   *
   * @throws NullPointerException if {@code sortedSet} or any of its elements is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/eventbus/SubscriberRegistry.java,getAnnotatedMethodsNotCached,com.google.common.eventbus.SubscriberRegistry:getAnnotatedMethodsNotCached(java.lang.Class),193,225,"/**
 * Finds methods annotated with @Subscribe, validates them, and returns a list.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/StandardMutableNetwork.java,removeNode,com.google.common.graph.StandardMutableNetwork:removeNode(java.lang.Object),127,144,"/**
 * Removes a node and its incident edges from the graph.
 * @param node The node to remove.
 * @return True if the node was removed, false otherwise.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/CharSource.java,readLines,com.google.common.io.CharSource:readLines(),335,350,"/**
 * Reads lines from a stream and returns them as an ImmutableList.
 * @return ImmutableList of strings read from the stream.
 * @throws IOException if an I/O error occurs.
 */
","* Reads all the lines of this source as a list of strings. The returned list will be empty if
   * this source is empty.
   *
   * <p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of
   * text that is terminated by (but does not include) one of {@code \r\n}, {@code \r} or {@code
   * \n}. If the source's content does not end in a line termination sequence, it is treated as if
   * it does.
   *
   * @throws IOException if an I/O error occurs while reading from this source",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableBiMap,"com.google.common.collect.CollectCollectors:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",244,255,"/**
 * Creates a Collector to build an ImmutableBiMap from input objects.
 * @param keyFunction Extracts the key from an input object.
 * @param valueFunction Extracts the value from an input object.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,build,com.google.common.collect.ImmutableClassToInstanceMap$Builder:build(),138,145,"/**
 * Builds and returns an ImmutableClassToInstanceMap.
 * Returns an empty map if the underlying map is empty.
 */
","* Returns a new immutable class-to-instance map containing the entries provided to this
     * builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableListMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",386,410,"/**
 * Creates an ImmutableListMultimap from a collection of map entries.
 * @param mapEntries Collection of map entries (key, collection of values)
 * @param valueComparator Comparator for values, sorts if provided.
 */
",Creates an ImmutableListMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,readObject,com.google.common.collect.ImmutableListMultimap:readObject(java.io.ObjectInputStream),519,554,"/**
 * Reads object state from an ObjectInputStream during deserialization.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,build,com.google.common.collect.ImmutableMap$Builder:build(),593,595,"/**
 * Builds an immutable map.
 * @return An immutable map containing the accumulated data.
 */
","* Returns a newly-created immutable map. The iteration order of the returned map is the order
     * in which entries were inserted into the builder, unless {@link #orderEntriesByValue} was
     * called, in which case entries are sorted by value.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate keys. The {@code build()} method will soon be
     * deprecated.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,legacyReadResolve,com.google.common.collect.ImmutableMap$SerializedForm:legacyReadResolve(),1283,1294,"/**
 * Reconstructs the map from serialized keys and values.
 * @return Reconstructed Map object.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,fromMapEntries,"com.google.common.collect.ImmutableSetMultimap:fromMapEntries(java.util.Collection,java.util.Comparator)",458,479,"/**
 * Creates an ImmutableSetMultimap from a collection of map entries.
 * @param mapEntries Collection of map entries.
 * @param valueComparator Comparator for values, or null.
 */
",Creates an ImmutableSetMultimap from an asMap.entrySet.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,readObject,com.google.common.collect.ImmutableSetMultimap:readObject(java.io.ObjectInputStream),687,730,"/**
 * Reconstitutes the object from a stream. Handles deserialization.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function,com.google.common.collect.ImmutableMap$Builder)",1392,1406,"/**
 * Builds an ImmutableMap from values and keys derived by keyFunction.
 * Throws exception if duplicate keys are found.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,fromProperties,com.google.common.collect.Maps:fromProperties(java.util.Properties),1418,1455,"/**
 * Converts a Properties object to an ImmutableMap.
 * @param properties Properties object to convert.
 * @return ImmutableMap containing key-value pairs from properties.
 */
","* Creates an {@code ImmutableMap<String, String>} from a {@code Properties} instance. Properties
   * normally derive from {@code Map<Object, Object>}, but they typically contain strings, which is
   * awkward. This method lets you get a plain-old-{@code Map} out of a {@code Properties}.
   *
   * @param properties a {@code Properties} object to be converted
   * @return an immutable map containing all the entries in {@code properties}
   * @throws ClassCastException if any key in {@code properties} is not a {@code String}
   * @throws NullPointerException if any key or value in {@code properties} is null",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,indexMap,com.google.common.collect.Maps:indexMap(java.util.Collection),4471,4478,"/**
 * Creates an immutable map with elements as keys and their index as values.
 * @param list Collection of elements to create the map from.
 * @return ImmutableMap mapping elements to their index.
 */
",Returns a map from the ith element of list to i.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,getNodeConnections,com.google.common.graph.ImmutableGraph:getNodeConnections(com.google.common.graph.Graph),84,94,"/**
 * Creates a map of node to its connections in the graph.
 * @param graph The graph to extract connections from.
 * @return ImmutableMap of node to GraphConnections.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getNodeConnections,com.google.common.graph.ImmutableNetwork:getNodeConnections(com.google.common.graph.Network),82,91,"/**
 * Creates a map of node to its network connections.
 * @param network The network to extract connections from.
 * @return A map of nodes to their respective connections.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,getEdgeToReferenceNode,com.google.common.graph.ImmutableNetwork:getEdgeToReferenceNode(com.google.common.graph.Network),93,102,"/**
 * Creates a map from edge to the reference node (nodeU).
 * @param network The network containing edges and nodes.
 * @return A map of edge to reference node.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,getNodeConnections,com.google.common.graph.ImmutableValueGraph:getNodeConnections(com.google.common.graph.ValueGraph),84,94,"/**
 * Creates an immutable map of node to its graph connections.
 * @param graph The value graph to extract connections from.
 * @return ImmutableMap of node to GraphConnections.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ImmutableTypeToInstanceMap.java,build,com.google.common.reflect.ImmutableTypeToInstanceMap$Builder:build(),91,93,"/**
 * Builds an immutable map from types to instances.
 * Uses the map builder to create the map.
 */
","* Returns a new immutable type-to-instance map containing the entries provided to this builder.
     *
     * @throws IllegalArgumentException if duplicate keys were added",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver$TypeTable:where(java.util.Map),289,299,"/**
 * Creates a new TypeTable with mappings merged from the input map.
 * @param mappings Map of TypeVariableKey to Type, overriding existing mappings.
 */
",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/thirdparty/publicsuffix/TrieParser.java,parseFullString,com.google.thirdparty.publicsuffix.TrieParser:parseFullString(java.lang.String),41,52,"/**
 * Parses a full string into an ImmutableMap of PublicSuffixType.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.util.Iterator,com.google.common.base.Function)",1293,1303,"/**
 * Creates an immutable map from keys iterator and value function.
 * @param keys Iterator of keys.
 * @param valueFunction Function to generate values from keys.
 * @return ImmutableMap with keys and generated values.
 */
","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,lowerKey,com.google.common.collect.ImmutableSortedMap:lowerKey(java.lang.Object),1036,1039,"/**
 * Returns the greatest key strictly less than the given key.
 * @param key the key to compare against
 * @return the lower key, or null if none exists
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,floorKey,com.google.common.collect.ImmutableSortedMap:floorKey(java.lang.Object),1046,1049,"/**
 * Returns the greatest key <= given key, or null if none.
 * @param key The key to find the floor key for.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,subMap,"com.google.common.collect.ImmutableSortedMap:subMap(java.lang.Object,java.lang.Object)",970,973,"/**
 * Returns a view of the sorted map sub-range [fromKey, toKey).
 * fromKey and toKey are inclusive/exclusive, respectively.
 */
","* This method returns a {@code ImmutableSortedMap}, consisting of the entries whose keys ranges
   * from {@code fromKey}, inclusive, to {@code toKey}, exclusive.
   *
   * <p>The {@link SortedMap#subMap} documentation states that a submap of a submap throws an {@link
   * IllegalArgumentException} if passed a {@code fromKey} less than an earlier {@code fromKey}.
   * However, this method doesn't throw an exception in that situation, but instead keeps the
   * original {@code fromKey}. Similarly, this method keeps the original {@code toKey}, instead of
   * throwing an exception, if passed a {@code toKey} greater than an earlier {@code toKey}.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,ceilingKey,com.google.common.collect.ImmutableSortedMap:ceilingKey(java.lang.Object),1056,1059,"/**
 * Returns the smallest key greater than or equal to the given key.
 * @param key The key to find the ceiling key for.
 * @return The ceiling key, or null if none exists.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,higherKey,com.google.common.collect.ImmutableSortedMap:higherKey(java.lang.Object),1066,1069,"/**
 * Returns the next higher key, or null if none exists.
 * @param key the key to search after
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMap.java,toImmutableSortedMap,"com.google.common.collect.ImmutableSortedMap:toImmutableSortedMap(java.util.Comparator,java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)",99,107,"/**
 * Converts stream to an ImmutableSortedMap.
 * @param comparator Key comparator.
 * @param keyFunction Key extraction function.
 * @param valueFunction Value extraction function.
 * @param mergeFunction Value merge function.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSortedMap} whose
   * keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>If the mapped keys contain duplicates (according to the comparator), the values are merged
   * using the specified merging function. Entries will appear in the encounter order of the first
   * occurrence of the key.
   *
   * @since 21.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,remove,com.google.common.collect.MinMaxPriorityQueue$QueueIterator:remove(),807,834,"/**
 * Removes the last element returned by {@link #next()}.
 * Updates internal state for subsequent operations.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,poll,com.google.common.collect.MinMaxPriorityQueue:poll(),303,307,"/**
 * Retrieves and removes the first element of the queue, or null.
 */",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollLast,com.google.common.collect.MinMaxPriorityQueue:pollLast(),368,371,"/**
 * Retrieves and removes the last element of the deque, or null if empty.
 */","* Removes and returns the greatest element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,removeLast,com.google.common.collect.MinMaxPriorityQueue:removeLast(),378,384,"/**
 * Removes and returns the last element.
 * @return The last element or throws NoSuchElementException.
 */
","* Removes and returns the greatest element of this queue.
   *
   * @throws NoSuchElementException if the queue is empty",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toSet,com.google.common.collect.FluentIterable:toSet(),651,654,"/**
 * Converts the iterable to an immutable set.
 * Returns a new ImmutableSet containing the elements.
 */
","* Returns an {@code ImmutableSet} containing all of the elements from this fluent iterable with
   * duplicates removed.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableSet#toImmutableSet} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableSet()}).",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,validate,com.google.common.graph.Traverser:validate(java.lang.Iterable),347,354,"/**
 * Validates a set of nodes by checking their successors.
 * @param startNodes Nodes to validate; returns a copy.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scan,"com.google.common.reflect.ClassPath$LocationInfo:scan(java.io.File,java.util.Set,com.google.common.collect.ImmutableSet$Builder)",447,463,"/**
 * Scans a file, either as a directory or a JAR, and adds resources.
 * @param file File to scan.
 * @param scannedUris Set of already scanned URIs.
 * @param builder Builder for ResourceInfo objects.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(com.google.common.reflect.TypeToken),451,453,"/**
 * Checks if the given type is a supertype of this type.
 * @param type The TypeToken to check.
 * @return True if the type is a supertype, false otherwise.
 */
","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSupertypeOf,com.google.common.reflect.TypeToken:isSupertypeOf(java.lang.reflect.Type),463,465,"/**
 * Checks if the given type is a supertype of this type.
 * @param type the type to check
 * @return true if type is a supertype, false otherwise
 */
","* Returns true if this type is a supertype of the given {@code type}. ""Supertype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOf,com.google.common.reflect.TypeToken:isSubtypeOf(com.google.common.reflect.TypeToken),475,477,"/**
 * Checks if the current type is a subtype of the given type.
 * @param type The TypeToken to check against.
 * @return True if this type is a subtype of the given type.
 */
","* Returns true if this type is a subtype of the given {@code type}. ""Subtype"" is defined
   * according to <a
   * href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.5.1"">the rules for type
   * arguments</a> introduced with Java generics.
   *
   * @since 19.0",,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isOwnedBySubtypeOf,com.google.common.reflect.TypeToken:isOwnedBySubtypeOf(java.lang.reflect.Type),1127,1135,"/**
 * Checks if any subtype of the given type is owned by a type.
 * @param supertype The type to check against.
 * @return True if a subtype is owned by a type.
 */
",,,,True,10
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,drainReferenceQueues,com.google.common.cache.LocalCache$Segment:drainReferenceQueues(),2465,2473,"/**
 * Drains key and value reference queues if enabled in the map.
 */","* Drain the key and value reference queues, cleaning up internal entries containing garbage
     * collected keys or values.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterKeys,"com.google.common.collect.Maps:filterKeys(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2529,2533,"/**
* Filters a BiMap based on a predicate applied to its keys.
* @param unfiltered The BiMap to filter.
* @param keyPredicate Predicate to apply to keys.
* @return A new BiMap containing only matching entries.
*/
","* Returns a bimap containing the mappings in {@code unfiltered} whose keys satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a key that doesn't satisfy the predicate, the bimap's {@code put()},
   * {@code forcePut()} and {@code putAll()} methods throw an {@link IllegalArgumentException}.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every key in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,filterValues,"com.google.common.collect.Maps:filterValues(com.google.common.collect.BiMap,com.google.common.base.Predicate)",2655,2658,"/**
 * Filters a BiMap based on a predicate applied to its values.
 * @param unfiltered The BiMap to filter.
 * @param valuePredicate Predicate for filtering values.
 * @return A new filtered BiMap.
 */
","* Returns a bimap containing the mappings in {@code unfiltered} whose values satisfy a predicate.
   * The returned bimap is a live view of {@code unfiltered}; changes to one affect the other.
   *
   * <p>The resulting bimap's {@code keySet()}, {@code entrySet()}, and {@code values()} views have
   * iterators that don't support {@code remove()}, but all other methods are supported by the bimap
   * and its views. When given a value that doesn't satisfy the predicate, the bimap's {@code
   * put()}, {@code forcePut()} and {@code putAll()} methods throw an {@link
   * IllegalArgumentException}. Similarly, the map's entries have a {@link Entry#setValue} method
   * that throws an {@link IllegalArgumentException} when the provided value doesn't satisfy the
   * predicate.
   *
   * <p>When methods such as {@code removeAll()} and {@code clear()} are called on the filtered
   * bimap or its views, only mappings that satisfy the filter will be removed from the underlying
   * bimap.
   *
   * <p>The returned bimap isn't threadsafe or serializable, even if {@code unfiltered} is.
   *
   * <p>Many of the filtered bimap's methods, such as {@code size()}, iterate across every value in
   * the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
   * needed, it may be faster to copy the filtered bimap and use the copy.
   *
   * <p><b>Warning:</b> {@code entryPredicate} must be <i>consistent with equals </i>, as documented
   * at {@link Predicate#apply}.
   *
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSortedMultiset.java,copyOf,com.google.common.collect.ImmutableSortedMultiset:copyOf(java.util.Iterator),229,235,"/**
 * Creates a copy of a sorted multiset from the given iterator.
 * @param elements Iterator of elements to include in the multiset.
 */
","* Returns an immutable sorted multiset containing the given elements sorted by their natural
   * ordering.
   *
   * <p>This method is not type-safe, as it may be called on elements that are not mutually
   * comparable.
   *
   * @throws ClassCastException if the elements are not mutually comparable
   * @throws NullPointerException if any of {@code elements} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,capture,com.google.common.reflect.TypeResolver$WildcardCapturer:capture(java.lang.reflect.Type),461,498,"/**
* Recursively captures type parameters in a Java type.
* @param type The type to capture.
* @return The captured type.
*/
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveGenericArrayType,com.google.common.reflect.TypeResolver:resolveGenericArrayType(java.lang.reflect.GenericArrayType),251,255,"/**
 * Resolves a GenericArrayType to a resolved Type.
 * @param type GenericArrayType to resolve
 * @return Resolved Type representing the array.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeWildcardsInType,com.google.common.reflect.TypeToken:canonicalizeWildcardsInType(java.lang.reflect.Type),1017,1026,"/**
 * Recursively canonicalizes wildcards in a given type.
 * Returns the canonicalized type.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toGenericType,com.google.common.reflect.TypeToken:toGenericType(java.lang.Class),1158,1184,"/**
 * Returns a TypeToken for the given class, handling arrays & generics.
 */","* Returns the type token representing the generic type declaration of {@code cls}. For example:
   * {@code TypeToken.getGenericType(Iterable.class)} returns {@code Iterable<T>}.
   *
   * <p>If {@code cls} isn't parameterized and isn't a generic array, the type token of the class is
   * returned.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMultiset,com.google.common.collect.FluentIterable:toMultiset(),683,686,"/**
 * Converts the delegate to an immutable multiset.
 * @return An ImmutableMultiset containing elements from the delegate.
 */
","* Returns an {@code ImmutableMultiset} containing all of the elements from this fluent iterable.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableMultiset#toImmutableMultiset} to
   * {@code stream.collect()}.
   *
   * @throws NullPointerException if any element is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,build,com.google.common.collect.ImmutableMultiset$Builder:build(),589,592,"/**
 * Builds an immutable multiset from the current contents.
 * @return ImmutableMultiset containing the elements.
 */
","* Returns a newly-created {@code ImmutableMultiset} based on the contents of the {@code
     * Builder}.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultiset.java,readResolve,com.google.common.collect.ImmutableMultiset$SerializedForm:readResolve(),661,667,"/**
 * Reconstitutes this multiset from a serialized form.
 * Returns a new ImmutableMultiset.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parametersAsMap,com.google.common.net.MediaType:parametersAsMap(),845,847,"/**
 * Converts parameters to a map with ImmutableMultiset values.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Lists.java,cartesianProduct,com.google.common.collect.Lists:cartesianProduct(java.util.List),456,458,"/**
 * Computes the Cartesian product of a list of lists.
 * @param lists List of lists to compute the product of.
 * @return List of lists representing the Cartesian product.
 */
","* Returns every possible list that can be formed by choosing one element from each of the given
   * lists in order; the ""n-ary <a href=""http://en.wikipedia.org/wiki/Cartesian_product"">Cartesian
   * product</a>"" of the lists. For example:
   *
   * {@snippet :
   * Lists.cartesianProduct(ImmutableList.of(
   *     ImmutableList.of(1, 2),
   *     ImmutableList.of(""A"", ""B"", ""C"")))
   * }
   *
   * <p>returns a list containing six lists in the following order:
   *
   * <ul>
   *   <li>{@code ImmutableList.of(1, ""A"")}
   *   <li>{@code ImmutableList.of(1, ""B"")}
   *   <li>{@code ImmutableList.of(1, ""C"")}
   *   <li>{@code ImmutableList.of(2, ""A"")}
   *   <li>{@code ImmutableList.of(2, ""B"")}
   *   <li>{@code ImmutableList.of(2, ""C"")}
   * </ul>
   *
   * <p>The result is guaranteed to be in the ""traditional"", lexicographical order for Cartesian
   * products that you would get from nesting for loops:
   *
   * {@snippet :
   * for (B b0 : lists.get(0)) {
   *   for (B b1 : lists.get(1)) {
   *     ...
   *     ImmutableList<B> tuple = ImmutableList.of(b0, b1, ...);
   *     // operate on tuple
   *   }
   * }
   * }
   *
   * <p>Note that if any input list is empty, the Cartesian product will also be empty. If no lists
   * at all are provided (an empty list), the resulting Cartesian product has one element, an empty
   * list (counter-intuitive, but mathematically consistent).
   *
   * <p><i>Performance notes:</i> while the cartesian product of lists of size {@code m, n, p} is a
   * list of size {@code m x n x p}, its actual memory consumption is much smaller. When the
   * cartesian product is constructed, the input lists are merely copied. Only as the resulting list
   * is iterated are the individual lists created, and these are not retained after iteration.
   *
   * @param lists the lists to choose elements from, in the order that the elements chosen from
   *     those lists should appear in the resulting lists
   * @param <B> any common base class shared by all axes (often just {@link Object})
   * @return the Cartesian product, as an immutable list containing immutable lists
   * @throws IllegalArgumentException if the size of the cartesian product would be greater than
   *     {@link Integer#MAX_VALUE}
   * @throws NullPointerException if {@code lists}, any one of the {@code lists}, or any element of
   *     a provided list is null
   * @since 19.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,parse,com.google.common.cache.CacheBuilderSpec:parse(java.lang.String),141,163,"/**
 * Parses a cache builder specification string and populates a spec.
 * @param cacheBuilderSpecification The specification string to parse.
 * @return Populated CacheBuilderSpec object.
 */
","* Creates a CacheBuilderSpec from a string.
   *
   * @param cacheBuilderSpecification the string form",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/AllEqualOrdering.java,immutableSortedCopy,com.google.common.collect.AllEqualOrdering:immutableSortedCopy(java.lang.Iterable),46,49,"/**
 * Returns a sorted, immutable copy of the iterable.
 * @param iterable The iterable to copy.
 * @return An immutable list containing elements from iterable.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toList,com.google.common.collect.FluentIterable:toList(),619,622,"/**
 * Converts the iterable to an immutable list.
 * Returns a new ImmutableList containing the elements.
 */
","* Returns an {@code ImmutableList} containing all of the elements from this fluent iterable in
   * proper sequence.
   *
   * <p><b>{@code Stream} equivalent:</b> pass {@link ImmutableList#toImmutableList} to {@code
   * stream.collect()}.
   *
   * @throws NullPointerException if any element is {@code null}
   * @since 14.0 (since 12.0 as {@code toImmutableList()}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,listFiles,com.google.common.io.MoreFiles:listFiles(java.nio.file.Path),263,269,"/**
 * Lists files in a directory.
 * @param dir The directory to list.
 * @return Immutable list of files in the directory.
 */
","* Returns an immutable list of paths to the files contained in the given directory.
   *
   * @throws NoSuchFileException if the file does not exist <i>(optional specific exception)</i>
   * @throws NotDirectoryException if the file could not be opened because it is not a directory
   *     <i>(optional specific exception)</i>
   * @throws IOException if an I/O error occurs",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,<init>,com.google.common.net.InternetDomainName:<init>(java.lang.String),144,162,"/**
 * Constructs an InternetDomainName with the given name.
 * Normalizes and validates the domain name.
 */
","Constructor used to implement {@link #from(String)}, and from subclasses.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,<init>,"com.google.common.util.concurrent.ClosingFuture$Combiner:<init>(boolean,java.lang.Iterable)",1259,1265,"/**
 * Initializes a Combiner with futures.
 * @param allMustSucceed if true, all futures must succeed.
 * @param inputs iterable of ClosingFuture objects
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,allAsList,com.google.common.util.concurrent.Futures:allAsList(java.lang.Iterable),600,608,"/**
 * Creates a ListenableFuture that wraps a list of futures.
 * @param futures Iterable of ListenableFutures to combine
 * @return ListenableFuture containing the combined list.
 */
","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * input futures, if all succeed.
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #successfulAsList(Iterable)} in that it will return a failed future
   * if any of the items fails.
   *
   * <p>Canceling this future will attempt to cancel all the component futures, and if any of the
   * provided futures fails or is canceled, this one is, too.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllComplete,com.google.common.util.concurrent.Futures:whenAllComplete(java.lang.Iterable),632,635,"/**
 * Creates a FutureCombiner for when all provided futures complete.
 * @param futures Iterable of ListenableFuture objects.
 * @return A FutureCombiner instance.
 */
","* Creates a {@link FutureCombiner} that processes the completed futures whether or not they're
   * successful.
   *
   * <p>Any failures from the input futures will not be propagated to the returned future.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,whenAllSucceed,com.google.common.util.concurrent.Futures:whenAllSucceed(java.lang.Iterable),657,660,"/**
 * Creates a FutureCombiner for when all futures succeed.
 * @param futures Iterable of ListenableFuture<V> to combine
 * @return FutureCombiner that resolves when all futures succeed
 */
","* Creates a {@link FutureCombiner} requiring that all passed in futures are successful.
   *
   * <p>If any input fails, the returned future fails immediately.
   *
   * @since 20.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,successfulAsList,com.google.common.util.concurrent.Futures:successfulAsList(java.lang.Iterable),883,886,"/**
 * Creates a ListFuture that succeeds when all input futures do.
 * @param futures Iterable of ListenableFuture instances.
 * @return A ListenableFuture representing the list of results.
 */
","* Creates a new {@code ListenableFuture} whose value is a list containing the values of all its
   * successful input futures. The list of results is in the same order as the input list, and if
   * any of the provided futures fails or is canceled, its corresponding position will contain
   * {@code null} (which is indistinguishable from the future having a successful value of {@code
   * null}).
   *
   * <p>The list of results is in the same order as the input list.
   *
   * <p>This differs from {@link #allAsList(Iterable)} in that it's tolerant of failed futures for
   * any of the items, representing them as {@code null} in the result list.
   *
   * <p>Canceling this future will attempt to cancel all the component futures.
   *
   * @param futures futures to combine
   * @return a future that provides a list of the results of the component futures
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,gwtCompatibleToArray,com.google.common.util.concurrent.Futures:gwtCompatibleToArray(java.lang.Iterable),931,941,"/**
 * Converts an iterable of futures to a GWT-compatible array.
 * @param futures Iterable of ListenableFutures
 * @return Array of ListenableFutures
 */
",Can't use Iterables.toArray because it's not gwt compatible,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,unionOf,com.google.common.collect.ImmutableRangeSet:unionOf(java.lang.Iterable),147,149,"/**
 * Creates a union of ranges from an iterable.
 * @param ranges iterable of Range objects to union
 * @return ImmutableRangeSet containing the union of ranges
 */
","* Returns an {@code ImmutableRangeSet} representing the union of the specified ranges.
   *
   * <p>This is the smallest {@code RangeSet} which encloses each of the specified ranges. Duplicate
   * or connected ranges are permitted, and will be coalesced in the result.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,intersection,com.google.common.collect.ImmutableRangeSet:intersection(com.google.common.collect.RangeSet),421,425,"/**
 * Computes the intersection of this range set with another.
 * @param other The other range set.
 * @return A new range set containing the intersection.
 */
","* Returns a new range set consisting of the intersection of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code
   * TreeRangeSet.create(this).removeAll(other.complement())} except it returns an {@code
   * ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,difference,com.google.common.collect.ImmutableRangeSet:difference(com.google.common.collect.RangeSet),435,439,"/**
 * Returns the set of elements in this range set that are not in other.
 * @param other The range set to subtract.
 * @return A new range set representing the difference.
 */
","* Returns a new range set consisting of the difference of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).removeAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableBiMap.java,toImmutableBiMap,"com.google.common.collect.ImmutableBiMap:toImmutableBiMap(java.util.function.Function,java.util.function.Function)",63,68,"/**
 * Creates an ImmutableBiMap collector from elements.
 * @param keyFunction Extracts the key from an element.
 * @param valueFunction Extracts the value from an element.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableBiMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableBiMap} in encounter order.
   *
   * <p>If the mapped keys or values contain duplicates (according to {@link
   * Object#equals(Object)}), an {@code IllegalArgumentException} is thrown when the collection
   * operation is performed. (This differs from the {@code Collector} returned by {@link
   * Collectors#toMap(Function, Function)}, which throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableClassToInstanceMap.java,copyOf,com.google.common.collect.ImmutableClassToInstanceMap:copyOf(java.util.Map),159,169,"/**
 * Creates a copy of a map from classes to instances.
 * @param map The map to copy.
 * @return A new ImmutableClassToInstanceMap.
 */
","* Returns an immutable map containing the same entries as {@code map}. If {@code map} somehow
   * contains entries with duplicate keys (for example, if it is a {@code SortedMap} whose
   * comparator is not <i>consistent with equals</i>), the results of this method are undefined.
   *
   * <p><b>Note:</b> Despite what the method name suggests, if {@code map} is an {@code
   * ImmutableClassToInstanceMap}, no copy will actually be performed.
   *
   * @throws NullPointerException if any key or value in {@code map} is null
   * @throws ClassCastException if any value is not an instance of the type specified by its key",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(com.google.common.collect.Multimap),354,370,"/**
 * Creates a copy of the given multimap.
 * @param multimap The multimap to copy.
 * @return A new ImmutableListMultimap containing the same entries.
 */
","* Returns an immutable multimap containing the same mappings as {@code multimap}. The generated
   * multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,build,com.google.common.collect.ImmutableMultimap$Builder:build(),364,373,"/**
 * Builds an ImmutableMultimap from the internal builder state.
 * Returns an empty multimap if the builder is empty.
 */
",Returns a newly-created immutable multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableMap,"com.google.common.collect.CollectCollectors:toImmutableMap(java.util.function.Function,java.util.function.Function)",186,196,"/**
 * Converts a stream to an ImmutableMap.
 * @param keyFunction Extracts the key from an input element.
 * @param valueFunction Extracts the value from an input element.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",283,335,"/**
 * Merges a range with a value and applies a remapping function.
 * @param range Range to merge.
 * @param value Value to use for unmapped ranges.
 * @param remappingFunction Function to remap existing values.
 */
",* @since 28.1,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,readResolve,com.google.common.collect.ImmutableMap$SerializedForm:readResolve(),1262,1281,"/**
 * Resolves an object from a serialized form. Handles legacy keys.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,build,com.google.common.collect.ImmutableSetMultimap$Builder:build(),394,404,"/**
 * Builds an ImmutableSetMultimap from the internal builder entries.
 * Returns an empty multimap if the builder is empty.
 */
",Returns a newly-created immutable set multimap.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,"com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap,java.util.Comparator)",424,441,"/**
 * Creates an immutable multimap from the given multimap.
 * @param multimap Multimap to copy.
 * @param valueComparator Comparator for values (null for natural order).
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.util.Iterator,com.google.common.base.Function)",1386,1390,"/**
 * Creates an immutable map with unique keys derived from values.
 * @param values Iterator of values to create keys from.
 * @param keyFunction Function to extract key from each value.
 * @return ImmutableMap with unique keys.
 */
","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();
   *
   * Map<String, Color> colorForName =
   *     uniqueIndex(allColors, toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterator, Function) Multimaps.index}.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value
   * @since 10.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,"com.google.common.collect.ArrayTable:<init>(java.lang.Iterable,java.lang.Iterable)",150,169,"/**
 * Creates an ArrayTable with provided row and column keys.
 * @param rowKeys Iterable of row keys.
 * @param columnKeys Iterable of column keys.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/DenseImmutableTable.java,<init>,"com.google.common.collect.DenseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",55,87,"/**
 * Constructs a DenseImmutableTable from cell data, row/column spaces.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ExplicitOrdering.java,<init>,com.google.common.collect.ExplicitOrdering:<init>(java.util.List),31,33,"/**
 * Constructs an Ordering with the given list's order.
 * @param valuesInOrder List defining the desired order.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,<init>,com.google.common.collect.Sets$PowerSet:<init>(java.util.Set),1724,1728,"/**
 * Initializes the power set with a given set.
 * @param input The input set to generate power set from.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,combinations,"com.google.common.collect.Sets:combinations(java.util.Set,int)",1808,1904,"/**
 * Generates combinations of size 'size' from the input set.
 * @param set input set of elements
 * @param size the size of each combination
 * @return a Set containing combinations
 */
","* Returns the set of all subsets of {@code set} of size {@code size}. For example, {@code
   * combinations(ImmutableSet.of(1, 2, 3), 2)} returns the set {@code {{1, 2}, {1, 3}, {2, 3}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> the memory usage of the returned set is only {@code O(n)}. When
   * the result set is constructed, the input set is merely copied. Only as the result set is
   * iterated are the individual subsets created. Each of these subsets occupies an additional O(n)
   * memory but only for as long as the user retains a reference to it. That is, the set returned by
   * {@code combinations} does not retain the individual subsets.
   *
   * @param set the set of elements to take combinations of
   * @param size the number of elements per combination
   * @return the set of all combinations of {@code size} elements from {@code set}
   * @throws IllegalArgumentException if {@code size} is not between 0 and {@code set.size()}
   *     inclusive
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @since 23.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/SparseImmutableTable.java,<init>,"com.google.common.collect.SparseImmutableTable:<init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",47,94,"/**
 * Constructs a SparseImmutableTable from cell list and row/column spaces.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,copyOf,com.google.common.graph.ImmutableGraph:copyOf(com.google.common.graph.Graph),58,64,"/**
 * Creates an immutable copy of the given graph.
 * @param graph The graph to copy.
 * @return An ImmutableGraph containing a copy of the input.
 */
",Returns an immutable copy of {@code graph}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,<init>,com.google.common.graph.ImmutableNetwork:<init>(com.google.common.graph.Network),52,55,"/**
 * Constructs an ImmutableNetwork from an existing Network.
 * @param network The network to copy.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,<init>,com.google.common.graph.ImmutableValueGraph:<init>(com.google.common.graph.ValueGraph),50,52,"/**
 * Constructs an ImmutableValueGraph from a ValueGraph.
 * @param graph The ValueGraph to wrap in an immutable graph.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,com.google.common.reflect.TypeResolver:where(java.util.Map),119,121,"/**
 * Creates a new TypeResolver with provided type mappings.
 * @param mappings Type variable mappings to apply.
 * @return New TypeResolver instance.
 */
",Returns a new {@code TypeResolver} with {@code variable} mapping to {@code type}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,toMap,"com.google.common.collect.Maps:toMap(java.lang.Iterable,com.google.common.base.Function)",1275,1278,"/**
 * Converts an iterable of keys to an immutable map using a function for values.
 * @param keys iterable of keys
 * @param valueFunction function to generate values from keys
 * @return ImmutableMap with keys and generated values
 */
","* Returns an immutable map whose keys are the distinct elements of {@code keys} and whose value
   * for each key was computed by {@code valueFunction}. The map's iteration order is the order of
   * the first appearance of each key in {@code keys}.
   *
   * <p>When there are multiple instances of a key in {@code keys}, it is unspecified whether {@code
   * valueFunction} will be applied to more than one instance of that key and, if it is, which
   * result will be mapped to that key in the returned map.
   *
   * <p>If {@code keys} is a {@link Set}, a live view can be obtained instead of a copy using {@link
   * Maps#asMap(Set, Function)}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<Color, String> colorNames =
   *     allColors.stream().collect(toImmutableMap(c -> c, c -> c.toString()));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @throws NullPointerException if any element of {@code keys} is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,pollFirst,com.google.common.collect.MinMaxPriorityQueue:pollFirst(),341,344,"/**
 * Retrieves and removes the first element of the queue, or null.
 */","* Removes and returns the least element of this queue, or returns {@code null} if the queue is
   * empty.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,offer,com.google.common.collect.MinMaxPriorityQueue:offer(java.lang.Object),288,301,"/**
 * Adds the element to the heap.
 * @param element Element to add. Returns true if added.
 */
","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getAllClasses,com.google.common.reflect.ClassPath:getAllClasses(),154,156,"/**
 * Returns a set of all ClassInfo resources.
 */
","* Returns all classes loadable from the current class path.
   *
   * @since 16.0",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(),162,167,"/**
 * Returns a set of top-level class info objects from resources.
 */","* Returns all top level classes loadable from the current class path. Note that ""top-level-ness""
   * is determined heuristically by class name (see {@link ClassInfo#isTopLevel}).",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$ClassSet:delegate(),764,779,"/**
 * Returns the set of type tokens, caching the result.
 * Returns cached set or computes and caches it.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$InterfaceSet:delegate(),723,732,"/**
 * Returns a set of TypeToken objects representing interfaces.
 * Lazily initializes if null.
 */
",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,rawTypes,com.google.common.reflect.TypeToken$InterfaceSet:rawTypes(),739,746,"/**
 * Returns a set of raw types that extend or implement T.
 */",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,delegate,com.google.common.reflect.TypeToken$TypeSet:delegate(),685,700,"/**
* Returns the set of types associated with this TypeToken.
* Returns cached set or creates/caches a filtered set.
*/",,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Iterable),240,243,"/**
 * Performs a breadth-first traversal starting from the given nodes.
 * @param startNodes Iterable of starting nodes for traversal.
 * @return Iterable representing the breadth-first traversal.
 */
","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a breadth-first traversal. This is equivalent to a breadth-first
   * traversal of a graph with an additional root node whose successors are the listed {@code
   * startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #breadthFirst(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Iterable),290,293,"/**
 * Performs a depth-first pre-order traversal starting from given nodes.
 * @param startNodes Iterable of starting nodes for traversal.
 * @return Iterable representing the depth-first pre-order traversal.
 */
","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first pre-order traversal. This is equivalent to a
   * depth-first pre-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPreOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Iterable),340,343,"/**
 * Performs a depth-first post-order traversal starting from given nodes.
 * @param startNodes Iterable of starting nodes for traversal.
 * @return Iterable containing nodes in post-order.
 */
","* Returns an unmodifiable {@code Iterable} over the nodes reachable from any of the {@code
   * startNodes}, in the order of a depth-first post-order traversal. This is equivalent to a
   * depth-first post-order traversal of a graph with an additional root node whose successors are
   * the listed {@code startNodes}.
   *
   * @throws IllegalArgumentException if any of {@code startNodes} is not an element of the graph
   * @see #depthFirstPostOrder(Object)
   * @since 24.1",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(java.util.Set),440,445,"/**
 * Scans files for resources and returns them as an immutable set.
 * @param scannedFiles files to scan for resources
 * @return ImmutableSet of ResourceInfo objects
 */
","* Scans this location and returns all scanned resources.
     *
     * <p>This file and jar files from ""Class-Path"" entry in the scanned manifest files will be
     * added to {@code scannedFiles}.
     *
     * <p>A file will be scanned at most once even if specified multiple times by one or multiple
     * jar files' ""Class-Path"" manifest entries. Particularly, if a jar file from the ""Class-Path""
     * manifest entry is already in {@code scannedFiles}, either because it was scanned earlier, or
     * it was intentionally added to the set by the caller, it will not be scanned again.
     *
     * <p>Note that when you call {@code location.scanResources(scannedFiles)}, the location will
     * always be scanned even if {@code scannedFiles} already contains it.",,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(com.google.common.reflect.TypeToken),312,320,"/**
 * Returns a specialized Invokable with the given return type.
 * @param returnType The expected return type.
 * @return Specialized Invokable.
 */
",Explicitly specifies the return type of this {@code Invokable}.,,,True,11
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,tryDrainReferenceQueues,com.google.common.cache.LocalCache$Segment:tryDrainReferenceQueues(),2451,2459,"/**
 * Safely drains reference queues, acquiring and releasing a lock.
 */
",Cleanup collected entries when the lock is available.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,runLockedCleanup,com.google.common.cache.LocalCache$Segment:runLockedCleanup(long),3469,3479,"/**
 * Performs cleanup operations under a lock.
 * @param now Current timestamp for expiry checks.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveType,com.google.common.reflect.TypeResolver:resolveType(java.lang.reflect.Type),213,227,"/**
 * Resolves a type, handling TypeVariable, ParameterizedType, etc.
 * @param type The type to resolve.
 * @return The resolved type.
 */
","* Resolves all type variables in {@code type} and all downstream types and returns a
   * corresponding type with type variables resolved.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,is,"com.google.common.reflect.TypeToken:is(java.lang.reflect.Type,java.lang.reflect.TypeVariable)",976,991,"/**
 * Checks if a type is a supertype/subtype of a formal type.
 * @param formalType The formal type to check against.
 * @param declaration TypeVariable for wildcard type canonicalization.
 * @return True if the runtime type matches or is a subtype/supertype.
 */
","* {@code A.is(B)} is defined as {@code Foo<A>.isSubtypeOf(Foo<B>)}.
   *
   * <p>Specifically, returns true if any of the following conditions is met:
   *
   * <ol>
   *   <li>'this' and {@code formalType} are equal.
   *   <li>'this' and {@code formalType} have equal canonical form.
   *   <li>{@code formalType} is {@code <? extends Foo>} and 'this' is a subtype of {@code Foo}.
   *   <li>{@code formalType} is {@code <? super Foo>} and 'this' is a supertype of {@code Foo}.
   * </ol>
   *
   * Note that condition 2 isn't technically accurate under the context of a recursively bounded
   * type variables. For example, {@code Enum<? extends Enum<E>>} canonicalizes to {@code Enum<?>}
   * where {@code E} is the type variable declared on the {@code Enum} class declaration. It's
   * technically <em>not</em> true that {@code Foo<Enum<? extends Enum<E>>>} is a subtype of {@code
   * Foo<Enum<?>>} according to JLS. See testRecursiveWildcardSubtypeBug() for a real example.
   *
   * <p>It appears that properly handling recursive type bounds in the presence of implicit type
   * bounds is not easy. For now we punt, hoping that this defect should rarely cause issues in real
   * code.
   *
   * @param formalType is {@code Foo<formalType>} a supertype of {@code Foo<T>}?
   * @param declaration The type variable in the context of a parameterized type. Used to infer type
   *     bound when {@code formalType} is a wildcard with implicit upper bound.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,canonicalizeTypeArg,"com.google.common.reflect.TypeToken:canonicalizeTypeArg(java.lang.reflect.TypeVariable,java.lang.reflect.Type)",1011,1015,"/**
 * Canonicalizes a type argument, handling WildcardTypes.
 * @param declaration TypeVariable for context.
 * @param typeArg Type argument to canonicalize.
 * @return Canonicalized type.
 */
","* In reflection, {@code Foo<?>.getUpperBounds()[0]} is always {@code Object.class}, even when Foo
   * is defined as {@code Foo<T extends String>}. Thus directly calling {@code <?>.is(String.class)}
   * will return false. To mitigate, we canonicalize wildcards by enforcing the following
   * invariants:
   *
   * <ol>
   *   <li>{@code canonicalize(t)} always produces the equal result for equivalent types. For
   *       example both {@code Enum<?>} and {@code Enum<? extends Enum<?>>} canonicalize to {@code
   *       Enum<? extends Enum<E>}.
   *   <li>{@code canonicalize(t)} produces a ""literal"" supertype of t. For example: {@code Enum<?
   *       extends Enum<?>>} canonicalizes to {@code Enum<?>}, which is a supertype (if we disregard
   *       the upper bound is implicitly an Enum too).
   *   <li>If {@code canonicalize(A) == canonicalize(B)}, then {@code Foo<A>.isSubtypeOf(Foo<B>)}
   *       and vice versa. i.e. {@code A.is(B)} and {@code B.is(A)}.
   *   <li>{@code canonicalize(canonicalize(A)) == canonicalize(A)}.
   * </ol>",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,equals,com.google.common.net.MediaType:equals(java.lang.Object),1193,1206,"/**
 * Checks if two MediaType objects are equal.
 * Compares type, subtype, and parameters for equality.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,hashCode,com.google.common.net.MediaType:hashCode(),1208,1217,"/**
 * Calculates the hash code, caching the result for efficiency.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilder.java,from,com.google.common.cache.CacheBuilder:from(java.lang.String),341,344,"/**
 * Creates a CacheBuilder from a specification string.
 * @param spec Cache builder specification string.
 * @return CacheBuilder instance.
 */
","* Constructs a new {@code CacheBuilder} instance with the settings specified in {@code spec}.
   * This is especially useful for command-line configuration of a {@code CacheBuilder}.
   *
   * @param spec a String in the format specified by {@link CacheBuilderSpec}
   * @since 12.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/CacheBuilderSpec.java,disableCaching,com.google.common.cache.CacheBuilderSpec:disableCaching(),166,169,"/**
 * Disables caching by setting the maximum size to zero.
 * Returns a CacheBuilderSpec object.
 */
",Returns a CacheBuilderSpec that will prevent caching.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,inputFutures,com.google.common.util.concurrent.ClosingFuture$Combiner:inputFutures(),1363,1367,"/**
 * Converts input objects to a list of FluentFutures.
 * @return ImmutableList of FluentFutures representing inputs.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTreeChildren,com.google.common.io.MoreFiles:fileTreeChildren(java.nio.file.Path),298,308,"/**
 * Returns children of a directory as an Iterable<Path>.
 * @param dir The directory to list.
 * @return Iterable<Path> of directory children.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,from,com.google.common.net.InternetDomainName:from(java.lang.String),259,262,"/**
 * Creates an InternetDomainName from a given domain string.
 * @param domain The domain string to create the object from.
 * @return An InternetDomainName object.
 */
","* Returns an instance of {@link InternetDomainName} after lenient validation. Specifically,
   * validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped, while validation against <a
   * href=""http://www.ietf.org/rfc/rfc1035.txt"">RFC 1035</a> is relaxed in the following ways:
   *
   * <ul>
   *   <li>Any part containing non-ASCII characters is considered valid.
   *   <li>Underscores ('_') are permitted wherever dashes ('-') are permitted.
   *   <li>Parts other than the final part may start with a digit, as mandated by <a
   *       href=""https://tools.ietf.org/html/rfc1123#section-2"">RFC 1123</a>.
   * </ul>
   *
   * @param domain A domain name (not IP address)
   * @throws IllegalArgumentException if {@code domain} is not syntactically valid according to
   *     {@link #isValid}
   * @since 10.0 (previously named {@code fromLenient})",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/Futures.java,inCompletionOrder,com.google.common.util.concurrent.Futures:inCompletionOrder(java.lang.Iterable),909,928,"/**
 * Returns futures in completion order of the input futures.
 * @param futures Iterable of ListenableFuture objects.
 * @return ImmutableList of ListenableFuture objects.
 */
","* Returns a list of delegate futures that correspond to the futures received in the order that
   * they complete. Delegate futures return the same value or throw the same exception as the
   * corresponding input future returns/throws.
   *
   * <p>""In the order that they complete"" means, for practical purposes, about what you would
   * expect, but there are some subtleties. First, we do guarantee that, if the output future at
   * index n is done, the output future at index n-1 is also done. (But as usual with futures, some
   * listeners for future n may complete before some for future n-1.) However, it is possible, if
   * one input completes with result X and another later with result Y, for Y to come before X in
   * the output future list. (Such races are impossible to solve without global synchronization of
   * all future completions. And they should have little practical impact.)
   *
   * <p>Cancelling a delegate future propagates to input futures once all the delegates complete,
   * either from cancellation or because an input future has completed. If N futures are passed in,
   * and M delegates are cancelled, the remaining M input futures will be cancelled once N - M of
   * the input futures complete. If all the delegates are cancelled, all the input futures will be
   * too.
   *
   * @since 17.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableRangeSet.java,union,com.google.common.collect.ImmutableRangeSet:union(com.google.common.collect.RangeSet),408,410,"/**
 * Returns the union of this RangeSet with another.
 * @param other The RangeSet to union with.
 * @return A new RangeSet representing the union.
 */
","* Returns a new range set consisting of the union of this range set and {@code other}.
   *
   * <p>This is essentially the same as {@code TreeRangeSet.create(this).addAll(other)} except it
   * returns an {@code ImmutableRangeSet}.
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableListMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",372,384,"/**
* Creates a Collector to flatten to ImmutableListMultimap.
* @param keyFunction Extracts the key from the input.
* @param valuesFunction Extracts a stream of values.
*/
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(com.google.common.collect.Multimap),386,395,"/**
 * Returns a copy of the multimap. Returns the original if it's
 * an immutable, non-partial view. Otherwise, creates a new copy.
 */
","* Returns an immutable multimap containing the same mappings as {@code multimap}, in the
   * ""key-grouped"" iteration order described in the class documentation.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,build,com.google.common.collect.ImmutableListMultimap$Builder:build(),337,340,"/**
 * Builds an immutable multimap. Delegates to superclass implementation.
 */",Returns a newly-created immutable list multimap.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMap.java,toImmutableMap,"com.google.common.collect.ImmutableMap:toImmutableMap(java.util.function.Function,java.util.function.Function)",88,93,"/**
 * Creates an ImmutableMap collector from elements using key/value functions.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableMap} whose keys
   * and values are the result of applying the provided mapping functions to the input elements.
   * Entries appear in the result {@code ImmutableMap} in encounter order.
   *
   * <p>If the mapped keys contain duplicates (according to {@link Object#equals(Object)}, an {@code
   * IllegalArgumentException} is thrown when the collection operation is performed. (This differs
   * from the {@code Collector} returned by {@link Collectors#toMap(Function, Function)}, which
   * throws an {@code IllegalStateException}.)
   *
   * @since 21.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TreeRangeMap.java,merge,"com.google.common.collect.TreeRangeMap$SubRangeMap:merge(com.google.common.collect.Range,java.lang.Object,java.util.function.BiFunction)",573,584,"/**
 * Merges a range with a value, applying a remapping function.
 * @param range Range to merge.
 * @param value Value to merge.
 * @param remappingFunction Function to apply during merge.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableSetMultimap,"com.google.common.collect.CollectCollectors:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",386,397,"/**
 * Creates a Collector to build an ImmutableSetMultimap.
 * @param keyFunction Extracts the key from an object.
 * @param valueFunction Extracts the value from an object.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object)",160,164,"/**
 * Creates an ImmutableSetMultimap containing the given key-value pair.
 */
",Returns an immutable multimap containing a single entry.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",170,175,"/**
 * Creates an ImmutableSetMultimap from the given key-value pairs.
 */
","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",181,187,"/**
 * Creates an ImmutableSetMultimap from the given key-value pairs.
 */","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",193,201,"/**
 * Creates an ImmutableSetMultimap from the given key-value pairs.
 */","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,of,"com.google.common.collect.ImmutableSetMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",207,216,"/**
 * Creates an ImmutableSetMultimap from the given key-value pairs.
 */","* Returns an immutable multimap containing the given entries, in order. Repeated occurrences of
   * an entry (according to {@link Object#equals}) after the first are ignored.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(java.lang.Iterable),452,455,"/**
 * Creates an ImmutableSetMultimap from an iterable of entries.
 * @param entries iterable of key-value pairs
 * @return A new ImmutableSetMultimap containing the entries.
 */
","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered. If two values for the same key are {@linkplain
   * Object#equals equal}, the first value encountered is used.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,invert,com.google.common.collect.ImmutableSetMultimap:invert(),550,558,"/**
 * Inverts the multimap, swapping keys and values.
 * @return Inverted multimap with swapped key/value pairs.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:servicesByState(),626,639,"/**
 * Returns a multimap of services grouped by state, excluding NoOpService.
 * @return ImmutableSetMultimap of State to Service.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,copyOf,com.google.common.collect.ImmutableSetMultimap:copyOf(com.google.common.collect.Multimap),419,422,"/**
 * Creates an immutable multimap from the given multimap.
 * @param multimap The multimap to copy.
 * @return An ImmutableSetMultimap containing the data.
 */
","* Returns an immutable set multimap containing the same mappings as {@code multimap}. The
   * generated multimap's key and value orderings correspond to the iteration ordering of the {@code
   * multimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are
   * ignored.
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.
   *
   * @throws NullPointerException if any key or value in {@code multimap} is null",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Maps.java,uniqueIndex,"com.google.common.collect.Maps:uniqueIndex(java.lang.Iterable,com.google.common.base.Function)",1345,1355,"/**
 * Creates an immutable map with unique keys derived from values.
 * @param values Iterable of values to create keys from.
 * @param keyFunction Function to extract keys from values.
 */
","* Returns a map with the given {@code values}, indexed by keys derived from those values. In
   * other words, each input value produces an entry in the map whose key is the result of applying
   * {@code keyFunction} to that value. These entries appear in the same order as the input values.
   * Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);
   *
   * ImmutableMap<String, Color> colorForName =
   *     uniqueIndex(allColors, c -> c.toString());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link
   * Multimaps#index(Iterable, Function) Multimaps.index}.
   *
   * <p><b>Note:</b> on Java 8+, it is usually better to use streams. For example:
   *
   * {@snippet :
   * import static com.google.common.collect.ImmutableMap.toImmutableMap;
   * ...
   * ImmutableMap<String, Color> colorForName =
   *     allColors.stream().collect(toImmutableMap(c -> c.toString(), c -> c));
   * }
   *
   * <p>Streams provide a more standard and flexible API and the lambdas make it clear what the keys
   * and values in the map are.
   *
   * @param values the values to use when constructing the {@code Map}
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in the input collection to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in the input collection
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any value",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,"com.google.common.collect.ArrayTable:create(java.lang.Iterable,java.lang.Iterable)",106,109,"/**
 * Creates a new ArrayTable with the given row and column keys.
 */
","* Creates an {@code ArrayTable} filled with {@code null}.
   *
   * @param rowKeys row keys that may be stored in the generated table
   * @param columnKeys column keys that may be stored in the generated table
   * @throws NullPointerException if any of the provided keys is null
   * @throws IllegalArgumentException if {@code rowKeys} or {@code columnKeys} contains duplicates
   *     or if exactly one of {@code rowKeys} or {@code columnKeys} is empty.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,<init>,com.google.common.collect.ArrayTable:<init>(com.google.common.collect.Table),171,174,"/**
 * Constructs ArrayTable from another Table, copying all entries.
 * @param table The Table to copy from.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Ordering.java,explicit,com.google.common.collect.Ordering:explicit(java.util.List),231,233,"/**
 * Creates an explicit Ordering based on the provided list.
 * @param valuesInOrder List defining the order of elements.
 * @return An ExplicitOrdering instance.
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Sets.java,powerSet,com.google.common.collect.Sets:powerSet(java.util.Set),1673,1675,"/**
 * Computes the power set of a given set.
 * @param set The input set.
 * @return A set containing all subsets of the input set.
 */
","* Returns the set of all possible subsets of {@code set}. For example, {@code
   * powerSet(ImmutableSet.of(1, 2))} returns the set {@code {{}, {1}, {2}, {1, 2}}}.
   *
   * <p>Elements appear in these subsets in the same iteration order as they appeared in the input
   * set. The order in which these subsets appear in the outer set is undefined. Note that the power
   * set of the empty set is not the empty set, but a one-element set containing the empty set.
   *
   * <p>The returned set and its constituent sets use {@code equals} to decide whether two elements
   * are identical, even if the input set uses a different concept of equivalence.
   *
   * <p><i>Performance notes:</i> while the power set of a set with size {@code n} is of size {@code
   * 2^n}, its memory usage is only {@code O(n)}. When the power set is constructed, the input set
   * is merely copied. Only as the power set is iterated are the individual subsets created, and
   * these subsets themselves occupy only a small constant amount of memory.
   *
   * @param set the set of elements to construct a power set from
   * @return the power set, as an immutable set of immutable sets
   * @throws IllegalArgumentException if {@code set} has more than 30 unique elements (causing the
   *     power set size to exceed the {@code int} range)
   * @throws NullPointerException if {@code set} is or contains {@code null}
   * @see <a href=""http://en.wikipedia.org/wiki/Power_set"">Power set article at Wikipedia</a>
   * @since 4.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forOrderedComponents,"com.google.common.collect.RegularImmutableTable:forOrderedComponents(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)",178,187,"/**
 * Creates an ImmutableTable based on cell list and row/column spaces.
 * Chooses Dense or Sparse implementation based on cell density.
 */",A factory that chooses the most space-efficient representation of the table.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableGraph.java,build,com.google.common.graph.ImmutableGraph$Builder:build(),200,202,"/**
 * Creates an immutable graph from the mutable graph.
 * @return ImmutableGraph - a copy of the mutable graph.
 */
",* Returns a newly-created {@code ImmutableGraph} based on the contents of this {@code Builder}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,copyOf,com.google.common.graph.ImmutableNetwork:copyOf(com.google.common.graph.Network),58,62,"/**
 * Returns an immutable copy of the given network.
 * @param network The network to copy.
 * @return An ImmutableNetwork.
 */
",Returns an immutable copy of {@code network}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,copyOf,com.google.common.graph.ImmutableValueGraph:copyOf(com.google.common.graph.ValueGraph),55,59,"/**
 * Returns an immutable copy of the given ValueGraph.
 * @param graph The ValueGraph to copy.
 * @return An ImmutableValueGraph.
 */
",Returns an immutable copy of {@code graph}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,covariantly,com.google.common.reflect.TypeResolver:covariantly(java.lang.reflect.Type),73,75,"/**
 * Creates a TypeResolver instance with mappings from context type.
 * @param contextType The context type to use for type mappings.
 */
","* Returns a resolver that resolves types ""covariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} is covariantly resolved to {@code <?>} such that return type of {@code List::get} is
   * {@code <?>}.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,invariantly,com.google.common.reflect.TypeResolver:invariantly(java.lang.reflect.Type),88,91,"/**
 * Creates a TypeResolver with an invariant context type.
 * @param contextType The context type to make invariant.
 */
","* Returns a resolver that resolves types ""invariantly"".
   *
   * <p>For example, when resolving {@code List<T>} in the context of {@code ArrayList<?>}, {@code
   * <T>} cannot be invariantly resolved to {@code <?>} because otherwise the parameter type of
   * {@code List::set} will be {@code <?>} and it'll falsely say any object can be passed into
   * {@code ArrayList<?>::set}.
   *
   * <p>Instead, {@code <?>} will be resolved to a capture in the form of a type variable {@code
   * <capture-of-? extends Object>}, effectively preventing {@code set} from accepting any type.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,where,"com.google.common.reflect.TypeResolver:where(java.lang.reflect.Type,java.lang.reflect.Type)",112,116,"/**
 * Creates a TypeResolver with mappings from formal to actual types.
 * @param formal The formal type.
 * @param actual The actual type.
 * @return A TypeResolver with the generated mappings.
 */
","* Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in
   * {@code actual}.
   *
   * <p>For example, if {@code formal} is a {@code TypeVariable T}, and {@code actual} is {@code
   * String.class}, then {@code new TypeResolver().where(formal, actual)} will {@linkplain
   * #resolveType resolve} {@code ParameterizedType List<T>} to {@code List<String>}, and resolve
   * {@code Map<T, Something>} to {@code Map<String, Something>} etc. Similarly, {@code formal} and
   * {@code actual} can be {@code Map<K, V>} and {@code Map<String, Integer>} respectively, or they
   * can be {@code E[]} and {@code String[]} respectively, or even any arbitrary combination
   * thereof.
   *
   * @param formal The type whose type variables or itself is mapped to other type(s). It's almost
   *     always a bug if {@code formal} isn't a type variable and contains no type variable. Make
   *     sure you are passing the two parameters in the right order.
   * @param actual The type that the formal type variable(s) are mapped to. It can be or contain yet
   *     other type variables, in which case these type variables will be further resolved if
   *     corresponding mappings exist in the current {@code TypeResolver} instance.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,toMap,com.google.common.collect.FluentIterable:toMap(com.google.common.base.Function),704,707,"/**
 * Converts the iterable to an immutable map using the given function.
 * @param valueFunction Function to generate value for each element.
 * @return ImmutableMap with elements as keys and values from function.
 */
","* Returns an immutable map whose keys are the distinct elements of this {@code FluentIterable}
   * and whose value for each key was computed by {@code valueFunction}. The map's iteration order
   * is the order of the first appearance of each key in this iterable.
   *
   * <p>When there are multiple instances of a key in this iterable, it is unspecified whether
   * {@code valueFunction} will be applied to more than one instance of that key and, if it is,
   * which result will be mapped to that key in the returned map.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(ImmutableMap.toImmutableMap(k -> k,
   * valueFunction))}.
   *
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     valueFunction} produces {@code null} for any key
   * @since 14.0",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(java.lang.Iterable),218,226,"/**
 * Creates a MinMaxPriorityQueue from an iterable.
 * @param initialContents iterable to initialize the queue
 * @return MinMaxPriorityQueue containing the elements.
 */
","* Builds a new min-max priority queue using the previously specified options, and having the
     * given initial elements.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,add,com.google.common.collect.MinMaxPriorityQueue:add(java.lang.Object),265,270,"/**
 * Adds the specified element to this queue.
 * Calls offer(element) and returns true.
 */","* Adds the given element to this queue. If this queue has a maximum size, after adding {@code
   * element} the queue will automatically evict its greatest element (according to its comparator),
   * which may be {@code element} itself.
   *
   * @return {@code true} always",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,addAll,com.google.common.collect.MinMaxPriorityQueue:addAll(java.util.Collection),272,281,"/**
 * Adds all elements from the given collection to this queue.
 * @param newElements collection of elements to add
 * @return true if the queue was modified, false otherwise
 */
",,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClasses,com.google.common.reflect.ClassPath:getTopLevelClasses(java.lang.String),170,179,"/**
 * Returns top-level classes within the specified package.
 * @param packageName Package name to filter classes by.
 * @return ImmutableSet of ClassInfo objects.
 */
",Returns all top level classes whose package name is {@code packageName}.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,getTopLevelClassesRecursive,com.google.common.reflect.ClassPath:getTopLevelClassesRecursive(java.lang.String),185,195,"/**
 * Gets top-level classes recursively within a package.
 * @param packageName Package name to search within.
 * @return ImmutableSet of ClassInfo objects.
 */
","* Returns all top level classes whose package name is {@code packageName} or starts with {@code
   * packageName} followed by a '.'.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,breadthFirst,com.google.common.graph.Traverser:breadthFirst(java.lang.Object),226,228,"/**
 * Performs a breadth-first traversal starting from a single node.
 * @param startNode The starting node for the traversal.
 */
","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a breadth-first traversal. That is, all the nodes of depth 0 are returned, then
   * depth 1, then 2, and so on.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abcdef} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(Traverser.forGraph(graph).breadthFirst(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Breadth-first_search"">Wikipedia</a> for more
   * info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPreOrder,com.google.common.graph.Traverser:depthFirstPreOrder(java.lang.Object),276,278,"/**
 * Performs a depth-first pre-order traversal starting from a node.
 * @param startNode The starting node for the traversal.
 */
","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first pre-order traversal. ""Pre-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are first visited.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code abecfd} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPreOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Traverser.java,depthFirstPostOrder,com.google.common.graph.Traverser:depthFirstPostOrder(java.lang.Object),326,328,"/**
 * Performs a depth-first post-order traversal starting from a node.
 * @param startNode The starting node for the traversal.
 */
","* Returns an unmodifiable {@code Iterable} over the nodes reachable from {@code startNode}, in
   * the order of a depth-first post-order traversal. ""Post-order"" implies that nodes appear in the
   * {@code Iterable} in the order in which they are visited for the last time.
   *
   * <p><b>Example:</b> The following graph with {@code startNode} {@code a} would return nodes in
   * the order {@code fcebda} (assuming successors are returned in alphabetical order).
   *
   * {@snippet :
   * b ---- a ---- d
   * |      |
   * |      |
   * e ---- c ---- f
   * }
   *
   * <p>The behavior of this method is undefined if the nodes, or the topology of the graph, change
   * while iteration is in progress.
   *
   * <p>The returned {@code Iterable} can be iterated over multiple times. Every iterator will
   * compute its next element on the fly. It is thus possible to limit the traversal to a certain
   * number of nodes as follows:
   *
   * {@snippet :
   * Iterables.limit(
   *     Traverser.forGraph(graph).depthFirstPostOrder(node), maxNumberOfNodes);
   * }
   *
   * <p>See <a href=""https://en.wikipedia.org/wiki/Depth-first_search"">Wikipedia</a> for more info.
   *
   * @throws IllegalArgumentException if {@code startNode} is not an element of the graph",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,scanResources,com.google.common.reflect.ClassPath$LocationInfo:scanResources(),422,424,"/**
 * Scans for resources.
 * Delegates to the overloaded method with an empty set.
 */
",Scans this location and returns all scanned resources.,,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/ClassPath.java,from,com.google.common.reflect.ClassPath:from(java.lang.ClassLoader),123,139,"/**
 * Creates a ClassPath from a ClassLoader, avoiding duplicate scans.
 * @param classloader The class loader to scan.
 * @throws IOException if an I/O error occurs during scanning.
 */
","* Returns a {@code ClassPath} representing all classes and resources loadable from {@code
   * classloader} and its ancestor class loaders.
   *
   * <p><b>Warning:</b> {@code ClassPath} can find classes and resources only from:
   *
   * <ul>
   *   <li>{@link URLClassLoader} instances' {@code file:} URLs
   *   <li>the {@linkplain ClassLoader#getSystemClassLoader() system class loader}. To search the
   *       system class loader even when it is not a {@link URLClassLoader} (as in Java 9), {@code
   *       ClassPath} searches the files from the {@code java.class.path} system property.
   * </ul>
   *
   * @throws IOException if the attempt to read class path resources (jar files or directories)
   *     failed.",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,returning,com.google.common.reflect.Invokable:returning(java.lang.Class),307,309,"/**
 * Configures the return type of the invokable.
 * @param returnType The Class of the return type.
 * @return Invokable with the specified return type.
 */
","* Explicitly specifies the return type of this {@code Invokable}. For example:
   *
   * {@snippet :
   * Method factoryMethod = Person.class.getMethod(""create"");
   * Invokable<?, Person> factory = Invokable.of(getNameMethod).returning(Person.class);
   * }",,,True,12
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,"com.google.common.cache.LocalCache$Segment:getEntry(java.lang.Object,int)",2689,2707,"/**
 * Retrieves entry by key and hash.
 * @param key The key to search for.
 * @param hash The hash code of the key.
 * @return ReferenceEntry if found, otherwise null.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveValue,"com.google.common.cache.LocalCache$Segment:getLiveValue(com.google.common.cache.ReferenceEntry,long)",2724,2740,"/**
 * Retrieves the live value from a reference entry.
 * @param entry Reference entry to check.
 * @param now Current timestamp. Returns value or null if expired.
 */
","* Gets the value from an entry. Returns null if the entry is invalid, partially-collected,
     * loading, or expired.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,preWriteCleanup,com.google.common.cache.LocalCache$Segment:preWriteCleanup(long),3453,3456,"/**
 * Performs cleanup operations before writing data.
 * @param now Current timestamp for cleanup operations.
 */","* Performs routine cleanup prior to executing a write. This should be called every time a write
     * thread acquires the segment lock, immediately after acquiring the lock.
     *
     * <p>Post-condition: expireEntries has been run.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$Segment:cleanUp(),3463,3467,"/**
 * Performs cleanup operations, first locked then unlocked.
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
 * Resolves a type variable, handling bounds and JDK compatibility.
 * @param var TypeVariable to resolve.
 * @param forDependants TypeTable for resolving dependencies.
 * @return Resolved Type or original if bounds are identical.
 */
","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveTypesInPlace,com.google.common.reflect.TypeResolver:resolveTypesInPlace(java.lang.reflect.Type[]),229,235,"/**
 * Resolves types in the provided array in-place.
 * @param types Array of types to resolve.
 * @return The modified array with resolved types.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveParameterizedType,com.google.common.reflect.TypeResolver:resolveParameterizedType(java.lang.reflect.ParameterizedType),257,266,"/**
 * Resolves a parameterized type, handling owner and arguments.
 * @param type ParameterizedType to resolve.
 * @return Resolved ParameterizedType.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$1:getGenericReturnType(),371,374,"/**
 * Returns the generic return type of the method.
 * Delegates to the underlying Method object.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericReturnType,com.google.common.reflect.TypeToken$2:getGenericReturnType(),443,452,"/**
 * Returns the generic return type of the method.
 * Returns Class if no type parameters are present.
 */
","* If the class is parameterized, such as {@link java.util.ArrayList ArrayList}, this returns
     * {@code ArrayList<E>}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,com.google.common.reflect.TypeToken)",235,243,"/**
 * Resolves a type with a where clause.
 * @param typeParam TypeParameter to resolve.
 * @param typeArg TypeToken to use in where clause.
 * @return Resolved TypeToken.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,writeReplace,com.google.common.reflect.TypeToken:writeReplace(),846,850,"/**
 * Resolves the runtime type and returns a serializable representation.
 */
",Implemented to support serialization of subclasses.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,futureCombiner,com.google.common.util.concurrent.ClosingFuture$Combiner:futureCombiner(),1357,1361,"/**
 * Creates a FutureCombiner, succeeds if all input futures do.
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/io/MoreFiles.java,fileTraverser,com.google.common.io.MoreFiles:fileTraverser(),294,296,"/**
 * Creates a Traverser for traversing file trees.
 * Uses MoreFiles.fileTreeChildren to get children.
 */
","* Returns a {@link Traverser} instance for the file and directory tree. The returned traverser
   * starts from a {@link Path} and will return all files and directories it encounters.
   *
   * <p>The returned traverser attempts to avoid following symbolic links to directories. However,
   * the traverser cannot guarantee that it will not follow symbolic links to directories as it is
   * possible for a directory to be replaced with a symbolic link between checking if the file is a
   * directory and actually reading the contents of that directory.
   *
   * <p>If the {@link Path} passed to one of the traversal methods does not exist or is not a
   * directory, no exception will be thrown and the returned {@link Iterable} will contain a single
   * element: that path.
   *
   * <p>{@link DirectoryIteratorException} may be thrown when iterating {@link Iterable} instances
   * created by this traverser if an {@link IOException} is thrown by a call to {@link
   * #listFiles(Path)}.
   *
   * <p>Example: {@code MoreFiles.fileTraverser().depthFirstPreOrder(Paths.get(""/""))} may return the
   * following paths: {@code [""/"", ""/etc"", ""/etc/config.txt"", ""/etc/fonts"", ""/home"", ""/home/alice"",
   * ...]}
   *
   * @since 23.5",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,fromValid,com.google.common.net.HostSpecifier:fromValid(java.lang.String),71,104,"/**
 * Parses a host specifier string, validating format and components.
 * @param specifier Host specifier string to parse.
 * @return HostSpecifier object representing the parsed host.
 */
","* Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already
   * known to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}
   * instead.
   *
   * <p>The specifier must be in one of these formats:
   *
   * <ul>
   *   <li>A domain name, like {@code google.com}
   *   <li>A IPv4 address string, like {@code 127.0.0.1}
   *   <li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code
   *       2001:db8::1}
   * </ul>
   *
   * @throws IllegalArgumentException if the specifier is not valid.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,ancestor,com.google.common.net.InternetDomainName:ancestor(int),594,606,"/**
 * Returns the domain name's ancestor, removing specified levels.
 * @param levels Number of domain levels to remove.
 * @return Ancestor domain name with corresponding parts.
 */
","* Returns the ancestor of the current domain at the given number of levels ""higher"" (rightward)
   * in the subdomain list. The number of levels must be non-negative, and less than {@code N-1},
   * where {@code N} is the number of parts in the domain.
   *
   * <p>TODO: Reasonable candidate for addition to public API.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,child,com.google.common.net.InternetDomainName:child(java.lang.String),617,619,"/**
 * Creates a child domain name by appending the leftParts.
 * @param leftParts String to prepend to the domain name
 * @return New InternetDomainName object
 */
","* Creates and returns a new {@code InternetDomainName} by prepending the argument and a dot to
   * the current name. For example, {@code InternetDomainName.from(""foo.com"").child(""www.bar"")}
   * returns a new {@code InternetDomainName} with the value {@code www.bar.foo.com}. Only lenient
   * validation is performed, as described {@link #from(String) here}.
   *
   * @throws NullPointerException if leftParts is null
   * @throws IllegalArgumentException if the resulting name is not valid",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,isValid,com.google.common.net.InternetDomainName:isValid(java.lang.String),644,651,"/**
 * Checks if the given string is a valid Internet domain name.
 * @param name String to validate. Returns true if valid, false otherwise.
 */
","* Indicates whether the argument is a syntactically valid domain name using lenient validation.
   * Specifically, validation against <a href=""http://www.ietf.org/rfc/rfc3490.txt"">RFC 3490</a>
   * (""Internationalizing Domain Names in Applications"") is skipped.
   *
   * <p>The following two code snippets are equivalent:
   *
   * {@snippet :
   * domainName = InternetDomainName.isValid(name)
   *     ? InternetDomainName.from(name)
   *     : DEFAULT_DOMAIN;
   * }
   *
   * {@snippet :
   * try {
   *   domainName = InternetDomainName.from(name);
   * } catch (IllegalArgumentException e) {
   *   domainName = DEFAULT_DOMAIN;
   * }
   * }
   *
   * @since 8.0 (previously named {@code isValidLenient})",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,flatteningToImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:flatteningToImmutableListMultimap(java.util.function.Function,java.util.function.Function)",122,127,"/**
 * Creates a collector for flattening to ImmutableListMultimap.
 * @param keyFunction Extracts the key from the input.
 * @param valuesFunction Extracts a stream of values.
 */
","* Returns a {@code Collector} accumulating entries into an {@code ImmutableListMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableListMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableListMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableListMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,toImmutableListMultimap,"com.google.common.collect.CollectCollectors:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",359,370,"/**
 * Creates a Collector to accumulate elements into an ImmutableListMultimap.
 * @param keyFunction Extracts the key from an element.
 * @param valueFunction Extracts the value from an element.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object)",141,145,"/**
 * Creates an ImmutableListMultimap with a single key-value pair.
 * @param k1 the key
 * @param v1 the value
 * @return ImmutableListMultimap containing the key-value pair
 */
",Returns an immutable multimap containing a single entry.,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",148,153,"/**
 * Creates an ImmutableListMultimap from the given key-value pairs.
 */
","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",156,162,"/**
 * Creates an ImmutableListMultimap from the given key-value pairs.
 */","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",165,173,"/**
 * Creates an ImmutableListMultimap from the given key-value pairs.
 */","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,of,"com.google.common.collect.ImmutableListMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",176,185,"/**
 * Creates an ImmutableListMultimap from the given key-value pairs.
 */","Returns an immutable multimap containing the given entries, in order.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,copyOf,com.google.common.collect.ImmutableListMultimap:copyOf(java.lang.Iterable),380,383,"/**
 * Creates an immutable multimap from the given iterable of entries.
 */","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,invert,com.google.common.collect.ImmutableListMultimap:invert(),470,478,"/**
 * Inverts the multimap, swapping keys and values.
 * Returns a new multimap with inverted key-value pairs.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.util.Iterator,com.google.common.base.Function)",1719,1729,"/**
 * Creates a multimap from an iterator and a key function.
 * @param values Iterator of values.
 * @param keyFunction Function to extract the key from a value.
 * @return ImmutableListMultimap with keys and values.
 */
","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterator} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterator. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys.iterator(), stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 10.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,"com.google.common.net.MediaType:withParameters(java.lang.String,java.lang.Iterable)",901,924,"/**
 * Adds or replaces parameters for the given attribute with values.
 * @param attribute Parameter attribute name.
 * @param values Parameter values to add/replace.
 * @return New MediaType instance with updated parameters.
 */
","* <em>Replaces</em> all parameters with the given attribute with parameters using the given
   * values. If there are no values, any existing parameters with the given attribute are removed.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code values} is invalid
   * @since 24.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String,com.google.common.collect.Multimap)",1007,1027,"/**
 * Creates a MediaType with normalized type, subtype, and parameters.
 * @param type The media type string.
 * @param subtype The subtype string.
 * @param parameters Multimap of parameters for the media type.
 * @return The created MediaType.
 */
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,toImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:toImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",93,98,"/**
 * Creates an ImmutableSetMultimap from a stream of objects.
 * @param keyFunction Extracts the key from each object.
 * @param valueFunction Extracts the value from each object.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableSetMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableSetMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableSetMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,inverse,com.google.common.collect.ImmutableSetMultimap:inverse(),544,548,"/**
 * Returns the inverse of this multimap.
 * @return An ImmutableSetMultimap with keys and values swapped.
 */
","* {@inheritDoc}
   *
   * <p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableSetMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,markReady,com.google.common.util.concurrent.ServiceManager$ServiceManagerState:markReady(),555,577,"/**
 * Marks the ServiceManager as ready. Throws exception if transitioned.
 */","* Marks the {@link State} as ready to receive transitions. Returns true if no transitions have
     * been observed yet.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,servicesByState,com.google.common.util.concurrent.ServiceManager:servicesByState(),407,410,"/**
 * Returns a multimap of services grouped by state.
 * Uses the underlying state's multimap.
 */
","* Provides a snapshot of the current state of all the services under management.
   *
   * <p>N.B. This snapshot is guaranteed to be consistent, i.e. the set of states returned will
   * correspond to a point in time view of the services.
   *
   * @since 29.0 (present with return type {@code ImmutableMultimap} since 14.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/CollectCollectors.java,flatteningToImmutableSetMultimap,"com.google.common.collect.CollectCollectors:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",399,411,"/**
* Creates a Collector to flatten to an ImmutableSetMultimap.
* @param keyFunction Extracts the key from input.
* @param valuesFunction Extracts a stream of values.
*/
",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,uniqueIndex,com.google.common.collect.FluentIterable:uniqueIndex(com.google.common.base.Function),762,765,"/**
 * Creates a map with unique keys based on the provided function.
 * @param keyFunction Function to extract the key from each element.
 * @return A map with unique keys.
 */
","* Returns a map with the contents of this {@code FluentIterable} as its {@code values}, indexed
   * by keys derived from those values. In other words, each input value produces an entry in the
   * map whose key is the result of applying {@code keyFunction} to that value. These entries appear
   * in the same order as they appeared in this fluent iterable. Example usage:
   *
   * {@snippet :
   * Color red = new Color(""red"", 255, 0, 0);
   * ...
   * FluentIterable<Color> allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));
   *
   * Map<String, Color> colorForName = allColors.uniqueIndex(toStringFunction());
   * assertThat(colorForName).containsEntry(""red"", red);
   * }
   *
   * <p>If your index may associate multiple values with each key, use {@link #index(Function)
   * index}.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code
   * stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))}.
   *
   * @param keyFunction the function used to produce the key for each value
   * @return a map mapping the result of evaluating the function {@code keyFunction} on each value
   *     in this fluent iterable to that value
   * @throws IllegalArgumentException if {@code keyFunction} produces the same key for more than one
   *     value in this fluent iterable
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ArrayTable.java,create,com.google.common.collect.ArrayTable:create(com.google.common.collect.Table),135,140,"/**
 * Creates an ArrayTable from a given Table.
 * @param table The Table to create the ArrayTable from.
 * @return An ArrayTable.
 */
","* Creates an {@code ArrayTable} with the mappings in the provided table.
   *
   * <p>If {@code table} includes a mapping with row key {@code r} and a separate mapping with
   * column key {@code c}, the returned table contains a mapping with row key {@code r} and column
   * key {@code c}. If that row key / column key pair in not in {@code table}, the pair maps to
   * {@code null} in the generated table.
   *
   * <p>The returned table allows subsequent {@code put} calls with the row keys in {@code
   * table.rowKeySet()} and the column keys in {@code table.columnKeySet()}. Calling {@link #put}
   * with other keys leads to an {@code IllegalArgumentException}.
   *
   * <p>The ordering of {@code table.rowKeySet()} and {@code table.columnKeySet()} determines the
   * row and column iteration ordering of the returned table.
   *
   * @throws NullPointerException if {@code table} has a null key",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,readResolve,com.google.common.collect.ImmutableTable$SerializedForm:readResolve(),482,497,"/**
 * Reconstitutes this table after deserialization.
 * Returns a new table or an empty table if cellValues is empty.
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCellsInternal,"com.google.common.collect.RegularImmutableTable:forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)",153,175,"/**
 * Creates a RegularImmutableTable from cells, using provided comparators.
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableNetwork.java,build,com.google.common.graph.ImmutableNetwork$Builder:build(),239,241,"/**
 * Creates an immutable network from the mutable network.
 * @return An ImmutableNetwork representing the current state.
 */
","* Returns a newly-created {@code ImmutableNetwork} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/ImmutableValueGraph.java,build,com.google.common.graph.ImmutableValueGraph$Builder:build(),204,206,"/**
 * Creates an immutable copy of the mutable value graph.
 * Returns the immutable graph.
 */
","* Returns a newly-created {@code ImmutableValueGraph} based on the contents of this {@code
     * Builder}.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,<init>,com.google.common.reflect.TypeToken:<init>(java.lang.Class),155,162,"/**
 * Initializes the TypeToken with the declaring class's type.
 * @param declaringClass Class representing the declaring type.
 */
","* Constructs a new type token of {@code T} while resolving free type variables in the context of
   * {@code declaringClass}.
   *
   * <p>Clients create an empty anonymous subclass. Doing so embeds the type parameter in the
   * anonymous class's type hierarchy so we can reconstitute it at runtime despite erasure.
   *
   * <p>For example:
   *
   * {@snippet :
   * abstract class IKnowMyType<T> {
   *   TypeToken<T> getMyType() {
   *     return new TypeToken<T>(getClass()) {};
   *   }
   * }
   *
   * new IKnowMyType<String>() {}.getMyType() => String
   * }",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getCovariantTypeResolver,com.google.common.reflect.TypeToken:getCovariantTypeResolver(),1186,1192,"/**
 * Returns the covariant type resolver, creating it if null.
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getInvariantTypeResolver,com.google.common.reflect.TypeToken:getInvariantTypeResolver(),1194,1200,"/**
 * Returns the invariant type resolver, creating it if necessary.
 */",,,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue$Builder:create(),210,212,"/**
 * Creates a new MinMaxPriorityQueue with an empty initial set.
 */","* Builds a new min-max priority queue using the previously specified options, and having no
     * initial contents.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(java.lang.Iterable),118,121,"/**
 * Creates a MinMaxPriorityQueue from an iterable.
 * @param initialContents Initial elements for the queue.
 * @return A new MinMaxPriorityQueue.
 */
","* Creates a new min-max priority queue using natural order, no maximum size, and initially
   * containing the given elements.",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,reachableNodes,"com.google.common.graph.Graphs:reachableNodes(com.google.common.graph.Graph,java.lang.Object)",235,238,"/**
 * Finds reachable nodes from a given node in a graph.
 * @param graph The graph to traverse.
 * @param node The starting node.
 * @return Set of reachable nodes.
 */
","* Returns the set of nodes that are reachable from {@code node}. Node B is defined as reachable
   * from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A
   * and ending at node B. Note that a node is always reachable from itself via a zero-length path.
   *
   * <p>This is a ""snapshot"" based on the current topology of {@code graph}, rather than a live view
   * of the set of nodes reachable from {@code node}. In other words, the returned {@link Set} will
   * not be updated after modifications to {@code graph}.
   *
   * @throws IllegalArgumentException if {@code node} is not present in {@code graph}
   * @since 33.1.0 (present with return type {@code Set} since 20.0)",,,True,13
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getLiveEntry,"com.google.common.cache.LocalCache$Segment:getLiveEntry(java.lang.Object,int,long)",2709,2718,"/**
 * Retrieves a live entry. Returns null if expired or not found.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getEntry,com.google.common.cache.LocalCache:getEntry(java.lang.Object),4145,4152,"/**
 * Retrieves an entry for the given key.
 * @param key The key to search for.
 * @return The entry or null if not found.
 */
","* Returns the internal entry for the specified key. The entry may be loading, expired, or
   * partially collected.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,isLive,"com.google.common.cache.LocalCache:isLive(com.google.common.cache.ReferenceEntry,long)",1746,1749,"/**
 * Checks if a reference entry is currently live.
 * @param entry The reference entry to check.
 * @param now Current timestamp.
 * @return True if live, false otherwise.
 */
","* This method is a convenience for testing. Code should call {@link Segment#getLiveValue}
   * instead.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache:containsValue(java.lang.Object),4169,4207,"/**
 * Checks if the map contains a specific value.
 * @param value value to search for, may be null
 * @return true if value is present, false otherwise
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,insertLoadingValueReference,"com.google.common.cache.LocalCache$Segment:insertLoadingValueReference(java.lang.Object,int,boolean)",2398,2446,"/**
 * Inserts a loading value reference for the given key.
 * @param key Key to insert.
 * @param hash Hash code of the key.
 * @param checkTime Whether to check refresh time.
 * @return LoadingValueReference or null if refresh is pending.
 */","* Returns a newly inserted {@code LoadingValueReference}, or null if the live value reference
     * is already loading.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$Segment:put(java.lang.Object,int,java.lang.Object,boolean)",2789,2862,"/**
 * Puts a key-value pair into the map, optionally only if absent.
 * @param key the key
 * @param hash the hash code
 * @param value the value
 * @param onlyIfAbsent if true, only puts if the key is absent
 * @return previous value or null if new
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object,java.lang.Object)",2934,2993,"/**
 * Replaces the value associated with a key if oldValue matches.
 * @param key The key whose value may be replaced.
 * @param hash Hash code of the key.
 * @param oldValue The expected value to replace.
 * @param newValue The new value to associate with the key.
 * @return True if the value was replaced.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache$Segment:replace(java.lang.Object,int,java.lang.Object)",2995,3047,"/**
 * Replaces the value for a key, returning the old value or null.
 * @param key The key of the entry to replace.
 * @param hash Hash code of the key.
 * @param newValue New value to associate with the key.
 * @return The previous value or null if not found.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int)",3049,3093,"/**
 * Removes the mapping for a key. Returns the value, or null if not found.
 * @param key The key of the entry to remove.
 * @param hash Hash code of the key.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache$Segment:remove(java.lang.Object,int,java.lang.Object)",3095,3139,"/**
 * Removes a key-value mapping. Returns true if removed, false otherwise.
 * @param key The key of the entry to remove.
 * @param hash Hash code of the key.
 * @param value Value associated with the key.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,storeLoadedValue,"com.google.common.cache.LocalCache$Segment:storeLoadedValue(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,java.lang.Object)",3141,3200,"/**
 * Stores a new value for a key, replacing an old loading value.
 * @param key The key.
 * @return True if the value was stored, false otherwise.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Segment:clear(),3202,3238,"/**
 * Clears the map, removing all entries and associated queues.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,postReadCleanup,com.google.common.cache.LocalCache$Segment:postReadCleanup(),3441,3445,"/**
 * Performs cleanup after a read operation, based on readCount.
 */
","* Performs routine cleanup following a read. Normally cleanup happens during writes. If cleanup
     * is not observed after a sufficient number of reads, try cleaning up from the read thread.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache:cleanUp(),3922,3926,"/**
 * Cleans up all segments, calling each segment's cleanUp method.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolveInternal,"com.google.common.reflect.TypeResolver$TypeTable$1:resolveInternal(java.lang.reflect.TypeVariable,com.google.common.reflect.TypeResolver$TypeTable)",324,369,"/**
* Resolves a type variable, handling bounds and JDK compatibility.
* @param var TypeVariable to resolve.
* @param forDependants TypeTable for resolving dependencies.
* @return Resolved Type or the original TypeVariable if unresolvable.
*/
","* Resolves {@code var} using the encapsulated type mapping. If it maps to yet another
     * non-reified type or has bounds, {@code forDependants} is used to do further resolution, which
     * doesn't try to resolve any type variable on generic declarations that are already being
     * resolved.
     *
     * <p>Should only be called and overridden by {@link #resolve(TypeVariable)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeResolver.java,resolve,com.google.common.reflect.TypeResolver$TypeTable:resolve(java.lang.reflect.TypeVariable),301,314,"/**
 * Resolves a type variable, delegating if necessary.
 * @param var The type variable to resolve.
 * @return The resolved type or null if not found.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$1:getGenericParameterTypes(),376,379,"/**
 * Returns the generic parameter types of the method.
 * Returns an array of Type objects.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$1:getGenericExceptionTypes(),391,394,"/**
 * Returns the generic exception types declared by the method.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericParameterTypes,com.google.common.reflect.TypeToken$2:getGenericParameterTypes(),454,466,"/**
 * Returns the generic parameter types of the constructor.
 * Adjusts for hidden 'this' parameter in inner classes.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/Invokable.java,getGenericExceptionTypes,com.google.common.reflect.TypeToken$2:getGenericExceptionTypes(),478,481,"/**
 * Returns the generic exception types of the constructor.
 * Delegates to the constructor's getGenericExceptionTypes().
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,where,"com.google.common.reflect.TypeToken:where(com.google.common.reflect.TypeParameter,java.lang.Class)",267,269,"/**
 * Calls where with the provided TypeParameter and TypeToken.
 * @param typeParam TypeParameter to use.
 * @param typeArg Class used to create a TypeToken.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,call,"com.google.common.util.concurrent.ClosingFuture$Combiner:call(com.google.common.util.concurrent.ClosingFuture$Combiner$CombiningCallable,java.util.concurrent.Executor)",1281,1299,"/**
 * Executes a combining callable with an executor and returns a future.
 * @param combiningCallable Callable to execute.
 * @param executor Executor to run the callable.
 * @return ClosingFuture wrapping the result.
 */
","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * combining function to their values. The function can use a {@link DeferredCloser} to capture
     * objects to be closed when the pipeline is done.
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ClosingFuture.java,callAsync,"com.google.common.util.concurrent.ClosingFuture$Combiner:callAsync(com.google.common.util.concurrent.ClosingFuture$Combiner$AsyncCombiningCallable,java.util.concurrent.Executor)",1337,1355,"/**
 * Executes an async callable using a provided executor.
 * @param combiningCallable Callable to execute asynchronously.
 * @param executor Executor to run the callable with.
 * @return ClosingFuture wrapping the result of the callable.
 */
","* Returns a new {@code ClosingFuture} pipeline step derived from the inputs by applying a
     * {@code ClosingFuture}-returning function to their values. The function can use a {@link
     * DeferredCloser} to capture objects to be closed when the pipeline is done (other than those
     * captured by the returned {@link ClosingFuture}).
     *
     * <p>If this combiner was returned by a {@link #whenAllSucceed} method and any of the inputs
     * fail, so will the returned step.
     *
     * <p>If the combiningCallable throws a {@code CancellationException}, the pipeline will be
     * cancelled.
     *
     * <p>If the combiningCallable throws an {@code ExecutionException}, the cause of the thrown
     * {@code ExecutionException} will be extracted and used as the failure of the derived step.
     *
     * <p>If the combiningCallable throws any other exception, it will be used as the failure of the
     * derived step.
     *
     * <p>If an exception is thrown after the combiningCallable creates a {@code ClosingFuture},
     * then none of the closeable objects in that {@code ClosingFuture} will be closed.
     *
     * <p>Usage guidelines for this method:
     *
     * <ul>
     *   <li>Use this method only when calling an API that returns a {@link ListenableFuture} or a
     *       {@code ClosingFuture}. If possible, prefer calling {@link #call(CombiningCallable,
     *       Executor)} instead, with a function that returns the next value directly.
     *   <li>Call {@link DeferredCloser#eventuallyClose(Object, Executor) closer.eventuallyClose()}
     *       for every closeable object this step creates in order to capture it for later closing.
     *   <li>Return a {@code ClosingFuture}. To turn a {@link ListenableFuture} into a {@code
     *       ClosingFuture} call {@link #from(ListenableFuture)}.
     * </ul>
     *
     * <p>The same warnings about doing heavyweight operations within {@link
     * ClosingFuture#transformAsync(AsyncClosingFunction, Executor)} apply here.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,from,com.google.common.net.HostSpecifier:from(java.lang.String),113,126,"/**
 * Parses a host specifier string.
 * @param specifier Host specifier string to parse.
 * @throws ParseException if the specifier is invalid.
 */
","* Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if
   * parsing fails. Always use this method in preference to {@link #fromValid(String)} for a
   * specifier that is not already known to be valid.
   *
   * @throws ParseException if the specifier is not valid.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/HostSpecifier.java,isValid,com.google.common.net.HostSpecifier:isValid(java.lang.String),132,139,"/**
 * Checks if a string is a valid host specifier.
 * @param specifier String to validate. Returns true if valid.
 */
","* Determines whether {@code specifier} represents a valid {@link HostSpecifier} as described in
   * the documentation for {@link #fromValid(String)}.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,publicSuffix,com.google.common.net.InternetDomainName:publicSuffix(),408,410,"/**
 * Gets the public suffix, or null if not present.
 */","* Returns the {@linkplain #isPublicSuffix() public suffix} portion of the domain name, or {@code
   * null} if no public suffix is present.
   *
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topPrivateDomain,com.google.common.net.InternetDomainName:topPrivateDomain(),460,466,"/**
 * Returns the top-level private domain of this domain.
 * Returns this if it's already a top-level private domain.
 */
","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isPublicSuffix() public suffix}. For example, for {@code x.adwords.google.co.uk} it returns
   * {@code google.co.uk}, since {@code co.uk} is a public suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns the same domain, {@code myblog.blogspot.com}, since {@code
   * blogspot.com} is a public suffix.
   *
   * <p>If {@link #isTopPrivateDomain()} is true, the current domain name instance is returned.
   *
   * <p>This method can be used to determine the probable highest level parent domain for which
   * cookies may be set, though even that depends on individual browsers' implementations of cookie
   * controls.
   *
   * @throws IllegalStateException if this domain does not end with a public suffix
   * @since 6.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,registrySuffix,com.google.common.net.InternetDomainName:registrySuffix(),516,518,"/**
 * Gets the registry suffix of the domain, or null if none exists.
 */","* Returns the {@linkplain #isRegistrySuffix() registry suffix} portion of the domain name, or
   * {@code null} if no registry suffix is present.
   *
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,topDomainUnderRegistrySuffix,com.google.common.net.InternetDomainName:topDomainUnderRegistrySuffix(),562,568,"/**
 * Returns the top domain under the registry suffix.
 * Returns null if not found.
 */
","* Returns the portion of this domain name that is one level beneath the {@linkplain
   * #isRegistrySuffix() registry suffix}. For example, for {@code x.adwords.google.co.uk} it
   * returns {@code google.co.uk}, since {@code co.uk} is a registry suffix. Similarly, for {@code
   * myblog.blogspot.com} it returns {@code blogspot.com}, since {@code com} is a registry suffix.
   *
   * <p>If {@link #isTopDomainUnderRegistrySuffix()} is true, the current domain name instance is
   * returned.
   *
   * <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the
   * highest level for which cookies may be set. Use {@link #isTopPrivateDomain()} for that purpose.
   *
   * @throws IllegalStateException if this domain does not end with a registry suffix
   * @since 23.3",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/InternetDomainName.java,parent,com.google.common.net.InternetDomainName:parent(),582,585,"/**
 * Returns the parent InternetDomainName.
 * Requires that the domain has a parent.
 */
","* Returns an {@code InternetDomainName} that is the immediate ancestor of this one; that is, the
   * current domain with the leftmost part removed. For example, the parent of {@code
   * www.google.com} is {@code google.com}.
   *
   * @throws IllegalStateException if the domain has no parent, as determined by {@link #hasParent}",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,toImmutableListMultimap,"com.google.common.collect.ImmutableListMultimap:toImmutableListMultimap(java.util.function.Function,java.util.function.Function)",83,88,"/**
 * Creates a Collector to collect to an ImmutableListMultimap.
 * @param keyFunction Extracts the key from an input object.
 * @param valueFunction Extracts the value from an input object.
 */
","* Returns a {@link Collector} that accumulates elements into an {@code ImmutableListMultimap}
   * whose keys and values are the result of applying the provided mapping functions to the input
   * elements.
   *
   * <p>For streams with defined encounter order (as defined in the Ordering section of the {@link
   * java.util.stream} Javadoc), that order is preserved, but entries are <a
   * href=""ImmutableMultimap.html#iteration"">grouped by key</a>.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(toImmutableListMultimap(str -> str.charAt(0), str -> str.substring(1)));
   *
   * // is equivalent to
   *
   * static final Multimap<Character, String> FIRST_LETTER_MULTIMAP =
   *     new ImmutableListMultimap.Builder<Character, String>()
   *         .put('b', ""anana"")
   *         .putAll('a', ""pple"", ""sparagus"")
   *         .putAll('c', ""arrot"", ""herry"")
   *         .build();
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object)",89,91,"/**
 * Creates an immutable multimap from a single key-value pair.
 */",Returns an immutable multimap containing a single entry.,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",94,96,"/**
 * Creates an ImmutableMultimap from the given key-value pairs.
 */","Returns an immutable multimap containing the given entries, in order.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",102,104,"/**
 * Creates an ImmutableMultimap from the given key-value pairs.
 */
","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",110,112,"/**
 * Creates an ImmutableMultimap from the given key-value pairs.
 */
","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,of,"com.google.common.collect.ImmutableMultimap:of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",118,121,"/**
 * Creates an ImmutableMultimap from the given key-value pairs.
 */","* Returns an immutable multimap containing the given entries, in the ""key-grouped"" insertion
   * order described in the <a href=""#iteration"">class documentation</a>.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableMultimap.java,copyOf,com.google.common.collect.ImmutableMultimap:copyOf(java.lang.Iterable),405,408,"/**
 * Creates an immutable multimap from a given iterable of entries.
 */","* Returns an immutable multimap containing the specified entries. The returned multimap iterates
   * over keys in the order they were first encountered in the input, and the values for each key
   * are iterated in the order they were encountered.
   *
   * @throws NullPointerException if any key, value, or entry is null
   * @since 19.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableListMultimap.java,inverse,com.google.common.collect.ImmutableListMultimap:inverse(),464,468,"/**
 * Returns the inverse of this multimap.
 * Returns a multimap with keys and values swapped.
 */
","* {@inheritDoc}
   *
   * <p>Because an inverse of a list multimap can contain multiple pairs with the same key and
   * value, this method returns an {@code ImmutableListMultimap} rather than the {@code
   * ImmutableMultimap} specified in the {@code ImmutableMultimap} class.
   *
   * @since 11.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/Multimaps.java,index,"com.google.common.collect.Multimaps:index(java.lang.Iterable,com.google.common.base.Function)",1678,1681,"/**
 * Indexes values into a Multimap using the keyFunction.
 * @param values Iterable of values to index.
 * @param keyFunction Function to extract the key from each value.
 * @return An ImmutableListMultimap.
 */
","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in an {@code Iterable} of values. Each value will be stored as
   * a value in the resulting multimap, yielding a multimap with the same size as the input
   * iterable. The key used to store that value in the multimap will be the result of calling the
   * function on that value. The resulting multimap is created as an immutable snapshot. In the
   * returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p>For example,
   *
   * {@snippet :
   * List<String> badGuys =
   *     Arrays.asList(""Inky"", ""Blinky"", ""Pinky"", ""Pinky"", ""Clyde"");
   * Function<String, Integer> stringLengthFunction = ...;
   * Multimap<Integer, String> index =
   *     Multimaps.index(badGuys, stringLengthFunction);
   * System.out.println(index);
   * }
   *
   * <p>prints
   *
   * {@snippet :
   * {4=[Inky], 6=[Blinky], 5=[Pinky, Pinky, Clyde]}
   * }
   *
   * <p>The returned multimap is serializable if its keys and values are all serializable.
   *
   * @param values the values to use when constructing the {@code ImmutableListMultimap}
   * @param keyFunction the function used to produce the key for each value
   * @return {@code ImmutableListMultimap} mapping the result of evaluating the function {@code
   *     keyFunction} on each value in the input collection to that value
   * @throws NullPointerException if any element of {@code values} is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameter,"com.google.common.net.MediaType:withParameter(java.lang.String,java.lang.String)",934,936,"/**
 * Adds a single parameter to the media type.
 * @param attribute Parameter name.
 * @param value Parameter value.
 * @return New media type with the added parameter.
 */
","* <em>Replaces</em> all parameters with the given attribute with a single parameter with the
   * given value. If multiple parameters with the same attributes are necessary use {@link
   * #withParameters(String, Iterable)}. Prefer {@link #withCharset} for setting the {@code charset}
   * parameter when using a {@link Charset} object.
   *
   * @throws IllegalArgumentException if either {@code attribute} or {@code value} is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withParameters,com.google.common.net.MediaType:withParameters(com.google.common.collect.Multimap),890,892,"/**
 * Creates a new MediaType with the given parameters.
 * @param parameters Multimap of parameters to include.
 * @return A new MediaType with the specified parameters.
 */
","* <em>Replaces</em> all parameters with the given parameters.
   *
   * @throws IllegalArgumentException if any parameter or value is invalid",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,create,"com.google.common.net.MediaType:create(java.lang.String,java.lang.String)",1001,1005,"/**
 * Creates a MediaType with the given type and subtype.
 * @param type The media type string (e.g., ""image"")
 * @param subtype The subtype string (e.g., ""jpeg"")
 * @return A new MediaType object.
 */
","* Creates a new media type with the given type and subtype.
   *
   * @throws IllegalArgumentException if type or subtype is invalid or if a wildcard is used for the
   *     type, but not the subtype.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,parse,com.google.common.net.MediaType:parse(java.lang.String),1100,1136,"/**
 * Parses a media type string into a MediaType object.
 * @param input The media type string to parse.
 * @return A MediaType object representing the parsed media type.
 */","* Parses a media type from its string representation.
   *
   * @throws IllegalArgumentException if the input is not parsable",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/util/concurrent/ServiceManager.java,<init>,com.google.common.util.concurrent.ServiceManager:<init>(java.lang.Iterable),207,233,"/**
 * Constructs a ServiceManager with the provided services.
 * Handles empty service lists by adding a placeholder service.
 */","* Constructs a new instance for managing the given services.
   *
   * @param services The services to manage
   * @throws IllegalArgumentException if not all services are {@linkplain State#NEW new} or if there
   *     are any duplicate services.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableSetMultimap.java,flatteningToImmutableSetMultimap,"com.google.common.collect.ImmutableSetMultimap:flatteningToImmutableSetMultimap(java.util.function.Function,java.util.function.Function)",141,146,"/**
 * Creates a collector for flattening to ImmutableSetMultimap.
 * @param keyFunction Extracts the key from the input.
 * @param valuesFunction Extracts a stream of values.
 */
","* Returns a {@code Collector} accumulating entries into an {@code ImmutableSetMultimap}. Each
   * input element is mapped to a key and a stream of values, each of which are put into the
   * resulting {@code Multimap}, in the encounter order of the stream and the encounter order of the
   * streams of values.
   *
   * <p>Example:
   *
   * {@snippet :
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     Stream.of(""banana"", ""apple"", ""carrot"", ""asparagus"", ""cherry"")
   *         .collect(
   *             flatteningToImmutableSetMultimap(
   *                  str -> str.charAt(0),
   *                  str -> str.substring(1).chars().mapToObj(c -> (char) c));
   *
   * // is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n', 'a', 'n', 'a'))
   *         .putAll('a', Arrays.asList('p', 'p', 'l', 'e'))
   *         .putAll('c', Arrays.asList('a', 'r', 'r', 'o', 't'))
   *         .putAll('a', Arrays.asList('s', 'p', 'a', 'r', 'a', 'g', 'u', 's'))
   *         .putAll('c', Arrays.asList('h', 'e', 'r', 'r', 'y'))
   *         .build();
   *
   * // after deduplication, the resulting multimap is equivalent to
   *
   * static final ImmutableSetMultimap<Character, Character> FIRST_LETTER_MULTIMAP =
   *     ImmutableSetMultimap.<Character, Character>builder()
   *         .putAll('b', Arrays.asList('a', 'n'))
   *         .putAll('a', Arrays.asList('p', 'l', 'e', 's', 'a', 'r', 'g', 'u'))
   *         .putAll('c', Arrays.asList('a', 'r', 'o', 't', 'h', 'e', 'y'))
   *         .build();
   * }
   *
   * }
   *
   * @since 21.0",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,"com.google.common.collect.RegularImmutableTable:forCells(java.util.List,java.util.Comparator,java.util.Comparator)",118,147,"/**
 * Creates a RegularImmutableTable from a list of cells, optionally sorted.
 * @param cells list of cells to build the table from
 * @param rowComparator comparator for rows, if provided
 * @param columnComparator comparator for columns, if provided
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/RegularImmutableTable.java,forCells,com.google.common.collect.RegularImmutableTable:forCells(java.lang.Iterable),149,151,"/**
 * Creates a RegularImmutableTable from an iterable of cells.
 * @param cells iterable of cells to populate the table
 * @return A RegularImmutableTable containing the cells.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveSupertype,com.google.common.reflect.TypeToken:resolveSupertype(java.lang.reflect.Type),287,293,"/**
 * Resolves the supertype of a given type.
 * @param type The type to resolve.
 * @return A TypeToken representing the supertype.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,isSubtypeOfParameterizedType,com.google.common.reflect.TypeToken:isSubtypeOfParameterizedType(java.lang.reflect.ParameterizedType),894,917,"/**
 * Checks if a parameterized type is a subtype of another.
 * @param supertype The supertype to check against.
 * @return True if the type is a subtype, false otherwise.
 */",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveType,com.google.common.reflect.TypeToken:resolveType(java.lang.reflect.Type),280,285,"/**
 * Resolves a Type to a TypeToken, handling invariant types.
 * @param type The Type to resolve.
 * @return A TypeToken representing the resolved type.
 */
","* Resolves the given {@code type} against the type context represented by this type. For example:
   *
   * {@snippet :
   * new TypeToken<List<String>>() {}.resolveType(
   *     List.class.getMethod(""get"", int.class).getGenericReturnType())
   * => String.class
   * }",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/MinMaxPriorityQueue.java,create,com.google.common.collect.MinMaxPriorityQueue:create(),110,112,"/**
 * Creates a new MinMaxPriorityQueue with natural ordering.
 * @param <E> Type of elements in the priority queue.
 * @return A new MinMaxPriorityQueue instance.
 */
","* Creates a new min-max priority queue with default settings: natural order, no maximum size, no
   * initial contents, and an initial expected size of 11.",,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/graph/Graphs.java,transitiveClosure,com.google.common.graph.Graphs:transitiveClosure(com.google.common.graph.Graph),189,221,"/**
 * Computes the transitive closure of a graph.
 * @param graph The input graph.
 * @return ImmutableGraph representing the transitive closure.
 */
",,,,True,14
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$Values:contains(java.lang.Object),4616,4619,"/**
 * Checks if the cache contains the specified value.
 * @param o the value to search for
 * @return true if the cache contains the value, false otherwise
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,"com.google.common.cache.LocalCache$Segment:refresh(java.lang.Object,int,com.google.common.cache.CacheLoader,boolean)",2375,2392,"/**
 * Refreshes a cache value. Loads from loader if not present.
 * @param key Cache key.
 * @return The cached value or null if loading failed.
 */","* Refreshes the value associated with {@code key}, unless another thread is already doing so.
     * Returns the newly refreshed value associated with {@code key} if it was refreshed inline, or
     * {@code null} if another thread is performing the refresh or if an error occurs during
     * refresh.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache:put(java.lang.Object,java.lang.Object)",4209,4216,"/**
 * Associates the specified value with the given key in the segment.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return The previous value associated with the key, or null.
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putIfAbsent,"com.google.common.cache.LocalCache:putIfAbsent(java.lang.Object,java.lang.Object)",4218,4224,"/**
 * Atomically puts the value if the key is not already associated.
 * @param key key to associate with the value
 * @param value value to associate with the key
 * @return Previous value or null if key was not present
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object,java.lang.Object)",4287,4297,"/**
 * Replaces the value associated with the given key.
 * @param key The key whose value is to be replaced.
 * @param oldValue The old value to be replaced.
 * @param newValue The new value to associate with the key.
 * @return True if the replacement was successful.
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,replace,"com.google.common.cache.LocalCache:replace(java.lang.Object,java.lang.Object)",4299,4306,"/**
 * Replaces the value associated with the given key.
 * @param key The key whose value is to be replaced.
 * @param value The new value to associate with the key.
 * @return The previous value associated with the key.
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache:remove(java.lang.Object),4267,4275,"/**
 * Removes the value associated with the given key.
 * @param key the key whose mapping is to be removed
 * @return the previous value or null if the key was absent
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,"com.google.common.cache.LocalCache:remove(java.lang.Object,java.lang.Object)",4277,4285,"/**
 * Removes a key-value pair. Returns true if found and removed.
 * @param key The key to remove.
 * @param value The value associated with the key.
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAndRecordStats,"com.google.common.cache.LocalCache$Segment:getAndRecordStats(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.util.concurrent.ListenableFuture)",2327,2349,"/**
 * Retrieves a value, records stats, and stores it.
 * @param key key
 * @return the value
 * @throws ExecutionException if loading fails
 */
","Waits uninterruptibly for {@code newValue} to be loaded, and then records loading stats.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache:clear(),4308,4313,"/**
 * Clears all segments by calling clear() on each segment.
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advanceTo,com.google.common.cache.LocalCache$HashIterator:advanceTo(com.google.common.cache.ReferenceEntry),4422,4437,"/**
 * Advances to the next entry, returning true if valid.
 * @param entry The ReferenceEntry to advance to.
 */
","* Advances to the given entry. Returns true if the entry was valid, false if it should be
     * skipped.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,"com.google.common.cache.LocalCache$Segment:containsKey(java.lang.Object,int)",2742,2757,"/**
 * Checks if the map contains a key, considering hash and cleanup.
 * @param key The key to check.
 * @param hash The hash code of the key.
 * @return True if the key exists, false otherwise.
 */
",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsValue,com.google.common.cache.LocalCache$Segment:containsValue(java.lang.Object),2763,2787,"/**
 * Checks if the map contains the specified value.
 * @param value The value to search for.
 * @return True if the value is present, false otherwise.
 */
","* This method is a convenience for testing. Code should call {@link LocalCache#containsValue}
     * directly.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,cleanUp,com.google.common.cache.LocalCache$LocalManualCache:cleanUp(),4917,4920,"/**
 * Cleans up resources held by the local cache.
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,toString,com.google.common.reflect.TypeToken$2:toString(),840,843,"/**
 * Returns a string representation of the runtime type.
 */",,,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/FluentIterable.java,index,com.google.common.collect.FluentIterable:index(com.google.common.base.Function),727,730,"/**
 * Indexes the multimap's values by applying the key function.
 * @param keyFunction Function to extract the key from each value.
 * @return An ImmutableListMultimap indexed by the key function.
 */
","* Creates an index {@code ImmutableListMultimap} that contains the results of applying a
   * specified function to each item in this {@code FluentIterable} of values. Each element of this
   * iterable will be stored as a value in the resulting multimap, yielding a multimap with the same
   * size as this iterable. The key used to store that value in the multimap will be the result of
   * calling the function on that value. The resulting multimap is created as an immutable snapshot.
   * In the returned multimap, keys appear in the order they are first encountered, and the values
   * corresponding to each key appear in the same order as they are encountered.
   *
   * <p><b>{@code Stream} equivalent:</b> {@code stream.collect(Collectors.groupingBy(keyFunction))}
   * behaves similarly, but returns a mutable {@code Map<K, List<E>>} instead, and may not preserve
   * the order of entries.
   *
   * @param keyFunction the function used to produce the key for each value
   * @throws NullPointerException if any element of this iterable is {@code null}, or if {@code
   *     keyFunction} produces {@code null} for any key
   * @since 14.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withCharset,com.google.common.net.MediaType:withCharset(java.nio.charset.Charset),947,953,"/**
 * Sets the charset for the media type.
 * @param charset The Charset to set.
 * @return A new MediaType with the specified charset.
 */
","* Returns a new instance with the same type and subtype as this instance, with the {@code
   * charset} parameter set to the {@link Charset#name name} of the given charset. Only one {@code
   * charset} parameter will be present on the new instance regardless of the number set on this
   * one.
   *
   * <p>If a charset must be specified that is not supported on this JVM (and thus is not
   * representable as a {@link Charset} instance), use {@link #withParameter}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,withoutParameters,com.google.common.net.MediaType:withoutParameters(),881,883,"/**
 * Returns a media type without any parameters.
 * Returns a new media type if parameters exist.
 */
","* Returns a new instance with the same type and subtype as this instance, but without any
   * parameters.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createApplicationType,com.google.common.net.MediaType:createApplicationType(java.lang.String),1034,1036,"/**
 * Creates an application-specific MediaType.
 * @param subtype subtype of the media type.
 * @return A MediaType object.
 */
","* Creates a media type with the ""application"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createAudioType,com.google.common.net.MediaType:createAudioType(java.lang.String),1043,1045,"/**
 * Creates an audio media type with the given subtype.
 * @param subtype The subtype of the audio media type.
 * @return A MediaType object representing the audio type.
 */
","* Creates a media type with the ""audio"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createFontType,com.google.common.net.MediaType:createFontType(java.lang.String),1052,1054,"/**
 * Creates a font type MediaType.
 * @param subtype Font subtype (e.g., ""ttf"", ""otf"")
 * @return Font type MediaType object.
 */
","* Creates a media type with the ""font"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createImageType,com.google.common.net.MediaType:createImageType(java.lang.String),1061,1063,"/**
 * Creates a MediaType for image with the given subtype.
 */","* Creates a media type with the ""image"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createTextType,com.google.common.net.MediaType:createTextType(java.lang.String),1070,1072,"/**
 * Creates a text media type with the given subtype.
 * @param subtype The subtype of the text media type.
 * @return A MediaType object representing the text type.
 */
","* Creates a media type with the ""text"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/net/MediaType.java,createVideoType,com.google.common.net.MediaType:createVideoType(java.lang.String),1079,1081,"/**
 * Creates a video media type with the given subtype.
 * @param subtype The subtype of the video media type.
 * @return A video media type.
 */
","* Creates a media type with the ""video"" type and the given subtype.
   *
   * @throws IllegalArgumentException if subtype is invalid",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,buildOrThrow,com.google.common.collect.ImmutableTable$Builder:buildOrThrow(),285,295,"/**
 * Builds the immutable table. Returns of() if empty, Singleton if size 1.
 */","* Returns a newly-created immutable table, or throws an exception if duplicate key pairs were
     * added.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added
     * @since 31.0",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericSuperclass,com.google.common.reflect.TypeToken:getGenericSuperclass(),307,323,"/**
* Gets the generic superclass type token.
* Returns null if no superclass is found.
*/
","* Returns the generic superclass of this type or {@code null} if the type represents {@link
   * Object} or an interface. This method is similar but different from {@link
   * Class#getGenericSuperclass}. For example, {@code new TypeToken<StringArrayList>()
   * {}.getGenericSuperclass()} will return {@code new TypeToken<ArrayList<String>>() {}}; while
   * {@code StringArrayList.class.getGenericSuperclass()} will return {@code ArrayList<E>}, where
   * {@code E} is the type variable declared by class {@code ArrayList}.
   *
   * <p>If this type is a type variable or wildcard, its first upper bound is examined and returned
   * if the bound is a class or extends from a class. This means that the returned type could be a
   * type variable too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getGenericInterfaces,com.google.common.reflect.TypeToken:getGenericInterfaces(),347,362,"/**
 * Returns a list of generic interfaces for the type.
 * Handles TypeVariable and WildcardType bounds.
 */","* Returns the generic interfaces that this type directly {@code implements}. This method is
   * similar but different from {@link Class#getGenericInterfaces()}. For example, {@code new
   * TypeToken<List<String>>() {}.getGenericInterfaces()} will return a list that contains {@code
   * new TypeToken<Iterable<String>>() {}}; while {@code List.class.getGenericInterfaces()} will
   * return an array that contains {@code Iterable<T>}, where the {@code T} is the type variable
   * declared by interface {@code Iterable}.
   *
   * <p>If this type is a type variable or wildcard, its upper bounds are examined and those that
   * are either an interface or upper-bounded only by interfaces are returned. This means that the
   * returned types could include type variables too.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertype,com.google.common.reflect.TypeToken:getSupertype(java.lang.Class),396,415,"/**
 * Resolves the supertype of a type, handling generics and arrays.
 * @param superclass The superclass to resolve from.
 * @return The resolved TypeToken<? super T>.
 */
","* Returns the generic form of {@code superclass}. For example, if this is {@code
   * ArrayList<String>}, {@code Iterable<String>} is returned given the input {@code
   * Iterable.class}.",,,True,15
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,scheduleRefresh,"com.google.common.cache.LocalCache$Segment:scheduleRefresh(com.google.common.cache.ReferenceEntry,java.lang.Object,int,java.lang.Object,long,com.google.common.cache.CacheLoader)",2351,2367,"/**
 * Schedules a refresh for a cache entry if eligible.
 * @param entry Cache entry, key, hash, old value, time, loader.
 * @return Refreshed value or old value.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache:refresh(java.lang.Object),4154,4157,"/**
 * Refreshes the value associated with the given key.
 * @param key The key whose value needs refreshing.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,put,"com.google.common.cache.LocalCache$LocalManualCache:put(java.lang.Object,java.lang.Object)",4871,4874,"/**
* Puts a key-value pair into the local cache.
* @param key The key for the value.
* @param value The value to be stored.
*/
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,setValue,com.google.common.cache.LocalCache$WriteThroughEntry:setValue(java.lang.Object),4516,4521,"/**
 * Sets the value associated with the key.
 * @param newValue The new value to set.
 * @return The previous value associated with the key.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadAll,"com.google.common.cache.LocalCache:loadAll(java.util.Set,com.google.common.cache.CacheLoader)",4082,4139,"/**
 * Loads all values for given keys using the provided loader.
 * @param keys keys to load
 * @param loader cache loader
 * @return Map containing loaded values or null if error
 */
","* Returns the result of calling {@link CacheLoader#loadAll}, or null if {@code loader} doesn't
   * implement {@code loadAll}.",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache:putAll(java.util.Map),4260,4265,"/**
 * Adds all entries from the given map to this map.
 * @param m the map whose entries are added
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$HashIterator:remove(),4453,4458,"/**
 * Removes the last element returned by the iterator.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$KeySet:remove(java.lang.Object),4583,4586,"/**
 * Removes an object from the cache.
 * @param o object to remove
 * @return true if removed, false otherwise
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidate,com.google.common.cache.LocalCache$LocalManualCache:invalidate(java.lang.Object),4881,4885,"/**
* Removes the entry associated with the given key from the cache.
* @param key The key of the entry to remove.
*/
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache:invalidateAll(java.lang.Iterable),4315,4320,"/**
 * Invalidates entries for the given keys.
 * @param keys Iterable of keys to invalidate.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,remove,com.google.common.cache.LocalCache$EntrySet:remove(java.lang.Object),4650,4658,"/**
 * Removes an entry from the cache.
 * @param o Entry to remove; returns false if not an Entry.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache$Segment:compute(java.lang.Object,int,java.util.function.BiFunction)",2211,2293,"/**
 * Computes a value for the given key, using the provided function.
 * @param key The key to compute a value for.
 * @param hash Hash code for the key.
 * @param function Function to compute the value.
 * @return Computed value or null if computation failed.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,loadSync,"com.google.common.cache.LocalCache$Segment:loadSync(java.lang.Object,int,com.google.common.cache.LocalCache$LoadingValueReference,com.google.common.cache.CacheLoader)",2297,2305,"/**
 * Loads a value for the given key, using the provided loader.
 * @param key Key to load.
 * @return LoadingValueReference object.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$AbstractCacheSet:clear(),4548,4551,"/**
 * Clears the cache by delegating to the parent LocalCache.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(),4892,4895,"/**
 * Clears the local cache, removing all cached entries.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,clear,com.google.common.cache.LocalCache$Values:clear(),4600,4603,"/**
 * Clears the cache by delegating to the parent LocalCache.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInChain,com.google.common.cache.LocalCache$HashIterator:nextInChain(),4395,4404,"/**
 * Advances to the next entry in the chain, returning true if successful.
 */
",Finds the next entry in the current chain. Returns true if an entry was found.,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,containsKey,com.google.common.cache.LocalCache:containsKey(java.lang.Object),4159,4167,"/**
 * Checks if the map contains a key.
 * @param key The key to check, may be null.
 * @return True if the key is present, false otherwise.
 */
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,build,com.google.common.collect.ImmutableTable$Builder:build(),274,276,"/**
 * Builds an immutable table from the current state.
 * @return ImmutableTable containing the table data.
 */
","* Returns a newly-created immutable table.
     *
     * <p>Prefer the equivalent method {@link #buildOrThrow()} to make it explicit that the method
     * will throw an exception if there are duplicate key pairs. The {@code build()} method will
     * soon be deprecated.
     *
     * @throws IllegalArgumentException if duplicate key pairs were added",,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSupertypeFromUpperBounds,"com.google.common.reflect.TypeToken:getSupertypeFromUpperBounds(java.lang.Class,java.lang.reflect.Type[])",1202,1214,"/**
* Finds a supertype of T from upper bounds, throws exception if none.
* @param supertype The class to check against.
* @param upperBounds Upper bounds of the type parameter.
* @return A TypeToken<? super T> that is a supertype.
*/
",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,resolveTypeArgsForSubclass,com.google.common.reflect.TypeToken:resolveTypeArgsForSubclass(java.lang.Class),1268,1293,"/**
 * Resolves type arguments for a subclass, returning a resolved type.
 */",,,,True,16
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int)",2083,2103,"/**
* Retrieves value associated with key. Returns value or null if not found.
*/",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,refresh,com.google.common.cache.LocalCache$LocalLoadingCache:refresh(java.lang.Object),4965,4968,"/**
 * Refreshes the cache entry for the given key.
 * @param key The key of the cache entry to refresh.
 */
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,putAll,com.google.common.cache.LocalCache$LocalManualCache:putAll(java.util.Map),4876,4879,"/**
* Adds all entries from the given map to the local cache.
* @param m the map whose entries should be added
*/
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,invalidateAll,com.google.common.cache.LocalCache$LocalManualCache:invalidateAll(java.lang.Iterable),4887,4890,"/**
 * Invalidates all cache entries matching the provided keys.
 * @param keys Iterable of keys to invalidate.
 */
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,compute,"com.google.common.cache.LocalCache:compute(java.lang.Object,java.util.function.BiFunction)",4226,4233,"/**
 * Computes a value for the given key using the provided function.
 * @param key The key to compute for.
 * @param function The function to apply.
 * @return The computed value or null.
 */
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,lockedGetOrLoad,"com.google.common.cache.LocalCache$Segment:lockedGetOrLoad(java.lang.Object,int,com.google.common.cache.CacheLoader)",2105,2187,"/**
 * Gets or loads a value associated with a key, loading if necessary.
 * @param key The key. @param hash The hash of the key.
 * @param loader The cache loader.
 * @return The value or null if not found.
 */
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextInTable,com.google.common.cache.LocalCache$HashIterator:nextInTable(),4407,4416,"/**
 * Advances to the next entry in the table.
 * Returns true if successful, false otherwise.
 */
",Finds the next entry in the current table. Returns true if an entry was found.,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$KeySet:contains(java.lang.Object),4578,4581,"/**
* Checks if the cache contains the specified object.
* @param o the object to check
* @return true if the cache contains the object, false otherwise
*/
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(java.lang.Iterable),136,143,"/**
 * Creates a copy of a table from an iterable of cells.
 * @param cells iterable containing table cells
 * @return A new ImmutableTable containing the cells.
 */
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toImmutableTable,"com.google.common.collect.TableCollectors:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",35,49,"/**
 * Creates a Collector to build an ImmutableTable from elements.
 * @param rowFunction Maps element to row key.
 * @param columnFunction Maps element to column key.
 * @param valueFunction Maps element to value.
 * @return Collector for building the ImmutableTable.
 */
",,,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getSubtype,com.google.common.reflect.TypeToken:getSubtype(java.lang.Class),422,441,"/**
 * Gets a subtype of the current type, based on the provided class.
 * @param subclass The class representing the subtype.
 * @return A TypeToken representing the subtype.
 */
","* Returns subtype of {@code this} with {@code subclass} as the raw class. For example, if this is
   * {@code Iterable<String>} and {@code subclass} is {@code List}, {@code List<String>} is
   * returned.",,,True,17
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache:get(java.lang.Object),3974,3982,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for, can be null.
 * @return The value associated with the key, or null if absent.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache:getIfPresent(java.lang.Object),3990,3999,"/**
 * Retrieves the value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value if present, otherwise null.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfAbsent,"com.google.common.cache.LocalCache:computeIfAbsent(java.lang.Object,java.util.function.Function)",4235,4240,"/**
 * Computes the value for a key if it's absent.
 * @param key The key to check.
 * @param function Function to compute value if absent.
 * @return The value associated with the key.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,computeIfPresent,"com.google.common.cache.LocalCache:computeIfPresent(java.lang.Object,java.util.function.BiFunction)",4242,4248,"/**
 * Computes a value for the given key if present, using the function.
 * @param key The key to compute for.
 * @param function The function to apply to the key and value.
 * @return The computed value, or null if not present.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,merge,"com.google.common.cache.LocalCache:merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)",4250,4258,"/**
 * Merges a new value with an existing value for a key.
 * @param key The key to merge.
 * @param newValue The new value to merge.
 * @param function Merging function.
 * @return Merged value or null.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$Segment:get(java.lang.Object,int,com.google.common.cache.CacheLoader)",2045,2081,"/**
 * Retrieves a value from the cache, loading if necessary.
 * @param key Cache key.
 * @param hash Key hash code.
 * @param loader Loader to use if value is not cached.
 * @return Value associated with the key.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,advance,com.google.common.cache.LocalCache$HashIterator:advance(),4371,4392,"/**
 * Advances to the next available entry in the chain/table.
 */",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,copyOf,com.google.common.collect.ImmutableTable:copyOf(com.google.common.collect.Table),125,134,"/**
 * Creates a copy of the given table.
 * Returns the table if it's an ImmutableTable, otherwise copies cells.
 */","* Returns an immutable copy of the provided table.
   *
   * <p>The {@link Table#cellSet()} iteration order of the provided table determines the iteration
   * ordering of all views in the returned table. Note that some views of the original table and the
   * copied table may have different iteration orders. For more control over the ordering, create a
   * {@link Builder} and call {@link Builder#orderRowsBy}, {@link Builder#orderColumnsBy}, and
   * {@link Builder#putAll}
   *
   * <p>Despite the method name, this method attempts to avoid actually copying the data when it is
   * safe to do so. The exact circumstances under which a copy will or will not be performed are
   * undocumented and subject to change.",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/TableCollectors.java,toTable,com.google.common.collect.TableCollectors$ImmutableTableCollectorState:toTable(),166,168,"/**
 * Creates an immutable table from the insertion order.
 * @return An ImmutableTable containing the data.
 */
",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/collect/ImmutableTable.java,toImmutableTable,"com.google.common.collect.ImmutableTable:toImmutableTable(java.util.function.Function,java.util.function.Function,java.util.function.Function)",68,74,"/**
 * Creates an ImmutableTable from a stream of objects.
 * @param rowFunction Maps object to row key.
 * @param columnFunction Maps object to column key.
 * @param valueFunction Maps object to table value.
 * @return An ImmutableTable.
 */
","* Returns a {@code Collector} that accumulates elements into an {@code ImmutableTable}. Each
   * input element is mapped to one cell in the returned table, with the rows, columns, and values
   * generated by applying the specified functions.
   *
   * <p>The returned {@code Collector} will throw a {@code NullPointerException} at collection time
   * if the row, column, or value functions return null on any input.
   *
   * @since 21.0",,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/reflect/TypeToken.java,getArraySubtype,com.google.common.reflect.TypeToken:getArraySubtype(java.lang.Class),1251,1266,"/**
 * Gets the subtype for an array of type T.
 * @param subclass The array class.
 * @return TypeToken extending T representing the array subtype.
 */",,,,True,18
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,contains,com.google.common.cache.LocalCache$EntrySet:contains(java.lang.Object),4635,4648,"/**
 * Checks if the cache contains the specified entry.
 * @param o the entry to check
 * @return true if the cache contains the entry, false otherwise
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrDefault,"com.google.common.cache.LocalCache:getOrDefault(java.lang.Object,java.lang.Object)",4001,4005,"/**
 * Returns the value for key, or defaultValue if key not found.
 * @param key The key to look for.
 * @param defaultValue Value to return if key is not found.
 * @return The value or the default value.
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache:getAllPresent(java.lang.Iterable),4011,4031,"/**
 * Retrieves values for given keys, building an immutable map.
 * @param keys keys to lookup; may contain nulls
 * @return ImmutableMap containing present values, or empty if none.
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache:removeIf(java.util.function.BiPredicate),4554,4569,"/**
 * Removes entries based on the provided BiPredicate.
 * @param filter Predicate to filter entries to be removed.
 * @return True if any entries were removed.
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getIfPresent,com.google.common.cache.LocalCache$LocalManualCache:getIfPresent(java.lang.Object),4848,4851,"/**
 * Retrieves value if present in the underlying cache.
 * @param key Key to look up.
 * @return Value if found, otherwise null.
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache:get(java.lang.Object,com.google.common.cache.CacheLoader)",3984,3988,"/**
 * Retrieves value associated with key from cache segment.
 * @param key The key to retrieve.
 * @param loader Loader to use if value is absent.
 * @return Value or null if absent.
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,nextEntry,com.google.common.cache.LocalCache$HashIterator:nextEntry(),4444,4451,"/**
 * Returns the next element. Throws NoSuchElementException if none exist.
 */
",,,,True,19
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAllPresent,com.google.common.cache.LocalCache$LocalManualCache:getAllPresent(java.lang.Iterable),4866,4869,"/**
 * Returns all values associated with the given keys.
 * @param keys Iterable of keys to retrieve values for
 * @return ImmutableMap containing key-value pairs.
 */
",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$EntrySet:removeIf(java.util.function.Predicate),4629,4633,"/**
 * Removes entries if filter matches.
 * @param filter Predicate to filter entries to be removed.
 * @return True if elements were removed, false otherwise.
 */
",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,removeIf,com.google.common.cache.LocalCache$Values:removeIf(java.util.function.Predicate),4610,4614,"/**
 * Removes elements based on the provided predicate.
 * @param filter Predicate to filter elements for removal.
 * @return True if elements were removed, false otherwise.
 */
",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,"com.google.common.cache.LocalCache$LocalManualCache:get(java.lang.Object,java.util.concurrent.Callable)",4853,4864,"/**
 * Retrieves value by key, loading it if absent.
 * @param key key to retrieve
 * @param valueLoader Callable to load value if not cached
 * @return Value associated with the key
 */
",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getOrLoad,com.google.common.cache.LocalCache:getOrLoad(java.lang.Object),4007,4009,"/**
 * Retrieves a value by key, loading if absent.
 * @param key The key to retrieve.
 * @return The value associated with the key.
 */
",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache:getAll(java.lang.Iterable),4033,4076,"/**
 * Retrieves values for given keys, loading missing values if possible.
 * @param keys keys to retrieve values for
 * @return ImmutableMap containing retrieved values
 */
",,,,True,20
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,get,com.google.common.cache.LocalCache$LocalLoadingCache:get(java.lang.Object),4945,4948,"/**
 * Retrieves a value associated with the given key.
 * @param key The key to retrieve the value for.
 * @return The value associated with the key, or null.
 */
",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getAll,com.google.common.cache.LocalCache$LocalLoadingCache:getAll(java.lang.Iterable),4960,4963,"/**
 * Retrieves all values associated with the given keys from the cache.
 * @param keys Iterable of keys to retrieve values for
 * @return ImmutableMap containing key-value pairs for the requested keys
 */
",,,,True,21
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,getUnchecked,com.google.common.cache.LocalCache$LocalLoadingCache:getUnchecked(java.lang.Object),4950,4958,"/**
 * Gets value associated with key, handling ExecutionException.
 * @param key the key to look up
 * @return value or throws UncheckedExecutionException
 */
",,,,True,22
/home/yfx/codecomment/codecomment/project/java/com/google/common/cache/LocalCache.java,apply,com.google.common.cache.LocalCache$LocalLoadingCache:apply(java.lang.Object),4970,4973,"/**
 * Applies the function to the given key and returns the result.
 * @param key the input key
 * @return the result of applying the function
 */
",,,,True,23
