1 Sets the comparator for ordering rows. @param rowComparator comparator to define row order @return this Builder instance
2 Sets a comparator to order columns. @param columnComparator comparator for column ordering @return Builder instance
3 Merges multiple sorted iterables into a single sorted iterable. @param iterables collection of sorted iterables to merge @param comparator comparator for sorting elements @return unmodifiable iterable containing all elements in sorted order
4 Finds index of first element matching predicate. @param iterator source iterator @param predicate condition to match elements @return index of matching element or -1 if not found
5 Creates a SortedSetMultimap with tree set values. @param comparator comparator for value ordering @return builder for SortedSetMultimap
6 Configures a SetMultimap with enum set values. @param valueClass the Enum class for values @return a SetMultimapBuilder configured for enum sets
7 Returns a union view of two sets. @param set1 first set @param set2 second set @return SetView containing elements from both sets without duplicates
8 Returns a view of the intersection of two sets. @param set1 first set @param set2 second set @return SetView containing common elements
9 Computes the difference between two sets. @param set1 first set to compare @param set2 second set to compare @return SetView containing elements in set1 but not in set2
10 Computes the symmetric difference of two sets. @param set1 first input set @param set2 second input set @return a SetView containing elements in either set but not both
11 Finds the starting index of a target boolean array within a source array. @param array the source boolean array to search within @param target the target boolean array to find @return the starting index of target in array, or -1 if not found
12 Finds the starting index of a target byte array within another array. @param array the array to search within @param target the array to find @return the starting index or -1 if not found
13 Finds the index of a target character array within another array. @param array the source array to search within @param target the target array to find @return starting index of target in array, or -1 if not found
14 Finds the starting index of a target array within a source array. @param array the source array to search @param target the array to find within the source array @return the starting index of the target array or -1 if not found
15 Finds the starting index of a target float array within another array. @param array the array to search within @param target the array to search for @return the starting index of target in array, or -1 if not found
16 Finds the starting index of a target array within a source array. @param array source array to search within @param target sub-array to find @return index of first occurrence or -1 if not found
17 Finds the starting index of a target array within a source array. @param array the source array to search within @param target the sub-array to find @return the starting index of the target in the array, or -1 if not found
18 Finds the starting index of a target array within another array. @param array the array to search within @param target the array to find @return the starting index of target in array, or -1 if not found
19 Creates a new guard with a satisfaction condition. @param isSatisfied BooleanSupplier defining the satisfaction condition @return A new Guard instance
20 Returns default value for a primitive type. @param type the Class object representing the primitive type @return default value of the specified primitive type or null if not primitive
21 Specifies text to use for null values. @param nullText replacement text for nulls @return a new Joiner instance with null handling set
22 Initializes a new instance of ToStringHelper. @param className name of the class being processed
23 Filters present instances from an iterable of optionals. @param optionals iterable containing optional values @return iterable of present values
24 Splits a character sequence into an iterable of strings. @param sequence the input sequence to split @return Iterable of split strings
25 Pads the start of a string with a specified character to reach a minimum length. @param string the original string @param minLength the desired minimum length of the resulting string @param padChar the character used for padding @return the padded string
26 Pads the end of a string with a specified character to reach a minimum length. @param string original string @param minLength desired minimum length of the resulting string @param padChar character used for padding @return padded string or original if already long enough
27 Throws the input throwable if it is an instance of the specified type. @param throwable the throwable to check and possibly rethrow @param declaredType the class of the exception to look for
28 Throws the given throwable if it is an unchecked exception or error. @param throwable the Throwable to check and possibly rethrow
29 Retrieves the causal chain of a throwable. @param throwable the initial throwable @return an unmodifiable list of throwables in the causal chain
30 Wraps a CacheLoader for asynchronous reloading. @param loader original CacheLoader to delegate load operations @param executor Executor to run reload tasks @return CacheLoader with async reload capability
31 Wraps a removal listener to execute asynchronously. @param listener the original removal listener @param executor the executor for asynchronous execution @return a new RemovalListener that executes asynchronously
32 Retrieves a map of values for the specified column. @param columnKey unique key identifying the column @return Map with row keys and corresponding values, or empty if column not found
33 Retrieves a row from the table by its key. @param rowKey unique identifier for the row @return Map of column to value, or empty map if not found
34 Maps elements of a spliterator using a function. @param fromSpliterator input spliterator @param function mapping function @return new spliterator with mapped elements
35 Filters elements of a spliterator based on a predicate. @param fromSpliterator the original spliterator to filter @param predicate the condition to apply to each element @return a spliterator with filtered elements
36 Checks if a collection safely contains an object. @param collection the collection to search @param object the object to find, may be null @return true if the collection contains the object, false otherwise
37 Removes an object from a collection safely. @param collection the collection to remove from @param object the object to remove, may be null @return true if the object was removed, false otherwise
38 Checks if elements in iterable are sorted according to comparator. @param iterable the collection of elements to check @param comparator the comparator defining order @return true if elements are in non-decreasing order, false otherwise
39 Checks if elements in iterable are strictly ordered. @param iterable collection of comparable elements @param comparator defines the order @return true if elements are strictly increasing, false otherwise
40 Compares Optionals with empty values first. @param valueComparator comparator for non-empty values @return Comparator that orders Optionals, placing empties first
41 Creates a comparator that sorts Optionals, placing empty ones last. @param valueComparator comparator for the values inside Optional @return Comparator for Optional objects
42 Returns a view of the portion of this set up to (but not including) toElement. @param toElement upper bound element @param inclusive true if the endpoint is included @return ContiguousSet containing elements less than (or equal to, if inclusive) toElement
43 Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive). @param fromElement lower bound element @param inclusive true if the lower bound is inclusive @return ContiguousSet from fromElement to the end
44 Adds an element to the collection. @param e element to add @return always true
45 Returns the same iterable, ensuring it's not null. @param iterable the iterable to check @return the original iterable
46 Adds an element to the builder. @param element the element to be added @return the current builder instance
47 Sets comparator for ordering keys. @param keyComparator comparator to order keys @return this builder instance
48 Sets comparator for ordering values. @param valueComparator comparator to define value order @return this builder instance
49 Adds an element to the builder. @param element the element to add, must not be null @return this builder instance for method chaining
50 Adds multiple copies of an element to the builder. @param element the element to add @param occurrences number of times to add the element @return the Builder instance for method chaining
51 Sets the count of an element in the builder. @param element the element to update @param count new count value for the element @return this Builder instance
52 Collects elements into an immutable sorted multiset. @param comparator order for elements @param elementFunction extracts the element from input @param countFunction determines the count of each element @return ImmutableSortedMultiset with sorted elements and their counts
53 Returns elements less than or equal to specified element. @param toElement upper bound element @param inclusive true if the upper bound is inclusive @return ImmutableSortedSet of elements
54 Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) fromElement. @param fromElement lower bound element @param inclusive true if the lower bound is inclusive @return ImmutableSortedSet containing elements greater than or equal to fromElement
55 Returns an unmodifiable view of the specified iterable. @param iterable the original iterable to wrap @return an unmodifiable Iterable; or the original if already unmodifiable
56 Returns an unmodifiable view of the specified immutable collection. @param iterable the iterable to wrap @return an unmodifiable Iterable
57 Removes and returns the first element matching the predicate. @param removeFrom iterable to search and remove from @param predicate condition to match elements @return matched element or null if not found
58 Creates an infinite cycle of the given iterable. @param iterable the iterable to cycle through @return a FluentIterable that infinitely iterates over the input iterable
59 Filters elements of an iterable based on a predicate. @param unfiltered the original iterable to filter @param retainIfTrue predicate to determine which elements to retain @return filtered iterable with only elements that satisfy the predicate
60 Transforms elements of an iterable using a specified function. @param fromIterable the source iterable to transform @param function the transformation function applied to each element @return a new iterable with transformed elements
61 Creates a consuming iterable from the given iterable. @param iterable the source iterable @return an Iterable that consumes elements as they are iterated
62 Returns an unmodifiable view of the specified iterator. @param iterator the iterator to wrap @return an unmodifiable UnmodifiableIterator
63 Wraps an iterator to ensure it is not null. @param iterator the iterator to wrap @return a non-null UnmodifiableIterator @deprecated Use checkNotNull() directly instead
64 Removes all elements from the iterator that are contained in the specified collection. @param removeFrom iterator to remove elements from @param elementsToRemove collection of elements to remove @return true if any elements were removed, false otherwise
65 Removes elements from iterator matching the predicate. @param removeFrom iterator to remove elements from @param predicate condition for removal @return true if any elements were removed, false otherwise
66 Removes elements from iterator not present in collection. @param removeFrom iterator to modify @param elementsToRetain collection of elements to retain @return true if any elements were removed, false otherwise
67 Adds all elements from the iterator to the collection. @param addTo the collection to add elements to @param iterator the iterator providing elements to add @return true if the collection was modified, false otherwise
68 Creates an infinite cycle of elements from the given iterable. @param iterable source of elements to cycle through @return Iterator that repeatedly traverses the iterable
69 Filters elements from an iterator based on a predicate. @param unfiltered the original iterator to filter @param retainIfTrue predicate to determine if an element should be retained @return UnmodifiableIterator with filtered elements
70 Checks if all elements in the iterator satisfy the given predicate. @param iterator the iterator to check @param predicate the condition to apply to each element @return true if all elements match the predicate, false otherwise
71 Finds the first element in an iterator that matches a predicate. @param iterator the iterator to search through @param predicate the condition to apply to each element @param <T> the type of elements in the iterator @return the matching element or throws NoSuchElementException if none found
72 Applies a transformation function to each element of an iterator. @param fromIterator the original iterator @param function the transformation function @return an iterator with transformed elements
73 Returns an iterator that consumes elements by removing them from the original iterator. @param iterator the original iterator to consume elements from @return a new iterator that removes each element after returning it
74 Clears all elements from the provided iterator. @param iterator the iterator to clear
75 Converts Enumeration to UnmodifiableIterator. @param enumeration the Enumeration to convert @return UnmodifiableIterator wrapping the Enumeration
76 Wraps a given iterator to ensure it is not null. @param iterator the iterator to wrap @return the same iterator after null check @deprecated Use checkNotNull(iterator) directly
77 Creates an EnumMap for the specified enum type. @param type enum class to create map for @return EnumMap instance with the given enum type
78 Creates an unmodifiable entry from a given entry. @param entry the original entry to wrap @return an unmodifiable Entry object
79 Transforms an entry using a given transformer. @param transformer function to transform the value @param entry original key-value pair @return new entry with transformed value
80 Converts an Entry to another Entry using a transformer. @param transformer function to apply to the key and value of the input Entry @return Function that transforms Entry<K, V1> to Entry<K, V2>
81 Safely retrieves value from map by key. @param map the map to search @param key the key to look for @return value associated with key or null if not found or error occurs
82 Checks if a map contains a specified key safely. Handles null keys and type mismatches gracefully. @param map the map to check @param key the key to look for @return true if the key is present, false otherwise
83 Safely removes a value from the map by key. @param map the map to remove from @param key the key of the value to remove @return the removed value or null if an exception occurs
84 Applies an action to each key-value pair in the map. @param action consumer that accepts a key and value
85 Creates a MultimapBuilder with tree keys. @param comparator for ordering the keys @return MultimapBuilderWithKeys instance using TreeMap
86 Creates a MultimapBuilder with enum keys. @param keyClass Class of the enum keys @return MultimapBuilderWithKeys configured for enum keys
87 Returns an unmodifiable view of the specified multimap. @param delegate the multimap to wrap @return an unmodifiable Multimap instance
88 Returns an unmodifiable view of the specified set multimap. @param delegate the original immutable set multimap @return unmodifiable set multimap
89 Returns an unmodifiable view of the specified list multimap. @param delegate the original list multimap to wrap @return an unmodifiable ListMultimap instance
90 Applies an action to each entry in the collection. @param action consumer that accepts an element and its count
91 Applies an action to each element in the multiset. @param action the action to be performed on each element
92 Returns an unmodifiable view of the specified immutable multiset. @param multiset the immutable multiset to be wrapped @return unmodifiable Multiset instance
93 Computes the union of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new Multiset representing the union
94 Computes the intersection of two multisets. @param multiset1 first multiset @param multiset2 second multiset @return a new Multiset containing elements common to both, with minimum counts
95 Returns a multiset containing the union of elements from two multisets. @param multiset1 first input multiset @param multiset2 second input multiset @return Multiset with combined counts of elements from both inputs
96 Computes the difference between two multisets. @param multiset1 first multiset @param multiset2 second multiset to subtract from the first @return a new Multiset representing elements in multiset1 not in multiset2
97 Checks if a multiset contains at least as many occurrences of each element as another multiset. @param superMultiset the multiset to check within @param subMultiset the multiset with required occurrences @return true if superMultiset contains all elements of subMultiset with equal or greater count, false otherwise
98 Retains specified occurrences in a multiset. @param multisetToModify the multiset to modify @param occurrencesToRetain the multiset specifying counts to retain @return true if any elements were removed or modified, false otherwise
99 Removes occurrences from one multiset based on another. @param multisetToModify the multiset to modify @param occurrencesToRemove the multiset containing occurrences to remove @return true if any elements were removed, false otherwise
100 Retains only the elements in the multiset that are contained in the specified collection. @param self the multiset to be modified @param elementsToRetain the collection of elements to retain @return true if this multiset was modified as a result of the call
101 Checks if the provided ordering is not null. @param ordering the ordering to check @return the same ordering object @deprecated use checkNotNull directly
102 Drains elements from a BlockingQueue to a collection. @param q source queue @param buffer destination collection @param numElements max number of elements to drain @param timeout max wait time for elements @param unit time unit for timeout @return number of elements drained
103 Drains elements from a blocking queue into a collection. @param q source blocking queue @param buffer destination collection @param numElements max number of elements to drain @param timeout max wait time in the given unit @param unit time unit for the timeout @return number of elements drained
104 Checks if the range contains a specific value. @param value the value to check @return true if the value is within the range, false otherwise
105 Creates a new TreeSet with the specified comparator. @param comparator the comparator to order the elements @return a new TreeSet instance
106 Zips two streams using a binary function. @param streamA first input stream @param streamB second input stream @param function binary function to apply to elements of both streams @return Stream of results from applying the function to paired elements
107 Maps elements of a stream with their index. @param stream the source stream @param function mapping function that takes an element and its index @return a new stream with mapped elements
108 Maps an IntStream to a Stream with index using a function. @param stream the source IntStream @param function the mapping function with index @return a Stream of mapped values
109 Maps elements of a LongStream with their index. @param stream the input LongStream @param function the mapping function that takes an element and its index @return a Stream of mapped results
110 Maps elements of a DoubleStream with their index. @param stream input DoubleStream @param function mapping function that takes an element and its index @return Stream of mapped results
111 Merges a range with a value using a remapping function. @param range the range to merge @param value the value to associate with the range @param remappingFunction function to apply for merging values
112 Creates a tree traverser using a function to get children nodes. @param nodeToChildrenFunction function mapping each node to its children @return TreeTraverser instance for the given node structure
113 Performs pre-order traversal on a tree. @param root the starting node of the traversal @return FluentIterable for traversing nodes in pre-order
114 Performs post-order traversal on a tree. @param root the root node of the tree @return FluentIterable for traversing nodes in post-order
115 Performs a breadth-first traversal starting from the given root. @param root the starting node for traversal @return FluentIterable representing the traversal order
116 Adds an escape mapping for a character. @param c character to be escaped @param r replacement string @return this builder instance
117 Adds a character escape mapping. @param c character to be escaped @param replacement string to replace the character with @return this Builder instance for method chaining
118 Retrieves the code point at a specified index within a CharSequence. @param seq the CharSequence to query @param index the starting index of the character @param end the ending index for validation @return the Unicode code point or throws exceptions if invalid
119 Constructs a DeadEvent with a source and an event. @param source the source of the event @param event the event object
120 Handles exceptions for subscribers. @param e the original exception @param context provides additional context about the exception
121 Invokes a subscriber method with the given event. @param event the event to pass to the method @throws InvocationTargetException if method invocation fails
122 Initializes context for exception handling in event subscribers. @param eventBus the EventBus instance @param event the event object that triggered the subscription @param subscriber the subscriber object handling the event @param subscriberMethod the method within the subscriber handling the event
123 Returns a non-null immutable graph. @param graph the graph to be checked and returned @return the input graph, guaranteed to not be null @deprecated Use Preconditions.checkNotNull instead
124 Copies an immutable network, ensuring it's not null. @param network the network to copy @return the same network instance
125 Copies an immutable value graph. @param graph the graph to copy @return a new instance of the same graph
126 Visits the next node in the traversal. @param horizon stack of iterators representing current traversal path @return the next node or null if no more nodes to visit
127 Initializes a new HashingInputStream. @param hashFunction the hash function to use @param in the input stream to read from
128 Initializes an AppendableWriter with a target. @param target the Appendable object to write to
129 Creates a ByteSink for writing bytes to an encoded CharSink. @param encodedSink sink for the encoded output @return ByteSink that writes to the encodedCharSink
130 Creates a ByteSource from a CharSource by decoding it. @param encodedSource source of encoded characters @return ByteSource representing the decoded bytes
131 Initializes a new CharSequenceReader. @param seq the character sequence to read from; must not be null
132 Copies data from a Reader to a StringBuilder. @param from source Reader @param to destination StringBuilder @return number of characters copied @throws IOException if an I/O error occurs
133 Copies data from Reader to Writer. @param from source Reader @param to destination Writer @return number of characters copied
134 Skips exactly n characters in the given Reader. @param reader source of characters to skip @param n number of characters to skip @throws IOException if an I/O error occurs or end of stream is reached prematurely
135 Wraps an InputStream to count the number of bytes read. @param in the input stream to be wrapped
136 Constructs a CountingOutputStream that wraps another OutputStream. @param out the underlying OutputStream to be wrapped
137 Creates a BufferedReader for reading from a file with specified charset. @param file the File to read from @param charset the Charset to use for decoding bytes to characters @return a BufferedReader instance @throws FileNotFoundException if the file does not exist
138 Creates a BufferedWriter for writing to a file with specified charset. @param file the File object to write to @param charset character set for encoding @return BufferedWriter instance @throws FileNotFoundException if the file cannot be opened for writing
139 Updates the last modified timestamp of a file. @param file the file to touch @throws IOException if unable to update the timestamp
140 Creates all parent directories for a given file. @param file the target file @throws IOException if directory creation fails
141 Retrieves the file extension from a full file name. @param fullName complete file path or name @return file extension or empty string if no extension
142 Removes the file extension from a given file path. @param file full file path or name @return file name without extension
143 Constructs a LittleEndianDataInputStream. @param in input stream to read from, must not be null
144 Constructs a LittleEndianDataOutputStream. @param out underlying output stream
145 Updates or creates a file with current timestamp. @param path file path to update or create @throws IOException if an I/O error occurs
146 Constructs a filter with a given pattern. @param pattern regex pattern to match filenames
147 Checks if a BigInteger is a power of two. @param x the BigInteger to check @return true if x is a power of two, false otherwise
148 Applies a given DoubleConsumer to each element in the array range. @param consumer action to be performed on each double value
149 Applies a given consumer to each element in the range. @param consumer function to apply to each element
150 Applies a consumer function to each element in the range. @param consumer function to apply to each element
151 Checks if a given class is a wrapper type. @param type Class to check @return true if type is a wrapper, false otherwise
152 Wraps primitive types to their corresponding wrapper classes. @param type the class of the type to wrap @return the wrapper class or the original type if not a primitive
153 Unwraps wrapper class to primitive class if applicable. @param type the wrapper class to unwrap @return the corresponding primitive class or original type if not a wrapper
154 Parses an unsigned byte from a string. @param string the string to parse @param radix the base of the number in the string @return the parsed byte value @throws NumberFormatException if the string is out of range
155 Parses a string as an unsigned integer. @param string the string to parse @param radix the radix to use while parsing @return the parsed unsigned integer value @throws NumberFormatException if the string is not a valid unsigned integer in the specified radix
156 Initializes a new schedule with a specified delay and time unit. @param delay the amount of time to wait before execution @param unit the time unit for the delay
157 Updates value for a key using a function and returns the new value. @param key identifier for the value to update @param updaterFunction function to compute the new value @return updated value
158 Updates the value for a key using a function and returns the old value. @param key the key to update @param updaterFunction the function to compute new value from old value @return the old value before update
159 Wraps a Callable in an AsyncCallable using a ListeningExecutorService. @param callable the task to execute asynchronously @param listeningExecutorService the executor service to use @return an AsyncCallable that submits the task to the executor
160 Wraps a Callable to rename the thread during execution. @param callable the task to be executed @param nameSupplier provides the new thread name @return a Callable that renames the thread and restores the original name afterward
161 Wraps a Runnable to rename the current thread temporarily. @param task the original Runnable task @param nameSupplier supplies the new thread name @return a Runnable that renames the thread before execution and restores it afterward
162 Wraps an AsyncFunction to ignore closer. @param function the original async function @return an AsyncClosingFunction that ignores the closer
163 Wraps a FluentFuture, ensuring it's not null. @param future the FluentFuture to be wrapped @return the same FluentFuture object @deprecated Use checkNotNull directly instead
164 Transforms the result of a Future using a given function. @param input Future to transform @param function Function to apply to the Future's result @return A new Future with transformed result
165 Decorates an executor to rename threads. @param executor original executor @param nameSupplier provides new thread names @return Executor with renamed threads
166 Wraps an executor service to rename threads. @param service the original ExecutorService @param nameSupplier supplies new thread names @return a decorated ExecutorService with renamed threads
167 Decorates a ScheduledExecutorService to rename threads. @param service the original executor service @param nameSupplier supplies new thread names @return decorated ScheduledExecutorService
168 Initializes a new SequentialExecutor with a provided Executor. @param executor the Executor to be used for task execution; must not be null
169 Executes a task, ensuring it runs in the correct order. @param task runnable to be executed
170 Sets the handler for uncaught exceptions. @param uncaughtExceptionHandler exception handler to use @return this ThreadFactoryBuilder instance
171 Sets the backing thread factory. @param backingThreadFactory the thread factory to use @return this builder instance
172 Joins a thread with a timeout, ignoring interruptions. @param toJoin the thread to join @param timeout maximum time to wait @param unit time unit for the timeout
173 Sets the ticker for cache expiration. @param ticker Ticker instance to use for timekeeping @return This CacheBuilder instance
174 Sets a removal listener for cache entries. @param listener the listener to be notified of entry removals @return CacheBuilder instance with the removal listener set
175 Returns the calculated mean value. @return mean value as a double
176 Returns the minimum value. @throws IllegalStateException if no values have been added
177 Returns the maximum value in the dataset. @return the maximum value
178 Returns the calculated mean value. Throws an IllegalStateException if no data points have been added. @return mean of the data points
179 Returns the minimum value. Throws IllegalStateException if no values have been added. @return minimum value
180 Returns the maximum value in the dataset. @return maximum value or throws an exception if count is zero
181 Returns a CountDownLatch that counts down when the resource is closed. If already closed, returns an already counted-down latch. @return CountDownLatch to await closure
182 Converts a string to lowercase. @param string the input string @return the lowercase version of the input string
183 Converts uppercase character to lowercase. @param c input character @return lowercase version of c, or c if already lowercase
184 Converts the first character of a string to uppercase. @param string input string @return modified string with first character uppercased
185 Converts character to uppercase. @param c character to convert @return uppercase version of character or original if already uppercase
186 Truncates a sequence to a specified maximum length with an indicator. @param seq the input character sequence @param maxLength the maximum allowed length of the truncated string @param truncationIndicator the string appended at the end of truncated text @return truncated string with indicator or original if within max length
187 Writes statistics to a ByteBuffer. @param buffer destination for writing data
188 Constrains a value within a specified range. @param value the value to constrain @param min the minimum allowable value @param max the maximum allowable value @return the constrained value
189 Sets thread priority. @param priority thread priority level @return this builder instance
190 Compares two CharSequences for equality, ignoring case. @param s1 first CharSequence to compare @param s2 second CharSequence to compare @return true if sequences are equal ignoring case, false otherwise
191 Constructs a CacheStats object with specified metrics. @param hitCount number of successful cache hits @param missCount number of cache misses @param loadSuccessCount number of successful loads @param loadExceptionCount number of load exceptions @param totalLoadTime total time spent on loading operations in nanoseconds @param evictionCount number of evictions
192 Constructs a new instance with an empty map. @param map backing map that must be empty
193 Sets the internal map and calculates total size. @param map new map with collections of values
194 Constructs a new multiset backed by the specified map. @param backingMap the map to back this multiset with; must be empty
195 Returns a subset of elements within the specified range. @param fromElement lower bound of the range @param fromInclusive true if fromElement is inclusive @param toElement upper bound of the range @param toInclusive true if toElement is inclusive @return ContiguousSet containing elements in the specified range
196 Initializes a new EnumMultiset for the given enum type. @param type the enum class to use
197 Returns a subset of elements within the specified range. @param fromElement lower bound of the range (inclusive) @param fromInclusive true if the lower bound is inclusive @param toElement upper bound of the range (exclusive) @param toInclusive true if the upper bound is inclusive @return ImmutableSortedSet containing elements within the specified range
198 Partitions an iterable into fixed-size lists. @param iterable the source iterable to partition @param size the size of each partition @return an Iterable of Lists, where each list is a partition of the original iterable
199 Partitions an iterable into padded lists of a specified size. @param iterable the source iterable to partition @param size the desired size of each partition @return Iterable of lists, with the last list padded if necessary
200 Sets the expected size of the collection. @param expectedSize the anticipated number of elements @return this Builder instance for method chaining
201 Sets the maximum size. @param maximumSize the maximum size to set @return the builder instance
202 Initializes the AbstractStreamingHasher. @param chunkSize size of each data chunk @param bufferSize total buffer size, must be multiple of chunkSize
203 Ensures a value is non-negative. @param value the number to check @return the original value or 0 if negative
204 Creates a CharMatcher that matches a specific character. @param match the character to match @return a CharMatcher instance
205 Creates a CharMatcher that matches any character except the specified one. @param match character to exclude from matching @return CharMatcher instance excluding the specified character
206 Collapses matching characters in a CharSequence with a replacement character. @param sequence the input CharSequence to process @param replacement the character used for replacements @return String with collapsed matches or original if no replacements are made
207 Initializes a new Converter with default settings.
208 Checks equality based on wrapped reference and equivalence. @param obj object to compare @return true if objects are equivalent, false otherwise
209 Tests equivalence of two nullable objects. @param t first object to compare @param u second object to compare @return true if objects are equivalent, false otherwise
210 Removes a value reference from the map. @param key key of the entry to remove @param hash hash code of the key @param valueReference reference to the value to be removed @return true if removal was successful, false otherwise
211 Removes a value reference for testing. @param key entry key @param hash entry hash code @param valueReference reference to the value to remove @return true if removed, false otherwise
212 Checks if two iterators have equal elements in the same order. @param iterator1 first iterator to compare @param iterator2 second iterator to compare @return true if both iterators are equal, false otherwise
213 Checks equality of two Multiset entries. @param object the object to compare with @return true if both count and element are equal, false otherwise
214 Checks if traversing from previousNode to nextNode is possible without reusing an edge. @param graph the graph being traversed @param nextNode the node to traverse to @param previousNode the node that was previously visited (nullable) @return true if traversal is possible, false otherwise
215 Generates hash code based on reference. @param reference the object to hash @return computed hash code
216 Initializes a new FinalizablePhantomReference. @param referent object being referenced, can be null @param queue reference queue for cleanup
217 Initializes a soft reference with cleanup. @param referent object to be softly referenced @param queue finalization queue for cleanup
218 Initializes a FinalizableWeakReference. @param referent object to be weakly referenced @param queue reference queue for cleanup
219 Returns a function that always returns the specified value. @param value the constant value to be returned by the function @return a Function that always returns 'value'
220 Extracts host and port from a bracketed host-port string. @param hostPortString formatted as "[host]:port" @return array with host and port, or empty port if not specified
221 Ensures IPv6 literals have brackets. Throws IllegalArgumentException if not. @return current HostAndPort instance
222 Decrements the given InetAddress by one. @param address the InetAddress to decrement @return decremented InetAddress or throws IllegalArgumentException if it wraps around
223 Increments the given IP address by one. @param address current IP address @return incremented IP address or throws exception if overflow occurs
224 Creates a proxy instance for the given interface. @param <T> generic type of the interface @param interfaceType class of the interface to be proxied @param handler invocation handler to process method calls @return proxy object implementing the specified interface
225 Captures the generic type of the class. @return The actual type argument of the generic superclass.
226 Appends elements from an iterator to an Appendable. @param appendable destination for appending @param parts iterator of objects to append @return the modified Appendable object @throws IOException if an I/O error occurs
227 Appends entries to a StringBuilder. @param builder StringBuilder to append to @param entries Iterable of entries to append @return the updated StringBuilder
228 Joins entries into a string. @param entries iterator of map entries @return concatenated string of entry values
229 Sets the key-value separator for map joining. @param keyValueSeparator character to separate keys and values @return a new MapJoiner instance with the specified separator
230 Generates a string representation of the object. @return String representation including class name and values
231 Retrieves an immutable set of values by key. @param key the key to look up @return an ImmutableSet of values or an empty set if the key is not found
232 Retrieves a resource by name. @param resourceName the name of the resource to find @return URL of the resource or throws an exception if not found
233 Returns an empty Optional. @param <T> type of the value @return Optional containing no value
234 Converts a Google Optional to a Java Util Optional. @param googleOptional the Google Optional instance @return Java Util Optional or null if input is null
235 Converts an empty string to null. @param string input string @return original string or null if it's empty
236 Checks if a string is null or empty. @param string the string to check @return true if the string is null or empty, false otherwise
237 Skips elements in an iterable. @param iterable the iterable to process @param numberToSkip number of elements to skip @return a new iterable with skipped elements
238 Limits an iterable to a specified size. @param iterable the source iterable @param limitSize maximum number of elements to include @return limited iterable
239 Advances the given iterator by a specified number of steps. @param iterator the iterator to advance @param numberToAdvance the number of steps to advance @return the actual number of steps advanced
240 Limits the number of elements from an iterator. @param iterator source iterator @param limitSize maximum number of elements to return @return Iterator with limited size
241 Creates a traverser for a tree structure. @param tree function defining the tree's successors @return Traverser object for tree traversal
242 Rounds up to the nearest multiple of 32 for a positive integer. @param bits positive integer value @return smallest multiple of 32 greater than or equal to bits
243 Converts BigInteger to InetAddress. @param address BigInteger representation of IP address @param isIpv6 true for IPv6, false for IPv4 @return InetAddress object or throws exception if conversion fails
244 Repeats a string multiple times. @param string the string to repeat @param count number of times to repeat @return repeated string or original if count is 1
245 Initializes a Bloom filter with specified parameters. @param bits underlying bit array for storing hash values @param numHashFunctions number of hash functions to use @param funnel strategy for converting elements to bytes @param strategy bloom filter strategy (e.g., size, false positive rate)
246 Creates a concatenated hash function from an iterable of hash functions. @param hashFunctions collection of hash functions to concatenate @return ConcatenatedHashFunction object combining the input functions
247 Initializes a SipHash function with given parameters. @param c number of iterations for compression phase @param d number of iterations for finalization phase @param k0 first key component @param k1 second key component
248 Constructs a FileBackedOutputStream with specified file threshold and reset behavior. @param fileThreshold the size in bytes after which data is written to a file @param resetOnFinalize whether to reset the stream on finalization
249 Converts a byte array to an Inet4Address. @param bytes 4-byte array representing an IPv4 address @return Inet4Address object
250 Ensures array has at least minLength + padding capacity. @param array original boolean array @param minLength minimum required length @param padding additional capacity to ensure @return resized array if necessary, otherwise the original array
251 Ensures array has minimum length with optional padding. @param array original byte array @param minLength desired minimum length @param padding additional space to allocate if needed @return new array with ensured capacity or original if sufficient
252 Ensures the char array has at least the specified minimum length with optional padding. @param array original char array @param minLength desired minimum length of the array @param padding additional space to allocate if needed @return new char array with ensured capacity or original if sufficient
253 Ensures the array has at least the specified minimum length. @param array original array @param minLength desired minimum length @param padding additional capacity to add if resizing @return resized array or original if sufficient capacity
254 Ensures the array has at least the specified minimum length with optional padding. @param array original float array @param minLength desired minimum length of the array @param padding additional capacity to add if resizing @return resized array or original if sufficient capacity
255 Ensures array has at least the specified minimum length with optional padding. @param array original integer array @param minLength desired minimum length of the array @param padding additional capacity to add if resizing @return resized array or original if sufficient capacity
256 Ensures the array has at least the specified minimum length with additional padding. @param array original array to check and resize if necessary @param minLength minimum required length of the array @param padding extra capacity to add beyond the minimum length @return resized array if necessary, otherwise the original array
257 Ensures the array has at least the specified minimum length with optional padding. @param array original short array @param minLength desired minimum length of the array @param padding additional capacity to be added if resizing is needed @return resized array or original if sufficient capacity exists
258 Safely casts a long to a char. @param value the long value to cast @return the char representation of the long value @throws IllegalArgumentException if out of char range
259 Safely casts long to int. @param value long value to cast @return int representation of the value @throws IllegalArgumentException if value is out of int range
260 Converts long to short safely. @param value long value to convert @return short representation of the value @throws IllegalArgumentException if conversion overflows
261 Converts long to byte with overflow check. @param value the long value to convert @return byte representation of the value @throws IllegalArgumentException if conversion overflows
262 Safely casts a long to a byte. Throws an exception if the value is out of range. @param value the long value to cast @return the casted byte value
263 Safely casts a long to an int. @param value the long value to cast @return the int value if within range @throws IllegalArgumentException if out of int range
264 Creates a fixed-delay scheduler. @param initialDelay initial delay before first execution @param delay delay between subsequent executions @param unit time unit for delays @return Scheduler instance
265 Creates a fixed-rate scheduler. @param initialDelay delay before first execution in milliseconds @param period interval between executions in milliseconds @param unit time unit for delay and period (deprecated) @return Scheduler instance
266 Constrains a character value within a specified range. @param value the character to constrain @param min the minimum allowable value @param max the maximum allowable value @return the constrained character value
267 Constrains a value within a specified range. @param value the value to constrain @param min the minimum allowable value @param max the maximum allowable value @return the constrained value
268 Retrieves a resource URL by name. @param contextClass class providing the context for loading the resource @param resourceName name of the resource to find @return URL of the resource if found; throws IllegalArgumentException otherwise
269 Starts the stopwatch. Throws an exception if already running. @return the Stopwatch instance
270 Stops the stopwatch and records the elapsed time. @return This Stopwatch instance for method chaining
271 Ensures removal is allowed. @param canRemove flag indicating if removal is permitted
272 Sets the comparator for ordering entries by value. @param valueComparator comparator to define order of values @return Builder instance with value comparator set
273 Sets the initial capacity of the cache. @param initialCapacity starting number of entries @return this CacheBuilder instance for chaining
274 Sets the expected number of concurrent threads accessing the cache. @param concurrencyLevel positive integer representing concurrency level @return CacheBuilder instance with updated settings
275 Sets the initial capacity of the map. @param initialCapacity initial size for the map @return this MapMaker instance
276 Sets the concurrency level for map operations. @param concurrencyLevel expected number of concurrent threads @return this MapMaker instance
277 Sets the maximum number of entries in the cache. @param maximumSize maximum number of entries allowed @return CacheBuilder instance for chaining
278 Sets the maximum total weight of entries in the cache. @param maximumWeight the maximum allowed weight; must be non-negative @return this CacheBuilder instance for chaining
279 Sets a weigher for the cache. @param weigher function to determine the weight of entries @return CacheBuilder instance with weigher set
280 Sets the maximum time after a write for an entry to remain in the cache. @param duration the length of time after which an entry should expire @param unit the time unit of the duration @return this CacheBuilder instance
281 Sets cache expiration after access. @param duration time before expiration @param unit time unit of the duration @return CacheBuilder instance with updated settings
282 Sets cache entries to expire after a fixed duration of write access. @param duration the length of time before expiration @param unit the time unit for the duration @return this CacheBuilder instance
283 Sets the key equivalence strategy. @param equivalence custom key equivalence strategy @return CacheBuilder instance with specified key equivalence
284 Sets the equivalence for cache values. @param equivalence Equivalence strategy for comparing values @return This CacheBuilder instance
285 Sets custom key equivalence. @param equivalence the equivalence strategy for keys @return this MapMaker instance
286 Constructs a TypeToken capturing the generic type. @throws IllegalArgumentException if constructed for a type variable
287 Returns the failure cause of the service. @return Throwable representing the failure reason
288 Checks if an index is within bounds. @param index the index to check @param size the size of the collection @param desc description of the collection for error message @return the index if valid @throws IndexOutOfBoundsException if index is out of bounds
289 Checks if index is within valid range. @param index the index to check @param size the size of the container @param desc description of the container for error message @return the index if valid @throws IndexOutOfBoundsException if index is out of bounds
290 Returns a predicate that always evaluates to true. @param <T> the type of elements to be matched @return a predicate that accepts any element and returns true
291 Returns a predicate that always evaluates to false. @param <T> the type of elements to be evaluated by this predicate @return a predicate that always returns false
292 Returns a predicate that checks if an object is null. @param <T> the type of the object to check @return Predicate checking for null
293 Creates a predicate to check if an object is not null. @return Predicate that returns true if the object is not null
294 Combines two predicates with a logical AND. @param first the first predicate @param second the second predicate @return a compound Predicate that returns true if both input predicates return true
295 Combines two predicates with a logical OR. @param first the first predicate @param second the second predicate @return a Predicate that evaluates to true if either of the input predicates is true
296 Omits empty strings from split results. @return a new Splitter instance configured to skip empty strings
297 Sets a maximum number of items to split. @param maxItems the maximum number of items allowed @return a new Splitter instance with the limit set
298 Splits a CharSequence into a list of strings. @param sequence the input sequence to split @return an unmodifiable list of split strings
299 Returns string representation of key-value pair. @return formatted string "key=value"
300 Converts elapsed time to specified unit. @param desiredUnit target time unit for conversion @return elapsed time in the desired unit
301 Calculates elapsed time. @return Duration representing elapsed time in nanoseconds
302 Returns a string representation of the elapsed time. @return formatted string showing elapsed time in appropriate units
303 Converts null to an empty string. @param string input string which may be null @return empty string if input is null, otherwise original string
304 Finds the longest common prefix between two CharSequences. @param a first CharSequence @param b second CharSequence @return the longest common prefix as String
305 Finds the common suffix between two CharSequences. @param a first CharSequence @param b second CharSequence @return String representing the common suffix or empty string if none
306 Creates a Supplier that returns the provided instance. @param instance the object to supply @return Supplier providing the given instance
307 Constructs a new Ticker instance.
308 Throws VerifyException if the given expression is false. @param expression condition to verify as true
309 Verifies boolean expression; throws exception with formatted message if false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 parameter for message formatting
310 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate error message template @param p1 parameter for error message
311 Throws VerifyException if expression is false. @param expression boolean condition to check @param errorMessageTemplate error message template with one placeholder @param p1 parameter for the error message template
312 Throws VerifyException if the given expression is false. @param expression condition to verify @param errorMessageTemplate error message template @param errorMessageArgs arguments for the error message
313 Verifies a boolean condition; throws an exception with formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message @param p1 first character parameter for message @param p2 second character parameter for message
314 Verifies a boolean condition; throws exception with formatted message if false. @param expression the condition to check @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
315 Throws a VerifyException if the expression is false. @param expression condition to verify @param errorMessageTemplate error message format string @param p1 first parameter for error message @param p2 second parameter for error message
316 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate error message template with placeholders @param p1 first placeholder value @param p2 second placeholder value
317 Throws a VerifyException with formatted message if expression is false. @param expression boolean condition to verify @param errorMessageTemplate template for error message @param p1 character parameter for message formatting @param p2 integer parameter for message formatting
318 Throws VerifyException with formatted message if expression is false. @param expression boolean condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
319 Throws a VerifyException if the expression is false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
320 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate error message template @param p1 first parameter for message formatting @param p2 second parameter for message formatting
321 Throws VerifyException if expression is false. @param expression condition to check @param errorMessageTemplate template for error message @param p1 first placeholder for error message @param p2 second placeholder for error message
322 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 first parameter for message formatting @param p2 second parameter for message formatting
323 Throws an exception if the given expression is false. @param expression condition to verify as true @param errorMessageTemplate error message template with placeholders for parameters @param p1 first parameter for the error message @param p2 second parameter for the error message
324 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate error message template @param p1 first parameter for the message @param p2 second parameter for the message
325 Throws a VerifyException if the given expression is false. @param expression boolean condition to verify @param errorMessageTemplate template for error message with placeholders @param p1 first placeholder character in the error message @param p2 second placeholder object in the error message, can be null
326 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate error message template with placeholders @param p1 first parameter for the error message @param p2 second parameter for the error message (nullable)
327 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate error message template @param p1 first parameter for the error message @param p2 second parameter for the error message (nullable)
328 Throws an exception if the given expression is false. @param expression condition to verify @param errorMessageTemplate template for error message with placeholders @param p1 first placeholder value @param p2 second placeholder value
329 Throws VerifyException if expression is false. @param expression condition to verify @param errorMessageTemplate error message template @param p1,p2,p3 parameters for the error message
330 Throws an exception if the expression is false. @param expression condition to verify @param errorMessageTemplate template for error message @param p1 parameter for error message @param p2 parameter for error message @param p3 parameter for error message @param p4 parameter for error message
331 Cleans up references by invoking their finalization method. @param firstReference the initial reference to clean up @return true if cleanup is successful, false otherwise
332 Constructs a new instance of SimpleStatsCounter.
333 Adds statistics from another StatsCounter instance. @param other the StatsCounter to add statistics from
334 Constructs an instance of AbstractLoadingCache.
335 Creates a map that maintains insertion order. @return LinkedHashMap with preserved insertion order
336 Adds all entries from the specified map. @param m map whose entries are to be added
337 Invalidates all entries in the cache by their keys. @param keys iterable collection of keys to invalidate
338 Creates a new CacheBuilder instance. @return CacheBuilder object configured with default settings
339 Throws an exception indicating the operation is unsupported. @param keys iterable of keys to load @throws Exception always thrown due to unsupported operation
340 Returns the total count of requests. @return sum of hit and miss counts
341 Returns the total count of loads by summing success and exception counts. @return Total load count
342 Calculates the exception rate during loading. @return Exception rate as a percentage or 0.0 if no loads occurred
343 Calculates the average load penalty. @return average load time or 0 if no loads occurred
344 Initializes a new instance of ForwardingCache.
345 Constructs a new instance of ForwardingCollection.
346 Constructs a new ForwardingIterator instance.
347 Initializes an empty ForwardingMap.
348 Constructs a new ForwardingMapEntry instance.
349 Constructs a new empty ForwardingMultimap.
350 Initializes a new instance of ForwardingTable.
351 Constructs a new ForwardingExecutorService.
352 Constructs a new ForwardingFuture instance.
353 Drains and processes entries from the recency queue. Moves entries to the access queue if still present.
354 Copies a reference entry with a new next pointer. @param original the original reference entry to copy @param newNext the new next entry in the chain @return copied ReferenceEntry or null if key or value is collected
355 Removes entries from the column based on a predicate. @param predicate condition to test each entry @return true if any entries were removed, false otherwise
356 Initializes the futures list and sets up listeners for completion. @param futures List of ListenableFuture objects to manage
357 Creates an executor that propagates RejectedExecutionException to a future. @param delegate the underlying executor @param future the future to propagate exceptions to @return an executor with rejection propagation
358 Retrieves result from a completed Future. @param future the Future object to retrieve the result from @return the result of the Future @throws ExecutionException if an exception occurred during computation @throws IllegalStateException if the Future is not done
359 Retrieves result from Future without interruption. @param future the Future object to retrieve from @return result of the Future or throws exception if failed
360 Clears reference queues for keys and values if used by the map.
361 Provides a default equivalence strategy. @return Equivalence instance for comparing objects
362 Provides a default equivalence strategy for objects. @return Equivalence instance used to compare objects
363 Provides a default equivalence strategy for objects. @return Equivalence instance defining equality checks
364 Provides a default equivalence strategy for objects. @return Equivalence instance defining equality checks
365 Provides a default equivalence strategy for objects. @return Equivalence instance defining equality rules
366 Checks if a cache entry is expired. @param entry the cache entry to check @param now current time in nanoseconds @return true if entry is expired, false otherwise
367 Returns the total count of all elements in the map. @return Total count as an int, saturated if overflow occurs
368 Counts the number of elements in an iterator. @param iterator the iterator to count elements from @return the size of the iterator as an int
369 Calculates the total size of a multiset in linear time. @param multiset the input multiset @return the total count of all elements in the multiset
370 Adds two integers with overflow protection. @param a first integer @param b second integer @return sum of a and b, clamped to int range if overflow occurs
371 Performs saturated subtraction of two integers. @param a minuend @param b subtrahend @return result of the subtraction or Integer.MIN_VALUE/MAX_VALUE if overflow occurs
372 Multiplies two integers with saturation. @param a first integer @param b second integer @return saturated result of the multiplication
373 Creates a set that maintains insertion order. @return a new CompactHashSet instance
374 Initializes an AbstractIterator instance.
375 Initializes an iterator with the first element. @param firstOrNull the first element or null if none
376 Initializes an unmodifiable list iterator.
377 Creates an unmodifiable empty collection. @return Unmodifiable empty collection instance
378 Removes and returns the first entry from the map. @return the removed entry or null if the map is empty
379 Retrieves and removes the first element from the iterator. @return the first element or null if the iterator is empty
380 Refreshes delegate if empty, checks for concurrent modifications.
381 Retrieves a collection of values by key. @param key unique identifier for the collection @return wrapped collection of values associated with the key
382 Returns a collection of all values in the map. @return Collection containing all values associated with keys in the map
383 Returns a list of all values in the map. @return List containing all values
384 Returns all entries in the map. @return a collection of map entries
385 Returns a list of map entries. @return List of Entry objects representing key-value pairs
386 Creates a StringBuilder for a collection of given size. @param size expected number of elements in the collection @return StringBuilder initialized with optimal capacity
387 Creates a new ArrayList with the specified initial capacity. @param initialArraySize the initial capacity of the list @return an ArrayList instance with the given capacity
388 Calculates capacity for a collection based on expected size. @param expectedSize estimated number of elements @return calculated capacity to accommodate the expected size
389 Creates a ListMultimap with array list values. @param expectedValuesPerKey estimated number of values per key @return ListMultimapBuilder configured for array list values
390 Creates a set multimap with hash sets as value collections. @param expectedValuesPerKey estimated average number of values per key @return SetMultimapBuilder configured for hash set values
391 Creates a builder for a SetMultimap with linked hash set values. @param expectedValuesPerKey estimated number of values per key @return builder instance
392 Creates a multimap builder with hash keys. @param expectedKeys the expected number of key elements @return MultimapBuilderWithKeys instance
393 Creates a multimap builder with linked hash keys. @param expectedKeys estimated number of key entries @return MultimapBuilderWithKeys instance
394 Sets the count of an element in a multiset. @param self the multiset to modify @param element the element to update @param count new count for the element @return old count of the element
395 Sets element count in multiset if current count matches. @param self the Multiset to modify @param element the element whose count to set @param oldCount expected current count of the element @param newCount new count to set for the element @return true if count was updated, false otherwise
396 Generates a hash code using Google Guava's Sets.hashCodeImpl. @return computed hash code
397 Checks equality using standard equals implementation. @param object the object to compare with @return true if objects are equal, false otherwise
398 Generates hash code based on map representation. @return int hash code value
399 Returns string representation of the map. @return String representation of the map
400 Removes all occurrences of specified elements. @param elementsToRemove collection of elements to remove @return true if any element was removed
401 Checks equality with another object. @param object the object to compare @return true if equal, false otherwise
402 Checks equality with another object using standard equals implementation. @param object the object to compare with @return true if equal, false otherwise
403 Retrieves the first element from an iterable or returns a default value. @param iterable the source of elements @param defaultValue value to return if iterable is empty @return the first element or the default value
404 Returns this multimap as an unmodifiable map. @return A map view of the multimap
405 Returns a navigable set view of the keys. @return NavigableSet containing all keys in the map
406 Returns the given comparator or natural order if null. @param comparator custom comparator to use @return provided comparator or natural ordering
407 Returns string representation of the row map. @return String representation of the row map
408 Returns string representation of the row map. @return String representation of the row map
409 Writes object state to a stream. @param stream output stream for serialization @throws IOException if I/O error occurs
410 Writes object state to a stream. @param stream output stream for serialization @throws IOException if an I/O error occurs
411 Writes object state to a stream. @param stream the output stream for serialization @throws IOException if an I/O error occurs
412 Populates a multimap from an input stream. @param multimap the target multimap to populate @param stream the input stream containing key-value pairs
413 Returns an immutable set of column keys. @return ImmutableSet containing all column keys
414 Returns an immutable set of all row keys. @return ImmutableSet containing all row keys
415 Returns an immutable set of keys from the map. @return ImmutableSet containing all keys in the map
416 Checks if a column key exists in the mapping. @param columnKey the key to check @return true if the column key is present, false otherwise
417 Checks if a row key exists in the map. @param rowKey key to search for @return true if the row key is present, false otherwise
418 Retrieves an immutable list of values by key. @param key the key to look up @return an immutable list of values or an empty list if the key is not found
419 Retrieves a column from the table. @param columnKey key of the column to retrieve @return ImmutableMap containing rows and values for the specified column
420 Adds a key-value pair to the builder. @param key unique identifier for the value @param value associated with the key @return Builder instance for method chaining
421 Computes the C object at a given distance from the origin. @param origin starting C object @param distance number of steps to move forward @return C object after moving the specified distance @throws IllegalArgumentException if distance is negative or overflow occurs
422 Flattens and maps elements to double values. @param fromSpliterator source spliterator @param function mapping function to double spliterator @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return Spliterator.OfDouble with mapped double values
423 Applies a flat map transformation to convert elements into integers. @param fromSpliterator the source spliterator @param function mapping function converting elements to int spliterators @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return a new Spliterator.OfInt with transformed elements
424 Transforms a spliterator of elements into a long spliterator using a mapping function. @param fromSpliterator the original spliterator to transform @param function the mapping function that converts each element to a long spliterator @param topCharacteristics characteristics for the resulting spliterator @param topSize estimated size of the resulting spliterator @return a new Spliterator.OfLong with transformed elements
425 Applies a flat map operation to the input spliterator. @param fromSpliterator the source spliterator @param function mapping function that returns a spliterator for each element @param topCharacteristics characteristics of the resulting spliterator @param topSize estimated size of the resulting spliterator @return a new spliterator after flat map operation
426 Checks if this collection contains all elements of another collection. @param collection the collection to check against @return true if all elements are contained, false otherwise
427 Sets the hash table mask and updates metadata. @param mask the new hash table mask value
428 Sets the hash table mask. @param mask the new mask value for the hash table
429 Resizes internal arrays to new capacity. @param newCapacity the new capacity for entries, keys, and values
430 Resizes internal arrays to specified capacity. @param newCapacity the new capacity for the arrays
431 Calculates the hash table size based on expected elements. @param expectedSize estimated number of elements to store @return computed hash table capacity
432 Compares two integers and chains comparison results. @param left first integer to compare @param right second integer to compare @return ComparisonChain instance for further comparisons or final result
433 Compares two long values and returns a comparison chain. @param left first value to compare @param right second value to compare @return ComparisonChain object for further comparisons or result retrieval
434 Compares two booleans with true values prioritized. @param left first boolean value to compare @param right second boolean value to compare @return ComparisonChain instance reflecting the comparison
435 Compares two booleans, placing false before true. @param left first boolean to compare @param right second boolean to compare @return ComparisonChain object for further comparisons
436 Checks if there is a defined lower bound. @return true if lower bound exists, false otherwise
437 Checks if there is an upper bound defined. @return true if an upper bound exists, false otherwise
438 Constructs a new DiscreteDomain with default settings.
439 Custom serialization method for the map. @param stream ObjectOutputStream to write data @throws IOException if I/O error occurs
440 Writes object state to ObjectOutputStream. @param stream the ObjectOutputStream to write to @throws IOException if an I/O error occurs
441 Writes object state to output stream. @param stream ObjectOutputStream for writing @throws IOException if I/O error occurs
442 Checks if element is of expected type. @param element the object to check @throws ClassCastException if element is not of expected type
443 Writes object state to a stream. @param stream ObjectOutputStream to serialize data @throws IOException if an I/O error occurs
444 Writes object state to a stream. @param stream output stream for serialization @throws IOException if an I/O error occurs
445 Writes object state to output stream. @param stream ObjectOutputStream for writing @throws IOException if I/O error occurs
446 Constructs a new Builder instance.
447 Creates a FluentIterable from an array of elements. @param elements array of elements to be iterated over @return FluentIterable instance containing the elements
448 Creates an empty FluentIterable. @param <E> the element type @return a FluentIterable with no elements
449 Checks if the collection is empty. @return true if no elements present, false otherwise
450 Appends another iterable to this one. @param other the iterable to append @return a new FluentIterable containing elements of both
451 Concatenates two iterables. @param a first iterable @param b second iterable @return combined iterable containing elements from both a and b
452 Concatenates three iterables into one. @param a first iterable @param b second iterable @param c third iterable @return concatenated iterable containing elements from a, b, and c
453 Concatenates multiple iterables into one. @param a,b,c,d iterables to concatenate @return combined iterable of all inputs
454 Returns a stream of elements from the delegate collection. @return Stream containing elements of type E
455 Counts occurrences of an element in an iterator. @param iterator source of elements @param element target element to count @return number of times element appears in iterator
456 Checks if the map contains the specified key. @param map the map to search in @param key the key to look for @return true if the key is present, false otherwise
457 Checks if the map contains the specified value. @param map the map to search in @param value the value to look for @return true if the value is found, false otherwise
458 Adds all elements from an iterable to this list at a specified position. @param index position at which to insert the elements @param elements iterable containing elements to add @return true if the list was modified as a result of the call
459 Returns a sublist of elements from fromIndex (inclusive) to toIndex (exclusive). @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive) @return List containing the specified range of elements
460 Generates a hash code based on the object's fields. @return computed hash code
461 Adds all entries from the specified map to this map. @param map the map whose entries are to be added
462 Checks equality with another object using standard equals implementation. @param object the object to compare with @return true if objects are equal, false otherwise
463 Creates a new custom table with specified backing map and row map supplier. @param backingMap initial empty map for storing rows @param factory supplies new empty maps for each row @return Table instance initialized with the given parameters
464 Returns the set of column keys. Initializes if not already created. @return Set of column keys
465 Returns a map representing a column. @param columnKey key of the column to retrieve @return map with column data or empty map if not found
466 Populates a map from an input stream. @param map the map to populate @param stream the input stream containing map data @throws IOException if I/O error occurs @throws ClassNotFoundException if class of serialized object cannot be found
467 Populates a multiset from an input stream. @param multiset the multiset to populate @param stream the input stream containing element data @throws IOException if reading from the stream fails @throws ClassNotFoundException if a class in the stream cannot be found
468 Rebuilds a hash table with a new size. @param newTableSize the desired size of the new hash table @param elements array containing elements to be rehashed @param n number of elements to process from the elements array @return the newly built hash table
469 Initializes a new Builder with default capacity.
470 Creates a new builder instance. @param size initial capacity for the builder @return Builder object with specified size
471 Creates a new Builder with an initial capacity. @param expectedSize the expected number of entries @return a Builder instance
472 Ensures the array has at least the specified capacity. @param minCapacity minimum required capacity
473 Adds all elements from the specified iterable. @param elements iterable of elements to add @return current builder instance
474 Adds all elements from iterator to builder. @param elements iterator of elements to add @return current builder instance
475 Adds all elements from iterator to builder. @param elements iterator of elements to add @return the current builder instance
476 Adds all elements from the given iterable. @param elements iterable of elements to add @return this builder instance
477 Converts a stream to an immutable list. @return Collector that gathers elements into an ImmutableList
478 Creates an empty immutable multimap. @return ImmutableMultimap with no entries
479 Converts a stream of Range objects to an ImmutableRangeSet. @param <E> element type that extends Comparable @return Collector for ImmutableRangeSet
480 Creates a collector that collects elements into an immutable set. @param <E> element type @return Collector for ImmutableSet<E>
481 Returns the comparator used to order the keys. @return Comparator for key ordering or null if natural ordering is used
482 Adds an element to the builder. @param element the element to add @return the builder instance
483 Wraps an Interner in a Function. @param interner object to wrap @return Function that interns its input
484 Converts an Iterable to a string representation. @param iterable the Iterable to convert @return string representation of the Iterable
485 Retrieves the single element from an iterable. Throws if iterable is empty or contains more than one element. @param iterable source of elements @return the only element in the iterable
486 Returns the only element from an iterator or a default value if empty. @param iterator source of elements @param defaultValue value to return if iterator is empty @return single element from iterator or default value
487 Concatenates two arrays of the same type. @param first first array to concatenate @param second second array to concatenate @param type class type of the arrays @return new array containing elements of both input arrays
488 Retrieves the last element from an iterable. @param iterable source of elements @return last element or throws exception if empty
489 Retrieves last element from iterator or default value if empty. @param iterator source of elements @param defaultValue value to return if iterator is empty @return last element or default value
490 Returns an empty unmodifiable iterator. @param <T> the type of elements in the iterator @return an empty UnmodifiableIterator
491 Serializes the map to an ObjectOutputStream. @param stream the output stream to serialize to @throws IOException if I/O error occurs during serialization
492 Adds a new node to the linked list. @param key key of the node @param value value of the node @param nextSibling sibling node to insert before (null if adding to tail) @return newly added Node object
493 Converts a CharSequence to a list of Characters. @param sequence the input CharSequence @return a List containing individual Characters from the sequence
494 Returns the index of the first occurrence of the specified element. @param list the list to search within @param element the element to find @return the index of the element or -1 if not found
495 Finds the last index of an element in a list. @param list the list to search @param element the element to find @return the last index of the element, or -1 if not found
496 Advances to the next entry in the table. @return true if a valid entry is found, false otherwise
497 Expands the hash table by doubling its capacity. Reclassifies nodes to new bins while preserving order.
498 Attempts to drain reference queues under a lock.
499 Checks if an entry is live for testing purposes. @param entry the InternalEntry to check @return true if the entry has a non-null live value, false otherwise
500 Creates a new identity hash set. @return Set with identity-based equality
501 Returns a synchronized view of the specified bi-map. @param bimap the bi-map to be wrapped @return a synchronized BiMap instance
502 Inserts element into the heap at specified index. @param index position to insert element @param x element to be inserted @return new index of the inserted element after potential swaps
503 Swaps the last element with a conceptually last element in the heap. @param actualLastElement the element to swap with @return index of swapped element or original size if no swap occurs
504 Updates the cursor to the next index not in skipMe. @param c current cursor position
505 Creates an iterator for a multiset. @param multiset the multiset to iterate over @return Iterator that traverses elements of the multiset
506 Creates a new array of the same type as the given reference. @param reference existing array to infer type from @param length size of the new array @return new array of specified length and type
507 Converts collection to array. @param c source collection @return array of Objects containing collection elements
508 Finds the minimum element in an iterator. @param iterator iterator containing elements to compare @return minimum element or throws NoSuchElementException if empty
509 Finds the maximum element in an iterator. @param iterator Iterator of elements to compare @return Maximum element found or throws NoSuchElementException if empty
510 Encloses all values in a range. @param values iterable collection of comparable values @return Range object containing the minimum and maximum values
511 Creates a new concurrent hash set. @return ConcurrentHashSet instance
512 Returns string representation of range. @param lowerBound start of range @param upperBound end of range @return formatted range string
513 Returns the lower endpoint of the range. @return the lower endpoint value
514 Returns the upper endpoint of the range. @return the upper endpoint as type C
515 Checks for conflicts in the value bucket and throws an exception if overflow occurs. @param value the value to check for conflict @param entry the current map entry being processed @param valueBucketHead the head of the value bucket @throws BucketOverflowException if the bucket size exceeds the maximum allowed length
516 Removes duplicate entries from an array. @param entries input entry array @param n number of entries to process @param newN expected size after removing duplicates @param duplicates map tracking duplicate status @return array with duplicates removed
517 Checks for key conflicts in a hash bucket. @param key the key to check @param newValue the value associated with the key @param keyBucketHead the head of the key bucket @param throwIfDuplicateKeys flag to determine if an exception should be thrown on conflict @return the existing entry if found and duplicates are not allowed, otherwise null @throws BucketOverflowException if the bucket exceeds maximum length
518 Collects enum elements into an immutable set. @param <E> type of enum extending Enum<E> @return Collector for ImmutableSet of enums
519 Returns a new EnumSet containing all elements not in the given collection. @param collection the collection whose complement is to be computed @return an EnumSet with elements not present in the input collection
520 Returns the complement of an enum set. @param collection elements to exclude @param type enum class type @return EnumSet containing all other enum constants
521 Finds the last element in an IntStream. @param stream input IntStream @return OptionalInt containing the last element or empty if none present
522 Finds the last element in a LongStream. @param stream the input LongStream @return OptionalLong containing the last element, or empty if stream is empty
523 Finds the last element in a DoubleStream. @param stream the input stream of doubles @return OptionalDouble containing the last element or empty if stream is empty
524 Partitions array around a pivot. @param left starting index of partition range @param right ending index of partition range @param pivotIndex index of the pivot element @return new index of the pivot element
525 Writes object state to a stream for serialization. @param stream the output stream to which the object is serialized @throws IOException if an I/O error occurs during serialization
526 Protected constructor to prevent instantiation from outside the class.
527 Default constructor for UnicodeEscaper class.
528 Escapes characters in a string starting from a given index. @param s input string to escape @param index starting index for escaping @return escaped string
529 Computes replacement for a character using an escaper. @param escaper CharEscaper instance @param c character to escape @return escaped character as String or null if no replacement needed
530 Computes replacement string for Unicode code point. @param escaper UnicodeEscaper instance @param cp Unicode code point @return Escaped string or null if no replacement needed
531 Validates endpoint compatibility. @param endpoints pair of endpoints to validate
532 Advances to the next node in the iteration. @return true if successfully advanced, false if no more nodes
533 Creates an endpoint pair from a graph and two nodes. @param <N> node type @param graph the graph containing the nodes @param nodeU first node @param nodeV second node @return EndpointPair with ordered or unordered nodes based on graph direction
534 Creates an endpoint pair from a network and two nodes. @param network the network to which the nodes belong @param nodeU the first node @param nodeV the second node @return EndpointPair with ordered or unordered nodes based on network direction
535 Returns a set of edges in the graph. @return Set of EndpointPair representing edges
536 Returns a set of all edges in the graph. @return Set of EndpointPair<N> representing edges
537 Validates endpoint pair compatibility. @param endpoints pair of endpoints to validate
538 Returns an unmodifiable iterator over nodes U and V. @return Iterator containing nodeU and nodeV in that order
539 Sets the node order for graph building. @param nodeOrder specifies the order of nodes @return a new GraphBuilder instance with the specified node order
540 Sets the order of incident edges. @param incidentEdgeOrder edge ordering strategy (must be UNORDERED or STABLE) @return updated GraphBuilder instance
541 Returns the transpose of a directed graph. @param graph the original directed graph @return a new Graph object representing the transposed graph
542 Returns the transpose of a directed network. @param network the original directed network @return a new Network object representing the transpose
543 Returns the transpose of a directed graph. If the graph is undirected, it returns the graph itself. @param <N> node type @param <V> edge value type @param graph the original graph @return transposed graph or the same graph if undirected
544 Sets the node order for network construction. @param nodeOrder specifies the ordering of nodes @return updated NetworkBuilder instance with specified node order
545 Sets the edge order for the network. @param edgeOrder specifies the order of edges @return a new NetworkBuilder with updated edge order
546 Sets the node ordering for the graph. @param nodeOrder the order in which nodes are iterated @return a new builder with the specified node order
547 Sets the order of incident edges. @param incidentEdgeOrder order type for incident edges @return updated ValueGraphBuilder instance
548 Updates internal state with provided byte array. @param b byte array to update with
549 Updates buffer content. @param b ByteBuffer to be updated
550 Updates hasher with specified number of bytes. @param bytes number of bytes to process @return current Hasher instance
551 Processes remaining bytes in ByteBuffer by padding with zeros and flipping. @param bb ByteBuffer to be processed
552 Checks if input is contained. @param input the item to check @return true if input is contained, false otherwise
553 Creates a Bloom filter collector. @param funnel defines how to extract features from elements @param expectedInsertions estimated number of insertions @param fpp acceptable false positive probability @return Collector for creating a BloomFilter
554 Returns the number of bits required to represent the value. @return Number of bits in the value
555 Casts long to byte, saturating at max/min values. @param value the long value to cast @return saturated byte value
556 Compares two bytes as unsigned integers. @param a first byte value @param b second byte value @return negative if a < b, zero if a == b, positive if a > b
557 Converts a byte to a string representation in the specified radix. @param x the byte value to convert @param radix the base to use for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return string representation of the byte in the given radix
558 Copies all bits from another LockFreeBitArray. @param other source bit array with the same length
559 Sets a bit at the specified index to 1. @param bitIndex index of the bit to set @return true if the bit was changed from 0 to 1, false otherwise
560 Generates a hash code based on the internal byte representation. @return int hash code value
561 Converts byte array to hexadecimal string. @return Hexadecimal representation of the byte array
562 Converts byte array to long. @param bytes 8-byte array @return long value from byte array
563 Computes a weak hash for a 32-byte segment of input bytes. @param bytes input byte array @param offset starting position in the byte array @param seedA initial seed value A @param seedB initial seed value B @param output array to store the resulting hash values
564 Computes a weak hash for 32 bytes with two seeds. @param bytes input byte array @param offset starting index in the byte array @param seedA first initial seed value @param seedB second initial seed value @param output array to store resulting hash values
565 Converts value to its long representation. @return long value of the object
566 Divides two integers with overflow protection. @param dividend the number to be divided @param divisor the number by which to divide @return the quotient of the division
567 Calculates the remainder of division. @param dividend number to be divided @param divisor number by which to divide @return remainder of the division
568 Creates a 32-bit Murmur3 hash function. @param seed initial seed value for the hash function @return HashFunction instance configured with the given seed
569 Creates a Murmur3-32 hash function with a fixed seed. @param seed initial seed value for the hash function @return HashFunction instance configured with the given seed
570 Creates a Murmur3-128 hash function. @param seed initial seed value for the hash function @return HashFunction instance configured with the given seed
571 Generates a consistent hash for an input within a specified number of buckets. @param input the input value to hash @param buckets the number of buckets to distribute the input into @return the bucket index for the input
572 Converts a byte array to an integer. @param bytes byte array containing at least 4 elements @return integer value represented by the first 4 bytes of the array
573 Copies data from an InputStream to an OutputStream. @param from source InputStream @param to destination OutputStream @return number of bytes copied
574 Reads and discards all data from the input stream. @param in InputStream to exhaust @return Total number of bytes read and discarded
575 Reads bytes from InputStream and processes them. @param input source of bytes to be read @param processor handles byte processing @return result from processor or null if not applicable @throws IOException on I/O error
576 Creates a ByteArrayDataInput from ByteArrayInputStream. @param byteArrayInputStream input stream containing byte data @return ByteArrayDataInput for reading bytes
577 Wraps ByteArrayOutputStream in ByteArrayDataOutput. @param byteArrayOutputStream underlying stream to wrap @return ByteArrayDataOutput instance
578 Initializes a stream that converts character input to bytes. @param reader source of characters @param encoder character-to-byte encoder @param bufferSize size of internal buffers
579 Starts draining the buffer, doubling its capacity if overflow is detected. @param overflow indicates if buffer overflow has occurred
580 Copies data from a readable channel to a writable channel. @param from source ReadableByteChannel @param to destination WritableByteChannel @return number of bytes copied @throws IOException if an I/O error occurs
581 Reads the next line from the input. @return the next line as a String or null if end of stream is reached @throws IOException if an I/O error occurs
582 Skips up to n bytes from the input stream. @param in InputStream to skip bytes from @param n maximum number of bytes to skip @return actual number of bytes skipped @throws IOException if an I/O error occurs
583 Returns a stream of lines from the file. @return Stream of strings representing file lines @throws IOException if an I/O error occurs
584 Reads and exhausts the content of a Readable source. @param readable the source to read from @return the total number of characters read @throws IOException if an I/O error occurs
585 Initializes a LineReader with a Readable source. @param readable the source to read from, must not be null
586 Closes an input stream quietly. @param inputStream the stream to close
587 Closes a Reader quietly. @param reader the Reader to close
588 Transfers in-memory data to a temporary file if size exceeds threshold. @param len length of new data to be added @throws IOException if an I/O error occurs during transfer
589 Resets the output stream, clearing memory and deleting the file. @throws IOException if file deletion fails
590 Converts a File to a CharSource using specified Charset. @param file the file to read from @param charset the character set to use for decoding @return CharSource representation of the file
591 Flushes the given Flushable object quietly. @param flushable the object to flush
592 Checks if insecure recursive delete is allowed. @param path the file path to be deleted @param options array of RecursiveDeleteOption @throws InsecureRecursiveDeleteException if insecure option is not set
593 Doubles the capacity of a CharBuffer. @param buf original CharBuffer to grow @return new CharBuffer with doubled capacity
594 Adds characters to the buffer and processes line endings. @param cbuf character array containing data to add @param off offset within the array to start adding from @param len number of characters to add @throws IOException if an I/O error occurs
595 Completes processing of the current line. @throws IOException if an I/O error occurs
596 Reads and returns an unsigned short value. @return the unsigned short value as an int @throws IOException if an I/O error occurs
597 Reads an integer from the input stream. @return the integer value read
598 Reads a long value from the input stream. @return the long value read @throws IOException if an I/O error occurs
599 Writes a character value as a short. @param v character to be written @throws IOException if an I/O error occurs
600 Writes a float value by converting it to an int. @param v the float value to write @throws IOException if an I/O error occurs
601 Writes a long value with reversed byte order. @param v the long value to write @throws IOException if an I/O error occurs
602 Recursively deletes a file or directory insecurely. @param path the file or directory to delete @return collection of IOExceptions encountered during deletion
603 Deletes contents of a secure directory. @param dir SecureDirectoryStream representing the directory to delete @return Collection of IOExceptions or null if no exceptions occur
604 Advances to the next resource and closes the current one. @throws IOException if an I/O error occurs
605 Advances to the next resource stream. Closes the current stream and opens the next one if available.
606 Converts URL to CharSource using specified charset. @param url source URL @param charset character encoding @return CharSource representation of the URL content
607 Divides two long numbers with specified rounding mode. @param p dividend @param q divisor @param mode rounding mode to apply @return result of division according to rounding mode
608 Computes factorial of a non-negative integer. @param n non-negative integer for factorial calculation @return factorial value or Double.POSITIVE_INFINITY if n exceeds MAX_FACTORIAL
609 Computes the power of a base to an exponent. @param b base integer @param k exponent integer, must be non-negative @return result of b raised to the power of k
610 Computes the greatest common divisor of two non-negative integers using the binary GCD algorithm. @param a first non-negative integer @param b second non-negative integer @return greatest common divisor of a and b
611 Computes factorial of a non-negative integer. @param n non-negative integer @return factorial value or Integer.MAX_VALUE if overflow
612 Computes binomial coefficient C(n, k). @param n total number of items @param k number of items to choose @return binomial coefficient or Integer.MAX_VALUE if too large
613 Computes b raised to the power of k. @param b base number @param k exponent, must be non-negative @return result of b^k
614 Computes factorial of a non-negative integer. @param n non-negative integer @return factorial of n or Long.MAX_VALUE if n is too large
615 Initializes a linear transformation with given point. @param x1 x-coordinate of the point @param y1 y-coordinate of the point @return LinearTransformationBuilder instance
616 Compares two doubles for approximate equality within a tolerance. @param a first double value @param b second double value @param tolerance maximum allowed difference @return true if values are approximately equal, false otherwise
617 Rounds a value to the nearest double using specified rounding mode. @param x value to be rounded @param mode rounding mode to apply @return rounded double value
618 Computes the smallest power of two greater than or equal to x. @param x positive integer @return smallest power of two >= x
619 Finds the largest power of two less than or equal to x. @param x positive integer @return highest power of two <= x
620 Computes the base-2 logarithm of an integer with specified rounding mode. @param x positive integer value @param mode RoundingMode to apply @return integer result of log2(x) based on rounding mode
621 Computes integer square root of x with specified rounding mode. @param x non-negative integer @param mode rounding mode to apply @return rounded square root of x
622 Adds two integers with overflow check. @param a first integer @param b second integer @return sum of a and b
623 Subtracts two integers with overflow checking. @param a minuend @param b subtrahend @return difference of a and b
624 Multiplies two integers with overflow check. @param a first integer @param b second integer @return product of a and b
625 Tests if base is a witness to the compositeness of n using Miller-Rabin primality test. @param base potential witness value @param n number being tested for primality @return false if n is composite, true if n passes this test
626 Computes the smallest power of two greater than or equal to x. @param x positive integer @return smallest power of two >= x
627 Finds the largest power of two less than or equal to x. @param x positive long value @return largest power of two <= x
628 Computes the base-2 logarithm of a number with specified rounding mode. @param x positive long value @param mode rounding mode to apply @return integer result of log2(x) based on rounding mode
629 Computes the greatest common divisor of two non-negative long integers using the binary GCD algorithm. @param a first non-negative long integer @param b second non-negative long integer @return greatest common divisor of a and b
630 Computes x modulo m. @param x dividend @param m divisor @return non-negative remainder of x divided by m
631 Adds two long numbers with overflow check. @param a first number @param b second number @return sum of a and b @throws ArithmeticException if overflow occurs
632 Subtracts two long numbers with overflow check. @param a minuend @param b subtrahend @return difference or throws ArithmeticException if overflow occurs
633 Multiplies two long numbers with overflow check. @param a first multiplicand @param b second multiplicand @return product of a and b
634 Returns the total count of items. @return The number of items counted.
635 Compares this PairedStats object to another for equality. @param obj the object to compare with @return true if equal, false otherwise
636 Constructs a new instance of PairedStatsAccumulator.
637 Calculates new mean considering non-finite values. @param previousMean current mean value @param value new value to include in mean calculation @return updated mean, handling infinities and NaN appropriately
638 Returns the total count of items. @return number of items in the collection
639 Returns a ScaleAndIndex with scale 2 and index 1. @return ScaleAndIndex object configured with specified values
640 Creates a quartile scale. @return Scale with 4 divisions
641 Creates a scale with 100 percentiles. @return Scale object configured for 100 percentiles
642 Moves pivot element to start of slice for partitioning. @param array the array to be processed @param from starting index of the slice @param to ending index of the slice
643 Reads stats from a ByteBuffer. @param buffer source ByteBuffer with stats data @return Stats object populated from the buffer
644 Returns a snapshot of current statistics. @return Stats object containing count, mean, sum of squares of deltas, min, and max
645 Returns the configured port number. Throws an exception if no port is set. @return the port number
646 Returns the port number if available; otherwise, returns the default port. @param defaultPort the default port to use if no specific port is set @return the actual port or the default port
647 Returns a string representation of the host and port. @return formatted string like "host:port" or "[host]:port"
648 Returns a HostAndPort with the default port if none is set. @param defaultPort the port to use if not already specified @return a HostAndPort instance with the specified default port
649 Converts InetAddress to string representation. @param ip the IP address to convert @return formatted IPv4 or IPv6 address string
650 Checks if an IPv6 address is an ISATAP address. @param ip the Inet6Address to check @return true if the address is ISATAP, false otherwise
651 Checks if an Inet6Address contains an embedded IPv4 address. @param ip the Inet6Address to check @return true if the address has an embedded IPv4, false otherwise
652 Converts a Collection<Boolean> to a boolean[]. @param collection the input collection of Boolean objects @return a primitive boolean array containing the elements of the collection
653 Finds index of target in boolean array. @param array boolean array to search @param target value to find @return index of target or -1 if not found
654 Finds the last index of the target value in the array. @param array the boolean array to search @param target the boolean value to find @return the last index of target or -1 if not found
655 Converts a collection of numbers to a byte array. @param collection the input collection of numbers @return byte array representation of the collection
656 Finds index of target byte in byte array. @param array byte array to search @param target byte value to find @return index of first occurrence or -1 if not found
657 Finds the last index of a target byte in an array. @param array the byte array to search @param target the byte value to find @return the last index of the target or -1 if not found
658 Converts a Collection of Character to a char array. @param collection the input Collection of Character @return char array containing elements from the collection
659 Finds index of target character in array. @param array character array to search @param target character to find @return index of first occurrence or -1 if not found
660 Finds the last index of a character in an array. @param array the character array to search @param target the character to find @return the last index of target or -1 if not found
661 Converts a byte array to a character. @param bytes byte array with at least two elements @return character representation of the first two bytes
662 Generates a hash code based on array elements. @return computed hash code
663 Converts a collection of Numbers to a double array. @param collection the input collection of Numbers @return a double array containing the values from the collection
664 Searches for the index of a target value in a double array. @param array the array to search through @param target the value to find @return the index of the first occurrence of target, or -1 if not found
665 Finds the last index of the target value in the array. @param array the array to search @param target the value to find @return the last index of target or -1 if not found
666 Converts a collection of numbers to a float array. @param collection the input collection of numbers @return a float array containing the elements of the collection
667 Finds index of target in array. @param array to search within @param target value to find @return index of target or -1 if not found
668 Finds the last index of target in the array. @param array the array to search @param target the value to find @return the last index of target or -1 if not found
669 Creates a new Builder with specified initial capacity. @param initialCapacity the initial capacity of the builder @return a new Builder instance
670 Returns a new Builder instance with an initial capacity of 10. @return Builder object initialized with default capacity
671 Finds index of target in array slice. @param target value to search for @return offset index or -1 if not found
672 Finds the last index of a target value within a specified range. @param target value to search for @return relative index of the target or -1 if not found
673 Returns a string representation of the array. @return String in the format "[element1, element2, ..., elementN]" or "[]" if empty
674 Checks if the list contains the specified element. @param target element to search for @return true if the element is present, false otherwise
675 Creates a new Builder with specified initial capacity. @param initialCapacity the initial capacity of the builder @return a new Builder instance
676 Creates a new Builder instance with initial capacity. @param initialCapacity starting size for the builder @return Builder object initialized with given capacity
677 Generates a hash code based on array elements within specified range. @param start starting index of the range @param end ending index of the range (exclusive) @return computed hash code
678 Returns a string representation of the array slice. @return String in "[element1, element2, ...]" format or "[]" if empty
679 Checks if the list contains the specified target. @param target value to search for @return true if target is found, false otherwise
680 Creates a new Builder with an initial capacity. @param initialCapacity the starting size of the collection @return Builder instance initialized with given capacity
681 Creates a new Builder instance with an initial capacity of 10. @return Builder object initialized with default capacity
682 Generates a hash code for the array segment. @return computed hash code
683 Returns a string representation of the list. @return A comma-separated string enclosed in brackets
684 Converts a collection of numbers to an int array. @param collection the source collection @return int array containing converted values
685 Finds index of target in array. @param array the array to search @param target the value to find @return index of target or -1 if not found
686 Finds the last index of the target in the array. @param array the array to search @param target the value to find @return the last index of target or -1 if not found
687 Converts a collection of Numbers to a long array. @param collection the input collection of Numbers @return a long array containing the values from the collection
688 Searches for the index of a target value in a long array. @param array the array to search @param target the value to find @return the index of the target or -1 if not found
689 Finds the last index of a target value in an array. @param array the array to search @param target the value to find @return the last index of target or -1 if not found
690 Parses a string into a long integer with a specified radix. @param string the string to parse @param radix the base of the number system @return parsed Long value or null if parsing fails
691 Converts a collection of numbers to a short array. @param collection the input collection of numbers @return a short array containing the values from the collection
692 Finds index of target in array. @param array the array to search @param target the value to find @return index of target or -1 if not found
693 Finds the last index of a target value in a short array. @param array the short array to search @param target the value to find @return the last index of the target or -1 if not found
694 Converts a byte array to a short value. @param bytes byte array with at least 2 elements @return short value derived from the first two bytes
695 Returns the best byte array comparator available. @return Comparator for comparing byte arrays
696 Creates an UnsignedInteger from int bits. @param bits integer bits representation @return UnsignedInteger instance
697 Converts the integer value to a string representation in the specified radix. @param radix the base to use for conversion (e.g., 2 for binary) @return the string representation of the value in the given radix
698 Converts an integer to its string representation in base 10. @param x the integer to convert @return string representation of the integer
699 Compares two integers with reversed sign. @param a first integer @param b second integer @return comparison result of flipped integers
700 Creates an UnsignedLong from its bit representation. @param bits long value representing the unsigned long bits @return UnsignedLong instance
701 Compares two long values. @param a first value to compare @param b second value to compare @return negative if a is less, positive if greater, zero if equal
702 Parses a string as an unsigned long in the specified radix. @param string the string to parse @param radix the base of the number system @return parsed unsigned long value
703 Handles method invocations on a proxy object. @param proxy the proxy instance @param method the method being invoked @param args arguments to the method @return result of the method invocation or default behavior @throws Throwable if an error occurs during invocation
704 Retrieves the package name of the class. @return Package name as a String
705 Retrieves the package name of a given class. @param clazz the Class object to inspect @return the package name as a String
706 Converts URL to ByteSource. @return ByteSource representation of the URL
707 Checks if the class is publicly accessible. @return true if the class is public, false otherwise
708 Checks if the method is protected. @return true if the method is protected, false otherwise
709 Checks if the class is private. @return true if the class is private, false otherwise
710 Checks if the method is static. @return true if the method is static, false otherwise
711 Checks if this class is declared as final. @return true if the class is final, false otherwise
712 Checks if the class is abstract. @return true if the class is abstract, false otherwise
713 Checks if the method is native. @return true if the method is native, false otherwise
714 Checks if the method is synchronized. @return true if the method is synchronized, false otherwise
715 Checks if the field is volatile. @return true if the field is volatile, false otherwise
716 Checks if the field is marked as transient. @return true if the field is transient, false otherwise
717 Checks if this type is equal to a given type. @param type the type to compare with @return true if types are equal, false otherwise
718 Creates a TypeToken instance from a Class. @param type the Class to create a TypeToken for @return a TypeToken representing the specified class
719 Creates a TypeToken instance from a given Type. @param type the Type to be wrapped @return a TypeToken representing the provided Type
720 Retrieves the completed value or throws an exception based on object type. @param obj the result object to process @return the completed value if successful @throws ExecutionException if there was a failure during execution
721 Adds a listener to be executed upon completion. @param listener the Runnable to execute @param executor the Executor to run the listener on
722 Propagates cancellation to a related future if this one is cancelled. @param related the future to potentially cancel
723 Submits a callable task for execution and returns a future. @param task the callable task to execute @return a ListenableFuture representing the pending result of the task
724 Schedules a task to be run by a service. @param service the service to execute the task @param executor the executor service managing the scheduling @param runnable the task to be scheduled @return Cancellable object to manage the task's lifecycle
725 Schedules a task to run with a given service and executor. @param service the service to associate with the task @param executor the executor to use for scheduling @param runnable the task to be executed @return Cancellable object to manage the scheduled task
726 Invokes all tasks with a specified timeout. @param tasks collection of callable tasks @param timeout maximum time to wait for task completion @return list of futures representing task results @throws InterruptedException if the current thread is interrupted
727 Executes any of the given tasks within a specified timeout. @param tasks collection of Callable tasks @param timeout maximum time to wait for task completion @return result of one of the completed tasks @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within timeout
728 Awaits termination for a specified duration. @param timeout maximum time to wait @return true if terminated, false if timed out @throws InterruptedException if interrupted while waiting
729 Schedules a task with a specified delay. @param callable the task to execute @param delay duration until execution @return ListenableScheduledFuture for the scheduled task
730 Schedules a task to run at fixed intervals. @param command the task to execute @param initialDelay delay before first execution @param period interval between subsequent executions @return ListenableScheduledFuture representing scheduled task
731 Schedules a task with fixed delay. @param command the task to execute @param initialDelay time before first execution @param delay time between subsequent executions @return ListenableScheduledFuture representing scheduled task
732 Waits until the service is running within the specified timeout. @param timeout maximum time to wait @throws TimeoutException if not running within the timeout
733 Waits for termination within specified timeout. @param timeout maximum time to wait @throws TimeoutException if not terminated within timeout
734 Creates a new proxy with a specified timeout. @param target the original object to proxy @param interfaceType the interface type for the proxy @param timeout duration before timing out @return proxy instance with timeout
735 Executes a task with a specified timeout. @param callable the task to execute @param timeout duration for the timeout @return result of the callable or throws exception if timed out
736 Executes a callable with a specified timeout. @param callable task to execute @param timeout maximum time to wait for completion @return result of the callable or throws TimeoutException if timed out
737 Executes a task with a specified timeout. @param runnable the task to execute @param timeout maximum time to wait for task completion @throws TimeoutException if task exceeds timeout @throws InterruptedException if thread is interrupted while waiting
738 Executes a task with a specified timeout without interruption. @param runnable the task to execute @param timeout maximum time to wait for task completion @throws TimeoutException if the task exceeds the timeout period
739 Creates and returns a single-threaded scheduled executor with custom thread naming. Adds listeners to shut down the executor on service termination or failure. @return ScheduledExecutorService instance
740 Handles exceptions by setting them as results or logging them if necessary. @param throwable the exception to handle
741 Returns string representation of the double value. @return string form of the double value
742 Returns the integer value of the current setting. @return integer representation of the setting
743 Returns the long value of the stored number. @return long representation of the number
744 Returns the float value of the underlying data. @return float representation of the data
745 Returns the numeric value. @return numeric value as double
746 Serializes the object using custom logic. @param s ObjectOutputStream to serialize data @throws IOException if I/O error occurs
747 Reads object from input stream. @param s ObjectInputStream to read from @throws IOException if I/O error occurs @throws ClassNotFoundException if class not found during reading
748 Retrieves and accumulates the value using a binary operator. @param x value to accumulate with @param accumulatorFunction function to apply for accumulation @return updated value after accumulation
749 Accumulates and gets a new value. @param x the value to be accumulated @param accumulatorFunction the function that defines the accumulation operation @return the updated value after accumulation
750 Converts the list of long bits to a string representation of double values. @return String representation of double values in brackets, separated by commas
751 Custom serialization method for writing object state to stream. Writes default fields, array length, and all elements in order.
752 Atomically accumulates a value at the specified index. @param i index of the array element to update @param x value to accumulate with @param accumulatorFunction function that defines how to accumulate values @return updated value after accumulation
753 Updates element at index with accumulated value. @param i index of the element to update @param x value to accumulate @param accumulatorFunction function defining accumulation logic @return updated value after accumulation
754 Removes entry if its value is zero. @param key key of the entry to check and potentially remove @return true if an entry was removed, false otherwise
755 Returns the map representation of the counter. @return Map containing keys and their corresponding counts
756 Replaces value for a key if it matches the expected old value. @param key key to replace value for @param expectedOldValue expected current value of the key @param newValue new value to set @return true if successful, false otherwise
757 Completes the operation and returns a future. @return FluentFuture representing the completion status
758 Finishes the step by providing a value and closer. @param consumer handles the value and closer @param executor to run the listener
759 Adds a Runnable to be executed by an Executor. @param runnable task to be executed @param executor executes the runnable
760 Executes all pending runnables in reverse order. Ensures thread safety during execution.
761 Handles exceptions asynchronously. @param <X> type of exception to catch @param exceptionType class of the exception to handle @param fallback function to execute on exception @param executor executor to run the fallback @return FluentFuture with result from fallback or original future
762 Transforms future result asynchronously. @param function async transformation function @param executor execution context @return new FluentFuture with transformed result
763 Returns a ListenableFuture that immediately returns the given value. @param <V> type of the future's result, which can be null @param value the result to be returned by the future @return a ListenableFuture with the specified value or NULL if value is null
764 Creates an immediately failed future. @param throwable the exception to associate with the failure @return a ListenableFuture that is already failed
765 Returns an immediately cancelled ListenableFuture. @param <V> the value type of the future @return a cancelled ListenableFuture instance
766 Retrieves the best validator for checked types. @return GetCheckedTypeValidator instance or default if class not found
767 Notifies all registered listeners. Iterates through listeners using index to prevent concurrent modification issues.
768 Constructs a new Monitor with default settings. @param active flag indicating whether monitoring is active
769 Attempts to acquire semaphore interruptibly within specified duration. @param time maximum time to wait @return true if acquired, false if timed out @throws InterruptedException if interrupted while waiting
770 Attempts to acquire a permit with interruption support. @param guard the condition to wait for @param time maximum time to wait @return true if acquired, false if timed out @throws InterruptedException if interrupted while waiting
771 Checks if there are any waiters in the queue. @param guard the Guard object to check @return true if there are waiters, false otherwise
772 Checks if the guard condition is satisfied. @param guard the guard object to check @return true if satisfied, false otherwise
773 Shuts down ExecutorService and waits for termination within a timeout. @param service the ExecutorService to shut down @param timeout maximum time to wait for termination @return true if shutdown was successful, false otherwise
774 Sleeps for the specified duration uninterruptibly. @param sleepFor duration to sleep
775 Sets the rate of permits per second. @param permitsPerSecond new rate, must be positive
776 Retrieves the rate value. @return the current rate as a double
777 Creates and returns a new SettableFuture instance. @param <V> the type of value to be set in the future @return a new SettableFuture object
778 Retrieves result from Future without interruption. @param future task to wait for completion @param timeout maximum time to wait @return result of the Future @throws ExecutionException if computation threw an exception @throws TimeoutException if timed out
779 Creates a striped read-write lock with weak references. @param stripes number of stripes @return Striped<ReadWriteLock> instance
780 Creates a striped lock with specified number of stripes. @param stripes number of lock stripes @return Striped<Lock> instance
781 Creates a striped semaphore with specified number of stripes and permits. @param stripes number of stripes for concurrency control @param permits number of permits per semaphore @return Striped<Semaphore> instance
782 Creates a striped ReadWriteLock. @param stripes number of lock stripes @return Striped instance with specified number of locks
783 Builds and returns a new ThreadFactory instance. @return configured ThreadFactory object
784 Creates a TrustedListenableFutureTask from a Runnable and result. @param runnable the task to execute @param result the result value of the future @return a TrustedListenableFutureTask instance
785 Waits for CountDownLatch to count down uninterruptibly. @param latch the CountDownLatch to wait on @param timeout maximum time to wait @return true if countdown completes within timeout, false otherwise
786 Awaits a condition for a specified duration without interruption. @param condition the condition to await @param timeout the maximum time to wait @return true if the condition was met, false otherwise
787 Attempts to acquire a semaphore permit uninterruptibly. @param semaphore the semaphore to acquire @param timeout maximum time to wait for a permit @param unit time unit of the timeout @return true if acquired, false if timed out
788 Attempts to acquire specified permits from semaphore uninterruptibly within a timeout. @param semaphore the semaphore to acquire permits from @param permits number of permits to acquire @param timeout maximum time to wait for acquisition @return true if permits acquired, false otherwise
789 Attempts to acquire a lock uninterruptibly within a specified timeout. @param lock the lock to acquire @param timeout maximum time to wait for the lock @return true if the lock was acquired, false otherwise
790 Awaits termination of the given executor within a specified timeout. @param executor the ExecutorService to wait for @param timeout maximum time to wait @return true if the executor terminated, false otherwise
791 Retrieves PublicSuffixType by its code. @param code character representing the suffix type @return matching PublicSuffixType or throws IllegalArgumentException if not found
792 Wraps a non-null value in an Optional. @param reference value to wrap, must not be null @return Optional containing the reference
793 Creates an unstarted Stopwatch with a specified Ticker. @param ticker the time source for the stopwatch @return a new, unstarted Stopwatch instance
794 Finds index of first element matching predicate. @param iterable collection to search @param predicate condition to match elements @return index of matching element or -1 if none found
795 Checks if any element in the iterator matches the given predicate. @param iterator the iterator to check @param predicate the condition to test elements against @return true if at least one element matches the predicate, false otherwise
796 Creates a builder with natural ordering for values. @return SortedSetMultimapBuilder configured with natural ordering
797 Collects elements into an ImmutableTable. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @param mergeFunction merges values if duplicate keys occur @return ImmutableTable with collected data
798 Creates a predicate to check equivalence. @param target object to compare against @return Predicate that checks if input is equivalent to target
799 Creates a function that returns values from a map with a default. @param map the input map @param defaultValue value to return if key is not found @return Function that maps keys to values or default
800 Composes two functions into one. @param g function from B to C @param f function from A to B @return composed function from A to C
801 Returns a function that retrieves values from the given map. @param map source map to query @return Function that maps keys to values in the map
802 Creates a splitter using a regex pattern. @param separatorPattern regex pattern for splitting strings @return Splitter instance configured with the given pattern
803 Creates a Joiner instance with the specified separator. @param separator string used to separate joined elements @return Joiner object configured with the given separator
804 Creates a Joiner instance with a specified separator. @param separator character used to separate elements @return Joiner object configured with the given separator
805 Sets text to use for null values. @param nullText replacement string for nulls @return new MapJoiner instance with updated settings
806 Creates a splitter using regex pattern. @param separatorPattern regex defining separators @return Splitter instance configured with the pattern
807 Creates a predicate to check if a CharSequence contains a regex pattern. @param pattern the regex pattern to search for @return Predicate that returns true if input contains the pattern, false otherwise
808 Returns a predicate that negates the result of the given predicate. @param predicate the original predicate to negate @return a predicate that returns true if the original predicate returns false, and vice versa
809 Combines multiple predicates with logical AND. @param components iterable of predicates to combine @return a predicate that evaluates to true if all components are true
810 Combines multiple predicates with logical OR. @param components iterable of predicate components @return a predicate that returns true if any component predicate is true
811 Splits a sequence into a map of key-value pairs. @param sequence input string to split @return unmodifiable map with keys and values
812 Splits CharSequence into a stream of strings. @param sequence input to be split @return Stream of substrings
813 Memoizes a supplier to cache its result. @param delegate the original supplier @return memoized supplier, same type as input
814 Composes a Supplier by applying a Function to the result of another Supplier. @param <F> type of input to the Function @param <T> type of output from the Function and Supplier @param function to apply to the value from supplier @param supplier provides the input value for the function @return Supplier that applies function to the result of supplier
815 Wraps a supplier to ensure thread-safe execution. @param delegate original supplier function @return synchronized Supplier instance
816 Propagates the exception if it is an instance of the specified type. @param throwable the throwable to check @param declaredType the class of the exception to propagate @throws X if the throwable is an instance of the declared type
817 Throws the given exception if it's unchecked; otherwise, suppresses it. @param throwable the exception to handle
818 Throws the given Throwable as a RuntimeException. @param throwable the Throwable to throw
819 Returns a lazy-loaded stack trace for the given Throwable. @param throwable the exception to get the stack trace from @return List of StackTraceElement representing the stack trace
820 Creates a new entry in the specified segment. @param key the key for the new entry @param hash the hash code of the key @param next reference to the next entry @return the newly created ReferenceEntry object
821 Creates a removal notification. @param key the removed key @param value the removed value @param cause the reason for removal @return RemovalNotification instance
822 Collects elements into a Multiset. @param elementFunction extracts the element from each input @param countFunction determines the count for each element @param multisetSupplier supplies the Multiset instance @return Collector that groups elements into a Multiset
823 Collects elements into a Multimap using key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @param multimapSupplier provides a new Multimap instance @return Collector to group elements by keys into a Multimap
824 Collects elements into a Multimap using key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts a stream of values for each element @param multimapSupplier provides the type of Multimap to use @return Collector that collects elements into a Multimap
825 Transforms elements of a collection using a given function. @param fromCollection original collection of elements @param function transformation function to apply to each element @return new collection with transformed elements
826 Checks if an iterable contains a specified element. @param iterable the iterable to search within @param element the element to look for @return true if element is found, false otherwise
827 Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive) toElement. @param toElement upper bound element @param inclusive true if the upper bound is inclusive @return ContiguousSet containing elements less than (or equal to) toElement
828 Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive) fromElement. @param fromElement lower bound element @param inclusive true if fromElement is included in the returned set @return ContiguousSet containing elements greater than or equal to fromElement
829 Offers an element to this collection. @param e the element to offer @return true if the element was added, false otherwise
830 Orders keys using the provided comparator. @param keyComparator comparator for ordering keys @return this builder instance
831 Orders keys using provided comparator. @param keyComparator comparator for key ordering @return this builder instance
832 Orders entries by values using a comparator. @param valueComparator comparator for ordering values @return this builder instance
833 Adds an element to the collection. @param element the element to add @return the current builder instance
834 Adds multiple copies of an element to the collection. @param element the element to add @param occurrences number of times to add the element @return this Builder instance
835 Sets the count for an element. @param element the element to set the count for @param count the count to set @return the Builder instance
836 Collects elements into an immutable sorted multiset. @param comparator ordering for the elements @return ImmutableSortedMultiset with sorted elements
837 Returns elements less than the specified element. @param toElement upper bound (exclusive) @return ImmutableSortedSet of elements less than toElement
838 Returns a view of the portion of this set whose elements are greater than or equal to fromElement. @param fromElement the lower bound (inclusive) @return a subset containing elements greater than or equal to fromElement
839 Creates an infinite iterable that cycles through elements. @return FluentIterable cycling through elements indefinitely
840 Filters elements using a predicate. @param predicate condition to filter elements @return FluentIterable of filtered elements
841 Filters elements of an iterable by a specified type. @param unfiltered the iterable to filter @param desiredType the class type to filter by @return an iterable containing only elements of the specified type
842 Transforms elements using given function. @param function transformation function @return FluentIterable of transformed elements
843 Wraps an iterator to provide a peeking capability. @param iterator the underlying iterator @return a PeekingIterator instance
844 Removes all occurrences of specified elements from the given iterable. @param removeFrom iterable to remove elements from @param elementsToRemove collection of elements to be removed @return true if any element was removed, false otherwise
845 Removes elements matching the predicate from the iterable. @param removeFrom iterable to remove elements from @param predicate condition for removal @return true if any element was removed, false otherwise
846 Retains only the elements in removeFrom that are contained in elementsToRetain. @param removeFrom iterable to be modified @param elementsToRetain collection of elements to retain @return true if removeFrom was modified, false otherwise
847 Adds all elements from the specified collection to this set. @param collection source collection of elements @return true if this set was modified as a result of the call
848 Adds all elements from the specified iterable to the collection. @param addTo target collection to add elements to @param elementsToAdd iterable of elements to add @return true if any element was added, false otherwise
849 Creates an ArrayList from an iterator. @param elements iterator of elements to add @return ArrayList containing the elements
850 Creates a HashSet from an iterator. @param elements iterator of elements to add @return HashSet containing the provided elements
851 Filters iterator to include only elements of the specified type. @param unfiltered source iterator containing mixed types @param desiredType class type to filter by @return UnmodifiableIterator with elements of desiredType
852 Checks if all elements in the iterable satisfy the predicate. @param iterable collection of elements to check @param predicate condition to test each element against @return true if all elements match the predicate, false otherwise
853 Finds first element matching predicate in iterable. @param iterable collection to search @param predicate condition to match elements @return first matching element or null if none found
854 Removes all nodes associated with the given key. @param key unique identifier for nodes to be removed
855 Returns a list iterator over the specified list starting at the given index. @param list the list to iterate over @param index the starting index for iteration @return ListIterator for the provided list
856 Creates a list from the given element and array. @param first the first element of the list @param rest additional elements in array form @return a List containing the first element and all elements in rest
857 Transforms elements of a list using a given function. @param fromList original list to transform @param function transformation function for each element @return new list with transformed elements
858 Creates a list from the given elements. @param first first element of the list @param second second element of the list @param rest array of remaining elements @return List containing all provided elements
859 Converts a set to a map using a mapping function. @param set the source set of keys @param function maps each key to its corresponding value @return a Map view backed by the set and function
860 Creates a navigable map from a set using a function to generate values. @param set the source navigable set of keys @param function the function mapping keys to values @return a navigable map view of the set
861 Transforms entries of a map using a given transformer. @param fromMap original map with keys of type K and values of type V1 @param transformer function to transform entries from V1 to V2 @return new map with transformed values of type V2
862 Checks if the collection contains a specific entry. @param c collection of entries to check @param o object to check for equality with an entry in the collection @return true if the collection contains the specified entry, false otherwise
863 Removes an entry from a collection. @param c collection of entries @param o object to remove, must be an instance of Entry @return true if the entry was removed, false otherwise
864 Counts occurrences of an element. @param element the element to count @return number of times the element occurs
865 Removes a specified number of occurrences of an element from the collection. @param element the element to remove @param occurrences the number of times to remove the element @return true if successful, false if not enough occurrences were found
866 Sets the count for an element in the map. @param element the element to set the count for @param count the new count value @return the old count value or 0 if no entry existed
867 Updates element's count atomically if old count matches expected value. @param element the element to update @param expectedOldCount the expected current count @param newCount the new count to set @return true if update successful, false otherwise
868 Removes all values associated with a given key. @param key the key whose values are to be removed
869 Creates a builder for a multimap with natural ordering of keys. @return Builder configured to use natural key ordering
870 Creates a SetMultimap from a given map. @param map the input map to convert @return a SetMultimap containing key-value pairs from the map
871 Transforms entries of a multimap. @param fromMap original multimap with keys and values @param transformer function to transform values @return new multimap with transformed values
872 Adds all elements from the given iterable. @param elements iterable containing elements to add @return this builder instance
873 Adds all elements from another multiset to this one. @param self the target multiset @param elements the source multiset containing elements to add @return true if any element was added, false if the source is empty
874 Retains only the elements in multisetToModify that are also in multisetToRetain. @param multisetToModify the multiset to modify @param multisetToRetain the multiset of elements to retain @return true if any elements were removed, false otherwise
875 Removes all occurrences of elements in one collection from another. @param multisetToModify the multiset to modify @param occurrencesToRemove the iterable containing elements to remove @return true if any element was removed, false otherwise
876 Retains only the specified elements in this multiset. @param elementsToRetain collection of elements to retain @return true if this multiset was modified as a result of the call
877 Transfers elements from queue to collection with a timeout. @param q source queue @param buffer destination collection @param numElements max number of elements to transfer @param timeout maximum time to wait @return number of elements transferred @throws InterruptedException if interrupted while waiting
878 Drains elements from a queue into a collection uninterruptibly. @param q source BlockingQueue to drain elements from @param buffer destination Collection to add drained elements @param numElements max number of elements to transfer @param timeout maximum time to wait for elements @return number of elements actually transferred
879 Checks if collection contains specified element. @param input element to check @return true if element is present, false otherwise
880 Checks if all elements in the given iterable are contained. @param values iterable of elements to check @return true if all elements are present, false otherwise
881 Applies a BiConsumer to each pair of elements from two streams. @param streamA first stream of elements @param streamB second stream of elements @param consumer action to perform on each pair of elements
882 Collects elements into a table. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @param mergeFunction merges values if there are conflicts @param tableSupplier provides the table implementation @return Table with collected elements
883 Transforms values in a table using a specified function. @param fromTable original table with values to transform @param function transformation function for values @return new Table with transformed values
884 Transposes a given table. @param table input Table to be transposed @return transposed Table with rows and columns swapped
885 Creates an ArrayBasedEscaperMap from character replacements. @param replacements map of characters to their replacement strings @return ArrayBasedEscaperMap instance
886 Adds escape sequences for specified characters. @param cs array of characters to escape @param r replacement string for escapes @return CharEscaperBuilder instance for method chaining
887 Finds the next index to escape in a CharSequence. @param csq the CharSequence to search @param start starting index for the search @param end ending index for the search @return index of the next character to escape, or end if none found
888 Creates an exception context for a subscriber. @param event the event causing the exception @return SubscriberExceptionContext object
889 Creates a funnel for processing iterables sequentially. @param elementFunnel funnel for individual elements @return SequentialFunnel instance
890 Converts a PrimitiveSink to an OutputStream. @param sink the PrimitiveSink to wrap @return OutputStream wrapping the given sink
891 Creates a funnel for CharSequences using specified charset. @param charset character set to use @return Funnel object for CharSequence
892 Converts an Appendable to a Writer. @param target the Appendable to convert @return a Writer instance, either the original or wrapped in AppendableWriter
893 Decodes a CharSequence to a byte array. @param chars input characters to decode @return decoded byte array @throws DecodingException if decoding fails
894 Creates a new Closer instance with suppressing suppressor. @return Closer object configured to suppress exceptions
895 Constructs a filter using a regex pattern. @param patternStr regular expression string to match filenames
896 Computes the base-2 logarithm of a BigInteger with specified rounding mode. @param x the BigInteger to compute the log for, must be positive @param mode the RoundingMode to apply @return the computed logarithm as an integer
897 Parses an unsigned byte from a string. @param string the string to parse @return parsed unsigned byte value
898 Parses a string as an unsigned decimal integer. @param s string to be parsed @return parsed integer value
899 Creates a TypeVariableKey for lookup. @param t the type to check @return TypeVariableKey if t is a TypeVariable, otherwise null
900 Retrieves the value from a ListenableFuture. Handles different types of futures and exceptions. @param future the future to retrieve the value from @return the result or a wrapped exception if failed
901 Constructs a schedule with a specified delay. @param delay duration of the delay before execution
902 Creates an AtomicLongMap with a ConcurrentHashMap. @return AtomicLongMap instance backed by ConcurrentHashMap
903 Accumulates value for a key using the provided function. @param key key with which the accumulated value is to be associated @param x value to be accumulated @param accumulatorFunction function that defines how to accumulate values @return updated value after accumulation
904 Atomically accumulates a value for the given key. @param key key with which the specified value is to be associated @param x value to accumulate @param accumulatorFunction function defining how to accumulate values @return updated value after accumulation
905 Updates the value associated with the given key. @param key the key to update @param newValue the new value to set @return the previous value associated with the key
906 Schedules a closable resource to be closed by an executor. @param closeable the resource to close @param closingExecutor executor to perform the closure @return the original closeable resource
907 Creates a new instance of CycleDetectingLockFactory. @param policy locking policy to be applied @return CycleDetectingLockFactory with the specified policy
908 Creates a sequential executor using a delegate. @param delegate the underlying executor to use @return a SequentialExecutor instance
909 Creates a SimpleTimeLimiter with the given ExecutorService. @param executor the ExecutorService to use @return a new SimpleTimeLimiter instance
910 Waits for thread completion with a timeout. @param toJoin the thread to wait for @param timeout maximum time to wait
911 Returns an unordered element order. @return ElementOrder instance with unordered type and null comparator
912 Returns a stable element order. @return ElementOrder instance with stable ordering
913 Creates an ElementOrder with INSERTION type. @return ElementOrder instance configured for insertion ordering
914 Returns an ElementOrder with natural ordering. @param <S> type of elements, must be comparable @return ElementOrder configured for natural sorting
915 Creates a sorted element order with a given comparator. @param comparator used to sort elements @return ElementOrder object configured for sorting
916 Returns a countdown latch that triggers when the resource is closed. @return CountDownLatch instance
917 Converts CharSequence to lowercase. @param chars input character sequence @return lowercase string representation
918 Converts CharSequence to uppercase. @param chars input character sequence @return uppercase string representation
919 Converts object data to byte array. @return byte array representation of the object's fields
920 Converts object to byte array in little-endian format. @return byte array representation of the object
921 Initializes the data structure with an expected size. @param expectedSize estimated number of elements to store
922 Initializes the data structure with an expected size. @param expectedSize the anticipated number of elements
923 Returns a matcher that matches characters accepted by both this and another matcher. @param other the second matcher to combine with @return a new CharMatcher that accepts only characters matching both matchers
924 Creates a CharMatcher from a Predicate. @param predicate character matching condition @return CharMatcher instance
925 Returns a CharMatcher that matches any character matched by either this or another matcher. @param other the other CharMatcher to combine with @return a new CharMatcher representing the union of both matchers
926 Creates a matcher that matches characters within a specified range. @param startInclusive the inclusive lower bound of the range @param endInclusive the inclusive upper bound of the range @return CharMatcher for the character range
927 Subtracts another CacheStats from this one. @param other CacheStats to subtract @return new CacheStats with results of subtraction
928 Combines statistics from another CacheStats instance. @param other the CacheStats to add @return new CacheStats with combined values
929 Constructs an AbstractListMultimap with the given backing map. @param map the backing map to store key-value pairs
930 Constructs an AbstractSetMultimap with the specified backing map. @param map the backing map to use
931 Returns a view of the portion of this set whose elements range from fromElement to toElement. @param fromElement lower bound (inclusive) @param fromInclusive true if the fromElement is included in the subSet @param toElement upper bound (exclusive) @param toInclusive true if the toElement is included in the subSet @return a ContiguousSet containing elements within the specified range
932 Creates an EnumMultiset for the specified enum type. @param type the Class object of the enum type @return a new EnumMultiset instance for the given enum type
933 Returns a subset of elements from `fromElement` (inclusive) to `toElement` (exclusive). @param fromElement the lower bound element (inclusive) @param toElement the upper bound element (exclusive) @return ImmutableSortedSet containing elements in the specified range
934 Partitions an iterator into lists of a given size. @param iterator source iterator to partition @param size maximum size of each list @return UnmodifiableIterator of lists containing elements from the iterator
935 Partitions an iterator into fixed-size lists, padding the last list if necessary. @param iterator source iterator of elements @param size desired size of each partition @return UnmodifiableIterator of Lists containing partitioned elements
936 Creates a builder with an expected size. @param expectedSize the anticipated number of elements @return Builder instance configured for Comparable types
937 Creates a builder with natural ordering and a specified maximum size. @param maximumSize the maximum number of elements allowed @return Builder configured for Comparable types
938 Initializes hasher with specified chunk size. @param chunkSize size of data chunks to process
939 Calculates population variance. @return variance value or NaN if sum of squares is not a number
940 Calculates the sample variance of the dataset. @return sample variance as a double, or NaN if data is insufficient
941 Calculates population variance. @return population variance as a double
942 Calculates the sample variance of the dataset. @return sample variance as a double, or NaN if not calculable
943 Returns a CharMatcher that matches any character in the given sequence. @param sequence characters to match @return CharMatcher object matching any character in sequence
944 Trims and collapses a character sequence. @param sequence the input character sequence to process @param replacement the character used to replace trimmed characters @return processed string with leading/trailing matching characters replaced
945 Creates an equivalence based on a transformation function. @param function the transformation function to apply @return a new Equivalence instance using the transformed values
946 Returns an equivalence relation over iterables of elements. @param <S> subtype of T, where nullability is preserved @return Equivalence object for pairwise comparison of iterables
947 Checks if two iterables have equal elements in the same order. @param iterable1 first iterable to compare @param iterable2 second iterable to compare @return true if elements are equal, false otherwise
948 Compares two lists for equality. @param thisList the first list to compare @param other the object to compare with the first list @return true if both lists are equal, false otherwise
949 Creates a new ConcurrentHashMultiset using ConcurrentHashMap. @return ConcurrentHashMultiset instance
950 Creates a ConcurrentHashMultiset from a given count map. @param countMap map with elements as keys and their counts as values @return ConcurrentHashMultiset instance initialized with the provided map
951 Appends elements from an iterable to an appendable. @param appendable destination for appended content @param parts iterable containing elements to append @return the appendable with appended content @throws IOException if an I/O error occurs
952 Appends elements from iterator to StringBuilder. @param builder target StringBuilder to append to @param parts iterator of elements to append @return the modified StringBuilder
953 Appends map entries to StringBuilder. @param builder target StringBuilder @param map source map with key-value pairs @return the modified StringBuilder instance
954 Joins entries into a single string. @param entries iterable collection of entries to join @return concatenated string of entry values
955 Adds a value to the string representation. @param value object to be added @return this ToStringHelper instance
956 Adds a named field with its value to the string representation. @param name the field name @param value the field value, can be null @return this ToStringHelper instance for chaining
957 Adds a boolean value to the string representation. @param value the boolean value to add @return this ToStringHelper instance for chaining
958 Adds a character value to the string representation. @param value character to be added @return this instance for chaining
959 Adds a double value to the string representation. @param value the double value to add @return this ToStringHelper instance for chaining
960 Adds a float value to the string representation. @param value the float value to be added @return this ToStringHelper instance for method chaining
961 Adds an integer value to the string representation. @param value the integer to be added @return this ToStringHelper instance for chaining
962 Adds a long value to the string representation. @param value the long value to add @return this ToStringHelper instance for chaining
963 Adds a boolean value to the string representation. @param name key for the value @param value boolean value to be added @return this ToStringHelper instance for method chaining
964 Adds a character value to the string representation. @param name key for the value @param value character to be added @return this ToStringHelper instance
965 Adds a named double value to the string representation. @param name key for the value @param value numeric value to be added @return this ToStringHelper instance
966 Adds a named float value to the string representation. @param name key for the value @param value float value to be added @return this ToStringHelper instance for chaining
967 Adds an integer property to the string representation. @param name property name @param value integer value @return this ToStringHelper instance
968 Adds a named long value to the string representation. @param name key for the value @param value long value to be added @return this object for method chaining
969 Creates an Optional instance from a nullable reference. @param nullableReference the value to wrap, may be null @return Optional containing the value if non-null, otherwise absent
970 Initializes an empty FluentIterable. @param iterableDelegate optional delegate iterable
971 Returns an absent Optional indicating unknown size. @return Optional containing the size if known, otherwise absent
972 Returns an absent Optional indicating unknown length. @return Optional containing length if known, otherwise absent
973 Converts an empty string to null. @param string input string @return original string if not empty, otherwise null
974 Parses a string to create a HostAndPort object. @param hostPortString the string in "host:port" format @return HostAndPort object representing the parsed host and port
975 Skips a specified number of elements in the iterable. @param numberToSkip number of elements to skip @return a new FluentIterable with skipped elements
976 Limits the size of the iterable. @param maxSize maximum number of elements to include @return new FluentIterable with limited size
977 Retrieves an element from the iterable at the specified position. @param iterable source of elements @param position index of the element to retrieve @param defaultValue value to return if position is out of bounds @return element at the specified position or default value
978 Retrieves an element from an iterator at a specified position. @param iterator source of elements @param position index of the desired element, starting from 0 @return element at the specified position @throws IndexOutOfBoundsException if position is out of range
979 Retrieves an element from the iterator at a specified position. @param iterator source of elements @param position index of the desired element (0-based) @param defaultValue value to return if position is out of bounds @return element at the given position or default value
980 Returns a traverser for the file tree. @return Traverser object for FILE_TREE
981 Limits the input stream to a specified number of bytes. @param in original input stream @param limit maximum number of bytes to read @return new InputStream with limited size
982 Converts BigInteger to Inet4Address. @param address IPv4 address as BigInteger @return Inet4Address representation of the IP
983 Converts BigInteger to Inet6Address. @param address IPv6 address as BigInteger @return Inet6Address object representing the IP
984 Creates a SipHash-2-4 function instance. @param k0 first key part @param k1 second key part @return SipHashFunction configured with keys k0 and k1
985 Constructs a new FileBackedOutputStream with the specified threshold. @param fileThreshold size in bytes after which data is written to a file
986 Converts an integer to an Inet4Address. @param address integer representation of IPv4 address @return Inet4Address object
987 Reserves permits and returns wait length. @param permits number of permits to reserve @return wait time in microseconds
988 Attempts to acquire a specified number of permits within a given timeout. @param permits the number of permits to acquire @param timeout the maximum time to wait for acquisition @param unit the time unit of the timeout parameter @return true if permits are acquired, false otherwise
989 Writes Bloom filter data to an output stream. @param out OutputStream to write data to @throws IOException if an I/O error occurs
990 Creates a fixed-delay scheduler. @param initialDelay initial delay before first execution @param delay fixed delay between subsequent executions @return Scheduler instance
991 Creates a fixed-rate scheduler. @param initialDelay delay before first execution @param period interval between subsequent executions @return Scheduler instance
992 Converts and constrains a given time to safe nanoseconds. @param time the time value @param unit the time unit of the input time @return constrained time in nanoseconds, within safe range
993 Creates and starts a new Stopwatch. @param ticker provides time source @return started Stopwatch instance
994 Orders entries by their values using a comparator. @param valueComparator comparator to define the ordering of values @return this builder instance for method chaining
995 Sets the concurrency level for the map. @param concurrencyLevel expected number of concurrent threads accessing the map @return this builder instance
996 Sets cache expiration time after write. @param duration the duration after which entries should expire @return this CacheBuilder instance
997 Sets cache expiration after access. @param duration time duration for expiration @return CacheBuilder instance with updated settings
998 Sets cache entries to expire after a fixed duration. @param duration the time after which an entry should be refreshed @return this CacheBuilder instance
999 Configures cache to use weak keys. @return updated CacheBuilder instance with weak key strength
1000 Configures cache to use weak values. @return CacheBuilder instance with weak value strength
1001 Configures cache to use soft references for values. @return updated CacheBuilder instance
1002 Configures map to use weak keys. @return this MapMaker instance with weak key strength
1003 Enables weak values in the map. @return updated MapMaker instance with weak value strength
1004 Returns the failure cause of the snapshot. @return Throwable representing the failure cause or null if none
1005 Checks if an index is within valid range. @param index the index to check @param size the size of the collection @return the original index if valid
1006 Checks if index is valid for given size. @param index position to check @param size total number of elements @return the index if valid
1007 Validates that start and end indexes are within bounds. @param start starting index (inclusive) @param end ending index (exclusive) @param size total size of the collection @throws IndexOutOfBoundsException if indexes are invalid
1008 Creates a predicate that checks if an object is equal to the target. @param target the object to compare against @return Predicate that returns true if input equals target, false otherwise
1009 Filters a multimap based on combined predicates. @param multimap the original filtered multimap @param entryPredicate additional predicate for entries @return a new filtered multimap with combined conditions
1010 Filters elements of a multiset based on a predicate. @param unfiltered the original multiset to filter @param predicate the condition to apply for filtering @return a new multiset containing only elements that match the predicate
1011 Creates a Splitter using a character matcher as the separator. @param separatorMatcher defines characters to split on @return Splitter instance configured with the given matcher
1012 Creates a splitter that divides strings into fixed-length chunks. @param length the size of each chunk @return a Splitter object configured for fixed-length splitting
1013 Trims results using whitespace matcher. @return Splitter configured to trim with whitespace
1014 Creates an unstarted Stopwatch instance. @return Stopwatch object ready to start
1015 Creates and starts a new stopwatch. @return a running Stopwatch instance
1016 Calculates the encoded UTF-8 length of a CharSequence. @param sequence input character sequence @return length of the sequence when encoded in UTF-8
1017 Waits indefinitely for the executor service to terminate without interruption. @param executor ExecutorService to wait for termination
1018 Continuously processes and cleans up items from a queue. @param queue the queue to process items from
1019 Initializes a new Builder instance.
1020 Converts a Function to a CacheLoader. @param function mapping from key to value @return CacheLoader that uses the provided function
1021 Converts a Supplier to a CacheLoader. @param supplier provides values to load into cache @return CacheLoader instance wrapping the supplier
1022 Throws an exception as batch loading is not supported. @param keys iterable of keys to load @throws Exception if operation is unsupported
1023 Calculates the cache hit rate. @return ratio of successful hits to total requests, or 1.0 if no requests
1024 Calculates the cache miss rate. @return The ratio of misses to total requests as a percentage.
1025 Constructs a new instance of ForwardingLoadingCache.
1026 Constructs a new instance of ForwardingList.
1027 Constructs a new, empty ForwardingMultiset instance.
1028 Constructs a new instance of ForwardingQueue.
1029 Constructs a new instance of ForwardingSet.
1030 Constructs a new ForwardingListIterator.
1031 Initializes a bidirectional map with given maps. @param backward map from keys to values @param forward map from values to keys
1032 Constructor for ForwardingConcurrentMap.
1033 Constructs an empty ForwardingSortedMap.
1034 Constructs a new instance of MutableTypeToInstanceMap.
1035 Constructs an empty ForwardingListMultimap.
1036 Constructs an empty ForwardingSetMultimap instance.
1037 Initializes a new instance of ForwardingListeningExecutorService.
1038 Constructs an instance of ForwardingListenableFuture.
1039 Creates a new reference entry. @param segment the segment to associate with the entry @param key the entry's key @param hash the hash of the key @param next the next entry in the chain @return a new ReferenceEntry instance
1040 Creates a new entry in the given segment. @param segment the segment to add the entry to @param key the key for the new entry @param hash the hash of the key @param next reference to the next entry @return the newly created ReferenceEntry object
1041 Retrieves the result of the computation. @throws ExecutionException if an exception was thrown during computation
1042 Performs cleanup operations without locking.
1043 Creates a value reference for a cache entry. @param segment cache segment containing the entry @param entry cache entry to reference @param value value associated with the entry @param weight weight of the value @return ValueReference object encapsulating the value
1044 Creates a value reference. @param segment memory segment @param entry reference entry @param value associated value @param weight weight of the value @return ValueReference object
1045 Creates a value reference. @param segment memory segment containing entries @param entry reference entry for the value @param value actual value to be referenced @param weight weight of the value @return ValueReference object
1046 Records access time and adds entry to recency queue. @param entry the ReferenceEntry to record @param now current timestamp
1047 Records a locked read operation for an entry. Updates access time and adds to access queue. @param entry the ReferenceEntry being accessed @param now current timestamp
1048 Records a write operation for an entry. @param entry the ReferenceEntry to record @param weight the weight of the entry @param now the current time in milliseconds
1049 Retrieves the live value from a cache entry. @param entry the cache entry to retrieve from @param now current timestamp in milliseconds @return the live value or null if expired or not found
1050 Returns the size of an Iterable. @param iterable the Iterable to measure @return size of the Iterable
1051 Calculates the size of the multiset using linear time complexity. @return The size of the multiset
1052 Reads input stream into a byte array. @param in input stream to read from @param bufs queue to store intermediate buffers @param totalLen current total length of data read @return byte array containing all data from the input stream @throws IOException if an I/O error occurs
1053 Sets delegates and inverses for mapping. @param forward map from K to V @param backward map from V to K
1054 Creates an open-ended range with no lower or upper bounds. @param <T> the type of elements in the range @param comparator the comparator for element comparison @return a GeneralRange object representing all values
1055 Creates a range from the given endpoint downwards. @param <T> type of elements in the range @param comparator for comparing elements @param endpoint upper limit of the range @param boundType type of inclusion for the endpoint @return GeneralRange object representing the range
1056 Creates a range up to a specified endpoint. @param <T> type of the elements in the range @param comparator for comparing range elements @param endpoint upper limit of the range @param boundType type of inclusion for the endpoint (open or closed) @return GeneralRange object representing the range
1057 Creates a range with specified bounds. @param comparator for comparing range elements @param lower the lower bound value @param lowerType type of lower bound (inclusive/exclusive) @param upper the upper bound value @param upperType type of upper bound (inclusive/exclusive) @return GeneralRange object representing the specified bounds
1058 Intersects two ranges with the same comparator. @param other the range to intersect with @return a new range representing the intersection or an empty range if disjoint
1059 Retrieves the next element without removing it. @throws NoSuchElementException if no elements remain
1060 Removes all values associated with a key. @param key the key to remove @return an unmodifiable collection of removed values or empty if none found
1061 Validates iterator state. Throws ConcurrentModificationException if delegate has changed.
1062 Adds or updates an entry in the map. @param key the key to associate with the value @param value the value to be associated with the key @return true if the put operation added a new mapping, false if it replaced an existing one
1063 Inserts or updates a key-value pair. @param key the key to insert or update @param value the value associated with the key @return true if the operation was successful, false otherwise
1064 Retrieves list of values by key. @param key unique identifier @return List of values or empty list if not found
1065 Retrieves the set of values associated with the given key. @param key the key whose associated values are to be returned @return a set of values or null if the key is not present
1066 Returns a set of map entries. @return Set of Entry objects representing key-value pairs
1067 Writes object state to the specified output stream. @param stream ObjectOutputStream to write to @throws IOException if I/O error occurs
1068 Converts a collection to a string representation. @param collection the collection to convert @return string representation of the collection
1069 Converts a map to a string representation. @param map the map to convert @return string representation of the map
1070 Creates an ArrayList with an initial capacity based on the expected size. @param estimatedSize expected number of elements in the list @return ArrayList instance with precomputed capacity
1071 Creates a HashMap with an initial capacity based on expected size. @param expectedSize the estimated number of entries @return a HashMap instance with optimized capacity
1072 Creates a LinkedHashMap with an estimated capacity. @param expectedSize the expected number of entries @return a new LinkedHashMap instance
1073 Creates a HashSet with an initial capacity based on the expected size. @param expectedSize estimated number of elements @return HashSet instance with adjusted capacity
1074 Creates a LinkedHashSet with the specified expected size. @param expectedSize the expected number of elements in the set @return a LinkedHashSet initialized with the appropriate capacity
1075 Creates an ArrayList-based multimap builder. @return ListMultimapBuilder configured with default expected values per key
1076 Creates a builder with hash set values. @return SetMultimapBuilder configured with hash sets
1077 Creates a builder with linked hash set values. @return LinkedHashSetValuesMultimapBuilder instance
1078 Creates a builder for a multimap with hash keys. @return MultimapBuilderWithKeys configured with default expected keys
1079 Creates a builder with linked hash keys. @return Builder configured with default expected keys
1080 Creates an immutable entry with a specified element and count. @param e the element to be stored in the entry @param n the count of the element @return an ImmutableEntry containing the element and its count
1081 Sets the count of an element in this multiset. @param element the element to set the count for @param count the new count of the element @return the previous count of the element
1082 Sets the count of an element in a multiset. @param element the element to set the count for @param oldCount current count of the element @param newCount new count to be set @return true if successful, false otherwise
1083 Returns hash code based on map representation. @return hash code of the map
1084 Returns string representation of the map. @return String in map format
1085 Returns the set of entries in the multiset. @return Set of Multiset.Entry objects representing elements and their counts
1086 Returns the hash code of this map's entry set. @return hash code value for the entry set
1087 Returns string representation of map entries. @return formatted string of key-value pairs
1088 Retrieves the first entry from the set. @return the first Entry or null if the set is empty
1089 Returns the least element greater than or equal to the specified element. @param e the element to find the ceiling for @return the ceiling element or null if none exists
1090 Finds the least element greater than the specified element. @param e the reference element @return the next greater element or null if no such element exists
1091 Creates an empty TreeRangeSet. @return A new TreeRangeSet instance initialized with a TreeMap
1092 Checks if the range contains a given value. @param value the value to check @return true if the value is within the range, false otherwise
1093 Checks if the given comparator matches the comparator of the iterable. @param comparator the comparator to check against @param elements the iterable to check @return true if comparators match, false otherwise
1094 Adds all entries from another table to this one. @param table source table with entries to add
1095 Returns the set of all cells in the table. @return Set of Cell objects representing table entries
1096 Returns the set of cells in this table. @return Set of Cell objects representing table entries
1097 Returns a collection of all values in this map. Values may be null. @return Collection containing map values
1098 Returns all values from the map. @return A collection of values
1099 Creates an ordering based on a function's result. @param function to extract comparison key from input @return Ordering using the transformed keys
1100 Creates an Ordering from a Comparator. @param comparator the comparator to use for ordering @return an Ordering instance based on the given comparator
1101 Combines this ordering with another comparator. @param secondaryComparator additional comparator to use @return a new CompoundOrdering object combining both comparators
1102 Creates an immutable cell with specified row, column, and value. @param rowKey key for the row @param columnKey key for the column @param value data stored in the cell @return ImmutableCell object
1103 Checks if both row and column keys are present. @param rowKey key for the row @param columnKey key for the column @return true if both keys exist, false otherwise
1104 Creates an immutable map entry. @param key the key of the entry @param value the value of the entry @return an ImmutableMapEntry object containing the key-value pair
1105 Creates an immutable map entry. @param entry existing map entry to check for reusability @param key key of the entry @param value value of the entry @return ImmutableMapEntry instance
1106 Adds an entry to the builder. @param entry key-value pair to add @return this Builder instance
1107 Adds a key-value pair to the map. @param key the key to add @param value the value associated with the key @return this Builder instance for chaining
1108 Resizes the internal array if needed. @param newSize desired size to potentially resize to
1109 Inserts an entry into the hash table. @param entryIndex index where to insert the entry @param key key for the new entry @param value value for the new entry @param hash computed hash of the key @param mask bit mask for hash collision resolution
1110 Resizes the internal array if newSize exceeds current capacity. @param newSize desired new size
1111 Inserts an entry at the specified index with a given object and hash. @param entryIndex index where the entry is inserted @param object the object to be stored @param hash the hash value of the object @param mask bitmask for hash manipulation
1112 Allocates arrays for hash table and entries. @return size of allocated arrays
1113 Allocates arrays for hash table and entries. @return Size of allocated arrays
1114 Checks if this range fully contains another range. @param other the range to check @return true if this range encloses 'other', false otherwise
1115 Checks if two ranges overlap. @param other Range to compare with @return true if ranges overlap, false otherwise
1116 Writes object state to output stream. @param stream ObjectOutputStream for writing @throws IOException if I/O error occurs
1117 Creates a new Builder instance. @return Builder object for constructing key-value pairs
1118 Creates a new Builder instance. @param <C> type parameter extending Comparable @return Builder instance
1119 Creates a new Builder instance. @param <R> type of the result @param <C> type of the context @param <V> type of the value @return Builder object for constructing instances
1120 Returns an unmodifiable iterator over elements. @return UnmodifiableIterator providing access to elements
1121 Counts occurrences of an element in an iterable. @param iterable the collection to search through @param element the element to count @return number of times the element appears in the iterable
1122 Checks if the map contains a mapping for the specified key. @param key the key to check @return true if this map contains a mapping for the specified key, false otherwise
1123 Checks if the map contains the specified value. @param value the value to check for presence @return true if the value is present, false otherwise
1124 Finds the greatest key less than or equal to the given key. @param key the key to search for @return the greatest key less than or equal to the given key, or null if none found
1125 Returns the greatest key less than or equal to the specified key. @param key the key to search for @return the greatest key less than or equal to the specified key, or null if no such key exists
1126 Returns the smallest key greater than or equal to the given key. @param key the reference key @return the ceiling key or null if none exists
1127 Finds the smallest key greater than the given key. @param key the reference key @return the next higher key or null if none exists
1128 Retrieves the first key in the map. @return the first key or throws NoSuchElementException if empty
1129 Retrieves the key of the last entry in the map. @return the key of the last entry @throws NoSuchElementException if the map is empty
1130 Returns the last entry in descending order. @return Entry object or null if map is empty
1131 Retrieves and removes the last entry from the map. @return the last Entry or null if the map is empty
1132 Returns a navigable set of keys in descending order. @return NavigableSet containing keys in reverse order
1133 Returns a submap with keys from fromKey (inclusive) to toKey (exclusive). @param fromKey starting key of the range @param toKey ending key of the range @return SortedMap containing the specified range of keys and values
1134 Returns the greatest entry less than the specified key. @param key the key to compare against @return an Entry with the greatest key less than the specified key, or null if no such entry exists
1135 Finds the greatest entry less than or equal to the specified key. @param key the key to search for @return Entry with the greatest key less than or equal to the specified key, or null if no such entry exists
1136 Returns a view of the portion of this map whose keys are strictly less than toKey. @param toKey upper bound key (exclusive) @return SortedMap containing keys less than toKey
1137 Finds the smallest entry greater than or equal to the specified key. @param key the key to search for @return the Entry with the least key greater than or equal to the given key, or null if no such entry exists
1138 Returns the least entry greater than the given key. @param key key to compare against @return Entry with the smallest key greater than the provided key or null if none exists
1139 Returns a view of the portion of this map whose keys are greater than or equal to `fromKey`. @param fromKey the lower bound key (inclusive) @return a SortedMap containing the specified range
1140 Creates a submultiset within specified bounds. @param lowerBound the lower bound element @param lowerBoundType type of inclusion for lower bound (closed or open) @param upperBound the upper bound element @param upperBoundType type of inclusion for upper bound (closed or open) @return a SortedMultiset containing elements within bounds
1141 Creates a new empty HashBasedTable. @param <R> row type @param <C> column type @param <V> value type @return an empty HashBasedTable with LinkedHashMap for rows and Factory for values
1142 Reads object state from input stream. @param stream source of deserialized data @throws IOException if I/O error occurs @throws ClassNotFoundException if class not found during deserialization
1143 Moves the last entry to a specified index and updates references. @param dstIndex destination index for the moved entry @param mask hash mask for table operations
1144 Moves the last entry to a specified index and updates pointers. @param dstIndex destination index for the moved entry @param mask hash table mask value
1145 Checks if the map contains the specified value. @param value the value to check for presence in the map @return true if the map contains the value, false otherwise
1146 Creates a builder with an initial capacity. @param expectedSize the expected number of entries @return Builder instance with specified capacity
1147 Initializes a new instance of the Builder class.
1148 Creates a new builder instance. @param <K> key type @param <V> value type @return Builder object for constructing instances
1149 Initializes a builder with a specified comparator. @param comparator the comparator to use for ordering keys
1150 Creates an immutable bimap from a single key-value pair. @param k1 the first key @param v1 the first value @return an ImmutableBiMap containing the key-value pair
1151 Adds a unique element to the array. @param e element to be added
1152 Constructs a new builder with default initial capacity.
1153 Creates a builder with an initial capacity. @param expectedSize the expected number of elements @return ImmutableList.Builder instance
1154 Adds all elements from the specified iterable to this builder. @param elements iterable containing elements to add @return this builder instance for method chaining
1155 Adds all elements from iterator to builder. @param elements iterator of elements to add @return current Builder instance
1156 Adds all elements from iterator to builder. @param elements iterator of elements to add @return current Builder instance
1157 Returns a serialized form of the object. @return SerializedForm instance representing the object's state
1158 Creates an immutable table with a single cell. @param rowKey key for the row @param columnKey key for the column @param value value to store in the table @return ImmutableTable containing one entry
1159 Returns a string representation of the delegate. @return string representation of the delegate
1160 Adds multiple values for a key. @param key the key to associate with values @param values iterable of values to add @return this builder instance
1161 Retrieves the single element from an iterable or returns a default value. @param iterable collection of elements @param defaultValue value to return if iterable is empty @return single element or default value if iterable is empty
1162 Retrieves the last element of an iterable or returns a default value. @param iterable the iterable to retrieve the last element from @param defaultValue the value to return if the iterable is empty @return the last element or the default value if the iterable is empty
1163 Adds or updates a node with the given key and value. @param key unique identifier for the node @param value data to store in the node @return always returns true indicating success
1164 Partitions a list into sublists of a specified size. @param list the list to partition @param size the size of each sublist @return a list of sublists
1165 Returns the index of the first occurrence of the specified element. @param element the element to search for @return index of the element or -1 if not found
1166 Finds the last occurrence of an element in the list. @param element the object to search for @return index of the last occurrence or -1 if not found
1167 Performs cleanup operations before writing. Calls runLockedCleanup under lock.
1168 Creates an empty TreeRangeMap. @param <K> key type that extends Comparable @param <V> value type @return a new TreeRangeMap instance
1169 Finds the index of the minimum element within a specified range. @param index starting index for search @param len length of the range to search @return index of the minimum element or -1 if out of bounds
1170 Returns index of the maximum element in a priority queue. @return Index of the max element
1171 Returns the first element without removing it. @return the first element or null if empty
1172 Bubbles up an element at a given index by alternating levels. @param index starting position of the element to bubble up @param x the element to be bubbled up @return final index after bubbling up
1173 Returns an iterator over the elements of this multiset. @return Iterator over elements
1174 Concatenates an element to the start of an array. @param element element to add @param array original array @return new array with element at the start
1175 Converts a collection to an array. @param c the collection to convert @param array the target array or empty array of T type @return an array containing all elements from the collection
1176 Finds the minimum element in an iterable. @param iterable collection of elements to compare @return minimum element or null if iterable is empty
1177 Finds maximum element in an iterable. @param iterable collection of elements to compare @return maximum element or null if iterable is empty
1178 Returns string representation of the range. @return string representation of the range object
1179 Converts a Range to a GeneralRange. @param range the input Range object @return a GeneralRange object representing the same bounds as the input
1180 Returns a submap of the given NavigableMap within the specified Range. @param map the original NavigableMap @param range the range defining the bounds for the submap @return a submap within the specified range
1181 Returns a subset of the given NavigableSet within the specified Range. @param set the original NavigableSet @param range the range defining the subset bounds @return a NavigableSet representing the subset
1182 Returns a sorted map view of the table's rows. @return SortedMap where key is row key and value is column map
1183 Wraps a queue to make it thread-safe. @param queue the original queue to wrap @return a synchronized version of the queue
1184 Initializes escaper with given map and safe character range. @param escaperMap mapping of characters to their replacements @param safeMin minimum safe character in the range @param safeMax maximum safe character in the range
1185 Initializes a Unicode escaper based on a given map and safety range. @param escaperMap mapping of characters to their replacements @param safeMin minimum code point considered safe @param safeMax maximum code point considered safe @param unsafeReplacement default replacement for unsafe characters
1186 Constructs a PercentEscaper with specified safe characters and space handling. @param safeChars characters to be considered safe @param plusForSpace whether to encode spaces as '+'
1187 Escapes special characters in a string. @param string input string to be escaped @return escaped string or original if no escaping is needed
1188 Creates a subscriber based on thread safety. @param bus event bus instance @param listener object listening to events @param method method to handle events @return Subscriber or SynchronizedSubscriber based on method's thread safety
1189 Returns a string representation of the graph. @return String containing graph properties and elements
1190 Returns a set of edges in the graph. @return Set of EndpointPair representing edges
1191 Returns a set of edges in the graph. @return Set of EndpointPair representing edges
1192 Adds a double value to the hash. @param d the double value to add @return this Hasher instance
1193 Creates a Bloom filter collector. @param funnel defines how objects are converted to byte arrays @param expectedInsertions estimated number of insertions @return Collector for creating a BloomFilter
1194 Calculates expected false positive probability. @return Probability of a false positive
1195 Checks if two BloomFilters are compatible. @param that the other BloomFilter to compare with @return true if they have the same number of hash functions, bit size, strategy, and funnel
1196 Converts a byte to its string representation in base 10. @param x the byte value to convert @return string representation of the byte
1197 Merges another BloomFilter into this one. @param that the other BloomFilter to merge
1198 Creates a HashCode instance from byte array without copying. @param bytes source byte array @return HashCode object using provided bytes
1199 Creates a HashCode object from an integer. @param hash the integer value to convert @return a HashCode instance representing the given integer
1200 Creates a HashCode instance from a long value. @param hash long integer to be converted into a HashCode @return HashCode object representing the given long value
1201 Returns the float value of the number. @return float representation of the number
1202 Returns the numeric value of this BigDecimal as a double. @return the numeric value represented by this BigDecimal as a double
1203 Converts the value to a BigInteger. @return BigInteger representation of the value
1204 Generates a fast hash function with specified minimum bits. @param minimumBits the desired bit length of the hash @return HashFunction instance capable of generating the required bit length
1205 Computes consistent hash value for given hash code and number of buckets. @param hashCode input hash code @param buckets number of buckets to distribute into @return index of the bucket
1206 Creates an HMAC MD5 hash function. @param key secret key for HMAC @return HashFunction instance using HMAC MD5 algorithm
1207 Creates an HMAC-SHA1 hash function. @param key secret key for HMAC computation @return HashFunction instance configured with HmacSHA1 algorithm
1208 Creates an HMAC-SHA256 hash function. @param key secret key for HMAC calculation @return HashFunction instance using HMAC-SHA256 algorithm
1209 Creates an HMAC-SHA-512 hash function. @param key secret key for HMAC @return HashFunction instance using HMAC-SHA-512
1210 Combines multiple ByteSources into one. @param sources iterable collection of ByteSource objects @return a single ByteSource containing all input data concatenated
1211 Combines multiple CharSources into one. @param sources iterable of CharSource objects @return a single CharSource that concatenates all inputs
1212 Creates a ByteArrayDataInput from byte array. @param bytes input data as byte array @return ByteArrayDataInput for reading data
1213 Creates a new ByteArrayDataOutput instance. @return ByteArrayDataOutput object using a ByteArrayOutputStream
1214 Creates a ByteArrayDataOutput for writing bytes. @param size initial buffer size @return ByteArrayDataOutput instance
1215 Constructs an InputStream from a Reader using specified charset and buffer size. @param reader source of characters to read @param charset character encoding for the input stream @param bufferSize size of the internal buffer
1216 Counts total bytes skipped from input stream. @param in InputStream to read from @return Total bytes skipped
1217 Skips exactly n bytes in the input stream. @param in InputStream to skip bytes from @param n number of bytes to skip @throws IOException if an I/O error occurs or end of stream is reached before skipping all bytes
1218 Writes multiple lines to an output stream. @param lines iterable collection of character sequences to write @param lineSeparator separator to use between lines @throws IOException if an I/O error occurs
1219 Writes lines from a stream to an output source. @param lines stream of character sequences representing lines @param lineSeparator separator to use between lines @throws IOException if an I/O error occurs
1220 Processes each line of the file. @param action Consumer to process each line @throws IOException if an I/O error occurs
1221 Reads all lines from a Readable source. @param r the Readable object to read from @return List of strings representing each line @throws IOException if an I/O error occurs
1222 Reads lines from a Readable and processes them using a LineProcessor. @param readable source of lines to read @param processor processes each line; returns false to stop reading @return result from the processor or null if not applicable @throws IOException if an I/O error occurs
1223 Reads more characters into the buffer. Adjusts buffer size or shifts existing data as needed. @throws IOException if an I/O error occurs
1224 Reads a short value from input. @return short value read from input stream @throws IOException if an I/O error occurs
1225 Reads and returns the next character from input. @return character value read @throws IOException if an I/O error occurs
1226 Reads a float value from the input stream. Converts an integer read from the stream to a float. @return the float value read from the stream @throws IOException if an I/O error occurs
1227 Reads a double value from input. @return the double value read @throws IOException if an I/O error occurs
1228 Writes each character of the string to the output stream. @param s the string to be written @throws IOException if an I/O error occurs
1229 Writes a double value as a long. @param v double value to write @throws IOException if an I/O error occurs
1230 Deletes contents of a directory insecurely. @param dir DirectoryStream containing paths to delete @return Collection of IOExceptions encountered or null if none
1231 Recursively deletes a directory or file securely. @param dir secure directory stream for deletion operations @param path path of the directory or file to delete @return collection of IOExceptions encountered during deletion or null if successful
1232 Initializes a MultiInputStream with an iterator of ByteSources. @param it Iterator over ByteSource objects @throws IOException if there is an error advancing to the first source
1233 Converts URL to CharSource using specified charset. @param charset character set for decoding @return CharSource representation of URL content
1234 Calculates permutations of distinct elements in a sorted list. @param sortedInputList list of sorted elements @param comparator comparator for element comparison @return number of permutations or Integer.MAX_VALUE if overflow
1235 Computes the mean of a sequence of numbers. @param values iterator over Number objects @return calculated mean value as double
1236 Checks if a double value is a power of two. @param x the number to check @return true if x is a power of two, false otherwise
1237 Checks if a double value is a mathematical integer. @param x the double value to check @return true if x is a mathematical integer, false otherwise
1238 Rounds a long value to a double using specified rounding mode. @param x the long value to round @param mode the RoundingMode to use @return the rounded double value
1239 Compares two doubles with a tolerance. @param a first double value @param b second double value @param tolerance comparison tolerance @return 0 if values are fuzzy equal, -1 if a < b, 1 if a > b, NaN handling included
1240 Calculates max run before fallback. @param tableSize size of the table @return calculated max run value
1241 Trims the buffer to keep only the top k elements based on comparator.
1242 Computes the base-10 logarithm of an integer. @param x the integer to compute the logarithm for @param mode rounding mode to apply @return the rounded base-10 logarithm
1243 Computes the integer square root of a non-negative long value with specified rounding mode. @param x non-negative long value to compute the square root of @param mode rounding mode to apply if the result is not exact @return integer square root of x, rounded according to mode
1244 Calculates new capacity for the queue. @return adjusted new capacity considering current size and max size constraints
1245 Creates a horizontal linear transformation. @param y y-intercept of the line @return LinearTransformation with zero slope and given y-intercept
1246 Creates a new LinearTransformation with the specified slope. @param slope the slope of the linear transformation @return a new LinearTransformation instance
1247 Creates a vertical linear transformation. @param x constant value for the transformation @return LinearTransformation representing the vertical shift
1248 Computes factorial of a non-negative integer using BigInteger. @param n non-negative integer to compute factorial for @return BigInteger representing the factorial of n
1249 Computes the base-10 logarithm of a number with specified rounding mode. @param x positive long integer @param mode rounding mode to apply @return rounded base-10 logarithm
1250 Multiplies a fraction by an integer. @param x multiplier @param numerator fraction's numerator @param denominator fraction's denominator @return result of the multiplication as a long
1251 Computes b^k with overflow checking. @param b base number @param k exponent, must be non-negative @return b raised to the power of k @throws ArithmeticException if overflow occurs
1252 Calculates population covariance. @return covariance value or throws IllegalStateException if count is zero
1253 Calculates the sample covariance. @return double value representing sample covariance
1254 Calculates Pearson's correlation coefficient. @return double value representing the correlation coefficient
1255 Calculates the mean of a sequence of numbers. @param values iterator over numeric values @return calculated mean as a double
1256 Adds a new value to the dataset. Updates count, mean, min, max, and sum of squares of deltas. Handles finite and non-finite values appropriately.
1257 Calculates the population covariance. @return population covariance value
1258 Calculates the sample covariance. @return calculated sample covariance value
1259 Computes Pearson's correlation coefficient between two datasets. @return double value representing the correlation coefficient
1260 Partitions an array segment around a pivot. @param array the array to partition @param from start index of the segment (inclusive) @param to end index of the segment (exclusive) @return index of the pivot after partitioning
1261 Creates a PairedStats object from a byte array. @param byteArray serialized PairedStats data @return PairedStats instance or throws IllegalArgumentException if input is invalid
1262 Converts byte array to Stats object. @param byteArray input byte array representing stats data @return Stats object constructed from the byte array
1263 Creates a snapshot of paired statistics. @return PairedStats object containing snapshots of x and y stats, and sum of products of deltas
1264 Returns a snapshot of current statistics. @return Snapshot of Stats object
1265 Returns a snapshot of current statistics. @return Stats object representing the current state
1266 Collects numbers into statistics. @return Collector that aggregates numbers into Stats object
1267 Converts an InetAddress to a URI string. @param ip the IP address to convert @return the URI representation of the IP address
1268 Converts an IPv4-compatible IPv6 address to its IPv4 equivalent. @param ip IPv6 address that must be IPv4-compatible @return Inet4Address representing the IPv4 part of the address
1269 Extracts the IPv4 address from a 6to4 IPv6 address. @param ip 6to4 IPv6 address @return extracted IPv4 address as Inet4Address
1270 Extracts IPv4 address from an ISATAP address. @param ip ISATAP IPv6 address @return extracted Inet4Address or null if invalid
1271 Computes the result from a collection of numbers. @param dataset collection of numeric values @return computed result as a double
1272 Computes statistics on a dataset. @param dataset collection of numeric data points @return map with computed statistics
1273 Adds a double value to the array. @param value the double value to add @return the Builder instance for method chaining
1274 Adds all elements from a double array to the builder. @param values array of double values to add @return the Builder instance for method chaining
1275 Adds all double values from a collection to the builder. @param values collection of double values to add @return the Builder instance for method chaining
1276 Adds all elements from an ImmutableDoubleArray to the builder. @param values array of double values to add @return current Builder instance
1277 Creates an immutable array with a single element. @param e0 the only element in the array @return an ImmutableDoubleArray containing the specified element
1278 Creates an ImmutableDoubleArray with two elements. @param e0 first element value @param e1 second element value @return ImmutableDoubleArray containing e0 and e1
1279 Creates an ImmutableDoubleArray from three doubles. @param e0 first element @param e1 second element @param e2 third element @return ImmutableDoubleArray containing the provided elements
1280 Creates an immutable array from four doubles. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @return ImmutableDoubleArray containing the elements
1281 Creates an ImmutableDoubleArray from five double values. @param e0 to e4 the five double elements of the array @return an ImmutableDoubleArray containing the specified elements
1282 Creates an immutable array of six doubles. @param e0 to e5 the elements of the array @return ImmutableDoubleArray containing the specified elements
1283 Creates an immutable double array from a given array. @param values the source double array to copy @return an ImmutableDoubleArray instance containing the copied values
1284 Creates an immutable double array from a collection of Double. @param values collection of Double values @return ImmutableDoubleArray containing the elements of values
1285 Creates an ImmutableDoubleArray from a DoubleStream. @param stream source of double values @return ImmutableDoubleArray containing the stream's elements
1286 Returns a trimmed version of the array. @return ImmutableDoubleArray with trimmed values or current instance if not a partial view
1287 Checks if the list contains the specified element. @param target the element to search for @return true if the element is found, false otherwise
1288 Adds an integer to the array. @param value integer to be added @return current Builder instance
1289 Adds all elements from an array to the builder. @param values array of integers to add @return the Builder instance for method chaining
1290 Adds all integers from a collection to the builder. @param values collection of integer values to add @return current Builder instance
1291 Adds all elements from an ImmutableIntArray to the builder. @param values ImmutableIntArray containing elements to add @return this Builder instance for method chaining
1292 Creates an immutable array with one element. @param e0 the single element in the array @return ImmutableIntArray containing the specified element
1293 Creates an immutable array with two elements. @param e0 first element @param e1 second element @return ImmutableIntArray containing the two elements
1294 Creates an ImmutableIntArray from three integers. @param e0 first integer element @param e1 second integer element @param e2 third integer element @return ImmutableIntArray containing the three elements
1295 Creates an immutable array from four integers. @param e0 first integer element @param e1 second integer element @param e2 third integer element @param e3 fourth integer element @return ImmutableIntArray containing the specified elements
1296 Creates an ImmutableIntArray with five elements. @param e0 to e4 the integer elements of the array @return ImmutableIntArray containing the specified elements
1297 Creates an immutable array from six integers. @param e0 to e5 the six integer elements of the array @return an ImmutableIntArray containing the specified elements
1298 Creates an immutable copy of the given int array. @param values array to be copied @return ImmutableIntArray containing the copied values
1299 Creates an ImmutableIntArray from an IntStream. @param stream source of integers @return ImmutableIntArray containing elements from the stream
1300 Returns an immutable array with trimmed elements. @return ImmutableIntArray with trimmed values or current instance if already trimmed
1301 Adds a long value to the builder. @param value the long value to add @return the Builder instance for method chaining
1302 Adds all elements from a long array to the builder. @param values array of long integers to add @return the Builder instance for method chaining
1303 Adds all Long values to the array. @param values collection of Long values to add @return the Builder instance
1304 Adds all elements from an ImmutableLongArray to the builder. @param values the ImmutableLongArray to add @return the Builder instance for method chaining
1305 Creates an ImmutableLongArray with a single element. @param e0 the initial element @return an ImmutableLongArray containing the specified element
1306 Creates an immutable array containing two long elements. @param e0 first element @param e1 second element @return ImmutableLongArray with the specified elements
1307 Creates an immutable array with three long elements. @param e0 first element @param e1 second element @param e2 third element @return ImmutableLongArray containing the specified elements
1308 Creates an ImmutableLongArray from four long values. @param e0 first element @param e1 second element @param e2 third element @param e3 fourth element @return ImmutableLongArray containing the specified elements
1309 Creates an ImmutableLongArray from five long elements. @param e0 to e4 the elements of the array @return ImmutableLongArray containing the provided elements
1310 Creates an ImmutableLongArray from six long elements. @param e0 to e5 the elements of the array @return ImmutableLongArray containing the specified elements
1311 Creates an immutable long array from a given array. @param values source array of longs @return ImmutableLongArray containing the copied values
1312 Creates an immutable long array from a LongStream. @param stream source of long values @return ImmutableLongArray containing the elements of the stream
1313 Returns a trimmed immutable long array. @return new ImmutableLongArray if partial view, otherwise current instance
1314 Creates a ScaleAndIndexes object with given indexes. @param indexes collection of integer indexes @return ScaleAndIndexes instance initialized with scale and converted indexes array
1315 Creates an immutable array from a collection of integers. @param values collection of Integer objects @return ImmutableIntArray containing the elements of the input collection
1316 Creates an immutable long array from a collection of Longs. @param values collection of Long objects @return ImmutableLongArray containing the elements or an empty array if input is empty
1317 Parses a string to an integer with a specified radix. @param string the string to parse @param radix the numerical base used for parsing @return parsed Integer or null if out of int range
1318 Parses a string to a long using base 10. @param string the string to parse @return parsed long value or null if parsing fails
1319 Decodes a string to an unsigned integer. @param stringValue the string to decode @return the decoded unsigned integer value @throws NumberFormatException if decoding fails
1320 Converts a long value to an UnsignedInteger. @param value the long value to convert @return UnsignedInteger representation of the value
1321 Converts a BigInteger to an UnsignedInteger. @param value non-negative BigInteger with bit length <= 32 @return UnsignedInteger representation of the BigInteger
1322 Parses a string into an UnsignedInteger using a specified radix. @param string the string to parse @param radix the base of the number in the string @return an UnsignedInteger object representing the parsed value
1323 Adds this unsigned integer to another. @param val the unsigned integer to add @return sum as a new UnsignedInteger
1324 Subtracts another unsigned integer from this one. @param val the unsigned integer to subtract @return result of the subtraction as a new UnsignedInteger
1325 Multiplies two unsigned integers. @param val the UnsignedInteger to multiply with @return the product as an UnsignedInteger
1326 Divides this unsigned integer by another. @param val divisor as an UnsignedInteger @return result of division as UnsignedInteger
1327 Computes modulus of this unsigned integer with another. @param val the divisor as an UnsignedInteger @return result of the modulus operation as an UnsignedInteger
1328 Returns string representation with default depth. @return formatted string
1329 Compares this unsigned integer with another. @param other the UnsignedInteger to compare with @return negative if less, zero if equal, positive if greater
1330 Converts a long to an unsigned long. @param value long value to convert @return UnsignedLong representation of the input value
1331 Converts BigInteger to UnsignedLong. @param value non-negative BigInteger @return UnsignedLong representation of the BigInteger
1332 Adds two unsigned long values. @param val the value to add @return sum of this and val as UnsignedLong
1333 Subtracts another UnsignedLong from this instance. @param val UnsignedLong to subtract @return result of subtraction as a new UnsignedLong
1334 Multiplies this unsigned long by another. @param val the other unsigned long value to multiply @return product of the two unsigned longs as a new UnsignedLong instance
1335 Divides two long integers with specific handling for edge cases. @param dividend the number to be divided @param divisor the number by which to divide @return the quotient of the division
1336 Computes the remainder of a division operation. @param dividend the number to be divided @param divisor the number by which to divide @return the remainder of the division
1337 Converts a string to an unsigned long using a specified radix. @param string the string representation of the number @param radix the base of the numeral system (e.g., 2 for binary) @return UnsignedLong object representing the parsed value
1338 Parses an unsigned long from a string. @param string the string to parse @return parsed unsigned long value
1339 Decodes a string to a long integer. @param stringValue the string representation of the number @return the decoded long value @throws NumberFormatException if the string is not a valid number
1340 Checks if access level is package-private. @return true if access level is package-private, false otherwise
1341 Wraps the current type in its corresponding wrapper class if it's primitive. @return TypeToken with wrapped type or original if not primitive
1342 Unwraps the current TypeToken if it's a wrapper. @return unwrapped TypeToken or itself if not a wrapper
1343 Retrieves the component type of a generic runtime type. @return TypeToken representing the component type, or null if none exists
1344 Retrieves the value from this future. @throws InterruptedException if interrupted while waiting @throws ExecutionException if computation threw an exception
1345 Submits a callable task to an executor and adds a listener to enqueue the result. @param executorService the service to execute the task @param task the callable task to submit @param queue the blocking queue to add the future to upon completion @return ListenableFuture representing the submitted task
1346 Waits for service to start running within given timeout. @param timeout maximum time to wait @throws TimeoutException if service does not start in time
1347 Waits for the service to become running within a specified timeout. @param timeout maximum time to wait @throws TimeoutException if the service does not start in time
1348 Waits for the service to reach running state within a specified timeout. @param timeout maximum time to wait @throws TimeoutException if the service does not start within the timeout
1349 Waits for the service to be running within a specified timeout. @param timeout maximum time to wait @throws TimeoutException if the service does not start in time
1350 Waits for service termination with a specified timeout. @param timeout maximum time to wait @throws TimeoutException if the service does not terminate within the timeout
1351 Waits for service termination within a specified timeout. @param timeout maximum time to wait @throws TimeoutException if not terminated in time
1352 Waits for service termination within a specified timeout. @param timeout maximum time to wait @throws TimeoutException if the service does not terminate in time
1353 Waits for service to terminate within specified timeout. @param timeout maximum time to wait @throws TimeoutException if termination does not occur in time
1354 Collects value from a completed future. @param index position of the future in the collection @param future asynchronous computation result
1355 Atomically adds a delta to the current value. @param delta value to add @return old value before addition
1356 Adds a value to the current and returns the result. @param delta value to add @return updated sum after addition
1357 Atomically adds a value to an element at a specific index. @param i the index of the element @param delta the value to add @return the previous value at the specified index
1358 Adds a delta to the value at index i and returns the new sum. @param i index of the value to update @param delta amount to add @return updated sum after addition
1359 Cancels the task execution. @param mayInterruptIfRunning true to interrupt running tasks @return true if cancellation was successful
1360 Finds a path to the specified node in the lock graph. @param node target node to find a path to @param seen set of nodes already traversed @return ExampleStackTrace representing the path or null if not found
1361 Creates a ListenableFutureTask from a Callable. @param callable task to be executed asynchronously @return ListenableFutureTask instance wrapping the callable
1362 Creates a ListenableFutureTask with a given Runnable and result. @param runnable task to execute asynchronously @param result value to be returned after task completion @return ListenableFutureTask instance
1363 Executes tasks in the execution list upon completion.
1364 Creates and returns a new ExecutionSequencer instance. @return ExecutionSequencer object
1365 Converts a ListenableFuture to a FluentFuture. @param future the ListenableFuture to convert @return a FluentFuture representing the same computation
1366 Wraps a future to prevent cancellation from propagating. @param future the original ListenableFuture @return a wrapped ListenableFuture that does not propagate cancellation
1367 Reloads value by key if it matches the old value. @param key unique identifier for the value @param oldValue expected current value @return ListenableFuture with new loaded value
1368 Adds an event to the queue. @param event the event to be enqueued
1369 Adds an event to the queue with a label. @param event the event to be enqueued @param label identifier for the event
1370 Dispatches listener events if monitor is not occupied by current thread.
1371 Dispatches pending listener events. Ensures the monitor is not held by the current thread.
1372 Signals the next waiter whose condition is satisfied. Iterates through active guards and signals the first one that meets the criteria.
1373 Submits an asynchronous callable for execution. @param callable the task to execute asynchronously @param executor the executor to run the task @return ListenableFuture representing the pending result
1374 Schedules an asynchronous callable with a delay using a provided executor service. @param callable the callable to execute asynchronously @param delay time to wait before execution @param timeUnit unit of time for the delay @param executorService the executor service to use for scheduling @return ListenableFuture representing the scheduled task
1375 Creates a new task for the given callable. @param callable the callable to execute @return a RunnableFuture object representing the task
1376 Submits a callable task to an executor and returns a ListenableFuture. @param callable the task to execute @param executor the executor to run the task @return ListenableFuture for the task result
1377 Creates a new task for the given runnable and value. @param runnable task to execute @param value result of the task @return RunnableFuture object representing the task
1378 Submits a Runnable task to an Executor. @param runnable the task to execute @param executor the execution environment @return ListenableFuture representing the task's completion
1379 Attempts to acquire a semaphore permit uninterruptibly within a specified timeout. @param semaphore the semaphore to acquire @param timeout maximum time to wait for a permit @return true if acquired, false otherwise
1380 Retrieves the first element from the collection. @return Optional containing the first element or absent if empty
1381 Returns the last element of the iterable. @return Optional containing the last element or absent if empty
1382 Searches for an element in the iterator that matches the predicate. @param iterator source of elements to search through @param predicate condition to match elements against @return Optional containing the first matching element, or absent if none found
1383 Sets the expected node count. @param expectedNodeCount the expected number of nodes, must be non-negative @return this GraphBuilder instance for method chaining
1384 Sets the expected number of nodes. @param expectedNodeCount non-negative integer representing expected node count @return NetworkBuilder instance with updated expected node count
1385 Sets the expected edge count. @param expectedEdgeCount non-negative integer representing expected edges @return NetworkBuilder instance for method chaining
1386 Sets the expected node count. @param expectedNodeCount estimated number of nodes @return this builder instance
1387 Checks if any element in the iterable matches the given predicate. @param iterable collection of elements to check @param predicate condition to evaluate each element against @return true if any element matches, false otherwise
1388 Creates a predicate to check if a CharSequence contains a given pattern. @param pattern the pattern to search for @return Predicate checking for pattern presence
1389 Propagates the given throwable if it is an instance of the specified type. @param throwable the throwable to check and possibly throw @param declaredType the type to check against @throws X if throwable is an instance of declaredType
1390 Retrieves flattened class hierarchy from cache. @param concreteClass starting class to flatten @return ImmutableSet of classes in the hierarchy
1391 Provides a platform-specific thread factory. Returns the default thread factory unless running on Google App Engine. @return ThreadFactory instance suitable for the current environment
1392 Checks if the delegate iterable contains the specified target. @param target object to search for in the delegate @return true if target is found, false otherwise
1393 Filters a multimap based on combined predicates. @param multimap the original filtered multimap @param entryPredicate additional predicate for entries @return a new FilteredEntrySetMultimap with combined filtering
1394 Filters keys in a ListMultimap based on a predicate. @param unfiltered the original ListMultimap to filter @param keyPredicate the predicate to test keys against @return a new ListMultimap with filtered keys
1395 Filters elements by class type. @param type class to filter elements by @return FluentIterable of filtered elements
1396 Removes all elements in the specified collection from this set. @param collection elements to be removed @return true if any element was removed
1397 Creates an EnumMultiset from an iterable of enums. @param elements iterable containing enum elements @return EnumMultiset with counts of each enum element
1398 Creates a new LinkedList from an iterable of elements. @param elements the iterable containing elements to add @return a LinkedList containing the elements
1399 Creates a new ArrayDeque from an Iterable. @param elements the source iterable of elements @return a new ArrayDeque containing the elements
1400 Creates a ConcurrentLinkedQueue from an Iterable. @param elements the source of elements to add to the queue @return a new ConcurrentLinkedQueue containing the specified elements
1401 Creates a LinkedBlockingDeque from an Iterable. @param elements the source of elements for the deque @return a new LinkedBlockingDeque containing the elements
1402 Creates a LinkedBlockingQueue from an Iterable. @param elements the elements to add to the queue @return a LinkedBlockingQueue containing the specified elements
1403 Creates a PriorityBlockingQueue from an iterable of comparable elements. @param elements the source iterable containing elements to be added to the queue @return a PriorityBlockingQueue containing all elements from the iterable
1404 Creates a priority queue from an iterable of comparable elements. @param elements the source iterable containing elements to add @return a PriorityQueue with the specified elements
1405 Creates an EnumSet from an iterable. @param iterable collection of enum elements @param elementType class of the enum type @return EnumSet containing elements from iterable
1406 Creates a concurrent hash set from an iterable. @param elements the iterable providing initial elements @return a new ConcurrentHashSet containing all elements
1407 Creates a LinkedHashSet from an iterable. @param elements the iterable of elements to add @return a LinkedHashSet containing the elements
1408 Creates a TreeSet from an iterable of comparable elements. @param elements the iterable containing elements to add @return a TreeSet containing the provided elements
1409 Converts an Iterable to a Collection, casting if possible. @param iterable the source Iterable @return a Collection representation of the input Iterable
1410 Creates a new ArrayList from an iterable. @param elements the iterable source of elements @return a new ArrayList containing the elements
1411 Creates a HashSet from an Iterable. @param elements the iterable source of elements @return a new HashSet containing the elements
1412 Checks if all elements match the given predicate. @param predicate condition to test each element @return true if all elements match, false otherwise
1413 Returns a list iterator over elements starting from the specified index. @param start initial index of the iterator @return ListIterator for traversing the list from the given start index
1414 Creates a sorted map from a set using a transformation function. @param set the input sorted set of keys @param function the mapping function to apply to each key @return a SortedMap with keys from the set and values transformed by the function
1415 Transforms entries of a sorted map. @param fromMap original sorted map @param transformer function to transform values @return new sorted map with transformed values
1416 Transforms values in a map using a given function. @param fromMap original map with keys of type K and values of type V1 @param function transformation function to apply to each value @return new map with transformed values of type V2
1417 Adds a specified number of occurrences of an element to the multiset. @param element the element to add @param occurrences the number of times to add the element, must be non-negative @return the count of the element before adding occurrences
1418 Adds occurrences of an element to the multiset. @param element the element to add @param occurrences number of occurrences to add @return previous count of the element or 0 if not present
1419 Transforms entries in a ListMultimap using a specified transformer. @param fromMap original ListMultimap with keys of type K and values of type V1 @param transformer function to transform entries from V1 to V2 @return new ListMultimap with transformed values of type V2
1420 Transforms values in a multimap using a given function. @param fromMultimap original multimap with K keys and V1 values @param function transformation function from V1 to V2 @return new multimap with transformed V2 values
1421 Adds all elements from the given iterable to the builder. @param elements iterable containing elements to add @return this builder instance for method chaining
1422 Adds all elements from the collection to the multiset. @param self target multiset to add elements to @param elements collection of elements to be added @return true if any element was added, false otherwise
1423 Checks if input is contained. @param input element to check @return true if input is contained, false otherwise
1424 Collects elements into a table. @param rowFunction extracts the row key from an element @param columnFunction extracts the column key from an element @param valueFunction extracts the value from an element @param tableSupplier supplies the table instance to collect into @return a Collector that accumulates elements into a Table
1425 Escapes special characters in a string. @param s the input string to escape @param index starting index for escaping @return escaped string
1426 Initializes a StandardNetwork with specified builder and connection maps. @param builder configuration for network properties @param nodeConnections map of nodes to their connections @param edgeToReferenceNode map of edges to reference nodes
1427 Constructs a StandardValueGraph with specified builder and connections. @param builder graph configuration settings @param nodeConnections map of nodes to their connections @param edgeCount total number of edges in the graph
1428 Copies data from a Readable source to an Appendable destination. @param from the source Readable object (e.g., Reader) @param to the destination Appendable object (e.g., Writer, StringBuilder) @return the number of characters copied @throws IOException if an I/O error occurs during copying
1429 Decodes a CharSequence to a byte array. @param chars the input character sequence @return the decoded byte array @throws IllegalArgumentException if decoding fails
1430 Computes the smallest power of two greater than or equal to x. @param x input number @return smallest power of two >= x
1431 Returns the largest power of two less than or equal to x. @param x the input number @return largest power of two <= x
1432 Creates an Invokable from a Constructor. @param constructor the Constructor to use @return Invokable that can invoke the Constructor
1433 Creates an Invokable instance from a Method. @param method the Method to be wrapped @return Invokable object representing the method
1434 Completes a future by releasing waiters, interrupting tasks, and executing listeners. @param param the AbstractFuture to complete @param callInterruptTask whether to interrupt the task associated with the future
1435 Adds a delta to the current value associated with the key. @param key the key with which the resulting value is to be associated @param delta the value to add @return the updated value
1436 Atomically adds a delta to the current value for a key. @param key the key with which the associated value is to be updated @param delta the value to add @return the previous value before addition
1437 Adds all entries from the specified map to this map. @param m the map whose entries are to be added
1438 Initializes a graph builder with directionality. @param directed true if the graph is directed, false otherwise
1439 Adds a listener with an associated executor. @param listener the listener to be added @param executor the executor for handling events
1440 Converts object A to B. @param a source object, may be null @return converted object B or null if conversion fails
1441 Initializes a new CompactHashMap with default size.
1442 Initializes a CompactHashMap with an expected size. @param expectedSize approximate number of entries to store
1443 Initializes a new CompactHashSet with default size.
1444 Initializes a new CompactHashSet with the specified expected size. @param expectedSize the approximate number of elements to store
1445 Returns the simple name of the class without package or enclosing class names. @return Simple class name as String
1446 Constructs an AbstractSortedSetMultimap using the provided map. @param map backing map to store multimap data
1447 Creates a new Multimap from a given map and collection factory. @param map the backing map to use for storing keys and values @param factory supplier for creating collections to hold values @return a new Multimap instance
1448 Creates a new empty HashMultiset. @return an empty HashMultiset instance
1449 Creates a new empty LinkedHashMultiset. @param <E> element type, can be null @return an empty LinkedHashMultiset instance
1450 Creates an EnumMultiset from an iterable of enum elements. @param elements the iterable containing enum values @param type the class of the enum type @return a new EnumMultiset with the specified elements
1451 Calculates the population standard deviation. @return the standard deviation as a double
1452 Calculates the sample standard deviation. @return the calculated standard deviation as a double
1453 Calculates the population standard deviation. @return the population standard deviation as a double
1454 Calculates the sample standard deviation. @return the sample standard deviation as a double
1455 Returns a matcher that matches none of the characters in the given sequence. @param sequence the characters to exclude @return CharMatcher object that excludes all characters in sequence
1456 Creates a string converter to the specified case format. @param targetFormat the desired case format @return a Converter instance for converting strings
1457 Composes this converter with another. @param secondConverter to apply after this one @return composed Converter from A to C
1458 Returns a converter that reverses this conversion. @return Converter from B to A
1459 Creates a converter from String to Enum. @param enumClass Class of the Enum type @return Converter instance for the specified Enum class
1460 Creates a converter from a bidirectional map. @param bimap bidirectional map to convert @return Converter instance for the given bimap
1461 Checks equality with another object using standard equals implementation. @param object the object to compare with @return true if equal, false otherwise
1462 Creates a ConcurrentHashMultiset from an iterable of elements. @param elements the source iterable containing elements to add @return a new ConcurrentHashMultiset with the specified elements
1463 Appends array of objects to an Appendable. @param appendable destination for appending @param parts array of objects to append @return the same Appendable instance @throws IOException if an I/O error occurs
1464 Appends elements from iterable to StringBuilder. @param builder target StringBuilder @param parts iterable source of elements @return the modified StringBuilder
1465 Joins elements from an iterator into a single string. @param parts iterator of objects to join @return concatenated string of all elements
1466 Joins map entries into a string. @param map input map with key-value pairs @return concatenated string of map entries
1467 Returns string representation of object. Uses helper to add parsable string value.
1468 Generates a string representation of the object. Includes non-default field values in lowercase for strength attributes. @return formatted string with object's fields
1469 Generates a string representation of the cache configuration. @return String describing cache settings
1470 Initializes a MapMakerInternalMap with specified builder settings. @param builder configuration options for the map @param entryHelper helper for managing entries
1471 Converts a Java Util Optional to a Guava Optional. @param javaUtilOptional the Java Util Optional to convert @return Guava Optional or null if input is null
1472 Creates a HostAndPort instance from host and port. @param host hostname or IP address @param port port number @return HostAndPort object with specified host and port
1473 Creates HostAndPort from host string without port. @param host hostname string @return HostAndPort object without port
1474 Retrieves an element from the iterable at the specified position. @param iterable the collection of elements @param position the index of the element to retrieve @return the element at the given position or throws IndexOutOfBoundsException if out of bounds
1475 Creates a copy of the Bloom filter. @return A new BloomFilter instance with the same configuration and data
1476 Acquires a specified number of permits and waits if necessary. @param permits number of permits to acquire @return time waited in seconds
1477 Attempts to acquire permit within specified timeout. @param timeout maximum time to wait @return true if acquired, false otherwise
1478 Attempts to acquire permit within specified time. @param timeout maximum time to wait for acquisition @param unit time unit of the timeout parameter @return true if acquired, false otherwise
1479 Attempts to acquire specified number of permits without waiting. @param permits number of permits to acquire @return true if acquired, false otherwise
1480 Attempts to acquire permit immediately. @return true if acquired, false otherwise
1481 Attempts to acquire specified permits with timeout. @param permits number of permits to acquire @param timeout maximum time to wait for permits @return true if permits acquired, false otherwise
1482 Attempts to acquire lock with a specified timeout. @param time duration of the timeout @param unit time unit for the timeout @return true if lock acquired, false otherwise
1483 Protected constructor for AbstractService.
1484 Checks if the heap structure is intact. @return true if all elements verify their index, false otherwise
1485 Configures and returns a CacheBuilder with specified settings.
1486 Configures the MapMaker to use weak keys. @param mapMaker the original MapMaker instance @return the configured MapMaker with weak keys enabled
1487 Checks if the current state matches the expected state. Throws an exception if the states do not match, with a specific message for FAILED state. @param expected the expected state of the service
1488 Retrieves element at specified row and column indices. @param rowIndex index of the row @param columnIndex index of the column @return value at the specified position or null if out of bounds
1489 Sets a value at specified row and column. @param rowIndex index of the row @param columnIndex index of the column @param value new value to set, can be null @return old value at the specified position
1490 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
1491 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
1492 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
1493 Finds index of first matching character in sequence starting from given position. @param sequence the CharSequence to search within @param start the starting index for the search @return index of first match or -1 if no match found
1494 Initializes an iterator with given size and position. @param size total number of elements in the list @param position current index position of the iterator
1495 Creates a new ByteArrayDataInput starting from a given position. @param bytes source byte array @param start starting index in the byte array @return ByteArrayDataInput for reading data
1496 Checks if byte array is well-formed. @param bytes the byte array to check @param off the starting offset in the array @param len the length of the section to check @return true if well-formed, false otherwise
1497 Copies elements from source array to destination array. @param src source array containing elements @param offset starting index in source array @param len number of elements to copy @param dst destination array for copied elements @return the destination array with copied elements
1498 Copies a portion of an object array to a new array. @param elements source array @param offset starting index in the source array @param length number of elements to copy @return new Object array containing copied elements or empty if length is 0
1499 Writes byte array to destination. @param dest target byte array @param offset starting position in the array @param maxLength maximum bytes to write @return number of bytes written
1500 Encodes a byte array segment into a string. @param bytes source byte array @param off starting offset in the byte array @param len number of bytes to encode @return encoded string representation
1501 Reads bytes from an input stream into a byte array. @param in the InputStream to read from @param b the destination buffer @param off the offset in the buffer where reading starts @param len the maximum number of bytes to read @return the total number of bytes read, or -1 if no more bytes are available
1502 Reverses elements in a boolean array between specified indices. @param array the boolean array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1503 Reverses elements in a byte array between specified indices. @param array the byte array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1504 Reverses a portion of a character array. @param array the character array to reverse @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1505 Reverses elements in a double array between specified indices. @param array the array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1506 Reverses elements in a float array between two indices. @param array the array to be reversed @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1507 Returns a subarray from startIndex to endIndex. @param startIndex inclusive starting index @param endIndex exclusive ending index @return ImmutableDoubleArray representing the subarray
1508 Returns a subarray from startIndex to endIndex. @param startIndex starting index (inclusive) @param endIndex ending index (exclusive) @return ImmutableIntArray representing the subarray
1509 Returns a subarray from startIndex to endIndex. @param startIndex inclusive starting index @param endIndex exclusive ending index @return ImmutableLongArray containing the specified range
1510 Reverses elements in the given array between specified indices. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1511 Reverses elements in a portion of the array. @param array array to reverse @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1512 Reverses elements in a short array between given indices. @param array the array to reverse @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive)
1513 Sorts a subarray of bytes in ascending order. @param array the byte array to sort @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1514 Sorts a subarray in descending order. @param array the byte array to sort @param fromIndex the start index of the subarray (inclusive) @param toIndex the end index of the subarray (exclusive)
1515 Sorts a subarray in ascending order. @param array the array to be sorted @param fromIndex the starting index of the subarray (inclusive) @param toIndex the ending index of the subarray (exclusive)
1516 Sorts a portion of an array in descending order. @param array the array to sort @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1517 Sorts a portion of an array in ascending order. @param array the array to be sorted @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1518 Sorts a portion of the array in descending order. @param array the array to be sorted @param fromIndex the start index, inclusive @param toIndex the end index, exclusive
1519 Filters elements of a collection based on a predicate. @param unfiltered original collection to filter @param predicate condition to apply for filtering @return filtered collection supporting additional operations
1520 Creates a Splitter using a specified character separator. @param separator the character used to split strings @return a Splitter instance configured with the given separator
1521 Protected constructor for SleepingStopwatch.
1522 Initializes a Finalizer with reference class, queue, and phantom reference. @param finalizableReferenceClass Class of objects being finalized @param queue ReferenceQueue for tracking finalized objects @param frqReference PhantomReference that initiated the finalization process
1523 Constructs a new Builder instance.
1524 Creates a new Builder instance. @param <K> key type @param <V> value type @return Builder object for constructing instances
1525 Constructs a new Builder instance.
1526 Initializes an empty ForwardingSortedMultiset.
1527 Constructs an empty ForwardingDeque instance.
1528 Constructs a new instance of ForwardingBlockingQueue.
1529 Initializes an empty ForwardingSortedSet.
1530 Constructs a new ForwardingNavigableMap instance.
1531 Returns an unmodifiable view of the specified bi-map. @param bimap the bi-map to wrap @return an unmodifiable BiMap instance
1532 Creates a mutable map that associates classes with instances. @param <B> type of objects to be stored in the map @return a new MutableClassToInstanceMap instance
1533 Creates a MutableClassToInstanceMap from a given map. @param backingMap the initial map to back the instance @return a new MutableClassToInstanceMap instance
1534 Creates an empty ImmutableTypeToInstanceMap. @return an empty map with no key-value pairs
1535 Constructs a new empty ForwardingSortedSetMultimap.
1536 Returns an unmodifiable view of the specified multimap. @param delegate the original multimap to wrap @return an unmodifiable Multimap instance
1537 Returns an unmodifiable view of the specified table. @param table the table to wrap @return an unmodifiable Table instance
1538 Wraps a given future to execute callbacks in a specified thread pool. @param future the original Future object @param executor Executor to run listeners @return ListenableFuture with callbacks executed in the provided executor
1539 Retrieves value associated with key if present. @param key key to search for @return value or null if not found
1540 Retrieves value by key using a loader if not present. @param key unique identifier for the value @param valueLoader function to load value if missing @return loaded or cached value @throws ExecutionException if loading fails
1541 Retrieves all present entries for the given keys. @param keys iterable of key objects @return ImmutableMap containing present key-value pairs
1542 Stores a key-value pair in the underlying data structure. @param key unique identifier for the value @param value object to be stored
1543 Adds all entries from the specified map to this map. @param m the map whose mappings are to be added
1544 Invalidates all entries for given keys. @param keys iterable collection of keys to invalidate
1545 Creates a new reference entry. @param segment the segment for this entry @param key the key of the entry @param hash the hash code of the key @param next the next entry in the chain @return a new ReferenceEntry instance
1546 Creates a new entry for a specified segment and key. @param segment the segment to which the entry belongs @param key the key of the new entry @param hash the hash code of the key @param next reference to the next entry in the chain @return the newly created ReferenceEntry object
1547 Creates a new entry in a segment. @param segment the segment to add the entry to @param key the key for the entry @param hash the hash code of the key @param next the next entry in the chain @return the newly created ReferenceEntry object
1548 Creates a new entry in a segment. @param segment target segment for the entry @param key entry key @param hash hash code of the key @param next reference to the next entry @return newly created ReferenceEntry object
1549 Creates a new entry in the specified segment. @param segment the segment to add the entry to @param key the key for the new entry @param hash the hash code of the key @param next reference to the next entry in the chain @return the newly created ReferenceEntry object
1550 Creates a new entry for a segment. @param segment the segment to add the entry to @param key the key of the entry @param hash the hash code of the key @param next the next entry in the chain @return the newly created ReferenceEntry
1551 Updates the value of a cache entry. @param entry the cache entry to update @param key the key associated with the entry @param value the new value for the entry @param now the current timestamp
1552 Returns the number of elements in the delegate collection. @return size of the collection
1553 Calculates total edge count by summing node degrees. @return Total number of edges in the graph
1554 Converts an InputStream to a byte array. @param in input stream to read from @return byte array containing the data from the input stream @throws IOException if an I/O error occurs
1555 Reads input stream into a byte array with expected size. @param in input stream to read from @param expectedSize expected number of bytes to read @return byte array containing data read from the stream @throws IOException if an I/O error occurs
1556 Initializes an AbstractBiMap with specified forward and backward maps. @param forward map from keys to values @param backward map from values to keys
1557 Removes all values associated with the given key. @param key the key whose values are to be removed @return a list of removed values, or an empty list if none were present
1558 Replaces values for a given key. @param key the key to replace values for @param values new values to associate with the key @return unmodifiable collection of old values
1559 Removes all values associated with the specified key. @param key key whose mappings are to be removed @return a set of values that were removed, or an empty set if no mappings were present for this key
1560 Retrieves sorted set of values by key. @param key the key to look up @return SortedSet of values or empty set if key not found
1561 Converts object to string representation. @return string representation of the object
1562 Converts object to string using standard implementation. @return string representation of the object
1563 Creates a new HashMap with an initial capacity. @param expectedSize the estimated number of entries @return a HashMap instance
1564 Checks if a graph has cycles. @param graph the graph to check @return true if there is at least one cycle, false otherwise
1565 Creates a HashBasedTable with expected size. @param expectedRows estimated number of rows @param expectedCellsPerRow estimated cells per row @return a new HashBasedTable instance
1566 Creates a LinkedHashMap with an initial capacity. @param expectedSize the expected number of entries @return a new LinkedHashMap instance
1567 Creates a map based on specified type and expected size. @param <K> key type extending T @param <V> value type @param expectedSize initial capacity of the map @return Map instance with given characteristics
1568 Creates a HashSet with an initial capacity. @param expectedSize estimated number of elements @return HashSet with specified initial capacity
1569 Creates a LinkedHashSet with an initial capacity. @param expectedSize the number of elements expected to be added @return a new LinkedHashSet with the specified capacity
1570 Initializes service manager with given services. @param services collection of initial services
1571 Returns the first entry from the set. @return ImmutableEntry of the first element or null if empty
1572 Returns the last entry in the multiset. @return the last Entry or null if the multiset is empty
1573 Retrieves and removes the first entry from the set. @return ImmutableEntry object or null if set is empty
1574 Polls the last entry from the multiset. @return Immutable Entry or null if the multiset is empty
1575 Returns a set of entries from the multiset. @return Set of Multiset.Entry objects representing elements and their counts
1576 Returns a set of entries in the multiset. @return Set of Multiset.Entry objects representing elements and their counts
1577 Creates a TreeRangeSet from the given RangeSet. @param rangeSet input RangeSet to be converted @return TreeRangeSet containing all ranges from the input set
1578 Creates a TreeRangeSet from an iterable of ranges. @param ranges collection of Range objects to add @return TreeRangeSet containing all provided ranges
1579 Returns navigable map view of entries. @return NavigableMap with keys and collections of values
1580 Returns the set of all cells in the table. @return Set of Cell objects representing table entries
1581 Returns a collection of all values in the map. @return a collection containing all values
1582 Returns the reversed range. @return a new GeneralRange with bounds reversed
1583 Creates an immutable cell with specified row, column, and value. @param <R> type of the row key @param <C> type of the column key @param <V> type of the value @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value data stored in the cell @return immutable Cell object
1584 Returns an immutable set of elements. @return ImmutableSet containing all elements
1585 Adds a key-value pair to the builder. @param key unique key for the entry @param value associated value for the key @return this Builder instance for method chaining
1586 Creates an immutable map with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMap containing the specified entries
1587 Creates an immutable map with three entries. @param k1 key for the first entry @param v1 value for the first entry @param k2 key for the second entry @param v2 value for the second entry @param k3 key for the third entry @param v3 value for the third entry @return ImmutableMap containing three key-value pairs
1588 Creates an immutable map from four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return ImmutableMap containing the specified entries
1589 Creates an ImmutableMap with five key-value pairs. @param k1,k2,k3,k4,k5 keys for the map entries @param v1,v2,v3,v4,v5 values corresponding to each key @return ImmutableMap containing specified entries
1590 Creates an immutable map with six key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @param k5 fifth key @param v5 value for the fifth key @param k6 sixth key @param v6 value for the sixth key @return ImmutableMap containing the specified entries
1591 Creates an immutable map with seven entries. @param k1 key for the first entry @param v1 value for the first entry @param k2 key for the second entry @param v2 value for the second entry @param k3 key for the third entry @param v3 value for the third entry @param k4 key for the fourth entry @param v4 value for the fourth entry @param k5 key for the fifth entry @param v5 value for the fifth entry @param k6 key for the sixth entry @param v6 value for the sixth entry @param k7 key for the seventh entry @param v7 value for the seventh entry @return ImmutableMap containing the specified entries
1592 Creates an immutable map from up to 8 key-value pairs. @param k1,k2,...,k8 keys of the map @param v1,v2,...,v8 values corresponding to each key @return ImmutableMap containing specified entries
1593 Creates an immutable map with nine key-value pairs. @param k1,k2,...,k9 keys for the map entries @param v1,v2,...,v9 values corresponding to each key @return ImmutableMap containing the specified entries
1594 Creates an ImmutableMap from up to 10 key-value pairs. @param k1...k10 keys for the map entries @param v1...v10 values for the map entries @return ImmutableMap containing specified key-value pairs
1595 Creates an immutable map entry from a given entry. @param entry the original map entry to convert @return an ImmutableMapEntry object
1596 Adds an entry to the map. @param entry key-value pair to add @return this builder instance for method chaining
1597 Adds all entries to the builder. @param entries iterable of key-value pairs @return this Builder instance
1598 Adds an entry to the map. @param entry key-value pair to add @return this builder instance for chaining
1599 Filters a sorted set based on a predicate. @param unfiltered the original sorted set to filter @param predicate the condition to apply for filtering @return a new sorted set containing elements that match the predicate
1600 Trims the internal arrays to fit the current size. Adjusts hash tables and entries if necessary.
1601 Reduces the capacity of this set to fit its elements.
1602 Checks if the range is empty. @return true if lower and upper bounds are equal, false otherwise
1603 Checks equality with another Range. @param object the object to compare @return true if bounds match, false otherwise
1604 Adds an element to the end of the list. @param element the element to add @return always true
1605 Returns a standard iterator over elements. @return Iterator over the collection's elements
1606 Returns a list iterator over the elements in this list. @return ListIterator starting from the beginning of the list
1607 Finds the first node within the specified range. @return AvlNode if found, otherwise null
1608 Creates a new HashBasedTable from an existing Table. @param table the source Table to copy entries from @return a new HashBasedTable containing all entries from the source Table
1609 Creates a TreeBasedTable with natural ordering for rows and columns. @return TreeBasedTable instance with row and column order set to natural
1610 Creates a TreeBasedTable with specified row and column comparators. @param rowComparator comparator for row keys @param columnComparator comparator for column keys @return TreeBasedTable instance
1611 Creates a new HashBiMap with the specified expected size. @param expectedSize initial capacity for the map @return a new HashBiMap instance
1612 Creates a new builder instance. @param <K> key type @param <V> value type @return Builder object for constructing instances
1613 Constructor for the Builder class.
1614 Creates a builder with natural ordering. @return Builder instance configured for natural ordering
1615 Creates a builder with a specified key comparator. @param comparator key comparator for ordering @return Builder instance configured with the comparator
1616 Returns a builder with elements sorted in reverse natural order. @return Builder object configured for reverse ordering
1617 Creates an immutable map with one entry. @param k1 key for the entry @param v1 value for the entry @return ImmutableMap containing the single key-value pair
1618 Returns an immutable bimap with keys and values swapped. @return ImmutableBiMap with inverted key-value pairs
1619 Returns a new instance of Builder. @param <E> generic type parameter @return Builder object for constructing instances
1620 Creates a builder with a specified comparator for ordering. @param comparator the comparator to define order @return a Builder instance configured with the comparator
1621 Returns a Builder configured for reverse order. @return Builder instance with reverse order comparator
1622 Returns a Builder configured for natural ordering. @return Builder instance with natural ordering
1623 Returns a reversed version of the list. @return new ImmutableList with elements in reverse order
1624 Converts a string to an immutable list of characters. @param string input string @return ImmutableList of Character objects
1625 Creates an immutable list with a single element. @param e1 the sole element of the list @return an ImmutableList containing only e1
1626 Returns an immutable set of map entries. @return ImmutableSet of Entry objects representing the map's entries
1627 Creates an immutable set containing one element. @param e1 the single element in the set @return an ImmutableSet with the specified element
1628 Returns the character set from parameters. @return Optional containing Charset if found, otherwise absent
1629 Stops all managed services asynchronously. @return current instance of ServiceManager for chaining
1630 Checks if all services are running. @return true if all services are running, false otherwise
1631 Creates a Builder with an initial capacity. @param expectedSize estimated number of elements @return Builder instance initialized with the given size
1632 Adds all entries from the specified multimap. @param multimap source of entries to add @return this builder for chaining
1633 Throws a FileSystemException if file deletion fails. @param path the path of the file being deleted @param exceptions collection of IOExceptions encountered during deletion
1634 Concatenates multiple iterators into a single iterator. @param inputs variable number of input iterators @return an iterator that sequences the elements from all inputs
1635 Retrieves entry by key. @param key the key to look up @return the entry associated with the key, or null if not found
1636 Increments read count and triggers cleanup if threshold is reached.
1637 Checks if the map contains a key. @param key the key to check @return true if the map contains the key, false otherwise
1638 Returns a submap with keys between fromKey and toKey. @param fromKey inclusive lower bound @param toKey exclusive upper bound @return SortedMap containing the range of keys
1639 Computes the difference between two maps. @param left first map to compare @param right second map to compare @param valueEquivalence equivalence for comparing values @return MapDifference containing differences between the maps
1640 Computes the difference between two sorted maps. @param left first sorted map @param right second map @return SortedMapDifference containing differences
1641 Constructs an AsyncEventBus with a specified identifier and executor. @param identifier unique name for the event bus @param executor task executor for handling events asynchronously
1642 Initializes an AsyncEventBus with specified executor and exception handler. @param executor Executor to handle asynchronous tasks @param subscriberExceptionHandler Handler for exceptions thrown by subscribers
1643 Constructs an AsyncEventBus with a specified executor. @param executor Executor to handle asynchronous event dispatching
1644 Constructs an EventBus with a specified identifier. @param identifier unique name for the event bus
1645 Constructs an EventBus with a default configuration and custom exception handler. @param exceptionHandler handler for exceptions thrown by subscribers
1646 Finds the minimum child of a node at a given index. @param index the index of the parent node @return the index of the minimum child node
1647 Finds the minimum value among grandchildren of a node. @param index index of the current node @return minimum value among grandchildren or -1 if no valid grandchild exists
1648 Retrieves the last element without removing it. @return the last element or null if the deque is empty
1649 Bubbles up an element to maintain heap property. @param index starting index of the element @param x element to be bubbled up
1650 Checks if the collection contains the specified object. @param object the object to check for presence @return true if the object is present, false otherwise
1651 Adds an element to the collection. @param element the element to add @return always true
1652 Removes one occurrence of an element from the collection. @param element the object to be removed @return true if the element was successfully removed, false otherwise
1653 Clears all entries in the map.
1654 Counts occurrences of an object in the collection. @param object the object to count, can be null @return number of times the object appears, or 0 if not found
1655 Generates a hash code based on the entry set. @return The hash code of the entry set
1656 Returns string representation of entry set. @return String representation of entry set
1657 Converts this collection to an array. @param array target array to populate @return array containing elements of this collection
1658 Retrieves and removes the last element from the collection. @return the last element or null if the collection is empty
1659 Returns a subset of elements from `fromElement` (inclusive) to `toElement` (exclusive). @param fromElement the lower bound element (inclusive) @param toElement the upper bound element (exclusive) @return SortedSet containing elements within the specified range
1660 Retrieves the largest element less than the given element. @param e element to compare against @return largest element less than e or null if none exists
1661 Finds the greatest element less than or equal to the given element. @param e the element to compare against @return the greatest element less than or equal to e, or null if none exists
1662 Returns a view of the portion of this set whose elements are strictly less than the specified element. @param toElement upper bound (exclusive) for the returned set @return SortedSet containing elements less than toElement
1663 Finds the smallest element greater than or equal to the given element. @param e the element to compare against @return the found element or null if none exists
1664 Finds the next higher element in a sorted set. @param e current element to compare against @return next higher element or null if none exists
1665 Returns a subset of elements between specified bounds. @param fromElement lower bound element @param fromInclusive true if the fromElement is inclusive @param toElement upper bound element @param toInclusive true if the toElement is inclusive @return NavigableSet containing elements within the range
1666 Returns a view of the portion of this set whose elements are greater than or equal to fromElement. @param fromElement the lower bound (inclusive) @return SortedSet containing elements greater than or equal to fromElement
1667 Returns a sorted set of all row keys. @return SortedSet containing row keys
1668 Returns a sorted map of rows. @return SortedMap where key is row key and value is a map of column keys to values
1669 Wraps a Deque with synchronization. @param deque the Deque to be wrapped @return a synchronized Deque
1670 Initializes escaper with a map of replacements and safe character range. @param replacementMap mapping of characters to their escaped values @param safeMin minimum safe character value @param safeMax maximum safe character value
1671 Converts string builder to an escaper. @return Escaper object based on character array
1672 Constructs an escaper with specified replacements and safety range. @param replacementMap character to replacement string map @param safeMin minimum code point considered safe @param safeMax maximum code point considered safe @param unsafeReplacement default replacement for unsafe characters
1673 Creates a HashCode from a byte array. @param bytes input byte array @return HashCode object
1674 Converts a hexadecimal string to a HashCode. @param string hex-encoded input @return HashCode object
1675 Combines multiple hash codes into one, maintaining order. @param hashCodes iterable of HashCode objects to combine @return combined HashCode object
1676 Combines multiple unordered hash codes into one. @param hashCodes iterable of hash codes to combine @return combined HashCode object
1677 Creates an HMAC-MD5 hash function. @param key secret key for HMAC @return HashFunction instance using HmacMD5 algorithm
1678 Creates an HMAC-SHA1 hash function using a given key. @param key secret key for HMAC calculation @return HashFunction configured with HmacSHA1 algorithm
1679 Creates an HMAC-SHA256 hash function using a given key. @param key secret key for HMAC computation @return HashFunction instance for HMAC-SHA256
1680 Creates an HMAC-SHA-512 hash function. @param key secret key for HMAC calculation @return HashFunction instance using HmacSHA512 algorithm
1681 Wraps a byte array into a ByteSource. @param b the byte array to wrap @return a ByteSource object containing the provided bytes
1682 Wraps a CharSequence in an appropriate CharSource. @param charSequence the sequence to wrap @return CharSource instance based on the input type
1683 Writes multiple lines to output. @param lines iterable of character sequences to write @throws IOException if an I/O error occurs
1684 Writes lines to output using platform-specific line separator. @param lines stream of character sequences to be written
1685 Reads a BloomFilter from an InputStream. @param in InputStream containing the serialized BloomFilter @param funnel Funnel for hashing items of type T @return Deserialized BloomFilter object @throws IOException if reading fails
1686 Calculates the mean of numbers in an iterable. @param values iterable containing numeric values @return mean value as a double
1687 Computes the base-2 logarithm of a positive finite double with specified rounding mode. @param x the input value, must be positive and finite @param mode the rounding mode to apply @return the rounded integer log base 2 of x
1688 Detects hash flooding in a hash table. @param hashTable array representing the hash table @return true if hash flooding is detected, false otherwise
1689 Adds an element to the buffer if it meets criteria. @param elem element to add
1690 Returns a case-insensitive version of the alphabet. @return a new Alphabet object with case-insensitivity enabled
1691 Creates a selector for the smallest k elements. @param k number of top elements to select @param comparator comparison logic for elements @return TopKSelector configured for least elements
1692 Creates a selector for the top K greatest elements. @param k number of top elements to select @param comparator comparator to determine element order @return TopKSelector configured to find greatest elements
1693 Computes the linear transformation passing through two points. @param x2 second point's x-coordinate @param y2 second point's y-coordinate @return LinearTransformation object representing the line
1694 Computes the least squares linear fit for data points. @return LinearTransformation representing the best fit line or vertical/horizontal line if applicable
1695 Computes the least squares linear fit for data points. @return LinearTransformation representing the best fit line
1696 Checks if a number is prime. @param n the number to check @return true if n is prime, false otherwise
1697 Computes the base-10 logarithm of a BigInteger with specified rounding mode. @param x the BigInteger to compute the log for, must be positive @param mode the RoundingMode to apply @return the rounded base-10 logarithm of x
1698 Computes the binomial coefficient "n choose k". @param n total number of items @param k number of items to choose @return binomial coefficient or Long.MAX_VALUE if calculation overflows
1699 Calculates the mean of numbers in an iterable. @param values iterable collection of numbers @return mean value as a double
1700 Adds values to calculate statistical means and product of differences. @param x first value @param y second value
1701 Adds all numeric values from an iterable to the collection. @param values iterable containing numbers to be added
1702 Adds all elements from an iterator to the collection. @param values iterator of numbers to be added
1703 Adds all statistics from another Stats object. @param values the Stats object to add
1704 Merges statistics from another accumulator. @param values StatsAccumulator containing data to merge
1705 Selects the k-th smallest element in a subarray using quickselect. @param required index of the element to select (0-based) @param array the array to search within @param from starting index of the subarray @param to ending index of the subarray
1706 Adds all elements from the given DoubleStream. @param stream the DoubleStream to add elements from @return this Builder instance for method chaining
1707 Adds all double values from an iterable. @param values iterable containing double values to add @return the builder instance
1708 Adds all integers from the given stream. @param stream source of integers to add @return this Builder instance for chaining
1709 Adds all integers from an iterable to the builder. @param values iterable of integer values @return this Builder instance
1710 Adds all elements from a LongStream to the builder. @param stream source of long values @return this Builder instance for method chaining
1711 Deserializes the object from an input stream. @param s ObjectInputStream to read from @throws IOException if I/O error occurs @throws ClassNotFoundException if class not found during deserialization
1712 Adds all Long values from an Iterable to the builder. @param values iterable containing Long elements @return this Builder instance
1713 Parses a string to an integer. @param string the string to parse @return parsed integer or null if parsing fails
1714 Parses an unsigned integer from a string. @param string the string to parse @return UnsignedInteger object representing the parsed value
1715 Divides this unsigned long by another. @param val divisor as UnsignedLong @return quotient as UnsignedLong
1716 Converts a long integer to a string representation in the specified radix. @param x the number to convert @param radix the base to use for conversion (must be between Character.MIN_RADIX and Character.MAX_RADIX) @return the string representation of the number in the given radix
1717 Multiplies two numbers under modulo. @param a first number @param b second number @param m modulo value @return (a * b) % m
1718 Computes (a^2) % m. @param a base number @param m modulus @return result of (a squared) modulo m
1719 Computes modulo of this number with another. @param val divisor as UnsignedLong @return remainder as UnsignedLong
1720 Parses a string to an UnsignedLong. @param string the string representation of the number @return UnsignedLong object representing the parsed value
1721 Checks equality with another Entry. @param object the object to compare @return true if both key and value match, false otherwise
1722 Computes hash code based on key and value. @return combined hash code using XOR operation
1723 Generates a string representation of the key-value pair. @return formatted string in "key=value" format
1724 Checks if this Class represents an array. @return true if it's an array type, false otherwise
1725 Wraps ExecutorService with ListeningExecutorService. @param delegate original ExecutorService to be wrapped @return ListeningExecutorService instance
1726 Decorates a ScheduledExecutorService with Listening capabilities. @param delegate the original ScheduledExecutorService to be decorated @return a ListeningScheduledExecutorService
1727 Invokes any of the given tasks, returning the result of one that completes. @param executorService the executor service to use @param tasks the collection of tasks to execute @param timed true if a timeout is specified @param timeout the maximum time to wait for a task to complete @param unit the time unit of the timeout parameter @return the result of one of the completed tasks @throws InterruptedException if interrupted while waiting @throws ExecutionException if no task successfully completes @throws TimeoutException if timed and no task completes within the timeout
1728 Executes a callable asynchronously. @param combiner the callable to execute @param executor the executor to run the callable @return ListenableFuture representing the asynchronous computation result
1729 Combines results from multiple futures using a specified callable. @param combiner function to combine results @param executor to run the combiner @return ListenableFuture with combined result
1730 Checks if acquiring a lock is valid according to policy and order. @param policy the locking policy to apply @param acquiredLock the lock node that has been acquired
1731 Reloads value by key if old value matches. @param key unique identifier for the value @param oldValue current value to be replaced @return ListenableFuture with new loaded value
1732 Returns a future that completes with null without propagating cancellation. @return ListenableFuture that resolves to null
1733 Submits an asynchronous callable for execution with a given executor. @param callable the task to execute asynchronously @param executor the executor to run the task @return ListenableFuture representing the result of the callable
1734 Retrieves result from Future, throwing specified checked exception on error. @param validator validator for exception class @param future the Future to get the result from @param exceptionClass the checked exception class to throw @return result of the Future or null if not applicable @throws X the specified checked exception
1735 Retrieves result from Future with timeout, converting exceptions. @param future task to wait for @param exceptionClass class of exception to throw on failure @param timeout time to wait before timing out @param unit unit of timeout @return result of the future or null if checked type is nullable @throws X if future completes exceptionally or times out
1736 Releases a lock and signals the next waiter if only one hold is left.
1737 Waits for a condition with timeout, optionally signaling before waiting. @param guard the condition to wait on @param nanos maximum time to wait in nanoseconds @param signalBeforeWaiting whether to signal other waiters first @return true if condition is satisfied, false if timeout occurs
1738 Wraps a future with a timeout. @param delegate the original ListenableFuture @param time duration of the timeout @param unit TimeUnit for the timeout @param scheduledExecutor ScheduledExecutorService to handle timeouts @return ListenableFuture that times out after specified duration
1739 Schedules an asynchronous task with a specified delay. @param callable the task to execute asynchronously @param delay the delay before execution @param executorService the executor service to use for scheduling @return ListenableFuture representing the scheduled task
1740 Retrieves an enum constant if present. @param enumClass the Class object of the enum type @param value the string representation of the enum constant @return Optional containing the enum constant or empty if not found
1741 Finds an element in the iterable matching the predicate. @param iterable collection to search through @param predicate condition to match elements @return Optional containing the first matching element or empty if none found
1742 Checks if any element matches the given predicate. @param predicate condition to test elements against @return true if any element matches, false otherwise
1743 Creates a CharMatcher based on a precomputed BitSet. @param totalCharacters number of characters in the set @param table BitSet representing character presence @param description matcher description @return CharMatcher instance based on input parameters
1744 Propagates throwable if it's an instance of declared types. @param throwable the throwable to check and possibly throw @param declaredType1 first declared exception type @param declaredType2 second declared exception type @throws X1 if throwable is an instance of declaredType1 @throws X2 if throwable is an instance of declaredType2
1745 Rethrows a Throwable as a RuntimeException. @param e the Throwable to rethrow
1746 Rethrows a throwable as a runtime exception. @param e the throwable to rethrow @param declaredType the specific exception type to check against @throws IOException if the throwable is an IO exception @throws X if the throwable matches the declared type
1747 Closes all registered Closeables in LIFO order. Throws an IOException if any close operation fails.
1748 Creates a new thread with a specified name and runnable task. @param name thread name @param runnable task to execute @return created Thread object
1749 Filters keys in a SetMultimap based on a predicate. @param unfiltered original multimap to filter @param keyPredicate predicate for filtering keys @return filtered SetMultimap with only matching keys
1750 Filters entries in a SetMultimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate predicate for filtering entries @return a new filtered SetMultimap with matching entries
1751 Retrieves a declared annotation by type. @param annotationType the annotation class to search for @return the annotation instance or null if not found
1752 Merges multiple sorted iterators into a single unmodifiable iterator. @param iterators iterable of sorted iterators to merge @param comparator comparator for sorting elements @return UnmodifiableIterator containing merged elements
1753 Converts an Iterable to an array. @param iterable the source Iterable @return an Object array containing all elements from the Iterable
1754 Replaces values associated with a key. @param key the key to replace values for @param values the new values to associate with the key @return list of old values or empty list if none existed
1755 Removes all values associated with a given key. @param key the key whose values are to be removed @return list of values that were removed
1756 Creates a new thread-safe list initialized with the elements of the given iterable. @param elements iterable containing initial elements @return a new CopyOnWriteArrayList instance
1757 Creates a new thread-safe set from the given iterable. @param elements the iterable providing initial elements @return a new CopyOnWriteArraySet containing the elements
1758 Performs a binary search on a list. @param list the sorted list to search @param key the element to find @param comparator the comparator to use for comparison @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index based on search results
1759 Retrieves multiple objects by keys, optimizing for runs of identical stripes. @param keys iterable collection of key objects @return unmodifiable list of retrieved objects
1760 Returns a string representation of the graph. @return String containing graph properties and structure
1761 Returns string representation of graph. @return formatted string with graph properties and values
1762 Transforms entries of a NavigableMap using a given EntryTransformer. @param fromMap original map with keys of type K and values of type V1 @param transformer function to transform values from V1 to V2 @return new NavigableMap with transformed values
1763 Transforms values in a sorted map using a given function. @param fromMap original sorted map with keys of type K and values of type V1 @param function transformation function to apply to each value @return new sorted map with transformed values of type V2
1764 Adds a specified number of occurrences of an element. @param element the element to add @param occurrences the number of times to add the element @return the count of the element before adding
1765 Adds a specified number of occurrences of an element to the multiset. @param element the element to add @param occurrences the number of times to add the element @return the count of the element before adding
1766 Transforms values in a ListMultimap. @param fromMultimap original multimap with K keys and V1 values @param function transformation function from V1 to V2 @return new ListMultimap with transformed V2 values
1767 Adds all elements from the specified collection to this multiset. @param elementsToAdd collection of elements to add @return true if any element was added, false otherwise
1768 Adds all elements from the specified collection. @param elementsToAdd collection of elements to add @return true if this set changed as a result of the call
1769 Returns a thread-safe view of the specified multimap. @param multimap the multimap to wrap @return a synchronized Multimap
1770 Wraps a table with synchronization. @param table the table to be wrapped @return a synchronized version of the table
1771 Escapes special characters in a string. @param string input to be escaped @return escaped string or original if no escaping needed
1772 Converts a Readable to a StringBuilder. @param r the Readable object to convert @return StringBuilder containing content from Readable @throws IOException if an I/O error occurs
1773 Wraps a future to handle exceptions. @param input the original future @param exceptionType type of exception to catch @param fallback function to compute recovery value @param executor for running fallback @return future with exception handling
1774 Cancels the future task. @param mayInterruptIfRunning true if the thread executing this task should be interrupted @return true if the task was successfully cancelled, false otherwise
1775 Sets the value atomically. @param value the value to set, may be null @return true if successful, false otherwise
1776 Sets exception for this instance. @param throwable the exception to set @return true if successfully set, false otherwise
1777 Sets a future value or delegates to another future. @param future the future to set or delegate to @return true if successful, false otherwise
1778 Transforms the result of a future using a given function. @param input Future whose result to transform @param function Transformation function applied to the input's result @param executor Executor to run the transformation @return ListenableFuture with transformed result
1779 Increments the value associated with the given key by one. @param key the key to increment @return the updated value after incrementing
1780 Decrements the value associated with the given key by 1. @param key the key whose value is to be decremented @return the updated value after decrementing
1781 Atomically increments the value associated with the given key. @param key the key whose associated value is to be incremented @return the previous value before incrementing
1782 Retrieves and decrements the value associated with the given key. @param key the key to retrieve and decrement @return the original value before decrementing
1783 Creates an AtomicLongMap from a given map. @param m input map with keys of type K and values of type Long @return AtomicLongMap containing entries from the input map
1784 Initializes a new GraphBuilder instance. @param directed true if the graph is directed, false otherwise
1785 Constructs a NetworkBuilder with directionality. @param directed true for directed graphs, false otherwise
1786 Initializes a new ValueGraphBuilder. @param directed true if the graph is directed, false otherwise
1787 Adds a listener with an associated executor. @param listener the listener to be added @param executor the executor to handle events for this listener
1788 Applies conversion to input value. @param a input value to be converted @return converted value @deprecated Use {@link #convert(A)} instead
1789 Creates an empty CompactHashMap instance. @param <K> key type, can be nullable @param <V> value type, can be nullable @return new CompactHashMap object
1790 Creates a CompactHashMap with an estimated size. @param expectedSize initial capacity hint for the map @return CompactHashMap instance initialized with the expected size
1791 Creates a new empty CompactHashSet. @param <E> element type, can be null @return an empty CompactHashSet instance
1792 Creates a CompactHashSet with an expected size. @param expectedSize initial capacity hint @return CompactHashSet instance initialized with the specified size
1793 Creates a new ListMultimap from a given map and list supplier. @param map the input map with keys and collections of values @param factory supplier for creating lists to hold values @return a new ListMultimap instance
1794 Creates a new set multimap from a map and a supplier. @param map the backing map of key to collection of values @param factory supplies sets for each key's values @return a new set multimap backed by the given map and factory
1795 Initializes a new builder with an empty LinkedHashMultiset.
1796 Combines this converter with another. @param secondConverter next converter in chain @return combined Converter from A to C
1797 Appends array elements to StringBuilder. @param builder target StringBuilder @param parts array of objects to append @return the updated StringBuilder
1798 Joins elements of an iterable into a single string with a separator. @param parts iterable containing elements to join @return joined string or empty string if no elements
1799 Creates a map based on key and value strength. @param builder configuration for the map @return InternalMap instance with specified strengths
1800 Creates a MapMakerInternalMap with dummy values. @param builder MapMaker configuration @return MapMakerInternalMap instance based on key strength
1801 Concatenates multiple iterables into a single iterable. @param inputs variable number of input iterables @return FluentIterable containing all elements from the inputs
1802 Retrieves element at specified position. @param position index of the element to retrieve @return element at the given position
1803 Acquires one unit with default settings. @return acquired amount (always 1.0)
1804 Enters the lock with a specified duration. @param time the maximum time to wait @return true if the lock was acquired, false otherwise
1805 Attempts to enter a monitor and check a condition. @param guard the condition guard @param time maximum wait time @param unit time unit for the wait time @return true if entered and condition is satisfied, false otherwise
1806 Creates a CacheBuilder instance from a specification. @param spec configuration for the cache builder @return CacheBuilder object with lenient parsing enabled
1807 Creates a strong interner. @return StrongInterner instance
1808 Creates a weak interner. @return Interner that uses weak references for caching
1809 Sets a value at the specified row and column. @param rowKey unique identifier for the row @param columnKey unique identifier for the column @param value value to be set @return previous value at the specified position or null if not present
1810 Removes the value at the specified row and column keys. @param rowKey key identifying the row @param columnKey key identifying the column @return removed value or null if not found
1811 Checks equality with another ImmutableDoubleArray. @param object the other array to compare @return true if arrays are equal, false otherwise
1812 Checks equality with another ImmutableIntArray. @param object the object to compare @return true if equal, false otherwise
1813 Checks equality with another ImmutableLongArray. @param object the other array to compare @return true if arrays are equal, false otherwise
1814 Converts a string from one case format to another. @param format target case format @param s input string @return converted string
1815 Finds the first occurrence of this string in the given sequence. @param sequence the CharSequence to search within @return the index of the first occurrence or -1 if not found
1816 Initializes an iterator with a specified size and starting index. @param size total number of elements in the list
1817 Extracts Teredo information from an IPv6 address. @param ip the Teredo IPv6 address @return TeredoInfo object containing server, client, and port details
1818 Checks if byte array is well-formed. @param bytes input byte array @return true if well-formed, false otherwise
1819 Encodes byte array to string. @param bytes input byte array @return encoded string representation
1820 Reads exactly the specified number of bytes from input stream. @param in InputStream to read from @param b byte array to store data @param off offset within the byte array @param len number of bytes to read @throws IOException if I/O error occurs or end of stream reached prematurely
1821 Reverses the elements of a boolean array. @param array the array to be reversed
1822 Rotates a portion of a boolean array. @param array the array to rotate @param distance number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1823 Reverses the elements of a byte array. @param array the byte array to be reversed
1824 Rotates a portion of an array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1825 Sorts a byte array in descending order within a specified range. @param array the byte array to sort @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1826 Sorts a portion of the char array in descending order. @param array the char array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1827 Reverses the elements of the given character array. @param array the array to be reversed
1828 Rotates a portion of an array by a given distance. @param array the array to rotate @param distance the number of positions to rotate @param fromIndex the starting index of the range to rotate @param toIndex the ending index (exclusive) of the range to rotate
1829 Sorts a portion of an array in descending order. @param array the double array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1830 Reverses elements in the given double array. @param array the array to be reversed; must not be null
1831 Rotates a portion of an array by a specified distance. @param array the array to rotate @param distance number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1832 Sorts a portion of the array in descending order. @param array the array to sort @param fromIndex the start index (inclusive) @param toIndex the end index (exclusive)
1833 Reverses elements in the given float array. @param array the float array to be reversed; must not be null
1834 Rotates a section of an array by a specified distance. @param array the array to rotate @param distance number of positions to rotate @param fromIndex start index of the rotation range (inclusive) @param toIndex end index of the rotation range (exclusive)
1835 Sorts a portion of an array in descending order. @param array the array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1836 Reverses elements of the given integer array. @param array array to be reversed
1837 Rotates a portion of an array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate elements @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1838 Sorts a portion of an array in descending order. @param array the array to sort @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1839 Reverses elements in the given array. @param array array to be reversed
1840 Rotates a portion of an array by a specified distance. @param array the array to rotate @param distance the number of positions to rotate @param fromIndex the starting index (inclusive) @param toIndex the ending index (exclusive)
1841 Sorts a portion of a short array in descending order. @param array the array to be sorted @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1842 Reverses elements of a short array. @param array the array to be reversed
1843 Rotates a portion of an array by a specified distance. @param array the array to rotate @param distance number of positions to rotate @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
1844 Sorts a byte array in ascending order. @param array the byte array to be sorted
1845 Sorts byte array in descending order. @param array byte array to be sorted
1846 Sorts an integer array using a sorting algorithm. @param array the array to be sorted
1847 Sorts an integer array in descending order. @param array the array to be sorted
1848 Sorts an array of long integers in ascending order. @param array the array to be sorted
1849 Sorts an array in descending order. @param array the array to be sorted
1850 Creates a Splitter for the specified separator. @param separator string used to split input strings @return Splitter object configured with the given separator
1851 Sets key-value separator. @param separator character to separate keys and values @return MapSplitter instance with specified separator
1852 Starts a finalizer thread for handling phantom references. @param finalizableReferenceClass class used for finalization logic @param queue reference queue for tracking phantom references @param frqReference phantom reference for detecting class loader garbage collection
1853 Returns a new Builder instance. @param <K> key type @param <V> value type @return Builder object for constructing instances
1854 Returns a new instance of Builder. @param <K> key type @param <V> value type @return Builder object
1855 Returns an unmodifiable view of the specified multiset. @param multiset the multiset to wrap @return an unmodifiable Multiset instance
1856 Creates an EvictingQueue with a specified maximum size. @param maxSize the maximum number of elements the queue can hold @return an EvictingQueue instance initialized with the given max size
1857 Constructs an empty ForwardingBlockingDeque instance.
1858 Constructs an empty ForwardingBlockingDeque instance.
1859 Constructs a new ForwardingNavigableSet instance.
1860 Returns an unmodifiable view of the specified entry set. @param entrySet the set of map entries to be wrapped @return an unmodifiable set view of the given entry set
1861 Returns an unmodifiable view of the specified navigable map. @param map the navigable map to wrap @return an unmodifiable navigable map
1862 Returns an unmodifiable view of the specified ListMultimap. @param delegate original ListMultimap to wrap @return unmodifiable ListMultimap
1863 Returns an unmodifiable view of the specified set multimap. @param delegate the original set multimap to wrap @return an unmodifiable set multimap backed by the given multimap
1864 Returns an unmodifiable view of the specified row sorted table. @param table the row sorted table to wrap @return an unmodifiable RowSortedTable
1865 Wraps a Future in a ListenableFuture. @param future the original Future to be wrapped @return a ListenableFuture for the given Future
1866 Adds a callback to a listenable future. @param future the future to attach the callback to @param callback the callback to execute upon completion @param executor the executor to run the callback on
1867 Initializes a LocalCache with specified parameters. @param builder cache configuration builder @param loader optional cache loader for lazy loading entries
1868 Creates a TreeMultiset with natural ordering. @return TreeMultiset instance sorted by natural order
1869 Creates a TreeMultiset with an optional comparator. @param comparator custom comparator or null for natural ordering @return TreeMultiset instance
1870 Replaces values associated with a key. @param key the key to associate with new values @param values iterable of new values to be associated with the key @return list of old values replaced by new ones
1871 Replaces all values for a given key. @param key the key whose associated values are to be replaced @param values the iterable providing new values @return the set of old values associated with the key
1872 Removes all values associated with the specified key. @param key the key whose mapped values are to be removed @return a sorted set of removed values, possibly empty
1873 Creates a HashMultiset with specified capacity. @param distinctElements initial capacity for distinct elements @return HashMultiset instance initialized with given capacity
1874 Checks for cycles in a network. Returns true if a cycle exists. @param network the graph-like structure to check @return boolean indicating presence of a cycle
1875 Creates a LinkedHashMultiset with a specified capacity. @param distinctElements initial capacity for distinct elements @return LinkedHashMultiset instance
1876 Initializes a network with specified builder and default configurations. @param builder configuration for network construction
1877 Constructs a StandardValueGraph using the provided builder. @param builder configuration for graph construction
1878 Creates a new hash set with an expected size. @return HashSet initialized with expected capacity
1879 Creates a new linked hash set with expected size. @return LinkedHashSet with specified capacity
1880 Adds a cell with specified row and column keys and value. @param rowKey key for the row @param columnKey key for the column @param value value to store in the cell @return this Builder instance for method chaining
1881 Adds a key-value pair to the map. @param key the key to add @param value the value associated with the key @return this Builder instance for chaining
1882 Adds a key-value pair to the map. @param key class type of the key @param value instance of the value @return current Builder instance for chaining
1883 Adds all entries from the given map to the builder. @param map map containing class-type keys and corresponding values @return this Builder instance for method chaining
1884 Adds an entry to the builder. @param entry key-value pair to add @return this builder instance
1885 Adds a key-value pair to the map. @param key unique identifier for the value @param value associated with the key @return current Builder instance
1886 Adds an entry to the builder map. @param key class type of the value @param value instance to be added @return this Builder instance
1887 Adds a key-value pair to the builder. @param key TypeToken representing the key @param value the value associated with the key @return the Builder instance for chaining
1888 Adds all entries to this map. @param entries iterable of key-value pairs to add @return current builder instance for method chaining
1889 Adds all entries to the builder. @param entries iterable containing key-value pairs @return this builder instance for method chaining
1890 Filters a NavigableSet based on a predicate. @param unfiltered the original NavigableSet to filter @param predicate the condition to apply for filtering elements @return a new FilteredNavigableSet containing only elements that match the predicate
1891 Builds and returns an immutable sorted map. @return ImmutableSortedMap object with entries based on comparator
1892 Adds a key-value pair to the builder. @param range non-empty range of keys @param value associated value @return this Builder instance for method chaining
1893 Adds a non-empty range to the builder. @param range the range to add @return this Builder instance
1894 Computes intersection of two connected ranges. @param connectedRange another Range object to intersect with @return Range representing intersection or throws IllegalArgumentException if disconnected
1895 Calculates the gap between two ranges. @param otherRange the range to compare with @return a new Range representing the gap or throws if ranges overlap
1896 Returns the smallest range that encloses both this and another range. @param other the range to combine with @return a new Range enclosing both ranges
1897 Returns a canonical Range with bounds adjusted to the domain. @param domain discrete domain for bounds adjustment @return canonical Range object
1898 Creates a new empty HashBiMap with an initial capacity of 16. @return a new HashBiMap instance
1899 Creates a HashBiMap from the given map. @param map source map to initialize the bi-map with @return HashBiMap containing entries from the provided map
1900 Returns a new instance of Builder. @param <B> type parameter for the builder @return Builder object for constructing instances
1901 Creates an ImmutableClassToInstanceMap with a single entry. @param type Class of the value @param value Instance to be mapped @return ImmutableClassToInstanceMap containing the specified type and value
1902 Returns an immutable set of all values in the map. Uses the inverse map's key set to derive the values. @return ImmutableSet containing all values
1903 Reverses the given list. @param list the list to reverse @return a new list with elements in reverse order
1904 Creates an immutable list from the given array. @param elements array of elements to include in the list @return ImmutableList containing the elements
1905 Converts an array to an immutable list. @param elements source array of objects @param length number of valid elements in the array @return ImmutableList containing elements up to specified length
1906 Returns a sublist from the specified range. @param fromIndex start index (inclusive) @param toIndex end index (exclusive) @return ImmutableList containing elements from fromIndex to toIndex
1907 Creates an immutable range map with a single entry. @param range key range for the map entry @param value value associated with the range @return ImmutableRangeMap containing the specified range and value
1908 Creates an ImmutableRangeSet from a single range. @param range the range to include in the set @return an ImmutableRangeSet containing the specified range
1909 Creates an immutable sorted map with one entry. @param comparator key comparator @param k1 key for the entry @param v1 value for the entry @return ImmutableSortedMap containing the single entry
1910 Creates an immutable set from an array. @param elements the source array of elements @return an ImmutableSet containing the elements
1911 Returns a new instance of Builder. @param <E> type parameter for the builder @return Builder instance
1912 Concatenates two iterators. @param a first iterator @param b second iterator @return combined iterator of elements from both
1913 Concatenates three iterators into one. @param a first iterator @param b second iterator @param c third iterator @return Iterator containing elements from a, b, and c in sequence
1914 Concatenates four iterators into one. @param a,b,c,d iterators to concatenate @return Iterator containing elements from all input iterators
1915 Retrieves subscribers for a given event. @param event the event object @return Iterator of Subscribers for the event and its superclasses/interfaces
1916 Retrieves the result of a future, throwing an exception if interrupted or failed. @param <D> the type of the result @param closingFuture the future to retrieve from @return the result of the future @throws ExecutionException if the computation threw an exception
1917 Checks if the map contains a value equivalent to the specified object. @param value the value to search for @return true if a matching value is found, false otherwise
1918 Removes and returns the value associated with the specified key. @param key the key whose mapping is to be removed @return the value associated with the key, or null if not found
1919 Clears all entries from the map.
1920 Checks if the map is empty. @return true if no entries are present, false otherwise
1921 Computes hash code using entry set. @return computed hash code
1922 Computes the difference between two maps. @param <K> key type @param <V> value type @param left first map @param right second map @return MapDifference object detailing differences
1923 Constructs an EventBus with the default name.
1924 Compares and swaps elements to maintain heap property. @param index current element index @param x element to compare and potentially swap @return new index after crossover or original index if no change
1925 Fills a hole at the given index by moving elements down. @param index position to start filling @return final index after filling the hole
1926 Checks if the set contains an element equal to the specified object. @param object the object to check for containment @return true if the set contains the object, false otherwise
1927 Removes an object from the set if present. @param object element to be removed @return true if the object was removed, false otherwise
1928 Returns a subset of elements between fromElement and toElement. @param fromElement lower bound (inclusive) @param toElement upper bound (exclusive) @return SortedSet containing elements in the specified range
1929 Returns sorted set of row keys. @return SortedSet containing all row keys
1930 Removes all values associated with the specified key. @param key the key whose associated values are to be removed @return a set of values that were removed, or an empty set if none were present
1931 Creates a Bloom filter with specified parameters. @param <T> type of elements to be added @param funnel defines how to extract bytes from objects @param expectedInsertions estimated number of insertions @param fpp false positive probability @return BloomFilter instance configured with given strategy
1932 Rounds a double value to an integer using specified rounding mode. @param x the value to round @param mode the RoundingMode to use @return the rounded integer value
1933 Rounds a double value to the nearest long using specified rounding mode. @param x the value to round @param mode the RoundingMode to use @return the rounded long value
1934 Adds all elements from the iterator to this collection. @param elements iterator of elements to add
1935 Creates a selector for the k smallest elements. @param k number of smallest elements to select @return TopKSelector configured to find least elements
1936 Creates a selector for the top K greatest elements. @param k number of top elements to select @return TopKSelector configured to find greatest elements
1937 Checks if a number is prime. @param n number to check @return true if n is prime, false otherwise
1938 Computes binomial coefficient C(n, k). @param n total number of items @param k number of items to choose @return BigInteger representing the binomial coefficient
1939 Calculates statistics from an iterable of numbers. @param values collection of numeric values @return Stats object containing calculated statistics
1940 Calculates statistics from an iterator of numbers. @param values iterator containing numeric data @return Stats object with calculated statistics
1941 Adds all stats from another PairedStats instance. @param values the PairedStats to add
1942 Calculates statistics from a stream of double values. @param values input DoubleStream of numeric data @return Stats object containing calculated statistics
1943 Computes statistics from an IntStream. @param values input stream of integers @return Stats object containing computed statistics
1944 Computes statistics from a stream of long values. @param values LongStream containing the data to analyze @return Stats object with computed statistics
1945 Adds all values from a DoubleStream to the accumulator. @param values stream of double values to be added
1946 Adds all integer values from an IntStream to a statistics accumulator. @param values stream of integers to be added
1947 Adds all values from a LongStream to the accumulator. @param values stream of long values to be added
1948 Selects elements in place based on specified ranges. @param allRequired array of required values @param requiredFrom start index in allRequired @param requiredTo end index in allRequired @param array target array to select elements from @param from start index in array @param to end index in array
1949 Creates an ImmutableDoubleArray from Iterable. @param values iterable source of double values @return ImmutableDoubleArray containing the values
1950 Creates an immutable array from given iterable. @param values iterable of integers @return ImmutableIntArray containing the elements
1951 Creates an immutable long array from iterable. @param values iterable source of long values @return ImmutableLongArray containing the elements
1952 Converts value to a string representation in the specified radix. @param radix numerical base (e.g., 2 for binary, 10 for decimal) @return string representation of the value in the given radix
1953 Converts a long to its string representation in base 10. @param x the number to convert @return string representation of the number
1954 Invokes any of the given tasks asynchronously. @param executorService service to execute tasks @param tasks collection of Callable tasks @param timed true if timeout is applied @param timeout maximum time to wait for task completion @return result of one of the completed tasks @throws InterruptedException if interrupted while waiting @throws ExecutionException if task execution fails @throws TimeoutException if no task completes within timeout
1955 Executes a Runnable task asynchronously. @param combiner the task to run @param executor the Executor to use for execution @return ListenableFuture representing the asynchronous computation
1956 Wraps a ListenableFuture in a ClosingFuture. @param future the ListenableFuture to wrap @return a ClosingFuture instance
1957 Polls and removes an element from the collection. @return the removed element, or null if empty
1958 Retrieves the first element without removing it. @return the first element or null if empty
1959 Submits a Callable task to an Executor and returns a ListenableFuture. @param callable the task to execute asynchronously @param executor the executor to run the task @return ListenableFuture representing the result of the callable
1960 Retrieves result from a future with a timeout. @param future the future to get the result from @param exceptionClass class of exception to throw if futures fails @param timeout time to wait for the result @param unit unit of timeout @return result of the future @throws X if future fails or times out
1961 Notifies the service has stopped. Updates state and enqueues termination event.
1962 Notifies of a failure with the given cause. @param cause the reason for the failure
1963 Starts timing for a service if not already started. @param service the service to start timing for
1964 Transitions a service from one state to another. @param service the service to transition @param from current state of the service @param to new state for the service
1965 Enters the monitor when guard condition is satisfied. @param guard condition to wait for @throws InterruptedException if interrupted while waiting
1966 Waits for a condition to be satisfied by a guard. @param guard the condition to wait for @throws InterruptedException if interrupted while waiting
1967 Enters when the guard condition is met uninterruptibly. @param guard condition to wait for
1968 Waits uninterruptibly until the guard condition is satisfied. @param guard the condition to wait for
1969 Attempts to enter when the guard condition is satisfied within a timeout. @param guard condition to wait for @param time maximum time to wait @param unit time unit for the timeout @return true if entered, false on timeout or interruption @throws InterruptedException if interrupted while waiting
1970 Enters a guarded section uninterruptibly with a timeout. @param guard condition to satisfy before entering @param time maximum wait time @param unit time unit for the timeout @return true if entered, false on timeout or interruption
1971 Waits for a condition to be satisfied within a specified time. @param guard the condition to wait for @param time the maximum time to wait @param unit the time unit of the timeout parameter @return true if the condition is satisfied, false otherwise @throws InterruptedException if the current thread is interrupted
1972 Waits uninterruptibly for a condition defined by a guard within a specified time. @param guard the condition to wait for @param time the maximum time to wait @param unit the time unit of the timeout parameter @return true if the condition is satisfied, false if timed out
1973 Sets a timeout for the future. @param timeout duration of the timeout @param unit time unit for the timeout @param scheduledExecutor executor to schedule the timeout @return FluentFuture with applied timeout
1974 Wraps a future with a timeout. @param delegate the original future task @param time maximum allowed time for completion @param scheduledExecutor executor to schedule the timeout @return future that completes with result or times out
1975 Finds the first element matching the predicate. @param predicate condition to test elements @return Optional containing the first matching element or empty if none found
1976 Creates a precomputed character matcher. Uses BitSet to efficiently represent character sets. Returns a positive or negated matcher based on character count.
1977 Rethrows a throwable as a runtime exception. @param e the throwable to rethrow @param declaredType1 first checked exception type @param declaredType2 second checked exception type @throws IOException if the original throwable is an IOException @throws X1 if the original throwable matches declaredType1 @throws X2 if the original throwable matches declaredType2
1978 Writes byte array to an output stream. @param bytes data to be written @throws IOException if an I/O error occurs
1979 Writes data from an InputStream to this output. @param input the stream to read from @return number of bytes copied @throws IOException if an I/O error occurs
1980 Checks if the stream is empty. @return true if the stream has no content, false otherwise @throws IOException if an I/O error occurs
1981 Returns the size of the stream, first by skipping if possible, then by reading. @throws IOException if an I/O error occurs
1982 Copies contents to an OutputStream. @param output the target OutputStream @return number of bytes copied @throws IOException if I/O error occurs
1983 Copies content to a sink. @param sink destination for the copied bytes @return number of bytes copied @throws IOException if an I/O error occurs
1984 Reads data from an input stream and returns it as a byte array. @return byte array containing the read data @throws IOException if an I/O error occurs
1985 Reads bytes using a processor. @param processor to process the bytes @return result of processing or null if not applicable @throws IOException on I/O error
1986 Compares content of this source with another. @param other the ByteSource to compare against @return true if contents are equal, false otherwise @throws IOException if an I/O error occurs
1987 Writes a character sequence to an output stream. @param charSequence the sequence of characters to write @throws IOException if an I/O error occurs
1988 Writes content from a Readable to an output stream. @param readable source of characters to write @return number of characters copied @throws IOException if an I/O error occurs
1989 Returns the length of the stream. @return length in bytes @throws IOException if an I/O error occurs
1990 Copies content to an Appendable. @param appendable destination for copied content @return number of characters copied @throws IOException if an I/O error occurs
1991 Copies content to a sink. @param sink destination for the copied content @return number of characters copied @throws IOException if an I/O error occurs
1992 Reads the first line from a resource. @return the first line of the resource or null if empty @throws IOException if an I/O error occurs
1993 Reads lines using a LineProcessor. @param processor processes each line and returns a result @return result from the processor or null if not applicable @throws IOException if an I/O error occurs
1994 Checks if the stream is empty. @return true if the stream has no content, false otherwise @throws IOException if an I/O error occurs
1995 Expands the hash table by doubling its capacity. Reclassifies entries to new bins with power-of-two offset.
1996 Filters keys in a multimap based on a predicate. @param <K> key type @param <V> value type @param unfiltered original multimap to filter @param keyPredicate predicate for key filtering @return new multimap with filtered keys
1997 Filters entries in a multimap by value. @param unfiltered the original multimap to filter @param valuePredicate predicate for filtering values @return a new multimap with filtered entries
1998 Filters entries in a multimap based on a predicate. @param unfiltered the original multimap to filter @param entryPredicate predicate for filtering entries @return a new multimap with filtered entries
1999 Creates an iterator for unique column keys sorted by comparator. @return Iterator of unique column keys
2000 Creates an immutable bimap from an iterable of entries. @param entries iterable containing key-value pairs @return ImmutableBiMap created from the entries
2001 Creates an immutable map from iterable entries. @param entries iterable of key-value pairs @return ImmutableMap containing the provided entries
2002 Converts an Iterable to a typed array. @param iterable source Iterable @param type array element class @return array containing elements of the Iterable
2003 Creates an immutable sorted set from elements with a specified comparator. @param comparator the comparator to use for ordering elements @param elements the iterable source of elements @return an ImmutableSortedSet containing the sorted elements
2004 Performs binary search on a list using a key function and comparator. @param list the list to search @param keyFunction extracts key from elements @param key the key to find @param keyComparator comparator for keys @param presentBehavior behavior when key is found @param absentBehavior behavior when key is not found @return index of key or insertion point if not found
2005 Removes all values associated with the given key. @param key the key whose mappings are to be removed @return list of removed values, or empty list if key not found
2006 Transforms values of a NavigableMap using a given function. @param fromMap original map with keys of type K and values of type V1 @param function transformation function mapping V1 to V2 @return new NavigableMap with transformed values
2007 Removes a mapping from the data structure. @param rowKey key identifying the row @param columnKey key identifying the column @param value value to be removed @return true if removed, false if not found
2008 Creates a synchronized list multimap. @param multimap the original list multimap to wrap @return a synchronized version of the input multimap
2009 Returns a thread-safe set multimap backed by the specified multimap. @param multimap the multimap to be wrapped @return synchronized SetMultimap instance
2010 Converts Readable to String. @param r Readable object to convert @return String representation of Readable content @throws IOException if an I/O error occurs
2011 Catches exceptions and provides a fallback value. @param exceptionType type of exception to catch @param fallback function to compute fallback result @param executor executor for fallback computation @return FluentFuture with result or fallback value
2012 Transforms the future's result using a given function. @param function to apply to the future's result @param executor for executing the transformation @return FluentFuture with transformed result
2013 Creates a directed graph builder. @return GraphBuilder configured for directed graphs
2014 Creates an undirected graph builder. @return GraphBuilder configured for undirected graphs
2015 Creates a GraphBuilder from an existing Graph. @param graph the source graph to copy properties from @return GraphBuilder with copied properties
2016 Creates a directed network builder. @return NetworkBuilder configured for directed networks
2017 Creates an undirected network builder. @return NetworkBuilder configured for undirected networks
2018 Creates a NetworkBuilder from an existing network. @param network the source network to copy properties from @return NetworkBuilder with copied configuration and orders
2019 Creates a builder for a directed value graph. @return ValueGraphBuilder configured for directed graphs
2020 Creates an undirected graph builder. @return ValueGraphBuilder configured for undirected graphs
2021 Creates a ValueGraphBuilder from an existing graph. @param graph the source graph to copy properties from @return a new ValueGraphBuilder with the same properties as the input graph
2022 Adds a listener with an associated executor. @param listener the listener to be added @param executor the executor to run the listener on
2023 Creates an empty CompactLinkedHashSet. @return An empty CompactLinkedHashSet instance
2024 Creates a CompactHashSet from the given collection. @param collection elements to add to the set @return CompactHashSet containing all elements from the input collection
2025 Creates a CompactLinkedHashSet with an initial capacity. @param expectedSize the expected number of elements in the set @return a new CompactLinkedHashSet instance
2026 Creates a new SortedSetMultimap from a given map and supplier. @param map initial map with keys and collections of values @param factory supplier for creating sorted sets @return SortedSetMultimap instance
2027 Creates an immutable multiset collector. @return Collector that accumulates elements into an ImmutableMultiset
2028 Converts a stream to an ImmutableMultiset. @param elementFunction extracts elements from input objects @param countFunction determines the count for each element @return ImmutableMultiset containing elements and their counts
2029 Creates a new instance of Builder. @param <E> element type for the builder @return Builder instance
2030 Joins array elements into a single string. @param parts array of objects to be joined @return concatenated string of array elements
2031 Joins elements using provided Joiner. @param joiner object to handle joining logic @return joined string result
2032 Simplifies a given pathname. @param pathname the path to simplify @return simplified canonical path
2033 Parses encoded trie data into a builder map. @param stack used to track path in the trie @param encoded input string containing trie data @param start index to begin parsing from @param builder map to store parsed suffixes and types @return number of characters processed
2034 Creates a concurrent map. @return ConcurrentMap instance based on configuration
2035 Transforms elements and concatenates results. @param function transformation function converting each element to an iterable @return concatenated FluentIterable of transformed elements
2036 Concatenates multiple Iterables into one. @param inputs variable number of Iterable objects @return a single Iterable containing all elements from inputs
2037 Retrieves value with a timeout. @param timeout time to wait before timing out @param unit unit of time for the timeout @return value if available within timeout, otherwise throws exception @throws InterruptedException if interrupted while waiting @throws TimeoutException if operation times out @throws ExecutionException if execution fails
2038 Adds a node to the graph. @param node node to be added @return GraphConnections for the added node
2039 Enters if condition is met within specified time. @param guard condition to evaluate @param time maximum wait time @return true if entered, false otherwise
2040 Converts string to specified case format. @param format target case format @param s input string to convert @return converted string in the specified format
2041 Converts a string to a specified case format. @param format target case format @param s input string to convert @return converted string in the specified case format
2042 Converts a string from one case format to another. @param format target case format for conversion @param s input string to be converted @return converted string in the specified case format
2043 Converts a string from one case format to another. @param format target case format @param str input string @return converted string in the specified format
2044 Checks if none of the patterns match the given sequence. @param sequence the input string to check @return true if no pattern matches, false otherwise
2045 Removes all occurrences of matching characters from the input sequence. @param sequence the input character sequence @return a new string with matched characters removed
2046 Replaces first occurrence and all matching characters in a sequence. @param sequence the input character sequence @param replacement the character to replace matches with @return modified string with replacements
2047 Extracts embedded IPv4 address from an IPv6 address. @param ip the IPv6 address to process @return the embedded Inet4Address or throws exception if none found
2048 Reads bytes into a buffer and updates a hasher. @param bytes destination buffer @param off starting offset in the buffer @param len maximum number of bytes to read @return number of bytes read, or -1 if end of stream @throws IOException if an I/O error occurs
2049 Reads fully from input stream into byte array. @param in InputStream to read from @param b byte array to store data
2050 Rotates elements of the boolean array. @param array the array to be rotated @param distance number of positions to rotate
2051 Rotates elements of the byte array. @param array the array to be rotated @param distance number of positions to rotate
2052 Sorts byte array in descending order. @param array the array to be sorted
2053 Sorts characters in an array in descending order. @param array char array to be sorted
2054 Rotates elements of a character array. @param array the array to be rotated @param distance the number of positions to rotate
2055 Sorts an array of doubles in descending order. @param array array to be sorted
2056 Rotates elements of an array by a specified distance. @param array the array to be rotated @param distance number of positions to rotate elements
2057 Sorts an array of floats in descending order. @param array the float array to be sorted
2058 Rotates elements of an array. @param array the array to be rotated @param distance number of positions to rotate
2059 Sorts an integer array in descending order. @param array the array to be sorted
2060 Rotates elements of the array to the right by the given distance. @param array the array to be rotated @param distance number of positions to rotate
2061 Sorts an array in descending order. @param array the array to be sorted
2062 Rotates elements of the array to the right by the given distance. @param array the array to be rotated @param distance number of positions to rotate elements
2063 Sorts short array in descending order. @param array array of shorts to be sorted
2064 Rotates elements of the array to the right by the given distance. @param array the array to be rotated @param distance number of positions to rotate the array
2065 Sets the key-value separator. @param separator character used to separate keys and values @return MapSplitter instance with specified separator
2066 Creates a rate limiter with specified permits per second and warmup period. @param permitsPerSecond number of permits issued per second @param warmupPeriod duration of the warmup period for new permits @param unit time unit for the warmup period @return RateLimiter instance configured with given parameters
2067 Returns an unmodifiable view of the specified sorted multiset. @param sortedMultiset the sorted multiset to wrap @return an unmodifiable SortedMultiset backed by the specified multiset
2068 Returns an unmodifiable view of the specified navigable set. @param set the navigable set to wrap @return an unmodifiable navigable set
2069 Returns an unmodifiable view of the specified collection of map entries. @param entries collection of map entries to be made unmodifiable @return unmodifiable collection of map entries
2070 Returns an unmodifiable view of the specified sorted set multimap. @param delegate the original sorted set multimap to wrap @return an unmodifiable SortedSetMultimap instance
2071 Wraps a future to ensure its resource is closed. @param future the original ListenableFuture @param closingExecutor executor for closing resources @return ClosingFuture that will close the resource
2072 Adds a callback to be executed upon completion. @param callback the callback to execute @param executor the executor to use for running callbacks
2073 Creates an EnumBiMap with specified key and value types. @param keyType the Enum class for keys @param valueType the Enum class for values @return a new EnumBiMap instance
2074 Creates an EnumHashBiMap with specified key type. @param keyType enum class for keys @return EnumHashBiMap instance
2075 Creates a TreeMultiset from an iterable of comparable elements. @param elements the iterable containing elements to add @return a TreeMultiset with the provided elements
2076 Constructs a new builder with a specified comparator. @param comparator the comparator to use for ordering elements
2077 Replaces values associated with a key. @param key the key to update @param values new values to associate with the key @return the previous set of values associated with the key
2078 Replaces all values associated with a key. @param key key whose values are to be replaced @param values new values to associate with the key @return previous values associated with the key or empty set if none
2079 Creates a HashMultiset from an iterable of elements. @param elements the iterable to add to the multiset @return a new HashMultiset containing the elements
2080 Creates a new ArrayListMultimap with specified key and value capacities. @param expectedKeys estimated number of unique keys @param expectedValuesPerKey estimated average number of values per key @return an empty ArrayListMultimap with the given capacity estimates
2081 Creates a HashMultimap with specified capacity. @param expectedKeys number of keys expected @param expectedValuesPerKey average number of values per key @return initialized HashMultimap instance
2082 Creates a HashMultimap from another Multimap. @param multimap source Multimap to copy keys and values from @return a new HashMultimap containing the same key-value pairs as the input
2083 Creates a LinkedListMultimap with an initial capacity. @param expectedKeys estimated number of keys to store @return LinkedListMultimap instance
2084 Creates a LinkedHashMultiset from an iterable of elements. @param elements the source of elements to add to the multiset @return a new LinkedHashMultiset containing the elements
2085 Creates a new LinkedHashMultimap with default capacities. @return LinkedHashMultimap instance initialized with default settings
2086 Creates a LinkedHashMultimap with specified capacities. @param expectedKeys expected number of keys @param expectedValuesPerKey expected number of values per key @return new LinkedHashMultimap instance
2087 Constructs a new network using the provided builder. @param builder NetworkBuilder instance to configure the network
2088 Constructs a graph with specified properties. @param builder configuration for graph creation
2089 Adds a cell to the table. @param cell the cell to add @return the builder instance
2090 Adds an entry to the map. @param entry key-value pair to add @return current builder instance for chaining
2091 Adds all entries from the given iterable to the builder. @param entries iterable of key-value pairs to add @return this builder instance
2092 Adds an entry to the map. @param entry key-value pair to add @return this builder instance for method chaining
2093 Returns an immutable multimap view of the map. @return ImmutableSetMultimap representation of the map
2094 Builds and returns an immutable sorted map. @return ImmutableSortedMap containing key-value pairs
2095 Adds all entries from another RangeMap. @param rangeMap source of entries to add @return this Builder instance
2096 Adds all ranges from an iterable to the builder. @param ranges iterable of Range objects to add @return current Builder instance
2097 Finds intersections of given range with stored ranges. @param range the range to intersect with stored ranges @return list of intersecting ranges or empty list if none found
2098 Creates a contiguous set from a range and domain. @param <C> type of elements, must extend Comparable @param range the range defining the set bounds @param domain the discrete domain for the set @return ContiguousSet representing the specified range within the domain
2099 Combines a range with an existing map entry if conditions are met. @param range the range to potentially combine @param value the value to match in the entry @param entry the map entry to check for combination @return combined Range or original range if not combinable
2100 Converts to an ImmutableSortedSet of values within the discrete domain. @param domain discrete domain defining value bounds @return ImmutableSortedSet containing all values in the range set
2101 Creates an immutable map from the given map using Enum keys. @param map input map with Enum keys and values @return ImmutableEnumMap containing entries from the input map
2102 Returns an immutable map of rows. @return ImmutableMap where key is row type R and value is a map of column C to value V
2103 Returns an unmodifiable iterator over elements in reverse order. @return Iterator<E> iterating from last to first element
2104 Builds an immutable list from contents. @return ImmutableList containing elements or empty if none
2105 Converts an array to an immutable list. @param elements array of elements to convert @return ImmutableList containing the elements
2106 Builds an immutable sorted set from elements. @return ImmutableSortedSet containing sorted unique elements
2107 Creates an immutable map from entries. @param n number of entries @param entryArray array of key-value entries @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap with entries or nulls for deleted duplicates
2108 Finds suffix index matching desired type. @param desiredType the PublicSuffixType to match @return index of matching suffix or NO_SUFFIX_FOUND if none found
2109 Creates an immutable set from iterable elements. @param elements the source of enum elements @return ImmutableSet containing the enum elements
2110 Returns an unmodifiable iterator over elements. @return Iterator providing access to elements without modification
2111 Posts an event to all registered subscribers. @param event the event to be posted
2112 Attempts to crossover and bubble up an element. @param removeIndex index of the element to be removed @param vacated index of the vacated position @param toTrickle element to be bubbled up @return MoveDesc with moved element and parent, or null if no move occurs
2113 Returns the comparator for row keys. @deprecated Use requireNonNull(this.rowKeySet().comparator()) instead
2114 Returns a synchronized (thread-safe) navigable set. @param navigableSet the navigable set to be wrapped @return a synchronized navigable set
2115 Creates a Bloom filter with the specified parameters. @param funnel defines how to "funnel" elements into bits @param expectedInsertions estimated number of insertions @param fpp false positive probability @return BloomFilter instance
2116 Creates a Bloom filter with default error rate. @param funnel defines how to extract bytes from items @param expectedInsertions estimated number of insertions @return BloomFilter instance with 3% error rate
2117 Estimates the number of elements added to a Bloom filter. @return Approximate count of unique elements
2118 Collects the k smallest elements based on a comparator. @param k number of least elements to collect @param comparator comparator for element ordering @return Collector that gathers least k elements
2119 Returns the k smallest elements from the iterator. @param iterator source of elements to process @param k number of smallest elements to return @return list containing the k smallest elements
2120 Adds all elements from the given iterable to this collection. @param elements iterable containing elements to add
2121 Converts value to string representation. @return String representation of unsigned long value
2122 Prepares to acquire a lock. @param lock the lock to be acquired
2123 Transforms the result of the future using the given function. @param function transformation function applied to the future's result @param executor executor for asynchronous execution @return ClosingFuture with transformed result
2124 Transforms the future's result asynchronously. @param function transformation function to apply @param executor executor for asynchronous execution @return ClosingFuture with transformed result
2125 Retrieves result from a Future, throwing an exception if necessary. @param future the Future to retrieve the result from @param exceptionClass class of the exception to throw on failure @return result of the Future @throws X if the Future fails with an exception of type X
2126 Retrieves the result of a future with a specified timeout. @param future the Future object to retrieve the result from @param exceptionClass class of the exception to throw if the future fails @param timeout maximum time to wait for the future to complete @return the result of the future or throws an exception @throws X if the future fails or times out
2127 Reschedules a task and returns a cancellable future. @return Cancellable object representing the scheduled task
2128 Notifies the service has started. Updates state and handles shutdown if necessary.
2129 Starts all services asynchronously. @return this ServiceManager instance
2130 Attempts to acquire a permit within a specified duration. @param guard condition to check before acquiring the permit @param time maximum time to wait for the permit @return true if permit acquired, false otherwise @throws InterruptedException if interrupted while waiting
2131 Attempts to acquire a lock uninterruptibly within a specified time. @param guard the lock object to attempt acquisition on @param time maximum duration to wait for the lock @return true if the lock was acquired, false otherwise
2132 Waits for a condition defined by a Guard within a specified time. @param guard the condition to wait for @param time the maximum time to wait @return true if the condition is met, false otherwise @throws InterruptedException if the current thread is interrupted
2133 Waits uninterruptibly until the guard condition is met or timeout expires. @param guard condition to wait for @param time maximum duration to wait @return true if guard condition is met, false on timeout
2134 Applies a timeout to the future. @param timeout duration for the timeout @param scheduledExecutor executor service for scheduling @return FluentFuture with applied timeout
2135 Writes byte array to file. @param from source byte array @param to destination file @throws IOException if an I/O error occurs
2136 Computes hash using provided function. @param hashFunction the hashing algorithm to use @return computed HashCode @throws IOException if an I/O error occurs during copying
2137 Copies file content to an output stream. @param from source File object @param to destination OutputStream object @throws IOException if I/O error occurs
2138 Copies data from a URL to an OutputStream. @param from source URL @param to destination OutputStream @throws IOException if I/O error occurs during copying
2139 Copies a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
2140 Converts a File to a byte array. @param file the File to read @return byte array containing file content @throws IOException if an I/O error occurs
2141 Converts a URL to a byte array. @param url source URL to read from @return byte array containing data from the URL @throws IOException if an I/O error occurs
2142 Reads bytes from a file using a processor. @param file the file to read @param processor the processor to process the bytes @return result of processing or null if not applicable @throws IOException if an I/O error occurs
2143 Compares two files for equality. @param file1 first file to compare @param file2 second file to compare @return true if files are equal, false otherwise
2144 Compares two paths for equality by content. @param path1 first file path to compare @param path2 second file path to compare @return true if contents are equal, false otherwise @throws IOException if an I/O error occurs
2145 Writes a CharSequence to a file using specified charset. @param from the CharSequence to write @param to the target File @param charset the Charset to use for writing @throws IOException if an I/O error occurs
2146 Appends a character sequence to a file using specified charset. @param from CharSequence to append @param to File to append to @param charset Charset for encoding @throws IOException if an I/O error occurs
2147 Copies file content to an appendable destination. @param from source file @param charset character set for reading the file @param to destination appendable @throws IOException if an I/O error occurs
2148 Reads the first line of a file using a specified charset. @param file the file to read from @param charset the character set to use for reading @return the first line of the file or null if empty @throws IOException if an I/O error occurs
2149 Reads all lines from a file using specified charset. @param file the file to read from @param charset character set for reading the file @return list of lines from the file @throws IOException if an I/O error occurs
2150 Reads lines from a file using a specified charset and processor. @param file the file to read @param charset the character set to use for reading @param callback the LineProcessor to process each line @return result of the LineProcessor or null if not applicable @throws IOException if an I/O error occurs
2151 Reads lines from a URL and processes them. @param url the source URL to read from @param charset character set for reading the file @param callback processor for each line @return result of processing or null if not applicable @throws IOException if an I/O error occurs
2152 Maps a file into memory. @param file the file to map @param mode the mapping mode (READ_ONLY, READ_WRITE, PRIVATE) @return a MappedByteBuffer representing the mapped file @throws IOException if an I/O error occurs
2153 Maps a file to a memory-mapped buffer. @param file the file to map @param mode the mapping mode (e.g., READ_ONLY) @param size the number of bytes to map @return MappedByteBuffer representing the mapped file region @throws IOException if an I/O error occurs
2154 Adds a delayed shutdown hook for the executor service. @param service the ExecutorService to be shut down @param terminationTimeout the timeout duration before shutting down @param timeUnit the unit of time for the termination timeout
2155 Filters entries in a multimap based on a value predicate. @param unfiltered the original multimap to filter @param valuePredicate predicate for filtering values @return a new multimap with filtered entries
2156 Creates a compound ordering from an iterable of comparators. @param comparators iterable of comparators to combine @return CompoundOrdering object that combines the given comparators
2157 Creates an immutable bi-directional map from the given map. @param map source map to copy entries from @return ImmutableBiMap containing the same entries as the input map
2158 Converts collection to array of specified type. @param type Class object specifying the array component type @return Array containing all elements in the collection
2159 Converts an iterator to an array. @param iterator source iterator @param type desired component type of the array @return array containing elements from the iterator
2160 Converts the collection to an immutable sorted set. @param comparator comparator for sorting elements @return ImmutableSortedSet containing all elements in sorted order
2161 Creates an immutable sorted set from iterable elements using natural ordering. @param elements the iterable source of elements @return ImmutableSortedSet containing elements in natural order
2162 Creates an immutable sorted set from a collection and comparator. @param comparator the comparator to sort elements @param elements the collection of elements to include @return ImmutableSortedSet with sorted elements
2163 Returns a map of rows with columns and values. @return SortedMap where key is row, value is Map of column to value
2164 Returns a string representation of the object. Uses lazy initialization to ensure thread safety. @return String representation of the object
2165 Returns a synchronized version of the specified sorted set multimap. @param multimap the multimap to be wrapped in a synchronized view @return a synchronized SortedSetMultimap with no mutex specified
2166 Reads content from a stream and returns it as a string. @return content read from the stream @throws IOException if an I/O error occurs
2167 Creates a CompactLinkedHashMap with an expected size. @param expectedSize the approximate number of entries @return a new CompactLinkedHashMap instance
2168 Creates a CompactLinkedHashSet from a given collection. @param collection the source collection of elements @return a new CompactLinkedHashSet containing all elements from the collection
2169 Creates a TreeMultimap with natural ordering for keys and values. @return TreeMultimap instance with natural key and value orderings
2170 Creates a TreeMultimap with specified key and value comparators. @param keyComparator comparator for keys @param valueComparator comparator for values @return TreeMultimap instance
2171 Checks if the sequence matches any of the defined patterns. @param sequence input to be checked against patterns @return true if sequence matches at least one pattern, false otherwise
2172 Removes all characters from the input sequence that are not in this set. @param sequence the input character sequence @return a new string with only the retained characters
2173 Replaces occurrences of a substring in a sequence. @param sequence the original character sequence @param replacement the replacement string @return new string with replacements or original if no match
2174 Coerces an InetAddress to an Inet4Address. @param ip input IP address @return IPv4 address or null if coercion fails
2175 Creates a rate limiter with specified permits per second and warmup period. @param permitsPerSecond number of permits issued per second @param warmupPeriod duration for rate limiter to reach full capacity @return RateLimiter instance configured with given parameters
2176 Returns a set of map entries. @return Set containing all key-value pairs in the map
2177 Schedules a task to run after a specified delay. @param command the Runnable task to execute @param delay the time from now to delay execution @param unit the time unit of the delay parameter @return ListenableScheduledFuture representing scheduled task
2178 Builds a loading cache with the specified loader. @param loader cache loader to fetch values @return LoadingCache instance configured with the given loader
2179 Builds and returns a cache instance. @param <K1> key type extending K @param <V1> value type extending V @return Cache object configured with current settings
2180 Creates a Builder with a specified comparator for ordering. @param comparator Comparator to define element order @return Builder instance configured with the comparator
2181 Returns a builder for a comparator in reverse natural order. @return Builder instance with reverse natural ordering
2182 Creates a builder with natural ordering. @return Builder instance configured for natural order
2183 Creates a bidirectional map from a given map. @param map input map with enum keys and values @return EnumBiMap containing the entries of the input map
2184 Creates an EnumHashBiMap from a given map. @param map input map with enum keys and values @return EnumHashBiMap containing entries from the input map
2185 Replaces all values associated with a key. @param key key whose values are to be replaced @param values new values to associate with the key @return updated set of values or empty if key not found
2186 Checks if two lists are permutations of each other. @param first first list to compare @param second second list to compare @return true if lists contain same elements with same frequencies, false otherwise
2187 Creates an empty ArrayListMultimap. @param <K> key type @param <V> value type @return a new instance of ArrayListMultimap
2188 Creates an ArrayListMultimap from a given Multimap. @param multimap the source Multimap to copy entries from @return a new ArrayListMultimap containing the same key-value pairs as the input
2189 Creates an empty HashMultimap. @param <K> key type @param <V> value type @return a new HashMultimap instance
2190 Creates and returns an empty LinkedListMultimap. @param <K> key type with nullable elements @param <V> value type with nullable elements @return a new instance of LinkedListMultimap
2191 Creates a LinkedListMultimap from an existing Multimap. @param multimap the source Multimap to copy @return a new LinkedListMultimap containing the same mappings
2192 Creates a LinkedHashMultimap from another Multimap. @param multimap source Multimap to copy entries from @return new LinkedHashMultimap with the same entries as the input
2193 Builds and returns a mutable network. @param <N1> node type extending N @param <E1> edge type extending E @return MutableNetwork instance
2194 Constructs a mutable graph using the provided builder. @param builder configuration for building the graph
2195 Builds and returns a mutable value graph. @param <N1> node type extending N @param <V1> edge value type extending V @return MutableValueGraph instance
2196 Adds all entries from the given table. @param table source of entries to add @return this builder instance
2197 Adds all entries to the builder. @param entries iterable of key-value pairs to add @return this Builder instance for method chaining
2198 Adds all entries from the specified map. @param map source of entries to add @return this Builder instance for chaining
2199 Adds all entries from the given iterable. @param entries collection of key-value pairs to add @return current Builder instance
2200 Filters entries in a map based on a predicate. @param map the original AbstractFilteredMap to filter @param entryPredicate additional condition for filtering entries @return new FilteredEntryMap with combined predicates
2201 Adds all ranges from the given RangeSet to this builder. @param ranges RangeSet containing the ranges to add @return this Builder instance for method chaining
2202 Returns a subset of ranges that overlap with the specified range. @param range the range to intersect with @return an ImmutableRangeSet containing overlapping ranges or an empty set if none
2203 Creates a contiguous set of integers from lower to upper inclusive. @param lower the lower bound of the range @param upper the upper bound of the range @return ContiguousSet containing all integers between lower and upper bounds
2204 Creates a contiguous set of Longs from lower to upper inclusive. @param lower the lower bound of the range @param upper the upper bound of the range @return ContiguousSet containing all Longs in the specified range
2205 Creates a contiguous set of integers from lower (inclusive) to upper (exclusive). @param lower the inclusive lower bound @param upper the exclusive upper bound @return ContiguousSet containing integers in the specified range
2206 Creates a contiguous set of Long from lower (inclusive) to upper (exclusive). @param lower the inclusive lower bound @param upper the exclusive upper bound @return ContiguousSet containing Long values in the specified range
2207 Combines a range with adjacent ranges if they have the same value. @param range the initial range to consider @param value the value associated with the range @return a new Range that may include coalesced segments
2208 Adds a node to the network and initializes its connections. @param node the node to be added @return NetworkConnections object for the added node
2209 Creates an immutable copy of the given map. @param map the source map to copy @return an ImmutableMap containing the same key-value pairs as the input map
2210 Retrieves a row from the map by key. @param rowKey key of the row to retrieve @return ImmutableMap representing the row or empty map if not found
2211 Returns greatest element less than the given element. @param e element to compare against @return greatest element less than e or null if no such element exists
2212 Returns the greatest element less than or equal to the given element. @param e the element to compare with @return the greatest element <= e or null if no such element exists
2213 Creates an immutable list from an iterator. @param elements the source iterator @return an ImmutableList containing the elements
2214 Builds an ImmutableRangeMap from sorted entries. @return ImmutableRangeMap object containing non-overlapping ranges and associated values
2215 Builds an immutable range set from a list of ranges. @return ImmutableRangeSet containing merged, non-overlapping ranges
2216 Parses the Java class path into a list of URLs. @return ImmutableList of URLs representing class path entries
2217 Retrieves method parameters with annotations. @return ImmutableList of Parameter objects representing method parameters
2218 Returns a list of generic exception types. @return ImmutableList of TypeToken representing exception types
2219 Wraps a collection of tasks into an immutable list. @param tasks collection of Callable tasks @return ImmutableList of wrapped Callable tasks
2220 Creates a sorted immutable list from an iterable of comparable elements. @param elements iterable of elements to sort @return Immutable list of sorted elements
2221 Creates a sorted immutable list from elements. @param comparator sorting criteria @param elements iterable source of elements @return ImmutableList with sorted elements
2222 Creates an immutable sorted set from iterator. @param comparator sorting order for elements @param elements iterator of elements to include @return ImmutableSortedSet with sorted elements
2223 Creates an ImmutableMap from an array of entries. @param n number of entries to include @param entryArray array containing map entries @param throwIfDuplicateKeys flag to throw exception on duplicate keys @return ImmutableMap created from the entries
2224 Retrieves the index of the public suffix. @return Index of the public suffix or SUFFIX_NOT_INITIALIZED if not found
2225 Retrieves the index of the registry suffix. Uses cached value if already initialized; otherwise, finds and caches it. @return Index of the registry suffix
2226 Creates an ImmutableSortedMap from entries with a specified comparator. @param comparator key comparator for sorting @param sameComparator flag indicating if the comparator is the same as in the entries @param entries iterable of map entries @return ImmutableSortedMap with sorted entries
2227 Creates a new TreeBasedTable with the same comparators and content. @param table existing TreeBasedTable to copy from @return new TreeBasedTable with copied data
2228 Creates a Bloom filter with the specified funnel and expected insertions. @param funnel defines how to extract bytes from inserted objects @param expectedInsertions estimated number of elements to be inserted @return a new BloomFilter instance
2229 Collects the k greatest elements based on a comparator. @param k number of top elements to collect @param comparator comparison criteria for elements @return Collector for top k elements
2230 Returns the k smallest elements from the iterable. @param iterable source of elements to compare @param k number of smallest elements to retrieve @return list containing the k smallest elements
2231 Finds the k greatest elements from an iterator. @param iterator source of elements @param k number of top elements to find @return list of k greatest elements
2232 Catches exceptions and executes a fallback function. @param <X> type of exception to catch @param exceptionType class of the exception to catch @param fallback function to execute if exception occurs @param executor executor for asynchronous execution @return ClosingFuture with result from fallback or original computation
2233 Waits until the component has stopped.
2234 Waits for the service to stop within a specified time. @param timeout maximum time to wait @param unit time unit of the timeout @throws TimeoutException if the service does not stop within the timeout
2235 Returns a precomputed version of this CharMatcher. @return Precomputed CharMatcher instance
2236 Computes the hash of a file using a specified hash function. @param file the file to hash @param hashFunction the hash function to use @return HashCode representing the file's hash @throws IOException if an I/O error occurs
2237 Moves a file from one location to another. @param from source file @param to destination file @throws IOException if an I/O error occurs
2238 Reads lines from a URL using the specified charset. @param url source URL to read from @param charset character encoding for reading @return list of lines read from the URL @throws IOException if an I/O error occurs
2239 Maps a file to a read-only memory buffer. @param file the file to be mapped @return a MappedByteBuffer for the file @throws IOException if an I/O error occurs
2240 Wraps an existing ThreadPoolExecutor with an exiting service. @param executor the ThreadPoolExecutor to wrap @param terminationTimeout maximum time to wait for tasks to complete @param timeUnit unit of time for termination timeout @return ExecutorService that exits after tasks finish or timeout
2241 Wraps a ScheduledThreadPoolExecutor with an exiting service. @param executor the original ScheduledThreadPoolExecutor @param terminationTimeout timeout for graceful shutdown @param timeUnit unit of time for the timeout @return ScheduledExecutorService that exits on shutdown
2242 Adds a delayed shutdown hook for the executor service. @param service ExecutorService to be shut down @param terminationTimeout timeout duration before shutting down
2243 Attempts to reclaim a key by removing its entry. @param entry the entry to reclaim @param hash the hash of the entry's key @return true if the entry was successfully reclaimed, false otherwise
2244 Attempts to reclaim a value entry by key and reference. @param key the key associated with the value @param hash the hash code of the key @param valueReference the reference to the value to be reclaimed @return true if the value was successfully reclaimed, false otherwise
2245 Waits until the system state is healthy.
2246 Waits for the system to become healthy. @param timeout maximum time to wait @param unit time unit for the timeout @throws TimeoutException if the system does not become healthy within the timeout
2247 Returns startup times for each service. @return Immutable map of Service to its startup time in milliseconds
2248 Retrieves annotations of a specific type declared on this element. @param annotationType the Class object corresponding to the annotation type @return an array of Annotation objects of the specified type, or an empty array if none found
2249 Creates an immutable sorted set from a collection of elements using natural ordering. @param elements the collection to be copied @return an ImmutableSortedSet containing the elements in natural order
2250 Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. @param navigableMap the navigable map to be wrapped @return a synchronized navigable map
2251 Reads file content into a string. @param file the file to read @param charset character set to use @return content of the file as a string @throws IOException if an I/O error occurs
2252 Converts URL content to string. @param url source URL @param charset character set for reading @return string representation of URL content @throws IOException if an I/O error occurs
2253 Creates a new instance of CompactLinkedHashMap. @return an empty CompactLinkedHashMap with insertion order preservation
2254 Creates a TreeMultimap from a given Multimap. @param multimap input multimap to convert @return TreeMultimap with natural ordering for keys and values
2255 Creates a new reentrant lock. @param lockName name of the lock for identification @param fair true if lock should use fair ordering policy @return ReentrantLock instance based on current policy
2256 Creates a new ReentrantReadWriteLock. @param lockName name of the lock for identification @param fair true if lock should be fair, false otherwise @return ReentrantReadWriteLock instance with specified fairness policy
2257 Creates a map of LockGraphNodes for enum values. @param clazz Enum class to create nodes for @return Unmodifiable map of enum values to LockGraphNode objects
2258 Validates a domain part based on length, character restrictions, and position rules. @param part the domain part to validate @param isFinalPart indicates if it's the last part of the domain @return true if valid, false otherwise
2259 Converts an IP address to an integer. @param ip IPv4 or IPv6 address @return integer representation of the IP address
2260 Checks if the collection contains the specified object. @param object the object to check for presence @return true if the object is present, false otherwise
2261 Removes the first occurrence of the specified object. @param object the object to be removed @return true if the object was found and removed, false otherwise
2262 Removes all elements from this collection that are contained in the specified collection. @param collection elements to be removed from this collection @return true if this collection changed as a result of the call
2263 Retains only elements contained in the specified collection. @param collection elements to retain @return true if this collection changed as a result of the call
2264 Clears all elements using an iterator.
2265 Checks if the collection is empty. @return true if no elements, false otherwise
2266 Converts collection to an array. @return Object array containing all elements or null if empty
2267 Schedules a task with a specified delay. @param command the Runnable task to execute @param delay the time delay before execution @return ListenableScheduledFuture for the scheduled task
2268 Finds all subscribers for a given listener. @param listener the object to find subscribers for @return Multimap of event types to Subscribers
2269 Creates an induced subgraph from a given network. @param network the original network @param nodes iterable of nodes to include in the subgraph @return MutableNetwork containing only specified nodes and their connecting edges
2270 Creates a mutable copy of the given network. @param network the original Network to be copied @return a new MutableNetwork with the same nodes and edges as the input network
2271 Builds and returns a mutable graph. @param <N1> node type extending N @return MutableGraph instance
2272 Creates an induced subgraph from a given graph using specified nodes. @param <N> node type @param <V> edge value type @param graph the original graph @param nodes iterable of nodes to include in the subgraph @return MutableValueGraph containing only the specified nodes and their edges
2273 Creates a mutable copy of a given value graph. @param <N> node type @param <V> value type for edges @param graph the original value graph to copy @return a new MutableValueGraph containing all nodes and edges from the original graph
2274 Adds all entries from the specified map to this builder. @param map source map containing key-value pairs @return this builder instance for method chaining
2275 Adds all entries from the specified map to the builder. @param map the map to add entries from @return the current Builder instance for method chaining
2276 Filters a navigable map based on an additional entry predicate. @param map the original filtered navigable map @param entryPredicate additional predicate to filter entries @return a new navigable map with combined filtering
2277 Filters entries in a sorted map using given predicates. @param <K> key type @param <V> value type @param map original filtered map @param entryPredicate additional predicate for filtering entries @return new FilteredEntrySortedMap with combined predicates
2278 Filters a map's keys based on a predicate. @param unfiltered the original map to filter @param keyPredicate predicate for filtering keys @return a filtered map with only matching keys
2279 Filters entries in a map based on a predicate. @param unfiltered the original map to filter @param entryPredicate predicate to determine which entries to retain @return a filtered map with only entries matching the predicate
2280 Converts a stream to an ImmutableSortedMap. @param comparator for sorting keys @param keyFunction extracts the key from elements @param valueFunction extracts the value from elements @return ImmutableSortedMap with sorted keys
2281 Converts a stream to an ImmutableMap with enum keys. @param keyFunction extracts the enum key from elements @param valueFunction extracts the value from elements @return ImmutableMap with enum keys and corresponding values
2282 Converts a stream to an ImmutableMap using enum keys. @param keyFunction extracts the enum key from elements @param valueFunction extracts the value from elements @param mergeFunction resolves conflicts when duplicate keys are found @return ImmutableMap with enum keys and corresponding values
2283 Retrieves type mappings for a given context type. @param contextType the type to inspect for mappings @return an immutable map of type variable keys to types
2284 Concatenates multiple ByteSource objects. @param sources iterator of ByteSource objects to concatenate @return a single ByteSource containing all input data
2285 Concatenates multiple CharSources into one. @param sources iterator of CharSource objects @return a single CharSource containing all input sources concatenated
2286 Creates an immutable range set from given ranges. @param ranges iterable collection of ranges @return ImmutableRangeSet containing the specified ranges
2287 Creates an immutable sorted multiset from the given elements. @param comparator comparator to define element order @param elements iterable of elements to include @return ImmutableSortedMultiset with specified elements and order
2288 Creates an immutable sorted multiset from a given sorted multiset. @param sortedMultiset the source sorted multiset to copy @return an ImmutableSortedMultiset with the same elements and order
2289 Returns an immutable list representation of the collection. @return ImmutableList containing elements of the collection
2290 Converts a stream to an ImmutableSortedSet. @param comparator defines the order of elements @return ImmutableSortedSet with sorted elements
2291 Creates an immutable sorted set from iterator elements using natural ordering. @param elements iterator of elements to include in the set @return ImmutableSortedSet containing the elements
2292 Builds an immutable bimap from the entries. @return ImmutableBiMap containing all entries @throws IllegalStateException if duplicate keys or values are detected
2293 Returns a map containing entries up to (or including) the specified key. @param toKey upper bound key for the sub-map @param inclusive true if the toKey is included in the result @return ImmutableSortedMap with keys <= toKey
2294 Returns a submap with keys greater than or equal to fromKey. @param fromKey the lower bound key @param inclusive true if fromKey is included in the range @return ImmutableSortedMap containing the tail of the map
2295 Checks if the domain is a public suffix. @return true if the domain is a public suffix, false otherwise
2296 Checks if the domain has a public suffix. @return true if public suffix exists, false otherwise
2297 Checks if the domain is under a public suffix. @return true if under a public suffix, false otherwise
2298 Checks if the domain is at the top level. @return true if the domain is top-level, false otherwise
2299 Checks if the registry suffix index is at the start. @return true if index is 0, false otherwise
2300 Checks if the string contains a registry suffix. @return true if registry suffix is present, false otherwise
2301 Checks if the current path has a registry suffix. @return true if there's a registry suffix, false otherwise
2302 Checks if the top-level domain is under the registry suffix. @return true if the top-level domain is directly under the registry suffix, false otherwise
2303 Creates an immutable sorted map from entries. @param entries iterable of key-value pairs @param comparator comparator for sorting keys @return ImmutableSortedMap with sorted entries
2304 Creates an immutable sorted map from a sorted map. @param map the source sorted map @return ImmutableSortedMap containing entries from the input map
2305 Returns an immutable copy of the set. @return ImmutableSet containing all non-null elements
2306 Returns raw types of the generic type. @return Set of raw types
2307 Removes and returns the element at the specified index. Adjusts heap structure accordingly. @param index position of the element to remove @return MoveDesc describing the change or null if no move occurred
2308 Computes the integer square root of a BigInteger with rounding mode. @param x non-negative BigInteger to find the square root of @param mode RoundingMode for rounding the result @return BigInteger representing the rounded square root
2309 Creates an immutable set from an iterator. @param elements the source iterator of elements @return an ImmutableSet containing all elements from the iterator
2310 Recursively scans a directory for resources. @param directory the directory to scan @param packagePrefix prefix for resource names @param currentPath set of visited directories to avoid cycles @param builder builds a collection of ResourceInfo objects @throws IOException if an I/O error occurs
2311 Retrieves classpath files from a JAR's manifest. @param jarFile the JAR file to inspect @param manifest optional manifest, if null returns empty set @return immutable set of File objects representing classpath entries
2312 Retrieves the raw type of a generic class. @return The raw superclass type of the generic type parameter T
2313 Retrieves the k greatest elements from an iterable. @param iterable source of elements to compare @param k number of top elements to retrieve @return list containing the k greatest elements
2314 Waits for the service to stop within the specified timeout. @param timeout maximum time to wait @throws TimeoutException if the service does not stop within the timeout
2315 Wraps ThreadPoolExecutor with exiting behavior. @param executor existing ThreadPoolExecutor instance @return ExecutorService with enhanced shutdown capabilities
2316 Wraps an ExecutorService with a termination timeout. @param executor the ThreadPoolExecutor to wrap @param terminationTimeout maximum time to wait for tasks to complete @return ExecutorService that exits after timeout
2317 Wraps a ScheduledThreadPoolExecutor to create an exiting scheduled executor service. @param executor the ScheduledThreadPoolExecutor to wrap @return ScheduledExecutorService with enhanced shutdown behavior
2318 Wraps a ScheduledThreadPoolExecutor with an exiting service. @param executor the executor to wrap @param terminationTimeout maximum time to wait for termination @return ScheduledExecutorService that exits on shutdown
2319 Evicts entries to maintain segment weight limit. @param newest the most recently added entry
2320 Waits until the system is healthy within a specified timeout. @param timeout maximum time to wait @throws TimeoutException if health check times out
2321 Converts service startup times to durations. @return Immutable map of services to their startup durations
2322 Retrieves annotations of a specific type. @param annotationType the Class object corresponding to the annotation type @return an array of annotations of the specified type, or an empty array if none found
2323 Creates a new reentrant lock with the specified name. @param lockName name of the lock @return ReentrantLock instance
2324 Creates a new ReentrantReadWriteLock with the specified name. @param lockName identifier for the lock @return ReentrantReadWriteLock instance
2325 Validates syntax of command parts. @param parts list of command components @return true if all parts are syntactically correct, false otherwise
2326 Registers a listener for specific events. @param listener object with methods annotated as subscribers
2327 Unregisters listener from all subscribed events. @param listener object whose subscriptions are to be removed
2328 Returns an ImmutableNetwork builder. @param <N1> node type extending N @param <E1> edge type extending E @return ImmutableNetwork.Builder instance
2329 Creates an induced subgraph from the given graph using specified nodes. @param graph original graph to extract subgraph from @param nodes iterable of nodes to include in the subgraph @return MutableGraph containing only the specified nodes and their edges
2330 Creates a mutable copy of the given graph. @param graph original graph to be copied @return new MutableGraph instance with same nodes and edges
2331 Creates an immutable value graph builder. @param <N1> node type extending N @param <V1> value type extending V @return ImmutableValueGraph.Builder instance
2332 Filters a bi-map based on an additional entry predicate. @param map the original filtered bi-map @param entryPredicate the predicate to apply for filtering entries @return a new filtered bi-map with combined predicates
2333 Filters entries in a navigable map based on a predicate. @param unfiltered the original navigable map @param entryPredicate predicate to filter entries @return a new navigable map with filtered entries
2334 Filters entries in a sorted map based on a predicate. @param unfiltered the original sorted map @param entryPredicate predicate to test each entry @return a filtered sorted map with only matching entries
2335 Filters map entries by value predicate. @param unfiltered input map to filter @param valuePredicate predicate for filtering values @return new map with filtered entries
2336 Converts a stream to an ImmutableMap. @param keyFunction function extracting map keys @param valueFunction function extracting map values @param mergeFunction resolves conflicts between duplicate keys @return Collector for ImmutableMap
2337 Converts a stream of objects to an ImmutableRangeMap. @param keyFunction function to extract the range key from each object @param valueFunction function to extract the value from each object @return ImmutableRangeMap with ranges as keys and corresponding values
2338 Creates an immutable sorted multiset from iterable elements using natural ordering. @param elements the iterable source of elements @return ImmutableSortedMultiset with sorted elements
2339 Builds an immutable sorted multiset from contents. @return ImmutableSortedMultiset containing elements from contents
2340 Creates a wildcard type with an upper bound. @param upperBound the upper bound of the wildcard @return a WildcardType instance representing <? extends upperBound>
2341 Creates a wildcard type with a specified lower bound. @param lowerBound the lower bound of the wildcard @return WildcardType representing '? super lowerBound'
2342 Generates ordered permutations of elements. @param elements iterable collection of elements to permute @param comparator defines the order of elements @return collection of lists representing ordered permutations
2343 Converts delegate collection to a sorted immutable list. @param comparator sorting criteria for elements @return ImmutableList of sorted elements
2344 Creates an immutable list from the given collection. @param elements the collection of elements to copy @return an ImmutableList containing the elements
2345 Builds an immutable bimap. @return ImmutableBiMap instance
2346 Builds an immutable map. Throws an exception if any builder constraints are violated. @return ImmutableMap instance
2347 Builds an immutable map keeping only the last occurrence of each key. @return ImmutableMap with unique keys, preferring later values
2348 Returns entries with keys less than specified key. @param toKey upper bound (exclusive) @return ImmutableSortedMap containing entries up to but not including toKey
2349 Returns a submap from fromKey (inclusive) to toKey (inclusive). @param fromKey lower bound key @param fromInclusive true if fromKey is inclusive @param toKey upper bound key @param toInclusive true if toKey is inclusive @return ImmutableSortedMap containing the specified range of keys
2350 Returns a view of the portion of this map whose keys are greater than or equal to fromKey. @param fromKey lower bound key (inclusive) @return ImmutableSortedMap containing keys >= fromKey
2351 Creates an immutable sorted map from iterable entries using natural ordering. @param entries iterable of key-value pairs @return ImmutableSortedMap with entries sorted by keys
2352 Creates an immutable sorted map from the given map using natural ordering. @param map source map to be copied @return ImmutableSortedMap with entries sorted by natural order
2353 Creates an immutable sorted map from the given map and comparator. @param map the input map to copy entries from @param comparator the comparator for ordering keys @return an ImmutableSortedMap with entries sorted by the comparator
2354 Computes the Cartesian product of given sets. @param sets list of sets to compute the product @return set of lists representing the Cartesian product
2355 Removes the first occurrence of the specified element. @param target the element to be removed @return true if the element is found and removed, false otherwise
2356 Removes and returns the element at the specified index. @param index position of the element to remove @return removed element
2357 Creates an immutable set from the given iterable. @param elements the iterable to copy elements from @return an ImmutableSet containing the elements of the iterable
2358 Creates an Invokable for a constructor. @param constructor the Constructor to wrap @return Invokable representing the constructor with resolved types
2359 Checks if the current type is a subtype of the specified supertype. @param supertype the type to compare against @return true if this type is a subtype, false otherwise
2360 Creates an Invokable for a given method. @param method the Method to be wrapped @return Invokable object representing the method
2361 Attempts to lock and expire entries older than the given timestamp. @param now current timestamp
2362 Creates a new instance with explicit ordering for an enum class. @param enumClass the enum class to be used @param policy the policy for ordering @return a WithExplicitOrdering instance initialized with the given policy and lock graph nodes
2363 Registers an object as a subscriber. @param object the object to register
2364 Unregisters an object from subscribers. @param object the object to be unregistered
2365 Returns an immutable graph builder. @return ImmutableGraph.Builder instance
2366 Filters entries in a BiMap based on a predicate. @param unfiltered the original BiMap to filter @param entryPredicate predicate to determine which entries to include @return a new BiMap containing only entries that match the predicate
2367 Filters entries in a NavigableMap based on a key predicate. @param unfiltered the original NavigableMap to filter @param keyPredicate predicate to test keys against @return a new NavigableMap with only entries whose keys satisfy the predicate
2368 Filters map values using a predicate. @param unfiltered the original map to filter @param valuePredicate predicate to test map values @return a new NavigableMap with entries that match the predicate
2369 Filters entries by key predicate. @param unfiltered the original sorted map @param keyPredicate predicate to test keys @return a new sorted map with filtered keys
2370 Filters entries in a sorted map based on a value predicate. @param unfiltered the original sorted map to filter @param valuePredicate predicate for filtering values @return new sorted map with filtered entries
2371 Creates an immutable sorted multiset from elements. @param comparator ordering for the elements @param elements iterator of elements to include @return ImmutableSortedMultiset with specified elements and order
2372 Retrieves location information from a class loader. @param classloader the source class loader @return an ImmutableSet of LocationInfo objects
2373 Finds the subtype of component type from bounds. @param bounds array of generic type bounds @return Type object or null if not found
2374 Creates a new array type for the given component type. Handles wildcard types by inferring bounds. @param componentType the type of components in the array @return Type representing the new array type
2375 Generates ordered permutations of elements. @param elements iterable collection of comparable elements @return collection of lists representing permutations
2376 Creates an immutable multiset from the given iterable. @param elements source iterable of elements @return ImmutableMultiset containing elements from the input iterable
2377 Creates an immutable multiset from an iterator. @param elements iterator of elements to include @return ImmutableMultiset containing the elements
2378 Copies a multiset with elements sorted by descending count. @param multiset the input multiset to copy and sort @return an ImmutableMultiset with elements ordered by highest count first
2379 Generates all permutations of a collection. @param elements input collection of elements @return Collection containing all possible permutations
2380 Creates an immutable list from the given iterable. @param elements source iterable of elements @return ImmutableList containing the provided elements
2381 Creates an immutable copy of a RangeSet. @param rangeSet the RangeSet to copy @return an ImmutableRangeSet containing the same ranges
2382 Creates an immutable sorted set from a sorted set. @param sortedSet the source sorted set to copy @return an ImmutableSortedSet containing the same elements as sortedSet
2383 Reads all lines from a file into an immutable list. @return ImmutableList containing all lines from the file @throws IOException if an I/O error occurs
2384 Builds an immutable class-to-instance map. @return ImmutableClassToInstanceMap containing mappings or empty map if none
2385 Creates an ImmutableListMultimap from map entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator optional comparator for sorting values @return ImmutableListMultimap with sorted or unsorted values based on comparator
2386 Builds and returns an immutable map. @return ImmutableMap instance containing key-value pairs
2387 Creates an ImmutableSetMultimap from map entries. @param mapEntries collection of key-value pairs where values are collections @param valueComparator optional comparator for values within sets @return ImmutableSetMultimap with keys and immutable sets of values
2388 Converts Properties to ImmutableMap. @param properties source Properties object @return ImmutableMap with key-value pairs from Properties
2389 Creates an index map from a collection. @param list the input collection @return ImmutableMap with elements as keys and their indices as values
2390 Builds and returns an immutable map from the builder. @return ImmutableTypeToInstanceMap object containing built mappings
2391 Creates a new TypeTable with additional mappings. @param mappings map of TypeVariableKey to Type @return new TypeTable instance with updated mappings
2392 Converts an iterator of keys to an ImmutableMap using a value function. @param keys Iterator of keys @param valueFunction Function to generate values from keys @return ImmutableMap with keys and computed values, preserving last entries for duplicates
2393 Returns a view of the portion of this map whose keys range from fromKey (inclusive) to toKey (exclusive). @param fromKey low endpoint (inclusive) of the returned map @param toKey high endpoint (exclusive) of the returned map @return ImmutableSortedMap containing the specified range of keys and their corresponding values
2394 Collects elements into an ImmutableSortedMap. @param comparator for sorting keys @param keyFunction extracts map keys from elements @param valueFunction extracts map values from elements @param mergeFunction merges values with the same key @return ImmutableSortedMap with sorted keys
2395 Removes and returns the last element. @return the last element or null if empty
2396 Removes and returns the last element. Throws NoSuchElementException if list is empty.
2397 Converts delegate to an immutable set. @return ImmutableSet containing elements from the delegate
2398 Checks if this type is a supertype of another. @param type the type to check against @return true if this type is a supertype, false otherwise
2399 Checks if this type is a supertype of the given type. @param type the type to check against @return true if this type is a supertype of the given type, false otherwise
2400 Checks if this type is a subtype of the specified type. @param type the TypeToken to compare against @return true if this type is a subtype, false otherwise
2401 Drains reference queues for keys and values. Ensures proper cleanup of weak references.
2402 Filters a bi-map by keys using a predicate. @param unfiltered the original bi-map to filter @param keyPredicate predicate for filtering keys @return a new bi-map with entries that match the key predicate
2403 Filters entries in a BiMap by value. @param unfiltered the original BiMap to filter @param valuePredicate predicate for filtering values @return a new BiMap with filtered entries
2404 Creates an immutable sorted multiset from iterator elements using natural ordering. @param elements iterator of elements to include in the multiset @return ImmutableSortedMultiset with sorted elements
2405 Converts a class to its generic type token. @param cls the class to convert @return TypeToken representing the generic type
2406 Converts the delegate to an immutable multiset. @return ImmutableMultiset containing non-null elements from the delegate
2407 Builds an immutable multiset from current contents. @return ImmutableMultiset containing all elements
2408 Computes the Cartesian product of multiple lists. @param lists collection of lists to compute the product @return List of Lists containing all possible combinations
2409 Parses a cache builder specification string. @param cacheBuilderSpecification configuration string for cache settings @return CacheBuilderSpec object representing parsed settings
2410 Converts delegate to an immutable list. @return Immutable list of elements
2411 Lists files in a directory. @param dir directory path to list files from @return immutable list of file paths @throws IOException if an I/O error occurs
2412 Constructs an InternetDomainName object. @param name the domain name to be normalized and validated
2413 Combines multiple ListenableFutures into a single future containing their results. @param futures iterable of ListenableFutures to combine @return ListenableFuture with list of results or exceptions from input futures
2414 Combines multiple ListenableFutures into a single Future that completes when all input futures complete. @param futures iterable of ListenableFutures to combine @return FutureCombiner object representing the combined future state
2415 Combines multiple listenable futures to wait for all successful completions. @param futures collection of listenable futures @return FutureCombiner that aggregates results
2416 Combines multiple ListenableFutures into a single future that completes when all input futures succeed. @param futures iterable of ListenableFutures to combine @return ListenableFuture containing list of results or nulls if any input future fails
2417 Converts an Iterable of ListenableFutures to an array. @param futures iterable of ListenableFutures @return array of ListenableFutures
2418 Creates an immutable range set from the union of given ranges. @param ranges iterable collection of ranges to be combined @return ImmutableRangeSet containing all elements from input ranges
2419 Computes intersection of two range sets. @param other the second RangeSet to intersect with @return ImmutableRangeSet containing common ranges
2420 Computes the difference between this range set and another. @param other the range set to subtract from this one @return an ImmutableRangeSet representing the difference
2421 Collects elements into an ImmutableBiMap using provided key and value functions. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return ImmutableBiMap with keys and values extracted from elements
2422 Creates an immutable map from a given map. @param map input map with class keys and instances as values @return ImmutableClassToInstanceMap containing the same entries
2423 Creates an immutable copy of the given multimap. @param multimap the multimap to copy @return an ImmutableListMultimap containing the same mappings as the input
2424 Builds an immutable multimap. @return ImmutableMultimap instance based on builder settings
2425 Merges a range with a value using a remapping function. @param range the range to merge @param value the value to associate with the range @param remappingFunction function to determine new value
2426 Builds an immutable set multimap. @return ImmutableSetMultimap with entries sorted by key if comparator is provided
2427 Creates an immutable map from iterator values with unique keys. @param values iterator of values to index @param keyFunction function to extract keys from values @return ImmutableMap with unique keys or IllegalArgumentException if duplicates exist
2428 Generates all combinations of a given size from a set. @param set the input set @param size the size of each combination @return a set of sets containing all combinations
2429 Creates an immutable copy of the given graph. @param graph the original graph to copy @return an ImmutableGraph instance
2430 Creates a new TypeResolver with specified type mappings. @param mappings map of TypeVariableKey to resolved types @return new TypeResolver instance with updated mappings
2431 Converts iterable keys to an immutable map using a value function. @param keys the iterable of keys @param valueFunction the function to compute values from keys @return ImmutableMap with keys and computed values
2432 Retrieves and removes the first element of the queue. @return the head of this queue or null if it is empty
2433 Adds an element to the priority queue. @param element the element to add @return true if the element was added, false if it exceeded the max size
2434 Retrieves all ClassInfo objects from resources. @return ImmutableSet of ClassInfo instances
2435 Retrieves top-level classes from resources. @return Immutable set of ClassInfo objects representing top-level classes
2436 Performs breadth-first traversal starting from given nodes. @param startNodes initial set of nodes to start traversal @return Iterable for traversed nodes in breadth-first order
2437 Performs depth-first pre-order traversal starting from given nodes. @param startNodes initial nodes to begin traversal @return Iterable of nodes in pre-order sequence
2438 Performs depth-first post-order traversal. @param startNodes initial nodes to start traversal @return Iterable of nodes in post-order
2439 Scans files and returns resource information. @param scannedFiles set of files to scan @return ImmutableSet of ResourceInfo objects @throws IOException if file operations fail
2440 Returns a specialized invokable with the specified return type. @param <R1> the new return type parameter @param returnType the expected return type @return an Invokable with the specified return type @throws IllegalArgumentException if the specified type is not a supertype of the current return type
2441 Attempts to lock and process reference queues.
2442 Resolves the specified type to its actual type. @param type the type to resolve @return resolved Type object
2443 Checks if the runtime type matches the formal type or its wildcard bounds. @param formalType the declared type to compare against @param declaration the type variable declaration @return true if types match or are within wildcard bounds, false otherwise
2444 Canonicalizes a type argument. @param declaration the original type variable declaration @param typeArg the type argument to canonicalize @return the canonicalized type argument
2445 Creates a CacheBuilder instance from a specification string. @param spec configuration string for the cache builder @return CacheBuilder object configured according to the spec
2446 Disables caching by setting maximum size to zero. @return CacheBuilderSpec with caching disabled
2447 Creates an InternetDomainName instance from a string. @param domain the domain name as a string @return InternetDomainName object
2448 Returns a list of futures that complete in the order they finish. @param futures iterable of listenable futures to be ordered @return immutable list of futures completing in input order
2449 Returns the union of this range set and another. @param other the RangeSet to be unioned with this set @return an ImmutableRangeSet containing all ranges from both sets
2450 Creates an immutable copy of a given multimap. @param multimap the original multimap to copy @return an ImmutableMultimap containing the same entries as the input
2451 Builds and returns an immutable list multimap. @return Immutable list multimap containing all entries
2452 Converts a stream of objects to an ImmutableMap. @param keyFunction function extracting map keys @param valueFunction function extracting map values @return Collector for creating ImmutableMap
2453 Creates an ImmutableSetMultimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableSetMultimap containing the specified key-value pair
2454 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableSetMultimap containing the specified entries
2455 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return ImmutableSetMultimap containing the specified entries
2456 Creates an immutable set multimap from key-value pairs. @param k1,k2,k3,k4 keys for the entries @param v1,v2,v3,v4 values for the entries @return ImmutableSetMultimap containing the specified entries
2457 Creates an ImmutableSetMultimap with five key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @param k5 fifth key @param v5 value for the fifth key @return ImmutableSetMultimap containing the specified entries
2458 Creates an immutable set multimap from given entries. @param entries iterable of key-value pairs @return ImmutableSetMultimap containing the provided entries
2459 Creates an immutable copy of a given multimap. @param multimap the source multimap to copy @return ImmutableSetMultimap instance containing the same key-value pairs
2460 Creates an immutable map from iterable values using a key function. @param values the iterable source of values @param keyFunction the function to extract keys from values @return ImmutableMap with unique keys derived from values
2461 Creates a new ArrayTable with specified rows and columns. @param rowKeys iterable of row keys @param columnKeys iterable of column keys @return ArrayTable instance initialized with the given keys
2462 Generates the power set of a given set. @param set input set whose power set is to be generated @return a set containing all possible subsets of the input set
2463 Creates an immutable table based on ordered components. @param cellList list of cells with row, column, and value @param rowSpace set of row keys @param columnSpace set of column keys @return RegularImmutableTable instance using either dense or sparse representation
2464 Builds an immutable graph from the mutable one. @return ImmutableGraph instance created from mutableGraph
2465 Creates an immutable copy of a given network. @param network the original network to copy @return an ImmutableNetwork instance
2466 Returns an immutable copy of the given graph. @param graph the original ValueGraph to copy @return an ImmutableValueGraph instance
2467 Creates a type resolver with covariant mappings. @param contextType the base type to introspect @return a TypeResolver configured with covariant mappings
2468 Creates an invariant type resolver. @param contextType the context type to capture @return a TypeResolver with captured mappings
2469 Resolves type by mapping formal to actual. @param formal the formal Type @param actual the actual Type @return a TypeResolver instance with resolved mappings
2470 Converts delegate elements to a map using a value function. @param valueFunction maps each element to its corresponding value @return ImmutableMap with non-null keys and values
2471 Creates a MinMaxPriorityQueue with initial contents. @param initialContents iterable of elements to add initially @return MinMaxPriorityQueue containing the specified elements
2472 Adds an element to this collection. @param element the element to add @return always true, as per Collection contract
2473 Retrieves top-level classes within a specified package. @param packageName the name of the package to search @return an ImmutableSet of ClassInfo objects for the package
2474 Retrieves top-level classes within a package recursively. @param packageName the base package name to search in @return an ImmutableSet of ClassInfo objects matching the package
2475 Performs breadth-first traversal starting from given node. @param startNode the initial node to start traversal @return an iterable of nodes in breadth-first order
2476 Performs depth-first pre-order traversal starting from given node. @param startNode initial node for traversal @return iterable of nodes in depth-first pre-order
2477 Performs depth-first post-order traversal starting from a given node. @param startNode the initial node to start traversal @return Iterable of nodes in post-order sequence
2478 Scans resources and returns an immutable set. @throws IOException if an I/O error occurs during scanning
2479 Constructs a ClassPath from the given ClassLoader. @param classloader the ClassLoader to scan @return a ClassPath object representing the scanned resources @throws IOException if an I/O error occurs during scanning
2480 Specifies the return type of an invokable. @param returnType the expected return type class @return Invokable with specified return type
2481 Retrieves the live value from a cache entry. @param entry the ReferenceEntry to fetch the value from @param now current timestamp in milliseconds @return the live value if not expired, otherwise null
2482 Performs cleanup operations before writing. @param now current timestamp in milliseconds
2483 Resolves a type variable using given bounds and dependencies. @param var the type variable to resolve @param forDependants table of dependent types @return resolved Type or original if no change
2484 Retrieves the generic return type of a method. @return Type representing the generic return type or raw class if none
2485 Resolves and returns a serializable type representation. @return Serializable type object
2486 Creates a traverser for file system paths. @return Traverser instance for navigating file trees
2487 Creates a HostSpecifier from a valid string. @param specifier host specification string @return HostSpecifier object or throws if invalid
2488 Retrieves an ancestor domain by removing specified levels. @param levels number of levels to remove from the current domain @return InternetDomainName object representing the ancestor domain
2489 Creates a child domain name. @param leftParts additional parts to prepend @return new InternetDomainName with added parts
2490 Validates domain name format. @param name domain name to validate @return true if valid, false otherwise
2491 Collects elements into an ImmutableListMultimap. @param keyFunction extracts the key from each element @param valuesFunction extracts a stream of values from each element @return Collector that groups elements by keys with list of values
2492 Creates an immutable multimap with a single key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableListMultimap containing the key-value pair
2493 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMultimap containing the specified entries
2494 Creates an immutable multimap with three key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return Immutable multimap containing specified entries
2495 Creates an immutable multimap with four key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @return Immutable multimap containing the specified entries
2496 Creates an immutable multimap with five key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @param k4 fourth key @param v4 value for the fourth key @param k5 fifth key @param v5 value for the fifth key @return ImmutableMultimap containing the specified key-value pairs
2497 Creates an immutable multimap from the given entries. @param entries iterable of key-value pairs @return Immutable list multimap containing the entries
2498 Indexes values by applying a key function. @param values iterator of values to index @param keyFunction function to extract keys from values @return ImmutableListMultimap with indexed values
2499 Creates a new MediaType with additional parameters. @param attribute parameter key to add @param values iterable of parameter values for the key @return new MediaType instance with updated parameters
2500 Collects elements into an ImmutableSetMultimap. @param keyFunction extracts the key from each element @param valueFunction extracts the value from each element @return ImmutableSetMultimap with extracted keys and values
2501 Returns the inverse of this multimap. @return ImmutableSetMultimap with keys and values swapped
2502 Marks the service manager as ready. Throws an exception if services have transitioned asynchronously.
2503 Returns a multimap of services grouped by their states. @return ImmutableSetMultimap with State as key and Set of Services as value
2504 Creates an immutable map from elements using a key function. @param keyFunction extracts keys from elements @return ImmutableMap with elements indexed by keys
2505 Creates an ArrayTable from a given Table. @param table the source Table to convert @return a new ArrayTable instance
2506 Builds an immutable network from the mutable one. @return ImmutableNetwork object based on current state of mutableNetwork
2507 Builds an immutable graph from the mutable one. @return ImmutableValueGraph instance
2508 Initializes a TypeToken with the specified declaring class. @param declaringClass the class declaring the generic type
2509 Creates an empty MinMaxPriorityQueue. @return MinMaxPriorityQueue instance with no initial elements
2510 Creates a MinMaxPriorityQueue with natural ordering. @param initialContents elements to initialize the queue @return MinMaxPriorityQueue instance
2511 Finds all nodes reachable from a given node in a graph. @param graph the graph to traverse @param node the starting node @return an immutable set of reachable nodes
2512 Retrieves an entry by key without affecting recency. @param key the key to look up @return ReferenceEntry object or null if not found
2513 Checks if an entry is live. @param entry the reference entry to check @param now current time in milliseconds @return true if the entry is live, false otherwise
2514 Inserts a loading value reference for the given key. @param key the key to insert @param hash the hash of the key @param checkTime whether to check refresh time @return LoadingValueReference or null if already loading or recently refreshed
2515 Increments read count and triggers cleanup periodically.
2516 Resolves a type variable using bounds and a dependency table. @param var the type variable to resolve @param forDependants the dependency table for resolving dependent types @return resolved type or original if no new bounds are found
2517 Executes a callable with resources management. @param combiningCallable the callable to execute @param executor the executor for running the callable @return ClosingFuture object managing closeables
2518 Executes an asynchronous callable with a combiner. @param combiningCallable the callable to execute asynchronously @param executor the executor to run the callable @return ClosingFuture representing the result of the async operation
2519 Parses a string into a HostSpecifier. @param specifier string representation of the host specifier @return HostSpecifier object @throws ParseException if the specifier is invalid
2520 Validates host specifier string. @param specifier the string to validate @return true if valid, false otherwise
2521 Retrieves the public suffix of the domain. @return InternetDomainName object representing the public suffix, or null if none exists
2522 Retrieves the top private domain. @return InternetDomainName object representing the top private domain
2523 Retrieves the registry suffix of the domain. @return InternetDomainName object representing the registry suffix, or null if none exists
2524 Returns the top-level domain under the registry suffix. @return InternetDomainName representing the top domain
2525 Returns the parent domain of the current domain. @return InternetDomainName object representing the parent domain @throws IllegalStateException if the current domain has no parent
2526 Collects elements into an ImmutableListMultimap. @param keyFunction extracts keys from elements @param valueFunction extracts values from elements @return Collector for ImmutableListMultimap
2527 Creates an immutable multimap with one key-value pair. @param k1 the key @param v1 the value associated with the key @return an ImmutableMultimap containing the specified key-value pair
2528 Creates an immutable multimap with two key-value pairs. @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @return ImmutableMultimap containing the specified entries
2529 Creates an immutable multimap with three key-value pairs. @param <K> the type of keys @param <V> the type of values @param k1 first key @param v1 value for the first key @param k2 second key @param v2 value for the second key @param k3 third key @param v3 value for the third key @return an ImmutableMultimap containing the specified entries
2530 Creates an immutable multimap from key-value pairs. @param k1,k2,k3,k4 keys for the map entries @param v1,v2,v3,v4 values corresponding to the keys @return ImmutableMultimap containing specified key-value pairs
2531 Creates an immutable multimap from key-value pairs. @param k1,k2,k3,k4,k5 keys for the multimap entries @param v1,v2,v3,v4,v5 values corresponding to each key @return ImmutableMultimap containing specified key-value pairs
2532 Creates an immutable multimap from given entries. @param entries iterable of key-value pairs @return ImmutableMultimap containing the provided entries
2533 Returns the inverted multimap. @return inverted ImmutableListMultimap where keys and values are swapped
2534 Creates an immutable multimap from iterable values using a key function. @param values iterable of elements to index @param keyFunction function to extract keys from elements @return ImmutableListMultimap with indexed values
2535 Adds a parameter to the media type. @param attribute parameter name @param value parameter value @return new MediaType instance with added parameter
2536 Creates a new MediaType instance with additional parameters. @param parameters map of media type parameters @return new MediaType object with updated parameters
2537 Creates a MediaType object with specified type and subtype. @param type the primary MIME type @param subtype the secondary MIME subtype @return MediaType instance without parsed charset
2538 Parses a media type string into a MediaType object. @param input the media type string to parse @return a MediaType object representing the parsed media type
2539 Initializes ServiceManager with a collection of services. @param services iterable collection of Service instances
2540 Collects elements into an ImmutableSetMultimap. @param keyFunction extracts the key from each element @param valuesFunction extracts a stream of values from each element @return ImmutableSetMultimap with keys and collected values
2541 Resolves the type using an invariant type resolver. @param type the type to be resolved @return TypeToken representing the resolved type
2542 Creates a MinMaxPriorityQueue with natural ordering. @return MinMaxPriorityQueue instance
2543 Refreshes cache entry for a key. @param key key to refresh @param hash hash of the key @param loader function to load new value @param checkTime whether to check time-based expiration @return refreshed value or null if not available immediately
2544 Retrieves and records statistics for a cache entry. @param key the cache key @param hash hash code of the key @param loadingValueReference reference to the loading value @param newValue future representing the new value to be loaded @return the loaded value @throws ExecutionException if an error occurs during execution
2545 Advances to the next live entry. @param entry reference to the entry to check @return true if a live entry is found, false otherwise
2546 Checks if the map contains a value equivalent to the specified object. @param value the value to search for @return true if a matching value is found, false otherwise
2547 Creates an immutable multimap by indexing elements with a key function. @param keyFunction function to extract keys from elements @return ImmutableListMultimap of elements indexed by keys
2548 Creates a new MediaType with the specified Charset. @param charset the character set to be associated with this media type @return a new MediaType instance with the given charset
2549 Returns media type without parameters. @return new MediaType without parameters or current instance if none exist
2550 Creates an application media type with the specified subtype. @param subtype the specific subtype of the application media type @return a MediaType object representing the application type
2551 Creates an audio media type. @param subtype specific audio subtype (e.g., "mpeg") @return MediaType object representing the audio type
2552 Creates a font media type. @param subtype specific font subtype @return MediaType object representing the font type
2553 Creates an image media type with a specified subtype. @param subtype specific image subtype (e.g., "png", "jpg") @return MediaType object representing the image type
2554 Creates a text media type with a specified subtype. @param subtype the specific subtype of the text media type @return a MediaType object representing the text subtype
2555 Creates a video media type. @param subtype specific video subtype (e.g., "mp4", "avi") @return MediaType object representing the video type
2556 Builds an ImmutableTable from cells. @return ImmutableTable constructed from cells or throws if invalid
2557 Retrieves the generic superclass type token. @return TypeToken representing the superclass or null if none exists
2558 Retrieves generic interfaces for the current type. @return ImmutableList of TypeToken representing generic interfaces
2559 Retrieves the supertype for a given class. @param superclass the superclass to check against @return the TypeToken of the supertype or throws an exception if not found
2560 Loads multiple cache entries using a loader. @param keys set of keys to load @param loader CacheLoader to use for loading values @return map of loaded key-value pairs or null if any error occurs @throws ExecutionException if loading fails
2561 Advances to the next valid entry in a chain. @return true if a valid entry is found, false otherwise
2562 Builds an immutable table. @return ImmutableTable instance
2563 Advances to the next entry in the table or chain. @return true if a valid entry is found, false otherwise
2564 Retrieves the subtype for a given class. @param subclass the subclass to retrieve the type token for @return TypeToken representing the subclass or null if not applicable
2565 Creates an immutable copy of the given table. @param table the table to copy @return an ImmutableTable instance
2566 Collects elements into an ImmutableTable. @param rowFunction extracts row key from element @param columnFunction extracts column key from element @param valueFunction extracts value from element @return Collector that gathers elements into an ImmutableTable
